---

title: Animated audiovisual experiences driven by scripts
abstract: In an embodiment, a computerized method comprises receiving a meta-language file comprising a conversion of a script file in a natural language format, the script file including a plurality of natural language statements; interpreting, by a first computing device, the meta-language file to execute at least a first portion of the meta-language file; dynamically generating and displaying, on the first computing device, one or more visually animated graphical elements in accordance with the execution of at least the first portion of the meta-language file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09478059&OS=09478059&RS=09478059
owner: PocketGems, Inc.
number: 09478059
owner_city: San Francisco
owner_country: US
publication_date: 20140728
---
The present disclosure relates to scripted stories. The disclosure relates more specifically to computer implemented techniques for creation and automatic performance of scripted stories in audiovisual format.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Stories in script form are typically written by scriptwriters in plain text a script specifying the characters dialog backgrounds props director or stage directions and scenes of a story. In order for a script to be performed or acted out time effort and resources are required. Among other things backgrounds and sets may need to be built props and costumes acquired actors are needed to play the characters a director is required to coordinate the actors stagehands and other persons involved as specified by the script and the like. Each change in the script in turn requires a corresponding change in the performance of the script.

In a computerized environment characters may be represented as avatars and the avatars may be programmed to speak dialog move a certain way or otherwise serve as substitutes for human actors. Typically technical persons such as computer programmers or coders write program code to specify avatars and their performance actions. Such program code is in computer programming languages that are not familiar to non technical writers such as scriptwriters. Although scriptwriters are the experts in writing a story in script form as opposed to computer programmers scriptwriters likely lack the requisite computer programming knowledge to write a story in script form in computer programming languages capable of generating avatar performances.

For laypersons not versed in scriptwriting or computer programming it is even more difficult to easily write a story in script form and have it easily and quickly performed with all the elements specified in the script.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment a computerized method comprises receiving a meta language file comprising a conversion of a script file in a natural language format the script file including a plurality of natural language statements interpreting by a first computing device the meta language file to execute at least a first portion of the meta language file dynamically generating and displaying on the first computing device one or more visually animated graphical elements in accordance with the execution of at least the first portion of the meta language file.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more dialog natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated characters that speaks according to the one or more dialog natural language statements.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more dialog natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated speech bubbles according to the one or more dialog natural language statements.

In an embodiment the computerized method further comprises wherein the one or more dialog natural language statements is associated with a narrator of a story.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more character movement control natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated characters moving according to the one or more character movement control natural language statements.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more stage direction natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated characters located within a graphical setting according to the one or more stage direction natural language statement.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more character behavior natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated characters performing particular behavior actions according to the one or more character behavior natural language statement.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more background natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated backgrounds according to the one or more background natural language statement.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more character outfit natural language statements and wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying one or more visually animated characters wearing one or more respective clothing and accessories according to the one or more character outfit natural language statement.

In an embodiment the computerized method further comprises wherein the plurality of natural language statements included in the script file comprises one or more audio natural language statements and further comprising dynamically generating and audibly presenting one or more audio elements according to the one or more audio natural language statements.

In an embodiment one or more non transitory machine readable media storing instructions which when executed by one or more processors cause performance comprising receiving a meta language file comprising a conversion of a script file in a natural language format the script file including a plurality of natural language statements interpreting by a first computing device the meta language file to execute at least a first portion of the meta language file dynamically generating and displaying on the first computing device one or more visually animated graphical elements in accordance with the execution of at least the first portion of the meta language file.

In an embodiment the one or more non transitory machine readable media further comprises wherein dynamically generating and displaying comprises dynamically generating and displaying one or more visually animated avatars representative of respective one or more characters specified in the script file.

In an embodiment the one or more non transitory machine readable media further comprises wherein the meta language file comprises a JavaScript Object Notation JSON file.

In an embodiment the one or more non transitory machine readable media further comprises wherein the instructions when executed by the one or more processors further cause performance comprising generating the script file based on user input of the plurality of natural language statements.

In an embodiment the one or more non transitory machine readable media further comprises wherein the user input is provided on the first computing device or a second computing device that is different from the first computing device.

In an embodiment the one or more non transitory machine readable media further comprises wherein the instructions when executed by the one or more processors further cause performance comprising receiving one or more supporting files wherein interpreting the meta language file comprises using the one or more supporting files to identify one or more graphical representations corresponding to the one or more visually animated graphical elements wherein dynamically generating and displaying comprises dynamically rendering at runtime the one or more graphical representations in accordance with the meta language file to dynamically display the one of more visually animated graphical elements.

In an embodiment the one or more non transitory machine readable media further comprises wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying a character image dynamically generating and displaying one or more animated images of individual moving body parts of the character without re generating or re displaying the entire character.

In an embodiment the one or more non transitory machine readable media further comprises wherein the one or more visually animated graphical elements comprise one or more user interface UI commands associated with presenting one or more listings of a plurality of available story representations in a story catalog each of the plurality of available story representations corresponding to a respective animated story.

In an embodiment the one or more non transitory machine readable media further comprises wherein the plurality of natural language statements in the script file includes one or more references to web pages wherein interpreting the meta language file comprises interpreting the meta language file to execute a second portion of the meta language file associated with the one or more references to web pages wherein dynamically generating and displaying comprises dynamically generating and displaying one or more web pages in accordance with the execution of the second portion of the meta language file.

In an embodiment the one or more non transitory machine readable media further comprises wherein the plurality of natural language statements in the script file includes one or more monetization commands and wherein dynamically generating and displaying comprises dynamically generating and displaying the one or more visually animated graphical elements to use virtual or real currency by a user interfacing with the first computing device.

In an embodiment the one or more non transitory machine readable media further comprises wherein the one or more monetization commands includes one or more counter commands to selectively alter a state value associated with the user to control access to one or more portions of the script file by the user.

In an embodiment the one or more non transitory machine readable media further comprises wherein the plurality of natural language statements in the script file includes one or more choice commands and wherein the instructions when executed by the one or more processors further cause performance comprising receiving at the first computing device a user selection of a choice from among at least a first choice and a second choice associated with the one or more choice commands at least the first and second choices presented as the one or more visually animated graphical elements in response to receiving the first choice as the user selected choice interpreting the meta language file comprising interpreting the meta language file to execute the first portion of the meta language file corresponding to a first branch associated with the first choice and dynamically generating and displaying comprising dynamically generating and displaying one or more first visually animated graphical elements in accordance with the execution of the first portion of the meta language file corresponding to the first branch associated with the first choice in response to receiving the second choice as the user selected choice interpreting the meta language file to execute a second portion of the meta language file corresponding to a second branch associated with the second choice and dynamically generating and displaying one or more second visually animated graphical elements in accordance with the execution of the second portion of the meta language file corresponding to the second branch associated with the second choice.

In an embodiment the one or more non transitory machine readable media further comprises wherein the instructions when executed by the one or more processors further cause performance comprising saving the user selected choice for use in dynamically generating and displaying an another portion of the meta language file or an another meta language file associated with an another script file that is different from the script file.

In an embodiment one or more non transitory machine readable media storing instructions which when executed by one or more processors cause performance comprising dynamically generating and displaying at a first computing device one or more visually animated graphical elements in accordance with script data wherein the script data comprises one or more dialog statements and at least one of one or more character movement control statements and one or more character animation statements one or more stage direction statements composed in natural language syntax wherein the one or more visually animated graphical elements comprise one or more speech bubbles according to the one or more dialog statements.

In an embodiment the one or more non transitory machine readable media further comprises wherein the instructions when executed by the one or more processors further cause performance comprising receiving at the first computing device the script data or representation of the script data in response to a selection of the script data by a user responsive to the selection of the script data dynamically interpreting by the first computing device the script data or representation of the script data to render at least a first portion of the script data.

In an embodiment the one or more non transitory machine readable media further comprises wherein the representation of the script data comprises a translation of the script data in a computer readable format.

In an embodiment the one or more non transitory machine readable media further comprises wherein the instructions when executed by the one or more processors further cause performance comprising receiving the script data based on user input of the one or more dialog statements and at least one of the one or more character movement control statements and the one or more character animation statements composed in natural language syntax wherein dynamically generating and displaying are prevented until errors identified in an automatic testing of the script data are resolved in the script data.

In an embodiment the one or more non transitory machine readable media further comprises wherein the script data comprises at least one of 1 one or more user interface UI statements associated with dynamically generating and displaying one or more listings of a plurality of available story representations in a story catalog each of the plurality of available story representations corresponding to a respective animated story 2 one or more references to web pages associated with dynamically generating and displaying one or more web pages in accordance with the one or more references to the web pages and 3 one or more choice statements associated with dynamically generating and displaying one or more graphical choice elements for interaction with a user during the dynamically generating and displaying of the one or more visually animated graphical elements.

In an embodiment the one or more non transitory machine readable media further comprises wherein the script data comprises one or more audio natural language statements and wherein the instructions when executed by the one or more processors further cause performance comprising dynamically generating and audibly presenting one or more audio elements according to the one or more audio natural language statements.

In an embodiment the one or more non transitory machine readable media further comprises wherein dynamically generating and displaying the one or more visually animated graphical elements comprises dynamically generating and displaying a character image dynamically generating and displaying one or more animated images of individual moving body parts of the character without re generating or re displaying the entire character.

In some embodiments any combination of features and or sub features of the above methods and or instructions stored in non transitory machine readable media are possible to form new combinations of methods non transitory machine readable media storing instructions and apparatus for performing the methods. Thus the present disclosure is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

In one embodiment a computer implemented method enables creation of script files in a scripting language having natural language scripting elements and interactive if then logic elements. The natural language scripting elements may include dialog character movement character placement character outfit changes background control camera control audio control and the like. The if the logic elements may include interactive choices branching and complex branching operations. Each script file may be automatically transformed into a meta language file that is executable on a client device. The script file the corresponding meta language file and or character definitions also may be used to generate one or more data tables to support the meta language file. Character definitions may be specified using a GUI environment that is separate from script creation.

In an embodiment in response to a user request at a mobile device for a particular chapter of a story which corresponds to a particular script file a file package may be automatically generated for transmission to the mobile device. The file package may include the meta language file corresponding to the particular script file and one or more supporting files or data. The mobile device at runtime dynamically animates visual and or audio elements in accordance with the meta language file and the one or more supporting files or data. The animated audiovisual experience comprises a performance of acting out of the scripted chapter story. During performance of the scripted chapter story the animation may be user interactive. The performance may be dynamically customized based on the user response s . Other embodiments may operate using a single computer and do not require a separate authoring computer and mobile device or other second computer.

The scripting language may be configured for use in areas outside of scriptwriting. Possible uses include but are not limited to scripts configured to provide a user interface UI on the mobile device for consuming stories scripts configured to control access to the stories from mobile devices by enforcing a monetization policy scripts configured to reference web pages and the like. A scripting portal may provide a wealth of supporting services to facilitate easy use and quality scripts.

Various modifications to the embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. Moreover in the following description numerous details are set forth for the purpose of explanation. However one of ordinary skill in the art will realize that embodiments of the invention may be practiced without the use of these specific details. In other instances well known structures and processes are not shown in block diagram form in order not to obscure the description of the invention with unnecessary detail. Thus the present disclosure is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

System includes a server computer or server a database one or more client computers or clients and a network . Each of the server database and clients is in wired or wireless communication with the network .

Server comprises one or more servers computers processors database servers web server and or computing devices configured to communicate with the database and or clients via network . The server facilitates performance of the techniques described herein. Server hosts one or more applications websites portals or other visual or user interface mechanisms related to animated audiovisual experiences driven by scripts as described in detail below. Server may be located at one or more geographically distributed locations. Although one server is shown in system may depending on the embodiment comprise one two or any number of servers which may work alone and or collectively to provide the functionality described herein.

Database comprises one or more databases or storage devices configured to store and maintain data and or instructions for use by server and or clients as described herein. Database may in some embodiments be located at one or more geographically distributed location relative to server . Server and or clients may in some embodiments access database via network . Alternatively server may access database without needing network . As another alternative database may be included within server . System may depending on the embodiment comprise one two or any number of databases configured to individually and or collectively store the data described herein.

Clients comprise computing devices including but not limited to work stations personal computers general purpose computers laptops Internet appliances handheld devices wireless devices wired devices portable devices wearable computers cellular or mobile phones portable digital assistants PDAs smart phones tablets multi processor systems microprocessor based or programmable consumer electronics game consoles set top boxes network PCs mini computers and the like. An individual one of the clients is denoted as a client client client client or a client . Each of the clients includes applications app software and or other executable instructions to facilitate various aspects of the techniques described herein. At least a few of the clients include an interpreter app also referred to as an interpretation app a dedicated application for facilitating animated audiovisual experiences driven by scripts downloaded from server . Others of the clients include a web browser application and or the interpreter app. Clients may also include additional applications or other interface capabilities to communicate with the server and or database . Clients may depending on the embodiment be located geographically dispersed from each other. Although four clients are shown in more or less than four clients may be included in system . Clients are also referred to as devices requesting devices requesting clients requestors and the like.

Network comprises a communications network such as a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN an ad hoc network an intranet an extranet a virtual private network VPN a portion of the Internet the Internet a portion of a public switched telephone network PSTN a cellular network or a combination of two or more such networks. When network comprises a public network security features e.g. VPN SSL secure transport may be included to ensure authorized access within system .

Data objects may include without limitation script files JSON files chapter CSV files and other files . The script files may comprise a plurality of chapter script files A B A B one or more client user interface UI script file one or more webviews script file and one or more access control script file also referred to as monetization script file . Script files A B A B may comprise stories written in script form using a scripting language by users and script files and comprise additional uses of the scripting language to enable other functionalities relating to animated audiovisual experiences.

Each scripted story may be organized in one or more chapters each chapter corresponding to a chapter script file. Each chapter script file may be associated with a chapter JSON file a chapter CSV file and one or more other files. As described in detail below chapter JSON files chapter CSV files and one or more other files may comprise translations of script files and character definitions into formats useable in runtime rendering of the corresponding animated audiovisual elements of a script e.g. act out or perform the scripted story .

Scripted story includes at least a chapter script file A for chapter 1 of the story and a chapter script file B for chapter 2 of the story. A chapter JSON file A and a chapter CSV file A correspond with chapter script file A. A chapter JSON file B and a chapter CSV file B correspond with chapter script file B. Similarly scripted story includes at least a chapter script file A for chapter 1 of the story and a chapter script file B for chapter 2 of the story. A chapter JSON file A and a chapter CSV file A correspond with chapter script file A. A chapter JSON file B and a chapter CSV file B correspond with chapter script file B.

In an alternative embodiment the various chapter CSV files e.g. chapter CSV files A B A B can be combined into a single chapter CSV file that is maintained as new chapter script files are created and or updated and which is associated with all of the chapter script files.

Although not shown each of the UI script file web view script file and access control script file has a corresponding JSON file and also in some instances one or more CSV files.

The other files include supporting files e.g. CSV files and or property list plist files such as a place CSV file a log file a user information file and library . The other files comprise data used to facilitate animation rendering system administration and user profile administration. Library includes a plurality of sound files music files audio files graphical image files e.g. avatars backgrounds outfits character animations or behavior files and the like. The plurality of files may be files pre defined by the server . At least some of the plurality of files may comprise user generated or user supplied files uploaded to the library in some embodiments.

Details regarding these data files are described in specific sections below. In this disclosure the term for a data file and the contents of the data file may be used interchangeably. For example the terms script file script data file and script may be used interchangeably herein.

System includes a user interface component an access control component a character component a scripting component a translation component a store component a test component a log component and a interpreter render component . In some embodiments components are included in the server and at least component is included in the interpreter app of one or more of clients . In other embodiments components are included in the server and components and are included in the interpreter app of one or more of clients .

The user interface component provides user interface functionalities to users interfacing with clients to enable writing scripts defining characters in the scripts receiving user inputs such as selection of a particular chapter to animate user authentication data user selection in response to conditionals presented during the animation and the like. In some embodiments one or more of the user interface functionalities at a rendering client may be performed by render interpreter component instead of user interface component .

The access control component relates to controlling user access to the system e.g. based on valid user login and password user access to specific scripts coordinating passes and virtual currency used in system monetization functionalities and the like. Character component relates to defining characters in each of a given script such as specifying avatars outfits character names and the like. Scripting component is involved in creation of scripts by users using a scripting language. The character definitions and written scripts are translated by the translation component into JSON and CSV files which are stored in database by store component .

When a script is first created the test component automatically performs one or more checks or tests on the created script to automatically flag errors inconsistencies incomplete creation and or other checks associated with proper rendering of the script in animation format. Test component may also facilitate enabling version control of scripts or pre publication and publication functionalities.

The JSON and CSV files corresponding to a given script are sent to the client requesting playback of the given script and they are rendered by the interpreter render component . As described in detail below the rendering is performed dynamically at runtime and may involve accessing additional data such as image files to perform the rendering. As the user views and or interacts with the audiovisual animation corresponding to the given script user interactions or actions taken in relation to the animation are logged by log component . Various files data and other items generated in the course of interpreting the files rendering the files interacting with the files selection of files and the like may also be logged by log component and stored in database in log file .

In one embodiment components comprise one or more software components programs applications or other units of code base or instructions configured to be executed by one or more processors included in the server and or a client . Although components are depicted as distinct components in components may be implemented as fewer or more components than illustrated. Any of components may communicate with one or more devices included in the system such as server database or clients .

Flow relates to functionalities provided in connection with a user that creates or writes a script such user referred to as an author user authoring user or author. Users that did not create a given script can also view performance of the given script once the given script is released for general access e.g. given script is designated as a published or production script . Performance of a script comprises rendering animated audio and or visual elements specified by the script. Users capable of viewing or viewing performance of a script are referred to as viewing users consuming users or viewer users. Flow is intended to be a high level overview. Additional details regarding blocks comprising flow are discussed in the sections below.

In an embodiment an author user accesses functionalities of blocks on a portal or website hosted by the server via a web browser application or an interpreter app included in a client . Block comprises the character component in conjunction with the user interface component configured to define the character s to be included in a script based on character specifics inputted by the author user. Character definition includes among other things naming a character selecting an avatar to graphically represent the character selecting avatar clothes selecting avatar accessories e.g. eyeglasses bag modifications if any to avatar hair color eye color etc. and the like. Block may be repeated one or more times for each character to be included in the script.

Block comprises the scripting component in conjunction with the user interface component configured to create a script in a scripting language. The author user writes the script typically a chapter of a story in a scripting language to be described in detail below.

Blocks comprise the translation component configured to automatically translate transform or convert the script and associated information e.g. character definitions into translated files. Block comprises automatic translation of the script in the scripting language to another programming language or format that is executable by machines. In an embodiment the script is translated to a JSON format to generate a JSON file also referred to as a structured interpretation file interpretation file translated file intermediate file or intermediation file . Block also comprises automatically translating the portions of the script or the corresponding JSON file specifying use of specific pre defined items such as a specific background sound music character animation outfit etc. to CSV format to generate a chapter CSV file and one or more possible other CSV files.

Block comprises the translation component automatically translating the character definitions characteristics e.g. avatar selection outfit avatar modifications etc. to a CSV format. The character definitions characteristics are generated independent of and outside of the script in an embodiment. The translated character definitions are included in a character CSV file associated with the script.

Blocks or may be optional if for example no intermediate file e.g. JSON file is used or the script includes no characters respectively.

In some embodiments the information comprising the chapter CSV file may be added to an existing chapter CSV file. A single chapter CSV file may be maintained for all of the chapter scripts.

The JSON formatted file chapter CSV file and character CSV file as necessary are collectively referred to as translated files corresponding to a script.

Although not shown each of these created data objects is stored in database by store component . For example in the translated files corresponding to the chapter script file A are the JSON file A and chapter CSV file A.

Block comprises the test component configured to automatically test or check the created script and or translated files for errors inconsistencies or other issues that may prevent rendering as animation. In an embodiment a two stage check is performed. The first stage comprises detecting errors in the created script itself such as incorrectly formatted script elements e.g. incomplete pairs of brackets or delineators . This may be similar to word processors automatically indicating spelling errors grammatical errors and the like. The second stage comprises detecting errors in the corresponding JSON file by running the test on the entire story associated with the created script due to states that may carry over between chapters of a given story. The second stage test includes among other things testing all possible combinations of if then logic and branching outcomes for possible logic failure. In an embodiment the second stage test occurs only after the errors detected in the first stage are corrected. This is to avoid unnecessarily generating JSON files of scripts that are already known to contain errors.

Block comprises the user interface component in conjunction with the test component providing the test results to the author user. If errors are found and or edits are desired to be made to the character definition s outfit definition s and or script for any reason yes branch of block then flow returns to block to enable edits by the author user. Otherwise no changes are made no branch of block and the script is ready for display as animation to at least the author user. At this point the script may be considered to be in a pre production or pre publication stage which means that the author user has full access to the script but non author users may not have access to and or be aware of the existence of the script. Alternatively the created script may immediately publish without going through a pre production or pre publication stage.

In an embodiment functionalities of blocks are performed by the interpreter app or a simulator application included in a client . The particular client used by the author user in connection with blocks can be the same client or a different client used in connection with blocks . In the same or single client usage case the client may be a laptop or desktop. For example on client the author user accesses the portal website hosted on the server via a web browser application included in the client in connection with functionalities of blocks e.g. script creation and uses a simulator application included in the client in connection with functionalities of blocks e.g. viewing animation of the created script . In the same or single client usage case the client may be a tablet smart phone handheld device or mobile device. As another example on client the author user accesses the portal website hosted on the server via a web browser application included in the client in connection with functionalities of blocks e.g. script creation and uses an interpreter app included in the client in connection with functionalities of blocks e.g. viewing animation of the created script . In the different or two client usage case a script creation client may be a laptop or desktop and a script animation client may be a tablet smart phone handheld device or mobile device. For example the author user accesses the portal website hosted on the server via a web browser application included in the client in connection with functionalities of blocks and uses an interpreter app included in a different client device client in connection with functionalities of blocks e.g. viewing animation of the created script .

Whether one two or more clients are used to create and view animation of scripts the client used by the author user to create a script may be referred to as an authoring client authoring client device authoring computing device writer client writer client device writer computing device script creation client script creation client device script creation computer device and the like. Similarly the client used by the author user or non author user to view the animation of a script may be referred to as a reader client reader client device reader computing device viewing client viewing client device viewing computing device and the like.

Block comprises the author user selecting the created script to read and requesting the created script to be animated. The author user may wish to preview how the created script turned out and after viewing the result edit the script. A UI for interfacing with the author user may be locally provided at the client side. In some embodiments to be described in detail below the UI may be implemented using a JSON file and one or more CSV files associated with the client UI script file .

In response the server obtains and packages the files for animating the selected script. Block comprises the interpreter render component configured to receive the file package. The file package includes a JSON file a corresponding chapter CSV file one or more supporting files e.g. supporting files and in some instances a portion or all of the contents of the library . If the necessary portions of or contents of library are already maintained in client used to view the created script such content need not be packaged with the files. The file package is dynamically downloaded to the client of interest and without any pre configuration in preparation of rendering the animation. Alternatively in some embodiments the first chapter of a story may be pre configured and or pre loaded for faster rendering.

Block comprises the interpreter render component configured to interpret the file package at runtime to render or display the selected script in animation format. Block comprises the interpreter render component configured to dynamically render animated audiovisual elements e.g. visually animated characters visually animated backgrounds audio visually animated character outfits visually animated character animation behavior visually animated speech bubbles etc. corresponding to the script at runtime. The JSON file is executed at runtime finding the necessary supporting or underlying data in the other files of the file package. illustrates an example screen showing an animated display on a client corresponding to a certain point in time in the runtime of the selected script. The screen includes a background a first character a second character and a speech bubble associated with the first character . Each of the first and second characters is represented by a particular avatar wearing a particular outfit e.g. clothes and accessories as specified by the authoring user in block .

If the script includes one or more interactive choices or branching logic the author user interacts with the animation to continue viewing the story in block . In response to the interaction action s the interpreter render component adjusts the animation in block .

During occurrence of blocks one or more state data user inputs client response server response and other information about the session are logged in block . The log data is uploaded to server for storage in the log file . In some embodiments the log data can be used to enable consistency or persistence of interactive choice response s across more than one script e.g. an interactive choice response made in a first script impacts the particular animation of a second script .

Blocks associated with viewing animation of a script is also applicable to viewing users in general at their respective clients . When a viewing user including a non author user selects a particular chapter or story within a story catalog presented to the viewing user performance of blocks occurs. In some embodiments as described below the viewing user is able to view animation of a chapter script upon satisfying one or more criteria e.g. valid user login having sufficient number of viewing passes etc. .

Although blocks are shown in a certain order it is contemplated that one or more of the blocks can be performed simultaneously or in a different order than shown. For example block may be performed prior to blocks if the testing comprises checking the script. As another example block may occur throughout the session e.g. during performance of blocks .

In alternative embodiments block may be omitted if the script is rendered as animation without use of a translated intermediate file e.g. a JSON file . In this case the file package received in block may include the script or representation of the script data that is not a translation to a different computer language and which retains the natural language syntax format of the scripting language. Blocks may comprise interpreting and displaying rendering using the script or representation of the script data and supporting files in the file package.

In an embodiment the characteristics of each character in a given chapter script are defined by the author user via a series of UI screens provided at the author user s client e.g. client from the server . Defining character s in block of may be performed using a series of UI screens.

Screen includes a characters icon to start specifying characteristics of a character or actor that will appear in chapter 1. Upon actuation of characters icon a screen of is displayed. Screen includes various UI elements to accept input of a character name in a character name input field and to select an avatar to graphically represent the character via an avatar selection element and or . In screen a character is named Michelle Lee and the Charlotte avatar is selected to represent the Michelle Lee character.

Although the selected avatar has certain default characteristics or attributes such as certain hair color skin color body shape and the like one or more of these default characteristics can be changed by the author user. shows a screen that includes various avatar characteristics that can be changed by selecting modification choices provided in dropdown fields . For example the avatar s hair color hair style face shape skin color eye shape eye color mouth shape mouth color body shape and the like may be modified from the default settings. Upon saving these selections the author user is returned to screen of .

The avatar s outfit can be specified by actuation of an outfits icon in . In response a screen in is displayed. Screen permits modifications to be made to the selected avatar s outfit. An avatar s outfit includes clothing shoes and accessories such as eyeglasses hair accessories and bag. The avatar s default outfit items are displayed along with outfit modification choices . Upon saving any changes the author user is returned to screen of .

Screens are repeated one or more times to define characteristics of all the characters to appear in the script. Once character definitions are complete writing the new story can commence by actuating a new episode icon in . In response a screen is displayed for the author user to compose the script. Screen includes a script input section and one or more scripting tools or aids to facilitate composing the script.

In an embodiment the scripts in the system are written in a particular scripting language. The particular scripting language also referred to as a script language is readily understandable and useable by non technical persons. The scripting language enables writing at least the dialog and stage actions in natural language syntax or format familiar in traditional script writing provides for enablement of user interaction and particular responses to user interactions during performance of the script e.g. choose your own adventure and expanded uses outside of scriptwriting. The scripting language facilitates automatic transformation to computer animation via use of an intermediation language such as JSON. In some embodiments the scripting language may be computer readable and executable and use of an intermediation language may be omitted.

The scripting language defines control of visual and or audio elements including dialog and stage actions in the performance of a script. The scripting language enables incorporation of character definitions or characteristics into an existing animation texture framework in which the character definitions are generated independently and outside of the script in the scripting language format. In a broad sense a script created in the scripting language resembles and reads like a movie or play script but has the benefit of automatic transformation into animation. As discussed in detail below the scripting language enables but is not limited to one or more of the following 

The scripting language includes quasi traditional cinematic scripting elements code elements and expanded use elements. Quasi traditional cinematic scripting elements comprise but are not limited to 

The scripting elements above excluding dialog may be collectively referred to as stage directions stage actions or director commands. The quasi traditional scripting elements are also referred to as statements scripting statements script statements or quasi traditional scripting elements. Accordingly dialog may be referred to as a dialog statement a stage action may be referred to as a stage action statement and the like.

Lastly expanded use elements comprise one or more commands to facilitate viewing of scripts and or to expand use of the scripting language to areas outside of storytelling. Expanded use elements include but are not limited to 

The creation of a chapter script in block of comprises creating the chapter script by combining a plurality of these scripting language elements in any number of ways to tell a story. An example chapter script of the Love Life story is set forth herein in Appendix A.

The character name is in all capitalized letters and each line of dialog starts with a capitalized letter. Each line of dialog in the dialog code is rendered as a new speech bubble.

During creation of a script the author user has access to a plurality of pre defined character animations character behaviors music sound audio backgrounds outfits and the like to select from for inclusion in the script. The plurality of pre defined items is organized as respective files in the library included in database . An example of a portion of the library items available is shown on the right side of screen in .

A plurality of character placement positions is possible in a scene. There are five default POSITIONS for character placement or position on the screen screen left upscreen left screen center upscreen right and screen right. To place a character on screen in a certain position the character placement code is formatted as follows 

Characters can also be placed on or off screen by entering or exiting a scene. The code format to have a character walk onto the screen comprises 

Characters can also move around the scene. The code format to have a character move around the scene comprises 

The default camera position is in zone 1. To move the camera to different zone the camera can be panned from the current zone to a new zone using the following format 

A zoom command enables zooming in out on characters and to cut and pan between close ups of characters. Once at a certain zoom level the perspective remains unchanged until the zoom level is changed. The zoom command format is as follows 

To cut to a ZOOM or between characters the zoom command is used with a duration of zero. Example of cutting to 150 zoom level 

To pan between characters the zoom command is used to zoom to the character desired to pan to with the same ZOOM as the character currently zoomed in on with a desired DURATION 

A zoom DURATION of 0.5 2 and 3 are respectively considered to be fast standard and slow. A ZOOM of 100 150 and 250 are respectively considered to be standard medium and close ups.

To have a character perform an action or animation while he she delivers a line specify a character action or behavior in parenthesis after the character name in the dialog code. An example is talk happy included next to the CHARACTER name above for the dialog code. To have a character perform an action without dialog the code format is as follows 

Stage directions formatted to start with a can be in compound form by using the AND construct between adjacent directions. An example of compound stage direction code from the example chapter script of the Love Life story comprises 

Code elements of the scripting language enable implementation of if then logic branching and persistent state functionalities not available in traditional scriptwriting. Use of if then logic and or branching allows the same user or different users to have different viewing experiences of the same version of a given script in different sessions. Use of if then logic and or branching also provides user interactive features during viewing of a script. This results in customization of the viewing experience for each user. The same if then logic and or branching are also operable to implement a client UI and or script access monetization policies of the system at the client side. Certain of code elements facilitate persistency of user interactive actions and selections in one part of a script to another part of a script in one chapter to another chapter of a story in one story to another story and or from one user to another user. Additional details of code elements are discussed below.

In alternative embodiments the scripting language may have additional commands or elements to facilitate storytelling and associated functionalities. For example the scripting language made define control of visual audio vibrational tactile and or other sensory receptive elements in the performance of a script. As another example rather than formulating character definitions separate from the script character definitions may be defined within the script.

As discussed above in connection with block of in one embodiment the server automatically translates transforms or converts a script created in scripting language to a file in meta language format. In an embodiment the meta language format comprises a JSON format. Each script is transformed to a JSON file comprising a list of nodes. Each node within a JSON file is uniquely identified. The server parses the script to identify and classify all of the scripting language elements present in the script based on the particular syntax and format associated with each of the various scripting language elements. For each type of the scripting language elements present in the script there is a corresponding node type. Once the type of node is identified for a given scripting element the discussion below sets forth the required content of the node with the content values specified within the given scripting element.

Each node is delineated from each other by delineator symbol s . The sequence of nodes is comma separated and each node in turn contains attributes within curly brackets. For each node there are a number of comma separated attributes within the curly brackets. Each of the comma separated attributes comprises a name value pair. The name of an attribute is a word or a single letter enclosed within quotation marks separated from the value of the attribute by a colon with the value of the attribute also enclosed within quotation marks.

One of the attributes of nodes is c which refers to the type of node. The type of node influences what other attributes may be present in the node. Types of nodes include the following 

In addition to the c k and e attributes above DirectorNode includes an action attribute. Each action attribute comprises a set of comma separated values enclosed in square brackets. Depending on the type of action attribute there may be different values included 

Examples of various types of nodes generated in accordance with the node constructs specified above are as follows 

The JSON file corresponding to the example chapter script of the Love Life story in Appendix A is set forth herein as Appendix B.

Translating the script in block of also may include identifying portions of the script or corresponding JSON file that specify items available from the library . The specified items can be without limitation identifiers of specific backgrounds outfits sounds music audio character animation behavior and the like. For example the EXT.HEARTATTACK2 DAY background identifier specified in the example chapter 1 of the Love Life story. The identified specified items among other things populate a chapter CSV file corresponding to the script JSON file. The identified specified items in the chapter CSV file comprise a list of identifiers of things e.g. backgrounds outfits audio character animation behaviors that are further identified resolved in other files e.g. place CSV file outfit CSV file character spot CSV file . In an embodiment a new chapter CSV file is created to correspond to a JSON file the new chapter CSV file containing only information associated with the script. In an another embodiment the specified items are added to an existing chapter CSV file the existing chapter CSV file maintaining a record of all of the scripts or all of the story scripts . The existing chapter CSV file may also be referred to as a composite or master chapter CSV file.

In block of the character definitions or characteristics specified by the author user e.g. using a separate UI input process are translated transformed or converted into a CSV format. The character definitions populate a character CSV file corresponding to the script JSON.

The chapter CSV file comprises a table of one or more record rows each record row associated with a particular chapter script. The table includes a plurality of columns to specify various data values associated with a particular chapter script. The columns comprise without limitation 

The chapter CSV file supports the JSON file by providing data values or translated data values not included in the JSON file.

In some instances the chapter CSV file may itself include data values that require a further look up. For example the places identifier column of the chapter CSV file contains plain text names of background images and not the underlying image file name necessary to retrieve and use the image file. To find the specific image file name corresponding to a particular background place name a place CSV file is provided. The place CSV file is a file maintained independent of the scripts. The place CSV file provides the specific image file name e.g. .jpg files and where applicable also the specific overlay image file name e.g. .png files of all the possible background place names available for use in a script. Each record row is associated with a particular background place. The columns of the table comprise without limitation 

An example place CSV file is set forth herein in Appendix D. As an example the Places identifier field of the chapter CSV file contains EXT.HEARTATTACK2 DAY as a background used in a script. To identify the actual image file for background EXT.HEARTATTACK2 DAY a look up is performed in the place CSV file to find HA Splashcreen.jpg is the actual image file name.

Similar to the discussion above for the place CSV file one or more other CSV files and or plists may exist and or be generated to support look up of underlying file names or items needed to animate the script. For example the character identifier in the chapter CSV file refers to an avatar body and an outfit each of which is a collection of images identified in another file. For a given script at least a corresponding JSON file and chapter CSV file exist. In addition one or more of the other CSV or equivalent files e.g. supporting files comprise but are not limited to a character CSV file a place CSV file an outfit CSV file a character spot CSV file an audio file and possible other files. With the exception of the character CSV file the remaining one or more of the other CSV or equivalent files may be non script specific and used across all scripts available in the story catalog. The place CSV file identifies underlying image files for respective backgrounds. The outfit CSV file identifies underlying image files for respective outfits. The character spot CSV file identifies the pixel or screen coordinates for respective character placement positions. The audio file identifies underlying audio files for respective outfits. In some embodiments the server generates one or more CSV files in response to a request to view a particular chapter on a client in addition to and or instead of generating them in connection with creation of the JSON file associated with the chapter requested.

The interpreter app on the client interprets and renders the animation specified by the chapter script dynamically and at runtime. The JSON file is interpreted at runtime a node at a time and dynamically reads in or consumes the CSV files which contain avatar identification clothing information physical appearances and the like . Dynamic look up of data contained in the CSV file occurs to find or expose the underlying file names e.g. exact image file names in .jpg format associated with items identified in the JSON file as necessary. With the underlying or exact file names of images and or audio exposed to the JSON file these underlying files are dynamically retrieved and dynamically loaded for dynamic rendering.

Character definitions characteristics are dynamically constructed at runtime without having to reload the other animation data. They are dynamically loaded for incorporation into an existing animation texture framework without having to know the character characteristics ahead of time. This is because there is separate configuration of characters from animation and texture data. The animation is built at runtime and takes as input the configuration information that is loaded dynamically. Thus among other things a limitless number of characters and or outfits can be introduced without changing anything in the binary and configuration file. The configuration file may also be changed to allow even more character and or outfit variations without changing the binary.

The resulting animation displayed on the client comprises animation with control of background characters positioning overlays movement dialog shown as speech bubbles sounds music execution of if then logic and branching and persistency states. In an embodiment the displayed animation comprises a type of animation referred to as paper doll animation. In paper doll animation animating a character for example is performed using a skeleton with different parts of the character s body rendered using respective different image representation files e.g. a hand is a first image file that is different from a body torso that is a second image file etc. . As the character moves in adjacent frames only those parts of the character s body that changes are re rendered or redrawn while the unchanging body parts are not re rendered or redrawn. In contrast with frame based animations the entire character and or frame may be re rendered or redrawn if the character moves in adjacent frames. Thus paper doll animation employed in the system is considerably more memory and or processor efficient. In an embodiment animations are cached to avoid costs of loading and the same animations can be used with different characters which reduces loading and memory resources .

The file package sent to the client to achieve such animation does not require any pre rendering processing at the server side to decrease processing requirements at the client side. Nor is the interpreter app on the client performing pre rendering processing prior to runtime.

In some embodiments the image files also referred to as image representations may be in one or more formats that are converted for use in paper doll animation techniques as described above.

Updates to a script can be immediately or nearly immediately pushed to update the client or immediately or nearly immediately provided in response to a user request for the updated script. This feature enables the author user to make iterative changes to his her script on client e.g. a web connected laptop or desktop and preview the change s in animation form in real or near real time on client e.g. a mobile device . In the context of reflection of script updates for non author users if a given script is updated while the given script is displaying on non author users client devices assuming that the updated script is authorized for general access the update is pushed to each of those client devices immediately or nearly immediately. The pushed update comprises a file package including an updated JSON file one or more supporting updated CSV files and one or more updated underlying item files in accordance with the update.

Because the scripting language enables display of visual elements as well as interactive choices the same scripting language can also be used to create scripts that render the UI and or implement monetization techniques on the clients . In an embodiment the client UI script of is created similar to the way a chapter script is created. Except it is created by system development or administration type of personnel to serve as the client side UI. Similarly the access control script is created to control access to chapter scripts by users via enforcement of a certain monetization policy. In this regard scripts and comprise special scripts. However because they are still scripts they are transformed into respective JSON files and one or more CSV files and packaged with necessary content as discussed above with respect to regular chapter scripts. The file packages associated with the scripts and or are downloaded to clients upon the interpreter app being opened on respective clients . The download is transparent to the user that opened the interpreter app and does not require selection of the script by the user. In some embodiments the file package associated with script and or may persist at the client after the current session ends for use at the next session. Additional details regarding scripts and are described below.

Backgrounds also referred to as background graphical images are received and stored in library of database . Backgrounds are obtained by system personnel and or provided by users.

Each background is divided into zones also referred to as background graphical display zones . Each zone is a fixed width such as the width of a smartphone screen with no overlap between zones. A zone is the portion of the background viewable on the client screen and may be referred to as the viewable area. Although background images can be of different total widths most of the background images are of approximately the same total width. In an embodiment most of the backgrounds are divided into four zones zone 1 zone 2 zone 3 and zone 4 from left to right. Within each zone a character can be positioned in any number of locations as described above. In other embodiments backgrounds may be divided into fewer or more than four zones. The number or size of zones may be pre defined or dynamic based on the screen characteristics of the client .

By default zone 1 of a background is displayed when the background is specified in a script. Other zones of the given background can be viewed by moving the camera or a character to a different zone from the currently displayed zone. As discussed above moving the camera using the code pan to zone X causes the camera to pan across background zones from the current zone to the specified new zone at a constant rate. Panning across two or more zones of a background may be considered to be an animated background.

To move the camera instantly to a new zone the cut to zone X code is used. Moving or placing a character in a different zone is achieved using CHARACTER stands POSITION in zone X. A character walking off screen and into a different zone is achieved by using CHARACTER walks to POSITION in zone X. A character walking to a different zone can be followed with the camera by using follow CHARACTER to POSITION in zone X. More than one character can walk together to a different zone using the AND construct in the following form follow CHARACTER to POSITION in zone X AND CHARACTER2 walks to POSITION in zone X.

In summary commands related to moving the camera or character which results in a change to the viewing area of the background are as follows 

The movement actions described above relate to affecting movement in the x and or y directions up down left right . Movement is also possible in the z direction which is into or out of the stage or screen. Affecting movement in the z direction or more accurately in a 2 dimensional screen changing stage depth may be achieved using the position commands with a position of non standard depth e.g. CHARACTER walks to back left .

More than one background can be displayed simultaneously on a client screen. A first background can be overlaid over a second background with a certain transparency to affect simultaneous background display. In an embodiment certain backgrounds are pre defined as each comprising two or more backgrounds overlaid over each other in a certain order relative to each other e.g. z ordering at a certain z direction spacing relative to each other e.g. z spacing or z offset and certain x and y positions of the respective backgrounds relative to each other in the overlay set. The script code to use an overlay background set is the same as for a single background. The place CSV file specifies which background is an overlay set as well as the image file names of the plurality of backgrounds in the set. In other embodiments specific script code may be configured to allow more control to select and assemble a plurality of single backgrounds as an overlay set.

Backgrounds available from the library are static graphical images or dynamic graphical images. A dynamic image comprises an image having at least an area with one or more moving or animated elements and the remaining areas that are static or non moving. Dynamic image backgrounds are consider to be animated backgrounds. For instance a background of a room with a fireplace may include moving fire in the fireplace.

In an embodiment a background is maintained in a scene at all times. If a background named in a script is smaller in total width than the standard four zones discussed above for example such that there is no or only a partial zone 4 for this background then background looping is enabled to ensure that when zone 4 is called on to be displayed some of the background will be displayed. Background looping may comprise cycling through or repeating the sequential available zones of the background for example when the background is scrolling behind a character to affect a walking character. In the example above zone 1 of the background is the next section of the background displayed after whatever available portion of zone 4 is displayed pursuant to the background looping policy. As another example if two or more backgrounds are displayed sequentially then the first background followed by the second background looping back to the first background and so forth can occur.

Code elements of the scripting language comprise commands to include in the script to make animation corresponding to the script interactive.

A choice operator or code element causes display of a list of text choices as respective button icons on the client device. The text in each of the button icons is specified by the author user in the choice operator construct. Each text choice is associated with a particular branch delineated by a pair of curly brackets in the choice operator construct. When the user selects one of the button icons corresponding to a text choice the particular branch corresponding to the selected text choice is rendered on the client device. The user only sees the part of the script associated with the user selected choice and the non selected choice is not rendered. After the selected choice branch the separate branches merge back together and the script is the same regardless of the text choice selection. An example portion of a script showing use of the choice operator construct is as follows 

In the above example Pink Green and Black are the first second and third text choices respectively the content in the first pair of curly brackets is the first branch corresponding to the first text choice the content in the second pair of curly brackets is the second branch corresponding to the second text choice and the content in the third pair of curly brackets is the third branch corresponding to the third text choice. Three choice buttons are displayed on the client device a Pink button a Green button and a Black button. Responsive to the button selected by the user the corresponding branch content is rendered. Upon completion of rendering of a branch content regardless of which branch it rendered the next rendering is character TYLER s dialog I ll keep that in mind when I m buying your gifts 

The above example is in no way limiting. The branch content can be dialog or other scripting elements e.g. a stage action . The branch content can be one two or more scripting elements of the same or different types relative to each other. The branch content of one choice need not be the same length or script type as another choice in the same choice operator. The choice operator construct can comprise two or more text choices as long as each choice is associated with a branch.

A save choice operator is a more interactive version of the choice operator discussed above. The save choice operator has the same format as the choice operator with the addition of a variable name specified by the author use inside a pair of parenthesis next to the choice operator. When the user at the client device selects one of the text choices the text of the selected choice is saved as the value of the variable name in the parenthesis.

In the example above the variable is fav color and the value of this variable will be Pink Green or Black whichever choice is selected by the user viewing at the client device.

Once the variable value is known and saved it can be used elsewhere in the script. In an embodiment the text of the selected choice is automatically included in dialog. In dialog occurring after the choice operation dialog can be constructed to include the variable name in square brackets as a placeholder for the variable value. When dialog including the variable name in square brackets is rendered on the client device the value of that variable name which depends on the user selection of the particular text choice and which is saved text is rendered on the client device.

In the example above the last line of dialog includes the variable name I ll get you something nice and fav color . When character TYLER speaks this line the last word will be pink green or black based on the selected text choice in the save choice operation.

Once a user choice is saved e.g. the variable corresponding to the choice is set the variable can also be used to facilitate branching without first presenting choices and receiving a selection. In the example below a branching operator also referred to as if then logic or if then logic operator is included in a script as follows 

As with the choice and save choice operators the user at the client device will only see the branch content corresponding to the favorite color previously selected from among the choices by the user. If the user selected pink then the dialog associated with the green branch and the black branch will not be animated in this session of the script animation.

In addition to the branching operator more complex branching is achieved using the goto command in conjunction with a corresponding label command. The goto command causes jumping to a different line in the script with the landing point specified by the location of the corresponding label command in the script. This is a way to merge different branches back together. Because this is a true jump operation any scripting that exists after the goto command and before the corresponding label command is skipped. Of course if other commands cause returning to the skipped part of the script the skipped part will be animated.

Another complex branching command is the gain command. This command saves where the viewing user has been in the script e.g. whether a particular choice was selected by the user and this can be used across different chapter scripts of a story or across different stories. The saved choice made by the user persists for continued storytelling across a plurality of scripts. One or more choices made by the user can be saved one choice is saved per one gain command. The variable used to save the choice made in the save choice operator also persists across chapters of a story and across different stories.

In an embodiment the gain command is located virtually anywhere within a script. For example if a gain command is located within one of the choice branches the gain command sets a flag if the user selects the choice associated with the particular branch in which the gain command is located. The gain command has the following format 

In the following script example the MET ROBERT FROST flag is set or gained if the user selects the The road less taken choice. The MET ROBERT FROST flag is deemed to be earned by the user 

Then the existence or absence of the MET ROBERT FROST flag can be checked and used elsewhere in the same or different script e.g. in the same chapter in a different chapter of the same story or in a different story from the script that created the flag . An example script excerpt checking for the existence of the MET ROBERT FROST flag to carry out an if then logic operation is as follows 

Accordingly interactive features are enabled in scripts using one or more of the code elements described above. The interactive features are similarly applicable in other context outside of animating chapter scripts. In an embodiment the same code elements along with other graphical element display commands e.g. stage action elements are used to present and enable interactive functionalities of a client side GUI and or to control script access monetization policy as described in detail below.

As with the rest of the script code elements of the scripting language are transformed into specific types of JSON nodes. And as with all JSON nodes nodes corresponding to code elements are dynamically interpreted read by the interpreter app included on the viewing user s client device to affect dynamic loading of underlying files as necessary and to dynamically render audiovisual elements corresponding to the code elements at runtime. The interpretation and rendering operations are the same as discussed above for scripting elements.

In an embodiment the user selected choices are saved locally on the user s client device e.g. client device . Then at the end of the session e.g. when the interpreter app is closed or the viewing of the current chapter is completed or stopped the interpreter app packages the user selected choices e.g. variables in save choice operations flags set in gain commands etc. along with other session data into a session log file. The log file is sent to the server for persistent storage. The log component of the server organizes and stores the log file to one or more files in the database . As an example the session log file may be persistently stored in the log file . The session log file is associated with at least a user identifier.

In an embodiment the interpreter app on the clients lacks some or all of the capability to provide a GUI on its own. Instead the client side GUI also referred to as the client UI is supplied by a script such as the client UI script . Thus a particular script is responsible for generating the client UI that presents a story catalog of a plurality of other scripts e.g. stories or chapters of stories . In an embodiment a JSON file corresponding to the client UI script along with supporting files are sent to the client on which the interpreter app was just opened. When the JSON file is executed on the client by the interpreter app a client UI is provided on the client that controls and modifies the interpreter app s UI and or environment.

The client UI script includes catalog commands and in some instances if then logic or choice operators. The catalog commands also referred to as catalog declarations define which stories or chapters are visible in the graphical depiction of a story catalog which stories or chapters are invisible hidden in the graphical depiction of the story catalog which stories or chapters are listed as featured stories in the graphical depiction of the story catalog which stories or chapters are listed as more stories in the graphical depiction of the story catalog the story catalog header labels story category list labels to show or hide certain button icons in the client UI and the like. The catalog commands transform to GlobalDictionaryNode and CatalogConfigNode in the corresponding JSON file. The GlobalDictionaryNode is used to affect the visibility of stories or chapters in the catalog e.g. whether the names titles of certain stories or chapters are to be included in the list of stories for the catalog . The CatalogConfigNode is used to create the list of stories or chapters for the catalog based on the visible stories designation.

An example client UI script to display a catalog of stories or chapters available for consumption on a client is reproduced below 

Stories Rich Witches InAPerfectWorld Stranded v4 TeaPoison TheCaptainsDaughter Rockn RollRevolution HiddenLives Area 51 HideButton Contact Legal

 nodes c GlobalDictionaryNode e 5 gd id catalogVisibility gd key InAP erfectWorld k 0 gd value V label loop gd op set c GlobalDictionaryN ode e 6 gd id catalogVisibility gd key TheCaptainsDaughter k 5 gd value V gd op set c GlobalDictionaryNode e 7 gd id catalogVisibility gd k ey RocknRollRevolution k 6 gd value V gd op set c GlobalDictionaryN ode e 8 gd id catalogVisibility gd key Stranded v4 k 7 gd value V gd op set c GlobalDictionaryNode e 9 gd id catalogVisibility gd key Hid denLives k 8 gd value V gd op set c GlobalDictionaryNode e 10 gd id catalogVisibility gd key TeaPoison k 9 gd value V gd op set c GlobalDictionaryNode e 12 gd id catalogVisibility gd key Area 51 k 10 gd value V gd op set c GlobalDictionaryNode e 13 gd id catalogVisibi lity gd key HideButton k 12 gd value V gd op set c GlobalDictionar yNode e 16 gd id catalogVisibility gd key ShowButton k 13 gd value H gd op set c CatalogConfigNode catalog list Featured Stories More Stories k 16 catalog id default catalog op header e 17 c CatalogConf igNode catalog list CampusCrush love.life k 17 catalog id Featured Stories catalog op section e 18 c CatalogConfigNode catalog list Rich Witches InAPerfectWorld Stranded v4 TeaPoison TheCaptainsDaughter RocknRo llRevolution HiddenLives Area 51 HideButton Contact Legal k 18 catalo g id More Stories catalog op section e 20 c JumpNode e 0 d menu catalog me nu catalog k 20 p NARR k end c EndNode d The End label the end version zzz chapter id ShowButton 1 revision 19

Because the client UI script is a script the server performs translation to convert it into a JSON file. The server also performs the other operations described above to send a file package for rendering the client UI script on the viewing user s client . The client interprets the received JSON file and supporting file s at runtime and dynamically renders animation corresponding to the client UI script as described above for other file packages.

In an embodiment the scripting language includes a web view command to refer to a Uniform Resource Locator URL associated with a web page within a script. The web page provides additional functionalities such as but not limited to provide additional UI elements change UI elements change the state of the database perform tests e.g. timegate test and or check certain conditions or states of the user s client . The web view command may be included in a chapter script of a story and hence the web page referenced in the web view command may be associated with the story. The web view command may alternatively be included in a script that is not part of a story but is instead a script written for non storytelling purposes. The web page s referred to in scripts may be hosted by the server . The web view script file in is an example of a script including at least one web view command.

An example script is reproduced below including a web view command that references a web page http www.example.com 

As with all scripts server transforms scripts including a web view command to a corresponding JSON file and also generates one or more CSV files to support the JSON file. And as discussed above the server packages the necessary files and sends the file package to the client on which the script including a web view command is to be rendered. The corresponding JSON file for the script above is provided below 

 nodes url http www.example.com c WebViewNode e 5 k 0 p N ARRATOR k 5 b INT. BLACK NIGHT e 6 d Welcome to the timegate test p NARRATOR k 6 e 7 d This is Episode 1. c ChoiceNode d You like it exprs true true k 7 choices Yes lovely No ugly p NARRATOR es 13 13 p NARRATOR k 13 e end d O k then. Ready for Episode 2 k end c EndNode d The End label the end version  g1FgjudG7m chapter id timegate 1 revision 3

The web view command can be located virtually anywhere in a script including within branches of choice operations branching operations and other interactive choice operations. The interpreter app at the client side executes the JSON node corresponding to the web view command WebView Node by requesting at runtime the web page specified by the URL via a web browser application also included at the client side. When the web page loads on the client side the web page may take partial or full control. The interpreter app executes the next node when the web page indicates that execution may resume.

As discussed above characters and other elements such as starting outfits for a given script may be defined using a GUI environment on the portal hosted by the server . When the author user creates a character e.g. defines a character name avatar and changes to default avatar characteristics the server saves the character with a unique identifier e.g. a unique character number and associates it with one or more particular scripts. An outfit a particular combination of clothing and accessories for the created character is also saved by the server with a unique identifier e.g. a unique outfit number and is associated with at least the created character. Additional character characteristics may also be defined. These actions are repeated for each character to appear in a chapter script.

Then as the author user composes the chapter script that includes the created character s the portal provides a library of a plurality of pre defined outfits each with a specific identifier and a plurality of pre defined character animations or behaviors each with a specific identifier from which the author user can select to include in the chapter script. The portal also provides the list of outfits created by the author user for the chapter script or story including the chapter script for selection by the author user.

Hundreds of character animation behaviors are available. A few examples are provided below in the specific identifiers assigned by the server and which are displayed to the author user for selection during script creation 

search dance1 dance3 dance5 dance rock talk happy awkward talk headache talk shrug idle disappointed chatting wave talk greet talk arms raised condescending smug nervous doubtful rude turnedoff2 laughing talking point giddy confused phonecall talkingonphone talkingonphone2 talkingonphone3 talkingonphone4 excited coveringmouth bowing front walkrear tinkering rear talking17 apathetic talking9 happy2 primping.

One or more character animation behaviors may be animated simultaneously using the AND construct operand discussed above. The corresponding JSON expression is the Spawn attribute in the DirectorNode which causes actions to occur simultaneously. An example JSON node for rendering simultaneous character animation behaviors is shown below. Four simultaneous character animation behaviors dance3 for a first character dance rock for a second character dance5 for a third character and dance3 for a fourth character are specified below.

Outfits and character animation behaviors are body type specific in an embodiment. For example a character represented by an avatar having a female body requires female outfits and female character animation behaviors. Similarly a character represented by an avatar having a male body requires male outfits and male character animation behaviors. If there is a mismatch in gender among the avatar outfit and or character animation behaviors then the interpreter app may not render the mismatching combination. More likely the test component will detect mismatches during a check test of the chapter script and require fixing the error before continuing to the next phase. In alternative embodiments the outfits and or character animation behaviors are not body type specific and or may be deemed a permissible combination with each other and or a character avatar based on other criteria.

Because the interpreter app dynamically renders characteristics of characters into an existing animation texture framework as discussed above dividing the characteristics of each character into at least three parts allows only those characteristics that are newly displaying or changing to be rendered rather than re rendering everything about a given character. Correspondingly only those image and or audio files associated with the particular characteristics to be rendered are identified via CSV files and dynamically loaded for display by the interpreter app at runtime. For example if a character s animation behavior changes while on screen only the image and or audio file s corresponding to the new character animation behavior is newly rendered.

Additional details relating to format and use of the scripting language is set forth herein in Appendix E.

As discussed above the use of a variable in the save choice operator to save a text choice made by a viewing user and then using the variable to affect some of the dialog in the same or different script at runtime comprises client side editing of dialog. The result is that users at the client side can edit the dialog at runtime by selecting a choice which causes replacement of the variable included in dialog with text corresponding to the variable during animation of the script. The user edited dialog immediately becomes part of the current animation of that script at his her client device. Thus although a user who did not author a given script does not have rights to edit the given script per se the save choice operator in conjunction with use of variables in dialog constructs in the given script enables other users to edit the given script. And such editing takes place on the client side via the interpreter app and are reflected immediately on the editing client device.

In other embodiments the scripting language enables real time or near real time multi player functionality. A first user at a first client can enter or select text during viewing of a script and the entered selected text appears in a script being animated for a second user at a second client .

In an embodiment viewing users access to story chapters at the clients are controlled using counter commands and or flag commands included in a non story script. The access control script file in is an example of such a non story script. An access control script is generated for each user that opens the interpreter app at his her respective client and is sent to the user s client from the server . The interpreter app lacks the capability to provide the gating function and associated UI on its own. Instead the access control script provides the feature.

The access control script includes a current counter value associated with the particular user interfacing the client . The current counter value is maintained in the user information file . A counter or chapter pass counter is associated with each uniquely identifiable viewing user e.g. by login info on the interpreter app . The current counter value for a given viewing user represents the number of passes also referred to as chapter passes currently credited to and thereby available for use by the given viewing user.

One pass is used to access a single chapter from among a catalog of chapters available to read provided on the interpreter app. Alternatively different pass to chapter redemption ratios may apply. Access to chapters is contingent on the viewing user having sufficient number of passes in his her account. The passes represent virtual currency in the system . Passes can be purchased with real currency by viewing users and or passes can be earned or rewarded. Thus the access control script controls monetization of stories and more particularly chapters of stories. Note that passes are not needed for an authoring user to access his her chapters at least for previewing newly created chapter scripts. In some embodiments no passes are also needed for the authoring user to access his her chapters in the regular viewing of those chapter s .

The access control script includes interactive scripting commands e.g. if then logic choice branching and either counter commands or flag commands. The interactive scripting elements are used to enable interaction with and presentation of one or more monetization statements to the viewing user. The counter or flag commands are used to check the counter value associated with the viewing user and to change the counter value in accordance with the viewing user s choices and actions. The counter used in the access control script is set with the current counter value associated with the viewing user. The counter setting command corresponds to the JSON CounterSetNode described above. Based on the viewing user s action s the counter is incremented or decremented. The CounterArithmeticNode facilitates the increment or decrement of the counter. Alternatively the counter can be set using flags in which the flag command corresponds to the JSON FlagNode described above. The FlagNode can be used in connection with a ChoiceNode to set a value based on the viewing user s selection and then cause branching using BranchNode.

An example access control script is set forth herein in Appendix F. In this example the viewing user is given three free passes a day. Before the viewing user can read a chapter from the catalog the script logic checks if the counter value is greater than zero. If the counter value is greater than zero then the viewing user can access a chapter from the catalog. If counter value is too low e.g. zero then the script includes choices for the viewing user to purchase passes e.g. in sets of three passes . If the viewing user selects the choice to purchases passes then the script logic e.g. branching operator presents one or more purchasing choices to the viewing user for selection. In an embodiment the passes may be purchased using real or virtual currency e.g. IAPs . There may be a separate API call made by the interpreter app to charge or otherwise complete the purchase in real currency. Additional details regarding IAPs are described above.

If passes are purchased the counter is incremented accordingly. In the example the iaps attribute of the ChoiceNode is used to increment the counter or if flags are used to set a flag. Similarly if the viewing user reads a chapter the counter is decremented or if flags are used to set a flag corresponding to a decrement.

The viewing user s behavior other than a pass purchase can cause the counter to be incremented or flag equivalent . For example if the viewing user answers a question correctly provides feedback about a read chapter or story the viewing user s referral of certain chapters to other users was successful and the like. Passes accrued in this manner causing the counter or flag equivalent to change is handled the same way as counter increment or flag equivalent in response to a pass purchase.

Because the access control script is still a script the server performs translation to convert it into a JSON file. The JSON file corresponding to the script shown in Appendix F is set forth herein in Appendix G. The server also performs the other operations described above to send a file package for rendering the access control script on the viewing user s client . The client interprets the received JSON file and supporting file s at runtime and dynamically renders animation corresponding to the access control script as described above for other file packages.

Others of the access control script can enable monetization and or gating functionalities during animation of a script. illustrates an example screen displayed on a client showing an example monetization function driven by an embodiment of the access control script . A particular access control script includes if then and or branching logic to enable user participation involving monetization during viewing of a story chapter. Screen includes a choose your style button that a viewing user can actuate to initiate display of style choices for a character in the story chapter. Style choices that are displayed may be a hip style button a classy style button and a smart style button . The hip style is a free monetization choice while each of the classy style and smart style choices has an associated dollar amount 4.99 and 0.99 respectively. If the viewing user selects either button or additional selection choices may be presented and eventually virtual and or real currency purchase transaction functionalities such as discussed above are exposed to the viewing user to purchase a particular classy or smart style for the character of interest.

Returning to and in particular to block the file package sent by the server and received by the client requesting viewing of a particular chapter script is automatically packaged by the server in response to the user request at the client for a particular chapter of a particular story. In response the server configures just the files data needed to animate the particular chapter script associated with the particular selected chapter according to an embodiment. This means for example that not all of the image files audio files and supporting tables or lists in the database need to be sent to the client .

In an embodiment the server retrieves from database only files data needed for the particular chapter. In some instances the server generates one or more CSV files to assemble just the data needed for the particular chapter. For example if the particular chapter includes four specific backgrounds then the server may generate an abbreviated or new place CSV file containing just the record rows associated with those four backgrounds from among the record rows of all the available backgrounds in the place CSV file shown in Appendix D. Likewise the chapter CSV file in the package contains data for just the particular chapter rather than several or all of the chapters of the story or stories as shown in Appendix C. One or more other supporting CSV files tables or lists if necessary contain chapter relevant data. The underlying image and audio files are only those files needed to render the particular chapter. The JSON file associated with the particular chapter the chapter specific chapter CSV file the chapter specific character CSV file the chapter specific outfit CSV file the chapter specific place CSV file chapter specific character spot CSV file one or more other chapter specific supporting CSV files tables or lists if needed and the chapter specific underlying image and audio files comprise the file package assembled by the server . A file package comprising the just needed files for a chapter can be configured when the chapter is at pre publication stage or for preview by the author user.

When a user selects a published chapter for reading e.g. from those chapters available from the story catalog the corresponding file package comprises the JSON file associated with the selected chapter but the rest of the files contain data associated with all of the available published stories chapters in the story catalog or data for at least more than just the selected chapter . A catalog specific wide chapter CSV file a catalog specific wide character CSV file a catalog specific wide place CSV file a catalog specific wide outfit CSV file a catalog specific wide character spot CSV file one or more other catalog specific wide supporting CSV files tables or lists if needed and catalog specific wide underlying image and audio files may be included in the file package. Since these files are applicable to all scripts in the catalog this same set of files can be included in any file package for any selected published chapter and thus may be pre generated and stored in database .

Generation of one or more files e.g. CSV files may occur prior to or in response to a user request for the particular chapter. The packaging of the files may occur prior to or in response to a user request for the particular chapter. In other embodiments if certain of the files are already present on the client then those files may be excluded from the file package. For example a current place CSV file may already be stored on the client from previous viewing of a script.

In an alternative embodiment whether to generate chapter specific CSV files or to use a single CSV file for all stories available in the catalog may depend upon the relative file sizes. When the single CSV file is negligibly larger in file size than a chapter specific version then the single CSV file may be used in the file package. Memory constraints transmission bandwidth constraints and or server resource constraints may factor into which CSV files to generate or re use.

The scripting language is robust enough to enable testing A and B versions of a script in the same script. This type of testing is referred to as A B testing or split testing. A B testing precludes the need to send A and B versions of a script to different sets of clients . A B testing facilitates incremental release of new chapters stories or other functionalities to test user interest usability and the like.

The different scripts embedded in a single A B test script can be different versions of the same script to test incremental changes. The different scripts embedded in the single A B test scripts can be two dissimilar scripts with little or no commonality there between to test two different stories. The different scripts embedded in the single A B test scripts can be two or more different scripts or script portions.

Any of the different uses of scripts to enable monetization client UI or environment storytelling interactive features etc. any different combinations or versions of these can be tested using A B tests. An A B test script includes if then logic to evaluate one or more particular A B test variables e.g. split test variables with respect to the user at a client . The result of the evaluation s determines the rest of the script portion s or version exposed to the user. Different users experience different stories UI choices etc. relative to each other or relative to one set of users to another set of users via CSV files corresponding to the A B test script.

An example A B test script is set forth herein in Appendix H. And the corresponding JSON file is set forth herein in Appendix I. The particular A B test variable in this example script is SPLIT TEST OPTION promotest is BLOCK .

Based on the foregoing numerous features and capabilities of scripts in a scripting language are described herein. It is understood that for all scripts including storytelling scripts and non storytelling scripts e.g. client UI script web view script access control script etc. user interaction choices states conditions timestamps and other tracking of user sessions on the clients are logged at the client side and then uploaded to server e.g. block of . Server uses the log files to improve scripts to facilitate continuity and customization of storytelling across different chapters or stories to adjust stories available in the catalog and other script related purposes.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT or liquid crystal display LCD for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Embodiments also may implement the subject matter of any one or more of the following numbered clauses 

1. A method of improving operation of computers which define and display audiovisual programs such as animated stories comprising using an authoring computer receiving script data comprising a plurality of natural language stage direction statements dialog statements and animation control statements of a particular chapter of a particular animated story using the authoring computer based upon the script data creating and storing a structured interpretation file comprising a plurality of nodes each having one or more attributes transmitting the structured interpretation file to a second computer using the second computer interpreting the structured interpretation file to execute each of the nodes using the one or more attributes based upon the interpreting generating and displaying on a display device of the second computer an audiovisual program on the second computer that operates according to the script data and comprising one or more visually animated characters that speaks according to the dialog statements moves according to the animation control statements and is displayed within a graphical setting that is graphically depicted according to the stage direction statements.

2. The method of clause 1 wherein the animation control statements include at least one choice statement comprising an association of at least two choices wherein each of the at least two choices comprises an alternative dialog statement and an alternative action statement the method further comprising displaying using the second computer the at least two choices receiving input from the second computer specifying a selection of one of the at least two choices executing a particular alternative action statement that is associated with the one of the at least two choices that is indicated in the selection.

3. The method of clause 1 wherein a particular animation control statement among the animation control statements comprises a character identifier an action and an action attribute the method further comprising interpreting the particular animation control statement by graphically animating a particular one of the visually animated characters to perform the action based upon the action attribute.

4. The method of clause 3 wherein the action comprises any of changing one character into a second character changing virtual garments that are graphically displayed on the particular character moving the particular character to a particular stage location performing a stationary movement dancing facing in a particular direction.

5. The method of clause 3 wherein the particular animation control statement comprises two actions connected using an operator and indicating simultaneous actions.

6. The method of clause 3 wherein the script data specifies a plurality of actions for a particular character to perform concurrently.

7. The method of clause 1 wherein the script data comprises a choice operator and a plurality of choice specifications wherein each of the choice specifications comprises an association of a choice text one or more dialog statements and a choice variable name the method further comprising causing displaying all of the choice text receiving input specifying a selection of a particular choice text in response to the input causing animated display of a particular character speaking a particular dialog statement that is associated in the choice specifications with the particular choice text.

8. The method of clause 1 wherein the structured interpretation file comprises a plurality of JSON nodes for a chapter of an animated story wherein each of the JSON nodes comprises one or more attributes wherein one or more of the attributes comprises a name value pair.

9. The method of clause 8 wherein the JSON nodes comprise one or more of a default node that defines a character speaking dialog a costume change node that specifies a change in a graphical costume of a character a director node that specifies an action for animated movement of a character a choice node that specifies an interactive choice a flag node that specifies setting a value of a variable a timed flag node that specifies setting a flag value having a specified time duration a counter node that specifies a counter value capable of incrementing or decrementing a branch node that specifies a particular branch in a story a catalog node that specifies aspects of including the story in a catalog of stories a web view node that specifies a web page associated with the story.

10. The method of clause 8 further comprising transforming one or more portions of the plurality of JSON nodes into one or more files of comma separated values CSVs prior to transmitting the files to the second computer.

11. The method of clause 1 wherein using the second computer for the interpreting the structured interpretation file to execute each of the nodes using the one or more attributes comprises using the second computer to perform animation of the particular chapter of the particular animated story including controlling one or more of background characters positioning overlays movement dialog sounds music and execution of if then logic.

12. The method of clause 1 further comprising using the authoring computer receiving updated script data comprising one or more updates to the plurality of natural language stage direction statements dialog statements and animation control statements using the authoring computer based upon the updated script data creating and storing an updated structured interpretation file comprising updated nodes immediately push transmitting the updated structured interpretation file to the second computer using the second computer without restarting an interpretation app hosted on the second computer interpreting the updated structured interpretation file to execute each of the updated nodes based upon the interpreting generating and displaying on a display device of the second computer an updated audiovisual program on the second computer.

13. The method of clause 1 further comprising receiving and storing a plurality of background graphical images each of the background graphical images having a number of background graphical display zones that are available in the second computer transmitting a copy of at least one of the plurality of background graphical images to the second computer using the second computer displaying an animated panning sequence across two or more of the background graphical display zones of the at least one of the plurality of background graphical images while displaying the one or more visually animated characters.

14. The method of clause 13 further comprising using the authoring computer receiving and storing a plurality of graphical overlays and a Z value for each of the graphical overlays transmitting copies of the graphical overlays to the second computer using the second computer displaying the graphical overlays graphically over the at least one of the plurality of background graphical images in an order indicated by the Z value of each of the graphical overlays.

15. The method of clause 7 further comprising based upon the value of the particular choice variable using the second computer modifying an appearance of a graphical user interface of the second computer.

16. The method of clause 7 further comprising based upon the value of the particular choice variable using the second computer modifying an appearance of a graphical background that is displayed on the second computer.

17. The method of clause 7 wherein the script data comprises a choice operator and a plurality of choice specifications wherein each of the choice specifications comprises an association of a choice text one or more dialog statements and a choice variable name the method further comprising causing displaying all of the choice text receiving input specifying a selection of a particular choice text in response to the input setting to TRUE a particular choice variable associated with the choice variable name associated with the particular choice text based upon the value of the particular choice variable using the second computer modifying an appearance of one or more of the graphical background images or one or more of the graphical overlays.

18. The method of clause 1 wherein the script data comprises a counter declaration that specifies a chapter pass counter having a specified value greater than zero a condition statement configured to test the chapter pass counter and a monetization statement that requires a payment to progress in the story beyond the monetization statement the method further comprising using the second computer during the generating and displaying in response to interpreting the condition statement testing a then current value of the chapter pass counter and only when the testing results in determining that a then current value of the chapter pass counter is not zero decrementing the chapter pass counter and permitting further generating and displaying the particular chapter.

19. The method of clause 1 wherein the script data specifies a chapter pass counter having a specified value greater than zero the method further comprising using the second computer testing a then current value of the chapter pass counter and only when the testing results in determining that a then current value of the chapter pass counter is not zero decrementing the chapter pass counter and permitting further generating and displaying the particular chapter.

20. The method of clause 1 wherein the script data comprises a plurality of catalog declarations each specifying showing a particular named story or chapter in a catalog of stories or chapters and the method further comprising using the authoring computer receiving and storing script data for one or more other stories or chapters other than those stories or chapters that are specified in the plurality of catalog declarations using the second computer based upon the script data displaying a catalog of stories or chapters that includes only those stories or chapters that are specified in the plurality of catalog declarations.

21. The method of clause 20 wherein the script data further comprises a header declaration that specifies two or more header labels and two or more list declarations each respectively corresponding to a particular header label among the two or more header labels and comprising corresponding lists of chapters or stories the method further comprising using the second computer based upon the script data displaying the two or more header labels in header positions of the catalog displaying in two or more lists that are below and associated with the two or more header labels respectively the corresponding lists of chapters or stories.

22. The method of clause 1 wherein the second computer is any of a smartphone a tablet computer and a handheld computer.

23. The method of clause 1 wherein the script data comprises a plurality of sections wherein each of the sections is associated with a particular test among a plurality of tests a plurality of condition statements each associated with a particular testing condition that is also associated with one particular test among the plurality of tests a plurality of test variables each associated with one of the tests and configured using one of a plurality of values and the method further comprising during the displaying upon interpreting a particular section among the plurality of sections testing a particular condition statement within the particular section determining whether a test variable specified in the particular condition statement has a valid value and continuing interpreting the particular section only when the test variable has a valid value otherwise skipping interpreting the particular section and continuing interpreting a different particular section.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

