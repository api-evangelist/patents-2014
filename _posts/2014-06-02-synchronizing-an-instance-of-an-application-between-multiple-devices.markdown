---

title: Synchronizing an instance of an application between multiple devices
abstract: A technique and apparatus for backing up and restoring game application state across multiple devices are disclosed herein. The method includes running an instance of a game application at a first device. Based on any of various criteria, such as the proximity between the first device and a second device or a priority of synchronization, a computer makes a determination to synchronize the application state between the two devices. The computer causes the application state data, which represents an application state of the game application running on the first device, to be saved and made available to the second device, such as by saving the application state data to cloud storage. The second device receives the application state data and restores the game application state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09061210&OS=09061210&RS=09061210
owner: 
number: 09061210
owner_city: 
owner_country: 
publication_date: 20140602
---
This application is a continuation in part of U.S. patent application Ser. No. 14 252 555 entitled LOCATION BASED GAME STATE SYNCHRONIZATION filed on Apr. 14 2014 which is a continuation in part of U.S. patent application Ser. No. 14 221 161 entitled GAME STATE SYNCHRONIZATION AND RESTORATION ACROSS MULTIPLE DEVICES filed on Mar. 20 2014 which claims the benefit of U.S. provisional patent application No. 61 804 134 entitled OPERATING SYSTEM AND DEVICE INTEGRATED WITH CLOUD COMPUTING FUNCTIONALITIES filed on Mar. 21 2013 all of which are incorporated by reference herein in their entirety.

At least one embodiment of the present invention pertains to multi device computing and more particularly to automatic backup and restoration of application states across multiple devices.

Application state data is data used to record the running status of a computer application. One example of application state data is a game save for a game application. A game save is a piece of digitally stored information related to the progress of a user operating the game application. The game save can be reloaded later so that the user can continue where he stopped. The user instructs the game application to generate a game save i.e. save the game to prevent the loss of progress in the game especially when he is interrupted or is ending a game session.

Sharing and backing up game saves among users has been common for many years. Originally users could help each other unlock features in a game application by swapping memory cards with game saves. With the growing popularity of the Internet users started to upload their game saves from their devices to Internet servers. By downloading a game save from an Internet server a user can continue the progress of the game on the device on which he played the game or on another device such as a computer game console or smart phone. However to achieve the goal of continuing the progress on another device the user deliberately needs to instruct the device to save the game progress i.e. game save and upload the game save to a server or a memory card. Then the user must download the game from the server or the memory card to the other device and finally instruct the other device to load the game save. This process is tedious and requires many user interventions. Furthermore this process only works for game applications that are specifically designed with game saving functionalities.

Techniques introduced here provide an automatic mechanism for backing up and restoring application state data across multiple devices. In accordance with the techniques introduced herein a first instance of a computer application is run by for example a distributed system on the first electronic device and a backup event is determined to occur in the first electronic device. The backup event suggests a backup of application state data and the application state data represents an application state of the computer application at the backup event and that enables the application state to be duplicated at another device. The application state data can be the minimum set of state data that enables an instance of the computer application running on a first device to be replicated on a second device such that the instance on the first device and the instance on the second device have the same application state at the time of replication.

The technique further includes a process by which the distributed system stores state data of the first instance of the application and detects a second device upon which the application is installed. Based on various criteria such as the proximity between the two devices the distributed system sends the state data to the second device and launches a second instance of the application on the second device. The distributed system then synchronizes the second instance of the application on the second device with the state data received and resumes the second instance of the application on the second device after the synchronization is completed.

The backup proceeds automatically in the background of the operating system of the device and is transparent to the user as well as the application. The user can restore the application state of the application running on the same device or on another device where the state of the application has been backed up. The application state backup and restoration can be achieved at the operating system level of the devices. There is no special treatment or design needed for the computer application itself. Any computer application capable of running on such an operating system can take advantage of the application state backup and restore functionality. The distributed system can spread among smart phones tablet computers desktop computers and other computing devices.

A distributed system is a collection of independent computing elements stored in a distributed manner that appears to its users as a single coherent system. The function of the single coherent system can be produced by software. The distributed system can spread across a large geographic area since the components of the distributed system can be linked by wired or wireless networks. The distributed system can have better performance compared to a single computing unit and have better fault tolerance than a single computing unit.

The distributed system can enable multiple computing devices to interoperate with one another. In this way the distributed system can manage multiple computing devices as a single entity. The given application can then be used by any of the computing devices when executing a given application through the distributed system.

For instance the technology of the distributed system enables the use of user interfaces from a plurality of computing devices to both interact with the distributed system e.g. through a home screen desktop of the distributed system and to also install an application on the distributed system. The application is installed on an application layer of the distributed system where any of the computing devices being managed by the distributed system can invoke the application installed on the application layer of the distributed system. Thus a separate installation of the application on each of the computing devices is not required to execute the application through any of the computing devices if the application is installed through the distributed system managing the computing devices.

In one embodiment an instance of the distributed system is executed using the hardware resources of the multiple computing devices and manages the hardware resources of all the computing devices as a single entity. The various components of the distributed system e.g. the file system of the distributed system are stored across the hardware resources of the multiple computing devices. For instance the data associated with a file system of the distributed system is stored across the memory resources of the various computing devices. The distributed system gathers any required data associated with the file system from across the computing devices when the data are needed for access to the file system.

While the above summary discusses an instance of a computer application being run by a distributed system the application can be run in any of various ways. For example the computer application can be run by a computer system and the techniques described herein that are performed by the distributed system can be performed by the computer system or by a control application that acts as an interface between the computer application and the computer system among others.

It is useful now to define a term used in this description. The term cause and variations thereof as used herein refers to either direct causation or indirect causation. For example a computer can cause an action by sending a message to a second computer that commands requests or prompts the second computer to perform the action. Any number of intermediary devices may examine and or relay the message during this process. In this regard a device can cause an action even though it may not be known to the device whether the action will ultimately be executed.

Other aspects of the technology introduced here will be apparent from the accompanying figures and from the following detailed description.

References in this specification to an embodiment one embodiment or the like mean that the particular feature structure or characteristic being described is included in at least one embodiment of the present invention. However occurrences of such phrases in this specification do not all necessarily refer to the same embodiment.

A method of application state synchronization across devices is described herein. For example a user plays a game on a smart phone then stops playing and turns off the screen of the smart phone. The state of the game application is synchronized between his smart phone and other electronic devices via a cloud system. The user can pick up a tablet computer and continue to play the game from wherever the user left off. The synchronization is not necessarily directly triggered by user intervention. For instance the synchronization can be automatically triggered when the screen of the smart phone is turned off or the user closes the game on the smart phone. The synchronization proceeds automatically in the background transparent to the user. Furthermore the cloud system can analyze a variety of information including the device profile user profile and user history to determine how to optimize when the state is synchronized and to which device the state is synchronized.

In one embodiment a cloud synchronization interface receives data to be stored in the cloud storage service. The cloud synchronization interface includes network communication hardware and network connection logic to receive the information from electronic devices. The network is a local area network LAN wide area network WAN or the Internet. The cloud synchronization interface may include a queuing mechanism to organize the received synchronization data to be stored in the cloud storage service . The cloud synchronization interface communicates with the cloud storage service to send requests to the cloud storage service for storing and retrieving application state data.

An electronic device includes an operating system to manage the hardware resources of the electronic device and provide services for running computer applications . The computer application stored in the electronic device requires the operating system to run on the device . The electronic device can backup application states of the computer applications to the cloud storage service . The electronic device includes at least one local storage device to store the computer applications application data and user data. The electronic device can synchronize the application state data with the cloud storage service via the cloud synchronization interface . The electronic device or can be a desktop computer a laptop computer a tablet computer an automobile computer a game console a smart phone a personal digital assistant or other electronic devices capable of running computer applications as contemplated by a person having ordinary skill in the art.

In one embodiment the computer applications stored in the electronic device include applications for general productivity and information retrieval including email calendar contacts and stock market and weather information. The computer applications can also include applications in other categories such as mobile games factory automation GPS and location based services banking order tracking ticket purchases or any other categories as contemplated by a person having ordinary skill in the art.

The operating system of the electronic device includes a state synchronization module to backup application state information from the local storage. The state synchronization module keeps the application state data from the electronic device in synchronization with the cloud storage service and other devices.

In one embodiment another electronic device synchronizes the application state with the cloud storage service . The electronic devices and can synchronize the application states between each other via the cloud storage service . For instance the electronic device can synchronize the application state of a computer application to the cloud storage service . The cloud storage service communicates with the electronic device to detect whether the electronic device also contains this computer application and whether the application state of this computer application is not updated on the electronic device . In turn the cloud storage service sends the application state data to the electronic device . Thus the application state of this computer application is synchronized between the electronic devices and .

In one embodiment the synchronization for backups from the electronic devices and to the cloud storage service takes place on a configurable periodic basis such as a predetermined time of day. The scheduled synchronization can also check for updates that can be sent from the cloud storage service to the electronic devices and .

In one embodiment another type of synchronization is triggered when an event occurs on the electronic device or and then the state synchronization module can initialize the application state data synchronization with the cloud storage service . The triggered synchronization does not need any intervention from the user. For instance a user turns off the screen of the electronic device triggering an application state data synchronization with the cloud storage service as well as other electronic devices. However the user does not need to specifically instruct the device to synchronize the user does not even need to realize that the synchronization occurs.

In one embodiment the backup event is any of the following the screen of the electronic device being turned off the instance of the computer application being closed the instance of the computer application being paused the instance of the computer application having been run continuously for a preconfigured period of time the instance of the computer application being switched by another application the instance of the computer application being switched from the foreground to the background of the operating system the battery level of the electronic device being below a preconfigured value the electronic device turning off the electronic device switching to standby mode the clock of the electronic device reaching a preconfigured time of day and the electronic device being in a preconfigured location.

In one embodiment the synchronization is a delta synchronization where the electronic device or detects a change i.e. delta of application state data and only the changed data or difference is synchronized to the cloud storage device .

Any electronic device running an operating system having the state synchronization module initializes the application state synchronization. In addition the cloud storage service can also initialize the application state synchronization. In one embodiment the cloud storage service may analyze the electronic devices to determine which device is to be synchronized and what state data of which application is to be synchronized.

At step a backup event is determined to occur on the electronic device. The operating system of the electronic device automatically determines the backup event without any intervention instruction or awareness from the user. There is no need for a sync button a sync gesture a sync menu item or a sync command. In other words the operating system of the device determines whether to initiate a backup event. For instance the operating system may recognize an event of the screen being turned off as a backup event. The operating system may also recognize an event of a running application being closed or being switched by another application as a backup event. The operating system may further recognize an event of a system standby as a backup event. The operating system of the device can determine other types of backup events as contemplated by a person having ordinary skill in the art.

Once the operating system detects a backup event the operating system of the electronic device uploads the application state data of the computer application onto the cloud storage system at step . The operating system of the device decides to immediately upload the application state data after the backup event or start the upload at a certain amount of time after the backup event. For instance if the electronic device detects that there is another electronic device from the same user in a very close proximity the operating system of the device may decide to start the upload assuming a high possibility that the user will start using the other device soon. In another embodiment the electronic device may decide to start the upload at a certain time of day or at certain location. For instance the electronic device may decide to start the upload at midnight and at the user s home determined by GPS location or WiFi location so that the upload of the application state data does not intervene with the normal operation of the device.

In one embodiment the developer of the computer application does not specifically need to write any implementation for uploading the application state data. For example there are no API calls embedded in the computer application for the application state data. The state synchronization module of the operating system is responsible for monitoring collecting and uploading the application state data. In some embodiments the state synchronization module compares the current application state on the device and the application state already stored in the cloud storage service. If the current application state is newer than the application state stored in the cloud storage service the state synchronization module determines the difference i.e. delta between the current application state data and the application state data stored in the cloud storage service. In this way the state synchronization module only needs to upload the difference to the cloud storage service. The cloud storage service is responsible for incorporating the difference into the application state data already stored.

At step the cloud storage system analyzes the device profile user profile and user history to determine which device the state is synchronized to. For instance in one embodiment the cloud storage system recognizes the various devices that the same user is using e.g. the devices which have established the user s user account . In another embodiment the analysis is based on usage pattern. For example the cloud storage service can determine whether to synchronize the application state to devices that the user has been frequently using during a specific time period e.g. a week or the cloud storage service can determine whether to synchronize the application state to devices on which the user has been running that computer application. In yet another embodiment the analysis is based on a proximity based synchronization algorithm. For example the cloud storage service can determine to synchronize the application state to devices that are physically close to the device in step . The proximity may be determined by GPS locations WiFi network locations cellular networking locations or any combination thereof. In still another embodiment the analysis is based on the types of applications installed on the devices. For example the cloud storage service can determine to synchronize the application state to devices that have instances of that application installed or devices that have similar applications installed. Furthermore the analysis can be determined by a combination of the above techniques as well as any other device or user information as contemplated by a person having ordinary skill in the art.

The same types of analysis disclosed in the previous paragraph are used in determining the priority of synchronization. For instance if there is an application state data synchronization for multiple applications in the cloud storage service the cloud storage service may determine whether to synchronize the state data for one application because the user has been frequently using that application during a recent time period e.g. a week . In one embodiment the cloud storage service decides a priority list including a reference to the application state data for the computer application wherein the priority list regulates the order of transmitting the application state data for the computer application and data for other applications based on the analysis of the user profile and the hardware profiles of the electronic devices.

In some embodiments the analysis is performed after the cloud storage system receives application state data from a device. In some other embodiments the analysis can be performed before the cloud storage system receives any application state data or before the backup event occurs.

At step the cloud storage system sends the application state data to one or more devices that are identified by the analysis. The identified devices receive the application state data. Therefore the instances of the application running on the devices are synchronized with the most up to date state. A user can run an instance of the application on any of these devices and the instance of the application resumes from the most up to date state. In one embodiment the cloud storage system further sends an instruction to each of the identified devices to run an instance of the computer application by resuming the application state at the backup event at step .

In one embodiment the application state data of a computer application may include application memory data application local storage data hardware configuration data and user account configuration data. The state synchronization module of the operating system is capable of collecting this data and uploading the data as included in the application state data to the cloud storage service. Based on the application state data an operating system of another electronic device can recreate the same environment and status of the application on the other electronic device.

In some embodiments the electronic devices are capable of synchronizing application state data between each other via a network such as a WiFi network a Bluetooth network or a cellular phone network. Each of the electronic devices contains a network component configured to synchronize the application state data with another electronic device.

A state synchronization module runs on top of the kernel . The state synchronization module monitors the information from the intervening sources of the kernel and records state data according to the information. In the example of a computer application includes a binary executable code that can run in the background of the operating system . The computer application can further include static and dynamic libraries that are referenced by the binary executable code while an application is running. In one embodiment the state synchronization module runs in a user space file system e.g. FUSE in the background of a Linux kernel. In another embodiment the state synchronization module runs in a kernel file system.

The application state data may further include hardware configuration data . For instance the state synchronization module may record the current device s volume level and screen brightness level when the application is running. The device s volume level and screen brightness level are recorded as part of the hardware configuration data and are uploaded to the cloud storage service. Therefore after another device is synchronized with the application state data and resumes running the application the other device automatically adjusts the volume level and screen brightness level to match the level on the previous device. Moreover the application state data may include user account configuration data . The user account configuration data may include the user s preferences and choices regarding the computer application and the operating system environment for running the computer application. For instance the user account configuration data may include information about the user s language preference. Assuming the computer application is a game that supports both English and Chinese languages and the user has selected English as the preferred language the state synchronization module records the user s language preference as a part of the user account configuration data . The user account configuration data is synchronized to another device via the cloud storage service. When the other device resumes running the application the application will use the English language for the game interface as indicated by the user account configuration data .

In some embodiments a user can define a synchronization scheme such as via commands instructions preferences etc. added to the user profile to control how and when the synchronization process occurs. The synchronization scheme can utilize a proximity based synchronization algorithm. illustrates an example of an application state synchronization process based on a user defined synchronization scheme. The process involves synchronizing application state data between two computers which in the following example are a referred to as a first device and a second device and which can be two of computer . A computer such as computer can perform the steps of the process. In the following example the device performing the steps of the process is a smart phone. Further the smart phone can be the first device i.e. the device whose state will be synchronized with the second device or can be controlling the synchronization of an application state from a first device to a second device.

At step a computer which can be a cloud storage service server receives information related to a synchronization scheme from a user. The synchronization scheme information includes rules defining how and when the synchronization process is performed. For example the synchronization scheme can define a synchronization rule between two electronic devices e.g. a smart phone and a tablet computer that defines when to synchronize application state data of a game application between the two electronic devices. The synchronization rule for example can specify to synchronize the application state data from a first electronic device to a second electronic device as soon as the game application on the first electronic device is closed or the screen of the device is turned off.

At step a smart phone receives an indication that an application is running at a first device. For example when the first device is the smart phone the smart phone can receive a request to initiate the application. When the first device is another computer the smart phone can receive a message from the application while the application is running on the other computer. At step the smart phone checks whether a second device is within a range of the first device. The second device being within a particular range of the first device indicates that a user may decide to transition from running the application at the first device to running the application at the second device.

The range can be any of various ranges. For example the range can be a predefined distance of separation between the first device and the second device the two devices the two devices being at the same location e.g. at the same residence at the same business within a geo fence etc. the two devices being within direct short range wireless communication range of each other etc. A geo fence is a virtual perimeter of a geographic area and can be dynamically generated such as a radius around a store or point location a predefined set of boundaries such as a boundary that follows the external walls of a business a home a property etc.

Direct short range wireless communication can involve communication via for example Bluetooth low energy BLE near field communication NFC or a wireless local area network WLAN . The WLAN can be any of the various types of IEEE 802.11 networks. A short range wireless network does not include a cellular telecommunication network. Direct short range wireless communication between a first device and a second device can involve for example a wireless signal being sent directly from the first device to the second device without going through any intervening devices.

An illustrative use case for determining if a second device is within a range of a first device starts with the first device receiving an indication that the second device is within short range wireless communication range of the first device. The indication can be for example a message received via short range wireless communication between the two devices or an indication that the distance of separation between the two devices is less than the range of short range wireless communication or the two devices both having access to the same WLAN among others.

Because a purpose of the technology is to enable a user to transition from running an application at a first device to running the application at a second device the smart phone can check to make sure that the application is installed at the second device. For example the smart phone can send a message to the second device to determine if the application is installed at the second device and the second device can respond with an appropriate response.

A decision to enable a transition between the two devices can be based on a proximity based synchronization algorithm which can include a determination of the proximity between the two devices. For example the first device can receive location information such as global positioning system GPS coordinates from the GPS receivers of the two devices. The smart phone can use the two GPS coordinates to determine the proximity such as by determining the separation distance between the two devices by determining that the two devices are within a geo fence etc. As another example the location information can be a message received via short range wireless communication between the two devices and the proximity can be that the two devices are within direct short range communication range. As yet another example the location information can be an indication that the two devices can both communicate via the same IEEE 802.11 WLAN at substantially the same time and the proximity can be that the two devices are within range of the WLAN. As one more example the location information can be GPS coordinates from the two devices and the proximity can be an indication that the two devices are both within a same geo fence at substantially the same time.

Further the proximity based synchronization algorithm can be based on commands instructions preferences etc. stored in e.g. the user profile. For example the user can indicate a preference to use device 1 over device 2 when device 1 and device 2 are within a predefined proximity of each other. When device 1 and device 2 are within the predefined proximity the proximity based synchronization algorithm can schedule and initiate a transfer of application state data from device 1 to device 2 to enable a transition from running an instance of an application on device 2 to running an instance of the application on device 1.

Returning to the diagram of if no second device is determined to be within the range the search for a second device continues. If a second device is determined to be within the range further checks can be performed to determine if a user transition from running the application at the first device to running the application at the second device is likely to happen. In various embodiments the process of includes none any or all of steps . Transitioning to step can involve any or all of steps having a positive determination.

At step the smart phone checks whether a user has stopped using the application which may indicate that a user is about to transition to running the application on the second device. For example when the first device is the smart phone the smart phone can receive data from an embedded motion sensing device which indicates that the smart phone has stopped moving. As another example the smart phone can receive data indicating that the smart phone is being powered off or being put in a low power state or data indicating that a screen lock has started on the smart phone. If the smart phone determines that no users are currently using the application the process can continue at step . Otherwise the process can continue at step or 

At step the smart phone checks whether the game application running at the first device is paused which indicates that a user may transition to running the application on the second device. If the game application is paused the process can continue at step . Otherwise the process can continue at step or . At step the smart phone checks whether the smart phone is in a low power mode. For example the user may have turned off the screen or the device may have entered a low power mode due to inactivity which indicates that the user may transition to running the application on the second device. If the smart phone is in a low power state the process can continue at step . Otherwise the process can continue at step or .

At step the smart phone saves the state of the application. For example the smart phone can upload the application state data of the game application to the cloud storage system. The schedule of the uploading can depend on the type and speed of the connection between the smart phone and the cloud storage system. For instance the schedule can be configured so that the uploading is delayed until a WiFi connection is available to avoid using a cellular data connection e.g. 3G or LTE .

At step the smart phone determines whether the second device has adequate resources to run the application. In order to transition from running the application on the first device to running the application on the second device the second device needs to have adequate resources to run the application. The second device may need for example adequate memory adequate storage space a particular component adequate performance of a particular component etc. to run the application effectively.

At step the smart phone determines whether the synchronization scheme indicates to synchronize the application state between the first device and the second device. The synchronization scheme can indicate to synchronize the application state when any of various events occur or based on any of various data. For example the synchronization scheme can indicate to synchronize the application state when any or all of steps or evaluate positively. As another example the synchronization scheme can indicate to synchronize the application state when there is a likelihood based on a past history of usage of the application on the first device and the second device that the user will transition to running the application on the second device.

For example the past history can indicate that when a user is running an application on his smart phone and he arrives home he shortly transitions to running the application on his tablet. Or the part history can indicate that the user keeps running the application on the smart phone for a while after he gets home and doesn t transition until shortly after he stops using his smart phone as indicated by the smart phone becoming very still as indicated by a motion sensor in the smart phone . If step evaluates positively at step the smart phone causes the first device to send the application state data to the second device. When the first device is the smart phone the smart phone can send the application state data to the second device. When the first device is another computer the smart phone can send a message to the other computer than prompts the other computer to send the application state data to the second device. The application state data can be sent according to the synchronization state scheme.

At step when the user starts to use the second device the second device runs an instance of the game application. At step the smart phone checks whether the user pauses the application of the game application. If the user pauses the application the smart phone can cause the synchronization to happen. In step the smart phone can cause the application to be resumed based on the application state data.

At step the first electronic device uploads the application state data of the computer application to a remote storage service. The remote storage service can be a cloud computing service. Alternatively the remote storage service belongs to a cloud storage service cluster. The first electronic device is capable of transmitting the application state data to the remote storage service via a network which can include the Internet a WiFi network or a cellular phone network. In one embodiment the first electronic device can immediately transmit the application state data of the computer application to a remote storage service in real time without a substantial delay.

The application state data of the computer application can be transmitted to the remote storage service at a preconfigured time of day or when the first electronic device is at a preconfigured location. In some embodiment the application state data of the computer application can be transmitted to the remote storage service based on a sync score that would have an optimization scale built in. The optimization scale can be calculated based on a predetermined formula with inputs such as network speed location of the devices number of the devices time of day. Alternatively the application state data of the computer application can be transmitted to the remote storage service at a scheduled time depending on the type and speed of the connection between the first electronic device and the remote storage service in response to the backup event. The schedule can be preconfigured to avoid using a cellular data connection so that the transmitting is delayed until a WiFi connection is available. The backup can be incremental. For instance the difference between the application state data of the computer application and previously transmitted application state data can be transmitted to a remote storage service in response to the backup event.

At step the second electronic device uploads the application state data of the computer application to a remote storage service. The remote storage service can be a cloud computing service. Alternatively the remote storage service can belong to a cloud storage service cluster. The second electronic device is capable of transmitting the application state data to the remote storage service via a network which can include the Internet a WiFi network or a cellular phone network. In one embodiment the second electronic device can immediately transmit the application state data of the computer application to a remote storage service in real time without a substantial delay.

The application state data of the computer application can be transmitted to the remote storage service at a preconfigured time of day or when the second electronic device is at a preconfigured location. Alternatively the application state data of the computer application can be transmitted to the remote storage service at a scheduled time depending on the type and speed of the connection between the second electronic device and the remote storage service. The schedule can be preconfigured to avoid using a cellular data connection so that the transmitting is delayed until a WiFi connection is available. The backup can be incremental. For instance the difference between the application state data of the computer application and the previously transmitted application state data can be transmitted to a remote storage service in response to the backup event.

At step the distributed system can notify a user that two instances of the application state data have been saved. This notification can be sent through a network such as a WiFi network or a cellular phone network. At step the distributed system can allow the user to elect a final application state data out of the first instance of the application state data and the second instance of the application state data. In some embodiments the user can make the selection through the first electronic device. In some embodiments the user can make the selection through the second electronic device. In some embodiments the user can make the selection through a terminal coupled to the distributed system.

At step the cloud storage system checks whether a third device i.e. a desktop computer is currently connected with the cloud storage system. If the desktop computer is connected with the cloud storage system at step the system sends the application state data to the desktop computer. Otherwise the cloud storage system continues to check the connection with the desktop computer on a periodic basis. At step when the user starts to use the desktop computer the desktop computer starts to run an instance of the game application. At step the distributed system checks whether the user pauses the application of the game application and waits for the synchronization process to be finished. If the user pauses the application the distributed system can wait for the synchronization and then in step the distributed system can resume the application state recorded in the synchronized application state data at the desktop computer.

At step the distributed system can restart the application at the first device and sync with the remote server. At step the distributed system checks whether a second device connected with the cloud storage system. If there is a second device connected with the cloud storage system at step the distributed system can send the application state data to the second device. At step the distributed system can run an instance of the game application at the second device. At step the distributed system can resume the application state recorded in the synchronized application state data on the second device.

The processor s is the central processing unit CPU of the server and thus controls the overall operation of the server . In certain embodiments the processor s accomplishes this by executing software or firmware stored in memory . The processor s may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs trusted platform modules TPMs or the like or a combination of such devices.

The memory is or includes the main memory of the server . The memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. In use the memory may contain a code containing instructions according to the techniques disclosed herein.

Also connected to the processor s through the interconnect are a network adapter and a storage adapter . The network adapter provides the server with the ability to communicate with remote devices over a network and may be for example an Ethernet adapter or Fibre Channel adapter. The network adapter may also provide the server with the ability to communicate with other computers. The storage adapter allows the server to access a persistent storage and may be for example a Fibre Channel adapter or SCSI adapter.

The code stored in memory may be implemented as software and or firmware to program the processor s to carry out actions described above. In certain embodiments such software or firmware may be initially provided to the server by downloading it from a remote system through the server e.g. via network adapter .

The techniques introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware by special purpose hardwired circuitry or by a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more application specific integrated circuits ASICs programmable logic devices PLDs field programmable gate arrays FPGAs etc.

Software or firmware for use in implementing the techniques introduced here may be stored on a machine readable storage medium and may be executed by one or more general purpose or special purpose programmable microprocessors. A machine readable storage medium as the term is used herein includes any mechanism that can store information in a form accessible by a machine a machine may be for example a computer network device cellular phone personal digital assistant PDA manufacturing tool any device with one or more processors etc. . For example a machine accessible storage medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. .

The term logic as used herein can include for example circuitry programmed with specific software and or firmware special purpose hardwired circuitry or a combination thereof.

In addition to the above mentioned examples various other modifications and alterations of the invention may be made without departing from the invention. Accordingly the above disclosure is not to be considered as limiting and the appended claims are to be interpreted as encompassing the true spirit and the entire scope of the invention.

