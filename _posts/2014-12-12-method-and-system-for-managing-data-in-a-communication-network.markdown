---

title: Method and system for managing data in a communication network
abstract: A method for managing a plurality of files in a communication network having a plurality of clients includes a server receiving () metadata associated with a secured file stored in a virtual data drive of a first client. The server also receives () data segments associated with the file from the virtual data drive of the first client. The server stores the metadata and data segments associated with the file at the server. The server generates () a first representation of the file based on the received metadata and data segments associated with the file and sends () the first representation of the file to the plurality of clients. Next, the server receives () a request from a second client for at least one data segment of the file. The server authenticates the request based on a plurality of access rights of a user of the second client and sends () the at least one data segment of the file to the second client when the request is authenticated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09277009&OS=09277009&RS=09277009
owner: Google Technology Holdings LLC
number: 09277009
owner_city: Mountain View
owner_country: US
publication_date: 20141212
---
The present application is a continuation of U.S. patent application Ser. No. 13 929 650 filed Jun. 27 2013 which is a divisional of U.S. patent application Ser. No. 12 657 931 filed Jan. 29 2010 which claims priority from U.S. Provisional Application No. 61 206 588 filed Feb. 2 2009 all of which are incorporated herein by reference.

The present disclosure relates to managing data in a communication network. More specifically the present disclosure relates to providing access to data stored in a remote storage using a virtual data drive.

Typically data in the form of files such as documents image files and audio video multimedia files is stored as a sequence of data bytes in a computer s local storage for example the hard drive of the computer. Storing data in a local storage has a few limitations. One of such limitations is that only a restricted volume of data can be stored because of the limited capacity of the storage. For example most of the personal computers available in market have a local storage of 40 Gigabytes GB to 320 GB. Another limitation is that the local storage is neither secure nor reliable because data cannot be retrieved when the computer malfunctions or gets damaged. Also if the computer is lost or stolen data can be accessed by unauthorized users and can be misused. For example confidential data such as personnel details stored in a laptop can be accessed by unauthorized users for criminal activities.

To overcome these limitations associated with the local storage service providers enable users to store data at remote storage sites connected through networks. Mostly these remote storage sites are utilized as seamless backups or synchronization devices to maintain copies of data present in the local storage of the computer. When a file is created by a user in the local storage a copy of the file is automatically created at the remote storage site. Similarly when the user modifies a file stored in the local storage the same modification is automatically made to the copy of the file at the remote storage site. In this scenario if a user intends to store a 400 GB data in the remote storage he requires a local storage of 400 GB connected to his computer. Therefore in this case the user may be required to connect an external hard drive to his her computer or may be required to upgrade the local storage of his her computer. This requires additional expenditure and hence is not an efficient way to store a large amount of data.

Another manner in which the remote storage sites are utilized is non seamless. Users having an access to the remote storage sites manually upload and download data to and from the remote storage sites. In this scenario only the downloaded data is stored in the local storage of the computer. Also in this case if the user intends to make modification to an already uploaded file he she has to manually download the file on the local storage and then make changes to it. Therefore he she has to upload the modified file on the remote storage site again. Also in the case of remote storage sites users have to continuously keep track of the free space available in the local storage of their computers as they need to delete files from the local storage to vacate space for files they intend to download. Thus at every step user s manual intervention is required making this process entirely non seamless.

In light of the foregoing it is desirable to have a system that enables users to seamlessly store data at a remote storage without maintaining a copy of the data at the local storage. Also the system should not require the user to manually download a file on his her local storage every time he she wants to make changes to the file already on the remote storage.

Before describing in detail the embodiments in accordance with the disclosure it should be observed that these embodiments reside primarily in the method and system used for managing data in a communication network. Accordingly the method steps and system components have been represented to show only those specific details that are pertinent for an understanding of the embodiments and not details that will be apparent to those with ordinary skill in the art.

Data management system includes one or more clients connected to communication network . These clients are shown as a first client and a second client in .

In the description of the present patent application the term clients refers to computer program applications installed to access data stored at remote storage . As depicted first client and second client are installed on a computational device having a local storage shown as a first computational device having a first local storage and a second computation device having a second local storage . Examples of computational devices include but are not limited to a computer a laptop a personnel data assistant PDA and a mobile phone. Examples of local storage include but are not limited to a hard disk and a solid state drive. In accordance with another embodiment local storage may comprise a metadata store and a data store such that metadata associated with a file is stored in the metadata store of the local storage and data segments associated with the file are stored in the data store of the local storage.

As mentioned first client and second client are applications running on first computational device and second computation device respectively. In one example client is a web browser. In another example client is a standalone client application based on JAVA. Further operating systems such as Windows Linux and Macintosh Mac are installed on computational devices and .

First client enables computational device to communicate with server and receive data stored in remote storage . Further client enables its user to upload a file on remote storage by placing the file in a virtual data drive of first client . In accordance with an embodiment of the disclosure the virtual data drive is a shortcut in the form of an icon that can be used to upload one or more files to server . For example if first client runs on the Microsoft Windows operating system the virtual data drive is displayed with other data drives such as a C drive or a D drive. When the user of first client places a file in the virtual data drive of first client the data segments and metadata associated with the file are transferred from local storage to remote storage . Based on the received metadata and data segments server generates a first representation of the file and sends a message describing the first representation of the file to clients and . On receiving the message from server second client stores the first representation of the file in local storage and first client stores it in local storage .

In accordance with another embodiment first client can also generate a default first representation of the file uploaded to remote storage . In this case the first representation of the file is not sent to first client by server and only sent to second client .

The first representation of the file has a smaller size as compared with the size of the file. Typically the first representation of the file includes metadata associated with the file. The metadata associated with the file includes data related to the hierarchy of directories associated with the file. In one implementation of the disclosure the first representation also includes some data segments associated with the file. For example if the file is a music file the first representation of the music file may include metadata associated with the music file and the first and last data segments of the music file. Examples of the metadata include size of the music file artist name song name album name composer name offset of the music file in the remote storage and date of creation of the music file. In accordance with another implementation the first representation of the file does not include any metadata or data segment associated with the file. In this case the first representation can be for example only the name of the music file and the like.

In accordance with an embodiment of the disclosure the first representation of the file is determined by server based on a set of attributes related to the file. For example the set of attributes may include name size of the file content or content overview of the file timestamp of creation and timestamp of modification. Also the first representation of the file determines the format in which first client and second client store the file in their corresponding local storages. For example if the file contains an image the first representation of the file can be a copy of the image having a lower resolution.

In accordance with an embodiment of the disclosure the first representation of the file is treated as a valid system file object by applications installed on computational devices and i.e. applications can use the first representation of the file as a valid form of the file. For example if the first representation of an image file is a thumbnail then the thumbnail can be accessed by a Picture Viewer application in the same way as Picture Viewer accesses the image file.

Once the first representation is received by first client and second client either of the clients can send a request to server to access the uploaded file if it is not available in corresponding local storage. For example if the uploaded file is a song and after viewing the first representation of the song the user of second client wants to view the entire song he she can send a request to server to listen to the song. Thereafter server receives this request from second client and grants the user access to the song if he she has access rights to view the song. In this case server streams data segments associated with the song from remote storage to second client . According to an embodiment one or more data segments associated with the file are streamed from remote storage and stored at local storage of second client if the request is not for a secured file . For example if while uploading the song to remote storage the user of first client does not classify the song as a secured file the song is cached at local storage of second client when second client gets access to the song. However if the user of first client classifies the song as a secured file the song is not cached at local storage of second client . In this case second client only stores basic metadata such as file name and file creation timestamp in local storage .

However if the file movie song is available in local storage of second client the request to server is not sent and the file already stored in local storage is provided to second client . In other words second client only requests for files which are not saved or cached in its local storage .

In accordance with an embodiment of the disclosure the number of data segments cached at local storage of second client is based on one or more parameters of the communication network. The one or more parameters include but are not limited to bandwidth of the communication network and connection speed. For example when second client is connected to server through a cellular network the number of data segments being transferred by server and subsequently cached in local storage of second client is less than the number of data segments transferred by server and subsequently cached in local storage when second client is connected to server through a high speed cable connection.

In accordance with another embodiment one or more data segments associated with the file are synchronously accessed from remote storage for the user using first client . For example a user of first client can request access to a document which is being edited by a user of second client . The changes being made to the document by the user of second client are received by server that further updates the document correspondingly. Server also sends the updated document for access to the user of first client . Thus the user of first client can synchronously access the document being changed by the user of second client .

In accordance with an embodiment of the disclosure if the file requested by second client is a media file only the data segments which are not included in the first representation of the file are sent to second client . For example if the first representation which is already stored in local storage of second client has the first and last data segments of the song only the remaining data segments are sent to second client . On the contrary if the file is a document the first representation of the document includes metadata associated with the document and all the data segments are sent to second client in this case.

In accordance with another embodiment if few data segments are already present in local storage of second client those data segments are not requested by second client while sending the request to server and only remaining data segments are requested. For example if some of the data segments of a song are already saved or cached in local storage only the remaining data segments of the song are requested by second client .

On receiving the data segments according to one example second client adds the received data segments to the first representation of the file to create a second representation of the file. In one embodiment second client receives all data segments associated with the file and replaces the first representation of the file with the second representation of the file in local storage . In this case the second representation of the file is a complete file i.e. all the data segments associated with the file are stored in local storage .

In accordance with another embodiment client is configured to send a request to server for a random access of a file. For example the virtual data drive enables second client to randomly access a particular data segment associated with the file without downloading all the data segments associated with the file starting from the beginning. For example when a user of client wants to play a music file in a media player he she may jump to the middle of the song. In this case second client requests for data segments located in the middle of the sequence of data segments of the song. Thus data segments from the middle of the song are streamed from remote storage to second client . In other words if the user decides to play the initial portions of the music file then second client requests only the necessary data segments and creates a chunk file that only takes up as much storage as the size of the music file even though its data segments may be organized differently based on the nature in which the file was read.

Server is further configured to generate the first representation of a file when the file is modified in remote storage . For example if second client modifies a file stored at remote storage server determines an updated first representation of the file and sends it to first client and second client .

In accordance with another example server is configured to allow offline access to a file such that second client can request which files it will require for offline access. In this case server would send the requested files to second client . For example a user of second client may wish to access a music file for later use when second client will not be connected in the future to communication network . In this case server provides the entire music file to local storage of second client so that the user can play the music file even when second client is not connected to communication network .

In accordance with an embodiment each user should have the access rights to clients and to be able to access or upload files to and from server . Server is configured to create accounts for each user and define access rights to users of clients and . Based on the account server is further configured to authenticate users of clients and . An account is created for a user by server when the user signs up with server . The user account is created by supplying a username and a password along with additional personal information such as name date of birth sex and country. Access rights include a combination of the right to upload files to the server the right to read or modify files the right to delete files and the like.

In accordance with an embodiment of the disclosure a file uploaded by a user of first client into the virtual data drive of first client is not removed from local storage unless there is need to free up space in local storage . In this case the file is kept in local storage of first client and uploaded to server as well. Further in this case the first representation of the file generated by server is also received by first client although it already has the uploaded file.

Although the above description relates to uploading a file in remote storage by saving the file in a virtual drive in accordance with an embodiment of the disclosure data segments associated with the file can automatically be transferred to remote storage to free memory in local storage for new files. For example a user uploads a video movie file to the virtual data drive which already has a number of song files stored in it. Once the song files stored in the virtual data drive have been transferred to remote storage they can be removed from local storage to free space for the video movie file.

Before a user of client can access or upload files to server the user has to sign up with server . By signing up with server a user account is created for the user with a username and password along with additional personal information. Each user account is provided with access rights by a rights manager . Access rights provided by rights manager may include a combination of the right to upload files to the server the right to read or modify files the right to delete files and the like.

In accordance with an embodiment to upload a file in remote storage a user of client uploads a file into a virtual data drive of computational device . Metadata and data segments associated with the file uploaded into the virtual data drive are received by a receiver of server . The metadata associated with the file includes but is not limited to data related to the hierarchy of directories associated with the file and file attributes. For example if a user uploads a song file using the virtual data drive of computation device the metadata of the song can include the size of the file artist name track name etc.

After receiving the metadata and data segments associated with the file a processor of server generates a first representation of the file based on the metadata and data segments received by receiver . The first representation of the file is smaller in size as compared with that of the file. In the example the first representation of the song file can be the artist name track name and the starting and ending segments of the song.

A sender of server sends the first representation of the file to all clients not shown in present in the communication network. In the embodiment shown in sender sends the first representation of the file to client . When the 10 first representation is received it is stored in local storage associated with client of computational device .

After receiving the first representation and viewing it the user of client may want to view the entire file or some part of it. In this case the user of client requests access to one or more data segments of the file. Client checks if the requested data segments of the file are available in local storage . If the requested data segments are available in local storage client provides the requested data segments of the file to the user. If the requested data segments are not available in local storage client sends a request to server to access the one or more data segments of the file stored in remote storage . In the previous example the user may wish to play the song file. Client checks if the song file is available for playback in local storage . If it is not available client sends a request to server for playing the song file.

Receiver of server receives this request. Processor of server processes the request and instructs sender of server to establish a streaming connection with a streamer of client and begin streaming the requested data segments of the file. A cache manager associated with client receives the streamed data segments of the file from sender of server to enable access by the user of computational device . In the example the user wants to play the song file which is stored in remote storage of server . Streamer of the client receives the stream of data segments of the song file from sender of server and cache manager of client begins to catch the stream of data segments of the song file for playback by computational device .

In another example the user of computational device can modify one or more data segments of the file. In this case client sends a request to server for modifying one or more data segments of the file stored in remote storage . Receiver of server receives the request. Processor of server processes the request and instructs sender of server to send the requested data segments of the file to client . The user can then modify the one or more data segments. The modified data segments are sent back to server by a sync manager . Receiver of server receives the modified data segments and processor updates the first representation of the file based on the modified data segments. Sync manager of client then synchronizes and updates the first representation of the file stored in local storage with the first representation of the file stored at remote storage of server . The updated first representation of the file is then sent by sender to all clients connected to server . For example a user may modify an image stored in remote storage of server . Sender provides the image to client of computational device to enable editing by the user. The edited image is updated in remote storage of server . Processor of server updates the first representation of the image and sync manager of client synchronizes the first representation of the image stored in local storage of client with the updated first representation of the image provided by server .

In accordance with yet another example the user of client requests to enable access to one or more data segments of a secured file. Client sends a request to server to enable access to the one or more data segments of a secured file stored in remote storage . For example the user of computational device may wish secure access to a financial document. In this case client sends a request to server for secure access to the financial document and this request is received by receiver .

The received request is processed by processor of server and processor in turn sends a request to rights manager for authenticating the user of client based on the access rights of the user. If rights manager authenticates the user sender is authorized to send the requested data segments of the secured file to client . In an embodiment the requested data segments are directly streamed to streamer of client without being cached by cache manager or stored by local storage of client . In the example if the user has access rights to the financial document then server provides secure access to the financial document and does not cache the financial document in local storage . In other words the financial document bypasses local storage and is directly streamed to client .

In accordance with another embodiment of the disclosure the user of client can also modify one or more data segments of a secured file by similar means and the updated first representation is then sent to all the clients of communication network .

As depicted computational device includes client a windows explorer extension module a Windows file system API module and a Remote procedure call RPC module . Windows explorer extension module provides additional functionalities to the user of client by providing additional control elements. Examples of the control elements include buttons menu items and icon overlays. Windows file system application programming interface API module facilitates the interception of the requests generated for accessing files. The requests are generated by the applications running on computational device . Further Windows file system API module facilitates direction of these requests to client .

Similarly computational device includes client a Mac Finder extensions module a Mac file system API module and a Remote procedure call RPC module . The Mac Finder extensions module provides additional functionalities to the user of client by providing new control elements. Examples of the new control elements include new buttons menu items and icon overlays. The Mac file system API module facilitates the interception of the requests generated to access files. The requests are generated by the applications running on computational device . Further Mac file system API module facilitates direction of these requests to client .

In one embodiment client includes a File system layer a Shell API module a Sync Manager a Cache Manager and data streamers . The requests directed to client by Windows file system API module are handled by File system layer . File system layer also enables computational device to perform various operations on the files stored in remote storage . Examples of the various operations include opening a file reading a file seeking a file creating a file and modifying a file.

Extension calls generated by windows explorer extension module for providing the additional control elements to the user of client are handled by Shell API module .

Sync Manager facilitates the synchronization of client with server . During the synchronization Sync Manager detects and uploads newly created files to remote storage . Further Sync manager uploads the metadata associated with the files that are placed in the virtual data drive of client . Modifications made to these files are uploaded by Sync Manager . Sync Manager is further configured to send periodic requests to server for downloading modifications made by other clients on the files that are stored in local storage . Sync Manager can thus download the updated first representation of the modified files and can also download the entire modified file to provide offline access to the file.

Cache Manager is configured to store the first representation of a file in local storage based on the message received from server . The first representation of the file is either stored automatically or on a request by the user. Moreover Cache manager is configured to receive data segments associated with the file from remote storage . On receiving the data segments cache manager transforms the first representation of the file to the second representation of the file. In one embodiment of the disclosure cache manager receives all data segments associated with the file and replaces the first representation of the file with all data segments of the file. Further data streamers are configured to download data segments from remote storage . In one example data streamers download data segments as multiple streams of data.

Similarly client includes a File system layer a Shell API module a Sync Manager a Cache Manager and data streamers . The functionalities of these elements are the same as those explained for client and hence are not described again for the sake of simplicity.

In accordance with another implementation a compressed version of the file is stored with metadata as the first representation in local storage . For example if the file is an image a copy of the image having a lower resolution is stored in local storage .

At step data segments associated with the file saved in the virtual drive of client are received by receiver of server . At step processor of server generates a first representation of the file based on the received metadata and data segments associated with the file. The first representation of the file is also generated based on a set of attributes related to the file and a set of predefined rules. The set of attributes may include size of the file content of the file timestamps of creation and timestamp of modification. Processor also allows the user of client who uploads the file to customize a set of predefined rules for generating the first representation of the file. The predefined rules include but are not limited to a combination of one or more attributes related to the file such as type of file. As an example a first representation of an image file is a compressed image smaller than the actual image and information about the author of the image. The user can customize this first representation of the file such that the first representation of the image file contains a thumbnail of the image file.

At step sender of server sends the first representation of the file to clients and connected to server . Based on the received first representation client stores the first representation of the file in its local storage and client stores it in its local storage . After receiving the first representation of the file client can generate a request to access the data segments of the file based on the first representation of the file. Client checks whether the requested data segments associated with the file are present in local storage either saved or cached if the file was earlier accessed by client . Consider the example of a music file. When the music player is launched client checks whether the requested portions of the music file are already stored or cached in local storage . Client accesses the requested data segments of the file when the requested data segments are stored or cached in local storage . The music player gets the access to the requested portions of the music file when they are stored or cached in local storage . If the requested data segments are not stored in local storage client generates a request based on the first representation of the file and sends the request to server . For example when a user desires to view the image file using an application such as a Picture viewer the compressed version of the file i.e. a copy of the image file with lower resolution is immediately displayed in the picture viewer. To improve the resolution of the displayed image client may send a request to server for streaming the remaining data segments from remote storage to local storage .

At step receiver of server receives a request for access to one or more data segments of the file from client .

At step sender of server sends the requested one or more data segments of the file to client . On receiving the stream of the requested data segments of the file from sender the first representation of the file is transformed into a second representation of the file and provided to the user. In the example the image file is received and displayed in the picture viewer. In another implementation on receiving the remaining data segments client appends the received data segments with the first representation of the file. Consider the example of the music file where the first representation of the music file includes metadata associated with the music file the first data segment of the music file and the last data segment of the music file stored in local storage . When the user launches a music player to play the music file the first data segment stored in local storage is accessed by client and played by the music player. Meanwhile client sends a request to server for streaming the remaining data segments associated with the music file. As the remaining data segments are streamed from remote storage to local storage the remaining data segments are continuously played by the music player. Client accesses the second representation of the music file which includes the requested data segments associated with the music file. Subsequently client delivers the requested data segments in the right sequence to the music player.

At step remote storage of server stores the received metadata and data segments associated with the file when the user uploads the file into the virtual data drive of client . For example a song file uploaded into the virtual data drive by the user is received by remote storage . An application running on computational device is used by the user to make changes to the file.

At step receiver of server receives the changes made to one or more data segments of the file. In our example the user can make changes to the song file. The changed song file is received by server .

At step processor of server . updates the first representation of the file based on the changes made to one or more data segments of the file by the user. In the example processor updates the first representation of the song file based on the changes made to the song file.

At step the updated first representation of the file is sent to clients and . In an example implementation the updated first representation of the file is synchronized with the sync managers of all the clients connected to the communication network. For example the updated first representation of the music file is synchronized with all the music players in the network so that all music players can play the updated first representation of the music file.

At step server receives the request for accessing one or more data segments of the secured file from client .

At step processor of server authenticates the user of client based on the access rights of the user of client to check whether the user is authorized to access the one or more data segments of the secured file. The user can be authenticated by using various tools that implement methods for authentication. An example of a method that can be used for user authentication involves asking for a username and a password from the user. As already described before the user can access or upload files on remote storage of server the user has to sign up with server . By signing up with server a user account is created by rights manager for the user with a username and password along with additional personal information. Each user account is provided with access rights to server by rights manager . As a result a list of authentic usernames and passwords are maintained at the server for authentication.

At step processor of server checks if the authentication of the user is successful. If the authentication of the user is unsuccessful the steps of the flowchart terminate. If the authentication of user succeeds then at step sender of the server streams the requested data segments of the file to client . On receiving the stream of the requested data segments of the file from the sender the first representation of the file is transformed into a second representation of the file and provided to the user. In another embodiment on receiving the remaining data segments client appends the received data segments with the first representation of the file. The data segments are directly accessed by client without being stored in the local storage or cached by the cache manager .

Various embodiments of the disclosure provide method and system for managing data in a communication network such as a Local Area Network LAN a Wide Area Network WAN a communication network and the Internet. A user working on a computational device installed with a client is enabled to upload a file on a remote storage by placing the file in a virtual data drive. On uploading the file most of the data segments associated with the file are moved to the remote storage. The file can either be accessed manually by the user or can be automatically downloaded whenever required by an application running on the computational device based on the metadata related to the file stored in the local storage. Further the user can randomly access the file stored in the remote storage from any site connected to the communication network through a virtual data drive. Further the disclosure enables the user to directly access the 5 file stored in the remote storage. In this case the data segments associated with the file are not cached in the local storage of the user.

The method and system for managing data in a communication network as described in the disclosure may be embodied in the form of a computer system. Typical examples of a computer system include a general purpose computer a programmed microprocessor a micro controller a peripheral integrated circuit element and other devices or arrangements of devices that are capable of implementing the steps that constitute the method of the disclosure.

The computer system typically comprises a computer an input device and a display unit. The computer typically comprises a microprocessor which is connected to a communication bus. The computer also includes a memory which may include a Random Access Memory RAM and a Read Only Memory ROM . Further the computer system comprises a storage device which can be a hard disk drive or a removable storage drive such as a floppy disk drive and an optical disk drive. The storage device can be other similar means for loading computer programs or other instructions into the computer system.

The computer system executes a set of instructions that are stored in one or more storage elements to process input data. These storage elements can also hold data or other information as desired and may be in the form of an information source or a physical memory element present in the processing machine. Exemplary storage elements include a hard disk a DRAM an SRAM and an EPROM. The storage element may be external to the computer system and connected to or inserted into the computer to be downloaded at or prior to the time of use. Examples of such external computer program products are computer readable storage mediums such as CD ROMS Flash chips and floppy disks.

The set of instructions may include various commands that instruct the processing machine to perform specific tasks such as the steps that constitute the method of the disclosure. The set of instructions may be in the form of a software program. The software may be in various forms such as system software or application software. Further the software may be in the form of a collection of separate programs a program module with a large program or a portion of a program module. The software may also include modular programming in the form of object oriented programming. The software program that contains the set of instructions can be embedded in a computer program product for use with a computer the computer program product comprising a computer usable medium with a computer readable program code embodied therein. Processing of input data by the processing machine maybe in response to users commands results of previous processing or a request made by another processing machine.

The modules described herein may include processors and program instructions that are used to implement the functions of the modules described herein. Some or all the functions can be implemented by a state machine that has no stored program instructions or in one or more Application specific Integrated Circuits ASICs in which each function or some combinations of some of the functions are implemented as custom logic.

While the various embodiments of the disclosure have been illustrated and described it will be clear that the invention is not limited only to these embodiments example or implementations. Numerous modifications changes variations substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the invention.

