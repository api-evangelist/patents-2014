---

title: High availability architecture for a cloud-based concurrent-access collaboration platform
abstract: Embodiments in the present disclosure include systems and methods related to a high-availability architecture for a cloud-based concurrent-access collaboration platform. The disclosed technology relates to an active data center which includes multiple document server instances that handle user requests for concurrently accessing documents. Multiple document server instances are implemented on a single physical server. This architecture uses an instance assignment manager to assign documents to the document server instances, a primary repository to store backup snapshots of the documents, and a datastore to store all changes made to the documents. The disclosed technology also involves a backup data center that can be swapped with the active data center automatically.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483473&OS=09483473&RS=09483473
owner: Box, Inc.
number: 09483473
owner_city: Redwood City
owner_country: US
publication_date: 20140902
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 877 938 filed Sep. 13 2013 the contents of which are incorporated by reference in their entireties herein.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the United States Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document Copyright 2013 Box Inc. All Rights Reserved.

With the advancement in digital and online technologies people now manage an abundance of information and are in constant communication with others regardless of time and location. Cloud based collaboration platforms have been developed to support such lifestyles. It can be useful for such platforms to offer features that enable users to create view edit annotate store share and otherwise manage information in a user friendly and efficient manner.

In order to provide concurrent collaborative access to that information and provide concurrent updates to that data in real time various factors need to be accounted for in order to prevent data loss maintain accessibility prevent overloading of system resources maintain storage and maintain privacy.

The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding of the disclosure. However in certain instances well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure can be but not necessarily are references to the same embodiment and such references mean at least one of the embodiments.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but no other embodiments.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that same thing can be said in more than one way.

Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any terms discussed herein is illustrative only and is not intended to further limit the scope and meaning of the disclosure or of any exemplified term. Likewise the disclosure is not limited to various embodiments given in this specification.

Without intent to limit the scope of the disclosure examples of instruments apparatus methods and their related results according to the embodiments of the present disclosure are given below. Note that titles or subtitles may be used in the examples for convenience of a reader which in no way should limit the scope of the disclosure. Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

Embodiments of the present disclosure include systems and methods for providing high availability for web based document creation and editing in a collaborative environment including a cloud based platform e.g. cloud based file sharing collaboration and or storage platform service . The system architecture includes various components which allow for real time data synchronization between a plurality of collaborators while avoiding latency issues due to increased user activity on any one particular work item as well as increased number of work items which are currently being accessed. In other words the scalability of the system is dynamic and is automatically determined based on system use at any given time.

The methods and system used to maintaining high availability for collaborative editing in a cloud based platform are further discussed in the following description beginning with a general overview of a collaborative cloud based platform with reference to .

The client devices can be any system and or device and or any combination of devices systems that is able to establish a communication or a connection including wired wireless cellular connections with another device a server and or other systems such as the host server . The client devices typically include a display and or other output functionalities to present information and data exchanged between among the client devices and or the host server .

For example the client devices can include mobile handheld or portable devices or non portable devices and can be any of but not limited to a server desktop a desktop computer a computer cluster or portable devices including a notebook a laptop computer a handheld computer a palmtop computer a mobile phone a cell phone a PDA a smart phone e.g. a BlackBerry device such as BlackBerry Z10 Q10 an iPhone Nexus 4 etc. a Treo a handheld tablet e.g. an iPad iPad Mini a Galaxy Note Galaxy Note II Xoom Tablet Microsoft Surface Blackberry PlayBook Nexus 7 etc. a phablet e.g. HTC Droid DNS etc. a tablet PC a thin client a hand held console a hand held gaming device or console e.g. XBOX live Nintendo DS Sony PlayStation Portable etc. mobile enabled powered watch e.g. iOS Android or other platform based Google Glass a Chromebook and or any other portable mobile hand held devices etc. running on any platform or any operating system e.g. Mac based OS OS X iOS etc. Windows based OS Windows Mobile Windows 7 Windows 8 etc. Android Blackberry OS Embedded Linux platforms Palm OS Symbian platform Google Chrome OS and the like. In one embodiment the client devices and host server are coupled via a network . In some embodiments and the client devices and host server may be directly connected to one another.

The input mechanism on client devices can include touch screen keypad including single touch multi touch gesture sensing in 2D or 3D etc. a physical keypad a mouse a pointer a track pad motion detector e.g. including 1 axis 2 axis 3 axis accelerometer etc. a light sensor capacitance sensor resistance sensor temperature sensor proximity sensor a piezoelectric device device orientation detector e.g. electronic compass tilt sensor rotation sensor gyroscope accelerometer or a combination of the above.

Signals received or detected indicating user activity at client devices through one or more of the above input mechanism or others can be used by various users or collaborators e.g. collaborators for accessing through the network a web based collaboration environment or online collaboration platform e.g. hosted by the host server . The collaboration environment or platform can have one or more collective settings for an enterprise or an organization where the users are associated and can provide a user interface for the users to access such platform under the settings .

In general the network over which the client devices and the host server communicate may be a cellular network a telephonic network an open network such as the Internet or a private network such as an intranet and or the extranet or any combination or variation thereof. For example the Internet can provide file transfer remote log in email news RSS cloud based services instant messaging visual voicemail push mail VoIP and other services through any known or convenient protocol such as but is not limited to the TCP IP protocol Open System Interconnections OSI FTP UPnP iSCSI NSF ISDN PDH RS 232 SDH SONET etc.

The network can be any collection of distinct networks operating wholly or partially in conjunction to provide connectivity to the client devices and the host server and may appear as one or more networks to the serviced systems and devices. In one embodiment communications to and from the client devices can be achieved by an open network such as the Internet or a private network such as an intranet and or the extranet. In one embodiment communications can be achieved by a secure communications protocol such as secure sockets layer SSL or transport layer security TLS .

In addition communications can be achieved via one or more networks such as but are not limited to one or more of WiMax a Local Area Network LAN Wireless Local Area Network WLAN a Personal area network PAN a Campus area network CAN a Metropolitan area network MAN a Wide area network WAN a Wireless wide area network WWAN or any broadband network and further enabled with technologies such as by way of example Global System for Mobile Communications GSM Personal Communications Service PCS Bluetooth WiFi Fixed Wireless Data 2G 2.5G 3G e.g. WCDMA UMTS based 3G networks 4G IMT Advanced pre 4G LTE Advanced mobile WiMax WiMax 2 WirelessMAN Advanced networks enhanced data rates for GSM evolution EDGE General packet radio service GPRS enhanced GPRS iBurst UMTS HSPDA HSUPA HSPA HSPA UMTS TDD 1xRTT EV DO messaging protocols such as TCP IP SMS MMS extensible messaging and presence protocol XMPP real time messaging protocol RTMP instant messaging and presence protocol IMPP instant messaging USSD IRC or any other wireless data networks broadband networks or messaging protocols.

A workspace can generally refer to any grouping of a set of digital content managed by the collaboration platform. For example the workspaces A and B include general digital content while the workspace may include Notes only. In some embodiments workspaces may be heterogeneous and include both general digital content and Notes. The grouping can be created identified or specified by a user or through other means such as system or administrative settings. A user may be a creator user owner user editor user or administrative user for example.

In general a workspace can be associated with a set of users or collaborators e.g. collaborators who have access to the content included therein. The levels of access e.g. based on permissions or rules of each user or collaborator to access the content in a given workspace may be the same or may vary among the users. Each user may have their own set of access rights to every piece of content in the workspace or each user may have different access rights to different pieces of content. Access rights may be specified by a user associated with a workspace and or a user who created uploaded a particular piece of content in the workspace or any other designated user or collaborator associated with a particular workspace.

In general the collaboration platform allows multiple users or collaborators to access or collaborate on work items such that each user can remotely see edits revisions comments or annotations being made to specific work items through their own user devices in real time. For example a user can create a work item in a workspace for other users to access e.g. for viewing editing commenting signing off or otherwise manipulating . The user can login to the online platform and create a Note or any other type of work item in an existing workspace or to a new workspace. The document can then be shared with existing users or collaborators in that workspace.

The web based platform for collaborating on projects or jointly working on documents can be used by individual users and shared among collaborators. In addition the collaboration platform can be deployed in an organized setting including but not limited to a company e.g. an enterprise setting a department in a company an academic institution a department in an academic institution a class or course setting or any other types of organizations or organized setting.

When deployed in an organizational setting multiple workspaces e.g. workspace A B C can be created to support different projects or a variety of work flows. Each workspace can have its own associate work items. For example workspace A can be associated with work items workspace B can be associated with work items and workspace can be associated with work items . The work items and can be unique to each workspace but are not required to be. For example a particular work item or a Note can be associated with only one workspace. In additional embodiments a work item Note or both can be associated with multiple workspaces.

In general each workspace has a set of users or collaborators associated with it. For example workspace A is associated with multiple users or collaborators . In some instances workspaces deployed in an enterprise can be department specific. For example workspace B can be associated with department and some users shown as example user A and workspace N can be associated with departments and and users shown as example user B .

Within a given workspace collaborators of that workspace have simultaneous read write access to a Note in the workspace. In other words once a Note has been created and the creator of that note has invited other collaborators or has created the note in a file location which already provides collaborative permission each collaborator may edit the Note at the same time. Accordingly each user concurrently accessing the Note may view the Note being edited in real time without personally making those edits. In a concurrent fashion each of the collaborators is able to make changes to the note or even edit the changes made by other collaborators. With Note workspaces a separate list of collaborators can be specified at the Note level to override the list of collaborators at the workspace level so that different Notes within the same workspace can be associated with different sets of collaborators. Additionally the permissions and accessibility of the collaborators for each Note workspace may be specified by an owner or creator of a Note. For example though some collaborators may be able to access and view the Note those collaborators may not be able to edit or share the Note.

In each workspace A B . . . N when an action is performed on a work item by a given user or any other activity is detected in the workspace other users in the same workspace can be notified e.g. in real time or in near real time or not in real time . Activities which trigger real time notifications can include by way of example but not limitation adding deleting or modifying collaborators in the workspace uploading downloading adding deleting a work item in the workspace creating a discussion topic in the workspace.

In some embodiments items graphs images etc. or content created downloaded or edited can cause notifications to be generated for any given work item note or workspace notebook . Such notifications can be sent to relevant users to notify them of actions surrounding a download an edit a change a modification a new file a conflicting version or upload of an edited or modified file.

In certain embodiments where notifications are presented in a user interface of the web based collaboration platform users can create action items e.g. tasks and delegate the action items to other users e.g. collaborators on a work item via the same interface. The collaborators can be in the same workspace A and can invite a new collaborator to join the workspace for example. Similarly in the same user interface where discussion topics can be created in a workspace e.g. workspace A B or N etc. actionable events on work items can be created and or delegated assigned to other users such as collaborators of a given workspace or other users. Through the same user interface task status and updates from multiple users or collaborators can be indicated and reflected. In some embodiments the users can perform the tasks e.g. review or approve or reject etc. via the same user interface.

In order to provide real time editing within the collaborative environment described above a high availability architecture for the system e.g. host system in is utilized which is both highly scalable and fault tolerant. This high availability architecture is further described in the following paragraphs with reference to the remaining figures.

Domain Name System DNS records dictate the data center to which each request first is routed. The data centers receive incoming access requests e.g. to access Notes or other workspaces . In the architecture as described herein two or more data centers are utilized though only one data center is considered active at any given time for received access requests for Notes. The active data center is the only data center capable of accepting writes edits to a work item e.g. Note .

A hardware load balancer LB layer may be implemented in each data center. When an access request is received from a user e.g. client device for example manually configured public DNS records are used to route requests to the active data center s load balancer. The hardware LB layer may be implemented for example using A10 hardware load balancers. The hardware load balancers are used to route traffic to the correct Notes virtual IP VIP . The hardware load balancer is also responsible for distributing traffic or access requests equally e.g. layer 4 round robin to the software load balancer layer.

A software LB layer performs advanced software based load balancing of all incoming note requests to the dedicated Notes servers. The software LB layer can be implemented as one or more Nginx servers for example. Each software LB server handles routing requests to the correct Notes server if the request is targeted to the same data center. If an incoming request is received at the non active data center then the software LB server will direct the request to the active data center. Additionally the software LB server can handle reverse proxying for WebSocket requests and XHR polling. If a request for a static asset is received the software LB server can hand off the request to an associated proxy server.

The software LB layer may also include one or more proxy servers such as an HAProxy server. The proxy server may provide layer 7 load balancing support for round robin requests by handling any incoming access requests for static assets on each of the nodes . The proxy server may also perform active server health checks.

The Notes servers may provide the requested user access to a Note as well as the concurrent editing viewing modifying notifications and backup storage for that Note for example. The Notes server can also perform secure socket layer SSL termination from the software LB layer. Each Note server may have multiple Node.js instances and requests may be routed by an Nginx instance for example. Also similar to the software LB layer each of the Nginx instances may be coupled to a proxy e.g. HAProxy server. So the Notes server may hand off any static assets requests to the proxy HAProxy server. The proxy server can handle on server load balancing and health checks. For example the proxy server may be responsible for load balancing static assets amongst the local Node.js instances of Notes.

To provide high availability concurrent editing and access to each note each physical Notes server hosts multiple instances of the Notes application. Accordingly each instance can listen on a port unique to the physical host on which it is run. The instances can be implemented in a single threaded run time environment such as Node.js. The Nginx instance hosted on a Notes server can be responsible for routing WebSocket and XHR polling requests received by the Notes server to the appropriate Notes instance. Each Notes server may include various Notes instances which may include a Node.js instance that includes pad editing functionality e.g. Etherpad and a Helix participant. Each Notes server may also include a Helix controller and a Java Virtual Machine JVM . The Notes instance may also be referred to as a node in the following paragraphs.

Two types of access requests may be routed to a node . The first is static assets requests. As described in previous paragraphs the static assets are handled by the proxy server. Static assets requests may also include the first handshakes made with a particular client e.g. computer or other user device used to access the platform such as when a particular client joins a Note. The static asset requests may be routed round robin to any given Notes instance in an active data center. Additionally the static requests may be utilized to lookup information for the request such as the address of the particular node to which the client should connect. The address lookup can be performed via a resource management process such as Helix. The static asset requests are stateless can be handled by a differing architecture which does not rely on hardware load balancers such as Node.js Express.

The second type of request received at a node may be via Socket.IO. These include any stateful asynchronous requests from clients. For example the Socket.IO requests may include incoming user changesets e.g. edits to a particular Note handled by that node user cursor movements within the Note and all other interactions with the editor implemented in the Note. Additionally the Socket.IO requests may proxy all requests to the primary application programming interface API on the cloud based collaborative platform.

To handle Socket.IO requests such as incoming user changesets edits to a Note the node merges queued changes into the Note each 200 milliseconds ms via a method known as operational transformation OT in which a current change operation performed on the Note is based on the prior change operation .

The node is also responsible for persisting updated Notes to various locations within the system architecture. For example updated versions of the Note are persisted to an in memory cache of the Notes instance on which that node is located. The data in the buffering layer is actively encrypted using for example by calling encrypt upload a C binary written by Box. The encrypt upload binary returns the encrypted file and a data encryption key DEK in .meta format. The encrypted key is then sent to Interval Key Service IKS for a second round of encryption. IKS encrypts the DEK and returns a second encrypted key in a .meta2 format.

The in memory cache not shown acts as a buffering layer to the non relational datastore on which an encrypted version of the Note is persisted from the Notes server. The encrypted Note may be stored in the datastore for example in multiple rows. There are four types of rows meta2 rows full text rows revision rows and annotation rows. Meta2 rows contain a single .meta2 e.g. encrypted DEK. Full text rows include a complete representation of the Note. Revision rows include information about an individual edit made by a single user. Annotation rows contain information about an annotation added to a Note. Each Note is associated with only one meta2 row and one full text row but can be associated with numerous revision rows and annotation rows. So the datastore may be a persistent store for all Notes data full text meta2 revisions annotations and all data within the datastore may be encrypted. The datastore may also be used as a persistent session store.

In one embodiment for example the datastore may be implemented through Apache HBase and may also be referred to herein as a HBase repository intermediate repository database or any variation thereof. The datastore may be utilized solely as a storage device and may handle a large volume of storage requests. Furthermore as within HBase the datastore may be implemented in a cluster one of which exists per data center. The clusters are configured for master master replication. For each Note the full text of the Note is persisted to the datastore every ten 10 changesets edits or every six seconds 6 s whichever occurs first. In further embodiments the HBase may act as a first backup database from which the full text of a Note with current revisions current state is read if the Note is not within the memory e.g. the in memory cache .

The Note is also persisted to a second repository which acts as a backup datastore and includes the up to date full text of the Note. The second repository may also be referred to a primary repository . If changes have been made to a Note a job is queued to upload the Note to the primary repository . Upload jobs are distributed across the nodes in the active data center in order to facilitate load balancing in the data center. Each node has an asynchronous procedure that checks for queued upload jobs every 1 s. For each upload request the node uploads a snapshot of the Note s most up to date full text to the primary repository . The Note is uploaded or persisted to the primary repository less frequently such as every 30 seconds. Each upload to the primary repository can also trigger search indexing and notifications to be sent to the collaborators of the Note that changes have been made to the Note. The primary repository may be more reliable than the datastore since less data is exchanged. In addition to full text versions of Notes the primary repository can store versions of notebooks in which a Note being modified is located as well as indices and other related data to a particular Note. The primary repository may be implemented for example in a MySQL database.

In addition to running the Notes application each node can also run a second application to aid in load balancing and scalability of the Notes sever. For example the application may include a Helix participant library. The Helix participant library can for example aid in listening to state changes in nodes and dropping and acquiring regions acquiring a region means that the node assumes responsibility for serving requests for a particular set of Notes and dropping that region means losing that responsibility . Additionally the Helix participant library can claim ephemeral node for new nodes and announce membership of a Notes instance to ZooKeeper. The Helix participant may be implemented in a Java Virtual Machine JVM or Node.js.

The communication between each of the aforementioned data center components is now described in an exemplary method depicted in . The method is described with reference to particular components in .

Referring now to in step for example when a user requests access to a note using a uniform resource locator URL containing a Note ID the request is forwarded to the active data center using DNS records. When the hardware LB in the active data center receives a request it in turn routes the request to one of the software LB servers in the software load balancer layer.

In step the software LB first determines the type of request static asset or Socket.IO and then the software LB routes the request to the node Node.js instance on an associated Notes servers . Implementing multiple Notes servers leads to increased bandwidth for handling user requests and allowing for multiple instances on each server allows the system to be highly scalable as well. In step the software LB can additionally determine if the Notes server on which the request is to be handled is located in the currently active data center. The request can then be routed to the appropriate data center.

In step at the node the request is checked to determine if it is valid e.g. the node is allowed to serve that. If the request is for a static asset then every node is allowed to serve it. As mentioned earlier HAProxy load balances static asset requests to make sure one node does not end up with all the requests. If it is a Socket.IO request the node determines which Note the request is for and checks with the Helix participant to make sure it is responsible for serving requests for that Note. In some embodiments if the Note requested is not supposed to be served by the node the node consults the Helix participant to determine the address of the node Notes instance that the request should be sent to instead. The Helix participant of the node can request the address of the Notes instance from an instance assignment manager such as a Helix controller in the node. The instance assignment manager accesses the mapping it maintains and stores in ZooKeeper and sends the instance assignment back to the Helix participant of the Notes instance. The node will then send the client the information it needs to resend the requests to the correct Notes instance.

Because each Notes instance has the information it needs to accept requests that it should be handling and redirect requests that it should not the overall system ensures that that all client or user requests to access the same Note will ultimately be handled by the same Notes instance.

Once the client receives a response indicating what Notes instance can serve its requests the client resends an updated request now also specifying the intended Notes instance in the form of a URL containing both a note ID and a Notes instance ID for example. Again the DNS records ensure that the request is forwarded to the active data center s hardware LB which routes the request to one of the software LBs which sends the request to the intended node .

Referring again to step once the request is received at the appropriate node the node may determine which type of request is being received e.g. static asset or Socket.IO. If the request is Socket.IO the node sends the user all the content needed for the front end UI to display the note and will maintain the network connections needed to receive edits to the Note from the user.

In step each of the edits to the Note is received by the node and is encrypted and stored within a local in memory cache or buffer in order to complete the encryption process and prior to being persisted to various other storage devices. The Notes data may be encrypted and the encryption key may also be encrypted in order to provide increased security for each stored Note.

In step the node persists each change made in response to the user request immediately in the datastore . Next time the node needs to access the Note and a current version of the Note is no longer in local storage it can retrieve the latest snapshot version from the datastore . Working with the datastore makes it possible to reduce the frequency and volume of full text snapshots uploads and thus the requirement for input output storage and computing capabilities of the primary repository . It also helps ensure that even when a Notes instance fails a certain time after it last saved a snapshot of a note in the primary repository the latest state of the note can be recovered. In step the node also persists full text e.g. snapshots of the Note to the backup or primary repository according to a predetermined schedule such as every 30 s.

The node may also run an instance of a pad Note editor such as Etherpad or Etherpad Lite which provides the front end e.g. user interface editing service for the Note. Socket.IO is also run on each node to communicate dynamic requests to the node and to reflect the Note edits to the user on the front end UI. The static request handler e.g. Express runs on each node as well to handle any static request received by the node.

Each node utilizes one central processing unit CPU core and one thread. The node keeps track of a subset of notes it should be serving based on information received from the Helix participant . It communicates with connected clients using Socket.IO for those Notes. In addition it maintains current versions of the Notes in a local storage in memory cache and persists various versions in the primary repository and datastore.

A region manager is a component in the node responsible for facilitating communication between the Helix participant and other components in the node. When the Helix participant experiences a state change the region manager communicates the change to all relevant components. When a component needs information from the Helix participant such as the regions or Notes that a node is responsible for the component talks to the region manager which fetches the relevant data from the Helix participant converts the data into a form that the component can understand and returns the converted data to the component. The region manager also facilitates communication between the data center manager and other components. For example it notifies all other components when the data center manager indicates that the data center the instance is in has become active or non active. Since the region manager is inside the node it may be implemented using Node.js.

The Helix participant communicates with an instance assignment manager and passes information received from the instance assignment manager to the node usually through the region manager . Such information can be an instance assignment which assigns a Notes instance to handling a user request. It can also be a list of Notes that should be served by a particular node . Accordingly the Helix participant may aid in distributing the Notes across the Node.js instances or nodes. As previously discussed the Helix participant may claim an ephemeral ZooKeeper node and announce membership to the region manager as well as listen for state changes and drop acquire regions as appropriate.

The Helix participant may also be responsible for handling certain types of node failures. For example expected node shutdowns can result in the participant renouncing its membership. If the supervisor successfully restarts a downed node within five seconds 5 s the Helix participant reclaims its membership. However if an unexpected node shutdown occurs in which the node is not restarted within five seconds 5 s then the membership is revoked after 5 s due to loss of ownership in the ephemeral node. Finally if a node is hanging idle then it results in the membership being revoked after 5 s.

Additional failure modes may also exist. For example in the case of network partitioning where an instance or node is partitioned from the cluster the Notes served by that instance will be available in read only mode. In such a case the node periodically retrieves every 100 ms updated state information about the cluster and what regions to map to a particular instance. The node also detects partitioning if it is unable to retrieve the aforementioned state such as for example with connectivity loss. If the node is partitioned for longer than 5 s then it will result in a self shutdown. In another failure mode if a node hangs for more than 5 s and can detect this fact after it has become responsive again the node will trigger a self shutdown. This shutdown is performed to ensure the consistency of changes and to avoid corrupting revisions in cases where a region has rebalanced while a node is hung. In yet another failure mode the supervisor periodically performs an external health check to ensure that the node e.g. Node.js instance is up and responding to HTTP requests. When this health check fails the supervisor kills and restarts the node. This type of failure mode is further discussed in detail with reference to .

The instance assignment manager maintains the mapping between Notes and Notes instances that is communicated to the Helix participant and the region manager . One approach of creating the mapping is to assign the Notes into a predetermined number of groups or regions e.g. cluster which is typically greater than the number of Notes instances and allocate each region to one of the Notes instances. In most embodiments there may be one cluster per data center.

The instance assignment manager and Helix participant can be implemented together using the Apache Helix architecture. The instance assignment manager may be for example a Helix controller and the Helix participant being an agent. A single instance assignment manager may be active in each data center though there is one instance assignment manager running per Notes server. So all except one instance assignment manager are in standby. The active instance assignment manager can monitor when participants join or leave Notes servers as well as rebalancing resources among active participants in the data center cluster. Additionally if the instance assignment manager is notified that a node is in out of commission from the Helix participant the instance assignment manager updates the mapping to include exclude the node and notifies the affected Notes instance. This rebalancing can also occur on a server level. To assign a Notes instance to handling a user request for accessing a Note the instance assignment manager communicates the assignment to the Notes instance mapped to the Note through the associated Helix participant and the Notes instance adds the Note to the list of Notebooks and Notes it serves.

A supervisor is also run on each node. The supervisor e.g. supervisord may be a process manager utilized to manage multiple nodes e.g. Node.js instances on a particular Notes server . The supervisor may be responsible for starting the N number of nodes on each Notes server. The N number of instances may be configurable and as such may vary dependent on server and data center. In some embodiments the number of nodes is dynamic and depends on the load being handled by the nodes on a particular server as well as the load on a particular data center. The supervisor may also assign ports for each instance to listen to for requests on a particular server start a node during a code deployment and automatically restart any nodes which were killed to prevent data loss. The supervisor also monitors each node to ensure that it remains running. In further embodiments the supervisor can provide manual management of instances.

A data center manager may monitor the load of an active data center and determine how data center resources are distributed. An instance of BoxEncryptor which is used to encrypt Notes and encryption keys as previously discussed may also exist on each node .

The Java Virtual Machine JVM may host the Helix framework including the Helix administrator and Helix controller which communicate with the Helix participant agent on each node through ZooKeeper. Additionally the JVM can provide the Notes servlet and Notes service . The JVM may also be coupled to a daemon which is responsible for detecting when the JVM crashes and bringing up a new instance of the JVM.

In the internal self health check a component in the node known as the Helix participant health checker periodically performs the health check to determine whether the Helix participant is healthy. If the health check fails the pad editor stops processing user requests for write access to the Notes. If the health check continues to fail for a certain period of time the node shuts itself down. Because the node also hosts the Helix participant this shutdown prompts the instance assignment manager Helix controller to update the list of active Helix participants and remap the assignments from Notes to Notes instances.

The second type of health check is an external health check performed on the node via the supervisor . Supervisor makes HTTP requests to the running Node.js e.g. node and ensures the appropriate responses are received and within an allotted time frame. If the health check continues to fail the supervisor shuts down the node e.g. end the application process and the Helix participant . This shutdown again triggers an update to the list of active Helix participants on the Notes server. Supervisor is then responsible for bringing up a new instance e.g. running the application instance on a new node.

The aforementioned health checks eliminate inconsistency between the node and the Helix participant of a Notes server. As a result when the Helix participant is down the node does not proceed with an outdated set of Notes when those Notes have been reassigned to another Notes instance. When the node is down the Helix participant is also down ensuring that the regions owned by the instance are redistributed.

In addition the node en queues snapshot upload jobs in the datastore before it executes the job to further facilitate error recovery. The node then de queues each job right after the execution of the job. When the primary repository is down the queue grows until the primary repository is running again. If a Notes instance is down before executing a queued snapshot upload job the replacement Notes instance can continue to execute the job according to the predetermined schedule.

When the aforementioned security manager fails or when the encryption or decryption is unsuccessful all users can get disconnected immediately. This prevents data loss as further described in the method depicted in . Additionally the datastore can be replicated or copied to further high availability and prevent data loss.

In step the Notes instance can time the steps required to persist a change e.g. edit to a particular Note and check if steps combined take more than five seconds 5 s . If a change is taking longer than five seconds the instance sends a notification or similar communication to the client to disconnect the user and stop accepting any changes to the Note. By preventing the user from making further changes the corresponding data to those changes will not be lost during an interruption.

In step the Notes instance can provide back up persistence such that any possible data loss due to disconnection is minimal. For example the Notes changesets are queued in the in memory cache and flushed in intervals to the datastore HBase e.g. every 100 ms. Additionally a snapshot of the Note can be uploaded to the primary repository after every ten revisions are made to the Note or every six second 6 s interval in which a change has been detected and the Note has not been uploaded or stored on the primary repository.

Finally in step the Note can be replicated on the HBase datastore. The replication can occur in a master master fashion. For example this data replication occurs when flipping active data centers. The active data center is put into quiescing mode to ensure all data is replicated prior to activating another data center. When the data center is placed in quiescing mode all memory is flushed to the datastore for that data center. This replication can cause a lag to occur prior to serving traffic e.g. requests in the new active data center. The lag for example may be approximately five seconds 5 s . The aforementioned data center flipping is further described in the following paragraphs with reference to .

When the DC manager indicates that another data center is active the pad editor rejects the user request and informs the client which data center the request should be sent to instead. When the client makes a new request specifying this new data center and it reaches the software LB1 the software LB1 reroutes the user request directly to the hardware LB2 in the active data center. The hardware LB2 then forwards the request which is then handled as indicated in . Having multiple data centers can facilitate general maintenance and disaster recovery of the collaboration platform.

When a Note is served to a client it is served through a first iframe that routes through the cloud based platform. A second iframe access the Notes backend Express layer and receives static assets HTML toolbar images etc. . The second iframe is used to build a third iframe which provides the editor via JavaScript. Accordingly when an initial client handshake occurs the client queries Notes via e.g. an XHR AJAX request to find out which node it should communicate with for all future Socket.IO persistent communication. This information is derived from the state managed by Helix as described above with reference to e.g. . The client s Socket.IO module makes a Socket.IO connection to the Notes node it received from the node request mentioned previously. When the connection is established the client requests the contents of the Note. Acquisition of Note content pulls from local memory then the datastore then the primary repository until it locates the requested Note data. Ultimately the client receives the contents of the Note and the Socket.IO connection remains open to receive changes made to the Note. Accordingly the user inputs e.g. keystrokes will result in additional communication with the Notes instance via Socket.IO. If a client connection is lost for any reason the aforementioned handshake process will repeat. For example clients may reconnect due to client network connectivity issues and clients may reconnect due to regions being rebalanced.

In alternative embodiments the machine operates as a standalone device or may be connected e.g. networked to other machines. In a networked deployment the machine may operate in the capacity of a server or a client machine in a client server network environment or as a peer machine in a peer to peer or distributed network environment.

The machine may be a server computer a client computer a personal computer PC a user device a tablet PC a laptop computer a set top box STB a personal digital assistant PDA a cellular telephone an iPhone an iPad a Blackberry a processor a telephone a web appliance a network router switch or bridge a console a hand held console a hand held gaming device a music player any portable mobile hand held device or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine.

While the machine readable medium or machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable medium and machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium and machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the presently disclosed technique and innovation.

In general the routines executed to implement the embodiments of the disclosure may be implemented as part of an operating system or a specific application component program object module or sequence of instructions referred to as computer programs . The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processing units or processors in a computer cause the computer to perform operations to execute elements involving the various aspects of the disclosure.

Moreover while embodiments have been described in the context of fully functioning computers and computer systems those skilled in the art will appreciate that the various embodiments are capable of being distributed as a program product in a variety of forms and that the disclosure applies equally regardless of the particular type of machine or computer readable media used to actually effect the distribution.

Further examples of machine readable storage media machine readable media or computer readable storage media include but are not limited to recordable type media such as volatile and non volatile memory devices floppy and other removable disks hard disk drives optical disks e.g. Compact Disk Read Only Memory CD ROMS Digital Versatile Disks DVDs etc. among others and transmission type media such as digital and analog communication links.

The network interface device enables the machine to mediate data in a network with an entity that is external to the host server through any known and or convenient communications protocol supported by the host and the external entity. The network interface device can include one or more of a network adaptor card a wireless network interface card a router an access point a wireless router a switch a multilayer switch a protocol converter a gateway a bridge bridge router a hub a digital media receiver and or a repeater.

The network interface device can include a firewall which can in some embodiments govern and or manage permission to access proxy data in a computer network and track varying levels of trust between different machines and or applications. The firewall can be any number of modules having any combination of hardware and or software components able to enforce a predetermined set of access rights between a particular set of machines and applications machines and machines and or applications and applications for example to regulate the flow of traffic and resource sharing between these varying entities. The firewall may additionally manage and or have access to an access control list which details permissions including for example the access and operation rights of an object by an individual a machine and or an application and the circumstances under which the permission rights stand.

Other network security functions can be performed or included in the functions of the firewall can be for example but are not limited to intrusion prevention intrusion detection next generation firewall personal firewall etc. without deviating from the novel art of this disclosure.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling of connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the disclosure is not intended to be exhaustive or to limit the teachings to the precise form disclosed above. While specific embodiments of and examples for the disclosure are described above for illustrative purposes various equivalent modifications are possible within the scope of the disclosure as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or sub combinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the disclosure provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the disclosure can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further embodiments of the disclosure.

These and other changes can be made to the disclosure in light of the above Detailed Description. While the above description describes certain embodiments of the disclosure and describes the best mode contemplated no matter how detailed the above appears in text the teachings can be practiced in many ways. Details of the system may vary considerably in its implementation details while still being encompassed by the subject matter disclosed herein. As noted above particular terminology used when describing certain features or aspects of the disclosure should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the disclosure with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the disclosure to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the disclosure encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the disclosure under the claims.

While certain aspects of the disclosure are presented below in certain claim forms the inventors contemplate the various aspects of the disclosure in any number of claim forms. For example while only one aspect of the disclosure is recited as a means plus function claim under 35 U.S.C. 112 16 other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 16 will begin with the words means for . Accordingly the applicant reserves the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the disclosure.

