---

title: Security device with programmable systolic-matrix cryptographic module and programmable input/output interface
abstract: A system includes programmable systolic cryptographic modules for security processing of packets from a data source. A first programmable input/output interface routes each incoming packet to one of the systolic cryptographic modules for encryption processing. A second programmable input/output interface routes the encrypted packets from the one systolic cryptographic module to a common data storage. In one embodiment, the first programmable input/output interface is coupled to an interchangeable physical interface that receives the incoming packets from the data source. In another embodiment, each cryptographic module includes a programmable systolic packet input engine, a programmable cryptographic engine, and a programmable systolic packet output engine, each configured as a systolic array (e.g., using FPGAs) for data processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317718&OS=09317718&RS=09317718
owner: Secturion Systems, Inc.
number: 09317718
owner_city: Clearfield
owner_country: US
publication_date: 20140211
---
This application claims priority to U.S. Provisional Application Ser. No. 61 806 676 filed Mar. 29 2013 entitled PROGRAMMABLE CRYPTO AND PACKET WITH SECURE BOOT by Richard J. Takahashi the entire contents of which application is incorporated by reference as if fully set forth herein.

At least some embodiments disclosed herein relate to security processing in general and more particularly but not limited to security processing of data using programmable cryptographic modules.

Today s stored data e.g. cloud data storage data storage farms and networks in general is unsecure and accessible to unwanted intruders. Current IT network security solutions consist of layering security products to protect a given network. These products typically consist of firewalls intrusion detection and prevention systems security analytics malware software access controls etc. and yet daily intrusions remain as an on going problem.

One problem is that firewalls intrusion detection systems IDSs intrusion prevention systems IPSs security analytics and malware products can only detect known attacks. Firewalls IDS IPS and malware products are deterministic search and analytics engines designed find pattern matching signatures of known attacks and viruses. Firewalls IDS IPS and malware products are designed to prevent known attacks and general access denial or disruption attacks for data in transit but are not designed for securing data at rest i.e. data stored in large storage area networks SAN . They cannot detect or stop new attacks malware or virus or variants. Etc. Therefore new attacks can be embedded undetected into the network and the data at rest storage area. In the world of insider and external attackers emerging government regulations to protect user information and growth of cloud computing and storage there is a need to protect stored data in large scaled storage systems.

In addition countries around the world suffer losses with billions of dollars a year being stolen or copied because it is difficult to protect stored data. For example many companies have lost billions of dollars worth of intellectual property and customer s personal and financial information in the last year and spent hundreds of millions of dollars repairing damage from data breaches.

Systems and methods to provide security processing for incoming data e.g. packets via a security device are described herein. Some embodiments are summarized in this section.

In one embodiment a system includes a plurality of cryptographic modules a first programmable input output interface configured to route each of a plurality of incoming packets to one of the cryptographic modules for encryption to provide a plurality of encrypted packets and a second programmable input output interface configured to route the encrypted packets to a common internal or external data storage.

In one embodiment a system includes programmable systolic cryptographic modules for security processing of packets from a data source. A first programmable input output interface routes each incoming packet to one of the cryptographic modules for encryption processing. A second programmable input output interface routes the encrypted packets from the one cryptographic module to a common data storage. In one embodiment the first programmable input output interface is coupled to an interchangeable physical interface that receives the incoming packets from the data source. In another embodiment each systolic cryptographic module includes a programmable packet input engine a programmable cryptographic engine and a programmable packet output engine each configured as a systolic matrix array e.g. using FPGAs for security processing of the input and output data packets.

In one embodiment a method includes receiving by an interchangeable physical interface a plurality of incoming packets from a data source routing by a first programmable input output interface coupled to the interchangeable physical interface the plurality of incoming packets to a first module of a plurality of cryptographic modules encrypting the incoming packets using the first module to provide a plurality of encrypted packets and routing by a second programmable input output interface the plurality of encrypted packets to a common data storage.

The disclosure includes methods and apparatuses which perform the above. Other features will be apparent from the accompanying drawings and from the detailed description which follows.

The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding. However in certain instances well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment and such references mean at least one.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not other embodiments.

Programmable input output interface is coupled to the interchangeable physical interface and is configured to route each of the plurality of incoming packets to one of the cryptographic modules for encryption to provide a plurality of encrypted packets. The programmable input output interface is configured to route the encrypted packets to a common internal or external data storage.

For outgoing packets programmable input output interface routes encrypted packets to one of the cryptographic modules for decryption. The decrypted packets are then routed by programmable input output interface to the data source.

In one embodiment programmable input output interface is programmable to support different interface protocols and each of the plurality of cryptographic modules is programmable to support different encryption protocols e.g. each module may be programmed to support a different protocol . Programmable input output interface may include one or more field programmable gate arrays that are programmable to support the different interface protocols. In one embodiment programmable input output interface may be coupled to the cryptographic modules by a high speed bus such as for example a PCI e bus.

In one embodiment the interchangeable physical interface is configurable to support two different physical interfaces. In one example the interchangeable physical interface comprises a replaceable physical input output panel or card that can be replaced independently of the programmable input output interface and the plurality of cryptographic modules .

Control and display unit provides drivers to a display and status control screen on the user panel . User panel also provides soft or hard buttons for user control and data input during the operation of security device . Various functions controllable on user panel include a zeroize control to zeroize the keys a crypto ignition key to start the encryption process a key fill port to load the keys and a system reset.

In one embodiment security device which may be e.g. implemented as a security appliance is used to prevent data breaches by a hacker trying to gain access to encrypted data. In this embodiment security device provides security encryption high assurance high availability sustained bandwidths up to 400 Gbs full duplex programmability for data at rest and in network applications. The security device has an interchangeable I O flexible module as described above to support different physical PHY interface connectors and electronics.

In one embodiment use of the interchangeable I O interface and programmable I O interface implemented using an FPGA I O systolic array provides the following advantages 

In one embodiment flexible I Os and flexible cryptographic sometimes simply referred to as crypto herein modules are accomplished by using a scalable systolic architecture and crypto modules and interchangeable input output I O card as described herein. The security device has programmable delay latencies for a specified data block size of programmable bytes sizes. The security device architecture has two programmable elements the programmable crypto module and the programmable flexible I O.

In one embodiment the flexible I O has two components The FPGAs can be programmed to support different interface protocols and an interchangeable physical I O card is used to support the physical interfaces and connectors. The flexible I O also has a switching network. The scalable and programmable crypto module has a programmable full duplex bandwidth consisting of high performance CPUs and FPGAs clocking up to maximum allowable clock rates internal to the FPGA. This CPU and FPGA in systolic matrix configuration and implementation provides a fully programmable system to meet many different applications.

In one embodiment the security device crypto module design will be using high performance CPU or equivalent processors and FPGAs forming a programmable systolic scalable module. The programmability efficiencies of design are realized by segmenting functional subsystems from packet engines crypto engines key handler and overhead control management engines. The I O interface incorporates functional blocks e.g. 100 Gbs Ethernet PCI express Fibre channel SAS Infiniband SCSI or any other high speed interface protocols that are incorporated.

In one embodiment the security device can be both a media level encryptor and a file system encryptor. All data payload passing thru security device is encrypted except for the file system headers commands which remain in the clear . Therefore the existing file system will be intact with no drivers required for the end system. The only interface required is for the end system remote management and key management products. This makes the security device transparent to a user or network storage system.

Processor handles control plane and data processing for the cryptographic modules and the high speed input output interfaces . In one embodiment processor is a control plane processor configured to control systolic data flow for the cryptographic modules and also to control loading of keys from an external key manager to an internal key cache see e.g. below .

Physical interface receives a plurality of incoming packets from data source . The first programmable high speed input output interface routes each of the plurality of incoming packets to one of the cryptographic modules for encryption processing to provide encrypted packets. The second programmable high speed programmable input output interface routes the encrypted packets from the cryptographic module to common encrypted data storage via physical interface .

In one embodiment the routing and switching functions of high speed interfaces and are provided by programmable input output interface of . In one embodiment interchangeable physical input output interface includes physical interface and or .

In one embodiment each of the encrypted packets has a respective tag to identify an original entry port e.g. a port of high speed I O interface keys or key addresses associated with each of the encrypted packets is decrypted by one of the cryptographic modules to provide corresponding decrypted packets and the first programmable input output interface is further configured to use the respective tag to route each decrypted packet back to its original entry port.

In one embodiment each programmable input output interface is programmable to support different interface protocols. For example the first programmable input output interface may include a plurality of field programmable gate arrays that are programmable to support the different interface protocols.

In one embodiment the first programmable input output interface and the second programmable input output interface each comprise a switching network and a router not shown to route incoming packets from data source or data storage respectively to one of the cryptographic modules .

In one embodiment each cryptographic module is designed and programmed and mathematically optimized for any cryptographic algorithms and network IP protocols. The design can be scaled up to for example six or more crypto modules. The security device can be mathematically optimized for example for any cryptographic algorithms for full duplex data rate performance.

In one embodiment the security device architecture is adaptable to any enterprise class data at rest or IP network solution due to the flexible switching I O architecture. The flexible input and output switching I O interfaces provide a significant cost advantage and homogeneous data flow and relax the need for data separation. The security device may use FPGAs that bridge to the native I O interface for the required number of crypto modules. This allows a single crypto module to be used with many possible system implementations and configurations based on the end application I O type and throughput requirements and also be scalable with programmable data rate increments.

In one embodiment the flexible switch I O architecture described herein includes programmable I O modules using FPGAs that function as a low latency bridge and switch between the native I O to the target data at rest system and to the internal array of crypto module processors. A pair of separated designated programmable FPGA based I O interface modules bridges security device to an industry standard network. This scalability and flexibility enables security device to be inserted into existing or new storage network systems supporting scalable data rates.

In one embodiment the flexible programmable I O interface is adaptable to any enterprise or mobile class data at rest interface application. The flexible I O architecture includes programmable I O modules using FPGAs that function as a low latency bridge between the native I O of the target data at rest system and the internal array of crypto modules. Flexible I O programmability is based on FPGA based modules that can be programmed to any industry standards or a custom interface to the storage system fabric or IP network.

In one embodiment security device performs at data rates only limited by the technology used. The key handling agility is matched to the data rates. The internal key management is central to the performance of the cryptographic module in this embodiment.

In one embodiment the programmable packet input engine the programmable cryptographic engine and the programmable packet output engine are each configured as a systolic matrix array and each include one or more field programmable gate arrays FPGAs programmable to support different security protocols. In one example the programmable packet input engine the programmable cryptographic engine and the programmable packet output engine are each coupled to a respective dedicated program memory for each FPGA e.g. memory or and to a respective dedicated processor not shown to control programming of each FPGA. Each memory may be used e.g. to provide data keys buffering and or storage.

In a method according to one embodiment the first programmable input output interface see includes a field programmable gate array FPGA and the method includes programming the FPGA to support a different interface protocol than previously used for receiving incoming data packets. In this method each of the plurality of cryptographic modules includes programmable systolic packet input engine programmable systolic matrix cryptographic engine and programmable systolic matrix packet output engine . The method further includes programming an FPGA of the packet input engine an FPGA of the cryptographic engine and an FPGA of the packet output engine .

In one embodiment a top systolic layer includes FPGAs and which are coupled to systolic packet engines and cryptographic engine each also including an FPGA in order to form a two dimensional systolic matrix array for data and control processing.

In one embodiment each crypto module has input and output packet engines and the crypto core. The crypto module has a systolic crypto engine that is tightly coupled to the input and output systolic packet engines. Each element in the crypto module has a dedicated high performance CPU plus its memory and dedicated memory to the input output systolic packet engines and crypto core buffer storage memory.

In one embodiment each FPGA s array has a dedicated program memory. Also a compression engine included e.g. in auxiliary engines is included for data compression or other data processing required.

In one embodiment the crypto module of uses secure boot to verify the FPGA code and that any software SW within the crypto module is encrypted secure and authenticated. During the secure boot process if any anomalies are detected the system will not boot and further may provide a user alert that issues have been detected. The secure boot may be designed to work with existing industry key manager systems.

In one embodiment the crypto module design of provides features such as hard wired one time programmable options and custom analog digital circuits for flexible physical partitioning for un encrypted plain text and encrypted cipher text separation.

In one embodiment each cryptographic module is implemented using a systolic matrix array configuration. For example cryptographic module as illustrated in is configured in a systolic matrix array such as the basic form illustrated in . In addition in one embodiment the input and output packet engines and or the cryptographic processing engine for each cryptographic module are also each themselves designed with an internal systolic matrix array architecture. For example the cryptographic processing engine may be configured in a systolic matrix array configuration such as illustrated in . In another example each packet engine may itself have the systolic array configuration of or or yet other systolic array configurations as part of its internal sub block processing architecture.

Thus as described above in some embodiments security device is configured with a two or greater multiple layer systolic matrix array architecture. In this architecture each cryptographic module has a systolic matrix array configuration i.e. a top systolic array layer and each of the packet engines and or cryptographic processing engine has an internal systolic matrix array configuration e.g. in a lower systolic array layer formed of FPGAs that is logically underneath the top systolic matrix array layer . The multiple layers above combined with two dimensional systolic arrays provides a three dimensional systolic matrix architecture for security device .

In one embodiment each of the incoming packets to a cryptographic module includes a key tag to identify at least one key associated with the packet to be security processed and further may also include a source tag to identify a data source and keys for the packet. The internal key manager is configured to retrieve the keys from one of key caches using the key tag for the packet to be processed by the respective cryptographic module .

In one embodiment programmable input output interface and or is further configured to route a packet to one of the plurality of cryptographic modules based on the source tag.

In one embodiment each of the plurality of cryptographic modules may be physically partitioned from the other of the cryptographic modules. In one embodiment other key features of security device may include the ability to interface or port third party key management software and network management software.

Various additional non limiting embodiments of security device are now described below. In one or more embodiments security device may provide one or more of the following advantages 

1. A fast data rate encryptor at hundreds of gigabits full duplex e.g. for meeting future optical network data rates .

2. A programmable systolic architecture consisting of FPGAs and CPUs. The security device is flexible and programmable requiring only software upgrades for different versions and features.

3. Multi tenancy to secure individual user s data. Each user s data will be encrypted decrypted using a unique key per the user. In this way each user s data will be uniquely encrypted decrypted and stored in a common data storage area. If by operator or machine error the wrong data is accessed and mistakenly sent to another user the data is still safe since it is not decrypted by the correct user key.

4. A multi level security architecture to secure different levels of classified data using a single encryptor. Each classification of data will be encrypted decrypted using a unique key per the data class. In this way each classification of data will be uniquely encrypted decrypted and stored in a common storage area. If by operator or machine error the wrong data is accessed and mistakenly sent to another level of classification the data is still safe since it is not decrypted by the correct user key.

6. A flexible high density I O to interface to network equipment at multiple customer or other source sites. Also the flexible I O can be programmed for mixed interface types e.g. 10 Gbs Ethernet Infiniband or PCI express thus requiring no interface bridging network equipment.

7. A replaceable flexible I O physical panel that can be customized for a specific network installation without the need to re design the main chassis of security device .

Specifically un encrypted or plain text data e.g. incoming data packets enters physical interface and is routed by programmable input interface to packet input engine . Data packets are routed by input engine to an appropriate cryptographic core in cryptographic processing engine .

A security association SA key lookup is used in packet engine or to determine appropriate keys for loading from a key memories array to cryptographic engine via a key manager interface or as defined in the packet header. These keys are used for security processing of the corresponding data packet.

After encryption by processing engine encrypted packets are provided to packet output engine for routing to programmable output interface . The encrypted data leaves via physical interface .

Programmable interfaces and may be formed using FPGAs or other programmable devices e.g. as described above for I O interfaces or of . In one embodiment physical interfaces and may form a part of interchangeable physical input output interface . In one embodiment physical interface is implemented as a removable physical card.

In one embodiment FPGAs and form a portion of the systolic matrix array configuration illustrated in and may be coupled to the packet input and output engines and cryptographic processing engine using serial buses. The packet input and output engines and cryptographic engine are formed using FPGAs to provide a two dimensional systolic array of a top systolic layer. In one example data and control processing is performed in two dimensions using the six FPGA units e.g. FPGA and packet input engine as illustrated in .

In one embodiment the sub blocks in the packet input engine or packet output engine such as packet routing packet multiplexer and IP context lookup are implemented in a systolic matrix array configuration as was discussed above. Data comes into the packet engine and the packet engine looks at the packets including the context and decides where to route each packet. Then the packet engine determines that a packet requires a particular security association which is implemented using a key lookup. The packet engine associates the key to the incoming data. The key is read out and the data is encrypted or decrypted in one of the crypto cores.

In one embodiment high speed memory is coupled to the input and output packet engines and may be any type of high speed memory in various embodiments.

In one embodiment all primary processing works in a matrix. Data is constantly flowing in two dimensions. For example data is flowing horizontally keys are flowing up vertically and control information is flowing down vertically as part of the two dimensional processing.

Additional variations details and examples for various non limiting embodiments are now discussed below. In a first variation with reference to the programmable input output interface is a router switch that selects one of the crypto modules to receive forwarded packets. A router and switch are incorporated inside the input output interface . For example if a first packet comes through a second port the first packet will be routed to crypto module number six. Crypto module number six will later route the first packet back out through that same second port of original entry.

There may be two components to the programmable I O interface. On one side the interface programs the type of I O that is desired. The other side of the interface is the router switch. The router switch multiplexer knows which crypto module is to receive a given packet. Also the router switch knows which crypto module is ready for processing of a packet. For example if crypto module number one is ready for processing it will flag itself as being ready for processing. For example there is a semaphore flag or packet header bits used that tells I O interface which module is ready to process data. Whatever port is used to bring in the data that data will be processed in one of the crypto modules and then tagged out back to the same port when later being decrypted and sent out from storage e.g. the packet is tagged with some identification of the port using a tag . The tag is used to redirect the packet back to the correct port of original entry.

The crypto module has a security association that determines which keys go with which packet. The programmable input output may allow programming of different applications because of the use of FPGAs. The back end of the router switch will accommodate the type of input output to be used. The router switch will identify the crypto module to be used. When reprogramming the programmable interface a new physical interface needs to be interchanged or installed. The main security device chassis is not changed out only the I O portion is being changed.

In one embodiment remote ports are basically control ports. The protocol for the remote port may typically be a Simple Network Management Protocol SNMP protocol or any other management protocols The key fill port is where the keys are filled into the security device. The crypto ignition key ignites the security device.

With reference to the Interbus serial bus mentioned above coordinates the operation of the two input output interfaces . The Interbus handles any protocol issues between the router and the switch functions of these interfaces. The Interbus is used to provide communication between the FPGAs of the systolic array during operation of the security device. In one example the Interbus helps to coordinate operation as to which crypto module will receive an incoming packet.

Processor manages control plane operation. Processor also configures components when a new security protocol will be used uses routing tables sets the configuration sets up the programmability and sets up the power on self test. Processor also may facilitate key loading. The key fill port on the front of user panel operates under control by processor .

With reference to a secure boot is used to guarantee that the data booted into the FPGAs of the cryptographic module is proper. The secure boot is executed when the unit is turned on or at boot up. The code is authenticated by the system. The FPGAs are programmed at every boot up of the unit or any time that the unit is reset. Each crypto module may have its own CPU which controls programming.

With reference to external key management is a location that the keys may be stored for passing to the security device . A network operator loads the keys into the external key management . The security device loads the keys into the crypto modules. There is key tagging in the packet headers and inside the crypto module. When a packet comes into the security device the packet is associated with a given key and the packet contains information used to route the packet. The external key management can load keys in real time or only a single time. Network services management is remote management which provides control status setting up of the security device unit and sending of the status back to a user. The other external management services could be used to track how many other units are in the field what the units are doing whether each unit is running and what configuration the unit is in.

In one embodiment data packets include key tags customer tags and packet tags. The packet tag tells what type of packet is coming in. The customer tag identifies the company or source of the data. The key tag tells what key goes with what packet. Each tag is looked at by the packet engine to determine how the packet is going to be routed within the crypto module .

Now discussing an embodiment regarding flexible physical partitioning each cryptographic module may be physically isolated by design. So only a certain packet will go through a module number one and only certain other packets will go through module number two. For example crypto module number one may only process a certain style of packet. Crypto module number two may only process packets for a particular customer. Thus it is physically partitioned. For example customer number one s data is tagged as belonging to customer number one for sending it to the specific crypto module. The router determines this requirement and only that particular crypto module can process that customer s packet.

Regarding internal key management in the crypto module s performance the key manager loads the keys and further decides how the keys are dispersed within the crypto module based on the tagging of the incoming data packet. Keys are stored in the selectable key cache . The key manager decides based on the tagging of the data packet what keys will be associated with the current packet. This provides key agility.

With reference to API may be programmed to map into any of several different external key managers . The use of API thus provides increased flexibility.

At least some aspects disclosed can be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a memory such as ROM volatile RAM non volatile memory cache or a remote storage device.

In various embodiments hardwired circuitry may be used in combination with software instructions to implement the techniques. Thus the techniques are neither limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.

Although some of the drawings may illustrate a number of operations in a particular order operations which are not order dependent may be reordered and other operations may be combined or broken out. While some reordering or other groupings are specifically mentioned others will be apparent to those of ordinary skill in the art and so do not present an exhaustive list of alternatives. Moreover it should be recognized that various stages or components could be implemented in hardware firmware software or any combination thereof.

In the foregoing specification the disclosure has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

