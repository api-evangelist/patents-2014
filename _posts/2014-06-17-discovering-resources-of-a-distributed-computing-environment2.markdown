---

title: Discovering resources of a distributed computing environment
abstract: Methods, apparatuses, and computer program products for discovering resources of a distributed computing environment are provided. Embodiments include a management system transmitting an application program interface (API) message to the distributed computing environment. Embodiments also include the management system receiving from the distributed computing environment, a response to the API message and based on the response, identifying a resource of the distributed computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09590859&OS=09590859&RS=09590859
owner: International Business Machines Corporation
number: 09590859
owner_city: Armonk
owner_country: US
publication_date: 20140617
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 14 148 990 filed on Jan. 7 2014.

The field of the invention is data processing or more specifically methods apparatuses and computer program products for discovering resources of a distributed computing environment.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

Modern computing systems can include a plurality of machines that share resources with each other. In a distributed computing environment there are thousands of resources that can be entrusted in a distributed computing environment and accessed as a service. These resources are of various types and often belong to various environments of different types and reside on the hardware of the environment.

Methods apparatuses and computer program products for discovering resources of a distributed computing environment are provided. Embodiments includes a management system transmitting an application program interface API message to the distributed computing environment. Embodiments also include the management system receiving from the distributed computing environment a response to the API message and based on the response identifying a resource of the distributed computing environment.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Example methods apparatuses and computer program products for discovering resources in a distributed computing environment in accordance with the present invention are described with reference to the accompanying drawings beginning with . It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service Paas the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network IAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. The cloud computing nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment element in is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes A in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers B in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices C networks and networking components D . Examples of software components include network application server software E in one example IBM WebSphere application server software and database software F in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers A virtual storage B virtual networks C including virtual private networks virtual applications D and operating systems and virtual clients E .

In one example management layer may provide the functions described below. Resource provisioning A provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing B provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal C provides access to the cloud computing environment for consumers and system administrators. Service level management D provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment E provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation A software development and lifecycle management B virtual classroom education delivery C data analytics processing D and transaction processing E .

For further explanation sets forth a block diagram of automated computing machinery comprising an example computer useful in discovering resources in a distributed computing environment according to embodiments of the present invention. The computer of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the computer .

Stored in RAM is a management system a module of computer program instructions that when executed causes the computer of to manage resources of a distributed computing environment. In the example of a distributed computing environment not shown is created on components of other computers . The management system may also be configured to administer provisioning of virtual machines cloud resources memory and the like track customer or user usage of cloud resources provide a systems management interface for configuration of virtual machine environments and so on.

Examples of such resources include virtual machines clusters of hardware devices or virtualized hardware host operating systems applications threads or processes processing allocations storage allocations memory allocations and so on as will occur to readers of skill in the art. In the example of several resources may be executed instantiated hosted virtualized or implemented by other computers coupled via a data communications network to the computer . Also users not shown here may be coupled via one or more data communications network to utilize the resources .

In the example of the management system may discovering resources of a distributed computing environment in accordance with embodiments of the present invention by transmitting an application program interface API message to the distributed computing environment. The management system is also configured to receive from the distributed computing environment a response to the API message and based on the response identify a resource of the distributed computing environment.

Also stored RAM of the computer is an operating system . Operating systems useful for discovering resources in a distributed computing environment according to embodiments of the present invention include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating systems and the management system in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also such as for example on a disk drive .

The computer of includes disk drive adapter coupled through expansion bus and bus adapter to the processors and other components of the computer . Disk drive adapter connects non volatile data storage to the computer in the form of the disk drive . Disk drive adapters useful in computers for discovering resources of a distributed computing environment according to embodiments of the present invention include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. Non volatile computer memory also may be implemented for as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example computer of includes one or more input output I O adapters . I O adapters implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example computer of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. The video adapter is connected to the processors through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary computer of includes a communications adapter for data communications with the other computers and for data communications with the data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for discovering resources in a distributed computing environment according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications and 802.11 adapters for wireless data communications.

The arrangement of computers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional databases servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol HTTP HyperText Transfer Protocol WAP Wireless Access Protocol HDTP Handheld Device Transport Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

For further explanation sets forth a flow chart illustrating an exemplary method for discovering resources of a distributed computing environment according to embodiments of the present invention. A distributed computing environment refers to a collection of computers networks and automated computing machinery configured to perform distributed processing. A non limiting example of a distributed computing environment includes a cloud environment having a virtualized computing platform in which a user may be provided access to computing resources without knowledge ownership or physical access to the computer resources. The hardware software and capabilities of the components of a distributed computing environment or cloud environment may be offered to users as services or objects and may generally be referred to as resources. Non limiting examples of resources include virtual machines processing clusters host operating systems applications processing threads processing allocations storage allocations memory allocations and any many others as will occur to readers of skill in the art.

In the example of the distributed computing environment includes a plurality of resources. The method of includes a management system for discovering the resources of the distributed computing environment .

The method of includes the management system transmitting an application program interface API message to the distributed computing environment . An API specifies how some software components should interact with each other. In addition to accessing databases or computer hardware such as hard disk drives or video cards an API can be used to ease the work of programming graphical user interface components. In practice many times an API comes in the form of a library that includes specifications for routines data structures object classes and variables. In some other cases notably for Simple Object Access Protocol SOAP and Representational State Transfer REST services an API comes as just a specification of remote calls exposed to the API consumers.

REST is an architectural style that abstracts the architectural elements within a distributed hypermedia system. REST ignores the details of component implementation and protocol syntax in order to focus on the roles of components the constraints upon their interaction with other components and their interpretation of significant data elements. REST has emerged as a predominant web API design model. The REST architectural style was developed by W3C Technical Architecture Group TAG in parallel with HTTP 1.1 based on the existing design of HTTP 1.0. The World Wide Web represents the largest implementation of a system conforming to the REST architectural style.

REST style architectures conventionally consist of clients and servers. Clients initiate requests to servers servers process requests and return appropriate responses. Requests and responses are built around the transfer of representations of resources. A resource can be any body of information static or variable. A representation of a resource is typically a document that captures the current or intended state of a resource.

In REST the client begins sending requests when it is ready to make the transition to a new state. While one or more requests are outstanding the client is considered to be in transition. The representation of each application state contains links that may be used the next time the client chooses to initiate a new state transition.

Representational State Transfer is intended to evoke an image of how a well designed Web application behaves presented with a network of Web pages a virtual state machine the user progresses through an application by selecting links state transitions resulting in the next page representing the next state of the application being transferred to the user and rendered for their use. REST was initially described in the context of HTTP but it is not limited to that protocol. RESTful architectures may be based on other Application Layer protocols if they already provide a uniform vocabulary for applications based on the transfer of meaningful representational state.

RESTful applications maximize the use of the existing well defined interface and other built in capabilities provided by the chosen network protocol and minimize the addition of new application specific features on top of it. In addition to URIs Internet media types request and response codes etc. HTTP has a vocabulary of operations called request methods most notably 

REST uses these operations and other existing features of the HTTP protocol. For example layered proxy and gateway components perform additional functions on the network such as HTTP caching and security enforcement.

As mentioned above an important concept in REST is the existence of resources sources of specific information each of which is referenced with a global identifier e.g. a URI in HTTP . In order to manipulate these resources components of the network user agents and origin servers communicate via a standardized interface e.g. HTTP and exchange representations of these resources the actual documents conveying the information . For example a resource that represents a circle as a logical object may accept and return a representation that specifies a center point and radius formatted in SVG but may also accept and return a representation that specifies any three distinct points along the curve since this also uniquely identifies a circle as a comma separated list.

Any number of connectors e.g. clients servers caches tunnels etc. can mediate the request but each does so without seeing past its own request referred to as layering another constraint of REST and a common principle in many other parts of information and networking architecture . Thus an application can interact with a resource by knowing two things the identifier of the resource and the action required it does not need to know whether there are caches proxies gateways firewalls tunnels or anything else between it and the server actually holding the information. The application does however need to understand the format of the information representation returned which is typically an HTML Extensible Markup Language XML or JavaScript Object Notation JSON document of some kind although it may be an image plain text or any other content.

A RESTful web API also called a RESTful web service is a web API implemented using HTTP and REST principles. It is a collection of resources with typically four defined aspects 

According to the example method of transmitting an application program interface API message to the distributed computing environment may be carried out by transmitting to the distributed computing environment a resource identifier using a protocol command. For example the management system may transmit a URL to the distributed computing environment using a HTTP GET request. In this example the GET request may include additional HTTP GET parameters further specifying the location of the resource.

The method of also includes the management system receiving from the distributed computing environment a response to the API message . Receiving from the distributed computing environment a response to the API message may be carried out by receiving an HTTP reply such as a file specifying information about the state of the resource at the location specified in the request. A response from the distributed computing environment may include files in any number of formats including XML a Comma Separate Values CSV and a JSON.

The method of also includes the management system identifying a resource of the distributed computing environment based on the response . In a particular embodiment the identified resource is provided by the distributed computing environment as an infrastructure as a service IaaS . Identifying a resource of the distributed computing environment based on the response may be carried out by examining data in the response to determine if a resource is present at the address corresponding to the request.

In the example of identifying a resource of the distributed computing environment based on the response optionally includes determining in dependence upon the response a type of the identified resource . Determining in dependence upon the response a type of the identified resource may be carried out by examining the data in the response to identify a type of the resource.

In response to the request the management system may receive a response that includes a file having the following information 

Continuing with this example the management system may examine the data contained in the response to discover that a resource is at this location and that the type of the resource is network storage . After identifying the resource the management system may provide an identification of the resource and the type of the resource to another system or the user. In a particular embodiment the management system provides the indication of the resource and an identification of the type of resource to a user within a graphical user interface. By using API requests the management system may discover resources of a distributed computing environment and make those resources know to users.

For further explanation sets forth a flow chart illustrating another example method for discovering resources of a distributed computing environment according to embodiments of the present invention. In the method of is similar to the method of in that the method of also includes transmitting an application program interface API message to the distributed computing environment receiving from the distributed computing environment a response to the API message and based on the response identifying a resource of the distributed computing environment .

The method of includes the management system identifying a range of IP addresses corresponding to the distributed computing environment . Identifying a range of IP addresses corresponding to the distributed computing environment may be carried out by receiving from a user an indication of a range of IP addresses to test. For example a user may wish to discover what resources and what types of resource are at a specific range of IP addresses.

In the method of transmitting an application program interface API message to the distributed computing environment includes transmitting the message to the range of IP addresses corresponding to the distributed computing environment . Transmitting the message to the range of IP addresses corresponding to the distributed computing environment may be carried out by transmitting to the distributed computing environment a resource identifier using a protocol command. For example the management system may transmit a URL to the distributed computing environment using a HTTP GET request.

For further explanation sets forth a flow chart illustrating another example method for discovering resources of a distributed computing environment according to embodiments of the present invention. In the method of is similar to the method of in that the method of also includes transmitting an application program interface API message to the distributed computing environment receiving from the distributed computing environment a response to the API message and based on the response identifying a resource of the distributed computing environment .

The method of also includes the management system transmitting to the distributed computing environment a series of different types of API messages corresponding to different types of resources. Transmitting to the distributed computing environment a series of different types of API messages corresponding to different types of resources may be carried out by transmitting to the distributed computing environment a series of HTTP GET requests with different parameters.

The method of also includes the management system receiving from the distributed computing environment a plurality of responses to the series of API messages. Receiving from the distributed computing environment a plurality of responses to the series of API messages may be carried out by receiving an HTTP reply such as a file specifying information about the state of the resource at the location specified in the request.

The method of also includes the management system parsing the responses to determine a resource type of each identified resource. Parsing the responses to determine a resource type of each identified resource may be carried out by indicating a response type based on receipt of a particular response corresponding to a request associated with the response type.

In response to this series of requests the management system may receive a response indicating a bad request and another response that includes a file having the following information 

Continuing with this example the management system may determine that a virtual machine resource is not located at this location but a network storage resource is located at this location. After identifying the resource the management system may provide an identification of the resource and the type of the resource to another system or the user. As another example if the response is a not authorized response the management system may also determine that a response is at the location. In a particular embodiment the management system provides the indication of the resource and an identification of the type of resource to a user within a graphical user interface. By using API requests the management system may discover resources of a distributed computing environment and make those resources know to users.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

