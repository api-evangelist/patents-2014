---

title: System and method for providing predictive software upgrades
abstract: A system and method for providing predictive software upgrades is provided. Generally, the method comprising the steps of: querying a virtual vehicle application that simulates a real vehicle to determine one or more time period when the vehicle will be in an off state for long enough for updating of software to take place without the vehicle operating status being changed; transmitting a push notification to a user portable interactive communication device providing the one or more time periods determined, to the user for selection of one or more time period; receiving a selected one or more time period for upgrading of the software; transmitting a request for confirmation of a first of the one or more time period to the user portable interactive communication device at a predefined time period prior to the first of the one or more time period; and if the user confirms the first time period, instructing the upgrading of the vehicle control module by the vehicle at the first time period.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09086941&OS=09086941&RS=09086941
owner: Massachusetts Institute of Technology
number: 09086941
owner_city: Cambridge
owner_country: US
publication_date: 20140529
---
The present invention is generally related to updating software and more particularly is related to optimized updating of software through use of historical data and user feedback to minimize application interruption during the updating.

Vehicles today have hundreds of sensors and actuators designed to provide safe reliable convenient and comfortable transportation. Each of these devices interfaces with one of dozens of computer modules designed for data integration and processing. These computers control powertrain operation chassis integration infotainment and additional vehicle functionality through complex programs that are exceedingly difficult targets for software development.

This complexity can lead to several problems. In cases software is released to the public in the beta stage of development to meet shipping deadlines. Features may be added later to improve competitiveness across brands or bugs may be discovered that compromise comfort or safety. Modern automotive computers are extremely complicated yet a small software bug can result in severe safety issues possibly resulting in federal recalls. Technology exists today capable of remotely updating vehicle software. However due to rigorous checksum validation these software updates may take several hours to complete during which the vehicle is unusable for risk of rendering a control module inoperative. Specifically if a vehicle is powered on during the updating of vehicle software the use of the vehicle may interrupt the upgrade process and thereby render a control module of the vehicle inoperative temporarily or permanently. For purposes of clarity powering on means activated or if a vehicle key switch commands power to a module or modules of the vehicle.

Typically modules in vehicles phone home or are pushed details about software update candidates via a telemetry unit. These updates may download overnight or even provide feedback on an in vehicle display informing the user that their software is being upgraded and not to change the operating state of the vehicle until the update event is complete. This can work but in some cases the software updates happen at inopportune times and users intervene necessitating the programming event be redone if the module firmware does not become corrupted upon the loss of power. This is presently a problem as automobile manufacturers face a constant struggle determining tradeoffs in acceptable latency and power consumption and often elect to install software as soon as the download is complete irrespective of driver needs.

Certain automobile manufacturers confronted with the difficulty of upgrading software resort to recalling vehicles thereby requiring vehicle owners to lose valuable time and causing a great deal of man hours in non billable labor. Even in the situation where a fail safe downloading program is used interruption of the downloading program will not cause crashing of a module performing the upgrade however it will prevent the software update from taking place and requires that the time consuming process be restarted.

There has been some discussion regarding over the air updates recently as a solution to this problem. In the few cases where a manufacturer remotely updates vehicle software as is the case with Mercedes mBrace 2 system these updates impact infotainment applications and not control module software. The primary reason control modules are not presently updated is the result of the highly complex software inherent to these core systems. As criticality and integration increase so increases the file size of any related software update. These files are large transfer slowly due to bandwidth constraints and must continuously undergo checksum validation to ensure that mission critical software is not corrupted. This same rigorous software analysis occurs during module reflashing events ensuring that the update is correct on a byte per byte basis. The end result is an update process that often takes several hours even when dealing with relatively small files like a ten megabyte engine control software update.

The issue of slow downloads has been addressed through the use of higher throughput networks and with the use of smart telematics systems on board storage and extra flash memory internal to these modules for storing software images in a temporary holding buffer. Despite this reduction in barrier to entry over the air upgrades remain unlikely to be adopted due to the long installation time during which a user cannot operate the vehicle without fear of corrupting the software on various modules. Hardware redundancy increases cost and complexity of these modules and time to market is long.

This upgrade difficulty is not limited to vehicles but instead is experienced in upgrading software of any device or system such as but not limited to cellular telephones battery management systems appliances such as smart refrigerators entertainment devices such as smart televisions or game consoles personal computing devices for instance updating of the operating system of a computer and farm industrial equipment.

Thus a heretofore unaddressed need exists in the industry to address the aforementioned deficiencies and inadequacies.

Embodiments of the present invention provide a system and method for providing predictive software upgrades. Preferably the upgrades are performed over the air although the present invention is not limited as such but instead may be provided in a tethered environment. Briefly described in architecture one embodiment of the system among others can be implemented as follows. The system contains a memory and a processor configured by the memory to perform the steps of determining one or more time period when a device having software to be upgraded will be in an off state for long enough for updating of software to take place without the device changing state from off to on transmitting a push notification to a user portable interactive communication device providing the one or more time periods determined to the user for selection of one or more time period receiving a selected one or more time period for upgrading of the software transmitting a request for confirmation of a first of the one or more time period to the user portable interactive communication device at a predefined time period prior to the first of the one or more time period and if the user confirms the first time period instructing the upgrading of the software at the first time period.

The present invention can also be viewed as providing methods for providing predictive software upgrades. In this regard one embodiment of such a method among others can be broadly summarized by the following steps querying a virtual vehicle application that simulates a real vehicle to determine one or more time period when the vehicle will be in an off state for long enough for updating of software to take place without the vehicle operating status being changed transmitting a push notification to a user portable interactive communication device providing the one or more time periods determined to the user for selection of one or more time period receiving a selected one or more time period for upgrading of the software transmitting a request for confirmation of a first of the one or more time period to the user portable interactive communication device at a predefined time period prior to the first of the one or more time period and if the user confirms the first time period instructing the upgrading of the vehicle control module by the vehicle at the first time period.

Embodiments of the invention are also provided that are not particular to a vehicle or upgrading of vehicle software. Such a method comprises the steps of determining one or more time period when a device having software to be upgraded will be in an off state for long enough for updating of software to take place without the device changing state from off to on transmitting a push notification to a user portable interactive communication device providing the one or more time periods determined to the user for selection of one or more time period receiving a selected one or more time period for upgrading of the software transmitting a request for confirmation of a first of the one or more time period to the user portable interactive communication device at a predefined time period prior to the first of the one or more time period and if the user confirms the first time period instructing the upgrading of the software at the first time period.

Other systems methods features and advantages of the present invention will be or become apparent to one with skill in the art upon examination of the following drawings and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the present invention and be protected by the accompanying claims.

The present invention provides a system and method for using historic user data and multi point feedback to inform a vehicle owner of their eligibility for a software upgrade and to locate an optimal time for installing the software. It should be noted that while the present disclosure provides the example of upgrading vehicle software the present invention is not intended to be limited to vehicle software upgrades exclusively. Instead the present system and method may be used for upgrading software of any device or system such as but not limited to cellular telephones battery management systems appliances such as smart refrigerators entertainment devices such as smart televisions or game consoles personal computing devices for instance updating of the operating system of a computer and farm industrial equipment.

The telemetry device is a standard telemetry device providing a data link to a data server . Data collected and transmitted by the telemetry device includes but is not limited to identification of the vehicle date and time when the vehicle is turned on location of the vehicle when the vehicle stops and other vehicle use history driver identification On Board diagnostic data identifying information for linked devices such as cellular telephones and linked data such as user calendars all also referred to herein as historic user data. Collection of the data allows for building of a virtual vehicle at the data server as built by a virtual vehicle application where specific information and trends of vehicle use may be used to anticipate future vehicle use and trends as described further herein below. The virtual vehicle duplicates a multiplicity of measurable vehicle and related parameters including environmental information and other data sourced scraped or otherwise collected from third party sources providing the foundation for a programmatic object to be used as the basis for computer applications such as applications within the server . In addition to mirroring diagnostic and other powertrain or general operational parameters in the virtual vehicle related parameters additionally inform the virtual vehicle application and provide the virtual vehicle with context information related to the driver passengers and environment. At the server server information itself such as CPU load may be paired with virtual vehicle data to aid in the decision making process of the server for determining when to transmit data to the vehicle or a user device as explained in further detail herein.

The virtual vehicle application describes the creation of a digital duplicate of a physical vehicle for use as a programmatic I O input output in Cloud based application development. This digital mirror or Avacar created by the virtual application consists of a dynamically updated real time model of a vehicle based off of On Board Diagnostic information data values reported from the sensor mirroring device itself e.g. the telemetry device such as location motion and vehicle context manufacturer proprietary information made available to the connecting device and a series of values bound to outputs such as actuation devices e.g. door locks or computer settings e.g. writable radio presets . The virtual vehicle is dynamically scaled such that the mirroring may include every measurable or controllable device on or connected to a vehicle network and is connected to a dynamic storage device such that new incoming and outgoing data types may be easily added. In the simplest sense the virtual vehicle application is provided with all measurable parameters relating to vehicle status in order to allow the digital representation of the operational state health and status of the physical vehicle with which the application is associated.

The virtual vehicle application is used as a programmatic object for the basis of Cloud or other third party application development. The virtual vehicle is bound to an API application programming interface such that data read and data write operations are end hardware agnostic at all points including in the data collection device and ultimately the end vehicle hardware. The virtual vehicle API identifies the vehicle type through a variety of methods including but not limited to reading of the Vehicle Identification Number and creates a dynamic mapping between API commands and vehicle specific commands to abstract away development complexities. This allows more familiar human readable commands e.g. windows up to be used as opposed to more complex brand specific byte sequences. The use of a common API across vehicle makes and models enables applications to be deployed more rapidly and speeds data collection for data intensive applications.

The real time virtual vehicle application is used to provide information and control inputs and outputs for real time applications like those that control actuators based on weather conditions or current location. Historic virtual vehicles and or aggregations of many users virtual vehicles are used to feed information to models that use broader vehicle data in order to optimize efficiency reduce congestion and decrease fuel consumption by way of example.

The virtual vehicle application and resulting simulated emulated virtual vehicle are standardized to support interoperable data transfer and cross automotive manufacturer application development. Ensuring data interoperability and portability allows the virtual vehicle application to interface with a number of other application development platforms as well as a number of other digitally duplicated objects for example to facilitate the integration with home automation systems that warm up a user s home when he or she leaves work. By presenting the data in a standardized documented format developers are given the unique ability to integrate virtual vehicle data into their own applications and in the present system and method such data is used as is explained further herein. The telemetry device and vehicle computer communicate with the data server via a communication network such as but not limited to the Internet Bluetooth Global System for Mobile Communications GSM or another standard. It should be noted that any other communication network may be utilized. The data server may contain a storage device and a server computer . The data server computer is further illustrated and described with regard to as described herein below and provides much of the functionality of the present system and method as described herein.

As illustrated by the network also contains a portable interactive communication device . The communication device may be any portable interactive communication device that is capable of allowing a user to receive a communication from the data server and interact with the data server as described in further detail herein. Examples of such portable interactive communication devices may include but are not limited to personal data assistants PDAs smart phones personal computers in vehicle infotainment systems wearable devices tablet computers and dedicated embedded devices.

Referring to generally in terms of hardware architecture the vehicle computer includes a processor a memory a storage device and one or more input and or output I O devices or peripherals that are communicatively coupled via a local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software particularly that stored in the memory as described herein. The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the computer a semiconductor based microprocessor in the form of a microchip or chip set a macroprocessor or generally any device for executing software instructions.

The memory can include any one or combination of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. and nonvolatile memory elements e.g. ROM EEPROM hard drive tape CDROM etc. . Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory can have a distributed architecture where various components are situated remote from one another but can be accessed by the processor .

Specific to the present system and method software in the memory may include one or more separate programs or modules each of which comprises an ordered listing of executable instructions for implementing logical functions of the present system and method as described below. The software in the memory contains a vehicle control module update application . In addition the memory may contain an operating system O S or any other module required by the vehicle. The operating system essentially controls the execution of computer programs and provides scheduling input output control file and data management memory management and communication control and related services.

The vehicle control module update application is provided within the vehicle and controls when a vehicle control module update stored within the vehicle storage device is allowed to be used in updating a vehicle control module of the vehicle . As is further explained in detail herein below the vehicle control module update is downloaded to the vehicle storage device and stored in the vehicle storage device until such time that chances of installation of the vehicle control module update being interrupted are determined to be very low.

It should be noted that while the abovementioned refers to the vehicle storage device being local to the vehicle and having the vehicle control module update stored therein in accordance with an alternative embodiment of the invention the vehicle storage device may be removable or be a device separate from the vehicle that may be connected to the vehicle for use in accordance with the present system and method.

The functionality of the vehicle computer may be provided by a source program executable program object code script or any other entity containing a set of instructions to be performed. When a source program then the program needs to be translated via a compiler assembler interpreter or the like which may or may not be included within the memory so as to operate properly in connection with the O S. Furthermore the functionality of the vehicle computer can be written as a an object oriented programming language which has classes of data and methods or b a procedure programming language which has routines subroutines and or functions.

The I O devices may include input devices for example but not limited to a keyboard mouse touchscreen microphone or other input device. Furthermore the I O devices may also include output devices for example but not limited to speakers monitors e.g. touchscreens or other output devices. Finally the I O devices may further include devices that communicate via both inputs and outputs for instance but not limited to a modulator demodulator modem for accessing another device system or network a radio frequency RF or other transceiver a telephonic interface a bridge a router or other device.

The storage device may be any block data storage device such as but not limited to hard disks or hard drives optical discs NAND flash memories or any storage device capable of maintaining a sequence of bytes or bits having a nominal length block size . As previously described the vehicle control module update is stored on the storage device until such time that the vehicle control module application initiates updating of the vehicle control module with the stored vehicle control module update.

When the vehicle computer is in operation the processor is configured to execute the software stored within the memory to communicate data to and from the memory and to generally control operations of the vehicle computer pursuant to the software . The software and the O S in whole or in part but typically the latter are read by the processor perhaps buffered within the processor and then executed.

When the functionality of the vehicle computer is implemented in software it should be noted that the functionality can be stored on any computer readable medium for use by or in connection with any computer related system or method. In the context of this document a computer readable medium is an electronic magnetic optical or other physical device or means that can contain or store a computer program for use by or in connection with a computer related system or method. The functionality of the vehicle computer can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a nonexhaustive list of the computer readable medium would include the following an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM EEPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical .

In an alternative embodiment where the functionality of the vehicle computer is implemented in hardware the vehicle computer can be implemented with any or a combination of the following technologies which are each well known in the art a discrete logic circuit s having logic gates for implementing logic functions upon data signals an application specific integrated circuit ASIC having appropriate combinational logic gates a programmable gate array s PGA a field programmable gate array FPGA etc.

It should be noted that computers described herein such as the vehicle computer and the data server computer may contain separate modules wherein each module contains functionality for execution. As previously mentioned functionality of the present system and method can be implemented in software firmware hardware or a combination thereof.

Referring now to the data server computer is further illustrated and described. As described herein much of the functionality of the present system and method is provided by the data server computer . In accordance with the present invention the data server computer contains similar parts to the vehicle computer . Specifically the data server computer includes a processor a memory a storage device and one or more input and or output I O devices or peripherals that are communicatively coupled via a local interface each of which functions is a manner similar to that of the vehicle computer .

The memory of the data server computer has stored therein a virtual vehicle application and a service application . The virtual vehicle application accumulates vehicle data received from the telemetry device including for instance vehicle identification user of the vehicle information date and time when the vehicle is turned on location of the vehicle when the vehicle stops and other vehicle use history historic user data . The data is stored within the data server computer storage device . It should be noted that the historic user data need not be stored within the data server computer but instead may be stored in a separate storage device of the data server or at a remote location. Further the storage device of the data server may also have a vehicle control module update stored therein as is described in further detail herein below.

After accumulation of vehicle data received from the telemetry device the virtual vehicle application combines captured information with additional data sources and provides data I O for an Application Programming Interface API enabling a vehicle or set of vehicles to be used as programmatic objects serving as the basis for end use applications. The virtual vehicle application abstracts the digital vehicle from the physical vehicle in that the API may use information to identify the vehicle type and turn API commands into manufacturer or model specific commands reducing development complexities and allowing easy cross platform software deployment. Additionally the virtual vehicles may be access controlled and secured to allow end users to modulate and view the flow of information. An example of a virtual vehicle application and functionality is described in the publication entitled Design Development and Validation of a Remotely Reconfigurable Vehicle Telemetry System for Consumer and Government Applications by Joshua Eric Siegel dated June 2011 and published by Massachusetts Institute of Technology which is incorporated by reference herein in its entirety.

To summarize the virtual vehicle application uses historical and real time vehicle context information collected at a server or on a cloud platform to assess the likelihood of software update interruption and identify optimal software upgrade times. Such software update interruption may happen due to any change in state of the vehicle such as changing from being turned off with only battery power to being turned on by local or remote key or switch. It should be noted that the off state still requires a power source to provide power to at least the vehicle computer.

As explained herein the portable interactive communication device solicits user feedback on suggested times derived using the virtual vehicle data for software download. Active supervision via the virtual vehicle application the portable interactive communication device feedback from the telemetry device and other data may be used to ensure non interruption and or provide damage mitigation associated with software upgrade interruption. In addition in accordance with an alternative embodiment of the invention the active supervision may be used to stop upgrading of software at a scheduled time where the active supervision makes it clear that the associated vehicle will be in use during a previously scheduled upgrade time period. Further the active supervision can stop safely terminate programming in the event that a user approaches the vehicle too closely or otherwise signals likely intent to change the operating status of the vehicle. In addition the active supervision can prevent upgrading of the software in the event that a user approaches the vehicle too closely or otherwise signals likely intent to change the operating status of the vehicle.

The memory of the data server computer also contains the service application . The service application provides the functionality necessary to minimize chances of vehicle control module update interruption. Functionality of the service application is described in detail with regard to the flowchart of .

As shown by block the service application first determines that a software update is required for the vehicle control module of the vehicle . Such identification may be provided in one or more different manner. For instance the service application may be used by a vehicle manufacturer. In this case the vehicle manufacturer may log into the service application from a location remote to the data server . For instance the OEM or a third party software management company would notify a server they or a third party own that there is an update available. The server a target for telematics device connectivity would either notify the telematics device upon connection that an update is available or would push a notification to the device either by opening a connection to the device or by way of another notification mechanism e.g. SMS to inform the vehicle to get the update information and begin the process when applicable.

In accordance with an alternative embodiment of the invention where the software upgrade is instead required for a device or system other than a vehicle a device manufacturer may take the place of the vehicle manufacturer described hereinabove.

As shown by block after confirming that a vehicle control module update is available the service application downloads the vehicle control module software update to the vehicle storage device for future use by the vehicle control module update application . Downloading by the service application to the vehicle storage device may be performed at any time that the vehicle storage device is capable of receiving the vehicle control module update.

The service application then queries the virtual vehicle application for vehicle data and calculates a list of possible times to upgrade the vehicle control module with the vehicle control module update application block . It should be noted that the list may contain one or more possible time to upgrade. Options for possible times to upgrade the vehicle control module are identified as times when the vehicle is parked for a period of time sufficient for upgrading of the vehicle control module with the vehicle control module update without the vehicle moving. As is known by those having ordinary skill in the art vehicle control module updates do not require the vehicle to be turned on but instead simply that a power source is provided to the vehicle such as a car battery. It is noted that one having ordinary skill in the art would know approximately how long of a period of time is required for upgrading a vehicle control module. The service application is capable of taking the time required for upgrading of the vehicle control module and searching for times when the vehicle will be off for a time period that is more than the required time for upgrading of the vehicle control module.

It is noted that vehicles are typically located at the same locations when they are parked for a significant time period. For instance a vehicle is typically parked for an elongated period of time at the home of the user. For this reason the service application may use location data of the vehicle in determining the list of possible times to upgrade the vehicle control module although location data is not a requirement. In addition the identification of the vehicle date and time when the vehicle is turned on when the vehicle stops and other vehicle use history are used by the service application to calculate the list of possible times to upgrade the vehicle control module.

One or more of many different methods may be used in calculating the list of possible times to upgrade the vehicle control module. For example historic data provided by the virtual vehicle may be used to provide an average stop duration and standard deviation of stopped time for a frequented location such as home or an office building. This same historic information provides information about typical timing of trips to this location along with a confidence interval. When confidence is sufficiently high the trip start and end times are presented to a selection algorithm which determines whether the upgrade can successfully be completed in the allotted time required for the upgrade.

Of course many other selections may be used such as but not limited to pairing virtual vehicle data with driver s phone data looking at calendar events looking at historic data to find times when the individual vehicle has never been used looking at location of driver s phone relative to the vehicle and activating when the driver is sufficiently far away temporally and classifying the location type where a car is parked and looking at the average time that the driver and all drivers spend at that classification of location e.g. mall long vs. bank short . The present invention is not intended to be limited by these selection methods.

A non limiting example of a simple algorithm that could be used follows which relies on location histories. A time estimate for how long a vehicle is parked at a particular location once stopped might be determined as follows.

 average time per weekend day spent at locations with similar classifications for this driver scale factor 4 

 average time per weekday spent at locations with similar classifications for all drivers scale factor 6 

 average time per weekend day spent at locations with similar classifications for all drivers scale factor 8 

The scale factors may be based on the environmental conditions day date and or other factors. The following provides examples of scale factors.

Scale factor 1 0.3 if a weekday 0.1 if a weekend . . . because this is per driver and based on a weekday history 

Scale factor 1 0.15 if a weekday 0.05 if a weekend . . . because this is per driver and based on a weekday history and a similar type of location but not identical 

It should be noted that the normalizing factor is designed to correct for a possibly dynamic number of inputs into the model. In addition the algorithm for stop duration while the vehicle is still in motion is based off of prior trip history trip matches etc. In addition the next stop location may be determined by a probabilistic approach for a given trip how much does the current trip match up with a historic trip. Again weighting factors may be used so 

Multiple prior trips may be compared simultaneously and the highest score trip for overlap is the most likely current trajectory thus the next stop on the historic trip is the most likely next stop on the current trip. The first model may then be considered to estimate the duration of that stop.

Returning to the service application then transmits a push notification to the user portable interactive communication device block . In accordance with the present invention the push notification provides one or more time available for upgrading the vehicle control module with the vehicle control module update application . For example the push notification may list Saturday Apr. 12 2014 at 2 AM as a first option Sunday Apr. 13 2014 at 1 AM as a second option and Saturday May 3 2014 at 2 AM as a third option. One having ordinary skill in the art will appreciate that more or fewer available software upgrade time options may be transmitted pushed to the user portable interactive communication device .

As shown by block the user of the portable interactive communication device then selects one of the software upgrade time options on the portable interactive communication device which is transmitted to the service application . In accordance with an alternative embodiment of the invention more than one time option may be selected. In such a situation the first available time slot would be used however if the first selected time slot becomes invalid prior to starting the update process then the next available selected timeslot will be used.

At a predefined time period prior to the user selected software upgrade time the service application transmits a request for confirmation to the portable interactive communication device block . The predefined time period may be any time that provides ample notice to the user of the vehicle as well as being close enough to the selected software upgrade time so as to ensure that the user can not only confirm agreement with the selected software upgrade time but also will not forget about the approaching selected software upgrade time. The request for confirmation may be provided in one of many different ways such as but not limited to electronic mail an interactive graphical user interface or a software application located on the portable interactive communication device that displays the selected software upgrade time to the user requiring a confirmation or rejection of the upcoming selected software upgrade time.

As shown by block the service application then determines whether the user confirmed the selected software upgrade time. In accordance with the present invention the service application provides a specific amount of time for the user to respond with confirmation or rejection of the selected software upgrade time. If either the user rejects the selected software upgrade time or a response to the selected software upgrade time confirmation is not received within the specific amount of time provided for the user to respond the service application again queries the virtual vehicle application for vehicle data and calculates a list of possible times to upgrade the vehicle control module with the vehicle control module update application block .

Alternatively if the user confirms the selected software upgrade time at the selected upgrade time the service application instructs the vehicle control module update application to upgrade the vehicle control module with the vehicle control software stored within the vehicle storage device .

While the specific amount of time for the user to respond with confirmation or rejection of the selected software upgrade time may be predefined by the service application in accordance with an alternative embodiment of the invention the service application may provide the user with an option to specify the specific amount of time. By doing so the service application provides a customization feature for the user since the user is most familiar with how much lead time is necessary to prevent the user from forgetting about the selected software upgrade time.

It should be noted that while the present description refers to over the air software updates the present invention may instead be applied to tethered software upgrades such as for local area network enabled personal computers.

It should be emphasized that the above described embodiments of the present invention are merely possible examples of implementations merely set forth for a clear understanding of the principles of the invention. Many variations and modifications may be made to the above described embodiments of the invention without departing substantially from the spirit and principles of the invention. All such modifications and variations are intended to be included herein within the scope of this disclosure and the present invention and protected by the following claims.

