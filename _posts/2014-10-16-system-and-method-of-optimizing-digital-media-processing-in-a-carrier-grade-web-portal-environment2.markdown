---

title: System and method of optimizing digital media processing in a carrier grade web portal environment
abstract: A computer implemented method includes storing generated digital media created by each portal server of a plurality of portal servers in a destination accessible by at least one of a plurality of HTTPD servers in response to a request for web content including the generated digital media. Additionally, the method includes determining that a subsequent request for digital media received by an HTTPD server of the plurality of HTTPD servers is for generated digital media created by any of the plurality of portal servers in the destination and accessible by the HTTPD server. Furthermore, the method includes serving the generated digital media from the HTTPD server to a browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614884&OS=09614884&RS=09614884
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09614884
owner_city: Armonk
owner_country: US
publication_date: 20141016
---
The present invention generally relates to a system and method of optimizing digital media processing and more particularly to a system and method of optimizing digital media processing in a carrier grade web portal environment to support cost effective scalability.

Carriers are facing a number of threats to their core business models. As part of their evolution carriers have begun exploring ways of branching out from their core services e.g. voice services SMS internet access etc. into new revenue generating business models including for example the deployment of visually rendered services. From a carrier s perspective this trend for example has resulted in an increased focus on the roll out of rich web based applications that allow the carrier to be a participant of what is now a rapidly growing Web 2.0 ecosystem.

The term Web 2.0 describes the changing trends in the use of World Wide Web technology and web design that aim to for example enhance creativity communications secure information sharing collaboration and or functionality of the web. Web 2.0 encapsulates the idea of the proliferation of interconnectivity and interactivity of web delivered content. Web 2.0 concepts have led to the development and evolution of web culture communities and hosted services such as for example social networking sites video sharing sites wikis blogs and folksonomies. Although the term Web 2.0 suggests a new version of the World Wide Web it does not refer to an update to any technical specifications but rather to changes in the ways software developers and end users utilize the Web.

Web portals allow for example partners employees and or customers to choose their user experience with personalized applications based on role context actions location preferences and team collaboration needs. A portal server comprises web portal software and core portal services that e.g. aggregate applications and content as role based applications.

Portlets are pluggable user interface software components that are managed and displayed in a web portal. Portlets produce fragments of markup code that are aggregated into a portal page. Typically following the desktop metaphor a portal page is displayed as a collection of non overlapping portlet windows where each portlet window displays a portlet. Hence a portlet or collection of portlets resembles a web based application that is hosted in a portal. A portlet container is the runtime environment for portlets using the Java Specification Request JSR 168 Portlet Specification in which portlets are for example instantiated used and destroyed. Java and all Java based trademarks and logos are trademarks of Sun Microsystems Inc. in the United States other countries or both. The JSR 168 Portlet application programming interface API provides standard interfaces for portlets. Portlets based on this JSR 168 Portlet Specification are referred to as standard portlets. Some examples of portlet applications are email weather reports and discussion forums.

Portal based applications or portlet applications allow for web based applications to relatively easily provide personalization and customization features to subscribers so that for example content that is rendered by browsers is adapted as appropriate based on the preferences associated with a particular subscriber. Further standards such as for example Java Specification Request JSR 168 have allowed for portlet based infrastructures to become fairly widespread allowing for the standards based development of standard portlets into standards compliant portlet containers.

However a number of challenges remain during the operational deployment of such a portal based solutions. For example while achieving horizontal scalability is largely a function of adding capacity at multiple tiers e.g. the HTTP hypertext transfer protocol Server tier the portal tier and or the database tier assuming that the database is horizontally scalable the costs associated with scaling at each these tiers are not equivalent. Additionally for example multiple types of digital media inclusive of content that is rich e.g. music and video are now being rendered to subscribers increasing the importance of operational efficiency in these domains.

Accordingly there exists a need in the art to overcome the deficiencies and limitations described hereinabove.

In a first aspect of the invention a computer implemented method comprises storing generated digital media created by each portal server of a plurality of portal servers in a destination accessible by at least one of a plurality of HTTPD servers in response to a request for web content including the generated digital media. Additionally the method comprises determining that a subsequent request for digital media received by an HTTPD server of the plurality of HTTPD servers is for generated digital media created by any of the plurality of portal servers in the destination and accessible by the HTTPD server. Furthermore the method comprises serving the generated digital media from the HTTPD server to a browser.

In another aspect of the invention a system comprises a configuration tool operable to configure a plurality of portal servers and a plurality of HTTPD servers such that the plurality of portal servers are operable to store generated digital media in a destination accessible by at least one HTTPD server. Additionally the configuration tool is operable to configure a plurality of portal servers and a plurality of HTTPD servers such that at least one HTTPD server of the plurality HTTPD servers is operable to access the destination containing the generated digital media and serve the generated digital media to a browser upon a request for the generated digital media.

In a further aspect of the invention a system for optimizing digital media processing in a carrier grade web portal environment comprises a switch configured to receive a request and a plurality of portal servers configured to generate digital media and store the generated digital media in a destination accessible by at least one of the plurality of HTTPD servers. Additionally the system comprises a plurality of HTTPD servers configured to receive the request from the switch fulfill a portion of the request by accessing the generated digital media from the destination and serving the generated digital media when available and forward a portal request to the at least one of the plurality of portal servers to fulfill a remainder of the request.

The present invention generally relates to a system and method of optimizing digital media processing and more particularly to a system and method of optimizing digital media processing in a carrier grade web portal environment to for example support cost effective scalability. In embodiments the present invention provides a system and method of optimizing the delivery of generated or computed digital media content to browser based subscribers e.g. wireless subscribers and or wired subscribers . More specifically the present invention provides a digital media caching system and method for generated digital media e.g. video audio images icons favicons etc. as opposed to caching entire pages in a portal environment where there is for example a significant amount of dynamically generated content.

That is for example in portal environments the generated content may be dynamically changing thus rendering caching of this dynamically generated content less useful. That is if the generated content has changed since a previous request and caching of the web page containing content then a cached copy of the content will be out of date and thus not reusable.

In contrast the generated digital media e.g. static icons may be less dynamic or static in the portal based application environment. For example static icons are often based on trademarks logos or symbols. Uses of conventional static icons include for example display next to the page s title shortcuts URL bar decoration and or browser bookmarks. Thus in accordance with aspects of the invention a caching system and method for the generated digital media may reduce regeneration of this generated digital media and thus cost upon each request to a portal server.

Additionally favicons describe highly dynamic media images computed from a per user image based on the location of that image within the overall web page. For example to avoid discontinuity between the computed favicon background and the web page background a different color background is computed for the favicon depending on that icon s location. In this way a distinct favicon is computed for each web page sent to the browser. Thus while caching of favicons may be unproductive because they are typically used once and then discarded in embodiments the present invention may be used to off load computation of favicons to an HTTP server.

In embodiments the present invention may be implemented using a set of extensions based on NFS so that security high availability reliability and failover characteristics are supported in a clustered environment. In embodiments the clustered environment may span multiple physical machines.

Moreover the present invention is operable to support caching generated digital media on an HTTP tier so that the generated digital media can be significantly more efficiently accessed without causing the portal servers to regenerate the generated digital media every time the content is accessed. For example every additional piece of work that is done close to the core e.g. away from the browser not only adds CPU processing overhead but also additional traffic and management overhead. Furthermore in embodiments the present invention provides support for high availability for example load balancing and failover considerations in a portal environment so that for example carrier grade deployment requirements can be fulfilled adequate security considerations towards supporting implementation feasibility and or support for multiple vendor portal containers.

By implementing the present invention cost savings can be realized as it is more cost effective to fulfill as much of the communication traffic as close to the browser. For example generally it can be far more cost effective to scale towards the edge i.e. close to a browser than it is to scale the application servers e.g. portal servers and the database tiers behind such servers. More specifically implementing the present invention provides a highly cost effective mode of horizontal scalability wherein the HTTP tier is scaled out where for example commodity hardware and or licensing may be significantly lower . That is the present invention realizes significant cost savings in carrier grade portal environments e.g. in a carrier grade geo distributed deployment by allowing processing to happen up front on less expensive software and hardware.

As should be understood by those of ordinary skill in the art security is an important issue that cannot be an afterthought and should be adequately considered for these types of deployments from the ground up to for example protect network elements in the call flow adequately. As such in embodiments implementing the present invention also is configured to provide firewall security. High availability and failover considerations are also important to the subscriber experience in any portal deployment. As such the present invention also is configured to provide support for clustered application server environments allowing for failover and fault tolerance. By clustering a portal application it is possible to attain high availability and scalability for that application.

Furthermore the present invention is configured to reduce latency. For example the subscriber experience is directly dependent on latency and any approach of compressing latency should be given serious thought during the architecture design and implementation phases. In embodiments the reduced latency may be proportional to the amount of generated content for example wherein higher amounts of generated content that is common to multiple subscribers which is a very common scenario provides more optimization.

In embodiments for example with the configuration based implementation the present invention provides support for multiple application server and portal environments. The present invention also provides support for expiring content to optimize storage utilization.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following 

The computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network. This may include for example a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The computing device includes a configuration tool operable to configure portal servers e.g. PS1 and PS2 and or HTTPD web servers e.g. HTTPD1 and HTTPD2 to create directories e.g. caches for generated media accessible by the HTTPD servers in a portal environment e.g. the processes described herein. The configuration tool can be implemented as one or more program code in the program control stored in memory A as separate or combined modules.

The computing device also includes a processor memory A an I O interface and a bus . The memory A can include local memory employed during actual execution of program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. In addition the computing device includes random access memory RAM a read only memory ROM and an operating system O S .

The computing device is in communication with the external I O device resource and the storage system B. For example the I O device can comprise any device that enables an individual to interact with the computing device or any device that enables the computing device to communicate with one or more other computing devices using any type of communications link. The external I O device resource may be for example a handheld device PDA handset keyboard etc.

In general the processor executes computer program code e.g. program control which can be stored in the memory A and or storage system B. Moreover in accordance with aspects of the invention the program control controls the configuration tool . While executing the computer program code the processor can read and or write data to from memory A storage system B and or I O interface . The program code executes the processes of the invention. The bus provides a communications link between each of the components in the computing device .

The computing device can comprise any general purpose computing article of manufacture capable of executing computer program code installed thereon e.g. a personal computer server etc. . However it is understood that the computing device is only representative of various possible equivalent computing devices that may perform the processes described herein. To this extent in embodiments the functionality provided by the computing device can be implemented by a computing article of manufacture that includes any combination of general and or specific purpose hardware and or computer program code. In each embodiment the program code and hardware can be created using standard programming and engineering techniques respectively.

Similarly the computing infrastructure is only illustrative of various types of computer infrastructures for implementing the invention. For example in embodiments the server comprises two or more computing devices e.g. a server cluster that communicate over any type of communications link such as a network a shared memory or the like to perform the process described herein. Further while performing the processes described herein one or more computing devices on the server can communicate with one or more other computing devices external to the server using any type of communications link. The communications link can comprise any combination of wired and or wireless links any combination of one or more types of networks e.g. the Internet a wide area network a local area network a virtual private network etc. and or utilize any combination of transmission techniques and protocols.

In embodiments a service provider such as a Solution Integrator could offer to perform the processes described herein for example on a subscription advertising and or fee basis. In this case the service provider can create maintain deploy support etc. the computer infrastructure that performs the process steps of the invention for one or more customers. These customers may be for example any business that uses technology. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

A portal server e.g. in the subscriber interface layer computes or generates for example digital media images on the fly or as needed for inclusion into HTML served to browsers. In accordance with aspects of the invention a caching mechanism for the generated digital media may reduce regeneration of this generated digital media and thus cost upon each request to a portal server.

Viewing a Web page on the World Wide Web normally begins either by typing the URL of the page into a Web browser or by following a hyperlink to that page or resource. For example a client e.g. the end user makes a HTTP request using a user agent e.g. a web browser spider or other end user tool. The Web browser then initiates a series of communication messages behind the scenes in order to fetch and display the request. The responding server or origin server for example stores and or creates resources such as HTML files and images. In between the user agent and origin server may be several intermediaries such as proxies gateways and tunnels communicating with the user agent and or the origin server.

Web browsers communicate with Web servers primarily using HTTP hypertext transfer protocol to fetch webpages. HTTP allows Web browsers to submit information to Web servers as well as fetch Web pages from such servers. The browser requests the resource by sending an HTTP request to the Web server at that particular address. In the case of a typical Web page the HTML text of the page is requested first and parsed immediately by the Web browser which will then make additional requests for images and any other files that form a part of the page.

Having received the files from the Web server the browser then renders the page onto the screen as specified by its HTML CSS cascading style sheets and other Web languages. Any images and other resources are incorporated to produce the on screen Web page that the user sees.

A portal server e.g. in the subscriber interface layer computes or generates for example digital media images on the fly or as needed for inclusion into HTML served to browsers. These images for example the scaled and masked myFave images e.g. favicons may be incorporated via URLs into the portal s HTML. A browser later uses those URLs to retrieve the generated digital media which are then rendered by the browser. The present invention provides a digital media caching model for generated digital media e.g. favicons images video etc. as opposed to caching entire pages in a portal environment where there is for example a significant amount of dynamically generated content. Thus in accordance with aspects of the invention a caching mechanism for the generated digital media may reduce regeneration of this generated digital media and thus cost upon each request to a portal server. Caching helps reduce the amount of communication traffic on the Internet. This helps reduce page download times and lowers demands on the servers.

In accordance with aspects of the invention as explained further below the configuration tool is operable to configure the HTTPD server e.g. HTTPD1 and or HTTPD2 to hand images back to a browser. As described above an HTTPD server is a computer program or the computer itself that is for example responsible for accepting HTTP requests from clients e.g. user agents such as web browsers and serving the clients HTTP responses along with optional data contents which usually are web pages such as HTML documents and linked objects images etc. . In accordance with aspects of the present invention the configuration tool is operable to configure the HTTPD server e.g. HTTPD1 or HTTPD2 rather than a portal server to serve images back to a browser. Additionally in embodiments the configuration tool is operable to configure the HTTPD server to perform the computation of the digital media. Thus for example because portal server cycles are significantly more expensive than HTTPD server cycles due to for example the license costs of the portal server software implementing the present invention realizes cost savings.

In embodiments the configuration tool is operable to configure the HTTPD servers e.g. HTTPD1 and or HTTPD2 and or the portal servers e.g. PS1 and or PS2 for sharing a destination of the cached digital media e.g. dest 1.1 of a portal server e.g. PS1 amongst all of the HTTPD servers or for not sharing a destination of the cached digital media of a portal server e.g. PS1 amongst the HTTPD servers e.g. HTTPD1 access the destination of the cached digital media of PS1 and HTTPD2 access the destination of the cached digital media of PS2 .

In accordance with aspects of the invention in embodiments the generated media destination may be shared amongst the HTTPD servers. That is as shown in the exemplary configuration of dest 1.1 may be accessed by HTTPD1 via path and dest 2.1 may be accessed by HTTPD2 via path . Additionally with this exemplary shared configuration dest 1.1 may be accessed by HTTPD2 via path and dest 2.1 may be accessed by HTTPD1 via path .

Thus in accordance with aspects of the invention the configuration tool is operable to configure a portal server e.g. PS1 and or PS2 such that the portal server writes the generated media files to a destination where the HTTPD server e.g. HTTPD1 and HTTPD2 can access the generated image files. More specifically the configuration tool is operable to configure a networked file system and or some file transfer protocol e.g. FTP SFTP or equivalent to move the media file from the portal server to the HTTPD server as described further below. For example under the Linux operating system both of these approaches are similar because Linux file systems are available that wrap file transfer protocols to produce network file systems. Linux is a registered trademark of Linus Torvalds in the United States other countries or both. 

In accordance with further aspects of the invention the configuration tool may utilize Network File System protocol to configure the HTTPD servers e.g. HTTPD1 and or HTTPD2 and or the portal servers e.g. PS1 and or PS2 . A network file system is any computer file system that supports sharing of files printers and other resources as persistent storage over a computer network. Network File System NFS protocol is a network file system protocol that for example allows a user on a client computer to access files over a network as easily as if the network devices were attached to its local disks. As discussed above in embodiments the configuration tool is operable to use for example NFS extensions to control the caching of the generated digital media and access to the generated digital media.

Any security issues of NFS are minimized with the present invention. By way of example in embodiments it may be difficult to configure and maintain a multi user wide spread secure NFS system. For example with NFS client access is determined by the userid GUID of the client according to the server. Part of the complexity of managing large numbers of machines and or users is preserving the userid GUID correspondences between server and client.

In the context of operating systems users are identified by an unsigned integer value called a user identifier often abbreviated to UID or userid. A Globally Unique Identifier or GUID is a special type of identifier used in software applications in order to provide a reference number which is unique in any context hence Globally . For example GUIDs may be used in defining the internal reference for a type of access point in a software application or for creating unique keys in a database. While each generated GUID is not guaranteed to be unique the total number of unique keys is so large that the probability of the same number being generated twice is very small.

As an example illustrating the difficulties of configuring and maintaining a multi user wide spread secure NFS system assume a client user httpuser with a userid in default group httpusergroup with a GUID with the IDs in parenthesis. Because the NFS server s exported directory is writable by the server s user with userid then httpuser on the client is able to write into the server s directory which presents a security issue.

In view of the above in accordance with aspects of the invention for example the configuration tool is operable to configure an NFS system on an internal intranet e.g. with a firewall blocking of all the NFS ports among for example a small number of clients and servers for e.g. a small number of user accounts. The first complexity is that NFS uses a number of daemons each of which uses its own port. A daemon is a computer program that runs in the background e.g. initiated as a background process rather than under the direct control of a user. A port is a virtual data connection that can be used by programs to exchange data directly instead of going through a file or other temporary storage location. The most common of these ports for example are transmission control protocol TCP ports and user datagram protocol UDP ports which are used e.g. to exchange data between computers on the Internet. However many of these ports float that is the port number is assigned randomly at runtime which poses a problem for firewalls.

In accordance with aspects of the present invention the configuration tool is operable to configure the firewall to effectively pin down all of the daemons that are not pinned that is given a specific port by default. For example if loadable kernel modules LKMs are being used the configuration tool may configure the broadcast and listening ports in etc modules.conf. A LKM is an object file that contains code to extend the running kernel or base kernel of an operating system to for example add support for new hardware and or filesystems or for adding system calls. In an exemplary embodiment using LKMs the configuration tool may configure the broadcast and listening ports as follows 

With the described configuration there is no per machine firewall. Rather in accordance with aspects of the invention the configuration tool is operable to configure the firewall to protect the entire subnet by blocking all ports by default and only open those ports that are required. With the above example since port 111 port 2049 and the floating ports are not among those required they are blocked by the firewall. Therefore in accordance with aspects of the invention the configuration tool may configure the firewall such that NFS security is aimed at access from the trusted network and is enforced for example by configuration files etc hosts.allow etc hosts.deny and or etc exports. Thus despite NFS security issues the present invention is operable to utilize for example NFS to provide firewall protection.

In accordance with further aspects of the invention the configuration tool is operable to configure the network hosts and exports. In computer networking a network host Internet host or host is a computer connected to the Internet. A network host can host for example information as well as client and or server software. Assuming for example that there are a small number of hosts e.g. specifically 192.168.0.2 and 192.168.0.4 that should be allowed to access the secured NFS server e.g. the portal server the configuration tool is operable to configure the contents for etc hosts.deny and etc hosts.allow for example as follows to prevent any host other than specified hosts on the local area network from using NFS to access e.g. the portal server.

 etc hosts.allow portmap 192.168.0.2 192.168.0.4 mountd 192.168.0.2 192.168.0.4 rquotad 192.168.0.2 192.168.0.4 statd 192.168.0.2 192.168.0.4 lockd 192.168.0.2 192.168.0.4

As shown with the above exemplary configuration all ports but the specified hosts i.e. port 192.168.0.2 and port 192.168.0.4 are prevented from using NFS to access e.g. the portal server.

Additionally with the present invention the configuration tool is operable to establish for example a small number of exported directories. Additionally in embodiments these directories may be configured to contain the computed digital media e.g. the favicon files. For example the configuration tool may utilize the following to export the directory opt httpd icons generated. 

The options in parenthesis indicate that the directory is read write accessible from a client. By default an option root squash is assumed which maps a client root user userid GUID 0 to the server s anonymous account thereby preventing a rogue client from being able to obtain root access to the server. In the pull configuration described further below only read access is required so the r option rather than the rw option may be used.

It should be noted that with this example the only machines allowed access through NFS to the opt httpd icons generated directory are those machines with IP addresses 192.168.0.2 and 192.168.0.4. Furthermore only specific user accounts have any access to the exported directory. However since the server does not validate user identity access from a compromised client is still possible. Nonetheless because the shared directory only contains icon files which are accessible through random file name generation through HTTP from outside with the present invention any consequences of a security breach of this nature are clearly minimized. Furthermore in embodiments no application on the server or client executes any files in the exported directory or any subdirectory. That is NSF does not allow access outside of the exported tree and for example symbolic links are not followed. Therefore even if a hacker manages somehow to gain write access to the exported directory nothing placed into that directory will cause any problems.

In accordance with aspects of the invention the configuration tool is operable to configure a portal server e.g. PS1 and or PS2 to write generated media files e.g. generated image files favicons etc. to a directory that is available to the HTTPD server s e.g. HTTPD1 and or HTTPD2 . More specifically in embodiments the configuration tool may configure the directory with the generated media files to be physically located on either a portal server e.g. PS1 and or PS2 or a HTTPD server e.g. HTTPD1 and or HTTPD2 . For example if the directory is physically located on a portal server then the HTTPD server is operable to pull the generated media file over when it needs to serve it out to a browser. Conversely if the directory is physically located on the HTTPD the portal server e.g. PS1 and or PS2 is operable to push the generated media file over when it is created. Additionally each portal server e.g. PS1 and or PS2 is configured by the configuration tool to clean up its own directory according to an icon time to live parameter.

In accordance with aspects of the invention in embodiments the generated media destination may be unshared amongst the HTTPD servers. That is referring to the exemplary configuration of dest 1.1 may be accessed by HTTPD1 via path and dest 2.1 may be accessed by HTTPD2 via path . However with an unshared configuration dest 1.1 may not be accessed by HTTPD2 and dest 2.1 may not be accessed by HTTPD1 . That is with an unshared configuration paths and would not be configured. Furthermore with an unshared configuration as the destination of PS2 e.g. dest 2.1 is not accessible by HTTPD1 and the destination of PS1 e.g. dest 1.1 is not accessible by HTTPD2 paths and may not be utilized.

Thus in accordance with further aspects of the invention the configuration tool may configure the portal servers for not sharing the generated media destination. That is in embodiments the configuration tool may configure the portal servers and the HTTPD servers such that HTTPD1 can only access the generated media destination of PS1 and HTTPD2 can only access the generated media destination of PS2 . As explained the rationale for the HTTPD server running on a separate processor to serve the digital media generated by the portal server is to conserve cycles on the portal server. If moving the image takes about as many cycles as handling the HTTP image requests typically there will be five such requests and the switch e.g. an F5 switch is configured for session affinity so that the digital media request can go to the portal server that produced the images then in accordance with aspects of the invention the web application server WAS hosting portal server can also handle the image HTTP request. The configuration tool may configure the HTTPD server e.g. HTTPD1 and or HTTPD2 to forward those requests in the same way the HTTPD server is configured to forward portal requests.

With a fail over the required time to live or the time between the digital media e.g. favicon being written and the digital media being accessed by the browser is expected to be a few seconds. These few seconds are the critical window in which a failure may occur thus for example prompting a fail over operation. Assume for example that PS1 responded to an initial request. Thus PS1 generated the computed digital media e.g. favicon to a shared directory e.g. physically located on PS1 which is readable by HTTPD1 . The browser then uses the digital media s URL to retrieve that computed digital media.

Assuming both HTTPD1 and HTTPD2 are operational the switch e.g. an F5 switch will randomly pick one of the HTTPD servers to serve up the digital media. If HTTPD1 is unavailable then HTTPD2 would receive the image request. In embodiments the switch may be configured for session affinity in which case for example HTTPD1 would normally receive the media request. If the switch is configured for session affinity then in accordance with aspects of the present invention either push or pull approach may be used to move the media file for example from PS1 to HTTPD1 if available or HTTPD2 otherwise.

However in embodiments without session affinity a push approach e.g. wherein the directory is for example physically stored on the HTTPD servers would require that PS1 write two copies of the generated digital media one to a directory located on HTTPD1 and one to a directory located on HTTPD2 . On the other hand if a pull approach is used e.g. wherein the directory is for example physically stored on the portal servers the switch need not be configured for session affinity because the digital media request will be processed by whichever HTTPD server by pulling digital media from the shared directory e.g. physically located on PS1 .

Furthermore in accordance with aspects of the present invention the configuration tool is operable to configure the portal server to back end interface to generate the correct URLs for the generated digital media e.g. icons which are placed in the portal server s local generated directory. For example the configuration tool may configure the portal server to back end interface such that when PS1 generates e.g. a favicon in a file named generated Fav12345.png PS1 will also generate the URL http portal.example.com my faves img favicon1 Fav12345.png and return the URL to the browser not shown . When the browser receives the URL from PS1 the switch e.g. an F5 switch selects one of HTTPD1 or HTTPD2 . However in either case the HTTPD server e.g. HTTPD1 or HTTPD2 accesses a directory remotely mounted to the PS1 which contains the generated media file. For example the HTTPD server e.g. HTTPD1 or HTTPD2 may access a directory opt IHS htdocs en US my faves img favicon1 which is remote mounted to the generated directory of PS1 .

The HTTPD server e.g. HTTPD1 or HTTPD2 then pulls out generated Fav12345.png from PS1 and returns same to the browser. Additionally as should be understood by those ordinarily skilled in the art the same methodology may be used to access a generated media file e.g. an icon generated by PS2 . That is for example the HTTPD server e.g. HTTPD1 or HTTPD2 may access directory opt IHS htdocs en US my faves img favicon2 which is remote mounted to the generated directory of PS2 .

While the present invention has been described above using NSF file system protocol the invention contemplates that other file system protocols may be used e.g. Linux FUSE based file systems. Filesystem in Userspace FUSE is a loadable kernel module for Unix like computer operating systems that allows non privileged users to create their own file systems without editing the kernel code. This is achieved by running the file system code in user space while the FUSE module only provides a bridge to the actual kernel interfaces.

Conventionally file systems are built into the Linux kernel. If required file systems can be compiled into the kernel itself but more usually the file systems are compiled as loadable kernel modules LKMs that are then loaded or unloaded from the kernel at run time. In both cases the file system runs in kernel space. However in practice running in kernel space has several disadvantages. For example bugs can corrupt the operating system forcing a re boot. This is true for both compiled in modules and LKMs. Additionally normal debugging tools cannot be used for kernel space and most subroutine libraries cannot be used in kernel space. A further disadvantage or running in kernel space is that security typically does not apply to kernel space programs

In contrast as explained above FUSE Filesystem in Userspace is a Linux kernel module that can be used to run virtually all of a file system s implementation in user space. In this configuration utilizing user space bugs typically do not corrupt the operating system OS . Additionally in user space normal programming and development tools may be used. This makes FUSE based file systems much easier to develop and safer to use.

In embodiments the present invention may use FUSE based file systems including for example Secure SHell FileSystem SSHFS and or CURLFTPFS amongst other FUSE based file systems. SSHFS is a file system for operating systems with a FUSE implementation capable of operating on files on a remote system e.g. computer using just a secure shell login on the remote system. SSHFS uses SFTP the SSH File Transfer Protocol to put get files on the remote system. SSH File Transfer Protocol sometimes called Secure File Transfer Protocol or SFTP is a network protocol that provides file transfer and manipulation functionality over any reliable data stream.

In accordance with aspects of the present invention on the local system e.g. computer where the SSHFS is mounted the present invention utilizes the FUSE Filesystem in Userspace kernel module such that the end user can seamlessly interact with remote files being securely served over SSH just as if they were local files on the user s computer. On the remote computer the SFTP subsystem of SSH is used. In embodiments the portal server PS performs SSH encryption before the image file is transferred across SFTP.

Additionally in embodiments the present invention may use CURLFTPFS or CurlFtpFS . CurlFtpFS is a filesystem for accessing FTP hosts based on FUSE and libcurl. Libcurl is a library API that users may incorporate into their programs. Libcurl is used to provide URL transfer capabilities to numerous applications e.g. open source as well as proprietary . CURLFTPFS uses conventional FTP to put get files on a remote system. Furthermore as should be understood by those of ordinary skill in the art the present invention may be utilized with any portal environment that generates for example a significant amount of generated digital media.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. The software and or computer program product can be implemented in the environment of . For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable storage medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disc read write CD R W and DVD.

At step an HTTPD server receives a request for example from a browser e.g. for web page data and forwards the request to a portal server. At step the portal server serves the web page data including digital media to a browser based on the request. At step the portal server stores the digital media in a destination accessible by at least one HTTPD server. At step the HTTPD server receives a subsequent request for e.g. web page data including digital media.

At step the HTTPD server determines whether any accessible destination of a portal server contains the digital media. If at step the HTTPD server determines that an accessible destination of the portal server contains the digital media the process proceeds to step . If at step the HTTPD server determines that no accessible destination of the portal servers contains the digital media the process proceeds to step .

At step the HTTPD server accesses the destination containing generated digital media. At step the HTTPD server serves the generated digital media to the browser and the process proceeds to step .

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims if applicable are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principals of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. Accordingly while the invention has been described in terms of embodiments those of skill in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims.

