---

title: Wrapped nested virtualization
abstract: A number of embodiments can include a Layer (L) VMM configured to provide a first number of services and a Layer (L) virtual machine (VM) that is running on the L VMM. A number of embodiments can also include a L VMM that is running on the L VM. A number of embodiments can include configuring the L VMM to provide a second number of services to a target VM, second number of services being different than the first number of services. A number of embodiments can also include configuring the target VM to execute a user application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342343&OS=09342343&RS=09342343
owner: Adventium Enterprises, LLC
number: 09342343
owner_city: Minneapolis
owner_country: US
publication_date: 20140312
---
This application claims priority to U.S. Provisional Application Ser. No. 61 798 319 filed Mar. 15 2013.

The subject matter of this disclosure was made with government support under Agreement FA8750 10 D 0197 awarded by the Air Force. Accordingly the U.S. Government has certain rights in this invention.

A virtual machine VM can require a number of services. For example a VM can require security services power management services resource management services and or back up services. Security services can prevent malware which can harm computational operations and can gain access to sensitive information that can be used to harm a user for instance. Malware can reproduce itself and can spread from one computer system to a number of other computer systems e.g. within a cloud system . Computer systems can become infected by malware which may be installed knowingly or unknowingly by a user.

Virtual machine VM based services can combine aspects of perimeter and Operating System OS based i.e. host based services. Like perimeter services VM based services can be isolated from malware that compromises vulnerable Internet facing software services or the OS that hosts them increasing confidence in the integrity of the services. Like OS based services VM based services can enjoy a complete and unfiltered view of the target VM state e.g. OS and application . By leveraging these strengths VM based services can provide trustworthy proactive and or context based defense. For example VM based defenses can provide near real time situational awareness for sensitive applications running in the cloud.

As used herein services can include back up services migration services power management services resource management services services that defend against malware services against malicious insiders and or services against user error among other types of services that can be offered. The examples shown herein are given in the context of defensive services. However the examples shown herein are illustrative and not limiting. For instance a number of embodiments of the disclosure can also be used in the context of other types of services.

In a number of examples the availability and capabilities of VM based services can be dependent on the underlying virtual machine monitor e.g. hypervisor used by the cloud platform. If a VMM does not for instance support VM introspection or VM migration then services developed for the platform may only be able to provide limited runtime integrity monitoring or moving target defense respectively. VM based services can be limited by commercial cloud infrastructures.

According to the present disclosure cloud users can select deploy and control their own services regardless of the services that are provided by the cloud infrastructure. Moreover in a number of embodiments a layer of virtualization based software services which may be referred to as HyperShell can also provide the number of services via wrapped nested virtualization. As used herein wrapped nested virtualization can include running a hypervisor in a guest virtual machine hosted on another hypervisor. For example HyperShell can contain a portable layer of services that provides transparent security services for a target VM also contained in HyperShell. HyperShell and its contents can run in a cloud platform that can be based on various hypervisors e.g. Xen VMware KVM Hyper V etc. . HyperShell can follow the target VM as it migrates between cloud platforms.

HyperShell can provide a general and transparent layer of software services that can be deployed in the near term on commodity cloud infrastructure. A transparent layer of software services provided by HyperShell can include a HyperShell VM a number of service VMs and a number of target VMs that are running on a HyperShell hypervisor. As used herein transparency refers to providing a service without a user having knowledge of the service and or the user s experience being affected by the service. For example a transparent layer of software defense can refer to a layer of software defense of which an end user may not be aware. HyperShell can enable a user to deploy applications in the cloud that require high security and or trustworthy auditing. HyperShell can provide freedom to select a cloud provider on the basis of cost rather than being constrained by the features provided by the underlying hypervisor of a cloud provider. HyperShell is portable and can support cross cloud migration which can provide a user with a number of services such as a moving target defense to react to attacks. HyperShell can provide cloud level diversity for security fault tolerance and cloud bursting to handle demand spikes or Denial of Service DoS attacks.

As used herein a layer refers to a nested layer in a virtualized environment. For example L refers to a base layer. Layer L refers to an intermediate layer that is nested within the base layer e.g. L . Layer L refers to an upper that is nested within the intermediate layer e.g. L .

In a number of examples the target VMs can access consistent interfaces and hypervisor services regardless of which cloud platform they are deployed on by decoupling the platform specific resource management services provided by the Layer hypervisor from the platform agnostic security services provided by the Layer hypervisor. A uniform Application Programming Interface API e.g. hypervisor user interface can enable construction and deployment of a customizable shell of service VMs e.g. additional Layer VMs that can provide services to cloud user applications and data i.e. target VM when they are running on any third party cloud platform. In a number of examples service VMs are referred to as defending VMs in a security context. For example service VMs that provide security services can be referred to as defending VMs.

In a number of examples defensive capabilities include transparent input output I O encryption. Transparent I O encryption can include protecting confidentiality and integrity of cloud user data from untrusted cloud infrastructure e.g. untrusted networks or data centers by transparently encrypting all network and storage. Transparent I O encryption can protect the confidentiality and integrity of data stored or transmitted using cloud infrastructure without requiring any changes to the cloud platform. Transparent I O encryption can be achieved using cryptographic techniques to transparently encrypt decrypt verify and or authenticate the I O traffic processed by the target VM . The I O traffic generated or received by the target VM may be protected from unauthorized interception or modification any time the I O traffic is not being actively processed by the target VM including when the data is in transit on cloud network infrastructure or stored in cloud storage repositories.

Defensive capabilities can also include OS and application integrity monitoring. Application integrity monitoring can include protecting cloud user processing and data from external malware by using VM integrity verification techniques to ensure the integrity of the operating system OS and critical applications within the target VMs . VM integrity monitoring can protect the integrity of the target VM from external attacks aimed at implanting malware that compromises the OS or applications running in the target VM .

Malware can be identified and neutralized by implementing a VM integrity checker that can detect unexpected changes to selected VM state. A set of archetypal malware behaviors can be identified that can be used to reliably detect attacks on a target VM. The set of archetypal malware behaviors can be selected to demonstrate the generality of this approach including malware that relies on modifications to runtime CPU memory and or disk state associated with both user processes and the OS kernel. VM integrity monitoring algorithms can reliably detect malware despite dynamic and potentially inconsistent runtime state.

VM based defenses can utilize VM introspection to implement a VM integrity checker that detects and responds to the external attacks. A VM introspection library for Xen based hypervisors can provide complete and trustworthy visibility into VM runtime state. VM introspection capabilities can provide proactive defense against broad classes of attack rather than relying on existing blacklist or signature based reactive techniques. VM introspection capabilities can be integrated with wrapped nested virtualization to build a nested hypervisor that supports proactive defense against broad classes of attacks irrespective of whether it is provided by the cloud platform hypervisor.

A VM introspection library can allow a privileged VM to look into a monitored VM. The monitoring VM can request access to the physical resources assigned to the monitored VM e.g. memory Central Processing Unit CPU registers and disk blocks among other physical resources . The introspection library can use its understanding of OS internals to translate this raw data into meaningful OS and application level state e.g. list of running processes loaded drivers and or active network connections among other states . Since this raw state data is acquired directly from the hypervisor and does not depend on any software running in the monitored VM malware running in the monitored VM cannot hide by intercepting requests and manipulating the data.

This existing introspection library can be used in association with HyperShell s trustworthy VM integrity monitoring capability. Introspection libraries can be integrated with a Layer hypervisor. Wrapped nested virtualization based defenses can provide real time complete and or trustworthy access to target VM state irrespective of whether the underlying cloud platform hypervisor supports VM introspection. Runtime integrity monitoring using wrapped nested virtualization enables broad deployment across heterogeneous cloud platforms.

If for example the VM starts in a clean e.g. known good state then malware needs to make some change to the state of the system to introduce undesirable functionality into the system e.g. modify existing software and or add new software . By leveraging the visibility provided by the Layer hypervisor and the introspection library the wrapped nested virtualization based defense integrity monitoring component can detect any such change by monitoring active processes including user mode applications the OS kernel and or kernel modules and by monitoring the state associated with those components e.g. data stored in memory on disk and or in CPU registers .

Defensive capabilities include data processing confidentiality. Data processing confidentiality includes protecting the confidentiality of cloud user processing and data from other cloud users by inhibiting cross VM side channel attacks that rely on timing and shared hardware to snoop on e.g. obtain information from co located VMs.

Defensive capabilities also include moving target defense. Moving target defenses can include protecting target VMs against external attacks by migrating nested VMs between HyperShell VM instances running on different cloud platforms. and provide an example of migrating nested VMs between HyperShell VM instances.

Due to differences in hypervisor services APIs and VM format used by commercial off the shelf COTS hypervisors migrating a VM from one cloud platform to another can be an onerous manual process. Using wrapped nested virtualization it is possible to move a nested VM between heterogeneous commodity cloud platforms with effectively zero downtime live migration regardless of the interfaces or features supported by the cloud platform hypervisor. For example a target Layer VM can be dynamically relocated from one cloud platform to another.

In a number of examples the relocation can be a coordinated migration of groups of VMs or gang migration. Coordinated migration can include moving a number of VMs together while maintaining dependencies among the VMs. For example if a first VM depends on a second VM and a third VM then moving the first VM the second VM and the third VM from a first platform to a second platform can include moving the second VM and the third VM in parallel before moving the first VM. A coordinated migration of groups of VMs can provide a means for transparent synchronized migration of a set of target VMs and their associated VM based defenses with no disruption in security enabling moving target defense and cloud diversity among other users.

For example if a target VM consumes a number of services provided by a number of service VMs then the target VM and the service VMs can be moved together to a cloud platform rather than moving the target VM and relying on a number of different service VMs to provide the number of services previously provided by the number of service VMs. Coordinated migration of VMs can allow a user to customize a number of services provided by the service VMs and maintain the customization of the number of services regardless of the movement of the service VMs and the target VMs.

HyperShell can enable migration e.g. coordinated and live of nested VMs between heterogeneous cloud platforms irrespective of whether the underlying cloud platform supports VM migration. The HyperShell can simultaneously deploy Layer HyperShell VM containers on heterogeneous cloud platforms. A nested VM running in a HyperShell container on one cloud can be independently migrated from one of the experimental cloud platforms to the other.

Defensive capabilities also include real time situational awareness. Real time situational awareness includes VM monitoring and auditing by providing the tools necessary to provide a number of services to the target VM . Wrapped nested virtualization based defenses such as those described herein can provide continuous run time integrity attestation of the cloud user VM as well as real time situational awareness irrespective of the underlying cloud platform.

In a public cloud environment other cloud users sharing the same physical infrastructure are a significant threat. A malicious VM can arrange to be placed on the same physical hardware as a target VM and exploit shared hardware e.g. processor caches to interfere with or observe e.g. snoop on target VM applications and extract credentials e.g. passwords and crypto keys from the target VM. In a number of examples defenses can be provided against such an attack due to the extra layer of abstraction introduced by wrapped nested virtualization. Introducing noise in various Layer hypervisor subsystems such as the VM scheduler can make it extremely difficult for a malicious Layer VM to spy on a nested VM running within a HyperShell.

The HyperShell layer has the potential to provide effective defense against several classes of cross VM attacks regardless of whether the Layer cloud platform hypervisor provides any such protection. Noise can be introduced in a Layer hypervisor subsystem e.g. VM scheduling and or memory management that can inhibit side channel attacks that depend on timing and knowledge of the mapping between virtual and physical resources.

One of the advantages of HyperShell s wrapped nested virtualization approach is that the HyperShell VM layer can be dynamically interposed between existing operational VMs and the underlying commodity cloud platform without affecting the behavior of the layers above or the layers below. A VM encapsulator can provide backwards compatibility by transparently wrapping HyperShell defenses around an existing VM.

Wrapped nested virtualization based defenses can include a customizable Layer e.g. nested hypervisor that supports VM introspection and or VM migration. Wrapped nested virtualization based defenses can support a broad range of COTS guest OSes in the target VM and a Layer I O encryption component that protect the target VM from untrusted cloud infrastructure. Wrapped nested virtualization based defenses can also include a Layer VM integrity component that protects the integrity of the target VM from external attacks enhancements to the Layer hypervisor that protect the target VM from other cloud users by inhibiting cross VM attacks and or a cloud test facility running commodity Layer hypervisors with support for wrapped nested virtualization that can be used for HyperShell prototype development and evaluation.

Wrapped nested virtualization based defenses can be based on a customizable nested e.g. Layer hypervisor. The wrapped nested virtualization layer e.g. customizable nested hypervisor can provide features to support effective defense while minimizing the attack surface by limiting the hypervisor s responsibilities.

A wrapped nested virtualization based defense can be based on an unmodified hypervisor e.g. unmodified open source Xen hypervisor among other hypervisors as a Layer hypervisor. The hypervisor can be a feature rich enterprise ready highly adaptable hypervisor that meets all the requirements needed for wrapped nested virtualization based defense system. A hypervisor can be utilized in Infrastructure as a Service IaaS cloud systems for instance.

A hypervisor can be adapted as needed to enable proper operation as a nested e.g. Layer hypervisor. A hypervisor can also be adapted to support the defensive capabilities proposed herein. A hypervisor can be adapted to improve performance and reduce the attack surface of the nested hypervisor by reducing the functionality provided by the nested hypervisor. For example a nested hypervisor does not need to perform physical resource management so a privileged management domain that supports a broad class of physical device drivers is unnecessary. This hardening of the nested hypervisor can provide higher assurance that the target VMs or VM based defenses cannot be compromised by Layer VM escape attacks or attacks on the nested hypervisor.

In a number of examples a HyperShell existing on VMs can be installed without extensive porting or specialist support providing backwards compatibility and facilitating transition to operational environments. VM binary image format standards such as Open Virtualization Format OVF and utilities for automated translation can be incorporated between different VM formats into the design described herein. In a number of examples a HyperShell can be installed where a non nested virtualization layer previously existed. The virtual machine OS and or applications can be wrapped by the HyperShell without affecting the function and or the state of the virtual machine OS and or applications that are wrapped.

Codepacks can be hardened versions of existing host based defenses or they can be custom defenses tailored to address the current threat environment. Codepacks can be implemented using the defending VMs. A codepack can be a service module that provides a number of services to the target VM by accessing the number of virtual resources from the defending VMs. The hypervisor introspection capability will provide software defenses running in isolated VMs with the ability to monitor and manipulate software abstractions such as processes files and or network connections running in untrusted target VMs without requiring any support from software running in the untrusted VMs. The hypervisor introspection capability cannot be spoofed by malicious software running in defended guest OSs or applications running on these OSs. The HyperShell VM integrity component will build on the introspection capabilities.

A virtual cyber defender VCD can be overlaid on a service oriented architecture SOA architecture to develop a set of SOA specific defensive codepacks for the VCD. An example of a VCD is described in U.S. patent application Ser. No. 13 631 122 which is herein incorporated by reference in its entirety. The overlay can provide host layer defenses that are coordinated with existing defenses at the SOA layer. The codepacks can provide network access control coordinated with SOA services extended web services security and or introspection features that detect corruption of key configuration information as well as anomalous server behavior. The result can include protection against some of the unique threats introduced by the SOA brokered services model and improved protection against threats common to SOA and cloud systems.

Before a migration the target VM and the number of defending VMs can be nested within the cloud platform and HyperShell VM . The cloud platform and or the HyperShell VM can constitute a cloud platform different from than the cloud platform and or the HyperShell VM . For example the cloud platform can include a first L hypervisor that is a different type of hypervisor than a second L hypervisor that is included in the cloud platform . The first L hypervisor can offer different security services and or can provide different functionalities than the second L hypervisor.

A migration manager VM from the number of service VMs can trigger the migration of the HyperShell VM the service VMs and or the target VM . In a number of examples the HyperShell VM can trigger the migration of the HyperShell VM the service VMs and or the target VM .

Moving the number of service VMs and the target VM can occur without disrupting the number of services provided by the number of service VMs . A number of services provided by the number of service VMs can be disrupted when the number of services are not provided to the target VM while the target VM is active. For example an encryption service can be disrupted when a target VM sends a message that is not encrypted by one of the service VMs that offers the encryption service. The migration of the number of service VMs and the target VM can occur in real time without a user of an application running on the target VM becoming aware of the migration.

The migration manager VM can coordinate the migration by preserving the structure associated with the service VMs and the target VM . The structure associated with the service VMs and the target VM can include the communication channels between the service VMs and the target VM . Preserving the structure associated with the service VMs and the target VM can include maintaining the same structure after the migration that existed before the migration.

After a migration the target VM and the service VMs can be nested within the cloud platform and the HyperShell VM . The migration can occur regardless of the type of hypervisor that is supported by the cloud platform and or the cloud platform . The HyperShell VM and the HyperShell VM can provide the service VMs the compatibility to function nested within the cloud platform and or the cloud platform .

In a number of examples the L hypervisor can be a cloud platform hypervisor that hosts a HyperShell VM . The HyperShell VM can include the L hypervisor . The L hypervisor can host the service VM e.g. referred to generally as filter VM the service VM the service VM and the target VM . The target VM can be coupled to the filter VM via VMM paravirtualized e.g. virtualization aware communication channels VMMPV . Paravirtualization can define a channel of communication e.g. I O between a hypervisor and a guest operating system via paravirtualized PV front and backend drivers. The filter VM can be coupled to the L hypervisor via paravirtualization.

The L hypervisor can pass disk and or network traffic to the target VM via the L hypervisor and the filter VM . For example the filter VM can intercept both disk and or network traffic. The filter VM can include virtual disk and network drivers e.g. paravirtualized drivers and a HyperShell I O protection layer.

When data is transmitted from a target VM e.g. sent across the cloud network via the physical network interface card or stored to disk the data can be intercepted by the filter VM encrypted and or hashed before it is dispatched to the physical device driver. A HyperShell I O protection layer within the filter VM can encrypt and or hash the data before it is dispatched to the physical device driver. Inbound data can be decrypted and or verified by HyperShell I O protection layer within the filter VM before the data is sent to the target VM . This layer of protection e.g. filter VM can be transparent to both the underlying cloud infrastructure e.g. L hypervisor and the target VM .

A hypervisor that supports paravirtualized drivers can be well suited to support the I O encryption capabilities. The target VM running on a hypervisor can interact with a paravirtualized virtual device driver e.g. paravirtualized frontend virtual device driver which relays requests to a corresponding device driver e.g. paravirtualized backend virtual device driver responsible for managing the physical I O device. By chaining virtual devices together it is possible to introduce an additional layer in the virtual I O stack that transparently modifies inbound and or outbound I O. In a number of examples network I O can be filtered using the Xen and Citrix XenClient XT hypervisors among other hypervisors. Moreover the XenClient XT virtualization platform has been configured to support a network encryption capability using a Virtual Private Network VPN VM. Transparent encryption of network I O using a single level of virtualization can be used in operational environments.

A similar capability however does not exist for disk I O whether it is for local storage i.e. data written to a hard drive or remote storage i.e. cloud Network Attached Storage NAS or Storage Area Network SAN . Target VM disk I O can be transparently intercepted by implementing a filter VM that applies a function to all inbound and or outbound I O buffers. A filter VM can provide real time protection of disk I O by transparently applying cryptographic operations to all storage I O.

A filter VM e.g. an I O encryption component can for example ensure confidentiality and integrity of all data transmitted or stored by untrusted cloud infrastructure. In addition the filter VM can provide a general building block upon which to build other I O filters such as real time intrusion detection I O mirroring or offline analysis. Since these components are implemented as Layer VMs operating in the context of a HyperShell mediated Layer VM they can be deployed on any commodity cloud infrastructure.

