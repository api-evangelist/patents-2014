---

title: Semi-trusted Data-as-a-Service platform
abstract: A system and method provide for shared access to a database in a semi-trusted platform. In the method, for each of a set of users, provision is made for regenerating a respective user key, based on a respective predefined user input, such as a hashed password. One or more of the users is authorized to have access to an encrypted database. For each of these, the method includes encrypting a key for the encrypted database with the respective user's user key to generate an encrypted database key. During a user session, one of the authorized users is provided with access to the encrypted database by decrypting the database key from the encrypted database key with the respective user's user key, and decrypting the database, from the encrypted database, with the database key. The database key and each user's user key are not stored on the platform and are thus inaccessible to platform administrators and unauthorized users between user sessions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589143&OS=09589143&RS=09589143
owner: XEROX CORPORATION
number: 09589143
owner_city: Norwalk
owner_country: US
publication_date: 20140417
---
The exemplary embodiment relates to service platforms and finds particular application in connection with a system and method for providing security to a DaaS platform.

The expansion of Cloud Computing where computing resources are provided on demand to the user has allowed providers to offer different services to groups of users. Examples of these include Infrastructure as a Service IaaS Platform as a Service PaaS Software as a Service SaaS and more recently Data as a Service DaaS .

A Data as a Service platform provides access to data sets i.e. databases and files through a remote access. In such a system there are one or several data providers who publish and control the data on the platform and one or several data consumers who can query download and use the data. Like the other as a service offerings DaaS relies on dedicated platforms that do not need to be located near the place where the data is actually used and which are accessed through web services mashups web application hybrids mobile applications and the like. Such platforms are not typically operated by the owners of the data.

The DaaS solution offers many benefits to data users and providers. For data providers it brings flexibility and cost effectiveness without the need for upfront investment. Providers do not need to buy and maintain dedicated hardware or software since a simple subscription service provides all the resources needed for example with a service level agreement. The resources are usually made available within a few minutes depending on the solution provider. The subscription can be stopped at any time since it is generally a pay per use model. For data consumers the DaaS solution also makes the use of the system much easier by providing a uniform and well documented API as it is standardized across all providers and generally by providing a better quality of service as compared to private servers. Another benefit for both data consumers and providers is often better security and a more standardized configuration over the platform since public cloud systems are much more visible and susceptible to unauthorized access.

However there are some disadvantages with DaaS platforms. For example even though the security aspects have been addressed in part most DaaS services lack the means to address data privacy and security solutions over the stored data sets. As a result an attack could result in the disclosure of data and the users privacy being compromised. This creates a problem of trust. When using a DaaS the user s data resides on the computer infrastructure of the platform provider. While the provider may implement security measures to provide data privacy this can come at a cost. One issue is therefore how much privacy is sufficient. The provider may need to consider protection against external attacks and also internal attacks coming for the service provider s employees or others with access to the user s data. Thus depending on the level of trust that the user has in the platform there may be a need for demonstrating that the service provider is protecting the data and user s privacy against the service provider itself.

The level of the trust that a user has in a system has an impact on the way that the security architecture of a platform is designed. Currently computing platforms are classified in terms of trust in two ways trusted and non trusted. A trusted system is a system that is relied upon to a specified extent to enforce a specified security policy. The user in turn trusts the service to handle the security aspect properly. A trusted DaaS platform may provide confidentiality and privacy of the data by implementing encryption solutions in which an encryption key resides on and is managed by the platform. This kind of system simplifies the user experience as the user does not need to handle the complications of key management encryption mechanisms and so forth. However there is still the risk that administrators of the platform as well as attackers who gain administrator privileges may be able to access the user s data and decrypt it. A non trusted system is one where the user does not trust the service to handle the data privacy and security properly and thus the user implements a desired privacy mechanism e.g. by encrypting the data before it is sent to the system. In this situation it is up to the user to manage the encryption keys generation storage and sharing . While this solution generally provides the best privacy from the user perspective it is also much more complicated to implement as the users need to have a good security knowledge. Moreover while are already many DaaS vendors few of them provide cryptographic solutions to users.

As an example one cloud solution provider of data storage services Amazon offers two solutions for data encryption Server Side Encryption and Client Side Encryption. In the former the company handles both the key management and the cryptographic mechanisms trusted platform while in the second it only provides storage for encrypted data and it is up to the end user to manage keys and implement cryptographic procedures non trusted platform . Another service offered is a Relational Database Service which provides an SQL storage platform. In this option data can be stored in plaintext or in ciphered form using Oracle Transparent Data Encryption. The Oracle engine encrypts the entire database files on disk a trusted platform . However there is no option for single column encryption. Microsoft is another DaaS solution provider. Its SQL Azure platform does not currently support encryption and decryption of the data at the database level a non trusted platform . Another platform provider CipherCloud provides access to non trusted DaaS providers via a cryptographic gateway. The gateway provides the cryptographic mechanisms while the key management is performed locally on the client side. This solution provides some assistance to users in handling the cryptographic complications that clients face in using non trusted platforms.

The trust that providers of the data have in authorized users is another consideration. There is a risk that data consumers may handle the data in an unauthorized manner such as by distributing the data publicly. Various solutions have been proposed for watermarking and fingerprinting of databases. In such techniques database rows are chosen sequentially or are grouped or partitioned. Then the fingerprint or watermark string is hidden in attributes of those rows where their data type is String Integer or Date. See for example Odeh et al. Watermarking relational database systems First Intern l Conf. on the Applications of Digital Information and Web Technologies ICADIWT 2008 pp. 270 274 August 2008 Hanyurwimfura et al. Text format based relational database watermarking for non numeric data Intern l Conf. on Computer Design and Applications ICCDA vol. 4 pp. 312 316 2010 Zhang et al. Relational databases watermarking for textual and numerical data Intern l Conf. on Mechatronic Science Electric Engineering and Computer MEC pp. 1633 1636 2011 . However adapting such techniques to the DaaS platform automatically is challenging since the platform is generally composed of various databases with different data type structures.

There remains a need for a system and method which provides users with a level of assurance that their data will not be misused without the complexities of existing systems.

The following references the disclosures of which are incorporated herein by reference in their entireties are mentioned 

U.S. Pub. No. 20130191650 published Jul. 25 2013 entitled METHODS AND APPARATUS FOR SECURING A DATABASE by Hari Balakrishnan et al. discloses a method and apparatus for a system to maintain confidentiality of data in a database management system by selecting encryption schemes for data items storing encrypted data in databases transforming SQL queries to run over encrypted data and executing queries over encrypted data on the database server.

U.S. application Ser. No. 14 107 477 filed Dec. 17 2013 entitled PRIVACY PRESERVING EVIDENCE IN ALPR APPLICATIONS by Jean Luc Meunier et al. discloses encryption schemes for license plate recognition applications.

In accordance with one aspect of the exemplary embodiment a method for providing shared access to a database includes for each of a set of users providing for regenerating a respective user key based on a respective predefined user input to a system. For each of the set of users that is authorized to have access to an encrypted database encrypting a database key for the database with the respective user s user key to generate an encrypted database key. One of the authorized users is provided with access to the encrypted database during a user session by decrypting the database key from the encrypted database key with the respective user s user key. The database is then able to be decrypted from the encrypted database with the database key. The database key and each user s user key are inaccessible to the system between user sessions.

At least one of the providing for generating the respective user key encrypting of the database key and providing one of the authorized users with access is performed with a processor.

In accordance with another aspect of the exemplary embodiment a system for providing shared access to an associated database includes a user authentication component which is configured for receiving a hashed password for a user and generating a respective user key based on the hashed password and a stored salt. For each of a set of users that is authorized to have access to an encrypted database a database encryption component encrypts a database key with the respective user s user key to generate an encrypted database key. The database key is configured for decrypting the database from the encrypted database. A database access component provides access to the encrypted database when an authorized user submits the respective hashed password whereby the respective user key is generated and used to decrypt the encrypted database key to generate the database key for decryption of the database. A processor implements the user authentication component database encryption component and database access component.

In accordance with another aspect of the exemplary embodiment a method for providing shared access to a database on a semi trusted platform includes on an application server of the platform during a user session receiving a hashed user password and a user identifier from a client device in communication with the application server a user key is generated by hashing the user password with a salt generated from the user identifier. With the user key a database key is decrypted from an encrypted database key. With the database key a database is decrypted from an encrypted database on the platform to provide database data that is accessible to the user. The user session is terminated. The hashed user password user key and the database key are not stored on the platform after the termination of the user session so that the database key is not available for decrypting the database until a user key is subsequently generated.

At least one of the generating of the user key decrypting of the database key and decrypting the encrypted database may be performed with a processor.

Aspects of the exemplary embodiment relate to a system and method for providing semi trusted security mechanisms that are offered and enforced at the level of a data exchange platform such as a Data as a Service DaaS platform. With such mechanisms users can exchange confidential data without trusting the platform but also without managing the complex security protocols themselves.

Users of the system include data providers owners and data users customers . Some or all of the users may be both owners and customers.

The semi trusted system and method can be considered as being intermediate trusted and non trusted systems. A semi trusted platform is one where users do not need to implement complex cryptography schemes and to manage the encryption keys as in non trusted ones and where the data privacy is protected from legitimate or malicious administrators as in trusted platforms. In the exemplary system the platform is allowed to access and process the user data whenever the user is online and gives permission to the system. Except for such permitted uses and times the data remains confidential and protected from unauthorized use by service providers and administrators.

The database created and any updates are encrypted with a database key that is decrypted from a user key that is based on the database provider s password. An encrypted database key is then generated by the platform for each of a set of trusted consumers. This asymmetric mechanism ensures that the platform and administrative operators will not gain access to the clear unencrypted content of the database. The database key and each user s user key which is used for decryption of database key from the stored encrypted database key are inaccessible to the system between user sessions.

One reason for using a DaaS platform is that data needs to be shared among various parties i.e. data providers and data consumers. In such a system the data consumers may be allowed to access the data and export it to their own computing devices. However there is always the risk that such data may be leaked or distributed by the user. Trust may thus become an issue for the data owners. Distributing the ciphered data is not a useful option nor is it useful to prohibit distributing the data at all. A supplementary mechanism of fingerprinting is optionally provided in order to mark the accessed records with the requester identity. Thus the originator of a data leak may then be traced from such records. Fingerprinting is a class of information hiding techniques that insert digital marks into data with the purpose of identifying the recipients who have been provided data. See Yingjiu Li et al. Fingerprinting Relational Databases Schemes and Specialties IEEE Trans. Dependable Secur. Comput. 2 1 pp. 34 45 January 2005 hereinafter Li 2005. As a result this mechanism gives the ability to the data providers to identify who was at the origin of the data distribution i.e. which authorized data consumer actually leaked the data to unauthorized parties and the ability to take appropriate actions. The data fingerprinting solution can thus fill the gap of trust between the different actors. First the data owners are assured that they will be able to identify data leakers. Second the consumers may become reluctant to distribute the data as the users know that they can be traced.

The hashing performed in the exemplary methods discussed below generates a hash value or hash based on at least one generally at least two or more pieces of information. Given the hash value the original piece s of information cannot be reconstructed at least not without undue computational expense and a significant number of examples of such data . Where two or more pieces of information are used to form a hash these are first combined e.g. concatenated in a predefined order.

The encryption keys used herein convert the information to binary data that can be represented as a string. The string can be decrypted to regenerate the original information with the same key in the case of symmetric encryption or with a different key in the case of asymmetric encryption. In asymmetric encryption two separate keys are employed a secret or private key is used to decrypt data which has been encrypted or to create a digital signature and a public key which is mathematically linked to the secret key. The public key can be used to encrypt plain text or to verify the digital signature but is not able to decrypt the data.

With reference to a functional block diagram of an environment in which a DaaS platform operates is shown. The platform includes a computer implemented system which is configured to offer a DaaS service to clients who want to access publish and share their data in a secure manner. The system is designed to operate in a semi trusted way in which the privacy and the confidentiality of the data is preserved until the user by being online gives the permission to the system to access the data. In some embodiments of the system the owners of the data may not have a high trust in the users of the data. In this embodiment a data fingerprinting option is offered to the owners of the data enabling them to track their data and identify unauthorized distributers.

The computer system is hosted by an application server which is capable of interacting with data providers and customers operating respective client computing devices via wired or wireless network such as the Internet. The server hosts or has access to a database store which hosts encrypted databases etc. which have been uploaded by various providers. Where the database is hosted by one or more remote computing devices access from the server is via a secure link to which database users generally have no direct access. The database store and application server form the DaaS platform in the illustrated embodiment.

The illustrated computer system includes a processor which controls the overall operation of the computer system by execution of processing instructions which are stored in memory connected to the processor . Computer system also includes one or more input output interfaces for communication with external devices and database store . The various hardware components of the computer may be communicatively connected by a bus . The processor executes instructions for performing at least part of the method outlined in .

Memory stores instructions for performing the exemplary method and optionally for performing other conventional operations of a DaaS platform. In particular the system hosts a user registration component a user authentication component a database creation component a database access component a database fingerprinting and detection component an application programming interface API access component a password regeneration component and a key regeneration component which generates a password encryption and decryption key based on the answers to the security questions. Some of these components are optional as described below. These components may incorporate or make use of various encryption services such as a random number generator a hashing service a symmetric encryption decryption service and an asymmetric encryption service . These components are best understood with respect to the method below.

The computer system may include one or more computing devices such as a PC such as a desktop a laptop palmtop computer portable digital assistant PDA server computer cellular telephone tablet computer pager combination thereof or other computing device capable of executing instructions for performing the exemplary method.

The memory may represent any type of non transitory computer readable medium such as random access memory RAM read only memory ROM magnetic disk or tape optical disk flash memory or holographic memory. In one embodiment the memory comprises a combination of random access memory and read only memory. In some embodiments the processor and memory may be combined in a single chip.

The network interface s allow s the computer to communicate with other devices via a computer network such as a local area network LAN or wide area network WAN or the internet and may comprise a modulator demodulator MODEM a router a cable and and or Ethernet port.

The digital processor can be variously embodied such as by a single core processor a dual core processor or more generally by a multiple core processor a digital processor and cooperating math coprocessor a digital controller or the like. The digital processor in addition to controlling the operation of the computer executes instructions stored in memory for performing the method outlined in .

The term software as used herein is intended to encompass any collection or set of instructions executable by a computer or other digital system so as to configure the computer or other digital system to perform the task that is the intent of the software. The term software as used herein is intended to encompass such instructions stored in storage medium such as RAM a hard disk optical disk or so forth and is also intended to encompass so called firmware that is software stored on a ROM or so forth. Such software may be organized in various ways and may include software components organized as libraries Internet based programs stored on a remote server or so forth source code interpretive code object code directly executable code and so forth. It is contemplated that the software may invoke system level code or calls to other software residing on a server or other location to perform certain functions.

As illustrated in each user device includes a processor memory input output devices and bus analogous to device . An associated user interface includes a display device such as an LCD screen or computer monitor and a user input device such as a keyboard keypad touchscreen or the like for entering commands which are received by the processor . Memory stores instructions for interacting with system including a user interface generation component which generates a user interface for interacting with the server a password hashing component a database creation component and an interface generation component for generating an interface on the display for receiving the user s password and selection of answers to security questions. Hardware components of the user devices may be similarly configured to those of the application server except as noted.

At S a new user operating on a client device establishes a communication link with the server and registers with the system by providing a hashed password and a user ID via the user interface . These are used by the registration component to create a user key which is encoded by the system with a one way function. Optionally a pair of PKI keys is randomly generated if the user wishes to have access to the databases of other users. Registration is described in further detail with reference to . The method can then proceed to any one of steps S to S or S S depending on the purpose of the user session.

At each subsequent log on to the system S the user undergoes an authentication process by resubmitting the hashed password which is used by the authentication component to regenerate the user key which is encoded and checked to see if it matches the previously stored encoded user key. Authentication is described in further detail with reference to .

At S a database may be created. In particular a user who wishes to store a database in the store submits the database or data for its creation to the system after authentication as described above . The database is received by the database creation component of the system and stored in encrypted form in database store . A database key is created which is specific to that database and encrypted by the database creation component using the user s key. Database creation is described in further detail with reference to .

At S provision is made for a customer to access a previously created database . A user customer who wishes to access a database does so by authentication as for S with the regenerated user key thereafter being used by the database access component to decrypt the encrypted database key provided the customer has been granted access . The database key is then used to decrypt the database temporarily for that user. The accessed database is returned to its encrypted state any unencrypted data generated during the user session being deleted from system memory by the time the user ends the session logs off the system and or the client device is no longer in communication with the server . Database access is described in further detail with reference to .

In some embodiments the database creator wishes to provide for subsequent generation of a fingerprint which is unique to each user who accesses the database. At S which can be part of S the user identifies to the fingerprinting component those fields of the data in which the data can be modified to provide a fingerprint. Subsequently at S which can be part of S a fingerprint unique to the user is inserted in the specified fields of the database data before a customer is permitted access as described in further detail with reference to . At S if a data provider later provides evidence that the data has been disclosed the customer who caused the disclosure can be identified from the unique fingerprint hidden in the data as described in further detail with reference to .

In some embodiments the database creator wishes to encrypt part of the data which is performed at S by the database creation component as described in further detail with reference to . Database data encryption encrypts some or all of the database data such that when the database is accessed by a customer authorized to have access the database the data itself remains encrypted.

In some embodiments a database user wishes to access a database via an API . In this embodiment the API access component provides a mechanism by which this is achieved through issuing to the user a token a certificate which enables a limited time access and a secret access key S which can be provided to the API for subsequent authentication and access to the database. The process of API access and refreshing the limited time certificate is described in further detail with reference to .

In some embodiments a user may wish to access the database but has lost the password. Access may be provided for by the password regeneration component through a password regeneration method S as described in further detail below.

At S the user session is terminated and the information which was temporarily stored on the platform is deleted if this has not been done already. It is to be noted that the user key as well as the hashed password from the user or other user input in the case of an API which was used to generate regenerate the user key and any database keys generated from it as well as any decrypted database data are all deleted from platform memory so that this information no longer exists in memory accessible to the system after the session ends. Any storage of this information during the user session is only temporary. Thus neither the user device nor the system stores the user key or database key permanently. The databases etc. thereafter remain inaccessible i.e. encrypted until the same or another user logs on directly or indirectly via an API and properly authenticates with the appropriate user input.

As will be appreciated the steps of the method need not all proceed in the order illustrated and fewer more or different steps may be performed.

Further details of the system and method will now be described. The following notation is used in the description 

In the exemplary platform the confidentiality of the data is provided by using one or more cryptography algorithms. The data is encrypted while at rest and it is only decrypted and becomes available when the user is online and wants to access it. All communications are made over a secure channel. In the exemplary embodiment the system provides for privacy confidentiality and secure data sharing.

The key management process is primarily performed on the server side and the complications that would ensue are avoided on the client side. However as this is a semi trusted system it does not have direct access to keys used for encryption decryption. This means that the privacy of the user is preserved while the user is offline.

1. Privacy of Users Each user of the system is associated with a password P which may be selected at user registration time S . The user password is hashed and the hashed password HP is used to generate a key KU for the user. The user key is used to encrypt the data that corresponds to the user. However the user key is never saved on the server and it is recalculated at each user s login.

2. Confidentiality of data For each encrypted database that is created through the system a database key KD is randomly generated which can be used to encrypt the data that is stored in it. The key KD for accessing such data is shared among authorized users and can be encrypted with the KU of each of the users.

3. Secure Sharing of the data The authorized users may not be online at the time of the key sharing. When they are not online the system does not have access to their user key KU. To address this a pair of PKI public and secret private keys PKU SKU is generated for each user at registration time where the public key PKU is to be publicly available to the system and the secret key SKU is encrypted with the KU. At the key sharing time the owner of the database specifies the authorized users and the system then encrypts the database s key KD with each authorized user s public key. At each user s login the system can gain access to their KU and consequently their secret key which then can be used to decrypt the database key KD and the user is able to access the encrypted data. The database key KD can then be encrypted with the user s key KU to avoid the need to continue with an asymmetric encryption which is slower than symmetric algorithms .

4. Fingerprinting As noted above adapting conventional fingerprinting techniques to DaaS is challenging since the platform is composed of various databases with different data type structures. The fingerprinting technique can be instantiated with different fingerprinting algorithms since the data types might change from database to database. This makes the mechanism more dynamic.

In spite of the trust that the database owner has over the authorized users the owner may decide to use a fingerprinting mechanism to be able to track and identify malicious distributors. Using this option is independent of the encrypted database.

The database owner may decide which columns of his database can be modified. This generally is done manually rather than being automated as a column containing integers for example should not be modified if it contains unique identifiers but may be slightly modified if it contains large approximate numbers e.g. number of page loads of a web site . For fingerprinting the database an algorithm may be chosen based on the chosen columns data types.

For fingerprinting a new random fingerprinting key KM may be generated for each database. The random key KM is encrypted using a key that is derived from the key KU of the owner and the key of the system KP . The fingerprint FP is generated using this key and the user s ID only the authorized users . The fingerprinting key is never stored on the server. It is unique for each user of a database and it is different for the same user from database to database. The fingerprint that is supported in such a platform is generated and inserted into data dynamically at each user access.

The owner of a database who finds that an extract of his database has been made public for example can use the platform to identify the distributor of the database.

With reference to the following process may be implemented at user registration time S . On the client side 

With reference to the following process may be implemented at database creation. Each legitimate user of the platform can create a database and become the owner of the database. On each database creation the following steps are taken. On the client side 

With reference to when a user wants to access a database for which the user has permissions the following steps may be taken. On the client side 

If it is the first time that the user accesses that database the asymmetrically encrypted data base key is first asymmetrically decrypted then symmetrically encrypted as follows 

The database fingerprinting if used may include two separate steps Insertion as illustrated in and Detection as illustrated in .

As illustrated in at the database creation stage S the database owner may decide to activate the fingerprint option for this database. In this case the following steps are added to the Database Creation S and Database Access S stages 

Database access is where the data is distributed to the user and as a result it is the place where the fingerprint is embedded into the data S before being accessed. On the server 

6. The KM encryption key K is generated by hashing the database key KD regenerated for this customer as described above and the key of the platform KP S .

In this stage the owner of the database who may have found the whole or a part of his database over the network can identify the distributor of the data. To do this the following steps may be taken as shown in . At the client side 

In this embodiment an authorized user can export the databases for which he or she has authorization. For exporting the database the same steps as described above for database access and fingerprinting sections are first taken.

The procedure for importing a database can be as for database creation with one or more additional step s as shown in . In importing a database at the client side 

Users may wish to access the data from their applications and services. This can be done by using an API Application Programming Interface . This type of access is different from the website access described above. In the web interaction it is assumed that the password is a secret and it is kept in the user s head. However a password is a guessable string and should not be hard coded inside the applications.

One problem that is faced with API access is that the system cannot verify whether the call is coming from a legitimate user or not unless a non repudiation mechanism is integrated into the authentication process. In the following architecture for API call such a mechanism is included. This can be implemented as shown in . On the client side 

Given that the user has provided his her password the following steps are taken at the server by the API access component 

Note that all above security elements are substantially random and long enough to make the guessing process difficult for an attacker. Also it is assumed that the pair of keys access secret refresh secret is saved in a secure way on the clients device.

As noted above the certificate contains an expiration date. The users may be provided with a mechanism to update their respective certificates using an API call. However for non repudiation reasons the user is requested to sign the certificate again but this time with another key. This is because if an attacker has captured the signatures of requests he will not be able to employ them to update the certificate. So for each update call the method may proceed as shown in 

In this case the server again verifies the validity of signatures and the correctness of the key. It then generates a new certificate and sends it back to the user. In particular 

A password recovery method can be provided by the platform. Without such method the user password used for encryption cannot be recovered as it is not stored on the platform. So if a user forgets his or her password it will not be possible to ask for a new password and restore the access to the databases. Additionally if the user is the only user of a database the data may be lost. A secure password recovery mechanism may thus be provided for the platform.

At registration time a series of challenge response questions e.g. a minimum of 3 questions will be asked from the user. The responses to all these questions are then put together to create a string. This string can then be used to create a key with which the password will be encrypted and saved on the server. At the time of clicking on the Forgot Password link an email is sent to the user that contains a link which includes a long and hardly guessable random string to the question page a first step of user authentication . In the page the same questions will be asked from the user. Using the answers the key will be recalculated by the key regeneration component . If the key is correct then the password will be retrieved and the data can then be decrypted second step of authentication . Finally the user is asked to enter a new password.

The exemplary platform provides a complete solution for a secure semi trusted DaaS. However depending on the requirements of a specific platform only some parts of the solution may be implemented. As examples one or more of the following may be implemented 

In one embodiment it is assumed that the data owners completely trust the data users. As a result the fingerprinting mechanism need not be implemented.

In some cases the encryption of the data is not considered necessary but the identification of malicious distribution of the data is desired. In this embodiment the databases may be stored in a clear form on the platform but they are fingerprinted at time of distribution. As a result the fingerprinting stage may be implemented as follows instead of encrypting the KM with K which is the hash of KD and KP at the time of database creation it may be encrypted by KP. Consequently at the moment of database access the KM is decrypted using KP.

While current DaaS services offer two types of systems i.e. trusted and non trusted the present system can offer a semi trusted service alone or in combination with a trusted and or a non trusted platform. The exemplary semi trusted platform provides for a DaaS solution where there is a balance between the level of trust and the complications of cryptographic processes and key management over the end users. This means that by managing the keys and cryptographic operations the system does not impose burdens on the user of non trusted systems and by restricting the access for DBMS administrators to user s data while at rest privacy and confidentiality for the users can be preserved. Additionally by bringing fingerprinting solutions to the platform assurance and traceability can be provided to the data owners.

The method illustrated in any one or more of may be implemented in a computer program product or products that may be executed on a computer or computers. The computer program product may comprise a non transitory computer readable recording medium on which a control program is recorded stored such as a disk hard drive or the like. Common forms of non transitory computer readable media include for example floppy disks flexible disks hard disks magnetic tape or any other magnetic storage medium CD ROM DVD or any other optical medium a RAM a PROM an EPROM a FLASH EPROM or other memory chip or cartridge or any other non transitory medium from which a computer can read and use. The computer program product may be integral with the computer for example an internal hard drive of RAM or may be separate for example an external hard drive operatively connected with the computer or may be separate and accessed via a digital data network such as a local area network LAN or the Internet for example as a redundant array of inexpensive of independent disks RAID or other network server storage that is indirectly accessed by the computer via a digital network . A thin client may be sent by the system to the user devices which installs the components on the user device.

Alternatively the method may be implemented in transitory media such as a transmittable carrier wave in which the control program is embodied as a data signal using transmission media such as acoustic or light waves such as those generated during radio wave and infrared data communications and the like.

The exemplary method may be implemented on one or more general purpose computers special purpose computer s a programmed microprocessor or microcontroller and peripheral integrated circuit elements an ASIC or other integrated circuit a digital signal processor a hardwired electronic or logic circuit such as a discrete element circuit a programmable logic device such as a PLD PLA FPGA Graphical card CPU GPU or PAL or the like. In general any device capable of implementing a finite state machine that is in turn capable of implementing the flowchart shown in one or more of can be used to implement the method for semi trusted shared access to a database. As will be appreciated while the steps of the method may all be computer implemented in some embodiments one or more of the steps may be at least partially performed manually.

It will be appreciated that variants of the above disclosed and other features and functions or alternatives thereof may be combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

