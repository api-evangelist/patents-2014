---

title: Detection of fake antivirus in computers
abstract: Detection of fake antivirus includes classifying text content of a user interface of an application program and scanning files associated with the application program for suspicious code. The user interface may be a graphical user interface (GUI) window of the application program. The text content may be obtained from a painted portion of the GUI window and by intercepting text changing operations performed on the GUI window. The text content may be input to a learning model to determine whether or not the application program belongs to the antivirus category. The application program is deemed to be fake antivirus when the application program is classified as belonging to the antivirus category and has a file with suspicious code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141797&OS=09141797&RS=09141797
owner: Trend Micro Incorporated
number: 09141797
owner_city: Tokyo
owner_country: JP
publication_date: 20140225
---
This application is a continuation of U.S. application Ser. No. 13 243 498 filed Sep. 23 2011 which is incorporated herein by reference.

The present invention relates generally to computer security and more particularly but not exclusively to methods and apparatus for detecting fake antivirus in computers.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between each type of malicious code technology for detecting malicious codes is also generally referred to as antivirus. Malicious codes have become so widespread that experienced computer users have some form of antivirus in their computers.

Fake antivirus also referred to simply as Fake AV comprises malicious code disguised as an antivirus. Fake antivirus typically mirrors the layout and behavior of legitimate i.e. non malicious antivirus and is relatively difficult to detect using conventional antivirus technology. For example conventional pattern matching algorithms may be employed to detect program icons and keywords in program shortcuts registry and files employed by fake antivirus. However icons and keywords are easily changed by fake antivirus programmers making fake antivirus difficult to detect by conventional pattern matching. Worse fake antivirus may also be packed i.e. compressed as an executable file and use a legitimate looking graphical user interface GUI .

In one embodiment a method of detecting fake antivirus in a computer includes retrieving text content of a graphical user interface GUI window of an application program classifying the text content to determine that the application program belongs to an antivirus category and scanning a file associated with the application program for suspicious code indicative of a fake antivirus. The application program is deemed to be fake antivirus based on a finding that the application program belongs to the antivirus category and the file associated with the application program has suspicious code indicative of a fake antivirus.

In another embodiment a method of preventing reception of fake antivirus in a computer includes determining a reputation of a website classifying text content of a web page of the website in response to finding that the website has an unknown reputation and finding that the website belongs to an antivirus category based on classification of the text content. In response to finding that the website belongs to the antivirus category the website is evaluated to determine whether the website belongs to a legitimate antivirus vendor before allowing download of a file from the website to the computer.

In another embodiment a method of detecting fake antivirus in a computer comprises receiving text content from a user interface of an application program finding that the application program belongs to an antivirus category based on a classification of the text content and scanning a file associated with the application program for suspicious code indicative of a fake antivirus.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

The computer is a particular machine as programmed with software modules . The software modules comprise computer readable program code stored non transitory in the main memory for execution by the processor . The computer may be configured to perform its functions by executing the software modules . The software modules may be loaded from the data storage device to the main memory . The software modules may also be made available in other computer readable medium including optical disk flash drive and other memory devices. In the example of the software modules comprise an antivirus and an operating system which are later described in connection with .

Referring now to there is shown a flow diagram illustrating operation of the computer to detect fake antivirus in accordance with an embodiment of the present invention. The computer may performs steps of the flow diagram of as programmed with the antivirus and the operating system . In the example of the computer is also executing computer readable program code of the application which is the target software i.e. the software being evaluated in this example. The application is an application program that may or may not be fake antivirus.

The antivirus may comprise antivirus software for detecting fake antivirus. In one embodiment the antivirus comprises computer readable program code configured a to get the contents e.g. text from the user interface window e.g. GUI of the target software b determine the classification of the target software c determine if files of the target software contain suspicious code and d deem the target software as fake antivirus when the target software is classified as an antivirus and files of the target software contain suspicious code. An example high level pseudo code for detecting fake antivirus is as follows 

In the example of the antivirus further comprises an optical character recognition OCR engine an antivirus classifier engine and a suspicious code inspection engine . The OCR engine may comprise computer readable program code for extracting text from graphical images including bit maps of images displayed in graphical user interfaces. The OCR engine may employ conventional OCR algorithms.

The antivirus classifier engine may comprise computer readable program code for classifying contents of user interface windows such as the GUI of the target software i.e. the software being evaluated . In one embodiment the antivirus classifier engine determines whether or not the target software belongs to the antivirus category based on the classification of the text content of the user interface window of the target software. Classifier algorithms that may be employed by the antivirus classifier engine include Bayesian classifier and Support Vector Machine SVM . For example an SVM or other classifier learning model may be trained using text contents of user interfaces of known legitimate antivirus software. The learning model may also be trained using text contents of user interfaces of known fake antivirus. For example the GUI of includes computer security related keywords such as System Scan Scan progress scanning Trojan and Spyware. Similarly the GUI of includes the computer security related keywords Antivirus scanning Firewall and Infections while the message window of includes the computer security related keywords real time scanning firewall phishing alerts and keyloggers detection. These computer security related keywords may be used as samples to train the learning model. The learning model may be employed by the antivirus classifier engine to determine whether another set of keywords and thus the target software from which the keywords where extracted belongs to the antivirus category.

The suspicious code inspection engine may comprise computer readable program code for detecting suspicious code in files associated with the target software. For example the suspicious code inspection engine may scan the executable file of the application . In one embodiment the suspicious code inspection engine is configured to identify files of the target software and scan the identified files for suspicious code. The files of the target software may be scanned for computer readable program code that is not necessarily known malicious code but is indicative of fake antivirus. In one embodiment the suspicious code inspection engine scans the files of the target software for obfuscated binary code. Examples of obfuscated binary code include packed i.e. compressed code.

In one embodiment the operating system comprises the Microsoft Windows operating system. Accordingly the following description provides programming examples for the Microsoft Windows operating system. As can be appreciated embodiments of the present invention may also be employed with other operating systems without detracting from the merits of the present invention.

The flow diagram of includes a preparation phase and a detection phase. The preparation phase includes hooking application programming interface API calls to get text changing and paint changing messages or events . This allows the antivirus to intercept API calls and get the text content of the GUI of the target software which in this case is the application . The detection phase is when evaluation of the target software is performed which in this example begins after the application executes .

The application renders its user interface by painting its GUI window on the computer screen . The application receives WM PAINT and WM NCPAINT painting messages when the Microsoft Windows operating system makes a request to paint a portion of a GUI window. By using the SetWindowLong SetWindowLongPtr API to subclass the WindowProc procedure of the target GUI window every painting rectangle e.g. x y width and height of the target GUI window may be intercepted by the antivirus . The antivirus may then employ the BitBlt API to copy the bitmap data in the painting rectangle.

The operating system receives the painting messages and forwards the painting messages to the antivirus by way of a hooking procedure established in the preparation phase see . The operating system processes the painting messages resulting in the GUI being painted on screen .

In addition to painting text on the GUI the application may also set text on portions of the GUI by performing text change operations . The application may employ the SetWindowText HWND hWnd LPCTSTR IpString API to change text of its GUI window. The SetWindowText API resides in USER32.DLL of the Microsoft Windows operating system. By hooking the SetWindowText API the antivirus may intercept and obtain text content of the GUI of the application . The application may also send the WM SETTEXT and EM SETTEXTEX messages to its GUI window to change text. Text and messages about to be sent to the GUI window may thus be intercepted and obtained by hooking the SendMessage PostMessage API or by using SetWindowLong SetWindowLongPtr API to subclass the WindowProc procedure of the GUI window.

In the example of the operating system receives text change messages from the application . The operating system forwards the text change messages to the antivirus by way of a hooking procedure established in the preparation phase . The operating system processes the text change messages resulting in text being displayed in the GUI of the application .

The antivirus gets the bitmap of the painting region of the GUI of the application and inputs the bitmap to the OCR engine which converts the bitmap into text. The text content of the GUI of the application comprises the text output of the OCR engine and the text intercepted from the text change operations . The text content of the GUI of the application is input to the antivirus classifier engine for classification.

The antivirus classifier engine determines whether or not the application belongs to the antivirus category by classifying the text content of the GUI window of the application . If the application does not belong to the antivirus category i.e. the application is not an antivirus the application is not deemed to be fake antivirus and the detection process ends . If the application belongs to the antivirus category the suspicious code inspection engine scans the files associated with the application for suspicious code .

The antivirus deems the application to be fake antivirus when the application belongs to the antivirus category and one or more files associated with the application contain suspicious code . Otherwise when the suspicious code inspection engine does not find suspicious code in the files associated with the application the antivirus does not deem the application to be fake antivirus .

The antivirus may be further configured to determine a reputation of a web host such as a website. The reputation of a website indicates whether the website is a known good known bad or unknown website. When the user of the computer clicks on a URL uniform resource locator of a website step the antivirus determines the reputation of the website based on its URL step . For example the antivirus may provide the URL of the website to a remotely located web reputation service which maintains a reputation database. The reputation database may indicate whether the URL belongs to a known good website e.g. legitimate websites or to a known bad website e.g. pornography phishing virus distributor etc. website . It is also possible that the reputation database has no information on the website in which case the website has an unknown reputation. The web reputation service returns the reputation of the website to the antivirus . The antivirus may be configured to block communications with the website if the website has a known bad reputation step and to allow communications with the website including downloading of files from the website if the website has a known good reputation step . As can be appreciated rather than consulting a remote web reputation service to determine the reputation of the website the antivirus may instead consult a local reputation database.

When the website has an unknown reputation the antivirus may be configured to receive the text content of a web page served by the website. The antivirus may input the text content of the web page to the antivirus classifier engine see to determine whether or not the website belongs to the antivirus category based on the classification of the text content of its web page. Other processes not related to detection of fake antivirus may take over when the web page does not belong to the antivirus category step to step or when the user does not want to download files from the website step to step .

When the text content of the web page indicates that the website belongs to the antivirus category and the user wants to download files from the website step to step to step the antivirus may determine whether the website belongs to a legitimate antivirus vendor. For example the antivirus may consult a local or remote database containing signatures URLs hash values or other indicators of web pages websites maintained by legitimate antivirus vendors to determine whether the website belongs to a legitimate antivirus software vendor noted in the database step . If so the antivirus allows download of files from the website to the computer step . Otherwise when the website does not belong to a reputable antivirus software vendor the antivirus blocks download of files from the website step .

Otherwise when the application program is classified as belonging to the antivirus category the antivirus initiates scanning of files associated with the application program using the suspicious code inspection engine step . The application program is not a fake antivirus when the application program does not have a file with suspicious code step to step . Otherwise when the application program has a file with suspicious code the application program is deemed to be fake antivirus step to step .

Techniques for detecting fake antivirus have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

