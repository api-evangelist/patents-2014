---

title: Conditional request processing
abstract: A method and system for processing a request is provided. An example system includes a security module that authenticates a request from a client. The system also includes a Web service that determines whether the set of operations includes an input/output (I/O) operation and determines whether a result of the authentication has been determined. While the request is pending authentication, the Web service may initiate processing of the request and may ensure that no I/O operations are performed within the processing of the request until a request of the authentication has been determined.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571478&OS=09571478&RS=09571478
owner: Red Hat, Inc.
number: 09571478
owner_city: Raleigh
owner_country: US
publication_date: 20140109
---
The present disclosure generally relates to computing devices and more particularly to processing a request.

The present disclosure generally relates to computing devices and more particularly to processing a request. When a client sends a request to a Web service the request is processed by the Web service. The Web service may determine whether a result of the authentication has been determined before processing of the request has been initiated. Authentication of the client request may take a significant amount of time. For example the client may send a connection request along with a username and password to a Web server hosting the Web service. The Web server may authenticate the client request by determining whether the sent username is stored in a database. If the sent username is found in the database the Web server may compare a password associated with the username stored in the database with the sent password. Additionally the password may be ciphered further increasing the time it takes to authenticate the request. This may contribute to the time it takes to process a request.

This disclosure relates to processing a request. Methods systems and techniques for processing a request are provided.

According to an embodiment a method of processing a request includes receiving from a client a request for processing where processing of the request includes performing a set of operations based on an order. The method also includes determining whether the set of operations includes an input output I O operation. The method further includes determining whether a result of the authentication has been determined. The method also includes while the request is pending authentication initiating processing of the request and when the set of operations is determined to include an I O operation i performing based on the order one or more operations of the set of operations preceding the I O operation ii when the result of the authentication has not been determined waiting for the result of the authentication to be determined and iii when the result of the authentication indicates that the request has been successfully authenticated performing one or more remaining operations of the set of operations that has not been processed and determining a result of the processed request based on performing the set of operations where the one or more remaining operations includes the I O operation.

According to another embodiment a system for processing a request includes a server interface that receives from a client a request for processing. Processing of the request includes performing a set of operations based on an order. The system also includes a Web service that determines whether the set of operations includes an input output I O operation and determines whether a result of the authentication has been determined. While the request is pending authentication the Web service initiates processing of the request and when the set of operations is determined to include an I O operation i the Web service performs based on the order one or more operations of the set of operations preceding the I O operation ii when the result of the authentication has not been determined the Web service waits for the result of the authentication to be determined and iii when the result of the authentication indicates that the request has been successfully authenticated the Web service performs one or more remaining operations of the set of operations that has not been processed and determines a result of the processed request based on performing the set of operations where the one or more remaining operations includes the I O operation.

According to another embodiment a non transitory machine readable medium includes a plurality of machine readable instructions that when executed by one or more processors are adapted to cause the one or more processors to perform a method including receiving from a client a request for processing where processing of the request includes performing a set of operations based on an order determining whether the set of operations includes an input output I O operation determining whether a result of the authentication has been determined and while the request is pending authentication initiating processing of the request and when the set of operations is determined to include an I O operation i performing based on the order one or more operations of the set of operations preceding the I O operation ii when the result of the authentication has not been determined waiting for the result of the authentication to be determined and iii when the result of the authentication indicates that the request has been successfully authenticated performing one or more remaining operations of the set of operations that has not been processed and determining a result of the processed request based on performing the set of operations wherein the one or more remaining operations includes the I O operation.

It is to be understood that the following disclosure provides many different embodiments or examples for implementing different features of the present disclosure. Some embodiments may be practiced without some or all of these specific details. Specific examples of components modules and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting.

When a client sends a request to a Web service the request is typically authenticated before it is processed by the Web service. The Web service may determine whether a result of the authentication has been determined before processing of the request has been initiated. Authentication of the client request may take a significant amount of time. If the request is successfully authenticated the Web service may then initiate processing of the request. If the request fails authentication however the request is rejected and not processed by the Web service. During the period of time between receiving the client request and successful authentication of the request the Web service does not process the request.

This disclosure provides a technique to reduce user perceived latencies in request processing. For example the disclosure introduces conditional request processing which allows the Web service to initiate processing the client request before the authentication is complete. In this way the period of idle time between receiving the request and a result of the request authentication is used and the response time of the Web service may be decreased. A side effect of processing the request before it has been authenticated however may cause problems if persistent changes are made e.g. to a database or file system . It may also cause problems if the Web service sends any secret information e.g. to the client or another computing device before a result of the request authentication is determined to be successful. Accordingly it may be advantageous to ensure that input output I O operations within the processing of the request are forbidden until the request has been successfully authenticated.

Network may include various configurations and use various protocols including the Internet World Wide Web intranets virtual private networks wide area networks local networks private networks using communication protocols proprietary to one or more companies cellular and other wireless networks Internet relay chat channels IRC instant messaging simple mail transfer protocols SMTP Ethernet Wi Fi and HTTP and various combinations of the foregoing.

Server includes a server interface a security component and a Web service . Server interface receives from client request for processing. Server interface sends a copy of request to Web service for processing and also sends a copy of request to security component . Security component authenticates request by for example authenticating the client that sent the request. Security component may be a security handler for Simple Object Access Protocol SOAP requests or a login module for Hypertext Transfer Protocol HTTP requests or Representational State Transfer REST requests.

In an example client sends a connection request along with a username and password to server hosting Web service . Security component may authenticate request by determining whether the sent username is stored in a database. If the sent username is found in the database server may compare a password associated with the username stored in the database with the sent password. Security component may determine a result of the request authentication based on whether the username is found in the database and whether the password stored in the database and associated with the username matches the sent password. For example if the sent username and password matches the corresponding username and password stored in the database security component may determine that the request has been successfully authenticated. In contrast if the sent username and password does not match the corresponding username and password stored in the database security component may determine that the request has failed authentication.

In another example security component identifies client s Internet Protocol IP address and determines whether the IP address is included in a list of untrusted IP addresses or included in a list of trusted IP addresses. Security component may determine a result of the request authentication based on whether the IP address is included in the list of trusted or untrusted IP addresses. For example if client s IP address is included in a list of trusted IP addresses security component may determine that the request has been successfully authenticated. If client s IP address is included in a list of untrusted IP addresses security component may determine that the request has failed authentication.

Server may store information regarding the status of the authentication request. In an embodiment server includes a memory that stores a data structure that stores one or more associations between a key and an authentication flag. In an example the key is a request identifier that identifies a client request and the authentication flag indicates a status of the authentication of the request. Security component may set the authentication flag to an initial value indicating that a result of the request has not yet been determined to a value indicating that the request has been successfully authenticated and or to a value indicating that the request has failed authentication.

Web service may read the authentication flag value associated with a request to determine a status of the authentication of the request. In an example the authentication flag is a Boolean value that is set to an initial value of 0 or false to indicate that a result of the request has not yet been determined. In such an example security component may set the authentication flag to 1 or true to indicate that a result of the request has been successfully authenticated. In another example the authentication flag is an integer value and security component sets the authentication flag to a first value to indicate that a result of the request has not yet been determined sets the authentication flag to a second value to indicate that a result of the request has been successfully authenticated and sets the authentication flag to a third value to indicate that a result of the request has failed authentication. Authentication flag may be of other value types e.g. string type and other ways to set the values are within the scope of the disclosure.

Security component may authenticate request and set the value of the authentication flag corresponding to a result of the authentication. For example security component may set the value of the authentication flag based on whether the request has been successfully authenticated and or has failed authentication. In an example if the request has been successfully authenticated security component modifies the value of the authentication flag to indicate that the request has been successfully authenticated. In such an example security component may set the new value of the authentication flag to 1. During processing of request web service may read from data structure the authentication flag indicating that request has been successfully authenticated and continue to process request to completion e.g. even if processing of request includes an I O operation .

After request has been determined to be successfully authenticated and processed web service may remove from data structure the entry corresponding to request . For example Web service may remove from data structure the entry including request identifier ID that identifies the successfully processed request and the authentication flag associated with the request identifier ID .

Security component may perform different actions based on whether the request has failed authentication. In an example if request has failed authentication security component may inform Web service that the request authentication has failed. If Web service is still in the process of processing request security component may interrupt Web service s processing of request . When Web service is interrupted and informed that the authentication has failed Web service may stop processing the request. For example when the result of the authentication indicates that the request has failed authentication Web service may halt processing of the request. If Web service has finished processing request Web service may discard the result.

In another example if the request has failed authentication security component modifies the value of the authentication flag to indicate that the request failed authentication. In such an example security component may set the new value of the authentication flag as 2. After request has been determined to fail authentication web service may stop processing request and remove from data structure the entry corresponding to request . For example Web service may remove from data structure the entry including request identifier ID that identifies the request that failed authentication and the authentication flag associated with the request identifier ID .

Server interface receives request and passes it along to Web service for processing. Server includes a Web service that processes requests from clients. In an example Web service processes request by performing a set of one or more operations based on an order. Rather than wait for security component to authenticate the request and then initiate processing of the request Web service may initiate processing of the request while it is pending authentication. In an example a time period in which security component authenticates the request overlaps with a time period in which Web service processes the request. In such an example security component may initiate authenticating request at the same time or approximately the same time that Web service initiates processing request and the authentication and processing of request may run in parallel. While processing request if Web service comes to an I O operation Web service may either continue processing request or stop processing request depending on a result of the authentication. Web service may stop and wait for the authentication of request to complete if it has not already done so. If request has been successfully authenticated Web service may continue processing request . If request has failed authentication Web service may stop processing request .

In an example if the set of operations does not include an I O operation Web service may continue to perform all operations of the set of operations and determine a result of request . Web service may wait for security component to authenticate request . If the request has been successfully authenticated Web service sends a response including the result to client . If the request has failed authentication Web service stops processing the request and or disregards the request.

In another example if the set of operations includes an I O operation Web service may continue processing one or more operations of the set of operations up until the I O operation. In a block an I O operation is identified in the set of operations. In an example Web service identifies the I O operation in the set of operations. Web service may perform based on an order one or more operations preceding the I O operation. In such an example Web service may perform based on the order all operations preceding the I O operation. The processing of request may be partially completed when Web service stops processing the request and waits for the request to be authenticated. In a block after the request has been both successfully authenticated and processed a response responsive to the request may be sent to the client. In an example Web service may finish processing request determine a result and send a response including the result to client .

It is also understood that additional processes may be inserted before during or after blocks discussed above. It is also understood that one or more of the blocks of method described herein may be omitted combined or performed in a different sequence as desired.

Referring back to to initiate processing request Web service may instantiate an instance of a thread object of a first type. The thread object of the first type includes a request identifier attribute that stores the request identifier. The request identifier attribute may be used at a later point to connect a specific instance of the thread object to a specific request. In an example the thread object of the first type extends the JAVA class Thread and includes the request identifier attribute. Trademarks are the property of their respective owners. Web service may maintain a pool of threads of the first type and remove a thread from the pool to determine instance .

Table A illustrates an example class definition of a class ThreadFirstType a thread object of the first type including a request identifier attribute.

Referring to and Table A Web service may insert the request identifier ID see as a value of requestIdentifierAttribute see Table A into instance and initiate processing of request using instance . In particular Web service uses instance to process request . Additionally Web service may determine the particular request that instance is processing by reading instance s value of attribute requestIdentifierAttribute . Web service may then use the value of instance s attribute requestIdentifierAttribute as a key into data structure to determine a result of the authentication of the request identified by the request identifier. The result of the authentication of the request may be determined by reading the authentication flag value corresponding to the request.

If the request has been successfully authenticated security component may set the value of the authentication flag to 1 where the authentication flag corresponds to the request identifier ID which may be the key into data structure . If instance is processing request Web service may identify entry by using request identifier ID stored in instance and read the authentication flag corresponding to request identifier ID as 1. The request identifier ID is the value of requestIdentifierAttribute of instance .

Processing of request may include performing a set of operations based on an order. As discussed Web service may prevent I O operations included in the set of operations from being performed until request has been successfully authenticated. In an example Web service may determine whether the set of operations includes an I O operation and ensure that no persist operations are performed until request has been successfully authenticated. An example of a persist operation is an I O operation that writes to a file or a database or sends messages to another server or subsystem.

When the set of operations is determined to not include an I O operation Web service performs based on the order the set of operations and determines a result of processing request based on performing the set of operations. If the request has been successfully authenticated server interface may return a response including the result to client . If the request has failed authentication Web service may discard the result if it has already been determined or may stop processing the request if the result has not yet been determined.

When the set of operations is determined to include an I O operation Web service performs based on the order one or more operations of the set of operations preceding the I O operation. In an example as Web service is processing operations of the set of operations Web service determines whether the particular operation to be processed is an I O operation. If the particular operation is not an I O operation Web service may perform the operation and determine whether the next operation is an I O operation. Web service may continue to iterate through the operations of the set of operations and perform these actions until an I O operation is identified or until all of the operations of the set of operations is performed. When an I O operation is determined to be within the set of operations Web service may stop processing the request until a result of the authentication has been determined. In another example Web service scans the set of operations and determines whether it includes an I O operation. Web service may process the set of operations up until the I O operation and stop processing the request until a result of the authentication has been determined.

When the set of operations is determined to include an I O operation and the result of the authentication has not been determined Web service waits for the result of the authentication to be determined. When the set of operations is determined to include an I O operation and when the result of the authentication indicates that the request has been successfully authenticated Web service performs one or more remaining operations of the set of operations that has not been processed and determines a result of the processed request based on performing the set of operations. The one or more remaining operations includes the I O operation.

Web service may identify an I O operation in a variety of ways. In the example illustrated in web service is coupled to a list of I O classes and a safety I O classloader . List of I O classes includes one or more libraries including I O operations. Web service may load classes through safety I O classloader and safety I O classloader may load a class on demand. In an example Web service loads classes only through safety I O classloader to ensure that no I O operation is executed before request is determined to be successfully authenticated. In an embodiment safety I O classloader is a Java classloader that reads a list of all low level Java libraries that contain I O operations. An example of an I O operation is a System JDBC driver InputStream or OutputStream. The list of I O operations may be configured and or updated by an administrator. In an embodiment a list of I O classes is assigned to a Web service so that each Web service has its own list of I O operations to optimize processing of requests. Server may have a list of I O classes that will be used if a Web service does not have an assigned list of I O classes.

In an example safety I O classloader reads list of I O classes which may include one or more classes that include an I O operation. Safety I O classloader receives a request to load one or more classes and accesses list of I O classes . Safety I O classloader does not load a class that includes an I O operation until security component sets the value of the authentication flag to a value indicating that request has been successfully authenticated. Accordingly if Web service does not have the class loaded Web service does not continue to process the request.

When safety I O classloader receives a request from an instance to load a class safety I O classloader determines whether the instance is of the first type. For example if instance sends a request to load a class safety I O classloader may determine that the requesting instance is of the first type. When the requesting instance is determined to not be of the first type safety I O classloader loads the requested class. In contrast when the requesting instance is determined to be of the first type safety I O classloader may identify the value of the authentication flag associated with the request identifier attribute of the requesting instance and stored in data structure . If a result of the request authentication has not yet been determined safety I O classloader may wait for security component to complete the request authentication before loading a class that contains an I O operation.

When the authentication flag value indicates that the request has been successfully authenticated safety I O classloader loads the requested class. When the authentication flag value indicates that authentication of the request is still pending safety I O classloader determines whether a class name of the class is included in list of I O classes . When the class name of the class is determined to be included in list of I O classes safety I O classloader waits for a time period and determines whether the request has been authenticated. Safety I O classloader may continue to wait and then determine whether the request has been authenticated until a result of the authentication is indicated in data structure . When the class name of the class is determined to not be included in list of I O classes safety I O classloader loads the class. In this situation safety I O classloader may load the class because the requested class is not included in list of I O classes and thus safety I O classloader may conclude that the requested class does not include any I O operations.

Authenticating and processing a request in parallel may be very efficient and provide benefits. If a high number of requests are received however authenticating and processing a request in parallel may overload server . For example if an attacker wants to overload server the attacker may send a high number of requests with incorrect credentials. In such an example all the requests may be partially processed before the authentication fails which may congest server . To avoid such a situation server may switch from a parallel mode to a normal mode. In an example server may enable a normal mode or a parallel mode. When the normal mode is enabled the request is authenticated before Web service initiates processing the request. When the parallel mode is enabled the request is authenticated and processed in parallel. In an example when server is in the normal mode security component authenticates a request first before Web service initiates processing of the request and when server is in the parallel mode security component authenticates and Web service processes the request in parallel.

In an example when server has a threshold number of requests to authenticate and process in parallel server may switch to the normal mode. When the number of requests goes down to a second threshold number software may switch back to the parallel mode. The first and second threshold numbers may be configurable by an administrator and may depend on for example how much processing power server has. In another example server switches from one mode to another mode based on a time interval. In such an example server may enable the normal mode for a first time interval. After the first time interval has elapsed server may switch to the parallel mode for a second time interval. After the second time interval has elapsed server may switch back to the normal mode for the first time interval.

As discussed above and further emphasized here are merely examples which should not unduly limit the scope of the claims. For example it should be understood that one or more modules or components e.g. security component Web service and safety I O classloader in may be combined with another module or component. It should also be understood that one or more modules or components in may be separated into more than one module or component.

Further although server in is illustrated as hosting one Web service this is not intended to be limiting and server may host one or more Web services. Additionally the hash table described and illustrated in is not intended to be limiting and other mechanisms to indicate a status of the request authentication are within the scope of the disclosure. Moreover although security component Web service and safety I O classloader are illustrated as being in the same computing device e.g. server this is not intended to be limiting. For example other embodiments in which security component Web service and or safety I O classloader are in distributing computing devices are within the scope of the disclosure.

server in is illustrated as hosting one Web service this is not intended to be limiting and server may host one or more Web services. Additionally the hash table described and illustrated in is not intended to be limiting and other mechanisms to indicate a status of the request authentication are within the scope of the disclosure.

Method includes blocks . In a block a request for processing is received where processing of the request includes performing a set of operations based on an order. In an example server receives from client request for processing where processing of request includes performing a set of operations based on an order. In a block it is determined whether the set of operations includes an input output I O operation. In an example Web service determines whether the set of operations includes an input output I O operation. In a block it is determined whether a result of the authentication has been determined. In an example Web service determines whether a result of the authentication has been determined.

In a block while the request is pending authentication processing of the request is initiated where when the set of operations is determined to include an I O operation blocks and are performed. In block one or more operations of the set of operations preceding the I O operation is performed based on the order. In block when the result of the authentication has not been determined it is determined to wait for the result of the authentication to be determined. In a block when the result of the authentication indicates that the request has been successfully authenticated one or more remaining operations of the set of operations that has not been processed is performed and a result of the processed request based on performing the set of operations is determined where the one or more remaining operations includes the I O operation.

In an example while request is pending authentication Web service initiates processing of request where when the set of operations is determined to include an I O operation i Web service performs based on the order one or more operations of the set of operations preceding the I O operation ii when the result of the authentication has not been determined Web service waits for the result of the authentication to be determined and iii when the result of the authentication indicates that request has been successfully authenticated Web service performs one or more remaining operations of the set of operations that has not been processed and determines a result of the processed request based on performing the set of operations where the one or more remaining operations includes the I O operation.

It is also understood that additional processes may be inserted before during or after blocks discussed above. It is also understood that one or more of the blocks of method described herein may be omitted combined or performed in a different sequence as desired.

Computer system includes a bus or other communication mechanism for communicating information data signals and information between various components of computer system . Components include an I O component that processes a user action such as selecting keys from a keypad keyboard selecting one or more buttons or links etc. and sends a corresponding signal to bus . I O component may also include an output component such as a display and an input control such as a cursor control such as a keyboard keypad mouse etc. . In an embodiment if a request has been received and processing of the request includes processing of an I O operation Web service may prevent I O component from persistent data.

An optional audio input output component may also be included to allow a user to use voice for inputting information by converting audio signals into information signals. Audio I O component may allow the user to hear audio. A transceiver or network interface transmits and receives signals between computer system and other devices via a communication link to a network. In an embodiment the transmission is wireless although other transmission mediums and methods may also be suitable. A processor which may be a micro controller digital signal processor DSP or other processing component processes these various signals such as for display on computer system or transmission to other devices via communication link . Processor may also control transmission of information such as cookies or IP addresses to other devices.

Components of computer system also include a system memory component e.g. RAM a static storage component e.g. ROM and or a disk drive . Computer system performs specific operations by processor and other components by executing one or more sequences of instructions contained in system memory component . Logic may be encoded in a computer readable medium which may refer to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. In various implementations non volatile media includes optical or magnetic disks or solid state drives volatile media includes dynamic memory such as system memory component and transmission media includes coaxial cables copper wire and fiber optics including wires that include bus . In an embodiment the logic is encoded in non transitory computer readable medium. In an example transmission media may take the form of acoustic or light waves such as those generated during radio wave optical and infrared data communications.

Some common forms of computer readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EEPROM FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer is adapted to read.

In various embodiments of the present disclosure execution of instruction sequences to practice the present disclosure may be performed by computer system . In various other embodiments of the present disclosure a plurality of computer systems coupled by communication link to the network e.g. such as a LAN WLAN PTSN and or various other wired or wireless networks including telecommunications mobile and cellular phone networks may perform instruction sequences to practice the present disclosure in coordination with one another.

Where applicable various embodiments provided by the present disclosure may be implemented using hardware software or combinations of hardware and software. Also where applicable the various hardware components and or software components set forth herein may be combined into composite components including software hardware and or both without departing from the spirit of the present disclosure. Where applicable the various hardware components and or software components set forth herein may be separated into sub components including software hardware or both without departing from the spirit of the present disclosure. In addition where applicable it is contemplated that software components may be implemented as hardware components and vice versa.

Application software in accordance with the present disclosure may be stored on one or more computer readable mediums. It is also contemplated that the application software identified herein may be implemented using one or more specific purpose computers and or computer systems networked and or otherwise. Where applicable the ordering of various blocks described herein may be changed combined into composite blocks and or separated into sub blocks to provide features described herein.

The foregoing disclosure is not intended to limit the present disclosure to the precise forms or particular fields of use disclosed. As such it is contemplated that various alternate embodiments and or modifications to the present disclosure whether explicitly described or implied herein are possible in light of the disclosure. Changes may be made in form and detail without departing from the scope of the present disclosure. Thus the present disclosure is limited only by the claims.

