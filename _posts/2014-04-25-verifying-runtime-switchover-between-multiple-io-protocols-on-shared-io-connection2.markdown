---

title: Verifying runtime switch-over between multiple I/O protocols on shared I/O connection
abstract: A verification environment enables verification of runtime switch-over—i.e., a switch-over without restarting the device under test—between multiple I/O protocols that share a same physical interface. The device under test can be a switch unit having multiple logical protocol processing units and a logical protocol multiplexor. The verification environment includes a switch-over detector which monitors the state of the device under test, and a switch-over controller that controls the switch-over sequence by pausing and re-starting traffic on all or specific protocol drivers of the verification environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606950&OS=09606950&RS=09606950
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09606950
owner_city: Armonk
owner_country: US
publication_date: 20140425
---
This application is a continuation of co pending U.S. patent application Ser. No. 14 255 218 filed Apr. 17 2014. The aforementioned related patent application is herein incorporated by reference in its entirety.

Computer systems often use multiple computers that are coupled together in a common chassis. The computers may be separate servers that are coupled by a common backbone within the chassis. Each server is a pluggable board that includes at least one processor an on board memory and an Input Output I O interface. Further the servers may be connected to a switch to expand the capabilities of the servers. For example the switch may permit the servers to access additional Ethernet networks or Peripheral Component Interconnect Express PCIe slots as well as permit communication between servers in the same or different chassis. In addition multiple switches may also be combined to create a distributed network switch.

Embodiments of the present disclosure provide a computer implemented method for a method for verifying a switch unit. The method includes detecting a runtime switch over of a switch unit from communicating on a port according to a first protocol to communicating according to a second protocol. The method further includes quiescing traffic of the first protocol from a first protocol driver through the switch unit and starting traffic of the second protocol from a second protocol driver through the switch unit. The method includes verifying operation of the switch unit in response to the traffic of the second protocol based on compliance with the second protocol.

Embodiments of the present disclosure further provide a computer program product for verifying a device under test. The computer program product includes a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes computer readable program code configured to detect a runtime switch over of a switch unit from communicating on a port according to a first protocol to communicating according to a second protocol. The computer readable program code further includes computer readable program code configured to quiesce traffic of the first protocol from a first protocol driver through the switch unit and computer readable program code configured to start traffic of the second protocol from a second protocol driver through the switch unit. The computer readable program code includes computer readable program code configured to verify operation of the switch unit in response to the traffic of the second protocol based on compliance with the second protocol.

Embodiments of the present disclosure further provide a system having a cable connect configured to be coupled to a switch unit by a physical connection a switch over detector and a switch over controller. The switch over detector is configured to detect a runtime switch over of the switch unit from communicating on the physical connection according to a first protocol to communicating on the physical connection according to a second protocol. The switch over controller is configured to responsive to detecting the runtime switch over quiesce traffic of the first protocol from a first protocol driver through the switch unit and start traffic of the second protocol from a second protocol driver through the switch unit.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures. It is contemplated that elements disclosed in one embodiment may be beneficially utilized on other embodiments without specific recitation. The drawings referred to here should not be understood as being drawn to scale unless specifically noted. Also the drawings are often simplified and details or components omitted for clarity of presentation and explanation. The drawings and discussion serve to explain principles discussed below where like designations denote like elements.

Embodiments disclosed herein provide techniques to verify run time switchover between multiple I O protocols that share the same physical interface. Physical I O connections can be limited on processor and I O chips and therefore it may be desirable to share physical connections between multiple I O protocols. As known in the field of chip design such processor and I O chips may need to be verified for logical correctness before being sent to foundry. Accordingly it may be desirable to verify run time switch over between the multiple protocols in I O chips that are intended to support hot plug or drawer pulls while still remaining active for other I O connections. This is true for a switch unit embodied as a chip that supports multiple industry standard protocols such as Peripheral Component Interconnect Express PCIe Serial ATA SATA and Universal Serial Bus USB and next generation PCIE 4.0 as well as proprietary communication I O protocols.

In the following reference is made to embodiments of the present disclosure. However it should be understood that the disclosure is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice aspects of the present disclosure. Furthermore although embodiments of the present disclosure may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the present disclosure. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

The logical protocol processing units may parse traffic data e.g. packets according to formats and data alignments defined in the specification of the respective protocol perform checksum calculations disassemble and re assemble packets decide where to forward packets filter traffic generate acknowledgements and perform other processing tasks as specified by the respective protocol. In one embodiment the logical protocol processing units may be configured to generate packets that go out over a switch unit interface of the switch unit to a proprietary network e.g. a switching layer accessed by other switch units. The packets for the switch unit interface may be assembled and or re packaged from I O protocol traffic data received based on the ports .

In one or more embodiments the switch unit receives traffic of multiple I O protocols on one or more ports that share a same physical I O connection. The switch unit is configured to switch over from a mode that handles traffic of one protocol e.g. PCIe to a mode that handles traffic of a different protocol s . This switch over capability is represented in by a logical multiplexor identified as logical protocol MUX which is communicatively coupled to the logical protocol processing units and configured to change state and switch between the logical protocol processing units .

In one implementation the switch unit may be a system on chip SoC application specific integrated circuit ASIC integrated circuit IC microcontroller or other hardware element and the logical protocol processing units and logical protocol multiplexor may be a combination of hardware logic and software drivers within the switch unit configured to provide the functionality described above. In another implementation the logical protocol processing units and logical protocol multiplexor may be embodied in executable program code or in programmable logic devices that simulate operation of hardware logic and software drivers that provide the described functionality. Such executable program code and programmable logic devices may be used to prototype simulate and test the logical protocol processing units and logical protocol multiplexor prior to being embodied in hardware e.g. before being sent to foundry.

In one embodiment the verification environment includes a plurality of protocol drivers communicatively coupled to the device under test e.g. switch unit by a cable connect which is a hardware element coupled by a physical connection to the switch unit and one or more unit drivers communicatively coupled to the interface of the switch unit . The verification environment further includes a switch over controller and a switch over detector communicatively coupled to the switch unit undergoing verification. Though not shown it should be noted that the verification environment includes monitor and checker modules which compare the states and output of the switch unit with expected results and a verification manager that manages and coordinates operation of all of the components described herein together.

In one embodiment the plurality of protocol drivers e.g. . . . N are configured to generate and drive traffic as defined by one or more I O protocols to the switch unit . The traffic from the protocol drivers may be used to verify that the switch unit operates in conformity with the protocols that is check for differences between the specification of the protocols and the implementation of the logical protocol processing units . The protocol drivers may include a multitude of test cases defined in the protocol s specification inputs manually created by a user e.g. chip designer random stimulus and other inputs designed to test the switch unit . As shown in each protocol driver may be configured to generate and drive traffic as defined by a respective protocol. A first protocol driver is configured to drive traffic according to a first protocol Protocol a second protocol driver is configured to drive traffic according to a second protocol Protocol and so forth. By way of example the first protocol driver may be a PCIe protocol driver configured to generate PCIe traffic that in some test cases emulates a PCIe device on a PCIe network connected to the switch unit .

The unit drivers e.g. . . . N correspond to the logical protocol processing units and are configured to generate and drive input that simulates internal traffic from a proprietary network of other switch units for example as described later in conjunction with .

In one or more embodiments each protocol driver and unit driver may include a switch over driver application programming interface API that specifies a set of functions in common that the respective driver may perform to facilitate runtime switch over verification of the switch unit according to techniques described herein. In one embodiment the API of a particular protocol driver may provide another invoking component the ability to quiesce traffic from the protocol driver the ability to initiate one or more protocol specific sequences and the ability to re start traffic from the protocol driver.

In one embodiment the switch over detector is configured to monitor the logical state of the switch unit depicted by arrow to determine when a switch over sequence has started and when a switch over sequence has ended. In embodiments where the switch unit is embodied by a hardware processing element e.g. a chip the switch over detector may monitor register elements and other hardware elements within the hardware processing unit. In other embodiments where the switch unit is embodied as program code that simulates hardware logic the switch over detector may monitor data structures that indicate a logical state of the switch unit to determine when switch over sequences has started and ended. The switch over detector may be configured to access the logical state of the switch unit to determine other switch over state information such as the current I O protocol settings of the one or more ports e.g. uplink downlink and error state information. The switch over detector may generate events depicted by arrow indicating a switch over sequence has started or ended and provide the switch over state information to the switch over controller .

In one embodiment the switch over controller is configured to control the switch over sequence by capturing events from the switch over detector and responding to such events by directing the protocol drivers as well as the unit drivers through invocation of the switch over driver APIs of the respective drivers. Using the switch over driver APIs the switch over controller may quiesce traffic from all or specific protocol drivers and unit drivers initiate one or more protocol specific sequences and re start traffic from all or specific protocol drivers and unit drivers in the verification environment . In one embodiment the API can be interfaced via a software API as used by a software component for example a verification test bench embodied in a program code such as C or SystemVerilog. For example the switch over controller may directly control a protocol driver via a software API call of the API as shown by arrows in . In another embodiment the API can be interfaced via a hardware API as shown by arrow to allow intermediate routing for example pass through the cable connect as shown by arrow .

While components of the verification environment e.g. protocol drivers unit drivers logical protocol processing units are depicted in as separate logical entities it is noted that in other embodiments the components of the verification environment may be combined and separated in other arrangements and configurations including having one or more shared sub components e.g. a parser . As depicts a generalized embodiment having N logical protocols sharing a physical interface any number of multiple protocols may be utilized according to the techniques described herein. Further while depicts a single set of a switch over controller and a switch over detector associated with the port it should be noted that other embodiments may include additional switch over controllers and switch over detectors corresponding to additional ports as described later in conjunction with .

In the example shown in a switch unit is communicatively coupled to the verification environment by a first port and a second port . The switch unit includes a PCIe processing unit configured to process PCIe traffic and a logical protocol processing unit configured to process traffic according to a proprietary communications protocol depicted as FLINK and represented as a FLINK processing unit received on the ports . The switch unit further includes a logical protocol multiplexor configured to switch operating states of the switch unit between processing FLINK traffic e.g. via FLINK processing unit and processing PCIe traffic e.g. via PCIe processing unit received on the ports . By way of example the switch unit may configure the first port for running FLINK traffic and the second port for running FLINK traffic although it should be noted the ports may run different traffic in concurrently. A FLINK driver of the verification environment emulates an FLINK interface and drives FLINK traffic for testing and verification purposes onto the port of the switch unit via a cable connect .

Referring back to the method begins at step where a switch over detector detects a runtime switch over of a switch unit from a communicating on a physical connection according to a first protocol to communicating on the physical connection according to a second protocol. The switch over may be characterized as a runtime switch over in that the switch unit switches to using a different protocol without having to reset restart power cycle or significantly disrupt service of the switch unit.

In one example a switch over detector communicatively coupled to the switch unit detects a switch over of the switch unit from communicating on the first port according to the FLINK protocol to communicating on the port according to the PCIe protocol. In one embodiment the switch over detector may detect a change in the state of the logical protocol multiplexor indicating a different protocol processing unit has been selected. The switch over detector may generate an event indicating a switch over sequence for port has been started. In some embodiments the event generated by the switch over detector may include state information obtain from the switch unit. A switch over controller associated with the port captures the event generated by the switch over detector and coordinates operations of other components in the verification environment responsive to the switch over event.

At step responsive to detecting the switch over a switch over controller quiesces traffic of the first protocol from a first protocol through the switch unit. For example the switch over controller quiesces FLINK traffic coming from the FLINK driver via invocation of a switch over driver API provided by the FLINK driver . In the embodiment shown the switch over controller interfaces with the switch over driver API by setting a hardware signal at the cable connect which in turn routes that information i.e. via signal on a hardware interface to the FLINK driver to quiesce FLINK traffic to the port . In another embodiment the switch over controller interfaces with the switch over driver API of the FLINK driver by invoking a software API through software inter process communication IPC mechanisms e.g. sockets message passing .

At step the switch over controller may optionally perform one or more protocol specific sequences associated with the second protocol and or associated with the first protocol. In some embodiments the switch over controller initiates a sequence of operations specific to the second protocol that initializes communications between a second protocol driver and the port of the switch unit. For example the switch over controller may initiate e.g. via API of PCIe driver a PCIe link training sequence that negotiates link parameters e.g. PCIe lane polarity link number set of PCIe lanes that belong to the link link speed etc. as specified by the PCIe protocol to establish a PCIe link between the PCIe driver and the port of the switch unit . In another example the switch over controller may assert or de assert a reset signal that wakes up the PCIe driver for example a PERST signal as specified by the PCIe protocol after which the PCIe driver proceeds to link training and initialization.

At step the switch over controller starts traffic of the second protocol from the second protocol driver through the switch unit. For example the switch over controller signals the PCIe driver e.g. via API to start driving PCIe traffic on the first port for testing and verification purposes. It is noted that it may take some time for the switch unit to switch over and prepare itself for handling PCIe traffic. As such in one embodiment the switch over detector may detect that the switch over sequence occurring within the switch unit has ended and generate an event indicating such. The switch over controller captures the event and responsive to determining the switch over sequence of the switch unit has ended i.e. the switch unit is ready restarts PCIe traffic to the switch unit. In another embodiment the switch over controller restarts PCIe traffic to the switch unit responsive to both capturing the event indicating the switch over sequence of the switch unit has ended and determining that link initialization sequences have been completed e.g. in step and the link is up.

At step the verification environment verifies operation of the switch unit in response to the traffic of the second protocol based on compliance with the second protocol. In some embodiments one or more monitor and checker modules compare the internal states of the logical protocol processing units of the switch unit with expected results according to a specification of the second protocol. The monitor and checker modules may compare output from the logical protocol processing units e.g. outbound traffic from the switch unit in response to traffic of the second protocol to determine compliance with the second protocol.

In one embodiment responsive to determining a switch over has occurred in the switch unit the switch over controller may modify operations of a protocol processing unit driver communicatively coupled to the switch unit. For example responsive to detecting the runtime switch over the switch over controller may notify a FLINK processing unit driver and PCIe processing unit driver via switch over driver APIs respectively. Similar to the unit drivers in the FLINK processing unit driver and PCIe processing unit driver are unit drivers communicatively coupled to an interface of the switch unit and are configured to drive input that simulates internal traffic from a proprietary network of other switch units. In one embodiment the switch over controller may instruct the FLINK processing unit driver to pause generating inputs to the FLINK processing unit and then instruct the PCIe processing unit driver to start generating inputs to the PCIe processing unit .

In the embodiment shown in the verification environment includes an additional switch over detector and switch over controller associated with the second port . In some embodiments each port of the switch unit may have respective of a switch over detector and switch over controller responsible for detecting switch overs on that port and transmitting control signals to the verification environment . In the embodiment shown the verification environment includes additional instances of protocol drivers associated with driving traffic on the second port of the switch unit . For example the verification environment includes a separate instance of FLINK driver e.g. and a separate instance of PCIe driver e.g. configured to drive traffic on the second port .

The server may include network adapters e.g. converged network adapters . A converged network adapter may include single root I O virtualization SR IOV adapters such as a Peripheral Component Interconnect Express PCIe adapter that supports Converged Enhanced Ethernet CEE . Another embodiment of the system may include a multi root I O virtualization MR IOV adapter. The network adapters may further be used to implement of Fiber Channel over Ethernet FCoE protocol RDMA over Ethernet Internet small computer system interface iSCSI and the like. In general a network adapter transfers data using an Ethernet or PCI based communication method and may be coupled to one or more of the virtual machines. Additionally the adapters may facilitate shared access between the virtual machines. While the adapters are shown as being included within the server in other embodiments the adapters may be physically distinct devices that are separate from the server .

As shown in the second server may include a processor coupled to a memory which includes one or more virtual machines similar to those found in the first server . The memory of server may include a hypervisor configured to manage data shared between different virtual machines . The hypervisor may include a virtual bridge that allows direct communication between connected virtual machines rather than requiring the virtual machines to use the bridge elements or switching layer to transmit data to other virtual machines communicatively coupled to the hypervisor .

Each network adapter may include one or more Ethernet ports that couple to one of the bridge elements . Additionally to facilitate PCIe communication the server may have a PCI host bridge . The PCI host bridge would then connect to an upstream PCI port on a switch element in the distributed network switch . The data is then routed via the switching layer to the correct downstream PCI port which may be located on the same or different switch module as the upstream PCI port . The data may then be forwarded to the PCI device .

The bridge elements may be configured to forward data frames throughout the distributed network switch . For example a network adapter and bridge element may be connected using two 40 Gbit Ethernet connections or one 100 Gbit Ethernet connection. The bridge elements forward the data frames received by the network adapter through the switching layer . The bridge elements may include a lookup table that stores address data used to forward the received data frames. For example the bridge elements may compare address data associated with a received data frame to the address data stored within the lookup table. Thus the network adapters do not need to know the network topology of the distributed network switch .

The distributed network switch in general includes a plurality of bridge elements that may be located on a plurality of a separate though interconnected hardware components. To the perspective of the network adapters the distributed network switch acts like one single switch even though the distributed network switch may be composed of multiple switches that are physically located on different components. Distributing the distributed network switch provides redundancy in case of failure.

Each of the bridge elements may be connected to one or more transport layer modules that translate received data frames to the protocol used by the switching layer . For example the transport layer modules may translate data received using either an Ethernet or PCI communication method to a generic data type i.e. a cell that is transmitted via the switching layer i.e. a cell fabric . Thus the switch modules comprising the distributed network switch are compatible with at least two different communication protocols e.g. the Ethernet and PCIe communication standards. That is at least one switch module has the necessary logic to transfer different types of data on the same switching layer .

In one embodiment the switching layer may comprise a local rack interconnect LRI which connects bridge elements located within the same chassis and rack as well as links that connect to bridge elements in other chassis and racks. After routing the cells the switching layer may communicate with transport layer modules that translate the cells back to data frames that correspond to their respective communication protocols. A portion of the bridge elements may facilitate communication with an Ethernet network which provides access to a LAN or WAN e.g. the Internet . Moreover PCI data may be routed to a downstream PCI port that connects to a PCIe device . The PCIe device may be a passive backplane interconnect as an expansion card interface for add in boards or common storage that can be accessed by any of the servers connected to the distributed network switch . Although upstream and downstream are used to describe the PCI ports this is only used to illustrate one possible data flow. For example the downstream PCI port may in one embodiment transmit data from the connected to the PCIe device to the upstream PCI port . Thus the PCI ports may both transmit as well as receive data.

An Input Output Management Controller IOMC i.e. a special purpose processor is coupled to at least one bridge element or upstream PCI port which provides the IOMC with access to the switching layer . One function of the IOMC may be to receive commands from an administrator to configure the different hardware elements of the distributed network switch . In one embodiment these commands may be received from a separate switching network from the switching layer . Although one IOMC is shown the system may include a plurality of IOMCs . In one embodiment these IOMCs may be arranged in a hierarchy such that one IOMC is chosen as a master while the others are delegated as members or slaves . In another embodiment the IOMCs may be arranged in a peer to peer layout where the IOMCs collaborate to administer and manage the elements of the distributed network switch .

The switch modules e.g. a chassis interconnect element include one or more sub switches and an IOMC . The sub switches may include a logical or physical grouping of bridge elements e.g. each sub switch may have five bridge elements . Each bridge element may be physically connected to the servers . For example a bridge element may route data sent using either Ethernet or PCI communication protocols to other bridge elements attached to the switching layer using the routing layer. In one embodiment the bridge element may not be needed to provide connectivity from the network adapter to the switching layer for PCI or PCIe communications.

Each switch module includes an IOMC for managing and configuring the different hardware resources in the system . In one embodiment the respective IOMC for each switch module may be responsible for configuring the hardware resources on the particular switch module. However because the switch modules are interconnected using the switching layer an IOMC on one switch module may manage hardware resources on a different switch module. As discussed above the IOMCs are attached to at least one sub switch or bridge element in each switch module which enables each IOMC to route commands on the switching layer .

The dotted line in chassis defines the midplane between the servers and the switch modules . That is the midplane includes the data paths e.g. conductive wires or traces that transmit data between the network adapters and the sub switches .

Each bridge element connects to the switching layer via the routing layer. In addition a bridge element may also connect to a network adapter or an uplink. As used herein an uplink port of a bridge element provides a service that expands the connectivity or capabilities of the system . As shown in chassis one bridge element includes a connection to an Ethernet or PCI connector . For Ethernet communication the connector may provide the system with access to a LAN or WAN e.g. the Internet . Alternatively the port connector may connect the system to a PCIe expansion slot e.g. PCIe device . The PCIe device may be additional storage or memory which each server may access via the switching layer . Advantageously the system provides access to a switching layer that has network devices that are compatible with at least two different communication methods.

According to one embodiment of the present disclosure each sub switch may be a switch unit having a plurality of logical protocol processing units configured similarly to the switch unit described earlier and verified according to techniques described herein. Each sub switch may be configured to perform a runtime switch over between multiple I O protocols sharing a same physical I O connection. For example the sub switch of the switch module may be connected to one or more PCI connector s and the server with a shared I O connection and use multiple I O protocols e.g. PCIe FLINK with the connected devices. Also in this example the sub switch of the switch module is connected by a sub switch interface to the switching layer which routes data to other sub switches in other switch modules and or in other chassis according to a proprietary protocol for traffic within the distributed network switch.

As shown a server may have a plurality of network adapters . This provides redundancy if one of these adapters fails. Additionally each adapter may be attached via the midplane to a different switch module . As illustrated one adapter of server is communicatively coupled to a bridge element located in switch module while the other adapter is connected to a bridge element in switch module . If one of the switch modules fails the server is still able to access the switching layer via the other switching module. The failed switch module may then be replaced e.g. hot swapped which causes the IOMCs and bridge elements to update the routing tables and lookup tables to include the hardware elements on the new switching module.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments of the present disclosure other and further embodiments of the present disclosure may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

