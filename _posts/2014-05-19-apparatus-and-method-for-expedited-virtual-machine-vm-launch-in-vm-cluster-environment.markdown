---

title: Apparatus and method for expedited virtual machine (VM) launch in VM cluster environment
abstract: Method and apparatus for expedited virtual machine (VM) launch in VM cluster environment. In one embodiment, at least one VM is launched within a host platform. Once initialized, a VM may issue a hypercall to a VM monitor (VMM) of a VM host platform. In response, the VMM may capture a runtime image of the VM. In one embodiment, the VMM loads the runtime image of the VM within a node of the host platform as a child VM. In an alternative embodiment, the VMM issues a VM clone command to a VMM of a next host platform including the runtime image of the VM. In response, the VMM of the next platform loads the runtime image of the first VM within a node of the second host platform as a cloned VM. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170835&OS=09170835&RS=09170835
owner: Intel Corporation
number: 09170835
owner_city: Santa Clara
owner_country: US
publication_date: 20140519
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 11 437 345 filed May 19 2006 which is to issue on May 20 2014 as U.S. Pat. No. 8 732 698 which is a non provisional application claiming priority to International Application No. PCT CN2005 001623 filed Sep. 29 2005 which published as WO 2007 036072 on Apr. 5 2007.

One or more embodiments relate generally to the field of computer system design. More particularly one or more of the embodiments relate to a method and apparatus for expedited virtual machine VM launch in VM cluster environment.

A virtual machine architecture logically partitions a physical machine such that the underlying hardware of the machine is time shared and appears as one or more independently operating virtual machines VMs . A virtual machine monitor VMM creates the VM and runs on a computer to facilitate for other software the abstraction of one or more VMs. Each VM may function as a self contained platform running its own operating system OS and application software. The software running in a VM is collectively referred to herein as guest software. 

The guest software expects to operate as if it were running on a dedicated computer rather than in a VM. That is the guest software expects to control various events and have access to hardware resources on the computer e.g. physical machine . The hardware resources of the physical machine may include one or more processors resources resident on the processors e.g. control registers caches and others memory instructions residing in memory e.g. descriptor tables and other resources e.g. input output devices that reside in the physical machine. The events may include interrupts exceptions platform events e.g. initialization INIT or system management interrupts SMIs and the like.

Hence a VMM presents to other software guest software guests or simply guest the abstraction of one or more VMs. The VMM can provide the same or different abstractions to the various guests. Each guest expects the full facilities of the hardware platform presented in the VM to be available for its use. For example the guest expects to have access to all registers caches structures I O devices memory and the like according to the architecture of the processor and platform presented in the VM. Further each guest expects to handle various events such as exceptions interrupts and platform events e.g. initialization INIT and system management interrupts SMIs .

Some of these resources and events are privileged because they are managed by the VMM to ensure proper operation of VMs and to protect the VMM and other VMs. For the privileged resources and events the VMM facilitates functionality desired by guest software while retaining ultimate control over these resources and events. The act of facilitating the functionality for the guest software may include a wide variety of activities on the part of the VMM. The activities of the VMM as well as its characteristics do not limit the scope of various embodiments described herein.

A method and apparatus for expedited virtual machine VM launch in VM cluster environment are described. In one embodiment the method includes the launch of at least one VM within a host platform. Once initialized a VM may issue a hypercall to a VM monitor VMM of the VM host platform. As described herein the host platform including the VM that issued the hypercall may be referred to herein as the VM host platform. In response to detection of a hypercall issued by the VM in one embodiment the VMM may capture a runtime image of the VM. In one embodiment the VMM may load the runtime image of the VM within at least the VM host platform of a VM cluster environment. In one embodiment the VMM may issue a VM clone command to a VMM of a next host platform including the runtime image of the VM. In response to the VM clone command the VMM of the next host platform may load the runtime image of the VM as a cloned VM. In one embodiment a copy on write technique is used to manage shared memory between a parent VM and a child VM.

In the following description numerous specific details such as logic implementations sizes and names of signals and buses types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding. It will be appreciated however by one skilled in the art that the invention may be practiced without such specific details. In other instances control structures and gate level circuits have not been shown in detail to avoid obscuring the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate logic circuits without undue experimentation.

Accordingly the expedited VM launch of the various VMs within a VM cluster environment provides enhanced availability by reducing the amount of time required for VM launch. However it should be recognized by those skilled in the art that the techniques for expedited VM launch as described herein may be applied to standalone platforms in which multiple VMs may operate as well as chip multiprocessor CMP systems which may support the simultaneous operation of multiple guest operating systems.

Referring again to VM cluster environment may include host platform host platform and host platform which may be referred to as host platform clusters. In the embodiments described VM cluster environment may include any number of host platforms as desired according to the final system configuration. Representatively host platforms and are coupled together via a communications link . In one embodiment the communications link may include but is not limited to gigabit GB Ethernet fiber channel or other like communications link. Representatively host platform clusters are illustrated according to a standalone virtual machine monitor VMM configuration including VMMs and within host platform clusters and respectively of VM cluster environment .

As shown in VM cluster environment is illustrated as a nine node VM cluster environment wherein each platform includes three nodes for loading guest operating systems and . Representatively guest OS are loaded within host platform guest OS are loaded within host platform and guest OS are loaded within host platform . As will be recognized by those skilled in the art the embodiments described for the expedited VM launch are not limited to the nine node VM cluster environment as shown in and may include any number of nodes while remaining within the scope of the described embodiments.

As described herein in one embodiment the configuration of VM cluster environment is based on the following presumptions 1 VMM can be different but at least comply with the same VMM application programming interface API and provide the same hypercall interfaces for the various guest operating systems OS 2 the VM interface for the clustered guest OSs is the same 3 clustered guest OS kernel and software configurations are identical for the guest OS and 4 the VMs in one cluster have the same usage and therefore operate as VM workers in accordance with one embodiment.

In VM cluster environments for example as shown in the creation time for loading the VMs including guest OS and other required applications can vary depending on the cluster size and specifically the number of nodes within the VM cluster environment. Generally the creation time for a VM may include the time required for booting the guest OS initialization of the guest OS and any application launched by the guest OS or other required services. In one embodiment as shown in a VMM hypercall interface of VMMs is modified to support a VM fork hypercall. As described herein a hypercall may refer to a command issued by a VM such as a guest OS to request a host platform service or access a host platform resource.

Referring again to VMM launches guest OS on platform . After the necessary initialization guest OS may issue a VM fork hypercall to the hypercall interface of VMM as indicated by arrow . In response to the VM fork hypercall issued by guest OS VMM may capture a runtime image of guest OS . By using the runtime image of guest OS expedited VM launch of for example guest OS is achieved by minimizing the guest OS creation time specifically the time required for booting of the guest OS initialization of the guest OS and application launch of the guest OS is eliminated.

Referring again to once VMM has captured a runtime VM image of guest OS VMM has the option Option as indicated by arrow of launching a clone VM of guest OS within another platform such as platform or loading a child VM Option as indicated by arrow according to the runtime image of guest OS within a next node of platform . In accordance with Option the launch of a VM on another platform is performed in one embodiment by VMM issuing a VMM API VM clone command to another platform such as platform as shown in and indicated by arrow .

In one embodiment the VM clone command issued to host platform includes the runtime image of guest OS from host platform . Accordingly in response to detection of a VM clone command issued by another platform platform will launch a VM clone such as guest OS according to the runtime VM image of guest OS . As described herein VM clone may refer to a VM that is created according to a runtime image of a VM loaded within a different host platform cluster.

In one embodiment the expedited launch of a VM child within a node of host platform see arrow labeled may result in the sharing of memory between the parent VM and the child VM . In other words because child VM is loaded with the runtime image of parent VM parent VM and child VM share the same VMM configuration the same VM definition the same kernel definition the same software configuration and the same runtime configuration. As a result parent VM and child VM share memory as parent child processes do. In one embodiment the VM fork hypercall process is supplemented by a copy on write technique for example as illustrated in .

In one embodiment pages may be shared between a parent VM and a child VM . In one embodiment a read write R W attribute in each page table for x86 environment or a R W attribute in TLB for Itanium platform may be used to protect shared pages as manufactured by the Intel Corporation. However implementation details for the sharing of page tables between parent and child processes will vary depending on the central processing unit CPU architecture selected for the VM cluster environment . Hence other architecture attributes may be employed to facilitate the copy on write technique.

Representatively the host VMM model includes VMM which runs on top of host operating system OS . In a further embodiment one or more of the host platforms of VM cluster environment as shown in may be configured according to a hybrid VMM model as shown in . Representatively hybrid VMM model is comprised of service OS and micro hypervisor basic VMM including optimized API . According to the hybrid VMM model micro hypervisor may be responsible for CPU memory resource virtualization and domain scheduling. Service OS may be responsible for VM management and device virtualization simulation. In accordance with the embodiments illustrated in expedited VM launch according to a VM hypercall may be performed according to any of the host platform configuration shown in or other like configurations to reduce or minimize the creation time of a VM process by eliminating the OS launch process and application initialization.

Pseudo code for implementing the VM fork hypercall is shown in Table 1. Table 2 illustrates pseudo code for the VMM API VM clone command As indicated by the pseudo code for implementing the VM hypercall as shown in TABLE 1 the VM fork hypercall directs the VMM to capture the runtime image of the calling VM. As illustrated by the pseudo code for the VMM API VM clone command the creation of the VM clone may require preparation of a device model state a CPU state and a bootstrapping of memory which are stored within a state capsule. From such state capsule a new VM may be created and entered into a run queue for loading the cloned VM. Procedural flowcharts for implementing methods for expedited VM launch within a VM cluster environment are now described.

Turning now to the particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to a flowchart. The methods to be performed by a computing device e.g. a VMM may constitute state machines or computer programs made up of computer executable instructions. The computer executable instructions may be written in a computer program and programming language or embodied in firmware logic. If written in a programming language conforming to a recognized standard such instructions can be executed in a variety of hardware platforms and for interface to a variety of operating systems.

In addition embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement embodiments of the invention as described herein. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application etc. as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.

Referring again to at process block at least one virtual machine VM is launched within a host platform by for example a VM monitor VMM of a host platform for example as shown in . Once initialized a VM may issue a hypercall to a virtual machine monitor VMM of a VM host platform. As described herein the host platform including the VM that issued the hypercall may be referred to herein as the VM host platform. In one embodiment the hypercall is a VM fork hypercall. In response to detection of for example a VM fork hypercall the VMM of the VM host platform may capture a runtime image of the VM according to the hypercall issued by the VM.

Once the VMM of the VM host platform has captured the runtime image of the VM in one embodiment the VMM decides whether to launch the VM within the VM host platform or a next host platform of a VM cluster environment. Accordingly at process block it is determined whether the VMM selects the VM host platform to load the runtime image of the VM as a child VM. When the VM host platform is selected at process block the VMM loads the runtime image of the VM within a node of the VM host platform as a child VM with the VM that issued the VM fork hypercall as a parent VM of the child VM. Otherwise at process block the VMM of the first host platform may issue a call to a VMM of a next host platform of the cluster environment.

In one embodiment the call is a VMM application program interface API VM clone command. Accordingly in response to issuance or receipt of a VM clone command a next platform or other platform within the VM cluster environment for example as shown in will load the runtime image received with the VM clone command within the next host platform.

As will be recognized as described herein the term expedited VM launch refers to the ability to load a VM such as for example a guest operating system OS or creation of such guest OS with the creation time of the guest OS minimized since the OS launch process and application initialization process can be avoided. In one embodiment when the VMM loads the runtime image as a child VM on the same platform the expedited VM launch process can be further shortened by a copy on write technique for example as shown in .

Conversely for hybrid VMM model as shown in at process block an in hypervisor state and an in device model state of the first VM are synchronized to form a synchronized state. Once synchronized at process block the synchronized state is sealed into a packet to form the runtime image of the first VM which may be either loaded within a node of the current host platform or provided with a VM clone command to a selected next host platform cluster.

In one embodiment copy on write does not require the parent process VM to claim additional physical memory in response to the VM fork hypercall because the parent has already mapped the needed memory. In one embodiment child process VM shares physical memory with his parent by mapping to the same piece of physical memory. As a result physical memory allocation is not required. In one embodiment the system establishes the virtual address to physical mapping for the child VM in response to the VM fork hypercall.

As shown in firmware includes three major components extensible firmware interface EFI to provide guest OS software access to the firmware components. Representatively the firmware components include system abstraction layer SAL and processor abstraction layer PAL . As described herein EFI SAL and PAL are collectively referred to herein as host firmware. In one embodiment host guest OS interacts with host firmware specifically PAL and SAL via EFI interface to provide an environment in which applications can be executed by the CPU. SAL is a firmware layer that isolates an operating system and other higher level software from implementation differences in the platform. PAL provides a consistent software interface to access the processor resources across different processor implementations and encapsulates all processor model specific hardware.

Representatively computer system may be for example a personal computer system. Computer system may include one or more processors e.g. processor a memory controller an input output I O controller and one or more BIOS basic input output system memories e.g. BIOS memory . In one embodiment processor memory controller I O controller and BIOS memory may reside on a chipset . As described herein the term chipset is used in a manner well known to those of ordinary skill in the art to describe collectively the various devices coupled to the processor to perform desired system functionality. In an alternative embodiment one or more of processor memory controller I O controller and BIOS memory may reside on other types of component boards for example a daughter board.

The memory controller controls operations between processor and a memory device for example memory modules comprised of random access memory RAM dynamic RAM DRAM static RAM SRAM synchronous DRAM SDRAM double data rate DDR SDRAM DDR SDRAM Rambus DRAM RDRAM or any device capable of supporting high speed storage of data. The I O controller may control operations between processor and one or more input output I O devices for examples a keyboard and a mouse over a low pin count LPC bus . The I O controller may also control operations between processor and peripheral devices for example a drive coupled to I O controller via an integrated drive electronics IDE interface . Additional buses may also be coupled to I O controller for controlling other devices for examples a peripheral component interconnect PCI bus or follow on bus e.g. PCIx PCI Express and a universal serial bus USB . In one embodiment the memory controller may be integrated into processor or integrated with I O controller into a single component.

In the embodiment illustrated a driver controller may be coupled to PCI bus and may control operations of hard disk drive . In one embodiment guest firmware including guest EFI guest SAL guest PAL guest OS and VMM may be stored on the hard disk drive . In this manner the hard disk drive may serve as the boot up device including for example a loader program to load the various host components as well as the VMM to load a VM as well as the various guest components including guest firmware and one or more guest OS within the VMM .

BIOS memory may be coupled to I O controller via bus . BIOS memory is a non volatile programmable memory for example a flash memory that retains the contents of data stored within it even after power is no longer supplied. Alternatively BIOS memory may be other types of programmable memory devices for examples a programmable read only memory PROM and an erasable programmable read only memory EPROM . Computer system may also include other BIOS memories in addition to BIOS memory .

Accordingly as shown in BIOS memory may include host platform firmware for initializing the computer system following system reset. As described herein the host firmware includes EFI SAL and PAL . Accordingly as described herein the guest firmware is loaded during boot up of computer system to provide a host platform. Following the boot up the host platform will load VMM which is responsible for loading the guest firmware one or more guest OS and other like components from hard disk .

Representatively CPUs access shared memory via interconnection network . In one embodiment shared memory may include but is not limited to a double sided memory package including memory modules comprised of random access memory RAM dynamic RAM DRAM static RAM SRAM synchronous DRAM SDRAM double data rate DDR SDRAM DDR SDRAM Rambus DRAM RDRAM or any device capable of supporting high speed storage of data.

Accordingly in the embodiments described the expedited VM launch process enables the loading of a child VM or clone VM within a respective node of the VM cluster environment for example as shown in which may include host platforms such as computer system CMP or other like computer architecture. This technique is referred to as an expedited VM launch since the use of the VM fork hypercall and new VM API management VM clone command minimize the guest OS creation time of the respective VM by eliminating the time required to boot the guest OS initialization of the guest OS and application launch required by the guest OS by the introduction of the VM fork hypercall as described herein.

Accordingly by utilizing the VM fork hypercall command and VM clone command an expedited VM launch process is provided as compared to a conventional VM launch since the OS launch process required for creation of a guest OS and application initialization process as well as the application load process can be avoided. Furthermore in the embodiments described if a child VM is loaded on the same platform the process can be further expedited by providing a copy on write technique for example as shown in according to the embodiments described. Accordingly by using the expedited VM launch process enhanced high availability of a VM cluster environment such a VM cluster environment shown in is provided with increased availability because the amount of time in which the VMs are unavailable is reduced.

Elements of embodiments of the present invention may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium may include but is not limited to flash memory optical disks compact disks read only memory CD ROM digital versatile video disks DVD ROM random access memory RAM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM magnetic or optical cards propagation media or other type of machine readable media suitable for storing electronic instructions. For example embodiments described may be downloaded as a computer program which may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection .

It should be appreciated that reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore it is emphasized and should be appreciated that two or more references to an embodiment or one embodiment or an alternative embodiment in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined as suitable in one or more embodiments of the invention.

In the above detailed description of various embodiments of the invention reference is made to the accompanying drawings which form a part hereof and in which are shown by way of illustration and not of limitation specific embodiments in which the invention may be practiced. In the drawings like numerals describe substantially similar components throughout the several views. The embodiments illustrated are described in sufficient detail to enable those skilled in to the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The following detailed description therefore is not to be taken in a limiting sense and the scope of various embodiments of the invention is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Having disclosed embodiments and the best mode modifications and variations may be made to the disclosed embodiments while remaining within the scope of the embodiments as defined by the following claims.

