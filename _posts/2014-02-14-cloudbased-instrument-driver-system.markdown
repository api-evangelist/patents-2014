---

title: Cloud-based instrument driver system
abstract: A cloud-based instrument driver system enables a user device to interact with one or more instruments through a remotely located driver cloud. The driver cloud may store drivers and ancillary software. The user device may be connected to each instrument either directly or indirectly, for example, over one or more computer networks, and may be connected to and communicate directly with the driver cloud over the computer network. However, the driver cloud and the instrument may not be in direct communication. The user device relays commands and responses to and from the instrument to the driver cloud for translation into a format suitable for processing by the user device. Utilization of the driver cloud obviates the need to obtain, install and maintain any drivers and/or ancillary software on the user device in order to enable the device to interact with the instrument.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348771&OS=09348771&RS=09348771
owner: The MathWorks, Inc.
number: 09348771
owner_city: Natick
owner_country: US
publication_date: 20140214
---
This application is a continuation of application Ser. No. 13 434 050 filed Mar. 29 2012 for a CLOUD BASED INSTRUMENT DRIVER SYSTEM by Ankit Desai et al. now U.S. Pat. No. 8 726 298 which application is hereby incorporated by reference in its entirety.

Users such as scientists engineers technicians and students often employ user devices such as laptop or desktop computers to interact with and control operation of laboratory and other programmable instruments such as oscilloscopes signal spectrum analyzers digital multimeters and or function generators. The user device may execute a high level software user application such as a data acquisition or test and measurement application to acquire data from one or more instruments coupled to the user device and store that acquired data on the user device or present the data on a display screen of the device. Each instrument may be coupled to the user device through an interface such as a Universal Serial Bus USB or serial port an Ethernet card or a General Purpose Interface Bus GPIB card.

In order to interact with the instrument a set of software routines known as a driver may be loaded or installed on the user device. The driver translates high level user commands such as e.g. initialize trigger write and or read that generally do not conform to a command protocol or syntax supported by the instrument from the user application into a format understandable by the instrument based on a command protocol or syntax supported by the instrument. The driver may also translate responses from the instrument into a format understandable by the application.

Often there may be a number of different drivers available for use with an instrument. In addition instrument manufacturers may periodically update the drivers for their instruments. Currently the user must determine and obtain an appropriate driver to install for an instrument as well as obtain and install any updates to that driver. Furthermore many drivers may be dependent upon ancillary software including e.g. shared software components and or interconnect layers such as the Virtual Instrument Software Architecture VISA for proper interaction with the instrument. Accordingly the user must also obtain and install appropriate versions of the ancillary software and maintain them i.e. keep them up to date. Installing software typically requires administrator access to the user device which the user may not have. The need to identify obtain install and maintain an appropriate driver as well as identify obtain install and maintain any necessary ancillary software is a significant burden to many instrument users.

In an embodiment a cloud based instrument driver system enables a user device to interact with one or more instruments through a driver cloud remotely located from the user device and instruments. The driver cloud may include one or more computer nodes located on a computer network that stores drivers from different vendors and for different instruments and ancillary software such as shared software components and interconnect layers for use by a user s and one or more user devices. The user device may be connected to each instrument either directly or indirectly for example over one or more wired or wireless computer networks. In addition the user device may be connected to and communicate directly with the driver cloud over the computer network. However the driver cloud and the instrument are not required to be in direct communication. The user device thus relays commands and responses to and from the instrument to the driver cloud for translation into a format suitable for processing by the user device. Utilization of the driver cloud obviates the need to obtain install and maintain any drivers and or ancillary software on the user device in order to enable the device to interact with the instrument.

Illustratively each computer node of the driver cloud may execute software processes and or modules embodied as one or more servers configured to store select and invoke the drivers and ancillary software needed for the user device to interact with the instruments. To that end the modules of the driver cloud may be embodied as a translation engine and a driver selection unit. The user device may be a computer node executing software processes and or modules embodied as a driver cloud agent and a user application such as a data acquisition application or a test and measurement application. In another embodiment the software processes and or modules of the user device may be embodied as a browser based software application executing on a remote server.

To interact with an instrument e.g. to acquire data or control the instrument the user application may issue a user instruction or command that includes identification information specifying an identity of the instrument such as manufacturer model and or a Virtual Instrument Software Architecture VISA Instrument Descriptor ID . The VISA specification is maintained by the IVI Foundation and the current release is version 4.3 which is hereby incorporated by reference in its entirety. The driver cloud agent of the user device may intercept receive the command and forward it to the driver cloud within a first instrument based request. The driver selection unit of the driver cloud analyzes the user command of the request to select an appropriate driver that enables the user device to interact with the instrument. For example the driver selection unit may use the identification information of the command to access a data structure such as a look up table to select the appropriate driver for interacting with the instrument. The driver selection unit may also utilize the data structure to determine and select the appropriate ancillary software if any that may be required for proper interaction with the instrument.

The driver selection unit may then provide the user command along with an indication of the selected driver and ancillary software to the translation engine. The translation engine invokes i.e. calls upon the selected driver and ancillary software to translate the user command of the instrument based request into an instrument instruction or command having a format suitable for processing by the instrument. The translation engine may then forward the instrument command to the user device within a first cloud based response. The driver cloud agent of the user device may intercept the instrument command of the response and forward it to the instrument which executes the command.

Subsequently the instrument may return a response to the user device. For example if the command forwarded to the instrument is a request to read data the instrument may return the requested read data in its response. The response from the instrument may be intercepted by the driver cloud agent and forwarded to the driver cloud as a second instrument based request. The driver selection unit may examine the instrument response and determine that the previously selected driver and ancillary software may be used to process the response. As a result the driver selection unit provides the response to the translation engine which invokes the driver and ancillary software to translate the instrument response into a user response having a format suitable for processing by the user application. The user response may then be forwarded to the user device within a second cloud based response. The driver cloud agent of the user device may intercept the user response and pass the response to the user application for processing.

In an alternative embodiment a circuit switching network such as the Integrated Services Digital Network ISDN or other type of computer networking technology may be employed. For example a network utilizing the Peripheral Component Interconnect Express PCIe expansion bus architecture could also be utilized.

As described herein the driver cloud may be configured to store drivers from different vendors and for different instruments and ancillary software such as shared software components and interconnect layers for use by the user device when interacting with one or more instruments . The term instrument is intended to be construed broadly and to include test and measurement devices such as oscilloscopes signal spectrum analyzers digital multimeters and or function generators among others data acquisition generation and recorder devices cameras protocol interfaces such as Controller Area Network CAN protocol interface cards Serial Peripheral Interface SPI interface cards Inter Integrated Circuit IC interface cards etc. The user device which may be under the operation of a user such as a test engineer or scientist or may be operating programmatically may be connected to each instrument either directly or indirectly for example over a bus or over the computer network . In addition the user device may be connected to and communicate directly with the driver cloud over the computer network . However the driver cloud and the instrument may not be in direct communication. In this case the user device relays commands from the driver cloud to the instrument . Utilization of the driver cloud obviates the need to obtain install and maintain any drivers and or ancillary software on the user device in order to enable the device to interact with the instrument .

Suitable bus architectures for the bus include the General Purpose Interface Bus GPIB Peripheral Component Interconnect PCI Universal Serial Bus USB VME eXtension for Instrumentation VXI LAN eXtension for Instrumentation LXI Ethernet and Infiniband. In addition a wireless protocol such as one or more of the IEEE 802.11 family of wireless protocols may be used as a communication architecture.

The memory may include a plurality of locations that are addressable by processing element user I O and or network interface for storing software programs and data structures associated with the embodiments described herein. The processing element may include logic adapted to execute the software programs and manipulate the data structures. Exemplary processing elements include single or multi core Central Processing Units CPUs Graphics Processing Units GPUs Field Programmable Gate Arrays FPGAs and or Application Specific Integrated Circuits ASICs .

An operating system portions of which are typically resident in memory and executed by the processing element functionally organizes the node by inter alia invoking operations in support of software processes and or applications executing on the node. The operating system is illustratively organized as a series of software layers including among others a network media access layer and network protocol layers e.g. an IP layer and its supporting transport mechanism TCP layer organized as a network protocol stack . A suitable operating system may include the Windows series of operating systems from Microsoft Corp. of Redmond Wash. the Linux operating system the MAC OS series of operating systems from Apple Inc. of Cupertino Calif. and the UNIX series of operating system among others. The software processes applications executing on the node may include various processes applications of a cloud based instrument driver system described herein.

It will be apparent to those skilled in the art that other types of processing elements and memory including various computer readable media may be used to store and execute program instructions pertaining to the system described herein. Also while the embodiments herein are described in terms of software processes applications stored in memory alternative embodiments also include those processes applications being embodied as modules consisting of hardware software firmware or combinations thereof.

As noted the cloud based instrument driver system enables the user device to interact with one or more instruments through the driver cloud remotely located from the user device and instruments. The driver cloud may be remotely located relative to the user device in a geospatial or physical e.g. hardware based sense. For example a user device and instrument may be located in a lab while the driver cloud may be located in or distributed among another room another building or another city. In other words the driver cloud may include e.g. be running on one or more nodes e.g. hardware platforms such as one or more servers located in one or more data centers while the user device may include e.g. be running on a different hardware platform such as a laptop or other data processing device. In another embodiment the driver cloud may be remotely located relative to the user device in a logical sense. For example the driver cloud and user device may include e.g. operate in different virtual machines VMs that are nonetheless hosted on the same node s . Each virtual machine may have its own instance of an operating system.

In an embodiment the modules of the cloud based instrument system may be implemented as separately scheduled processes within each of the user device and driver cloud however in an alternate embodiment the modules may be implemented as pieces of code within a single process. Communication between modules of the user device and between modules of the driver cloud may thus illustratively be effected through the use of message passing or shared memory between the modules. Suitable message passing or shared memory mechanisms provided by the operating system to transfer information between modules processes are the Inter Process Communication IPC mechanism and the Remote Procedure Call RPC mechanism.

User application contains computer executable instructions executed by processor of computer node to e.g. acquire data and or perform test and measurement functions. In an embodiment a suitable user application may include the MATLAB and Simulink technical computing applications from The MathWorks Inc. of Natick Mass. the Stateflow charting application and the Instrument Control Toolbox from The MathWorks Inc. the LabVIEW programming application from National Instruments Corp. of Austin Tex. the Visual Engineering Environment VEE application from Agilent Technologies Inc. of Santa Clara Calif. a Unified Modeling Language UML system a Systems Modeling Language SysML system the System Generator System from Xilinx Inc. of San Jose Calif. and the graphical modeling system described in U.S. Pat. No. 7 324 931 for Conversion of Model Components Into References which is hereby incorporated by reference in its entirety. Those skilled in the art will understand that the MATLAB technical computing application is a math oriented textual programming environment for digital signal processing DSP design among other uses. The Simulink technical computing application is a graphical block based environment for modeling and simulating dynamic systems among other uses. A model may be a time based block diagram model that inherits data types sample times and data dimensions. The model may have dynamic typing execution order inferencing and may for example through the MATLAB platform support array based analysis operations. Other modeling environments such as the LabVIEW modeling system may support dataflow based models.

Driver cloud agent contains computer executable instructions executed by processor of computer node to perform functions configured to intercept commands and responses exchanged among the user device driver cloud and instrument and forward those commands and responses to the appropriate module s for processing. Driver selection unit contains computer executable instructions executed by the processor of computer node to perform functions configured to analyze the commands and responses exchanged among the user device driver cloud and instrument and select appropriate drivers and ancillary software that enable the user device to interact with the instrument . Translation engine contains computer executable instructions executed by processor of computer node to perform functions configured to invoke the selected drivers and ancillary software to translate the commands and responses exchanged among the user device driver cloud and instrument into respective commands and responses having formats suitable for processing by the instrument and user application .

To interact with an instrument e.g. to acquire data or control the instrument the user application executing on the user device may evaluate a high level generic user instruction or command string that generally does not conform to a command syntax supported by the instrument i.e. a command that does not conform to the instrument protocol . In an embodiment the command string can include identification information specifying an identity of the instrument such as manufacturer model and or a Virtual Instrumentation Software Architecture VISA Instrument Descriptor ID . The driver cloud agent may intercept capture the command string and forward it to network protocol stack of the user device which encapsulates the user command string within a first instrument based IB request .

The high level generic user instruction or command string may be created or generated by the user device in response to user input or programmatically. For example a user may enter an instruction or command at a Human Machine Interface HMI such as a Graphical User Interface GUI and or a Command Line Interface CLI which may be provided by the user application . In addition the instruction or command string may be generated in response to textual graphical or a combination of textual and graphical inputs. For example the user may enter for example with the keyboard a textual string that conforms to the syntax of the user application . In another embodiment the user may construct a graphical program having a plurality of graphical objects such as icons or blocks. One or more icons or blocks may generate the user instruction or command string for example during execution of the graphical model.

In an embodiment the user device may be configured to communicate with the driver cloud in accordance with a request response protocol that enables the user device to connect i.e. via a connection with the driver cloud to utilize the drivers ancillary software needed to interact with instrument . The protocol stacks may then cooperate to establish the connection between the user device and the driver cloud and enable transmission of the IB request to the driver cloud over the connection. Illustratively the connection is provided by a process of a transport layer such as the TCP layer of protocol stacks executing on the user device and driver cloud . The TCP layer processes establish the connection in accordance with a conventional 3 way handshake arrangement involving the exchange of TCP message or segment data structures. The resulting connection is a reliable securable logical circuit that is generally identified by port numbers and IP addresses of the user device and driver cloud.

Upon receiving the IB request protocol stack of the driver cloud recovers and passes the command string from the request to one or more of the driver selection unit and translation engine . Illustratively the driver selection unit and translation engine may include software layers configured as VISA and Interchangeable Virtual Instrument IVI modules. Broadly stated the VISA module provides a middleware interface supported by the IVI architecture to enable bus and platform independent instrument communication through an application programming interface API that allows the user application to issue generic commands over an interconnect to the instrument. That is the IVI architecture may be embodied as an IVI module configured to provide an implementation of the driver needed to interact with the instrument and thus translate the generic command to a command that conforms to the instrument protocol. The VISA module may then provide an implementation of the transport protocol needed to deliver that command to the instrument over an interconnect such as computer network or bus . To that end the VISA API provides a defined VISA ID string that indicates an interconnect type such as USB GPIB or Ethernet i.e. TCP IP an address logical or primary of the instrument and a VISA session type such as INSTR . Examples of VISA ID string formats that may be used to identify and access instruments include 

The first string specifies an interconnect type of TCP IP an IP address of 192.168.1.1 and a session type or VISA class of instr which is the most general class encompassing all VISA operations. The zero appearing in the interconnect type is used to distinguish among multiple TCP IP sessions.

The second string specifies a GPIB interconnect type a GPIB address of 23 and a session type or VISA of instr . Again the zero appearing in the interconnect type is used to distinguish among multiple GPIB devices.

In an embodiment the driver selection unit analyzes and parses the user command including the VISA ID string to select an appropriate driver e.g. the IVI driver that enables the user device to interact with the instrument . For example the driver selection unit may use the identification information of the command string to access a data structure such as a look up table to select the appropriate driver for interacting with the instrument. The driver selection unit may also utilize the look up table to determine and select the appropriate ancillary software e.g. the VISA module that may be required for proper interaction with the instrument. The driver cloud may include a driver store e.g. configured as designated locations of memory and or data storage for storing the plurality of drivers and ancillary software for selection by the driver selection unit .

A suitable driver selection strategy is described in U.S. Pat. No. 7 966 622 for Interfacing a Device Driver with an Application Using a Virtual Driver Interface and a Strategy which is hereby incorporated by reference in its entirety.

The driver selection unit may then provide the user command along with an indication of the selected driver and ancillary software to the translation engine . The translation engine invokes i.e. calls upon the selected driver and ancillary software to translate the user command of the IB request into an instrument instruction or command having a format suitable for delivery to and processing by the instrument i.e. a low level command suitable for direct execution by the instrument that conforms to the command syntax transport protocol and instrument protocol of the instrument . The translation engine may then pass the instrument command to the driver cloud protocol stack which encapsulates the command within a first cloud based CL response and transmits the response to the user device over the established connection . The user device protocol stack may receive and recover the instrument command from the CL response . The driver cloud agent may intercept the instrument command and forward it to the instrument which executes processes the command.

Subsequently the instrument may return an instrument response to the user device . For example if the command forwarded to the instrument is a request to read data the instrument may return the requested read data in its response. The response from the instrument may be intercepted by the driver cloud agent and passed to the protocol stack which encapsulates the instrument response data within a second instrument based IB request . The protocol stack may then transmit the IB request to the driver cloud over the established connection . Thereafter the protocol stack of the driver cloud receives the IB request and recovers and passes the instrument response to the driver selection unit . The driver selection unit may examine the instrument response and determine that the previously selected driver and ancillary software may be used to process the response. As a result the driver selection unit provides the instrument response to the translation engine which invokes the driver and ancillary software to translate the response into a user response having a format suitable for processing by the user application . The user response may then be encapsulated into a second cloud based CL response and transmitted to the user device over the connection . The protocol stack of the user device may receive and recover the user response from the CL response . The driver cloud agent may intercept the user response and pass it to the user application for processing.

In an embodiment the driver cloud may store state information for a particular session with an instrument and or a user device . The state information may be stored at a cache located at the driver cloud . This state information may include instrument state information such as the setting of one or more instrument values. Maintaining state information may improve system performance by eliminating one or more redundant messages such as messages that reset an instrument that has already been set. The state information may be deleted from the cache following the session with the instrument and or the user device .

In an embodiment the driver cloud may communicate directly with the instrument . For example if the instrument is directly connected to the driver cloud or is located in the same subnet as the driver cloud the translation engine may pass the translated command to the driver cloud protocol stack which encapsulates the command within the CL response and establishes a connection e.g. a TCP connection with the instrument . The protocol stack then transmits the response directly to the instrument rather than to the user device .

The user application engine may have similar functionality as user application but unlike user application the user application engine may not include a front end e.g. a Human Machine Interface HMI .

The browser application is illustratively a browser based remote access application that enables a user of user device to issue requests to user application engine on the driver cloud . The browser application may be configured to communicate with the user application engine in accordance with a protocol e.g. HTTP that enables the user device to connect i.e. via a connection with the driver cloud to utilize the driver and ancillary software needed to interact with instrument . Protocol stacks may cooperate to establish the connection with the driver cloud and enable transmission of request to the driver cloud over the connection. Illustratively the connection is an HTTP S connection provided by a process of an HTTP layer of protocol stacks executing on the user device and driver cloud .

Operationally the user of the browser application may input I O e.g. keyboard activity such as user commands which are forwarded to the user application engine as request . The user application engine may then implement those commands on the driver cloud . For example the user application engine may issue the user commands to the driver selection unit and translation engine . Illustratively the driver selection unit and translation engine may include software layers configured as VISA and IVI modules. The IVI module may be configured to provide an implementation of the driver needed to interact with the instrument and thus translate a generic user command to a command that conforms to the instrument protocol. However in addition to providing an implementation of the transport protocol needed to deliver the instrument command to the instrument over an interconnect such as computer network or bus the VISA module may be further configured to redirect the translated instrument command having a format suitable for delivery to and processing by the instrument i.e. a command that conforms to the transport protocol and instrument protocol of the instrument to the user device.

Accordingly the instrument command is redirected to the driver cloud protocol stack which encapsulates the command within a CL response and transmits the response to the user device over a connection e.g. a TCP connection. The user device protocol stack may receive and recover the instrument command from the CL response . The driver cloud agent may intercept the instrument command and forward it to the instrument which executes processes the command. Subsequently the instrument may return an instrument response to the user device which is intercepted by the driver cloud agent and passed to the protocol stack for encapsulation within an IB request . The protocol stack may then transmit the IB request to the protocol stack of driver cloud over the established connection . The instrument response is then passed to the driver selection unit which may determine that the previously selected driver and ancillary software may be used to process the response. As a result the driver selection unit provides the instrument response to the translation engine which invokes the driver and ancillary software to translate the response into a user response having a format suitable for processing by the user application engine . The user response is then passed to user application engine for processing. The result of the processing is forwarded to protocol stack for transmission as response to the browser application of user device over connection . The browser application may thereafter output the response via e.g. display screen for viewing by the user.

Suitable browsers include the Internet Explorer browser from Microsoft Corp. the Firefox browser from the Mozilla Foundation and the Chrome browser from Google Inc. among others. Suitable remote communication systems include the Remote Desktop Connection tool from Microsoft Corp. among others. Suitable user application engines include the MATLAB on the Web product from The MathWorks Inc.

It should be understood that other configurations and arrangements may be used. For example instead of the browser a client side application may communication e.g. through TCP IP and or web services to the user application engine . In another example different instances of the same application or module such as the MATLAB on the Web product may be running on the user device and on the driver cloud and may communicate with each other.

The cloud based instrument driver system described herein obviates the need for a user to obtain and install any drivers and or ancillary software on user device in order to enable the device to interact with instrument . In an embodiment the user device may be free of storing or having any instrument drivers or ancillary software stored thereon. Although previous systems may enable downloading of a driver from a driver server to a user device over e.g. a computer network the downloaded driver must still be installed and maintained kept up to date locally on the user device. Utilization of driver cloud of the cloud based instrument driver system to store select and invoke the drivers and ancillary software needed for the user device to interact with instrument eliminates the burden on the user to identify obtain install and maintain appropriate drivers and ancillary software on the user device.

The driver cloud may include an update unit that is programmed to periodically for example according to a predefined schedule determine whether any updates have been released for the drivers ancillary software stored at the driver cloud . The update unit may access one or more instrument manufacturer websites to obtain the updates.

In an embodiment the user application may query the driver cloud to obtain a list of instruments that are available to the user device . In response to such a query the driver cloud may issue a discovery request to identify all instruments connected to the subnet. The driver cloud may provide this list to the user application and the user application may then interact with a selected instrument.

The LXI standard which is promulgated by the LXI Consortium for example defines a mechanism for discovering LXI compliant instruments on a LAN or subnet. The driver cloud may direct the driver cloud agent at the user device to run an instrument discovery query per the LXI standard. The results of this query may be provided to the driver cloud which may translate the results into a format suitable for the user application . The driver cloud may send the translated results to the user device for review by the user application .

In another embodiment the driver cloud agent may intercept a query to discover available instruments issued by the user application and send the query to the driver cloud . The driver cloud may convert the query to be LXI compliant and return it to the user device and the driver cloud agent or user application may broadcast or multicast the LXI compliant discovery message on one or more LANs or subnets to which the user device is connected. Responses to the LXI compliant discovery message may be captured by the driver cloud agent and sent to the driver cloud . The driver cloud may convert the responses into a format recognizable by the user application and may send the converted responses to the user device . The driver cloud agent may receive the converted responses and pass them to the user application thereby notifying the user application of one or more available instruments.

Other auto discovery techniques may also be supported by the driver cloud agent and the driver cloud . Other such techniques include PXI enumeration based on PCI or PCIe USB device discovery GPIB device enumeration and VXI 11 discovery protocols.

At block driver selection unit may then provide the user command along with an indication of the selected driver and ancillary software to translation engine . At block translation engine may invoke the selected driver and ancillary software to translate the user command of the instrument based request into an instrument command having a format suitable for processing by the instrument. At block translation engine may then forward the instrument command to the user device within a first cloud based response. At block driver cloud agent of the user device may intercept the instrument command of the response and at block forward the command to the instrument for processing.

At block the instrument may return an instrument response to the user device . At block the response from the instrument may be intercepted by the driver cloud agent and at block forwarded to the driver cloud as a second instrument based request. At block the driver selection unit of the driver cloud may analyze the instrument response to determine that the previously selected driver and ancillary software may be used to process the response. At block driver selection unit provides the instrument response and selected driver and ancillary software to translation engine which at block invokes the driver and ancillary software to translate the instrument response into a user response having a format suitable for processing by the user application. At block the user response may then be forwarded to the user device within a second cloud based response. At block driver cloud agent of the user device may intercept the user response and at block pass the user response to the user application for processing. The procedure then ends at block .

As an example suppose a user wants to obtain waveform data from an oscilloscope. is a schematic illustration of a message diagram that illustrates exemplary messaging that may be involved in such a request. The message diagram includes the instrument the user device and the driver cloud . A user operating the user application at the user device may enter a command string in a format compatible with the user application . For example the user may enter the following command string 

According to the syntax and semantics of the user application an output variable name e.g. data may be specified on the left of the equal sign for holding output data generated during execution of a function specified on the right of the equal sign i.e. scope.getWaveform . The first portion of the function i.e. scope may specify the particular instrument e.g. an oscilloscope. The second portion of the function i.e. getWaveform may specify the operation to be performed by the instrument e.g. obtain waveform data. The driver cloud agent at the user device may intercept this command string and forward it to the network protocol stack which may encapsulate the command string within one or more messages of a first instrument based IB request as illustrated by first arrow . At the driver cloud the translation engine may invoke the selected driver and ancillary software to translate the user command of the IB request arrow into an instrument instruction or command having a format suitable for delivery to and processing by the instrument i.e. the oscilloscope. An exemplary translated instruction or command may be the following 

The translation engine may then pass this instrument command to the driver cloud protocol stack which may encapsulate the command within one or more messages of a first cloud based CL response and transmits the one or more messages to the user device as indicated by second arrow . The driver cloud agent at the user device may intercept the instrument command and forward it to the instrument as indicated by third arrow . The instrument may execute the command generating response data. The response data may be in a format specified by the instrument but understandable by the instrument driver. The following represents exemplary response data generated by the instrument 

The instrument may return this response data to the user device as indicated by fourth arrow . The response from the instrument which is not understandable by the user application may be intercepted by the driver cloud agent at the user device which may encapsulate the response in one or more messages and transmit the one or more messages as a second instrument based IB request to the driver cloud as indicated by fifth arrow . The driver selection unit at the driver cloud may examine the instrument response and determine that the previously selected driver and ancillary software may be used to process the response. The driver selection unit may provide the instrument response to the translation engine at the driver cloud which may invoke the driver and ancillary software to translate the response into a user response having a format suitable for processing by the user application . An exemplary format of the response as translated for the user application may be the following 

According to the syntax and semantics of the user application the first portion of the response i.e. 1 2 3 4 5 6 7 8 9 10 may specify the data generated by the instrument The second portion i.e. dataType may specify a category of an attribute of the data. The third portion i.e. double may specify a value for that attribute. In this case the attribute is data type and the value is double precision. The user response may then be encapsulated into one or more messages of a second cloud based CL response and transmitted to the user device as indicated by sixth arrow . The driver cloud agent at the user device may intercept the response and pass it to the user application for processing. For example the user application may present the data contained in the response on a display such as display that is connected to or part of of the user device .

It should be understood that the command strings instructions and data formats described herein are meant for illustrative purposes only and that many other formats or command syntaxes may be used. Furthermore the user command alternatively may be entered programmatically.

In addition in another embodiment the translated command CL may be sent directly to the instrument from the driver cloud and the response data generated by the instrument arrow may be sent directly to the driver cloud among other arrangements.

While there have been shown and described illustrative embodiments that enable a user device to interact with one or more instruments through a driver cloud remotely located from the user device and instruments in accordance with a cloud based instrument driver system it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the embodiments herein. For example the embodiments have been shown and described herein with relation to e.g. generic commands requests exchanged among the user device driver cloud and instruments that are predefined for each instrument . However the embodiments in their broader sense are not so limited and may in fact be used with vendor specific commands requests that vendors can define which are unique to their instruments and which may enable unique functions to be performed on their instruments . The cloud based instrument driver system described herein may thus be extended to allow the user device i.e. a user or user application to request an inventory of all commands requests both generic and vendor specific for an instrument. In response to such an inventory request the driver cloud may return a response indicating a particular format with which to use to issue such commands requests to the driver cloud . The user does not have to configure the user device with any driver and or ancillary software but rather can just communicate with the instrument via the driver cloud .

The foregoing description of embodiments is intended to provide illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from a practice of the invention. For example while a series of acts has been described above with respect to the flow diagrams the order of the acts may be modified in other implementations. Further non dependent acts may be performed in parallel.

Further certain embodiments of the invention may be implemented as logic that performs one or more functions. This logic may be hardware based software based or a combination of hardware based and software based. Some or all of the logic may be stored in one or more tangible non transitory computer readable storage media and may include computer executable instructions that may be executed by a computer or data processing system such as driver cloud and or user device . The computer executable instructions may include instructions that implement one or more embodiments of the invention. The tangible non transitory computer readable storage media may be volatile or non volatile and may include for example flash memories dynamic memories removable disks and non removable disks.

No element act or instruction used herein should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

The foregoing description has been directed to specific embodiments of the present invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For example in addition to VISA another known middle wear interface that may be advantageously used with the cloud based instrument driver system described herein is a Peripheral Component Interconnect PCI eXtensions for Instrumentation PXI memory based solution that utilizes bus addresses. Instead of exchanging VISA ID type strings among the software processes and or modules of the cloud based instrument driver system the PXI based interface solution exchanges memory addresses and data values i.e. setting memory addresses in instrument interacting with user device . Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

