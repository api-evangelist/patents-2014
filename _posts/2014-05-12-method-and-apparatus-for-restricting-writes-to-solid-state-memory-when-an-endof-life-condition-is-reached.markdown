---

title: Method and apparatus for restricting writes to solid state memory when an end-of life condition is reached
abstract: A data storage device including a solid state memory comprising logical block addresses (“LBAs”) corresponding to boot data accessed by a host during a boot process, and a controller. The controller can be configured to determine the LBAs corresponding to the boot data, and determine whether the solid state memory has reached an end-of-life condition. Upon determining that solid state memory has reached an end-of-life condition, the controller can restrict the host to write to the LBAs corresponding to the boot data during a boot process, and set the solid state memory into a read only mode when the boot process is complete.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268487&OS=09268487&RS=09268487
owner: Western Digital Technologies, Inc.
number: 09268487
owner_city: Irvine
owner_country: US
publication_date: 20140512
---
This application claims the benefit of U.S. Provisional Application No. 61 969 635 filed on Mar. 24 2014 entitled RESTRICTING WRITES TO SOLID STATE DRIVES WHEN NEAR END OF LIFE CONDITION IS DETECTED which is hereby incorporated by reference in its entirety.

A solid state memory in an electronic device may have a limited amount of write erase cycles available. Conventionally when the solid state memory reached a certain number of write erase cycles the solid state memory may be set to a read only mode. However in the read only mode the electronic device may not be able to boot up because it may need to write to the solid state memory.

If the electronic device cannot be booted up it may be difficult to access the data in the solid state memory. This can not only necessitate the replacement of the solid state memory but also a cumbersome process to retrieve the data stored in the solid state memory by utilizing a replacement memory. However inability to utilize the replacement memory may result in data loss in the solid state memory.

In an embodiment an electronic device is shown in . As seen in the embodiment shown in the electronic device comprises a host data storage device and a volatile memory . In an embodiment the electronic device comprises a computer a laptop a set top box a tablet a mobile communications device or other types of device which may boot up using the data storage device . In an embodiment the volatile memory comprises random access memory RAM such as dynamic random access memory DRAM . The volatile memory can be used for example to cache data which may be accessed by the host .

In an embodiment the data storage device is shown in . As shown in the data storage device comprises a controller a solid state memory an optional magnetic rotating disk and a volatile memory . The controller can control operations of the solid state memory the magnetic rotating disk and the volatile memory . In an embodiment the solid state memory comprises non volatile memory. In an embodiment the volatile memory comprises RAM such as DRAM. The volatile memory can be used for example to cache data for the solid state memory . In an embodiment when the data storage device comprises both the solid state memory and the magnetic rotating disk the data storage device can comprise a hybrid drive.

While the description herein refers to solid state memory generally it is understood that solid state memory may comprise one or more of various types of solid state non volatile memory devices such as flash integrated circuits Chalcogenide RAM C RAM Phase Change Memory PC RAM or PRAM Programmable Metallization Cell RAM PMC RAM or PMCm Ovonic Unified Memory OUM Resistance RAM RRAM NAND memory e.g. single level cell SLC memory multi level cell MLC memory or any combination thereof NOR memory EEPROM Ferroelectric Memory FeRAM Magnetoresistive RAM MRAM other discrete NVM non volatile memory chips or any combination thereof.

Referring to and during a boot process the host can write boot data onto the solid state memory . In an embodiment the boot data can comprise a startup log information about the electronic device or any combination thereof. The information about the electronic device can comprise speed of interfaces chipset settings boot settings or other information which may relate to a status or performance of the electronic device For example the basic input output system BIOS of the host can write the boot data onto the solid state memory .

After the host has written the boot data onto the solid state memory the controller can determine the logical block addresses LBAs corresponding to the boot data. Thus the controller can maintain knowledge of which LBAs are being utilized for the boot data.

In an embodiment the controller can also determine a number of write erase cycles for the solid state memory . The number of write erase cycles can be utilized to determine when the solid state memory has reached an end of life condition. For example the solid state memory may wear out after a certain number of write erase cycles. Thus when the number of write erase cycles is within a predetermined number of write erase cycles from an end of life number of write erase cycle the controller can determine that the solid state memory has reached an end of life condition.

The end of life condition for the solid state memory does not mean that the solid state memory could not be functional or semi functional as a data storage device. Instead the solid state memory is approaching a number of write erase cycles where the reliability of the solid state memory may not meet certain performance standards such as performance standards set by the manufacturer.

For example as seen in the number of write erase cycles an end of life condition and an end of life number of write erase cycles are shown. Between N0 and N1 write erase cycles the number of write erase cycles is less than a predetermined number of write erase cycles from an end of life number of write erase cycles . However between N1 and N2 the number of write erase cycles has reached an end of life condition and is within a predetermined number of write erase cycles from an end of life number of write erase cycles . After N2 the number of write erase cycles has exceeded the end of life number of write erase cycles .

In an embodiment prior to reaching the end of life condition the controller sets the solid state memory into a normal mode. That is the solid state memory can boot up normally and operate normally including reading and writing data to the solid state memory during and after the boot process. When the end of life condition is reached the controller can set the solid state memory into a boot write read only mode.

During the boot write read only mode the controller can restrict the host to write to the LBAs corresponding to the boot data during the boot process. Furthermore during the boot write read only mode the controller can set the solid state memory into a read only mode when the boot process is complete. That is during the boot process the solid state memory can write data but after the boot process is complete the solid state memory will no longer be able to write data. However during the boot process and after the boot process is complete the solid state memory will be able to read data.

Thus the data storage device can boot up since the host can write the boot data onto the LBAs corresponding to the boot data in the solid state memory during the boot process. However after the boot process is completed data integrity for the data stored in the solid state memory is maintained since data may not be written onto the solid state memory . In an embodiment this allows a user to back up or transfer the data stored in the solid state memory to another location in light of an impending end of life of the solid state memory . For example the user can transfer the data to the magnetic rotating disk or another data storage device. This can for example prevent or reduce the likelihood that the user will lose some or all data stored within the solid state memory .

Otherwise the host may not complete the boot process and enter a normal operation mode if the host is unable to write the boot data to the solid state memory during the boot process such as with a strictly read only mode. In such a case the user may have to remove the data storage device and attempt to recover data on the solid state memory by accessing it via another electronic device or with another data storage device which completes the boot process in the same electronic device .

When the end of life number of write erase cycles is reached the controller sets the solid state memory into a read only mode. That is when the number of write erase cycles is equal to or greater than the end of life number of write erase cycles for the solid state memory the controller sets the solid state memory into the read only mode. In such a case the solid state memory will only be allowed to read data during and after the boot process. The writing of data to the solid state memory will not be permitted.

In an embodiment the end of life condition can be related or based on the spare block count for the solid state memory instead of the write erase cycles shown in . Thus the end of life condition can be reached when a spare block count for the solid state memory is less than a predetermined threshold of spare block counts. Thus as the number of spare block count dwindles the solid state memory would approach the end of life condition.

In an embodiment spare blocks can be reserved in the solid state memory and are not ordinarily accessible by the host . Instead when there are defective blocks in the solid state memory the spare blocks can be utilized to replace the defective blocks. In such a case a spare block that is utilized to replace a defective block will be accessible by the host . In an embodiment the spare block count can indicate the number of spare blocks available.

In an embodiment a process for operating the data storage device is shown in . In block S the controller determines LBAs corresponding to boot data accessed by the host during the boot process. In block S the controller determines whether the solid state memory has reached an end of life condition such as the end of life condition shown in . Upon determining that the solid state memory has reached an end of life condition the controller can set the solid state memory into a boot write read only mode in blocks S and S.

In block S the controller restricts the host to write to the LBAs corresponding to the boot data during the boot process. In an embodiment the controller can also limit the host to a predetermined number of writes. In an embodiment the predetermined number of writes is a preset number of writes. In an embodiment the predetermined number of writes is learned by the controller by observing a number of writes performed by the host during the boot process. This can for example reduce the number of write erase cycles to the solid state memory or portions of the solid state memory . In block S the controller sets the solid state memory into a read only mode when the boot process is complete.

In an embodiment additional or optional blocks for a process for operating the data storage device are shown in . In block S the controller limits a number of writes to a reserved area in the solid state memory prior to determining that the solid state memory has reached the end of life condition. For example in the embodiment shown in the solid state memory can comprise non reserved areas and a reserved area . The non reserved areas can be available for the host to write most types of data. The reserved area can be reserved for the boot data.

The controller can thus limit the number of writes to the reserved area . For example the controller can prevent other data aside from the boot data from being written to the reserved area . This can for example prolong a life of the reserved area since the number of write erase cycles will be reduced. In turn this can prolong a life of the solid state memory since the boot data can be written during the boot process. This allows the solid state memory to be boot up to allow access to data stored in the solid state memory .

In an embodiment additional or optional blocks for a process for operating the data storage device are shown in . In block S the controller learns a pattern of LBAs accessed by the host during the boot process. For example as shown in an embodiment in the solid state memory can comprises LBAs which are not accessed by the host during the boot process and LBAs which are accessed by the host during the boot process. In block S the controller limits the host writes to those LBAs in the pattern of LBAs accessed by the host during the boot process.

In an embodiment a host processor can perform for example one or more of the functions disclosed above for the host . For example the host processor can be configured to write boot data during a boot process. In an embodiment the host comprises the host processor. However in an embodiment the electronic device can comprise a host processor instead of or in addition to the host .

Those of ordinary skill would appreciate that the various illustrative logical blocks modules and algorithm parts described in connection with the examples disclosed herein may be implemented as electronic hardware computer software or combinations of both. Furthermore the embodiments can also be embodied on a non transitory machine readable medium causing a processor or computer to perform or execute certain functions.

To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and process parts have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosed apparatus and methods.

The parts of a method or algorithm described in connection with the examples disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. The parts of the method or algorithm may also be performed in an alternate order from those provided in the examples. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk an optical disk or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an Application Specific Integrated Circuit ASIC .

The previous description of the disclosed examples is provided to enable any person of ordinary skill in the art to make or use the disclosed methods and apparatus. Various modifications to these examples will be readily apparent to those skilled in the art and the principles defined herein may be applied to other examples without departing from the spirit or scope of the disclosed method and apparatus. The described embodiments are to be considered in all respects only as illustrative and not restrictive and the scope of the disclosure is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

