---

title: Clarification of submitted questions in a question and answer system
abstract: Mechanisms for clarifying an input question are provided. A question is received for generation of an answer. A set of candidate answers is generated based on an analysis of a corpus of information. Each candidate answer has an evidence passage supporting the candidate answer. Based on the set of candidate answers, a determination is made as to whether clarification of the question is required. In response to a determination that clarification of the question is required, a request is sent for user input to clarify the question. User input is received from the computing device in response to the request and at least one candidate answer in the set of candidate answers is selected as an answer for the question based on the user input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361386&OS=09361386&RS=09361386
owner: International Business Machines Corporation
number: 09361386
owner_city: Armonk
owner_country: US
publication_date: 20140922
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for identifying unique criteria for clarifying a submitted question in a question and answer QA system.

With the increased usage of computing networks such as the Internet humans are currently inundated and overwhelmed with the amount of information available to them from various structured and unstructured sources. However information gaps abound as users try to piece together what they can find that they believe to be relevant during searches for information on various subjects. To assist with such searches recent research has been directed to generating Question and Answer QA systems which may take an input question analyze it and return results indicative of the most probable answer to the input question. QA systems provide automated mechanisms for searching through large sets of sources of content e.g. electronic documents and analyze them with regard to an input question to determine an answer to the question and a confidence measure as to how accurate an answer is for answering the input question.

One such QA system is the Watson system available from International Business Machines IBM Corporation of Armonk N.Y. The Watson system is an application of advanced natural language processing information retrieval knowledge representation and reasoning and machine learning technologies to the field of open domain question answering. The Watson system is built on IBM s DeepQA technology used for hypothesis generation massive evidence gathering analysis and scoring. DeepQA takes an input question analyzes it decomposes the question into constituent parts generates one or more hypothesis based on the decomposed question and results of a primary search of answer sources performs hypothesis and evidence scoring based on a retrieval of evidence from evidence sources performs synthesis of the one or more hypothesis and based on trained models performs a final merging and ranking to output an answer to the input question along with a confidence measure.

Various United States patent application Publications describe various types of question and answer systems. U.S. Patent Application Publication No. 2011 0125734 discloses a mechanism for generating question and answer pairs based on a corpus of data. The system starts with a set of questions and then analyzes the set of content to extract answer to those questions. U.S. Patent Application Publication No. 2011 0066587 discloses a mechanism for converting a report of analyzed information into a collection of questions and determining whether answers for the collection of questions are answered or refuted from the information set. The results data are incorporated into an updated information model.

In one illustrative embodiment a method in a data processing system comprising a processor and a memory for clarifying an input question. The method comprises receiving in the data processing system from a computing device the input question for generation of an answer to the input question. The method further comprises generating in the data processing system a set of candidate answers for the input question based on an analysis of a corpus of information wherein each candidate answer in the set of candidate answers has an evidence passage supporting the candidate answer as answering the input question. Moreover the method comprises determining in the data processing system based on the set of candidate answers whether clarification of the input question is required and sending by the data processing system in response to a determination that clarification of the input question is required a request for user input to clarify the input question. In addition the method comprises receiving in the data processing system user input from the computing device in response to the request and selecting by the data processing system at least one candidate answer in the set of candidate answers as an answer for the input question based on the user input.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide mechanisms for identifying unique criteria for clarifying a submitted question in a question and answer QA system. That is in a QA system a user submits a question in a natural language form i.e. unstructured form to the QA system which searches a corpus of information to identify one or more candidate answers to the submitted question from evidence passages in the corpus of information. However users often submit questions with multiple correct answers based on the context given in the submitted question. In other words a user submitted question often contains implied context that is intuitive to humans but is not intuitive to algorithmic QA systems.

For example consider the question Who was the first president There are many first presidents of different nations corporations or any other organization. The first president to die in office as well as many other first presidents for various other contexts may also be a valid answer to this submitted question as well since the QA system cannot determine from the question itself the implied context.

Assume that the QA system has the following two evidence passages that are analyzed as part of the search of the corpus of information based on the analysis of the submitted question 

The illustrative embodiments provide mechanisms for disambiguating user submitted questions in a QA system which have multiple correct candidate answers i.e. candidate answers having a threshold level of confidence indicative of the candidate answer being potentially correct for the submitted question. With the mechanisms of the illustrative embodiments the QA system is augmented to include logic for determining differentiating facts concepts or semantic relationships referred to herein collectively as differentiating factors in the evidence passages leading to the identification of potentially correct candidate answers. The logic of the QA system then interactively communicates with the user that submitted the originally submitted question based on the identified differentiating facts concepts or semantic relationships to further identify the implied context of the originally submitted question. In so doing the user interactively clarifies their originally submitted question to thereby enable the QA system to identify which of the potentially correct candidate answers is considered to be the most likely correct answer for the originally submitted question.

Based on the user s input to the interactive communications for clarifying the implied context of the originally submitted question weights associated with confidence scores or components of confidence scores may be adjusted to increase decrease these confidence scores or components to increase or improve the scores associated with the implied context of the originally submitted question and reduce or lessen the scores that are not associated with the implied context of the originally submitted question. In some cases candidate answers as a whole may be eliminated from consideration if their evidence passages indicate that the evidence is for a different context from that of the implied context of the originally submitted question as clarified through the interactive communications with the user.

Once the implied context of the input question is further clarified through the interactive communications and the candidate answers are modified based on the user input clarifying the implied context the QA system may generate a final ranked listing of candidate answers and or a final answer for the originally submitted question. The ranked listing and or final answer may be returned to the submitter of the originally submitted question. Confidence scores evidence passage information and the like may be returned with the ranked listing and or final answer as well.

The above aspects and advantages of the illustrative embodiments of the present invention will be described in greater detail hereafter with reference to the accompanying figures. It should be appreciated that the figures are only intended to be illustrative of exemplary embodiments of the present invention. The present invention may encompass aspects embodiments and modifications to the depicted exemplary embodiments not explicitly shown in the figures but would be readily apparent to those of ordinary skill in the art in view of the present description of the illustrative embodiments.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be a system apparatus or device of an electronic magnetic optical electromagnetic or semiconductor nature any suitable combination of the foregoing or equivalents thereof. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical device having a storage capability a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber based device a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

In some illustrative embodiments the computer readable medium is a non transitory computer readable medium. A non transitory computer readable medium is any medium that is not a disembodied signal or propagation wave i.e. pure signal or propagation wave per se. A non transitory computer readable medium may utilize signals and propagation waves but is not the signal or propagation wave itself. Thus for example various forms of memory devices and other types of systems devices or apparatus that utilize signals in any way such as for example to maintain their state may be considered to be non transitory computer readable media within the scope of the present description.

A computer readable signal medium on the other hand may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Similarly a computer readable storage medium is any computer readable medium that is not a computer readable signal medium.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments may be utilized in many different types of data processing environments. are directed to describing an example Question Answer Question and Answer or Question Answering QA system methodology and computer program product with which the mechanisms of the illustrative embodiments may be implemented. As will be discussed in greater detail hereafter the illustrative embodiments may be integrated in and may augment and extend the functionality of these QA mechanisms with regard to clarifying the context of submitted questions through an interactive communication with a user so as to increase the accuracy of the answering of submitted questions where the context of the submitted question is ambiguous. Thus it is important to first have an understanding of how question and answer creation in a QA system may be implemented before describing how the mechanisms of the illustrative embodiments are integrated in and augment such QA systems. It should be appreciated that the QA mechanisms described in are only examples and are not intended to state or imply any limitation with regard to the type of QA mechanisms with which the illustrative embodiments may be implemented. Many modifications to the example QA system shown in may be implemented in various embodiments of the present invention without departing from the spirit and scope of the present invention.

QA mechanisms operate by accessing information from a corpus of data or information also referred to as a corpus of content analyzing it and then generating answer results based on the analysis of this data. Accessing information from a corpus of data typically includes a database query that answers questions about what is in a collection of structured records and a search that delivers a collection of document links in response to a query against a collection of unstructured data text markup language etc. . Conventional question answering systems are capable of generating answers based on the corpus of data and the input question verifying answers to a collection of questions for the corpus of data correcting errors in digital text using a corpus of data and selecting answers to questions from a pool of potential answers i.e. candidate answers.

Content creators such as article authors electronic document creators web page authors document database creators and the like may determine use cases for products solutions and services described in such content before writing their content. Consequently the content creators may know what questions the content is intended to answer in a particular topic addressed by the content. Categorizing the questions such as in terms of roles type of information tasks or the like associated with the question in each document of a corpus of data may allow the QA system to more quickly and efficiently identify documents containing content related to a specific query. The content may also answer other questions that the content creator did not contemplate that may be useful to content users. The questions and answers may be verified by the content creator to be contained in the content for a given document. These capabilities contribute to improved accuracy system performance machine learning and confidence of the QA system. Content creators automated tools or the like may annotate or otherwise generate metadata for providing information useable by the QA system to identify these question and answer attributes of the content.

Operating on such content the QA system generates answers for input questions using a plurality of intensive analysis mechanisms which evaluate the content to identify the most probable answers i.e. candidate answers for the input question. The illustrative embodiments leverage the work already done by the QA system to reduce the computation time and resource cost for subsequent processing of questions that are similar to questions already processed by the QA system.

The QA system may be configured to implement a QA system pipeline that receive inputs from various sources. For example the QA system may receive input from the network a corpus of electronic documents QA system users or other data and other possible sources of input. In one embodiment some or all of the inputs to the QA system may be routed through the network . The various computing devices on the network may include access points for content creators and QA system users. Some of the computing devices may include devices for a database storing the corpus of data which is shown as a separate entity in for illustrative purposes only . Portions of the corpus of data may also be provided on one or more other network attached storage devices in one or more databases or other computing devices not explicitly shown in . The network may include local network connections and remote connections in various embodiments such that the QA system may operate in environments of any size including local and global e.g. the Internet.

In one embodiment the content creator creates content in a document of the corpus of data for use as part of a corpus of data with the QA system . The document may include any file text article or source of data for use in the QA system . QA system users may access the QA system via a network connection or an Internet connection to the network and may input questions to the QA system that may be answered by the content in the corpus of data . In one embodiment the questions may be formed using natural language. The QA system may interpret the question and provide a response to the QA system user e.g. QA system user containing one or more answers to the question. In some embodiments the QA system may provide a response to users in a ranked list of candidate answers.

The QA system implements a QA system pipeline which comprises a plurality of stages for processing an input question the corpus of data and generating answers for the input question based on the processing of the corpus of data . The QA system pipeline will be described in greater detail hereafter with regard to .

In some illustrative embodiments the QA system may be the Watson QA system available from International Business Machines Corporation of Armonk N.Y. which is augmented with the mechanisms of the illustrative embodiments described hereafter. The Watson QA system may receive an input question which it then parses to extract the major features of the question that in turn are then used to formulate queries that are applied to the corpus of data. Based on the application of the queries to the corpus of data a set of hypotheses or candidate answers to the input question are generated by looking across the corpus of data for portions of the corpus of data that have some potential for containing a valuable response to the input question.

The Watson QA system then performs deep analysis on the language of the input question and the language used in each of the portions of the corpus of data found during the application of the queries using a variety of reasoning algorithms. There may be hundreds or even thousands of reasoning algorithms applied each of which performs different analysis e.g. comparisons and generates a score. For example some reasoning algorithms may look at the matching of terms and synonyms within the language of the input question and the found portions of the corpus of data. Other reasoning algorithms may look at temporal or spatial features in the language while others may evaluate the source of the portion of the corpus of data and evaluate its veracity.

The scores obtained from the various reasoning algorithms indicate the extent to which the potential response is inferred by the input question based on the specific area of focus of that reasoning algorithm. Each resulting score is then weighted against a statistical model. The statistical model captures how well the reasoning algorithm performed at establishing the inference between two similar passages for a particular domain during the training period of the Watson QA system. The statistical model may then be used to summarize a level of confidence that the Watson QA system has regarding the evidence that the potential response i.e. candidate answer is inferred by the question. This process may be repeated for each of the candidate answers until the Watson QA system identifies candidate answers that surface as being significantly stronger than others and thus generates a final answer or ranked set of answers for the input question. More information about the Watson QA system may be obtained for example from the IBM Corporation website IBM Redbooks and the like. For example information about the Watson QA system can be found in Yuan et al. Watson and Healthcare IBM developerWorks 2011 and The Era of Cognitive Systems An Inside Look at IBM Watson and How it Works by Rob High IBM Redbooks 2012.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows 7 . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system .

As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system. Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

As shown in the QA system pipeline comprises a plurality of stages through which the QA system operates to analyze an input question and generate a final response. In an initial question input stage the QA system receives an input question that is presented in a natural language format. That is a user may input via a user interface an input question for which the user wishes to obtain an answer e.g. Who were Washington s closest advisors In response to receiving the input question the next stage of the QA system pipeline i.e. the question and topic analysis stage parses the input question using natural language processing NLP techniques to extract major features from the input question classify the major features according to types e.g. names dates or any of a plethora of other defined topics. For example in the example question above the term who may be associated with a topic for persons indicating that the identity of a person is being sought Washington may be identified as a proper name of a person with which the question is associated closest may be identified as a word indicative of proximity or relationship and advisors may be indicative of a noun or other language topic.

The identified major features may then be used during the question decomposition stage to decompose the question into one or more queries that may be applied to the corpus of data information in order to generate one or more hypotheses. The queries may be generated in any known or later developed query language such as the Structure Query Language SQL or the like. The queries may be applied to one or more databases storing information about the electronic texts documents articles websites and the like that make up the corpus of data information . That is these various sources themselves collections of sources and the like may represent different corpora within the corpus . There may be different corpora defined for different collections of documents based on various criteria depending upon the particular implementation. For example different corpora may be established for different topics subject matter categories sources of information or the like. As one example a first corpora may be associated with healthcare documents while a second corpora may be associated with financial documents. Alternatively one corpora may be documents published by the U.S. Department of Energy while another corpora may be IBM Redbooks documents. Any collection of content having some similar attribute may be considered to be a corpora within the corpus .

The queries may be applied to one or more databases storing information about the electronic texts documents articles websites and the like that make up the corpus of data information e.g. the corpus of data in . The queries being applied to the corpus of data information at the hypothesis generation stage to generate results identifying potential hypotheses for answering the input question which can be evaluated. That is the application of the queries results in the extraction of portions of the corpus of data information matching the criteria of the particular query. These portions of the corpus may then be analyzed such as to extract particular features within the portions of the corpus and used during the hypothesis generation stage to generate hypotheses for answering the input question. These hypotheses are also referred to herein as candidate answers for the input question. For any input question at this stage there may be hundreds of hypotheses or candidate answers generated that may need to be evaluated.

The QA system pipeline in stage then performs a deep analysis and comparison of the language of the input question and the language of each hypothesis or candidate answer as well as performs evidence scoring to evaluate the likelihood that the particular hypothesis is a correct answer for the input question. As mentioned above this may involve using a plurality of reasoning algorithms each performing a separate type of analysis of the language of the input question and or content of the corpus that provides evidence in support of or not of the hypothesis. Each reasoning algorithm generates a score based on the analysis it performs which indicates a measure of relevance of the individual portions of the corpus of data information extracted by application of the queries as well as a measure of the correctness of the corresponding hypothesis i.e. a measure of confidence in the hypothesis.

In the synthesis stage the large number of relevance scores generated by the various reasoning algorithms may be synthesized into confidence scores for the various hypotheses. This process may involve applying weights to the various scores where the weights have been determined through training of the statistical model employed by the QA system and or dynamically updated as described hereafter. The weighted scores may be processed in accordance with a statistical model generated through training of the QA system that identifies a manner by which these scores may be combined to generate a confidence score or measure for the individual hypotheses or candidate answers. This confidence score or measure summarizes the level of confidence that the QA system has about the evidence that the candidate answer is inferred by the input question i.e. that the candidate answer is the correct answer for the input question.

The resulting confidence scores or measures are processed by a final confidence merging and ranking stage which may compare the confidence scores and measures compare them against predetermined thresholds or perform any other analysis on the confidence scores to determine which hypotheses candidate answers are the most likely to be the answer to the input question. The hypotheses candidate answers may be ranked according to these comparisons to generate a ranked listing of hypotheses candidate answers hereafter simply referred to as candidate answers . From the ranked listing of candidate answers at stage a final answer and confidence score or final set of candidate answers and confidence scores may be generated and output to the submitter of the original input question.

As shown in in accordance the illustrative embodiments question disambiguation logic is provided for interfacing with the hypothesis and evidence scoring stage logic and the synthesis stage logic to determine whether disambiguation of the input question is needed and if so to perform operations for identifying differentiating factors in the evidence passages leading to the candidate answers and interacting with a user that submitted the input question to obtain user input for clarifying the context of the input question based on the identified differentiating factors.

As shown in the question disambiguation logic comprises context clarification logic differentiating factor determination logic and user collaboration logic . The context clarification logic analyzes the set of candidate answers to determine if there are multiple correct candidate answers identified from the corpus of information. The determination of whether there are multiple correct candidate answers may be as simple as determining if a more than one candidate answer generated by the hypothesis generation stage and scored by the hypothesis and evidence scoring stage has a confidence score equal to or exceeding a predetermined threshold confidence score indicating that the candidate answer is likely a correct answer for the input question . Alternatively a determination may be used in which a determination is made as to whether a highest scoring candidate answer of a plurality of candidate answers has a confidence score equal to or higher than a predetermined threshold in which case it is returned as the correct answer for the input question and if not then multiple correct candidate answers are determined to be present.

In yet another possible embodiment the determination may be more complex and involve multiple determinations comparisons with a plurality of threshold values and the like. For example in one illustrative embodiment a first determination may be made to determine if any of the candidate answers have a corresponding confidence score above a first threshold indicating that the candidate answer is highly likely to be the correct answer for the input question e.g. a confidence score of 90 confidence or higher. If more than one candidate answer has a confidence score equal to or higher than this first threshold then a determination is made that there are multiple correct candidate answers for the input question . If only one candidate answer has a confidence score equal to or higher than this first threshold then a determination may be made that the candidate answer having the confidence score equal to or higher than the first threshold is the correct answer for the input question and may be returned as the correct answer to the submitter of the input question . Alternatively if multiple candidate answers have confidence scores equal to or above this first threshold all of the candidate answers having confidence scores equal to or above this first threshold may be returned as correct answers for the input question or a candidate answer having the highest confidence score may be selected from amongst these candidate answers whose confidence scores are equal to or above this first threshold. Thus the first threshold defines a demarcation line where some candidate answers are determined to be correct answers for the input question those whose confidence scores are equal to or above the first threshold and other candidate answers are either not correct answers to the input question or are potentially correct candidate answers for the input question but further clarification of the context of the input question may be required.

If none of the candidate answers are determined to have confidence scores equal to or above this first threshold a second determination may be made as to whether a plurality of candidate answers have confidence scores above a second threshold e.g. a confidence score of 60 confidence or higher. If more than one candidate answer has a confidence score equal to or higher than this second threshold then it may be determined that there are multiple correct candidate answers for the input question and other candidate answers having confidence scores less than the second threshold may be discarded. This second threshold along with the first threshold essentially defines a range of confidence scores where candidate answers are potentially correct answers for the input question . If multiple candidate answers fall within this range of confidence scores then further clarification of the context of the input question may be requested to ascertain which if any of the candidate answers is a correct answer for the input question . Any number of determinations comparisons threshold values and the like may be used without departing from the spirit and scope of the present invention.

In response to the context clarification logic determining that there are multiple correct candidate answers the context clarification logic instructs the differentiating factor determination logic to analyze the evidence passages used to generate each of the multiple correct candidate answers to identify differentiating factors e.g. facts concepts or semantic relationships in the various evidence passages that differentiate one correct candidate answer from one or more of the other correct candidate answers. The differentiating factor determination logic may interface with the hypothesis and evidence scoring stage logic to analyze the features of the evidence passages to identify the features indicative of differentiating factors leading to the generation of the candidate answers. Thus the differentiating factor determination logic may compare similar types of features from the evidence passages identify features of similar type that have different content and then identify those features as being differentiating factors.

The differentiating factors essentially identify a difference in the context of the evidence passages that support the candidate answers. That is using the example previously set forth above the following two evidence passages may be analyzed to extract various features by the hypothesis generation stage logic and scored by the hypothesis and evidence scoring stage logic 

There may be multiple extracted features from the evidence passages that are evaluated by the differentiating factor determination logic to identify those extracted features that are indicative of a context of the candidate answer within the evidence passage and which have differences that may differentiate one candidate answer from another. Thus there may be multiple types of extracted features for which the evidence passages have differing content. For example if an extracted feature is a focus of the term president then the two example passages above have different focuses of the United States and Southern Baptist Convention. Other types of extracted features may also be identified in the evidence passages as well. Thus with the mechanisms of the illustrative embodiments differentiating factors that are specific to differentiating the candidate answers and specific to the focus of the input question may be identified.

Based on the identification of the differentiating factors between the evidence passages supporting the various candidate answers the context clarification logic may forward the differentiating factors the feature types and the like to the user collaboration logic for use in obtaining user input to clarify the implied context of the input question . That is the context clarification logic formulates one or more user interfaces for requesting user feedback input that further clarifies the implied context of the input question . The user interfaces may present one or more questions and fields or other user interface elements for receiving from a user input indicating a clarification of the implied context of the input question .

For example based on the analysis of the focus of the input question and the differentiating factors of the evidence passage one or more clarification questions may be generated requesting clarification of the focus of the input question and presenting the user with a free form input field list of potential answers to the one or more clarification questions fields for answering yes no to the one or more clarification questions or the like. The user interfaces may be output to the computing device that submitted the input question so that the user interfaces are output to the user via the computing device. The user may submit user input to the user interfaces which may then be returned by the computing device to the QA system pipeline for use by the user collaboration logic . The user input may be used to further clarify the implied context of the input question and adjust the scoring of candidate answers hypothesis eliminate candidate answers altogether or the like.

For example from the evidence passages in the example above the QA system may form two hypotheses that George Washington and William Johnson are candidate answers for the submitted question. However the question cannot be answered with confidence without additional context in the submitted question to specify the president of what. From an analysis of the input question it can be determined that the focus of the input question is the president of something and the analysis of the candidate answers and evidence passages indicate that the candidate answers are names of presidents of something and that these somethings are the differentiating factors between the candidate answers e.g. the United States and the Southern Baptist Convention.

Thus a user interface may be generated with a clarification question to be presented to the user requesting that the user specify the president of what The user interface may include a free form text field into which the user may answer the clarification question in a free form manner with the user s input text being analyzed and compared against the differentiating factors to select one of the differentiating factors as being indicative of the implied context of the input question . Alternatively the user interface may present the differentiating factors that may answer the clarification question in a multiple choice manner with corresponding selection user interface elements that allow a user to select one or more of the differentiating factors as an answer to the clarification questions.

In still a further embodiment the clarification questions may be presented in a yes no format in which the differentiating factors are part of the clarification question. An example of such a clarification question may be of the type Do you want the first president of the United States Yes No . The user may select a Yes or No user interface element to respond to the clarification question. A series of such questions may be presented in the user interface or a series of user interfaces until a Yes answer is returned by the user. In this way the various different implied contexts may be explored allowing the user to specify which implied context applies to the input question .

The user input into the user interface s is returned to the QA system pipeline and received by the user collaboration logic which informs the context clarification logic of the user s identification of the correct differentiating factor indicative of the implied context of the input question . The user input may be used by the context clarification logic to instruct the synthesis stage logic and or the hypothesis and evidence scoring stage logic to eliminate candidate answers hypothesis from consideration adjust weights or other factors used to generate confidence scores for the various candidate answers or otherwise adjust the confidence scoring of the various candidate answers to favor those candidate answers corresponding to the implied context clarified by the user input and or decrease the favorability of candidate answers that do not correspond to the implied context clarified by the user input. That is confidence scores associated with candidate answers having differentiating factors whose content is United States may be more heavily weighted in response to the user submitting user input indicating that the user intended the input question Who was the first president to refer to the first president of the United States. Confidence scores associated with other candidate answers may be left the same or have their weights reduced relatively so as to decrease their ranking within the candidate answers returned by the QA system pipeline . Alternatively candidate answers that do not have differentiating factors whose content is United States may be eliminated from the list of candidate answers undergoing synthesis in the synthesis stage .

As a result the candidate answers that are considered during the final confidence merging and ranking stage and final answer and confidence stage are modified from those originally generated by the hypothesis generation stage . The modified set of candidate answers are modified according to the clarification of the implied context of the input question made by the user in response to the identification of differentiating factors between candidate answers in evidence passages supporting the various candidate answers. Thus the mechanisms of the illustrative embodiments provide the ability to clarify the context of an input question to thereby improve the answers generated by the QA system pipeline .

Many modifications and additions may be made to the embodiments described above without departing from the spirit and scope of the illustrative embodiments. In one illustrative embodiment a matrix may be generated with entries corresponding to the various extracted features of the evidence passages that are indicative of differentiating factors. Counts may be associated with each entry in the matrix to identify how many evidence passages contain the corresponding differentiating factor. For example there may be an entry in the matrix for United States and another entry for Southern Baptist Convention. If 4 different evidence passages contain the extracted feature of United States then a corresponding count for the entry in the matrix may be set to a value of 4. Similarly if 2 different evidence passages contain the extracted feature of Southern Baptist Convention then a corresponding count for the entry in the matrix may be set to a value of 2.

The counts for each of the entries may be used to identify which differentiating factors are most likely to clarify the input question such that a final clarification of the input question for identifying a final answer is reached in a fastest possible manner. For example the differentiating factors of a particular type of extracted feature that have equal to or above a predetermined threshold count number may be selected for use in generating the user interface clarification questions. Alternatively a predetermined top number of differentiating factors e.g. the top 2 differentiating factors of a particular type of extracted feature may be selected for use in generating the user interface clarification question. Various selection criteria may be used based on the matrix of entries and corresponding counts to thereby select the differentiating factors that are most likely to clarify the implied context of the input question and result in a rapid identification of a correct answer for the input question .

As discussed above based on the identification of differentiating factors in the evidence passages one or more user interfaces having one or more clarification questions may be generated and output to a user via their computing device to thereby solicit user input to clarify the implied context of the input question. illustrate examples of user interfaces and clarification questions that may be generated in accordance with illustrative embodiments of the present invention. illustrates an example of a user interface in which a clarification question is presented in a multiple choice answer format. With this example the clarification question is presented and a listing of potential answers to the clarification question is also presented along with user selectable fields for identify which of the potential answers the user believes to be indicative of the implied context of the original input question. An potential answer of none of the above may also be presented in the case that the user believes none of the other potential answers are indicative of the implied context. If this is the case a second user interface may be generated with another clarification question using other differentiating factors may be presented or a user interface indicating that clarification cannot be identified and that the input question cannot be answered with certainty may be presented.

A determination if made as to whether clarification of the implied context of the input question is needed step . As described above this determination may be made based on whether there are multiple potentially correct candidate answers for the input question or not. If clarification is not needed then the candidate answers are processed by the QA system pipeline without further clarification of the implied context of the input question step . The operation then continue to step where a final answer and or ranked listing of candidate answers is generated and output to the submitted of the input question followed by termination of the operation.

If clarification is determined to be needed then the differentiating factors between the evidence passages for candidate answers are identified step . As mentioned above in some illustrative embodiments this may involve the generation of a matrix of differentiating factors and corresponding counts which may be used to select which differentiating factors are most likely to clarify the implied context of the input question.

Based on the identification of the differentiating factors one or more user interfaces having one or more clarification questions are generated and output to a submitter of the input question step . The user response input to the user interface s is then received from the submitter step and the candidate answers are updated based on the user response input step . As discussed above this may involve eliminating some candidate answers from further consideration changing weights applied to confidence scores or components of confidence scores or the like. Synthesis merging ranking and final answer selection via the QA system pipeline are then performed based on the modified candidate answers step . The final answer and or ranked listing of candidate answers may then be generated and output to the submitter of the input question step . The operation then terminates.

Thus the illustrative embodiments provide mechanisms for clarifying the implied context in an originally submitted input question. The illustrative embodiments cause the QA system to generate more accurate answers for input questions when multiple potentially correct answers are determined to be present in a set of originally generated candidate answers. Through user collaboration based on automatically identified differentiating factors in evidence passages supporting the various potentially correct answers the implied context of the originally input question may be ascertained and used to select the candidate answer s that are most likely the correct answer for the input question and correspond to the implied context of the originally input question.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

