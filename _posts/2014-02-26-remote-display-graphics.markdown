---

title: Remote display graphics
abstract: Images displayed on a source device may be displayed on a target device. The source device may send the target device graphical commands and information to be processed natively at the target device, rather than duplicating the screen of a source device at the target device. Graphical elements to be used by the target device may be sent with the graphical commands or may be sent during out-of-band configuration exchanges between the source and target devices to reduce latency during display sharing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09392315&OS=09392315&RS=09392315
owner: Amazon Technologies, Inc.
number: 09392315
owner_city: Reno
owner_country: US
publication_date: 20140226
---
A wide variety of media devices are available for consumers to use for the consumption of an ever growing selection of content. These media devices may include televisions tablet computers personal computers electronic book readers gaming consoles set top boxes media players in vehicle entertainment systems portable media players smartphones and so forth. The content presented by these media devices may include audio video electronic books games and so forth. The content may be downloaded or streamed from a content provider to the media device.

Users may add or remove different media devices into an environment over time. For example users may enter a living room with a smartphone or tablet computer add a Blu ray or other media player to a home entertainment system and so forth.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Media devices may display audio visual content for display to a user. These media devices may include televisions tablet computers personal computers electronic book readers gaming consoles set top boxes media players in vehicle entertainment systems portable media players tablet computers smartphones and so forth. The content may include audio video electronic books games and so forth. Sometimes a user may wish to take audio visional content that is generated on one device such as a mobile phone or tablet and display that content on another device such as a large screen television providing a display or home audio video receiver AVR providing sound output. Copying the output of the display of one device to another device may be referred to as screen or display sharing or mirroring. In display sharing what is seen on the display of one device called a source device is sent to another device called a target device for simultaneous display on the target device. In certain configurations the source device and target device may display different content such as in screen extension or other configurations.

A number of techniques have been developed to share content between devices wirelessly without the use of a cord or other physical connector. Miracast and WiDi wireless display are two protocols that enable display sharing between devices. Traditional display sharing techniques are typically designed with viewing content with a relatively low level of user interaction such as streaming a video or movie that is playing on a mobile device to a television or larger display. Such techniques typically focus on true mirroring that is taking the video display output of one device and copying that onto another device. Thus traditional display mirroring first involves generating display data to be shown on a display of a source device prior to sending the display data to a target device.

This focus suffers from a number of drawbacks. First traditional display mirroring is processor intensive. Traditional mirroring may involve capturing the screen display of a source device encoding rasterized video display data to reduce its size for transmission packetizing the encoded data and sending the packetized data over a wireless connection. Second traditional display mirroring may suffer from high latency as the time needed for processing and wireless transmission may be high. Third traditional mirroring may result in low quality images on a target device due to both the data encoding which reduces fidelity and due to differences between screen size and quality between the target device and source device as data rasterized at a fixed resolution e.g. 720p cannot be scaled up or down without a loss of quality. For example display data formatted for a small screen may not look good when displayed on a larger and potentially higher resolution screen. Other drawbacks also exist. For display mirroring applications that are sensitive to latency quality etc. such as video games web browsing or other applications improved display sharing techniques are desired.

Offered is a such an improved display sharing system and method. Instead of transmitting the processed display data of a source device to be mimicked on a target device which simply copies the image of the source display onto the target display the source device may transmit higher level display or graphical instructions commands to the target device. The target device may then execute those graphical instructions natively at the target device thus rendering on the target device graphics that are configured for the target device rather than rendering on the target device graphics that are configured for the source device. For example traditional display mirroring captures display data to be output on a source device and sends it to a target device. Here higher level graphical commands are captured and sent to a target device. As the graphical commands require significantly less processing for transmission than display data for example encoded video data processing resources may be freed for other tasks. Further as the graphical commands are generated earlier in the processing timeline than display data the graphical commands may be sent to the target device earlier thus allowing for more flexibility in synchronizing the source and target displays when experiencing transmission delays or the like. Skipping encoding also improves image quality by bypassing lossy compression which results in loss of image data during the encoding process. Also the graphic instructions are significantly smaller in terms of data size than encoded video data thus reducing bandwidth consumption for display sharing and reducing latency.

Described below is a system of media devices that may be configured to share graphical information to improve display sharing.

Each media device may include a communication module. The communication module is configured to discover other media devices and the services they support and provide a framework for establishing and using connections with the other media devices. The connections may be authenticated encrypted and so forth.

The communication module may be configured to operate in conjunction with a content direct sharing module which sends a media stream to a receiving media device. For example the content direct sharing module uses connections maintained by the communication module to send audio and video data from a tablet computer to a television for display.

The connection module may be implemented as a software stack executing on the media devices in the system. The connection module on a first media device may differ from the connection module on a second media device. For example the first media device may include a transport module configured to provide secure sockets over Internet Protocol while the second media device may not. The media devices may include the content direct sharing module the device controller module or both.

By providing the communication module the content direct sharing module and the device controller module on media devices the system enhances the user experience. Media devices entering the environment with their associated services may be readily added or removed and content may be easily shared among those media devices.

A user is depicted with several media devices . . . D . While a single user is shown more than one user may be present. The media devices are configured to present store manipulate or otherwise participate in the consumption of content . The media devices may include televisions tablet computers personal computers electronic book readers gaming consoles set top boxes media players in vehicle entertainment systems portable media players smartphones and so forth.

The media devices may execute one or more services. These services may be configured to interact with the content by receiving and processing the content for presentation generating a stream of content for presentation providing various functionality and so forth. The content may include audio video electronic books games and so forth. The media devices are discussed below in more detail with regard to .

The media devices include a communication module . The communications module is configured to support a framework within which availability of different services on different media devices may be distributed and connections between those media devices may be established. These connections may be used to send receive control or otherwise interact with the content . The communication module is discussed in more detail below with regard to .

These connections maintained by the communication module may use one or more networks. For example the network s illustrated in may include local area networks LANs and wide area networks WANs as illustrated in . The LANs may be supported using an access point topology ad hoc peer to peer topology and so forth. The LANs may be wired wireless or a combination. The LANs may be implemented using Ethernet Wi Fi Bluetooth ZigBee and so forth. Within the system several different LANs may coexist. For example media device and may be connected to one another using Wi Fi while the media device and may be interconnected using Bluetooth. The connections may be between media devices which are on the same or different local area networks .

The LAN s may connect to one or more WANs . The WAN may include one or more public networks such as the Internet private networks cellular data networks or a combination thereof. The WAN may in turn couple to one or more servers . . . S . The servers may exchange information with the one or more media devices . While the servers are depicted as single servers in some implementations the servers or the functions attributed to the servers may be provided by a plurality of devices. For example the server may be implemented as a virtualized server executing across a plurality of physical servers.

In one implementation the server or another device coupled to the WAN may provide a proxy service to transfer information from a media device to another media device using the WAN . These media devices may be on the same or different LANs. In another implementation the media devices on different LANs may establish connections with one another over the WAN without using the proxy service.

The media device may include other modules such as a content direct sharing module . The content direct sharing module provides a media stream from a first media device to a second media device . Certain media devices may be configured differently from other media devices. For example as illustrated here a tablet computer media device may be configured to receive content which may be protected using one or more digital rights management DRM schemes while the television media device may not be configured in this manner. A content direct sharing module executes on both the tablet media device and the television media device . The content direct sharing module of the media device generates a media stream which is sent using the LAN to the media device which presents at least a portion of the media stream . In one aspect the media stream may include coded content on the source media device . In another aspect the media stream may include graphical commands or calls to be executed by a processor at a target media device to create images for display.

In some implementations the content direct sharing module which is receiving the media stream may be disallowed from storing the media stream in permanent or semi permanent memory. For example the content direct sharing module may be configured to store no more than 300 frames of media stream data at any given time and may also be configured to display received frames in a streaming manner. The content direct sharing module may also be configured to establish a secured pathway to the display of the media device executing the content direct sharing module to reduce the likelihood of interception of the media stream by other applications or services executing on the media device .

The content direct sharing module may include modules such as a virtual screen module a virtual audio device module or both. The virtual screen module may be configured to acquire graphical command data which is designated for presentation on the display of the media device . The virtual screen module may also be configured to receive graphical command data such as the media stream from another media device . The media stream may include graphical commands and associated graphical data. The virtual screen module may send the graphical commands and graphical data to a processor of the media device for rendering and display on a display of the media device . This communication may be facilitated by the communication module . The virtual audio device module may be configured to acquire audio data which is designated for presentation on speakers of the media device . Likewise the virtual audio device module may be configured to receive audio data such as from the media stream and present that audio data on the speakers of the media device .

The content direct sharing module may be configured to send media streams to multiple media devices either as a multicast or as separate streams. For example the media device may provide the media stream to the media devices and for presentation using a multicast. In another example the media device may provide a first media stream to the media device and a second media stream to the media device .

The content direct sharing module may be configured to mirror presentation of content or provide different information to different media devices . In one implementation first content may be presented on the media device providing content direct sharing while different second content is sent to another media device . Continuing the example the media device may present a user interface for controlling presentation of the content while a media stream comprising video is sent to the media device for presentation on a display and a media stream comprising audio is sent to the media device for presentation by the speakers.

The media device may also include a device controller module . The device controller module may be configured to generate media presentation data. In one aspect the media presentation data may include an address and content identifier which when processed by the receiving media device initiates a transfer from a server to the receiving media device over the LAN and or WAN . The address and content identifier may include for example a uniform resource locator URL which directs the target media device to content on the server for retrieval and display on the target media device. Content may be shared from the server to a media device through the transmission of graphical commands as described below.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a camera a microphone a touch sensor a button and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output device and so forth. In some embodiments the I O devices may be physically incorporated with the media device or may be externally placed.

The media device may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the media device and other devices such as other media devices routers access points the servers and so forth. The communication interfaces may include personal area networks wired and wireless local area networks LANs wide area networks WANs and so forth. For example Ethernet Wi Fi Bluetooth ZigBee and so forth.

The media device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the media device .

As shown in the media device includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The CRSM may be any one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the media device .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware resource devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module is configured to provide a user interface to the user using the I O devices and accept inputs received from the I O devices . The user interface may include one or more visual audible or haptic elements. For example the user interface may be configured to provide a graphic user interface an audible user interface and so forth.

One or more application modules may be stored in the memory . The one or more application modules provide functionality which interacts with the user . For example an application module may be a game which is playable by the user.

One or more service modules may be stored in the memory . The service modules provide one or more services comprising one or more data processing functionalities to other service modules application modules or other modules. The one or more functionalities may be associated with presentation of the content on one of the media devices . For example the service modules may be configured to stream audio or video from a server for presentation transfer and present images transfer files and so forth. Other service modules may provide functionality such authentication to confirm information such as the ownership or affiliation of a particular media device .

As described above the communication module is configured to establish and support communications between the media device other media devices servers and other devices. The communication module may provide an abstraction to allow the application modules service modules and so forth to readily interact with corresponding modules on other media devices . The communication module may access the communication interfaces to exchange information between the devices. The communication module is discussed in more detail below with regard to .

As described above the content direct sharing module provides a media stream from a first media device to a second media device . In one implementation the content direct sharing module may provide for concurrent presentation between the first media device and the second or more media devices . In another implementation the content direct sharing module may suppress or discontinue presentation on the first media device while presentation continues on the second or more media devices . For example a media presentation application module on the tablet media device may be receiving a stream of a movie. The content direct sharing module may request from the communication module connections to the pair of television media device and . The communication module may establish these connections and the movie may appear simultaneously on the television media devices and while a user interface allowing for control of the media presentation application module may remain on the tablet media device to facilitate the user s control of the movie playback. The movie may be stored and streamed from one of the media devices such as the tablet media device or may be stored at another location such as a server or other location.

A development module may be stored in the memory of the media device . The development module may include various libraries modules functions and so forth such as may be present in a software development kit or other toolset. The development module may implement functions such as default service implementation in which an initial set of basic service housekeeping issues are defined. The development module may also implement a transport manager configured to select and manage particular transport modules for use based on parameters such as access level associated with the service what transport module the service was discovered over and so forth. The transport modules are discussed in more detail below with regard to .

A digital rights management module may provide support for presenting or processing content which is protected using one or more digital rights management schemes. Other modules may also be present. For example a speech recognition module may be present and used to accept spoken input from the user as received from a microphone I O device .

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

The datastore may store content either in its entirety or a portion. One or more route maps may be stored. The route maps provide information about services on other media devices and the routing to access those services.

Service description objects SDO may be stored. The SDO provides information such as service identifiers access information encryption information and so forth associated with a particular service as provided by a service module . The service identifiers may be used to indicate a particular service which is available. The access information may include details on account names passwords supported transports and so forth. The encryption information may include data such as encryption keys protocols and so forth.

Device objects DOs may also be stored in the memory . These may include a service description array indicating available services local to a particular media device universally unique identifier UUID associated with the particular media device friendly name for the particular media device transport information and so forth. Transport modules and the associated information are discussed below with regard to .

The memory may also store one or more graphics libraries . The graphics library may be configured as an implementation of an application programming interface API to coordinate interactions between applications and a graphics processor when generating graphics. An application programming interface may include a set of functions or routines executed in software and or hardware to specify how computing components should interact with each other. An API may be in the form of a library that includes specifications for routines data structures object classes variables etc. A graphics library may include graphical information for use in generating graphics. The one or more graphics libraries may be configured for particular applications operating systems hardware etc. As used here the term graphics library may include the API and an instantiation of the API. In one example one or more of the graphics libraries may be an API implementation that interfaces between an application and lower levels according to the Open Graphics Library OpenGL Open GL ES EGL or other standards.

Other data may also be stored. For example the other data may include user preferences configuration files and so forth.

The transport modules are configured to provide functionality at a transport layer and establish and maintain communication channels that transfer bits from one media device to another device. In one implementation the transport modules may operate at layer 4 of the Open Systems Interconnection OSI model. The media device may have multiple transport modules available contemporaneously.

The communication module provides a simplified abstraction to the application modules service modules and other modules. A module requiring communication services may use this simplified abstraction to readily initiate communication without the module knowing the details of the particular transport module and type of connection involved. For example a requesting service module on the media device may initiate a request to communicate with the corresponding service module on the media device . This communication may use one or more of several different transport modules but this complexity may be hidden from the requesting service module and from the receiving service module .

Due to the modular nature of the communication module additional transport modules may be easily added without requiring re engineering of the communication module . For example a transport module supporting an infrared optical transport mechanism may be added without disrupting other existing transport modules or other operational aspects of the communication module .

The transport modules may include a secured Wi Fi Display module and a Wi Fi Display socket . These transport modules may be compliant with the Miracast standard promulgated by the Wi Fi Alliance the Intel Wireless Display WiDi standard developed by Intel Corporation or both. The Wi Fi Display transport module allows for peer to peer exchange of media information. This exchange may be encrypted in the case of the secured transport or unencrypted in the case of the unsecured transport. The transport modules may include transport modules configured for the exchange of graphical data and instructions as described below.

Transport modules which are based on Internet Protocol IP server sockets may be provided such as a secure server socket and an unsecure server socket . These transport modules may support wired or wireless communication.

Transport modules may also support the Bluetooth standard as promulgated by the Bluetooth Special Interest Group. A Bluetooth module which is secured may be provided as well as a Bluetooth module which is unsecured.

Other transport modules may also be provided. For example a transport module may provide transport functionality over a wireless WAN such as LTE 3G 4G and so forth. The transport modules may implement a portion of the standard specification or protocol. For example the transport modules associated with Bluetooth may omit application level functions in the Bluetooth specification such as profiles.

A discovery manager manages the device explorers . The discovery manager provides an interface which abstracts the mechanism provided by the device explorers to search for media devices and discover the services associated with those media devices. The discovery manager provides to other modules the results of the discovery while concealing from other modules consuming these results the complexity of the search and discovery processes which may differ from transport module to transport module .

The device explorers are modules which are configured to gather device object data using one or more of the transport modules . The device explorers may process the device objects to generate one or more route maps . The device explorers may also be configured to respond to the device explorers on other devices to distribute device objects route maps or other information.

The device explorers may operate in active or passive modes. The active mode requires some interaction such as user approval before a service is advertised as being available. The active mode may be time limited such that the associated service is only discoverable for a particular period so long as the user is activating a particular command or button and so forth. For example the service module providing output for the tablet media device may be placed in active mode such that the display and speakers of that media device are only discoverable when the user explicitly makes them so.

In comparison the device explorers may operate in a passive mode. In the passive mode the service modules are available without user interaction. For example the AVR media device and the television media device may be configured to operate in passive mode such that any of the media devices in the system may see the resources they have available to share.

Depicted here are device explorers including for simple service discovery protocol SSDP Wi Fi Display Bluetooth Avahi and so forth. The SSDP allows for advertisement and discovery of services over an IP based network using user datagram protocol UDP packets for transfer using one or more of the transport modules . The Avahi explorer may implement a version of Avahi as developed by Lennart Poettering and others. Avahi provides a zero configuration protocol using least a portion of the multicast domain name service DNS DNS based service discovery DNS SD or both to discover and configure an IP based network without user intervention.

The authentication manager is configured to authenticate the media devices in the system and authorize communications with one or more of those media devices . This authentication may be accomplished within the LAN or may involve external resources such as the servers . In one implementation the authentication may involve parsing a device identifier received from another media device to determine a manufacturer or model number. Previously determined devices may then be allowed to communicate. In another implementation a first media device may interrogate the server to authenticate a second media device . For example the tablet media device may discover the presence of the television media device . Continuing the example the tablet media device may send data about the television media device to the server to confirm that connectivity is permitted. The authentication manager may manage this exchange.

In some implementations the authentication manager or another module may be configured to authenticate the identity of the user . In one implementation access levels to services available on the LAN may be based at least in part on user identity. For example the user who lives in a home environment where the system is implemented may have family access when using the device of another user in that environment.

A security manager is configured to manage use of encryption and other techniques to prevent unauthorized use of the media device . For example the security manager may be configured to require a predetermined encryption for administrative access to the communication module . The security manager may work in conjunction with the authentication manager to manage authentication tokens granted to other media devices . The security manager may permit different access levels. These different access levels permit connectivity and operation with different restrictions.

In one implementation the access levels may include levels such as family friend first party devices and guest. The family level allows connections only from another media device which is registered or otherwise associated with a common account. The friend level allows access to a specifically trusted media device . The first party device level indicates that the media device shares a common manufacturer distributor or other attributes. The guest level is similar to friend level access but has a limited duration in time. For example the media device may be considered a friend device when on the same LAN . Particular service modules may define the access levels they will operate with.

The service router is configured to process incoming connections. The service router may route the connection to the authentication manager for processing. Once authenticated and authorized the service router may direct the traffic to the appropriate service module .

The connection manager manages the active connections in the media device . The user interface module may be configured to present to the user various prompts or information such as whether to permit a particular connection whether to seek out a particular connection and so forth.

When one or more media devices desire to exchange content either as a source device or as a target device they may enter a discover mode where each device makes its presence known to other devices. In this manner a source device may detect a target device and vice versa. A communication connection may then be established between the source device and target device. The communication connection may be established through the exchange of messages including instructions to connect the devices for purposes of exchanging information such as graphical information. Graphical information may include graphical commands and or graphical data as described below. Following the establishment of a communication connection the devices may exchange initialization information and beginning a display sharing session. A display sharing session is a session during which graphical commands for execution and display are sent from the source media device to the target media device.

Devices that wish to connect to each other after device discovery may engage in a handshake and connection setup that may be controlled by various components discussed above with regard to . As part of device discovery or connection setup between two or more devices a device may advertise its capabilities including available services communication protocols and constraints hardware capabilities operating OS and the like.

When a source media device connects to a target media device for purposes of display sharing an initialization process may be executed by the devices. The initialization process may occur prior to establishing a display sharing session. During this initialization process various graphical data may be sent to the target device from the source device. Graphical data may include data to be used or referred to when executing a graphical command to generate display data. For example graphical data may include data used by a graphics processor. Examples of graphical data include graphical assets such as geometric information vectorized drawings vector graphics geometric graphics vectorized geometries vectorized geometric primitives textures images or the like. Graphical data may include data to be stored in a graphics library. As part of the initialization process graphical assets may be sent and preloaded into one or more graphics libraries of the target prior to a display sharing session.

Other information such as configuration information may be exchanged between the source media device and target media device either during initialization or as part of device discovery connection setup. Configuration information may include information regarding settings capabilities or other configurations of the respective devices. For example configuration information may include display settings graphics parameters frame rates bit rates or other communication parameters may also be exchanged during this initialization. Configuration information may also include information regarding the different resources both hardware and or software used by the different devices to allow format based conversion of information from one device to another. For example the source and target media devices may exchange information about each other s operating system hardware drivers processor capabilities or other device settings. The source and target media devices may also exchange information about the display configurations of each other s displays such as the respective display s make model resolution refresh rate or the like. Other types of configuration information may also be exchanged.

Such out of band exchanges of graphical data configuration information etc. may continue over a back channel separate from any display sharing sessions while the source media device and target media device remain capable of communicating with each other. Further additional data that may be needed by the target media device to properly display the content may also be sent by the source in band during a display sharing session as needed. Such data may be sent as part of a display sharing communications during lulls in display sharing communications or otherwise.

If communication conditions between the source media device and target media device are such that the target media device is unable to receive all desired graphical elements prior to commencement of a display sharing session certain graphical elements may be prioritized over others for transmission to the target media device. Further different version of certain graphical elements such as low resolution textures etc. may initially be sent to the target media device while more complete versions such as high resolution textures etc. may be sent later as communication conditions allow.

The source media device may keep a record of what graphical information it has sent to the target media device or may otherwise be aware of what graphical information is available to the target media device such as being informed of the target media device s graphics library contents during initialization . Thus the source media device may send the target media device only the graphics assets the target media device does not already have thereby reducing the amount of bandwidth used for the display sharing operations.

The graphics library may include an application interface such as an API or instantiation of an API to interface between the application and the lower level driver processor. The graphics library may operate according to the OpenGL standard. OpenGL describes a language independent API for generating commands for execution by a graphics processor. As shown in a graphics library wrapper or binder may process calls from the application module prior to sending them to the graphics library . The graphics library wrapper may provide a different interface to convert calls from the language of the application module to the language of the graphics library . For example Java OpenGL is a wrapper that allows OpenGL to be used in the Java programming language. The graphics library wrapper may itself be an API. Calls to the graphics library wrapper or graphics library may be called graphics calls.

As illustrated in during operation an application such as an application operated by application module may make an graphics call that is sent to the graphics library wrapper . That graphics library wrapper may then process the call for example by translating the call and send the resulting translation which is itself a call to the graphics library . The graphics library may then process the call to create an instruction such as a command in driver code or the like to a driver graphics processor G or other processor to create rendered images to be sent to the display D of the media device.

In one example an application such as a video game is operated by the appropriate application module . During operation of the game the application module makes a call to the graphics library wrapper . The graphics library wrapper then determines the appropriate graphics library call for executing the desired graphics operation. The graphics library then passes an instruction to the graphics processor G . The graphics processor G then creates display data that may be sent to a display driver or display D to actually create and show images on the display D of the device.

To operate display sharing the calls to the graphics library or graphics library wrapper or the graphical instructions from the graphics library to the graphics processor G or other graphical commands of a source media device may be duplicated and routed to a target media device for native graphics generation on the target media device to perform display mirroring as described above. As shown in in one aspect graphics calls from a graphics library wrapper are sent to another module of a media device such as the content direct sharing module or other module. The content direct sharing module may then duplicate the graphics calls from the graphics library wrapper and send them and or other graphical information to a communication interface to be sent to a different i.e. target media device. The communication module not shown may mediate exchanges between the content direct sharing module and the communication interface . In this configuration the graphics library wrapper may intercept and manipulate calls from the application module prior to the calls being processed by the graphics library or sent to the content direct sharing module. The content direct sharing module may also send the target media device graphics calls to the graphics library wrapper or graphical instructions to the graphics processor G .

In one aspect the present system differs from prior display mirroring techniques in that the present system is configured to send graphical commands from a source media device to a target media device. Prior display mirroring techniques are configured to send display data between devices. The difference between graphical commands and display data is that graphical commands are higher level instructions for executed by higher layer computing resources such as an API or processor and display data is instructions and data used by lower layer computing resources such as instructions configured for a monitor or display. Graphical commands may include commands like clear screen set vertex buffer draw elements set texture and the like. Graphical commands may operate on graphical data such as vector data used to draw lines and shapes including indices vertices lines points curves shapes polygons color tangent etc. non vector data such as textures etc. graphical data address information or other data used by a processor to render graphics.

Graphical commands may operate on pre rasterized data. Rasterization describes a process for mapping shapes to pixels for display on a display device. Rasterization typically occurs at the lower levels of a graphics pipeline such as that shown in . Pre rasterized data may be data that is described in a vector graphics i.e. shape format rather than in a raster image i.e. pixels or dots format. Such pre rasterized data may include the graphical data and graphical assets mentioned above including vector data non vector data and the like. Graphical commands may also operate on pre rendered data. Rendering describes a process for generating an image from a model. Pre rendered data may be data from which a pixel image may be generated. Such pre rendered data may include for example model or scene files including geometry data viewpoint data texture data lighting data shading data and the like. Display data may include post rendered or post rasterized image data such as bitmap data video data or pixel data for use by a display. Pixel data may include data to generate images for particular points on a display or image. Pixel data may include for one or more pixels color brightness and or location. Graphical commands generally do not include display data. Graphical commands generally involve further execution or further processing in order to generate displayable data.

Display data may typically be configured or formatted for the particular display the images are to be sent to. For example display data may be created in a format designed for a 720i resolution display where pixel information is generated for a high definition screen with 1280 720 pixels and where display data is output in a manner designed for an interlaced display. In another example if display data is configured for a screen with a refresh rate of 60 Hz the display data may include information to refresh the screen 60 times per second. In a traditional display mirroring system this display data i.e. formatted for a 720i 60 Hz screen would be created and sent both to the screen of a source device and to a target device for display. Such display data may include for example encoded video data such as H.264 MPEG 4 encoded video as may be used by traditional display mirroring system. If however the target device had a screen that was configured differently from the source screen for example the target device had a 1020p 120 Hz screen or a 4K screen the result would be the target device displaying display data configured for the source screen that was inferior to display data had it been formatted for the native target screen. In the present system by sending graphical commands from the source media device to the target media device the target media device may natively execute the graphical commands to create display data configured and formatted for the screen of the target device.

The differences between graphical commands and display data may be further explained in reference again to . As illustrated in graphical commands may include the graphics calls from an application module to an API such as the graphics library wrapper or the graphics library . Graphical commands may also include API calls from the graphics library wrapper to the graphics library . Graphical commands may also include instructions sent to the driver or graphics processor G such as those sent from the graphics library . Display data may include processed images such as rendered or rasterized images created by a processor such as a graphics processor G and output to a frame buffer or a display. Commands from the application module through the graphics processor G are generally considered graphical commands and data from the graphics processor G to the display D are generally considered display data. In prior display sharing systems display data is sent to a target media device T . In the present system graphical commands are sent to the target media device T . The graphical commands sent to the target media device T may also include other graphical information such as graphical data as explained herein such as graphical resources to generate images for a display.

In another aspect as shown in a source media device may be configured with a special graphics library . The special graphics library may act as the main graphics library in a device allowing it to capture graphical commands from any application or system process. As shown in the special graphics library may intercept graphical commands which are then sent to the graphics library of the source media device. The special graphics library may exist on both the source media device S and on the target media device T . The special graphics library may be configured to assist with display sharing. That is the special graphics library may be an implementation of an API configured in a manner designed to efficiently exchange graphical commands and graphical data between the source media device S and the target media device T for example by using a standard set of instructions or resources that may be shared among devices that are configured for display sharing as described herein.

The special graphics library may be located between the graphics library wrapper and the graphics library . In one aspect the content direct sharing module which may also coordinate communications between devices may be located between the graphics library wrapper and the special graphics library . In this manner graphics calls such as those from the graphic library wrapper or elsewhere or other graphical information may be reformatted or otherwise manipulated by the content direct sharing module or other module to be compatible with the special graphics library . . For example certain graphical assets may be referred to by a particular memory address in the graphics library but may be at a different location in the special graphics library . Thus the memory address in a call from the graphics library wrapper may be changed prior to being sent to a target device. In another example the special graphics library may be written in another language from the graphics library wrapper which itself is typically written to interact with the graphics library rather than the special graphics library . Thus the content direct sharing module or other module may change the language of the call prior to passing the call to the special graphics library . In this situation the content direct sharing module or other module may mediate calls between the graphics library wrapper and the graphics library . In another example if the special graphics library may be configured to operate as a mediator between calls between the graphics library wrapper and the graphics library or other interface with the hardware drivers.

In one aspect all graphics and images appearing on the display of the source media device S may be processed through the special graphics library . This may make display sharing easier when the special graphics library is also be replicated on one or more different target media devices T . For example graphics calls of the source device that are manipulated into the format of the special graphics library may be more easily handled by the target device when the target device is also configured with a special graphics library configured to interact with the graphics library of the target device. Similarly certain graphical resources i.e. graphical assets may be referred to in the same way in the special graphics library of a source media device as in the special graphics library of the target media device. In this manner calls to a special graphics library of the source device may be sent directly to the target media device for execution at the target media device. Thus after receiving graphics calls from the graphics library wrapper the content direct sharing module may manipulate the graphics calls according to the configurations of the special graphics library and send the manipulated graphics calls to both the special graphics library for processing on the source media device and to the communication interface to be sent to a target media device.

If a source media device S is configured with a special graphics library but no target media device is detected and or enabled graphical commands will not be forwarded and may be processed by the source media device S as normal. If a target media device is detected and display sharing is activated graphical information may otherwise be manipulated prior to sending to the target media device to assist in processing the graphical information by the target media device. This manipulation may also include altering or removing certain unnecessary graphical commands at the source media device prior to sending to the target media device in order to conserve bandwidth and otherwise improve display sharing efficiency. For example the content direct sharing module or other appropriate module may detect and or remove redundant state changes or no effect commands. The content direct sharing module may also detect and or removed duplicated or overlapping memory blocks in resources. The content direct sharing module may also perform compression potentially lossless compression of certain resources to reduce transmission payload size. The content direct sharing module may also coordinate asynchronous transmission of resources that are not needed immediately such as textures etc. as described in reference to the out of band initialization and configuration processes.

The graphical commands which may initially be configured for the source device such as based on the source device s OS or other setting may be reconfigured prior to being sent to the target device. Graphical data which may initially be configured for the source device may also be reconfigured prior to being sent to the target device. If graphical data is reconfigured corresponding graphical command s may also be reconfigured so the graphical command sent to the target device is configured to expect and operate on the new graphical data. For example graphical commands may be translated into a language that may be more easily understood at the target side the graphical commands may be reformatted based on a configuration of the target device such as based on the target device s OS or other setting may be reformatted based on the special graphics library of the target device or otherwise. In another example vector data for operation on by a graphical command may be transformed to match a screen area of the target device by scaling the geometries of the vector data up or down. In another example a graphics command may be changed to alter the drawing area and resolution to match the target device. In another example a graphical command or group of graphical commands may be changed to another graphical command or group of graphical command if a target device does not support the original graphical command s and or if the substituted graphical command s would otherwise perform the desired task. For example shaders may be used to process vertices geometries etc. In another example a pre rendered image referred to by a graphical command may be converted to a format or configuration that the target device can read and use. In another example output frame buffers may be reconfigured to match the target device display and to handle gamma issues to adjust for brightness differences.

The manipulated graphical commands are sent wirelessly over the network to the communication interface T of the target media device T . The received commands may then be passed to an application or module running on the target media device T that is capable of processing the instructions. As illustrated this module is the content direct sharing module T however a different application or module may be used. The manipulated graphical instructions are then sent to the special graphics library T of the target media device T which then processes the instructions for communication with the graphics library T and the graphics processor G T for eventual execution and rendering on the display D T of target media device T . Thus referring again to the media stream sent from a source media device to a target media device may take the form of graphical commands to be executed at the target media device. In prior systems the media stream would be display data such as specific pixel instructions such as video data or rasterized pixel data output from graphics processor G T to be shown on display D S . By sending graphical commands from an API level layer instead of display data such as pixel data the target device may render its own graphics based on the configurations of its processor s display etc. Although illustrates a graphical command from the graphics library wrapper being sent from the source media device S to the target media device T any graphical command generated in the source media device S may be sent to the target media device T for display sharing.

In another configuration of the system a special graphics library may not be used by the source media device and or the target media device. In this configuration graphical information at the API level i.e. created by the application module S graphical information output from the graphics library wrapper S and or graphical information output from the graphics library S may be sent from the source media device S to the target media device T . The sent graphical information is then used by the target media device T to natively generate graphics and images by the processor s of the target media device for rendering on the display D T of the target media device T . The graphics libraries of the target media device T may store graphical data sent by the source media device S during the display sharing session or sent as part of out of band communications such as the initialization process discussed above. In one aspect a source media device may also send timing information or instruction to one or more target devices to coordinate display of the images among the devices source and or target s so that images are synchronized and or displayed at the correct time when viewed by a user.

The display sharing system may also allow for display sharing among more than two devices. For example as shown in a source media device S may send graphical commands across the network to multiple target media devices T . The individual target devices may then process the graphical commands natively for each respective display of the target media devices T thereby sharing the display of the source media device S among multiple targets. In another example as shown in a target media device T may receive content from multiple source media devices S S and S . The target media device T may divide its own display to show the content from the respective source media devices content and on different portions of the target s display possibly leaving some of the target s display for other content not received from a separate device. The content sent by the source media devices to the target media device is represented by graphical commands generated by the individual source media devices as illustrated in and described above.

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in in the figures above can be eliminated or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in a computer readable storage medium as instructions executable on one or more processors.

The computer readable storage medium can be any one of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. Separate instances of these programs can be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations.

Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

