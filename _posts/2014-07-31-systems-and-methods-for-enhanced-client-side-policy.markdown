---

title: Systems and methods for enhanced client side policy
abstract: An appliance and method for authorizing a level of access of a client to a virtual private network connection, based on a client-side attribute includes the step of establishing, by an appliance, a control connection with a client upon receiving a client request to establish a virtual private network connection with a network. The appliance transmits, via the control connection, a request to the client to evaluate at least one clause of a security string, the at least one clause including an expression associated with a client-side attribute. The client transmits, via the control connection, a response to the appliance comprising a result of evaluating the at least one clause by the client. The appliance assigns the client to an authorization group based on the result of evaluation of the at least one clause.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09407608&OS=09407608&RS=09407608
owner: CITRIX SYSTEMS, INC.
number: 09407608
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20140731
---
The present application is a continuation in part of and claims priority to and the benefit of U.S. Non provisional application Ser. No. 14 077 119 entitled Dynamic Data Optimization in Data Network and filed on Nov. 11 2013 which is a continuation of and claims priority and the benefit of U.S. Non provisional application Ser. No. 11 439 009 entitled Dynamic Data Optimization In Data Network and filed on May 22 2006 and now issued as U.S. Pat. No. 8 583 827 which claims priority to and the benefit of U.S. Provisional Application No. 60 685 260 entitled Advanced Data Optimization and filed May 26 2005 and the present application is also a continuation in part of and claims priority to and the benefit of U.S. Non provisional application Ser. No. 13 760 898 entitled Method And System For Authorizing A Level of Access of A Client To a Virtual Private Network Connection Based On a Client side Attribute and filed on Feb. 6 2013 which is a continuation of and claims priority to and the benefit of U.S. Non provisional application Ser. No. 11 465 915 entitled Method And System For Authorizing A Level of Access of A Client To a Virtual Private Network Connection Based On a Client side Attribute filed on Aug. 21 2006 and now issued as U.S. Pat. No. 8 397 287 all of which are incorporated herein by reference in their entirety for all purposes.

The present invention generally relates to data communication networks. In particular the present invention relates to a method and system for authorizing a level of access of a client to a virtual private network connection based on a client side attribute.

Internet access is becoming pervasive wireless access is available anywhere one can use a mobile phone. However user experience is far from uniform on these networks. The network topology and access type can greatly affect the user experience. Consider the following examples 

First a user can connect to a corporate 100 Mbps LAN and access Internet sites. How fast the connection feels to the user can be dominated by the corporate uplink to the backbone. For example if it is a 1000 person company sharing a 384 Kbps DSL link it will be very slow. However if they have a 1 Mbps T1 link shared amongst 50 people it can feel much faster.

Second a user can setup a 11 Mbps WiFi network in their home and use a 2 Mbps cable modem to connect to the Internet. In this case the user s experience will be dominated by the 2 Mbps cable modem that is actually shared by all the people on the block.

Finally a user can use a 40 Kbps GPRS modem to connect to a mobile network which has a T1 connection to the backbone. In this case the T1 is shared amongst all of the connected users but unless the network provider is over provisioned this link will be underutilized. Thus the GPRS link will dominate the user experience.

The common thread in all of these scenarios is that disparate networks connect together to give a user access to the Internet but the user experience is typically dominated by a single link in that topology.

Before an endpoint gains access to corporate enterprise network infrastructure and resources it is increasingly becoming necessary to determine that the endpoint has undergone host security checks and audits to verify that it meets corporate information technology policies. Examples of such checks include without limitation verifying that the anti virus software on the endpoint is up to date that the latest operating system patches have been installed and that no malicious software is executing on the endpoint. Performing these checks minimizes the infection of other connected corporate assets by a compromised endpoint.

Conventional methods of access control typically require receipt and evaluation of authentication credentials from a client prior to granting access. The credentials are typically presented to an access infrastructure or other security gateway which determines what types of access may be provided to the client. Methods for requesting and receiving these credentials typically generate additional administrative burdens. For example if a user is entering the credentials into a user interface the request for the required credentials must be translated into a format understandable the user for example from the expression in which the policy was added to a request identifying the explicit credentials required for evaluation of the policy. When the credentials are received from the user in some methods a policy engine applies a policy to the credentials in making an access control decision. This typically requires transmission from a component receiving the credentials to the component making the access control decision generating additional delay in situations where the components are remotely located from each other and from the client.

A method minimizing administrative burden in requesting user credentials by transmitting an expression of a policy to a client without modifying the format of the expression would be desirable. A method for evaluating such an expression by the client minimizing the number of components required to reach an access control decision would also be desirable.

In one aspect a method for authorizing a level of access of a client to a virtual private network connection based on a client side attribute includes establishing by an appliance a control connection with a client upon receiving a client request to establish a virtual private network connection with a network. The appliance transmits via the control connection a request to the client to evaluate at least one clause of a security string the at least one clause including an expression associated with a client side attribute. The client transmits via the control connection a response to the appliance comprising a result of evaluating the at least one clause by the client. The appliance assigns the client to an authorization group based on the result of evaluation of the at least one clause.

In one embodiment the appliance transmits the request to evaluate the at least one clause to a collection agent. In another embodiment the client executes a script to evaluate the at least one clause. In still another embodiment the client gathers information associated with the client side attribute. In yet another embodiment the client evaluates the at least one clause responsive to the gathered information.

In one embodiment the client identifies a client side attribute indicating a presence on the client of one of the following a version of an operating system a service pack of the operating system a running service a running process and a file. In another embodiment the client identifies a client side attribute indicating a presence on the client of one of the following antivirus software personal firewall software anti spam software and internet security software. In still another embodiment the client identifies a client side attribute identifying a version of one of the following antivirus software personal firewall software anti spam software and internet security software.

In one embodiment the appliance evaluates a second clause of the security string. In another embodiment the client evaluates a clause of the security string comprising one or more logical operations. In still another embodiment the appliance transmits the response comprising the result of the evaluation to a policy engine. In yet another embodiment the appliance assigns the client to the authorization group responsive to an application of a policy by the policy engine to the result of the evaluation.

In one embodiment the appliance determines that the client lacks a desired client side attribute responsive to the result of evaluation of the at least one clause. In another embodiment the appliance assigns the client to an authorization group providing quarantined access to the network via the appliance. In still another embodiment the appliance denies a login request from a client if the security string is not associated with an authorization group. In yet another embodiment the appliance establishes a virtual private network connection with the client in accordance with the authorization group.

In another aspect a system for authorizing a level of access of a client to a virtual private network connection based on a client side attribute includes a means for transmitting a request a request for evaluation of at least one clause of a security string an evaluation component a means for transmitting a response to the request and a means for receiving an assignment to an authorization group. The system comprises a means for transmitting by a client a request to an application for a virtual private network connection to a network. The client receives a request via a control connection between the client and the appliance for evaluation of at least one clause of a security string the at least one clause identifying an object for evaluation an attribute of the object and a pre requisite associated with the attribute. An evaluation component on the client identifies the attribute and determines whether the attribute satisfies the pre requisite and evaluates the at least one clause. The system comprises a means for transmitting by the client via the control connection a response comprising a result of the evaluation of the at least one clause by the evaluation component. The system comprises a means for receiving from the appliance an assignment to an authorization group the assignment determined based on the evaluation of the at least one clause.

In one embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying the client as an object for evaluation. In another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying a presence of an application program on the client as an attribute of the object. In still another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying an absence of an application program on the client as an attribute of the object. In yet another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying a presence of a version of an application program on the client as an attribute of the object.

In one embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying an absence of a version of an application program on the client as an attribute of the object. In another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying a presence of a required version of an application program on the client as a pre requisite. In still another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying a presence of an application program on the client as a pre requisite. In yet another embodiment the request received by the client includes at least one clause of a security string the at least one clause identifying an absence of an application program on the client as a pre requisite.

In one embodiment the evaluation component executes a script to evaluate the at least one clause. In another embodiment the evaluation component further comprises a collection agent gathering information associated with the attribute. In still another embodiment the evaluation component evaluates the at least one clause responsive to the gathered information. In yet another embodiment the evaluation component is transmitted to the client from the appliance.

In one embodiment the evaluation component identifies an attribute indicating a presence on the client of one of the following a version of an operating system a service pack of the operating system a running service a running process and a file. In another embodiment the evaluation component identifies an attribute indicating a presence on the client of one of the following antivirus software personal firewall software anti spam software and internet security software. In still another embodiment the evaluation component identifies an attribute identifying a version of one of the following antivirus software personal firewall software anti spam software and internet security software. In yet another embodiment the evaluation component determines that that the attribute satisfies the pre requisite responsive to the identification of the attribute.

In one embodiment the means for receiving an assignment further comprises a means for receiving an assignment made responsive to the result of evaluation of a second clause by the appliance. In another embodiment the means for receiving an assignment further comprises a means for receiving an assignment made responsive to a determination by the appliance that the client lacks a desired attribute. In still another embodiment the means for receiving an assignment further comprises a means for receiving an assignment to an authorization group providing quarantined access to the network via the appliance. In yet another embodiment the means for receiving an assignment further comprises a means for receiving a denial by the appliance of the client request if the security string is not associated with an authorization group. In a further embodiment the means for receiving an assignment further comprises a means for receiving an a denial by the appliance of the client request if a pre requisite in the security string is not satisfied.

In some aspects the present solution is directed to a method for adjusting tuning settings based on an attribute of a client. The method includes identifying by a device intermediary to a client and a content server a policy for evaluating the client responsive to a first request of the client to access the content server. The policy specifies an expression comprising a clause to be evaluated by the client to identify an attribute of the client. The method also includes transmitting by the device to the client a second request to the client to have the client evaluate the clause and receiving by the device from the client a response to the second request the response comprising the attribute of the client. The method further includes receiving by a server intermediary to at least the client and the content server the attribute of the client from the device. The server is configured with tuning settings for improving performance of communications of response data from the content server to the client. The method also includes adjusting by the server the tuning settings based on the attribute of the client.

In some embodiments the expression includes a plurality of clauses joined by one or more logical operators. Each clause of the plurality of clauses to be evaluated by the client to identify a different attribute of the client.

In some embodiments the attribute identifies an application of the client and the server adjusting the tuning settings that correspond to the network data. In some embodiments the attribute identifies network data and server adjusts the tuning settings that correspond to the network data. In some embodiments the attribute identifies a characteristic of a network to which the client is connected and the server adjusts the tuning settings that correspond to the characteristic of the network.

In some embodiments the method includes adjusting by the server the tuning settings based on user preferences. In some embodiments the method includes manipulating by the server response data from the content server based on techniques corresponding to the adjusted tuning settings.

In some aspects the present solution is directed to a system for adjusting tuning settings based on an attribute of a client. The system includes a device intermediary to a client and a content server. The device may be configured to identify a policy for evaluating the client responsive to a first request of the client to access the content server. The policy specifies an expression comprising a clause to be evaluated by the client to identify an attribute of the client. The system may also include a server intermediary to at least the client and the content server. The server may include one or more tuning settings for improving performance of communications of response data from the content server to the client. The device may be configured to transmit a second request to the client to have the client evaluate the clause and receive from the client a response to the second request the response comprising the attribute of the client. The server may be configured to receive the attribute of the client from the device and adjust the tuning settings based on the attribute of the client.

In some embodiments the expression includes a plurality of clauses joined by one or more logical operators with each clause of the plurality of clauses to be evaluated by the client to identify a different attribute of the client.

In some embodiments the attribute identifies an application of the client and the server is configured to adjust the tuning settings that correspond to the network data. In some embodiments the attribute identifies network data and the server is configured to adjust the tuning settings that correspond to the network data. In some embodiments the attribute identifies a characteristic of a network to which the client is connected and the server is configured to adjust the tuning settings that correspond to the characteristic of the network.

In some embodiments the server is configured to adjust the tuning settings based on user preferences. In some embodiments the server is configured to manipulate response data from the content server based on techniques corresponding to the adjusted tuning settings.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Reference will now be made in detail to the exemplary embodiments implemented according to the present solution the examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Client device is a device that can access remote services through wireless means. For example client device can be any type of device that has wireless communication capabilities such as a computer a laptop a PDA a cell phone a portable game machine or any device accessing the Internet. In some embodiments client device stores a user s preferences such as whether a user prefers a faster downloadable webpage or a better webpage image and network preference e.g. AT T v. Alltel . Additionally the client device can include a user agent that acts as a client device application used with a network protocol. For example the user agent could be a web browser a search engine crawler a screen reader or a Braille browser and the user agent could be used to access the Internet. The user agent can be a software program that transmits request data e.g. an HTTP HTTPS WAP request etc. to a web server and receives a corresponding web page in response to the HTTP request. For example client device could be the Bytemobile Optimization Client

Gateway is a device that converts formatted data provided in one type of network to a particular format required for another type of network. Gateway for example may be a server a router a firewall server a host or a proxy server. The gateway has the ability to transform the signals received from wireless networks into data packets that network can understand and vice versa. For example gateway can be a Gateway GPRS Support Node GGSN or a Packet Data Support Node PDSN .

Database is a remote data storage device that stores information relating to the identification of a user and or client device. For example database can store information such as phone number of the client device cell site of mobile phone the charging plan for the phone user s name user password user preferences etc. The database receives authentication requests authenticates the user and the client device based on the data within the authentication requests and grants the client device the ability to connect when the database authenticates the client device. In some embodiments database receives these authentication requests from gateway . In some embodiments database receives these authentication requests from optimization server .

Networks and can include any combination of wide area networks WANs local area networks LANs or wireless networks suitable for networking communication such as Internet communication.

Optimization server OS is a server that provides communications between gateway and content servers . For example OS could be a Bytemobile Optimization Services Node. OS can provide optimized response data to client device based on received network data. OS can store tuning settings that are based on the network characteristics of the wireless network that client device is connected to. In some embodiments OS stores a user s preferences. OS can include optimization techniques which are further described below. Further in some embodiments OS can include or be communicatively coupled with a control filter node that would determine whether any of the information received from the content servers needs to be filtered based on the user s preferences stored at the client device. In some embodiments the user s preferences can be stored at OS instead of the client device.

Content servers are servers that receive the request data from user agent and or OS process the request data accordingly and return the response data back to user agent . For example content servers can be a web server an enterprise server or any other type of server. Content servers can be a computer or a computer program that is responsible for accepting HTIP requests from the user agent and serving the user agents with web pages.

Wireless networks are telephone or computer networks that can use radio signals as their carrier or physical layer. A wireless network supports devices that communicate using wireless technology. Wireless networks can be any type of wireless network such as a cellular network or a CDMA network using a 2G or 3G telecommunication standard. A wireless network hub or router not shown can be used to bridge the wireless network to traditional Ethernet or home phone line networks or provide a shared internet connection.

As shown in client device may communicate with a wireless network by communicating data to a wireless telecommunication station WTS for example WTSs . WTSs are radio transmitter receivers such as antennas base stations etc. that have the ability to maintain communications with client device within a given range. For example once a client device is detected to be out of the range of first zone the first WTS may pass the information to the second WTS of a second zone so the second WTS can maintain communications with the client device.

After first wireless network receives the communications first wireless network routes the signal corresponding to the communication to gateway . Gateway converts the signal into IP based data packets so that network and or database can process the data accordingly. Gateway can then query database by providing an authentication request in exchange for an authentication response. Once database has received the authentication request database can authenticate the request by identifying the client device and or the user on client device . For example database identifies the user by determining whether the phone number from client device along with the user s name and password match the information stored at database. Based on the authentication database transmits an authentication response to gateway . If the authentication response is valid gateway can connect the user to the rest of the network. If the authentication response is invalid gateway has the ability to prevent the connection. In this exemplary embodiment the authentication information is assumed to be valid. It will be readily appreciated that in some embodiments instead of gateway querying the database OS can query database and authenticate the client device .

After gateway has authenticated the user gateway forwards the data packets to OS . For example gateway can transmit the data packets to the OS using a Remote Authentication Dial In User Service RADIUS protocol. In some embodiments gateway can provide network data to any necessary nodes such as database and or OS the type of network the client device is using or if the client device has switched networks. The network data can be any type of data that describes the network such as the type of network that the user is connected to e.g. 2G 2.5G 3G WLAN etc. the cell tower the user is using the IP address allocated to the user the phone number of the user etc. When gateway is notified of a network switch gateway uses the RADIUS protocol to push the network data to OS . In some embodiments gateway pushes this network data to database which then pushes the network data to OS . Once OS receives the network data OS can adjust its tuning settings based on the network data and provide optimized response data to the client device based on these settings. For example OS can use the network data to adjust the tuning settings and provide advanced optimization techniques such as among other things determining whether it would be more beneficial to send a higher quality image to the client device or if the image can have a lesser quality as long as the image gets to the client device faster. When the OS receives response data from a content server the OS can manipulate the response data based on the optimization techniques and transmit the manipulated optimized response data to the client device .

In some embodiments instead of gateway providing the network data OS can pull the network data from any device on the network such as database . OS can request the network data from database via a lightweight directory access protocol LDAP interface. In response database can transmit a response that provides network data to OS and hence the OS pulls the network data from database . Once again the OS can adjust its tuning settings based on the network data and provide optimized response data to the client device based on these settings.

In some embodiments OS can sample the network characteristics of the connection to client device and receive network data that assists the OS in determining the type of wireless network that client device is connected to and or whether the client device has switched networks. OS can use various feedback mechanisms within the protocol to determine this network data. Such feedback mechanisms can include tracking estimated bandwidth and round trip times in the TCP stack. Based on the feedback OS can determine which network a particular TCP connection is routed through. Other feedback mechanisms can include among other things determining the packet loss instantaneous packet loss average packet loss trends in packet loss whether 5 data packets have been lost in the last 100 which 5 data packets were they the first five the last five instantaneous latency jitter changing latency average latency instantaneous bandwidth average bandwidth over a period and how the bandwidth changes over time. In addition these feedback mechanisms may be triggered periodically or based on the input received from the other nodes to determine the network associated with the client device . For example OS could pull data from the database periodically or if OS detects a change in latency OS could sample the network to determine which wireless network that client device is connected to. For the best results OS can be provided with network data by using all three embodiments of pushing pulling and sampling the network data.

OS can use the network data to optimize performance for a user of client device . There are a number of ways to invoke a specific set of optimization and tuning settings based on the network. These preset tuning settings and configurations can be stored at OS for each set of network characteristics or network types so that OS can provide optimal performance to client device . These stored tuning settings may be predetermined and stored in advance for each type of wireless network. For example when OS detects that client device is using a 2G wireless network OS can adjust its tuning settings by accessing the stored tuning settings that correspond to the 2G network so that it can provide optimal efficient optimized response data to client device . OS can also take into consideration the characteristics of the wireless network to configure or reconfigure the tuning settings. For example after OS provides the 2G tuning settings OS can further adjust its tuning settings by receiving subsequent network data such as the speed of request response traffic at the 2G wireless network and inputting the network data into algorithms that are designed to modify the tuning settings to further optimize performance. Or OS without determining the type of network adjusts the tunings based on the feedback mechanisms which describe the network s characteristics. Furthermore OS has the ability to adjust the tuning settings based on the user s preferences such as the downloading time for a web page is more important to a user than the webpage s appearance or blocking all non text content when using a small screen limited bandwidth client device.

Because different situations need different optimization algorithms optimization technology first classifies the type of network being used and the types of data it carries. For instance low speed networks benefit mainly from data reduction techniques whereas high speed networks benefit mostly from protocol acceleration techniques. OS can determine the right mix of algorithms that are used for each instance. These optimization algorithms can include lossless compression GZIP DEFLATE etc. per the HTTP RFC lossy compression of images GIF JPEG PNG etc. and the optimization techniques described in Method and System for Dynamic Interleaving U.S. application Ser. No. 10 871 905 Method for Delta Compression U.S. Application No. 11 439 068 Method and System for Object Prediction U.S. Application No. 11 439 003 and Method for Multipart Encoding U.S. Application No. 11 439 330 all of which are hereby incorporated by reference. Further OS selects appropriate algorithms at the beginning of each session and modifies them as needed in real time as the session progresses.

By vastly reducing the amount of data being transmitted across the network OS minimizes transfer times and bandwidth needs. It also minimizes the amount of infrastructure required to support higher and richer traffic volumes. To do this OS incorporates these optimized techniques of format reduction data compression and caching. System administrators as well as end users who are running the user agents can also select the desired level of optimization. OS incorporates advanced format reduction techniques restructuring data to achieve optimal compression levels. Format reduction includes techniques that improve the efficiency of HTML JavaScript and CSS code prior to individual compression. Both generic and specific techniques can be used to compress data. Regular text may require only generic compression whereas images multimedia and certain document types may require specific compression techniques.

At some point after OS has received network data client device moves from first zone to second zone . Client device which is now located in second zone establishes communications with second wireless network through second WTS .

After second wireless network receives the communications second wireless network routes the request data to gateway . Gateway converts the request data into IP based data packets so that network and or database can process the data accordingly. Gateway can send an authentication request to database for authenticating as described above in step . If the database returns authentication information that the authentication data was valid gateway connects the user to the rest of the network. Otherwise if the database returns authentication information that the authentication request was invalid gateway will not connect the user. In this exemplary embodiment the authentication request is valid.

After gateway has authenticated the user gateway forwards the data packets to OS . As stated above OS can be provided with network data by using all three embodiments of pushing pulling and or sampling the network data. OS can use this network data to adjust its tuning settings based on the characteristics of the second wireless network . Once the OS has adjusted its tuning settings OS can form optimized response data by manipulating any received response data based on the tunings settings that correspond to the second wireless network. The OS can then transmit the optimized response data to the client device . As a result OS can provide a seamless transaction by optimizing the performance of the transmission which was described above of optimized response data e.g. HTTP content data to client device .

After the OS has received the network data the OS can determine whether the characteristics of the wireless network has changed based on the received network data. For example the characteristics can include the network s type speed packet loss instantaneous packet loss average packet loss instantaneous latency jitter average latency instantaneous bandwidth average bandwidth changes in bandwidth etc. Further the characteristics can include the usage patterns of the client device. For example if the client device is attempting to download more data than the slow wireless link can provide then it the OS may increase the compression ratio such that the data would get to the client device faster even though the client is on a fast network. If the network has not changed the OS can optimize any received response data by manipulating the response data based on the current tuning settings. These tuning settings correspond to the current wireless network that provided the network data. The OS can then provide optimized response data to the client device based on maintained tuning settings at the OS and the method can proceed to connector .

On the other hand if the characteristics of the network that the client device is connected to has changed the OS can update the tuning settings based on the characteristic of the new wireless network which allows OS to provide optimized communications from one or more web content servers to the client device. Then the OS can optimize any received response data by manipulating the response data based on the updated tuning settings. The OS can then provide optimized response data to the client device based on the updated tuning settings. In some embodiments the tuning settings are further updated based on user preferences. The method can proceed to connector and then end .

For example when a client device connects to the Internet and requests to download a web page the client device has the ability to transmit request data packets through a gateway to the content servers. These data packets may relate to the requested web page and or the URL associated with the web page. The content server receives these data packets and transmits response data that corresponds to the requested data packets. The OS receives the response data and optimizes the response data based on the tuning settings that correspond to the network characteristics of the wireless network that the client device is connected to. If the network characteristics change based on the movement of the client device or the traffic at the wireless network the tuning settings can be readjusted.

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

The appliance may be or include any implementations of the optimization server or gateway described in connection with at least . The appliance may perform the functionality of any implementations of the optimization server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the client to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio. The client may be or include any implementations of the client device described at least in connections with .

The server may be or include any implementations of the servers or and or gateway described in connection with at least In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the appliance . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and with a second network . In some embodiments the appliance terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the appliance may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the appliance . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element nat comprise a data object in memory of appliance . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the appliance such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the encryption processor . In other embodiments the encryption engine comprises executable instructions running on the encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to a block diagram depicts another embodiment of the appliance . In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . In one embodiment the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred to herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client . In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides an SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is a network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a mini filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client and or a collection agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. Other embodiments of the application client include a Remote Display Protocol RDP client developed by Microsoft Corporation of Redmond Wash. an X Windows client a client side player interpreter or simulator capable of executing multimedia applications email Java or .NET code. Moreover in one embodiment the output of an application executing on the server can be displayed at the client via the ICA client.

In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as payload of network packet of the transport layer protocol The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Communication between a program neighborhood enabled client and a server or appliance may occur over a dedicated virtual channel that is established on top of an ICA virtual channel. In some embodiments the communication occurs using an XML service. In other embodiments the client runs a client side dialog that acquires the credentials of a user of the client . In still other embodiments a user management subsystem on a server receiving the credentials of the user may return a set of distinguished names representing the list of accounts to which the user belongs. Upon authentication the server may establish a program neighborhood virtual channel a control channel or other communications channel. In yet other embodiments an acceleration program may also be transmitted to the client in response to a client request.

In some embodiments a client may use the client agent to browse farm servers and applications in the farm . In one embodiment each server includes an ICA browsing subsystem to provide the client with browsing capability. After the client establishes a connection with the ICA browser subsystem of any of the servers that browser subsystem supports a variety of client requests. Such requests include 1 enumerating names of servers in the farm 2 enumerating names of applications published in the farm 3 resolving a server name and or application name to a server address that is useful to the client . The ICA browser subsystem also supports requests made by clients running a program neighborhood application that provides the client upon request with a view of those applications within the farm for which the user is authorized. The ICA browser subsystem forwards all of the above mentioned client requests to the appropriate subsystem in the server .

In one embodiment a user of the client selects an application for execution from a received enumeration of available applications. In another embodiment the user selects an application for execution independent of the received enumeration. In some embodiments the user selects an application for execution by selecting a graphical representation of the application presented on the client by a client agent . In other embodiments the user selects an application for execution by selecting a graphical representation of the application presented to the user on a web server or other server . In some embodiments an appliance or acceleration program accelerates delivery of the graphical representation. In some embodiments an appliance caches or stores the graphical representation. In some embodiments an appliance may cache or store any and all of the associated applications or portions of the associated applications.

In some embodiments when a client connects to the network the user of the client provides user credentials. User credentials may include the username of a user of the client the password of the user and the domain name for which the user is authorized. Alternatively the user credentials may be obtained from smart cards time based tokens social security numbers user passwords personal identification PIN numbers digital certificates based on symmetric key or elliptic curve cryptography biometric characteristics of the user or any other means by which the identification of the user of the client can be obtained and submitted for authentication. The server or appliance responding to the client can authenticate the user based on the user credentials.

In some embodiments the client provides credentials upon making a request for execution of an application to a server directly or through an appliance . In one of these embodiments the client requests access to an application residing on a server . In another of these embodiments the client requests access to a network on which a desired resource resides. In other embodiments the client provides credentials upon making a request for a connection to an appliance . In one of these embodiments the client requests access to a virtual private network. In another of these embodiments the client requests a network address on the virtual private network. In still another of these embodiments the client initiates a connection to the appliance .

In some embodiments the user provides credentials to the server or appliance via a graphical user interface presented to the client by the server or appliance . In other embodiments a server or appliance having the functionality of a web server provides the graphical user interface to the client . In still other embodiments a collection agent transmitted to the client by the server or appliance gathers the credentials from the client .

In one embodiment a credential refers to a username and password. In another embodiment a credential is not limited to a username and password but includes without limitation a machine ID of the client operating system type existence of a patch to an operating system MAC addresses of installed network cards a digital watermark on the client device membership in an Active Directory existence of a virus scanner existence of a personal firewall an HTTP header browser type device type network connection information such as internet protocol address or range of addresses machine ID of the server or appliance date or time of access request including adjustments for varying time zones and authorization credentials.

In some embodiments a credential associated with a client is associated with a user of the client . In one of these embodiments the credential is information possessed by the user. In another of these embodiments the credential is user authentication information. In other embodiments a credential associated with a client is associated with a network. In one of these embodiments the credential is information associated with a network to which the client may connect. In another of these embodiments the credential is information associated with a network collecting information about the client. In still other embodiments a credential associated with a client is a characteristic of the client.

In some embodiments the user authentication performed by the server or appliance may suffice to authorize the use of each hosted application program presented to the client although such applications may reside at another server . Accordingly when the client launches i.e. initiates execution of one of the hosted applications additional input of user credentials by the client may be unnecessary to authenticate use of that application. Thus a single entry of the user credentials may serve to determine the available applications and to authorize the launching of such applications without an additional manual log on authentication process by the user.

In one embodiment an appliance receives a request for access to a resource from a client . In another embodiment the appliance receives a request for access to a virtual private network. In still another embodiment the appliance makes a determination as to whether to grant access and what level of access to grant. In yet another embodiment the appliance makes a determination as to what type of connection to establish when providing the client with access to the application.

In some embodiments decisions regarding whether and how to grant a user access to a requested resource are made responsive to determinations by a policy engine regarding whether and how a client may access an application. In one of these embodiments a decision regarding a level of access is made responsive to a policy engine determination. In another of these embodiments a decision regarding a type of access is made responsive to a policy engine determination. In still another of these embodiments a decision regarding a type of connection is made responsive to a policy engine determination. The policy engine may collect information about the client prior to making the determination. In some embodiments the policy engine resides on the appliance . In other embodiments the appliance is in communication with a police engine residing on a server .

Referring now to one embodiment of a computer network is depicted which includes a client a collection agent a policy engine a policy database a farm and an application server . In one embodiment the policy engine is a server . Although only one client collection agent policy engine farm and application server are depicted in the embodiment shown in it should be understood that the system may provide multiple ones of any or each of those components.

In brief overview when the client transmits a request to the policy engine for access to an application the collection agent communicates with client retrieving information about the client and transmits the client information to the policy engine . The policy engine makes an access control decision by applying a policy from the policy database to the received information .

In more detail the client transmits a request for a resource to the policy engine . In one embodiment the policy engine resides on an application server . In another embodiment the policy engine is a server . In still another embodiment the policy engine resides on an appliance . In yet another embodiment an application server or an appliance receives the request from the client and transmits the request to the policy engine . In a further embodiment the client transmits a request for a resource to a server which transmits the request to the policy engine .

Upon receiving the request the policy engine initiates information gathering by the collection agent . The collection agent gathers information regarding the client and transmits the information to the policy engine .

In some embodiments the collection agent gathers and transmits the information over a network connection. In some embodiments the collection agent comprises bytecode such as an application written in the bytecode programming language JAVA. In some embodiments the collection agent comprises at least one script. In those embodiments the collection agent gathers information by running at least one script on the client . In some embodiments the collection agent comprises an Active X control on the client . An Active X control is a specialized Component Object Model COM object that implements a set of interfaces that enable it to look and act like a control.

In one embodiment the policy engine transmits the collection agent to the client . In another embodiment an appliance may store or cache the collection agent . The appliance may then transmit the collection agent to a client . In other embodiments an appliance may intercept the transmission of a collection agent . In still another embodiment an appliance may accelerate the delivery of a collection agent . In one embodiment the policy engine requires a second execution of the collection agent after the collection agent has transmitted information to the policy engine . In this embodiment the policy engine may have insufficient information to determine whether the client satisfies a particular condition. In other embodiments the policy engine requires a plurality of executions of the collection agent in response to received information .

In some embodiments the policy engine transmits instructions to the collection agent determining the type of information the collection agent gathers. In those embodiments a system administrator may configure the instructions transmitted to the collection agent from the policy engine . This provides greater control over the type of information collected. This also expands the types of access control decisions that the policy engine can make due to the greater control over the type of information collected. The collection agent gathers information including without limitation machine ID of the client operating system type existence of a patch to an operating system MAC addresses of installed network cards a digital watermark on the client device membership in an Active Directory existence of a virus scanner existence of a personal firewall an HTTP header browser type device type network connection information such as internet protocol address or range of addresses machine ID of the server date or time of access request including adjustments for varying time zones and authorization credentials. In some embodiments a collection agent gathers information to determine whether an application can be accelerated on the client using an acceleration program .

In some embodiments the device type is a personal digital assistant. In other embodiments the device type is a cellular telephone. In other embodiments the device type is a laptop computer. In other embodiments the device type is a desktop computer. In other embodiments the device type is an Internet kiosk.

In some embodiments the digital watermark includes data embedding. In some embodiments the watermark comprises a pattern of data inserted into a file to provide source information about the file. In other embodiments the watermark comprises data hashing files to provide tamper detection. In other embodiments the watermark provides copyright information about the file.

In some embodiments the network connection information pertains to bandwidth capabilities. In other embodiments the network connection information pertains to Internet Protocol address. In still other embodiments the network connection information consists of an Internet Protocol address. In one embodiment the network connection information comprises a network zone identifying the logon agent to which the client provided authentication credentials.

In some embodiments the authorization credentials include a number of types of authentication information including without limitation user names client names client addresses passwords PINs voice samples one time passcodes biometric data digital certificates tickets etc. and combinations thereof. After receiving the gathered information the policy engine makes an access control decision based on the received information .

Referring now to a block diagram depicts one embodiment of a policy engine including a first component comprising a condition database and a logon agent and including a second component comprising a policy database . The first component applies a condition from the condition database to information received about client and determines whether the received information satisfies the condition.

In some embodiments a condition may require that the client execute a particular operating system to satisfy the condition. In some embodiments a condition may require that the client execute a particular operating system patch to satisfy the condition. In still other embodiments a condition may require that the client provide a MAC address for each installed network card to satisfy the condition. In some embodiments a condition may require that the client indicate membership in a particular Active Directory to satisfy the condition. In another embodiment a condition may require that the client execute a virus scanner to satisfy the condition. In other embodiments a condition may require that the client execute a personal firewall to satisfy the condition. In some embodiments a condition may require that the client comprise a particular device type to satisfy the condition. In other embodiments a condition may require that the client establish a particular type of network connection to satisfy the condition.

If the received information satisfies a condition the first component stores an identifier for that condition in a data set . In one embodiment the received information satisfies a condition if the information makes the condition true. For example a condition may require that a particular operating system be installed. If the client has that operating system the condition is true and satisfied. In another embodiment the received information satisfies a condition if the information makes the condition false. For example a condition may address whether spyware exists on the client . If the client does not contain spyware the condition is false and satisfied.

In some embodiments the logon agent resides outside of the policy engine . In other embodiments the logon agent resides on the policy engine . In one embodiment the first component includes a logon agent which initiates the information gathering about client . In some embodiments the logon agent further comprises a data store. In these embodiments the data store includes the conditions for which the collection agent may gather information. This data store is distinct from the condition database .

In some embodiments the logon agent initiates information gathering by executing the collection agent . In other embodiments the logon agent initiates information gathering by transmitting the collection agent to the client for execution on the client . In still other embodiments the logon agent initiates additional information gathering after receiving information . In one embodiment the logon agent also receives the information . In this embodiment the logon agent generates the data set based upon the received information . In some embodiments the logon agent generates the data set by applying a condition from the database to the information received from the collection agent .

In another embodiment the first component includes a plurality of logon agents . In this embodiment at least one of the plurality of logon agents resides on each network domain from which a client may transmit a resource request. In this embodiment the client transmits the resource request to a particular logon agent . In some embodiments the logon agent transmits to the policy engine the network domain from which the client accessed the logon agent . In one embodiment the network domain from which the client accesses a logon agent is referred to as the network zone of the client .

The condition database stores the conditions that the first component applies to received information. The policy database stores the policies that the second component applies to the received data set . In some embodiments the condition database and the policy database store data in an ODBC compliant database. For example the condition database and the policy database may be provided as an ORACLE database manufactured by Oracle Corporation of Redwood Shores Calif. In other embodiments the condition database and the policy database can be a Microsoft ACCESS database or a Microsoft SQL server database manufactured by Microsoft Corporation of Redmond Wash.

After the first component applies the received information to each condition in the condition database the first component transmits the data set to second component . In one embodiment the first component transmits only the data set to the second component . Therefore in this embodiment the second component does not receive information only identifiers for satisfied conditions. The second component receives the data set and makes an access control decision by applying a policy from the policy database based upon the conditions identified within data set .

In one embodiment policy database stores the policies applied to the received information . In one embodiment the policies stored in the policy database are specified at least in part by the system administrator. In another embodiment a user specifies at least some of the policies stored in the policy database . The user specified policy or policies are stored as preferences. The policy database can be stored in volatile or non volatile memory or for example distributed through multiple servers.

In one embodiment a policy allows access to a resource only if one or more conditions are satisfied. In another embodiment a policy allows access to a resource but prohibits transmission of the resource to the client . Another policy might make connection contingent on the client that requests access being within a secure network. In some embodiments the resource is an application program and the client has requested execution of the application program. In one of these embodiments a policy may allow execution of the application program on the client . In another of these embodiments a policy may enable the client to receive a stream of files comprising the application program. In this embodiment the stream of files may be stored and executed in an isolation environment. In still another of these embodiments a policy may allow only execution of the application program on a server such as an application server and require the server to transmit application output data to the client .

Referring now to a flow diagram depicts one embodiment of the steps taken by the policy engine to make an access control decision based upon information received about a client . Upon receiving gathered information about the client Step the policy engine generates a data set based upon the information Step . The data set contains identifiers for each condition satisfied by the received information . The policy engine applies a policy to each identified condition within the data set . That application yields an enumeration of resources which the client may access Step . The policy engine then presents that enumeration to the client . In some embodiments the policy engine creates a Hypertext Markup Language HTML document used to present the enumeration to the client.

In some embodiments a determination is made as to a type of connection to establish when granting access to a resource responsive to a determination by a policy engine such as the policy engine described above in and . In other embodiments a determination is made as to a method for granting access to a resource such as a method for execution responsive to a determination by a policy engine such as the policy engine described above in and . In other embodiments the server or appliance receiving the credentials and the request to execute the enumerated application further comprises such a policy engine .

In one embodiment one of a plurality of types of access is identified responsive to a policy each of the plurality of types of access associated with at least one connection characteristic. In one embodiment the identification is made responsive to an application of a policy to the received credentials associated with the client . In some embodiments the selection is made by a policy engine such as the policy engine described above in and . In other embodiments the server or appliance receiving the credentials and the request to execute the enumerated application further comprises such a policy engine .

In some embodiments after a server or appliance authorizes access to a resource a client performs a pre launch analysis of the client . In one of these embodiments the client performs the pre launch analysis to confirm authorization to access a resource or to complete the authorization process. In other embodiments the client performs a pre launch analysis of the client prior to the authorization decision. In still other embodiments the client performs a pre launch analysis of the client after receiving authorization to access a resource but prior to the establishment of a connection to the resource. In one of these embodiments the client performs a pre launch analysis of the client after receiving authorization to access a resource but prior to an identification of a type of connection authorized for use in accessing the resource.

In one embodiment the client performs the pre launch analysis prior to retrieving and executing a resource such as a plurality of application files comprising an application program. In another embodiment the client performs the pre launch analysis responsive to a received indication that the pre launch analysis is a requirement for authorization to access a resource such as the plurality of application files comprising an application program. In still another embodiment the client retrieves at least one characteristic required for execution of an application program. In yet another embodiment the client receives access information indicating a location of a file for retrieval by the client the file enumerating the at least one characteristic. In some embodiments the client performs the pre launch analysis after a server or appliance selects a method of providing access to a resource and identifying a type of connection to establish between the client and the resource.

The client determines the existence of the at least one characteristic on the client . In some embodiments the client makes this determination as part of the pre launch analysis. In one embodiment determining the existence of the at least one characteristic on the client includes determining whether a device driver is installed on the client . In another embodiment determining the existence of the at least one characteristic on the client includes determining whether an operating system is installed on the client . In still another embodiment determining the existence of the at least one characteristic on the client includes determining whether a particular operating system is installed on the client . In yet another embodiment determining the existence of the at least one characteristic on the client includes determining whether a particular revision level of an operating system is installed on the client .

In some embodiments determining the existence of the at least one characteristic on the client includes determining whether the client has acquired authorization to execute an enumerated application. In one of these embodiments a determination is made by the client as to whether the client has received a license to execute the enumerated application.

In another of these embodiments a determination is made by the client as to whether the client has received a license to receive across an application streaming session a plurality of application files comprising the enumerated application. In other embodiments determining the existence of the at least one characteristic on the client includes determining whether the client has sufficient bandwidth available to retrieve and execute an enumerated application.

In some embodiments determining the existence of the at least one characteristic on the client includes execution of a script on the client . In other embodiments determining the existence of the at least one characteristic on the client includes installation of software on the client . In still other embodiments determining the existence of the at least one characteristic on the client includes modification of a registry on the client . In yet other embodiments determining the existence of the at least one characteristic on the client includes transmission of a collection agent to the client for execution on the client to gather credentials associated with the client .

In some embodiments the client makes a request for authorization to execute an application responsive to a determination that at least one characteristic exists on the client . In one of these embodiments the client determines that a plurality of characteristics exist on the client the plurality of characteristics associated with an enumerated application and received responsive to a request to execute the enumerated application. In another of these embodiments whether the client receives authorization for execution of the enumerated application files depends upon existence of the at least one characteristic on the client . In one embodiment the client received an enumeration of application programs requested execution of an enumerated application and received access information including the at least one characteristic and a launch ticket authorizing the execution of the enumerated application upon the determination of the existence of the at least one characteristic on the client . In some embodiments the client executes a second client agent the second client agent requesting execution of an application on a server responsive to a determination that the client lacks the at least one characteristic.

Referring now to a screen shot depicts one embodiment of an enumeration of scripts to be executed on the client. In one embodiment at least one execution pre requisite is associated with at least one installed application file responsive to an application of a policy to the at least one installed application file or to a characteristic of the installed application file. In another embodiment a script is associated with the at least one installed application file the script comprising an executable program determining the existence of at least one execution pre requisite on a client. A type of script indicates when the script should be executed for example either before the execution of the application or after termination of execution of the application. An isolation indicator indicates whether the script should be executed in an isolation environment on the client . As shown in in some embodiments the script was associated with the application program at the time a plurality of application files were packaged together and stored on a server hosting the plurality of application files.

In some embodiments an instruction is associated with the at least one application file the instruction indicating a second installed application file for use by a client failing to satisfy the at least one execution pre requisite. In other embodiments an instruction is associated with the at least one installed application file the instruction indicating a second execution method for execution of the at least one installed application file on a client failing to satisfy the at least one execution pre requisite. In one of these embodiments an execution method is associated with the at least one installed application file the execution method authorizing streaming of a plurality of application files comprising the second application to a client for execution on the client. In another of these embodiments an evaluation of a client identifies at least one characteristic associated with the at least one installed application file not included on the client. In still another of these embodiments authorization for execution of the plurality of application files is revoked. In yet another of these embodiments a second execution method is provided for executing the plurality of application files the second execution method enabling execution of the plurality of application files on a server and transmission of application output data from the server to the client.

In another embodiment the at least one characteristic is added to the client after the pre launch analysis determines that the client lacks the at least one characteristic. In still another embodiment the at least one characteristic is included in a server hosting an application program and failure of the client to include the at least one characteristic will prevent execution of the application program. In yet another embodiment the application program requires existence of the at least one characteristic on the client for execution.

In some embodiments a packaging mechanism enables identification of at least one characteristic for use in a pre launch analysis on the client. In other embodiments the packaging mechanism enables association of at least one characteristic with an application program available for execution on the client. In still other embodiments the packaging mechanism enables association of an executable script with an application program the client executing the executable script to complete the pre launch analysis. In yet other embodiments the at least one characteristic is required to exist on the client after the execution of the application program.

Referring now to a block diagram depicts one embodiment of a system for authorizing a level of access of a client to a virtual private network connection based on a client side attribute. In brief overview the system includes a client a means for transmitting a request a request an evaluation component a means for transmitting a response a means for receiving an authorization assignment and an appliance .

The means for transmitting a request transmits from the client to the appliance the request for a virtual private network connection to a network. In one embodiment the means for transmitting a request comprises a transmitter. In another embodiment the means for transmitting a request resides in the client agent . In one embodiment the means for transmitting a request transmits a request for access to a resource such as an application or server residing on the network. In another embodiment the means for transmitting a request transmits a request for a network address on the virtual private network. In still another embodiment the means for transmitting a request transmits the request for the virtual private network connection after authenticating the client to the appliance . In yet another embodiment the means for transmitting a request transmits the request prior to the establishment of a control connection. In a further embodiment the appliance establishes the control connection responsive to receiving the request from the client .

The request is received by the client via a control connection between the client and the appliance for evaluation of at least one clause of a security string the at least one clause identifying an object for evaluation an attribute of the object and a pre requisite associated with the attribute. In one embodiment the request includes at least one clause of a security string the at least one clause identifying the client as an object for evaluation. In another embodiment the request includes at least one clause of a security string the at least one clause identifying a presence of an application program on the client as an attribute of the object. In still another embodiment the request includes at least one clause of a security string the at least one clause identifying an absence of an application program on the client as an attribute of the object. In yet another embodiment the request includes at least one clause of a security string the at least one clause identifying a presence of a version of an application program on the client as an attribute of the object.

In one embodiment the request includes at least one clause of a security string the at least one clause identifying an absence of a version of an application program on the client as an attribute of the object. In another embodiment the request includes at least one clause of a security string the at least one clause identifying a presence of a required version of an application program on the client as a pre requisite. In still another embodiment the request includes at least one clause of a security string the at least one clause identifying a presence of an application program on the client as a pre requisite. In yet another embodiment the request includes at least one clause of a security string the at least one clause identifying an absence of an application program on the client as a pre requisite. In some embodiments the request is sent to the client over the control connection in response to a request by the client for access to a resource or initiation of a connection.

In some embodiments the kernel on the client receives a security string. In one of these embodiments the kernel identifies one or more atomic expressions within the security string. In another of these embodiments the atomic expressions within the security string are separated by logical operators. The logical operators may be expressed by for example double ampersands indicating that the expressions are conjunctive or double slashes indicating that the expressions are disjunctive. In still another of these embodiments the at least one clause of the security string is an atomic expression within the security string separated from other expressions in the security string by logical operators. In other embodiments and as shown in shadow in the kernel on the client comprises receiver for receiving the request from the appliance over the control channel. In one of these embodiments the kernel transmits all or part of the request to the evaluation component .

In one embodiment a user of an appliance generates the security string. In another embodiment the appliance adds a generated security string as a policy. In still another embodiment the appliance adds a generated security string as a policy within an authorization server a policy engine a firewall a virtual private network server or other security appliance. In some embodiments the appliance transmits the generated security string to the client in its entirety and without re formatting from the form in which the security string was generated. In other embodiments the appliance transmits only portions of the security string to the client such as one clause or atomic expression at a time. In still other embodiments the appliance transmits the generated security string to a kernel on the client for formatting and parsing into atomic expressions.

In one embodiment a security string is associated with an authorization group. In another embodiment if a client satisfies a requirement expressed by the security string the client is assigned to the authorization group. In still another embodiment if a client fails to satisfy a requirement expressed by the security string the client is assigned to the authorization group. In some embodiments if no security string is assigned to an authorization group the client request is granted without the need for evaluation of a security string. In other embodiments if no authorization group is assigned to a security string but evaluation of the security string is required by the appliance the client request is denied.

In one embodiment a security string is an expression of a policy. In another embodiment and as an example if a policy requires a client to execute a particular personal firewall program or a particular antivirus program before accessing a resource or a establishing a type of connection and if the policy assigns the client to a particular authorization group if the client fails to satisfy the policy a security string expressing the policy may be of the form pf 1 ZoneAlarm 4.0.012.013 pf 1 TrendMicro 11.0.0 clientsecurityAuthGroup ag2. In still another embodiment and as a second example a policy may require a particular revision level of an antivirus program and a particular process running and if the policy assigns the client to a particular authorization group if the client fails to satisfy the policy a security string expressing the policy may be of the form av 0 mcafeevirusscan 4.88 svc 0 svchost cliensecurityAuthGroup ag1. 

In some embodiments a priority level may be assigned to the security string. In one of these embodiments the appliance may transmit the security string having the highest priority to the client . In another of these embodiments and as an example if the appliance identifies the following two security strings 

In other embodiments a security string may be expressed in the form object.attribute.prerequisite. In one of these embodiments and for example the security string may be an expression identifying the client a particular application program associated with the client and a prerequisite associated with the program the expression having the following form 

In another of these embodiments and as a second example the security string may comprise an expression having two disjunctive clauses in which the client may satisfy one clause or the other to satisfy the security string. In one example of this embodiment the expression may be of the following form 

The evaluation component resides on the client identifies the attribute determines whether the attribute satisfies the pre requisite and evaluates the at least one clause. In some embodiments the evaluation component resides in the client agent . In other embodiments the kernel of the client provides the functionality of the evaluation component . In still other embodiments the kernel of the client validates a response provided by the evaluation component .

In one embodiment the evaluation component executes a script to evaluate the at least one clause. In another embodiment the evaluation component is transmitted to the client from the appliance . In still another embodiment the evaluation component is a collection agent such as a collection agent described above in connection with the collection agent gathering information associated with the attribute. In yet another embodiment the evaluation component evaluates the at least one clause responsive to the information gathered about the client .

In some embodiments the evaluation component identifies attributes of the client . In one of these embodiments the attributes include but are not limited to any of the following client operating system presence of service packs presence of hot fixes on the client executing services executing processes presence of certain files antivirus software personal firewall software anti spam software internet security software and registry configuration. In another of these embodiments the attributes of the client include information associated with the client such as the information described in connection with the collection agent described above in connection with and . In still another of these embodiments the attributes of the client include information associated with the client and gathered as part of a pre launch analysis as described above.

In one embodiment the evaluation component identifies an attribute indicating a presence on the client of one of the following a version of an operating system a service pack of the operating system a running service a running process and a file. In another embodiment the evaluation component identifies an attribute indicating a presence on the client of one of the following antivirus software personal firewall software anti spam software and internet security software. In still another embodiment the evaluation component identifies an attribute identifying a version of one of the following antivirus software personal firewall software anti spam software and internet security software. In yet another embodiment the evaluation component determines that the attribute satisfies the pre requisite responsive to the identification of the attribute.

In some embodiments as described above the client performs the pre launch analysis after a server or appliance selects a method of providing access to a resource and identifying a type of connection to establish between the client and the resource. In other embodiments the client performs a pre launch analysis of the client prior to an authorization decision by the appliance . In other embodiments the client performs a pre launch analysis of the client after receiving authorization to access a resource but prior to the establishment of a connection to the resource. In one of these embodiments the client performs a pre launch analysis of the client after receiving authorization to access a resource but prior to an identification of a type of connection authorized for use in accessing the resource.

In some embodiments depicted by and the client performs a pre launch analysis prior to the identification of a type of connection to establish between the client and the resource. In one of these embodiments the client transmits a result of the pre launch analysis to the appliance . In another of these embodiments the appliance makes an access control decision including an identification of a type of connection to establish between the client and a requested resource responsive to a received result of a pre launch analysis. In other embodiments the client evaluates a security string as part of a pre launch analysis. In still other embodiments the client transmits a result of a pre launch analysis to a kernel on the client . In yet other embodiments the kernel evaluates a security string responsive to a received result of the pre launch analysis.

In some embodiments the kernel on the client receives the security string. In one of these embodiments the kernel identifies a plurality of clauses in the security string the clauses separated by logical operators. In another of these embodiments the clauses within the string are atomic expressions. In still another of these embodiments the kernel transmits at least one clause to the evaluation component for evaluation the at least one clause comprising an atomic expression. In yet another of these embodiments the evaluation component transmits a result of evaluating the atomic expression to the kernel.

In other embodiments the kernel on the client receives a result of an evaluation of at least one clause in the security string from the evaluation component . In one of these embodiments the kernel on the client evaluates a security string comprising a plurality of clauses responsive to receiving a plurality of results from the evaluation component . In another of these embodiments the kernel on the client comprises the means for transmitting a response . In still another of these embodiments the kernel on the client transmits a result of an evaluation of an entire security string comprising a plurality of clauses to the appliance .

The means for transmitting a response transmits from the client to the appliance via the control connection a response comprising a result of the evaluation of the at least one clause by the evaluation component . In one embodiment the means for transmitting a response transmits a packet to the appliance with the result of the evaluation. In another embodiment the means for transmitting a response transmits a 1 if the client satisfies the at least one clause or a 0 if the client does not satisfy the at least one clause. In some embodiments the means for transmitting a response resides on the evaluation component . In other embodiments the means for transmitting a response resides in the client agent . In still other embodiments the means for transmitting a response comprises a transmitter residing in the client agent and sending packets over the control channel.

The means for receiving an authorization assignment receives from the appliance at the client an assignment to an authorization group the assignment determined based on the evaluation of the at least one clause. In one embodiment the means for receiving the authorization assignment receives an assignment made responsive to the result of evaluation of a second clause by the appliance . In another embodiment the means for receiving the authorization assignment receives an assignment made responsive to a determination by the appliance that the client lacks a desired attribute. In still another embodiment the means for receiving the authorization assignment receives an assignment to an authorization group providing quarantined access to the network via the appliance .

In some embodiments the means for receiving an authorization assignment comprises a component residing in the client agent . In other embodiments the means for receiving an authorization assignment resides in a kernel on the client . In still other embodiments the means for receiving an authorization assignment comprises a receiver in communication with the appliance .

In some embodiments an authorization group to which a user of a client belongs is identified by an evaluation of the client and of attributes of the client . In one of these embodiments a user of a client requesting access to a network or other resource or requesting a connection to a network or a resource on the network is a member of a group of users each member in the group authorized to access particular resources via particular types of connections. In another of these embodiments a user of a client belongs to a default authorization group. In still another of these embodiments the appliance evaluates the client and determines that although the user of the client is a member of a particular authorization group the user does not currently satisfy the requirements for membership in the group and is therefore not authorized to access the resources that the user is typically authorized to use. Alternatively the appliance may evaluate the client and determine that although the user is not authorized to access particular resources via one type of connection the client may connect via a different type of connection. In yet another embodiment the appliance may evaluate the client and determine that although the user is not authorized to access a particular set of resources the client may access a subset of those resources via a particular type of connection such as via a secure connection to a quarantined network. In some embodiments an authorization group may be created for the user of the client upon the evaluation of the attributes of the client . In other embodiments the client satisfies the requirements of the applicable security strings and a connection is established according to the rules or policies of the client s default authorization group.

In one embodiment the means for receiving the authorization assignment receives a denial from the appliance of the client request if the security string is not associated with an authorization group. In another embodiment the means for receiving the authorization assignment receives a denial from the appliance of the client request if a pre requisite in the security string is not satisfied. In still another embodiment the means for receiving the authorization assignment receives an assignment made responsive an evaluation by the appliance of a second clause of the security string comprising one or more logical operations.

Referring now to a flow diagram depicts one embodiment of the steps taken in a method for authorizing a level of access of a client to a virtual private network connection based on a client side attribute. In brief overview an appliance establishes a control connection with a client upon receiving a client request to establish a virtual private network connection with a network step . The appliance transmits via the control connection a request to the client to evaluate at least one clause of a security string the at least one clause including an expression associated with a client side attribute step . The client transmits via the control connection a response to the appliance comprising a result of evaluating the at least one clause by the client step . The appliance assigns the client to an authorization group based on the result of evaluation of the at least one clause step .

Referring now to and in greater detail an appliance establishes a control connection with a client upon receiving a client request to establish a virtual private network connection with a network step . In one embodiment the appliance receives a request from the client to access a resource on a network such as a file or application. In another embodiment the appliance receives a request from the client to access a server . In still another embodiment the appliance receives a request for an association between the client and a network address associated with the virtual private network. In yet another embodiment the client initiates establishment of the control connection. In some embodiments the appliance is an appliance as described above.

The appliance transmits via the control connection a request to the client to evaluate at least one clause of a security string the at least one clause including an expression associated with a client side attribute step . In one embodiment the appliance transmits the request to a collection agent on the client such as a collection agent described above the collection agent gathering information associated with the client side attribute and evaluating the at least one clause. In another embodiment the appliance transmits a script to the client for execution. In still another embodiment the appliance transmits a collection agent to the client the collection agent evaluating the at least one clause.

The client transmits via the control connection a response to the appliance comprising a result of evaluating the at least one clause by the client step . In one embodiment the client evaluates the at least one clause. In another embodiment a collection agent or evaluation component on the client evaluates the at least one clause. In still another embodiment the client evaluates the at least one clause by executing a script. In yet another embodiment the client gathers information associated with the client side attribute. In a further embodiment the client evaluates the at least one clause responsive to the gathered information.

In one embodiment the client identifies a client side attribute indicating a presence on the client of one of the following a version of an operating system a service pack of the operating system a running service a running process and a file. In another embodiment the client identifies a client side attribute indicating a presence on the client of one of the following antivirus software personal firewall software anti spam software and internet security software. In still another embodiment the client identifies a client side attribute indicating a version on the client of one of the following antivirus software personal firewall software anti spam software and internet security software.

In one embodiment the appliance evaluates a second clause of the security string. In another embodiment the appliance evaluates a clause of the security string comprising one or more logical operations. In some embodiments the appliance receives gathered information associated with the client. In one of these embodiments the appliance receives the gathered information from a collection agent such as a collection agent executing on the client as described above. In another of these embodiments the appliance evaluates the second clause of the security string responsive to the gathered information.

The appliance assigns the client to an authorization group based on the result of evaluation of the at least one clause step . In one embodiment the appliance determines that the client lacks a desired client side attribute responsive to the result of the evaluation of the at least one clause. In another embodiment the appliance assigns the client to an authorization group providing quarantined access to the network via the appliance. In still another embodiment the appliance configures an authorization policy comprising the security string. In yet another embodiment the appliance assigns the authorization policy to the authorization group.

In one embodiment the appliance denies a login request from a client if the security string is not associated with the authorization group. In another embodiment the appliance establishes a virtual private network connection with the client in accordance with the authorization group. In still another embodiment the appliance establishes a virtual private network connection between the client and a server residing on a virtual private network.

In one embodiment the appliance assigns the client to an authorization group based on an application of a policy to the result of evaluation of the at least one clause. In another embodiment the appliance transmits the response comprising the result of the evaluation to a policy engine. In still another embodiment the appliance assigns the client to an authorization group based on an application of a policy by the policy engine.

As one skilled in the art appreciates and understands in view of the embodiments of the client network appliance gateway and servers described herein any of these embodiments of the client appliance gateway and servers may be configured and implemented to perform any combination of the methods described herein. Any of the embodiments of the methods described in connection with may work in conjunction with integrated with or be performed concurrently with any of the embodiments of the methods described in connection with .

The systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language LISP PERL C C PROLOG or any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

In some aspects the methods disclosed herein may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Having described certain embodiments of systems and methods for authorizing a level of access of a client to a virtual private network connection based on a client side attribute it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore the invention should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

In the preceding specification the invention has been described with reference to specific exemplary embodiments. It will however be evident that various modifications and changes may be made without departing from the broader spirit and scope of the invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive sense. Other embodiments of the invention may be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein.

