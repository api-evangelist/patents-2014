---

title: Scripting support for data identifiers, voice recognition and speech in a telnet session
abstract: Methods of adding data identifiers and speech/voice recognition functionality are disclosed. A telnet client runs one or more scripts that add data identifiers to data fields in a telnet session. The input data is inserted in the corresponding fields based on data identifiers. Scripts run only on the telnet client without modifications to the server applications. Further disclosed are methods for providing speech recognition and voice functionality to telnet clients. Portions of input data are converted to voice and played to the user. A user also may provide input to certain fields of the telnet session by using his voice. Scripts running on the telnet client convert the user's voice into text and is inserted to corresponding fields.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648083&OS=09648083&RS=09648083
owner: Crimson Corporation
number: 09648083
owner_city: Dover
owner_country: US
publication_date: 20140226
---
The present application is a continuation of U.S. patent application Ser. No. 13 467 673 filed May 9 2012 which is a divisional of U.S. Pat. No. 8 635 069 issued Jan. 21 2014 the foregoing applications being incorporated herein by reference in their entirety.

This application relates to the design and implementation of user interfaces including those for simple protocols like telnet.

A user interface is crucial for the productive use of a device. The need for carefully designed and preferably customizable user interfaces is well recognized. However features that allow humans to best relate to information and to have information presented visually with a layout that draws attention to the most important information and with additional tactile and audio effects are not readily implemented to support communication protocols such as telnet.

Terminal emulation telnet is traditionally a text only medium. Support for sounds is limited to beeps with custom efforts required to support any sounds more complex than that.

Most operators prefer receiving visual and sound information to merely being responsible for reading information exclusively as text. Further being able to enter data by speaking to the computer will simplify enhance and speed up the use of computers well beyond the current usage. One protocol that is still useful for inter computer communications is the telnet protocol. While more secure protocols are possible the simplicity of the telnet has managed to make it relevant despite its age and certain security related drawbacks.

The telnet protocol was introduced to provide a fairly general bi directional eight bit oriented communications facility. Primarily it allows a standard method of interfacing between terminal devices and between processes. The protocol is often used for terminal terminal communication and process process communication distributed computation . A telnet connection or session typically is a Transmission Control Protocol TCP connection carrying data with interspersed telnet control information. A series of communications called scripts are typically passed over a telnet connection as part of the data. The telnet Protocol also allows for a Network Virtual Terminal and negotiated options.

Upon establishing a telnet session each end is assumed to originate and terminate at an imaginary Network Virtual Terminal providing a standard network wide intermediate representation of a terminal. As a result there is no need for server and user or client hosts to track the characteristics of various terminals and terminal handling conventions. All telnet participants map their local device characteristics and conventions so as to appear to be dealing with an NVT over the network. Thus each can assume a similar mapping by the other party.

The provision for negotiated options allows hosts to provide additional services over and above those available within a minimal NVT. Independent of but structured within the telnet Protocol are various options that may be used with a DO DON T WILL WON T structure to allow negotiations directed to permitting use of a more elaborate set of conventions for their telnet connection. Further the terminal emulated may further enhance the user interface without affecting the other parties by adhering to the telnet protocol. Such options could include changing the character set the echo mode data security features etc. The basic strategy for setting up the use of options is to have a party initiate a request that some option take effect if the option affects more than one party. The other party may then either accept or reject the request. If the request is accepted the option immediately takes effect.

A telnet session may be customized with a script. A script is a computer programming language that is interpreted rather than requiring compilation and can be typed directly from a keyboard. Unlike a script commands in which are interpreted one at a time programs are converted permanently into binary executables suitable for execution on a particular type of computer or processor. The chief benefit provided by a script is the reduction in the traditional edit compile link run process. It should be noted that although scripting languages are interpreted this does not exclude compilation. The significant ease in devising an interpreter over providing a compiler makes it easier to write interpreters for a scripting language.

Typically each command in a script may be executed independently resulting in stateless operation. In other words once a scripting language command is executed the processor can execute another command without having the already executed command affect the result. This almost natural property of a scripting language however can be modified to allow the ability to detect a state of interest. For instance a script supported by a telnet client may detect the text displayed on a screen or even additional information not included in the telnet data stream. The information about a state may be embedded in the script data to allow retention of a state for some operations while executing the scripting language based routines in the customary manner. Additional commands may be provided to process and program embedded state information in such an implementation.

It should be noted that data within a script may have a peculiar structure requiring specially written code to handle the structure. Appropriately designed and deployed scripts can help program applications quickly automate repetitive tasks and provide contextually relevant customization. Providing the appropriate scripts and implementations remain a challenge due to the complexity of a user interface and aspects of it that need customization.

Some terminal emulation types define fields that are used to submit information to the host. These are one or more regions of the screen set aside for user input. Because each field is defined independently it can have different locations on the screen lengths and unique flags to specify the type of data it expects. When the field information is supplied to the host the location for the field is also included the host can use this information to determine which field contained the data and treat the data appropriately for that field.

It is also possible to identify fields by assigning them unique numbers or text strings. These numbers or text strings are referred to as data identifiers. This allows useful behavior such as knowing which field to assign a scanned barcode to based on a data identifier embedded in the barcode.

These data identifiers are traditionally specified by the server and sent to the client over the terminal emulation session. This allows the server s programmer s to create and change them as needed. However it is not uncommon to find companies unwilling or unable to update their server application s that have been in use for years. So far in the context of warehouse inventory systems a hand held telnet client has been a relatively unintelligent device. Many companies use inventory tracking systems and are at the same time are unable or unwilling to modify their server applications. Accordingly there is a need for providing the data identifier and speech recognition and voice functionality to the inventory tracking systems by implementing this functionality on the telnet clients as oppose to the servers.

The embodiments of the present invention provide data identifiers functionality and speech and voice recognition functionality implemented with scripting at the telnet client which in the preferred embodiment is a portable hand held barcode scanner. In one aspect one or more scripts running on the telnet client associate data identifiers with fields of the screens received by the telnet client from a server over a telnet session. The data identifiers may be assigned based on for example the names of the fields and other logic encoded in the scripts.

When the telnet client is used for scanning barcodes or acquiring other types of information one or more scripts process the input data. After data has been processed it is inserted in the corresponding fields based on the data identifiers that have been previously associated with those fields. After than the data is sent to the server over the already established telnet session. In particular a method of operating a telnet client comprising receiving data from a server over a telnet session detecting text displayable on a screen of the telnet client in the received data and generating speech based on one or more of 1 the detected text and 2 the state of the telnet session is disclosed.

In another aspect the embodiments of the invention implement text to speech conversion in a telnet client by using scripts capable of detecting at least text or context of information displayed on a screen of a telnet connection. The scripts can also add information for text to speech conversion. Further scripting may be used to customize voice recognition in a user interface.

In some embodiments one or more scripts running on the telnet client provide word lists that may be used to reduce the number of possible words and phrases into which text in a given telnet session may be converted and the number of possible words and phrases from which voice may be converted into text. Thus only expected words and phrases are further interpreted for accuracy. When the interface with the user includes voice instructions the computer converts text into intelligible speech by searching only through words in the allowed words and phrases list. While writing text into a data field speech is matched to the list to select the words closest to the allowed words.

In some embodiments speech recognition is provided in a telnet session by using a script capable of detecting the current cursor position within the telnet session and the context of the telnet session based on information displayed on the screen. This information may be combined with additional information for generating speech by the script. All this processing is performed by a telnet client while the server applications remain unchanged.

In particular a method of operating a telnet client comprising receiving data from a server over a telnet session detecting one or more input fields displayable on a screen of the telnet client in the received data and associating one or more data identifiers with at least one detected input field is disclosed.

Embodiments of the present invention are best understood if explained in the context of an example. An illustrative example is a system for inventory tracking in a warehouse department store or a supermarket.

In the preferred embodiment server has a wireless connection to a plurality of mobile telnet clients such as for example telnet clients and . The telnet clients are barcode scanners.

Telnet client is also equipped with a wireless transceiver not shown in for sending and receiving data over wireless medium from server .

In the preferred embodiment telnet clients are Wavelink s telnet clients which starting with version 5.10 first released in July 2005 have included support for scripting. These scripts are written by users in a custom programming language and allows specifying a unique behavior for the telnet client. Each script can be started in several different ways depending on how it is to be used. Scripts also run independently of server so no changes to the server are needed to support scripting.

In general scripts enhance the functionality of a telnet client by performing processing of data received from server before outputting it to the user and of the data inputted by the user before sending it to server . In the preferred embodiment scripts have the ability to modify a text stream. In addition to the custom scripts a telnet client may have other programs such as for example a text to speech component and a speech to text component. Scripts allow data received from server to be changed before it is sent to for instance the text to speech component or to be modified after receiving it from the voice recognition component before passing it to the server or showing it to the user. Scripts can even use data from the voice recognition engine to initiate actions within itself without querying the server such as launching other scripts or displaying messages.

In a typical prior art inventory tracking system a server is configured to receive a particular type of barcodes also referred to as symbology in the art from a barcode scanner. To use the barcode scanner for reading other types of barcodes the server would have to be reconfigured. For example if certain items in a warehouse have two barcodes of different types server would have to be initially configured to read the first type of barcodes and then reconfigured to read the second type of barcodes. In some more advanced prior art inventory tracking systems a server may be configured to receive both barcodes without the need for reconfiguration. The host program residing on server may be configured to receive for each item a barcode of the first type followed by a barcode of the second type. Such system is not capable of receiving and properly processing scans of the two barcodes by the barcode scanner in a different order.

In the preferred embodiment scripts running on the telnet client have the ability to provide greater flexibility of utilizing the system by using data identifiers. shows a block diagram of steps performed by a telnet client such as for example telnet client shown in in connection with receiving data from server and associating data identifiers with input fields. In step telnet client receives data from server . In step one or more scripts running on the telnet client detect displayable text in the received data. In the preferred embodiment the displayable text comprises one or more input fields that are displayed on the screen of the telnet client. In some embodiments the displayable text may comprise other information. In step the scripts running on the telnet client analyze the displayable text and add data identifiers to the input fields. Typically data identifiers are assigned to input fields shown on the screen. A data identifier is simply a text string that is added to items of displayable text. Data identifiers may be displayable or not displayable on the screen of the telnet client. Data identifiers begin end or both begin and end with a sequences of special characters that are used to distinguish the data identifiers from other textual information and from each other. These sequences of special characters are used by scripts for locating and using data identifiers.

In step one or more scripts running on the telnet client forms text messages for sending to the server over the telnet protocol. In forming the messages the scripts insert processed data into fields identified by certain data identifier. For example according to its logic the script determines that a scanned barcode is of a certain type in step . In step the same script or another script inserts this barcode to the field identified by a corresponding data identifier that was associated with the field previously in step shown in . In addition to simply inserting processed input data in corresponding fields scripts may manipulate data after it has been inserted. For example scripts may insert dashes periods etc. for converting data in the desired format.

The operation of the preferred embodiments of the methods shown in is illustrated by the following example. Certain items in a warehouse have two barcodes one is applied by the manufacturer and another applied by a distributor. A telnet client such as telnet client and server have a telnet session established between them. The application running at the server is programmed to receive two barcodes for each item. The server sends to the telnet client a screen with two fields that the telnet client has to populate. In step the telnet client receives the screen from the server. In step one or more scripts running on the server determine the two fields that the server expects to be populated. In step one or more scripts running on the telnet client associates data identifiers with the two fields.

In step a user scans barcodes. As the barcodes are scanned one or more scripts running on the telnet client process the input scans in step . In this example the scripts simply determine the type of the scanned barcode. In step after the type of the most recently scanned barcode has been determined it is inserted in the field associated with a particular data identifier that matches its type. Unlike the prior art systems the sequence of two scans is irrelevant. Furthermore applications running on the server did not have to be modified.

By allowing data identifiers to be specified in scripts programmers can still take advantage of the flexibility of data identifiers without making changes to their server applications. In the preferred embodiment the telnet client can be configured remotely using software such as Wavelink s Avalanche manager . Having this capability allows automatic distribution of scripting updates to telnet clients for easy central control.

The following is a self explanatory script excerpt that associates fields with data identifier and one or more symbologies and set a prefix of scans that are inserted in the second field to B8. Note that lines starting with are comments. 

In another aspect of the preferred embodiment text to speech is an add on component that can take text and convert it to speech. It has the capability of working with raw text and can also be given additional instructions such as the current language and pronunciation guides to improve the speech rendered. In the preferred embodiment scripts have the ability to detect the current state of the telnet connection including the text currently displayed on the screen. Scripts can also use additional information stored at the telnet client or computed by the script itself and which cannot be obtained from the telnet session. This combination makes the scripts useful for giving instructions and raw text to a text to speech component and to have those voice instructions modified based on the current state of the telnet session.

Additionally in the preferred embodiment voice recognition is an add on component that can convert the input from a microphone into text. It supports additional instructions such as lists of allowed words and saved voice information for the current user to increase the accuracy of the recognition.

In the preferred embodiment of the invention voice recognition is supported by a telnet script running on a telnet client. The script determines allowed words or phrases preferably based on one or more of the currently selected field the current cursor position and the text on the currently displayed page. Voice and speech recognition becomes more accurate with increasingly limited allowed set of words or phrases. In an exemplary embodiment if the currently selected field is expecting barcode information the voice recognition engine will avoid changing speech into invalid input and instead look for fits with valid digits and characters. This will help the voice recognition engine in for example distinguishing between 1 and one. 

In one embodiment the text is converted to voice by processing it with a text to voice package known in the art. The text converted into speech may be one or more items detected in step such as a portion of the text displayed on the screen of the telnet client or one or more input fields. Also the text converted into speech may be a predefined string or a text that is based on prior user input. In another embodiment step may be accomplished by referencing a hard coded recording based on the determined displayable text and outputting the recorded voice without real time text to voice conversion. In yet other embodiments a combination of the two methods may be implemented. In particular some parts of the audible message may be reproduced from a stored recording while other parts of that message may be obtained by processing displayable text with a text to voice package.

Voice instructions may greatly improve the productivity of the user operating the telnet client. For example instead of native telnet beeps the user may be prompted of an error in scanning a barcode and asked to rescan. The user may also be prompted to scan the next barcode and in addition he may be supplied with helpful information such as please scan the manufacturer s barcode at the upper right hand corner of the box cover. As explained above the information in this instruction may come from different sources. For example the phrase please scan the may be a pre recorded message invoked by the script the phrase manufacturer s barcode may be an input field displayed on the screen of the telnet client and the phrase at the upper right hand corner of the box cover may be speech converted from a pre defined text string.

The behavior of the scripts that convert speech into input text by passing the input voice to the voice to text engine may be modified by certain input parameters. These parameters may be derived from the text presently displayed on the screen of the telnet client one or more input fields displayed on the screen of the input clients the state of the telnet session and the location of the cursor. This allows a more precise context sensitive conversion of speech into text input.

A typical use of the voice recognition application is hands free operation of the user. For example the user may be prompted to bring all items from a particular shelf in a warehouse and to input the number of items. In the prior art systems barcodes of the items would have to be scanned or alternatively the number of items would have to be manually entered using inputs . Both ways require manual operations. In the preferred embodiment the user may simply pronounce the number of items into microphone connected to the telnet client the user s hands remain free for carrying items or performing other tasks. The telnet client receives voice information in step converts it to text in step and then forms a message for sending to the server over the telnet protocol in step . This allows for a completely hands free operation of some tasks thus improving the productivity of the personnel.

Scripting allows limiting the universe of possibly voice responses and consequently a better voice recognition ratio. For example if the universe of responses is limited to integers in the range 1 5 then the voice recognition package would look to match the closest number pronounced by the user among the five allowed options only. Also as mentioned above scripting allows to set the message sent to the server to the digit instead of the word.

Script commands related to text to voice conversion and to speech recognition may be combined for implementing powerful applications. The following script example provides the core commands required for implementing the examples in which the user is prompted to input the number of items.

In the preferred embodiment the login information is stored to keep track of the current user and to tell the voice recognition component which user s saved voice information to use. Saved voice information improves the accuracy of the voice recognition for the user because the voice recognition package may be trained according to methods known in the art. The following script example sets speech settings and then prompts the user to login using his voice. After the user provides his credentials another script responsible for logging in is called.

The communication that occurs over a telnet session is continuous. When server receives the data it may sent data back to the telnet client. The client sends more data to the server etc. Accordingly steps shown in may be repeated multiple times in a single telnet session.

It should be understood that script commands related to data identifiers voice recognition and speech can be combined in a single script or a set of scripts implementing a particular task. In some embodiments the names of the fields that are converted to speech may also be associated with data identifiers. Similarly voice information provided by the user may be first converted to text and then processed with scripts related to text processing.

Notably no server modifications are required for implementing the functionality related to data identifiers or the functionality related to speech and voice recognition.

The foregoing description of the embodiments of the present invention has been presented for purposes of illustration and description. It is not intended to be exhaustive nor to limit the invention to the precise form disclosed. Many modifications and variations will be apparent to those skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications thereby enabling others skilled in the art to understand the invention. Various embodiments and modifications that are suited to a particular use are contemplated. It is intended that the scope of the invention be defined by the accompanying claims and their equivalents.

