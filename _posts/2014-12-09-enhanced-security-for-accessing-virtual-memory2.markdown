---

title: Enhanced security for accessing virtual memory
abstract: A disclosed method includes obtaining a physical address corresponding to a virtual address responsive to detecting a virtual address associated with a memory access instruction and, responsive to identifying a memory page associated with the physical address as a sensitive memory page, evaluating sensitive access information associated with the memory page. If the sensitive access information satisfies a sensitive access criteria, invoking a sensitive access handler to control execution of the memory access instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582434&OS=09582434&RS=09582434
owner: Intel Corporation
number: 09582434
owner_city: Santa Clara
owner_country: US
publication_date: 20141209
---
This application is a continuation of U.S. patent application Ser. No. 13 732 236 filed Dec. 31 2012 the content of which is hereby incorporated by reference.

The present disclosure relates to the field of information processing and more particularly to the field of memory access management.

General purposes microprocessors typically include or support various security and protection mechanisms. Virtual memory support for example enables multitask execution environments by maintaining distinct physical memory locations for different applications so that application programmers can define and refer to a location in memory without fear that a different application will have access to that same memory location. Microprocessors may also support the use of protection rings to implement various degrees of access restriction security for core operating system routines. If however a rogue application defeats the hierarchical protection mechanism implemented by the operating system a reliable secondary mechanism to provide supplemental security would be beneficial.

At least one embodiment of a disclosed system includes a processor having support for virtual addressing and including a memory management unit MMU to receive a virtual address and provide a corresponding physical address. At least one embodiment of the MMU may access a buffer storing entries representing virtual address to physical address translations wherein an entry in the buffer includes a sensitive access information and generate based on the sensitive access information a sensitive access interrupt or fault. Embodiments of the sensitive access information may include a sensitive access enable bit and a sensitive access recency bit and at least one embodiment of the MMU may generate the sensitive access interrupt when the sensitive access enable bit and the sensitive access recency bit are both asserted. Embodiments may further include a timing mechanism and a reset mechanism to clear the sensitive access recency bit and then after a specified delay period reset the sensitive access recency bit. In at least one embodiment the sensitive access interrupt signal is a checkpoint fault that indicates to an operating system which processes were executed after a previous checkpoint. Embodiments of the MMU may include an input to receive a virtual address associated with a memory access instruction and an output to provide a physical address corresponding to the virtual address.

In at least one embodiment a disclosed method for implementing sensitive access oversight during execution of program instructions includes detecting a virtual address associated with a memory access instruction and obtaining a corresponding physical address. Embodiments of the method may determine whether a memory page associated with the physical address is a sensitive memory page and if so evaluate sensitive access information associated with the page. In some embodiments if the sensitive access information satisfy a sensitive access criteria a sensitive access handler may be invoked to control execution of the memory access instruction. Invoking such a handler to control execution of a memory access instruction as described herein may be referred to as invoking a chaperoned execution of the memory access instruction. Embodiments of the sensitive handler may take an action including as examples verifying an execution environment validating an integrity of the memory page and giving the kernel an opportunity to deny the access for any policy defined reason.

In at least one embodiment whether a memory page is a sensitive memory page may be indicated by a sensitive access enable bit associated with the memory page. In some embodiments the sensitive access information may include additional parameters including for example a recency parameter indicating how recently the memory page was accessed. In some embodiments recency information may be used to permit un chaperoned execution of a second and subsequent access to a memory page occurring soon after a first instruction accessing the page was chaperoned. In this manner chaperoned execution may be implemented without substantially impacting performance when a process makes numerous accesses to a sensitive page over a short period of time. In some embodiments recency may be measured in terms of clock cycles or some other proxy for chronological time. If multiple sensitive pages are being accessed concurrently distinct recency measures may be maintained for each sensitive page. Alternatively some embodiments may maintain a single counter for all sensitive pages on a most conservative basis e.g. recency is determined based on the least recently accessed of all the sensitive pages.

In addition to memory management and lookaside buffer hardware to implement sensitive access monitoring as described herein at least one embodiment of disclosed subject matter herein includes policies for identifying sensitive pages and how to process them. For example embodiments may implement policies for setting a sensitive access enable bit to identify sensitive pages. In some embodiments the sensitive access enable bit may be set based on a characteristic of the type of information stored on the memory page. In some embodiments characteristics of information stored on a memory page that might trigger sensitive access handling may include characteristics indicating that a memory pages is storing or requesting personally identifying information personal financial information network configuration information execution context information and protection level information.

In at least one embodiment a processor includes a TLB to generate a physical address corresponding to a virtual address contained in a memory access instruction e.g. a memory access instruction currently being fetched decoded or executed. In some embodiments the processor may further include a MMU to invoke a sensitive access handler to control execution of the memory access instruction when the memory access instruction access a physical addressing corresponding to a memory page that satisfies sensitive access criteria. In some embodiments the processor may further include a page table or an analogous data structure stored in a computer readable storage medium accessible to the processor.

In the following description details are set forth by way of example to facilitate discussion of the disclosed subject matter. It should be apparent to a person of ordinary skill in the field however that the disclosed embodiments are exemplary and not exhaustive of all possible embodiments.

Throughout this disclosure a hyphenated form of a reference numeral refers to a specific instance of an element and the un hyphenated form of the reference numeral refers to the element generically or collectively. Thus for example widget refers to an instance of a widget class which may be referred to collectively as widgets and any one of which may be referred to generically as a widget . In addition all references to asserting a signal are polarity agnostic unless expressly stated otherwise. Thus in the context of a digital or binary signal a description of a signal as being asserted encompasses signals that are asserted low as well as signals that are asserted high.

Referring now to the drawings depicts selected elements of one embodiment of a multiprocessor system . The multiprocessor system includes multiple processors a system memory and a memory controller that permits processors to read and write to system memory . In the multiprocessor system memory controller is implemented in a microprocessor support device referred to herein as the near hub . Near hub shares access to a system bus with processors . In other embodiments processors and may communicate with each other whether directly or through an intermediary via point to point interfaces rather than via a shared bus .

The multiprocessor system may include peripheral devices and other resources that provide various functions. Generally a function connected via a bus interface to a bus may be referred to herein as an agent of that bus. For example with reference to system bus processors near hub and shared cache are agents of system bus . Although system bus and some other busses referred to herein are described as being shared busses at least some shared busses may be implemented as point to point PtP interconnects or PtP busses.

As depicted in near hub includes in addition to memory controller a bus bridge that provisions a graphics bus to which a graphics controller is connected. Graphics bus may be implemented as a dedicated or non shared bus that operates in compliance with a standard such as the Peripheral Component Interconnect Express PCIe or a legacy graphics bus such as Accelerated Graphics Port AGP . Near hub as shown further includes a far hub bus interface that facilitates communication between near hub and an I O hub referred to herein as far hub via interconnect .

Far hub may integrate adapters controllers and ports for various interconnection protocols to support different types of I O devices. The depicted implementation of far hub includes as an example an expansion bus controller that supports an expansion bus that complies with PCI or another suitable bus protocol. Examples of functions that may be provided via expansion bus include a network adapter an audio controller and a communications adapter . Network adapter may enable communication with an IEEE 802.11 family or other type of wireless data network a Gigabit Ethernet or other type of wireline data network or both. Audio adapter may include or support high definition audio codecs. Communications adapter may include or support modems and or transceivers to provide wireless or wireline telephony capability. Far hub may further include a high bandwidth serial bus controller that provides one or more ports of a Universal Serial Bus USB or other suitable high bandwidth serial bus .

The far hub further includes a storage adapter that supports a persistent storage interconnect such as an Integrated Drive Electronics IDE interconnect a Serial ATA interconnect or a SCSI interconnect to a storage drive that controls persistent storage . Far hub may further include a Low Pin Count LPC controller that provides an LPC bus to connect low bandwidth I O devices including as examples a keyboard a mouse a parallel printer port and an RS232 serial. Multiprocessor system as depicted in employs a Super I O device to interface any or all of these I O devices with LPC controller .

The multiprocessor system includes two processors and but the number of processors may differ in other implementations. Each of the processors includes an execution core a local cache memory and a bus interface that facilitates data exchange with system bus . Execution cores include registers and functional units for fetching decoding and executing instructions and for writing results back to the registers. The set of instructions that execution cores support sometimes referred to herein simply as the instruction set may include arithmetic instructions floating point instructions conditional and unconditional branch type instructions and memory access instructions.

Local cache memory may include one or multiple distinct caches memories arranged hierarchically. Each distinct local cache memory may be segregated into a data cache and an instruction cache. In an example implementation local cache memory may include an L1 instruction cache an L1 data cache and an L2 cache containing both instructions or data. Each processor may include a local cache controller not depicted that implements a cache coherency policy for local cache . An example cache coherency policy that local cache may support is a MESI protocol that defines four states a cache line may assume namely modified exclusive shared and invalid. Processor may however include or support cache coherency states that are different than or in addition to these four states. For example local cache may support a forwarded state F indicating which of multiple processors that share a cache line is responsible for providing the line to a requesting agent.

The multiprocessor system includes a shared cache connected to system bus via a bus interface . External cache may provide shared cache storage to each processor of multiprocessor system . A controller of external cache may implement a cache coherency policy that is the same as or differs from the cache coherency policy maintained in local cache . In addition multiprocessor system may implement an inclusion policy in which shared cache is inclusive of exclusive of or not inclusive of local cache . For purposes of this disclosure an exclusive policy refers to an inclusion policy that prohibits a line in shared cache from being also resident in the local cache an inclusive policy requires that all lines in local cache reside in shared cache as well and a nonexclusive policy refers to any policy that does not satisfy either of the other criteria e.g. most but not necessarily all lines in local cache reside in shared cache .

Microprocessor may include a MMU that implements at least a portion of memory management methods described herein. MMUs described herein may identify sensitive pages and chaperone control or otherwise influence the execution context of an instruction that accesses a page of memory flagged as a sensitive memory page. A sensitive memory page could be a page of memory that includes information that is confidential personal private or otherwise possesses characteristics that might warrant caution in permitting an application to access execute or otherwise expose the page. The criteria used to identify pages as being sensitive may encompass substantially any policy that a developer wishes to implement. The operating system may permit applications programmers to identify sensitive page locally. Procedures performed prior to accessing context sensitive memory pages may vary depending upon the implementation but could include as examples anything from a relaxed security policy to a human presence hardened fingerprint face analyzing code integrity validation scheme.

Turning now to a block diagram of selected elements of an embodiment of MMU is illustrated. The MMU includes a TLB to translate virtual addresses that are received from an execution unit of the microprocessor to physical addresses that are provided to a tag array of a cache memory. As depicted in TLB TLB receives a virtual address and provides a corresponding physical address PA to a cache tag array . Cache tag array may be associated with an L1 data cache not depicted of the processor . It is noted that MMU may include additional functionality or complexity not explicitly depicted in . For example in certain embodiments not shown TLB TLB may be a multi level buffer.

The embodiment of TLB includes a TLB hit miss signal that TLB asserts when virtual address hits in TLB i.e. TLB hit miss signal indicates whether VA matches any entry in TLB . The depicted embodiment of TLB also includes a status signal that TLB maintains to indicate status of the memory page corresponding to virtual address . Status signal may include multiple bits to indicate as examples whether a memory page is a read only page and whether the memory page is reserved for instructions or data and so forth. Status signal may indicate additional information indicative of a characteristic of the applicable memory page. Thus for example status signal may include one or more bits indicating a protection level associated with a memory page an identity of a processor core or thread associated with the memory access instruction or some other suitable characteristic.

The MMU includes logic which receives hit miss signal and status signal and generates a gate signal as its output. When hit miss signal and status signal indicate that the memory access instruction that generated VA is a valid type of access to a valid page of memory that hits in TLB logic may assert gate signal . In the embodiment gate signal provides a control input to a latch that receives physical address generated by TLB . In this embodiment latch gates PA to cache tag array in response to logic asserting gate signal to indicate that the memory access instruction is a permitted type of access to a valid page of memory that corresponds to a valid entry in TLB .

The embodiment of TLB miss handler receives virtual address and TLB hit miss signal and communicates with page table over a page table connection . When TLB his miss signal indicates that VA misses in TLB miss handler may perform a table walk of VA through page table to obtain a physical address. TLB miss handler may also initiate a page event in which a page of physical memory is retrieved from the disk storage and stored in physical memory and page table is updated to reflect the new page in memory. TLB miss handler may then provide the physical address to TLB to update TLB . Updating TLB may involve a determination of an entry to evict or invalidate an existing entry.

In conjunction with enabling and supporting chaperoned execution of sensitive memory access transactions the embodiment of TLB sends a sensitive access signal to sensitive access logic . In some embodiments the state of sensitive access signal corresponds to a state of sensitive access information each entry of TLB . The embodiment of sensitive access logic receives the same gate signal that latch receives. In this context gate signal may be thought of as indicating procedurally valid memory access and sensitive access signal indicates whether the access is sensitive substantively. When gate signal and sensitive access signal are both asserted sensitive access logic may assert a chaperoned execution signal . Chaperoned execution signal may be analogous to an interrupt and may when asserted invoke a chaperoned execution handler to control the execution of memory access instruction.

Turning now to selected elements of an embodiment of a TLB are depicted. The embodiment of sensitive access information includes information pertaining the page of memory itself as well as information indicating how recently the applicable page of memory was accessed. The depicted embodiment of TLB includes a table of entries . Each entry in table may correspond to a page of memory and includes a virtual address field a physical address field a page attributes field and additional information referred to in as sensitive access information .

Page attributes field may include one or more bits describing various attributes of the applicable page of memory. Page attributes field may include as examples a valid bit indicating whether the page is valid a resident or present bit indicating whether the page is resident in system memory a read write bit indicating whether the page may be written to a used bit indicating whether the page has been accessed recently a modified bit indicating whether the page has been written to a protection level field including one or more bits indicating whether there are protection level restrictions on the page and a processor identification field including one or more bits identifying a process with which the page is associated.

Sensitive access information may be used at least in part to determine whether execution of a memory access should be chaperoned. In the depicted embodiment sensitive access information includes an enable bit and a recency bit . An asserted enable bit may indicate that the applicable page of memory has been identified as a page of memory potentially requiring chaperoned execution. The assertion of enable bit may be controlled by a sensitive access policy .

Sensitive access policy may include rules or operating system instructions for determining pages of memory that represent chaperoned execution candidates. Sensitive access policy may as an example identify a page of memory that includes information broadly characterized as privacy information. Depending upon the embodiment privacy information might include personally identifying information PII e.g. personal contact information including name address telephone number email address social security number driver s license number and so forth. Privacy information might further include a category of information identified herein as personal financial information. Personal financial information might include as examples financial account numbers including account numbers for credit cards checking and savings account and investment accounts as well as balance and transaction information pertaining to those accounts and any passwords or user IDs associated with those accounts. Sensitive access policy might further include rules for identifying pages of memory that include information broadly characterized as security information. Security information may include as examples any information pertaining to the configuration of any network the user is connected to including any local area networks public or private intranets virtual private networks and so forth. An example of network configuration might include information identifying the port numbers that are currently in use. Security information might also include information pertaining to the execution context of a thread or process that a user is executing. Execution context information might include as an example information pertaining to the instruction pointer or a context stack employed by an end user system. Similarly execution context information might include any information pertaining to protection levels supervisory modes and the like.

Sensitive access policy may also permit direct control of sensitive enable bits . For example application programmers and or system administrators may be permitted to set and clear sensitive access the sensitive access enable directly via a system call or a supported instruction.

Employing sensitive access information enables the use of a last line of defense security to flag pending execution or access of codes or data that have been determined according to sensitive access criteria embodied in sensitive access policy . As described above sensitive access policy may employ or encompass any of a wide variety of criteria filters rules or considerations for determining which portions of code or data might be subject to a sensitive access screening. However in recognition of the performance limiting nature of performing additional security verifications or clearances the embodiment of sensitive access information while identifying sensitive code or data through the use of enable bit further includes recency bit to limit excessive repeated invocations of chaperoned execution when for example a thread or processor makes multiple access to the same page of memory close in time to each other. Therefore as suggested by its name recency bit may reflect a timing parameter.

The embodiment of TLB depicted in may therefore set any of the sensitive access indicator enable bits for any entry in translation look aside buffer . When a memory access to a virtual address corresponding to an entry in which the sensitive access indicator enable bit is asserted the embodiment will either chaperone the execution of the memory access instruction or permit the instruction to execute unattended depending on the state of the recency bit . If the page of memory the memory access instruction is attempting to access was accessed in a recently executed instruction that invoked chaperoned execution handling recency bit may be in the un asserted state and chaperoned execution may be bypassed. If however the amount of time elapsed since the chaperoned execution occurred exceeds a threshold value recency bit may be in the asserted state and sensitive access handling may be invoked.

Thus the described embodiment responds to the simultaneous assertion of enable bit and recency bit by triggering a process that chaperones supervises oversees or otherwise controls the execution of the memory access instruction. Moreover just as the sensitive access policy described above for identifying a sensitive access may encompass numerous implementations employing a number of different considerations the chaperoned execution referred to herein also encompasses a number of implementations and considerations.

Because the embodiment of recency bit indicates information pertaining to time a timing resource may be required to control the value of the recency bits . The number of timing resources employed to maintain the values of the various recency bits is an implementation detail. Implementing at one extreme a dedicated recency timer for each entry in table may be impracticable and provide only marginally improved performance over other implementations. The embodiment of recency bits employs a single timing mechanism referred to as the reset mechanism to control the values of all sensitive access indicators . Still other embodiments not depicted may employ a relatively small number of timing mechanisms to provide individual control over the different sensitive pages. The depicted reset mechanism may measure time using a proxy such as the number of clock cycles.

In some embodiments recency bit may cleared immediately following the chaperoned execution of an instruction referencing the applicable page of memory. In conjunction with reset mechanism of recency bit may be reset after a predefined period of time e.g. 10 ms or a proxy for the predefined period of time e.g. 100 clock cycles. In this manner the disclosed implementation of accessing memory and implementing sensitive access handling permits un chaperoned access to an otherwise sensitive memory page for a brief interval following the chaperoned execution of the applicable memory page. By enabling close in time accesses to a sensitive memory page to proceed without chaperoned execution beneficially improves the performance of the MMU without substantially increasing the risk of permitting a rogue access to execute undetected.

Turning now to one embodiment of a method for implementing a memory management based context sensitive execution via memory management and memory access techniques is disclosed. In the embodiment depicted in method includes receiving operation a virtual address and obtaining operation a physical address associated with the virtual address. Obtaining a physical address associated with a virtual address may include indexing a TLB with the virtual address to generate the corresponding physical address when the virtual address hits in the TLB. If the virtual address misses in the TLB obtaining the physical address associated with the virtual address may include invoking TLB miss handler to walk the page table .

The depicted embodiment of method further includes determining operation a sensitive access status of a page of memory associated with the virtual address. As described previously determining the sensitive access status of a memory page may include determining the values of one or more sensitive access bits stored in an applicable entry of a page table or TLB. The sensitive access bits may include and enable bit identifying memory pages that are defined as or subject to context sensitive handling. The enable bit may be set by a sensitive access policy as described previously. In addition to the enable bit sensitive access information may include a recency bit that may be used in conjunction with enable bit to control execution of the memory access instruction.

The embodiment of method determines operation whether a memory page associated with the physical address determined in operation is a candidate for sensitive access handling. If the memory page associated with the physical address is not a sensitive access candidate method permits operation un chaperoned access to the memory page associated with the physical address and proceeds to operation to increment a clock cycle counter.

If method determines at operation that the address reference in a memory access instruction identifies a page of memory that is a sensitive access candidate e.g. by determining that its enable bit is asserted as described above method determines operation whether there has been a recent access to the same page of system memory. Whether a recent access has occurred may encompass whether the clock cycle counter value exceeds a predetermined threshold. As described previously the determination of whether a recent access has occurred may be determined by the state of recency bit as depicted in . If in operation method concludes that there has been no recent access the embodiment of method includes raising operation a chaperoned execution signal to invoke a chaperoned execution handler to control execution of the memory access instruction. Once the chaperoned execution signal is raised in operation method may include invoking operation a chaperoned execution handler to execute the instruction. In these embodiments the chaperoned execution signal raised in operation may be analogous to a conventional interrupt signal and invoking chaperoned execution may include providing the chaperoned execution signal to a programmable interrupt controller to invoke the corresponding chaperoned execution handler.

The chaperoned execution handler may evaluate execution environment characteristics to decide whether to permit the underlying memory access instruction to access to the applicable page of memory. Execution environment characteristics that the handler may evaluate include as some examples characteristics indicating the application program that initiated the memory access instruction characteristics indicative of an identity of a user device that initiated the access to the memory page and characteristics indicative of a network and protocol associated with the user device. The sensitive access handler may include a user verification module to verify the identity of the user. The user verification model might include question and answer verification biometric authentication or any of other various verification models. When chaperoned execution is initiated in operation the embodiment of method clears operation the recency bit to indicate that chaperoned execution for this page of memory has occurred recently and therefore need not re occur until the recency bit changes state.

Method as shown in further includes after performing either operation or incrementing operation the clock cycle counter and determining operation whether the clock cycle counter exceeds a predetermined threshold or limit. If the clock cycle counter exceeds the threshold the recency bit of the applicable page is set. For embodiments in which there are fewer clock cycle counters than recency bits to count the setting of recency bit in operation may include setting the recency bit for all pages to which the counter applies.

Referring now to selected elements of a multicore processor system that provides and supports sensitive access monitoring and chaperoned execution as described herein are depicted. The embodiment of system includes a point to point interconnect system and a multicore processor that includes a multi core processor including a first core and a second core . As shown a portion of processor including first core and second core may be referred to as core portion . An uncore portion of processor including elements of processor excluding cores . In different embodiments not shown in a varying number of cores may be present in a particular processor. Cores may comprise a number of sub elements not shown in also referred to as clusters that provide different elements of overall functionality. For example cores and may each include a memory cluster not shown in that may comprise one or more levels of cache memory. Other clusters not shown in in cores may include a front end cluster and an execution cluster.

In the embodiment first core and second core communicate with each other via crossbar which may include intelligent functionality such as cache control data queuing P P protocols and multi core interfacing. Crossbar may thus represent an intelligent uncore controller for uncore portion interconnects the processor s cores with memory controller hub MCH last level cache memory LLC and P P interface among other elements. In particular to improve performance in such an architecture cache controller functionality within crossbar may enable selective caching of data within a cache hierarchy including LLC and or one or more caches present in cores . As shown in crossbar includes an MMU which as described previously handles virtual addresses and maintains at least one TLB not shown in for improved performance with regard to memory access.

In LLC may be coupled to a pair of processor cores respectively. For example LLC may be shared by core and core . LLC may be fully shared such that any single one of cores may fill or access the full storage capacity of LLC . Additionally MCH may provide for direct access by processor to memory via memory interface . For example memory may be a double data rate DDR type dynamic random access memory DRAM while memory interface and MCH comply with a DDR interface specification. Memory may represent a bank of memory interfaces or slots that may be populated with corresponding memory circuits for a desired DRAM capacity.

Processor may also communicate with other elements of processor system such as I O hub and I O controller hub which are also collectively referred to as a chipset that supports processor . P P interface may be used by processor to communicate with I O hub via interconnect link . In certain embodiments P P interfaces and interconnect link are implemented using Intel QuickPath Interconnect architecture.

As shown in crossbar includes interface to couple crossbar with first bus which may support high performance I O with corresponding bus devices such as graphics and or other bus devices represented by I O devices . Graphics may represent a high performance graphics engine that outputs to a display device not shown in . In one embodiment first bus is a Peripheral Component Interconnect PCI bus such as a PCI Express PCIe bus and or another computer expansion bus. I O hub may also be coupled to I O controller hub at interface via interconnect link . In certain embodiments interface is referred to as a south bridge. I O controller hub may provide I O interconnections for various computer system peripheral devices and interfaces and may provide backward compatibility with legacy computer system peripheral devices and interfaces. Thus I O controller hub is shown providing network interface and audio I O as well as providing interfaces to second bus third bus and fourth bus as will be described in further detail.

Second bus may support expanded functionality for microprocessor system with I O devices and may be a PCI type computer bus. Third bus may be a peripheral bus for end user consumer devices represented by desktop devices and communication devices which may include various types of keyboards computer mice communication devices data storage devices bus expansion devices etc. In certain embodiments third bus represents a Universal Serial Bus USB or similar peripheral interconnect bus. Third bus may represent a computer interface bus for connecting mass storage devices such as hard disk drives optical drives disk arrays which are generically represented by data storage shown including code that may be executable by processor .

The embodiment of system includes an operating system that may be entirely or partially stored in a data storage . Operating system may include various modules application programming interfaces and the like that expose to varying degrees various hardware and software features of system . The embodiment of system includes for example a resume module a connect module and a touchscreen user interface . System as depicted in may further include various hardware firm features include a capacitive or resistive touch screen controller and a second source of persistent storage such as a solid state drive .

The resume module may be implemented as software that when executed performs operations for reducing latency when transition system from a power conservation state to an operating state. Resume module may work in conjunction with the solid state drive SSD to reduce the amount of SSD storage required when system enters a power conservation mode. Resume module may for example flush standby and temporary memory pages before transitioning to a sleep mode. By reducing the amount of system memory space that system is required to preserve upon entering a low power state resume module beneficially reduces the amount of time required to perform the transition from the low power state to an operating state. The connect module may include software instructions that when executed perform complementary functions for conserving power while reducing the amount of latency or delay associated with traditional wake up sequences. For example connect module may periodically update certain dynamic applications including as examples email and social network applications so that when system wakes from a low power mode the applications that are often most likely to require refreshing are up to date. The touchscreen user interface supports a touchscreen controller that enables user input via touchscreens traditionally reserved for handheld applications. In the embodiment the inclusion of touchscreen support in conjunction with support for desktop devices enable system to provide features traditionally found in dedicated tablet devices as well as features found in dedicated laptop and desktop type systems.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of disk including floppy disks optical disks compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

To the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited to the specific embodiments described in the foregoing detailed description.

