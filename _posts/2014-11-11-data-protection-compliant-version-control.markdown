---

title: Data protection compliant version control
abstract: In a data protection compliant version control system, a change committed by a user in a version is stored. A cryptographic hash value generated based on a set of parameters corresponding to the user and the version is computed. The cryptographic hash value along with the change committed by the user is stored. The cryptographic hash value is associated with the change committed by the user by a redirection pointer. The redirection pointer is deleted to disassociate the change committed by the user from the cryptographic hash value, thereby disassociating the change committed by the user from the user. The change committed by the user is displayed in a user interface associated with the version control system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317526&OS=09317526&RS=09317526
owner: SAP SE
number: 09317526
owner_city: Walldorf
owner_country: DE
publication_date: 20141111
---
Enterprises use version control systems to manage changes to documents software programs etc. A version control system is used to manage changes by tracking a time of change and a user responsible for the change in a version repository. The version control systems can be audited and the changes to version repositories cannot be cancelled or wiped once they are committed. In some jurisdictions there may be a legal requirement that in the version control systems the information regarding the users responsible for the change needs to be deleted while retaining the changes. Typically overwriting or selective deletion of references to users is not possible in version repositories. It is also a challenge to selectively delete s user responsible for s change while not tampering the details of user responsible for the change in the version control systems.

Embodiments of techniques for data protection compliant version control are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. A person of ordinary skill in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In some instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Version control system is an application that may be a stand alone application or may be embedded in other software applications. The graphical user interface associated with the version control system enables a user to interact with the version control system . Version control system enables tracking and managing changes to documents software codes etc. Initially when a document or software code is created and committed or saved the document or code gets saved or persisted in version repository as a first version identified e.g. by a unique numeral along with a time stamp. Commit is referred to as persisting changes permanently in the version repository . When subsequent changes are made to the document or software code the changes made to the document or software code may be committed to the version repository as a revision identified by another unique numeral along with a new timestamp.

The connectivity between the version control system and the version repository may be implemented using any standard protocols such as Transmission Control Protocol TCP and or Internet Protocol IP etc. The version control system can be executed as an installed stand alone application or web application on any browser in desktops.

For the change committed by user a cryptographic hash value Hmay be generated based on pointer P to user change committed by user in version V timestamp T associated with the change committed by user and the nonce N generated for change committed by user . The computed value of Hmay be persisted in the version repository of the version control system . The computed cryptographic hash value H is stored along with change in version repository in the version control system . The cryptographic hash value H is associated with the change by a redirection pointer. The redirection pointer may be a record R or a tuple that includes values of P V T N and H and is represented as R P V T N H as shown in . The redirection pointer may be stored in a database or repository separated from the version repository . Similarly for the change committed by user a cryptographic hash value His generated based on pointer P to user change committed by user in version V timestamp T associated with the change committed by user and a nonce N generated for change committed by user . The computed cryptographic hash value H may be stored along with change in version repository in the version control system . The cryptographic hash value H is associated with the change by a redirection pointer R P V T N H that may be stored in the database separated from the version repository . The redirection pointer R P V T N H may be a record that includes values of P V T N and H .

and is represented by N . A cryptographic secure hash value H is generated based on the values of P V T and N. A cryptographic hash algorithm e.g. SHA 512 may be used to generate the hash value H by substituting value of USER153 1 for P 1.1.2.3 for V 2014 09 19 9 43 AM for T and 435637683939893039309389397142576260909988900900 for N as

The various embodiments described above have a number of advantages. Selective deletion of link associating a user and a change made by the user is possible in the version control system. Since the pointer to identifier of user is not directly used to associate with the change deletion of user details does not happen in the version repository and no alteration of the version repository occurs. Since the pointer to identifier of user is used along with an arbitrary random number nonce in generation of a secure cryptographic hash function it is impossible to redirect the redirection pointer to a different user as computing the identical nonce is practically infeasible. Therefore it is not possible to tamper the details of user responsible for the changes. The redirection pointer is unchangeable or untamperable to be associated with any other user.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with them may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open Data Base Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the one or more embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

