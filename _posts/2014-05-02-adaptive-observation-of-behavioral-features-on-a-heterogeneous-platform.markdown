---

title: Adaptive observation of behavioral features on a heterogeneous platform
abstract: Methods, devices and systems for monitoring behaviors of a mobile computing device include observing in a non-master processing core a portion of a mobile device behavior that is relevant to the non-master processing core, generating a behavior signature that describes the observed portion of the mobile device behavior, and sending the generated behavior signature to a master processing core. The master processing core combines two or more behavior signatures received from the non-master processing cores to generate a global behavior vector, which may be used by an analyzer module to determine whether a distributed software application is not benign.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189624&OS=09189624&RS=09189624
owner: QUALCOMM Incorporated
number: 09189624
owner_city: San Diego
owner_country: US
publication_date: 20140502
---
This application is a continuation of U.S. patent application Ser. No. 13 773 877 entitled Adaptive Observation of Behavioral Features on a Heterogeneous Platform filed Feb. 22 2013 which claims the benefit of priority to U.S. Provisional Patent Application No. 61 646 590 entitled System Apparatus and Method for Adaptive Observation of Mobile Device Behavior filed May 14 2012 and U.S. Provisional Application No. 61 683 274 entitled System Apparatus and Method for Adaptive Observation of Mobile Device Behavior filed Aug. 15 2012 the entire contents of all which are hereby incorporated by reference for all purposes.

Cellular and wireless communication technologies have seen explosive growth over the past several years. This growth has been fueled by better communications hardware larger networks and more reliable protocols. Wireless service providers are now able to offer their customers an ever expanding array of features and services and provide users with unprecedented levels of access to information resources and communications. To keep pace with these service enhancements mobile electronic devices e.g. cellular phones tablets laptops etc. have become more powerful and complex than ever and now commonly include multiple processors system on chips SoCs and other resources that allow mobile device users to execute complex and power intensive software applications e.g. video streaming video processing etc. on their mobile devices. This complexity has created new opportunities for malicious software software conflicts hardware faults and other similar errors or phenomena to negatively impact a mobile device s long term and continued performance and power utilization levels. Accordingly new and improved solutions for identifying and correcting conditions and or mobile device behaviors that may negatively impact the mobile device s long term and continued performance and power utilization levels will be beneficial to consumers.

The various aspects include a method of monitoring behaviors of a mobile computing device by observing in a non master processing core a portion of a mobile device behavior that is relevant to the non master processing core generating in the non master processing core a behavior signature that describes the observed portion of the mobile device behavior sending the generated behavior signature to a master processing core combining two or more behavior signatures received from non master processing cores in the master processing core to generate a global behavior vector and providing the global behavior vector to an analyzer module for processing.

In an aspect processing by the analyzer module may include determining whether a software application is benign or not benign based on the generated behavior vector. In a further aspect the method may include generating a task graph in the master core and combining two or more behavior signatures in the master processing core to generate a global behavior vector may include combining the two or more behavior signatures based on the generated task graph. In a further aspect the method may include monitoring in the master processing core a distribution of sub tasks of a single application to one or more non master cores. In a further aspect monitoring the distribution of sub tasks may include monitoring calls to a transport layer of the mobile device.

Further aspects may include a computing device having a memory a master processor and one or more non master processors coupled to the memory. Each of the one or more non master processors may be configured with processor executable instructions to perform operations that may include observing in a non master processing core a portion of a mobile device behavior that is relevant to the non master processing core generating in the non master processing core a behavior signature that describes the observed portion of the mobile device behavior and sending the generated behavior signature to a master processor. The master processor may be configured with processor executable instructions to perform operations that may include combining two or more behavior signatures received from non master processing cores in the master processing core to generate a global behavior vector and providing the global behavior vector to an analyzer module for processing.

In an aspect the master processor may be configured with processor executable instructions to perform operations that further include determining whether a software application is benign or not benign based on the generated behavior vector in the analyzer module. In a further aspect the master processor may be configured with processor executable instructions to perform operations further including generating a task graph and the master processor may be configured with processor executable instructions such that combining two or more behavior signatures to generate a global behavior vector may include combining the two or more behavior signatures based on the generated task graph.

In a further aspect the master processor may be configured with processor executable instructions to perform operations that further include monitoring a distribution of sub tasks of a single application to the non master processors. In a further aspect the master processor may be configured with processor executable instructions such that monitoring the distribution of sub tasks may include monitoring calls to a transport layer of the mobile device.

Further aspects may include a computing device having multiple heterogeneous cores and means for observing in a non master processing core a portion of a mobile device behavior that is relevant to the non master processing core means for generating in the non master processing core a behavior signature that describes the observed portion of the mobile device behavior means for sending the generated behavior signature to a master processing core means for combining two or more behavior signatures received from non master processing cores in the master processing core to generate a global behavior vector and means for providing the global behavior vector to an analyzer module for processing. In an aspect means for determining in the analyzer module whether a software application is benign or not benign based on the generated behavior vector.

In a further aspect the computing device may include means for generating a task graph in the master core and means for combining two or more behavior signatures in the master processing core to generate a global behavior vector may include means for combining the two or more behavior signatures based on the generated task graph. In a further aspect the computing device may include means for monitoring in the master processing core a distribution of sub tasks of a single application to one or more non master cores. In a further aspect means for monitoring the distribution of sub tasks may include means for monitoring calls to a transport layer of the mobile device

Further aspects include a non transitory server readable storage medium having stored thereon processor executable instructions configured cause a heterogeneous multiprocessor system e.g. of mobile computing device to perform various operations including observing in a non master processing core a portion of a mobile device behavior that is relevant to the non master processing core generating in the non master processing core a behavior signature that describes the observed portion of the mobile device behavior sending the generated behavior signature to a master processing core combining two or more behavior signatures received from non master processing cores in the master processing core to generate a global behavior vector and providing the global behavior vector to an analyzer module for processing. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations further including processing the global behavior vector by the analyzer module to determine whether a software application is benign or not benign based on the generated behavior vector.

In a further aspect the stored processor executable software instructions may be configured to cause a processor to perform operations including generating a task graph in the master core and wherein the stored processor executable software instructions may be configured to cause a processor to perform operations such that combining two or more behavior signatures in the master processing core to generate a global behavior vector may include combining the two or more behavior signatures based on the generated task graph. In a further aspect the stored processor executable software instructions may be configured to cause a processor to perform operations including monitoring in the master processing core a distribution of sub tasks of a single application to one or more non master cores. In a further aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that monitoring the distribution of sub tasks may include monitoring calls to a transport layer of the mobile device

The various aspects will be described in detail with reference to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. References made to particular examples and implementations are for illustrative purposes and are not intended to limit the scope of the invention or the claims.

The word exemplary is used herein to mean serving as an example instance or illustration. Any implementation described herein as exemplary is not necessarily to be construed as preferred or advantageous over other implementations.

The terms mobile computing device and mobile device are used interchangeably herein to refer to any one or all of cellular telephones smartphones personal or mobile multi media players personal data assistants PDA s laptop computers tablet computers smartbooks ultrabooks palm top computers wireless electronic mail receivers multimedia Internet enabled cellular telephones wireless gaming controllers and similar personal electronic devices which include a memory a programmable processor for which performance is important and operate under battery power such that power conservation methods are of benefit. While the various aspects are particularly useful for mobile computing devices such as smartphones which have limited processing power and battery life the aspects are generally useful in any computing device that includes multiple heterogeneous processors cores suitable for executing application programs.

In overview the various aspects include methods as well as multiprocessor computing systems configured to execute the methods for performing behavior detection and analysis operations in a mobile device having multiple distributed or heterogeneous computational units e.g. processors cores etc. to efficiently identify prevent and or correct the conditions and mobile device behaviors that have a high potential to contribute to the degradation in performance and power utilization levels of the mobile device over time. The behavior analysis operations may include identifying the overall behavior of a single software application whose operations are distributed across a plurality of heterogeneous cores. This may be achieved by observing or monitoring a partial mobile device behavior in each of the plurality of heterogeneous cores and using a task graph to recombine the observed partial mobile device behaviors in a main processor core e.g. CPU applications processor etc. to generate a behavior vector suitable for use in determining whether the overall behavior of the software application or mobile device is consistent with normal operating patterns of that mobile device. A partial mobile device behavior may be a portion of a mobile device behavior that is relevant to the monitoring core such as the portions that have access to the same memory and processing resources as the processing core portions that are executed by the processing core portions that invoke functions operations on the processing core etc.

The term system on chip SOC is used herein to refer to a single integrated circuit IC chip that contains multiple resources computational units processors and or cores integrated on a single substrate. A single SOC may contain circuitry for digital analog mixed signal and radio frequency functions as well as any number of general purpose and or specialized processors digital signal processors modem processors video processors etc. memory blocks e.g. ROM RAM Flash etc. and resources e.g. timers voltage regulators oscillators etc. . SOCs may also include software for controlling the integrated resources and processors as well as for controlling peripheral devices.

The term system in a package SIP is used herein to refer to a single module or package that contains multiple resources computational units cores and or processors on two or more IC chips or substrates. For example a SIP may include a single substrate on which multiple IC chips or semiconductor dies are stacked in a vertical configuration. Similarly the SIP may include one or more multi chip modules MCMs on which multiple ICs or semiconductor dies are packaged into a unifying substrate. A SIP may also include multiple independent SOCs coupled together via high speed communication circuitry and packaged in close proximity such as on a single motherboard or in a single mobile computing device. The proximity of the SOCs facilitates high speed communications and the sharing of memory and resources as well as for more coordinated cooperation and synchronization between the components in the SOCs.

The terms multiprocessor and multiprocessor computing system are used herein to refer to a system or device that includes two or more computational or processing units configured to read and execute program instructions. The term multicore processor is used herein to refer to a single integrated circuit IC chip or chip package that contains two or more independent computational or processing units e.g. CPU cores IP cores etc. configured to read and execute program instructions. A SOC may include multiple multicore processors and each processor in an SOC may be referred to as a core.

The term context information is used herein to refer to any information available to a thread or process running in a host operating system e.g. Android Windows 8 LINUX etc. and may include operational state data and permissions and or access restrictions that identify the operating system services libraries file systems and other resources that the thread process may access. Such operational state data may include the process s address space stack space virtual address space register set image e.g. program counter stack pointer instruction register program status word etc. accounting information permissions access restrictions and state information.

Generally the performance and power efficiency of a mobile device degrade over time. Recently anti virus companies e.g. McAfee Symantec etc. have begun marketing mobile anti virus firewall and encryption products that aim to slow this degradation. However many of these solutions rely on the periodic execution of a computationally intensive scanning engine on the mobile device which may consume many of the mobile device s processing and battery resources slow or render the mobile device useless for extended periods of time and or otherwise degrade the user experience. In addition these solutions are typically limited to detecting known viruses and malware and do not address the multiple complex factors and or the interactions that often combine to contribute to a mobile device s degradation over time e.g. when the performance degradation is not caused by viruses or malware . For these and other reasons existing anti virus firewall and encryption products do not provide adequate solutions for identifying the mobile device behaviors that may contribute to that mobile device s performance degradation over time.

Various other solutions exist for modeling the behavior of processes or application programs executing on a computing device and such behavior models may be used to differentiate between malicious and benign process programs on computing devices. However these existing modeling solutions are not suitable for use on mobile devices because such solutions generally require the execution of computationally intensive processes that consume a significant amount of processing memory and energy resources all of which may be scarce on mobile devices. In addition these solutions are generally limited to evaluating the behavior of an individual application program or process and or with respect to a single processor or core herein collectively processing core and do not provide an accurate or complete model of complex mobile device behaviors that may be distributed across multiple heterogeneous processing cores. For these and other reasons existing modeling solutions are not suitable for use in mobile devices that include multiple heterogeneous processing cores.

Mobile devices are resource constrained systems that have relatively limited processing memory and energy resources. Modern mobile devices are also complex systems and there are a large variety of factors that may contribute to the degradation in performance and power utilization levels of a mobile device over time including poorly designed software applications malware viruses fragmented memory background processes etc. Due to the number variety and complexity of these factors it is often not feasible to evaluate all the factors that may contribute to the degradation in performance and or power utilization levels of the complex yet resource constrained systems of modern mobile devices.

The various aspects include multiprocessor mobile devices systems and methods for efficiently identifying analyzing classifying modeling preventing and or correcting the conditions and or mobile device behaviors that often degrade a mobile device s performance and or power utilization levels over time from a limited coarse set of behavior observations. By reducing the number of factors that are observed or monitored in each processing core and by reducing the amount of information communicated between heterogeneous processing cores the various aspects improve the efficiency and the performance and power consumption characteristics of the mobile device.

On a heterogeneous platform e.g. SIP SOC multi processor devices etc. a single software application may be broken down into several sub tasks each of which may be scheduled onto or performed in a different processing core. That is different portions of a software application may perform operations e.g. API calls on different individual processing cores and the application s behavior may be spread or distributed across the different heterogeneous processing cores. For this reason it is often difficult challenging to obtain a complete picture of an application s behavior across multiple heterogeneous processing cores without cumbersome or exhaustive communications or coordination between the processing cores. By generating a partial incomplete light weight or succinct behavior signature in each processing core to describe a portion of the application from the perspective of or from within the context of each individual processing core and by efficiently communicating behavior information across among between multiple heterogeneous processing cores via the generated behavior signatures the various aspects may identify analyze and or respond to mobile device behaviors and conditions that have a high potential to negatively impact the mobile device without consuming an excessive amount of the mobile device s battery or processing resources.

In both single and multi processor systems processes or threads herein collectively processes that share have access to and or operate within the same context may communicate via relatively fast memory read write operations. On the other hand communications between independent processes that do not share a context are often accomplished via relatively slow and expensive e.g. in terms of performance costs energy consumption memory access times etc. function calls method invocations procedure calls message exchanges domain sockets and other forms of inter process communication IPC . Remote procedure calls RPC and remote method invocations RMI are inter process communications IPCs that allow a calling process to cause a subroutine procedure process or service to execute in another address space commonly on another processor chip or computing device.

On a heterogeneous platform the memory and resources available to different processing cores are often in separate domains e.g. protection domains physical domains etc. . In addition each of the processing cores may be configured with a different operating system and or implement different hardware description languages HDL or instruction set architectures ISA . In such systems RPC RMI mechanisms may provide an interface that allows a calling process on a first processing core to cause an operation service or process to execute in a second processing core and for the second processing core to send the results of the execution back to the first processing core. Often to interpret the results the first processing core requires access to information that is not readily available to the processes that do not share the same context as the operation service or process executed on the second processing core. In such situations existing RPC RMI solutions require that the second processing core include in the results all the context information i.e. state information permissions etc. that is to be used by the called service.

Communicating such large amounts of information e.g. the results of a program procedure or service execution etc. between a first and second processing core via existing RPC RMI mechanisms typically consumes an excessive amount of power memory and processing resources. In addition the processing cores may have different operating systems and or implement different hardware description languages in which case the first processing core may be required to perform complex and power intensive operations to recreate the second processing core s context before it can interpret the execution results received from the second processing core. Recreating the context may also require modifications to the kernel or host operating system of the first processing core which may require the execution of additional complex and power intensive operations and or require significant modifications to the mobile device architecture. For these and other reasons using standard RMI RPC solutions to communicate behavior information between heterogeneous cores may degrade or reduce the performance and power consumption characteristics of a mobile device and degrade the user experience.

When performing behavior observation and analysis operation on a heterogeneous platform each processing core may be required to collect a large amount of behavior information and send all the collected behavior information and context information to another processing core for analysis. However communicating such large amounts of information between the processing cores is an inefficient use of mobile device resources and may degrade or reduce the performance and power consumption characteristics of the mobile device.

Mobile devices are resource constrained systems that have relatively limited processing memory and energy resources. Therefore cumbersome or exhaustive approaches to or methods of coordinating the operations of the multiple processing cores in order to observe or monitor a software application or behavior are not well suited for use in mobile devices. For example transferring API logs e.g. via memory read write operations and context information from slave or secondary processing cores to a master or primary processing core i.e. the main applications processor core or CPU can result in prohibitive overheads particularly for the battery driven mobile devices.

For all of the forgoing reasons existing solutions are not suitable for use in mobile devices that include multiple heterogeneous processing cores.

The various aspects overcome the limitations existing solutions by providing mobile devices having one or more secondary processing cores configured to observe a portion of a mobile device behavior and generate a behavior signature that identifies the most relevant features of the observed mobile device behavior from the perspective of the monitoring secondary processing core. Each secondary processing core may send the generated behavior signature to a primary processing core of the mobile device which may intelligently combine the behavior signatures received from the secondary processing cores e.g. via a task graph and generate a global behavior vector that identifies a complete behavior of a distributed software application or a complete mobile device behavior. The mobile device may then use the generated behavior vector to identify classify model prevent and or correct the conditions and behaviors that have a high potential to negatively impact the mobile device.

In an aspect an master observer process daemon module or sub system herein collectively referred to as a module of a primary processing core of the mobile device may instrument or coordinate various application programming interfaces APIs at various levels of the mobile device system and collect behavior information from the instrumented APIs. In an aspect the master observer module may receive partial incomplete behavior signatures generated in slave observer modules of secondary processing cores. Each partial incomplete behavior signature may succinctly describe a portion of the overall behavior of the mobile device or software application observed e.g. via the instrumented APIs in the secondary processing core in a value or vector data structure e.g. in the form of a string of numbers state machine etc. . Each partial incomplete behavior signature may also describe the overall behavior of the mobile device or software application from the perspective of or from within the context of a secondary processing core. For example a partial incomplete behavior signature may describe portions of a software application executed by a secondary processing core or which accessed memory or processing resources available to the secondary processing core.

The master observer module in the primary processing core may use a task graph to recombine the partial incomplete behavior signatures received from the secondary processing cores to generate a behavior vector suitable for use in determining whether the overall behavior of the software application or mobile device is consistent with normal operating patterns of that mobile device. Each behavior vector may succinctly describe the overall behavior of the mobile device or a specific software application in a value or vector data structure e.g. in the form of a string of numbers state machine etc. .

The master observer module may send the generated behavior vector to an analyzer module e.g. via a memory write operation etc. of the mobile device which may generate spatial and or temporal correlations based on information included in the behavior vector and or information collected from various other mobile device sub systems. The generated spatial and or temporal correlations may be used by various modules e.g. by an actuation module etc. of the mobile device to identify and or respond to behaviors that are determined to have a high probability of negatively impacting the mobile device s performance or battery consumption levels.

In an aspect the primary processing core of the mobile device may be on the same chip or substrate as the secondary processing cores. In an aspect one or more of the secondary processing core may be on a different chip or substrate as the primary processing core. In an aspect the master and secondary processing cores may each be configured with a different operating system and or implement different hardware description languages or instruction set architectures. In various aspects the primary and secondary processing cores may be in the same SIP SOC chip substrate circuit or microprocessor.

The various aspects may be implemented in a number of different mobile devices including single processor and multiprocessor systems and a system on chip SOC . is an architectural diagram illustrating an example system on chip SOC architecture that may be used in computing devices implementing the various aspects. The SOC may include a number of heterogeneous processors such as a digital signal processor DSP a modem processor a graphics processor and an application processor . The SOC may also include one or more coprocessors e.g. vector co processor connected to one or more of the heterogeneous processors .

Each processor may include one or more cores and each processor core may perform operations independent of the other processors cores. For example the SOC may include a processor that executes a first type of operating system e.g. FreeBSD LINUX OS X etc. and a processor that executes a second type of operating system e.g. Microsoft Windows 8 . In various aspects each of the processors may be a master or primary processing core and each of the other processors may be a non master or secondary processing core.

The SOC may also include analog circuitry and custom circuitry for managing sensor data analog to digital conversions wireless data transmissions and for performing other specialized operations such as processing encoded audio signals for games and movies. The SOC may further include system components and resources such as voltage regulators oscillators phase locked loops peripheral bridges data controllers memory controllers system controllers access ports timers and other similar components used to support the processors and clients running on a computing device.

The resources system components and custom circuitry may include circuitry to interface with peripheral devices such as cameras electronic displays wireless communication devices external memory chips etc. The processors may be interconnected to one or more memory elements system components and resources and custom circuitry via an interconnection bus module which may include an array of reconfigurable logic gates and or implement a bus architecture e.g. CoreConnect AMBA etc. . Communications may be provided by advanced interconnects such as high performance networks on chip NoCs .

The SOC may further include an input output module not illustrated for communicating with resources external to the SOC such as a clock and a voltage regulator . Resources external to the SOC e.g. clock voltage regulator may be shared by two or more of the internal SOC processors cores e.g. DSP modem processor graphics processor application processor etc. .

The SOC may also include hardware and or software components suitable for collecting sensor data from sensors including speakers user interface elements e.g. input buttons touch screen display etc. microphone arrays sensors for monitoring physical conditions e.g. location direction motion orientation vibration pressure etc. cameras compasses global positioning system GPS receivers communications circuitry e.g. Bluetooth WLAN WiFi etc. and other well known components e.g. accelerometer etc. of modern electronic devices.

In an aspect the application processor may be a master processing core and the other processors may be non master processing cores. In an aspect the application processor may be a master processor and the other processors may be a plurality of non master processing cores or a plurality of non master processors of a mobile device. In an aspect the master processor may be configured to monitor a distribution of sub tasks of a single application to the plurality of non master processors. In an aspect each non master processor may be configured to observe a portion of a mobile device behavior that is relevant to that non master processor and generate a behavior signature based on the observations. In an aspect the master processor may be configured to combine two or more behavior signatures received from two or more non master processors in the master processor to generate a global behavior vector that describes an entire or complete mobile device behavior or application and which may be provided to an analyzer module for processing. In an aspect the master processor may include means for processing the global behavior vector in an analyzer module to determine whether a software application is benign or not benign.

In addition to the SOC discussed above the various aspects may be implemented in a wide variety of multiprocessor and multicore processor systems. illustrates an example multicore processor architecture that may be used to implement the various aspects. The multicore processor may include two or more independent processing cores in close proximity e.g. on a single substrate die integrated chip etc. . The proximity of the processing cores allows memory to operate at a much higher frequency clock rate than is possible if the signals have to travel off chip. Moreover the proximity of the processing cores allows for the sharing of on chip memory and resources e.g. voltage rail as well as for more coordinated cooperation and synchronization between cores.

In various aspects the processing cores may be identical to one another be heterogeneous and or implement different specialized functions. Thus processing cores need not be symmetric either from the operating system perspective e.g. may execute different operating systems or from the hardware perspective e.g. may implement different instruction sets architectures . In addition each processing core may have exclusive control over some resources and share other resources with the other cores.

The processing cores may communicate with each other via the bus interconnect interface direct memory read write operations to a shared memory function calls method invocations procedure calls message exchanges domain sockets e.g. Unix domain sockets and other forms of inter process communication IPC .

In various aspects the multicore processor may be a master processing core e.g. an application processor CPU etc. or a non master processing core. In an aspect one processing core may be a mater processing core and the other processing cores may be non master processing cores.

In the example illustrated in the multicore processor includes a multi level cache which includes a plurality of Level 1 L1 caches and Level 2 L2 caches . The multicore processor also includes a bus interconnect interface a main memory and an input output module . The L2 caches may be larger and slower than the L1 caches but smaller and substantially faster than a main memory unit. Each processing core may include a processing unit that has private access to an L1 cache . The processing cores may share access to an L2 cache e.g. L2 cache or may have access to an independent L2 cache e.g. L2 cache .

The L1 and L2 caches may be used to store data frequently accessed by the processing units whereas the main memory may be used to store larger files and data units being accessed by the processing cores . The multicore processor may be configured so that the processing cores seek data from memory in order first querying the L1 cache then L2 cache and then the main memory if the information is not stored in the caches. If the information is not stored in the caches or the main memory multicore processor may seek information from an external memory and or a hard disk memory .

Multiprocessor hardware designs such as those discussed with reference to may include multiple processing cores of different capabilities inside the same package often on the same piece of silicon. Symmetric multiprocessing hardware includes two or more identical processors connected to a single shared main memory that are controlled by a single operating system. Asymmetric or loosely coupled multiprocessing hardware may include two or more heterogeneous processors cores that may each be controlled by an independent operating system and connected to one or more shared memories resources. The various aspects may include or make use of any combination of symmetric and asymmetric multiprocessing hardware systems.

In the example illustrated in the processing core includes a behavior observer module a behavior analyzer module an external context information module and an actuator module . The processing core may be configured to receive behavior signatures and other communications from one or more slave behavior observer modules .

Each of the modules may be implemented in software hardware or any combination thereof. In various aspects the modules may be implemented within parts of the operating system e.g. within the kernel in the kernel space in the user space etc. within separate programs or applications in specialized hardware buffers or processors or any combination thereof. In an aspect one or more of the modules may be implemented as software instructions executing on one or more processing cores of a mobile device.

Any of the behavior observer modules may be configured to instrument or coordinate application programming interfaces APIs at various levels modules of the mobile device and monitor observe mobile device operations and events e.g. system events state changes etc. at the various levels modules via the instrumented APIs collect information pertaining to the observed operations events intelligently filter the collected information generate one or more observations based on the filtered information generate behavior signatures store the generated observations and or behavior signatures in a memory e.g. in a log file cache memory etc. and or send e.g. via memory writes function calls etc. the generated signatures or observations to a master primary processing core or to a behavior analyzer module .

By generating a partial incomplete light weight or succinct behavior signature in each processing core to describe a portion of the application from the perspective of or from within the context of each individual processing core the behavior observer modules may generate behavior information from a reduced set of observations and thus operations that may be more readily combined with other observations behavior information collected from other processing cores to identify analyze and or respond to a complete mobile device behavior or condition that has a high potential to negatively impact the mobile device. In addition the behavior signatures allow the behavior information to be communicated across among between multiple heterogeneous processing cores efficiently and without negatively impacting the mobile device.

Any of the behavior observer modules may monitor observe mobile device operations and events by collecting information pertaining to library application programming interface API calls in an application framework or run time libraries system call APIs file system and networking sub system operations device including sensor devices state changes and other similar events. The behavior observer modules may also monitor file system activity which may include searching for filenames categories of file accesses personal info or normal data files creating or deleting files e.g. type exe zip etc. file read write seek operations changing file permissions etc.

The behavior observer modules may also monitor observe data network activity which may include types of connections protocols port numbers server client that the device is connected to the number of connections volume or frequency of communications etc. The behavior observer modules may monitor phone network activity which may include monitoring the type and number of calls or messages e.g. SMS etc. sent out received or intercepted e.g. the number of premium calls placed .

The behavior observer modules may also monitor observe the system resource usage which may include monitoring the number of forks memory access operations number of files open etc. The behavior observer modules may monitor the state of the mobile device which may include monitoring various factors such as whether the display is on or off whether the device is locked or unlocked the amount of battery remaining the state of the camera etc. The behavior observer modules may also monitor inter process communications IPC by for example monitoring intents to crucial services browser contracts provider etc. the degree of inter process communications pop up windows etc.

The behavior observer modules may also monitor observe driver statistics and or the status of one or more hardware components which may include cameras sensors electronic displays WiFi communication components data controllers memory controllers system controllers access ports timers peripheral devices wireless communication components external memory chips voltage regulators oscillators phase locked loops peripheral bridges and other similar components used to support the processors and clients running on the mobile computing device.

The behavior observer modules may also monitor observe one or more hardware counters that denote the state or status of the mobile computing device and or mobile device sub systems. A hardware counter may include a special purpose register of the processors cores that is configured to store a count or state of hardware related activities or events occurring in the mobile computing device.

The behavior observer modules may also monitor observe actions or operations of software applications software downloads from an application download server e.g. Apple App Store server mobile device information used by software applications call information text messaging information e.g. SendSMS BlockSMS ReadSMS ect. media messaging information e.g. ReceiveMMS user account information location information camera information accelerometer information browser information content of browser based communications content of voice based communications short range radio communications e.g. Bluetooth WiFi etc. content of text based communications content of recorded audio files phonebook or contact information contacts lists etc.

The behavior observer modules may monitor observe transmissions or communications of the mobile device including communications that include voicemail VoiceMailComm device identifiers DeviceIDComm user account information UserAccountComm calendar information CalendarComm location information LocationComm recorded audio information RecordAudioComm accelerometer information AccelerometerComm etc.

The behavior observer modules may monitor observe usage of and updates changes to compass information mobile device settings battery life gyroscope information pressure sensors magnet sensors screen activity etc. The behavior observer modules may monitor observe notifications communicated to and from a software application AppNotifications application updates etc. The behavior observer modules may monitor observe conditions or events pertaining to a first software application requesting the downloading and or install of a second software application. The behavior observer modules may monitor observe conditions or events pertaining to user verification such as the entry of a password etc.

The behavior observer modules may monitor observe conditions or events at multiple levels of the mobile device including the application level radio level and sensor level.

Application level observations may include observing the user via facial recognition software observing social streams observing notes entered by the user observing events pertaining to the use of PassBook Google Wallet Paypal etc. Application level observations may also include observing events relating to the use of virtual private networks VPNs and events pertaining to synchronization voice searches voice control e.g. lock unlock a phone by saying one word language translators the offloading of data for computations video streaming camera usage without user activity microphone usage without user activity etc.

Radio level observations may include determining the presence existence or amount of any or more of user interaction with the mobile device before establishing radio communication links or transmitting information dual multiple SIM cards Internet radio mobile phone tethering offloading data for computations device state communications the use as a game controller or home controller vehicle communications mobile device synchronization etc. Radio level observations may also include monitoring the use of radios WiFi WiMax Bluetooth etc. for positioning peer to peer p2p communications synchronization vehicle to vehicle communications and or machine to machine m2m . Radio level observations may further include monitoring network traffic usage statistics or profiles.

Sensor level observations may include monitoring a magnet sensor or other sensor to determine the usage and or external environment of the mobile device. For example the mobile device processor may be configured to determine whether the phone is in a holster e.g. via a magnet sensor configured to sense a magnet within the holster or in the user s pocket e.g. via the amount of light detected by a camera or light sensor . Detecting that the mobile device is in a holster may be relevant to recognizing suspicious behaviors for example because activities and functions related to active usage by a user e.g. taking photographs or videos sending messages conducting a voice call recording sounds etc. occurring while the mobile device is holstered could be signs of nefarious processes executing on the device e.g. to track or spy on the user . Other examples of sensor level observations related to usage or external environments include detecting near field communications NFC collecting information from a credit card scanner barcode scanner or mobile tag reader detecting the presence of a USB power charging source detecting that a keyboard or auxiliary device has been coupled to the mobile device detecting that the mobile device has been coupled to a computing device e.g. via USB etc. determining whether an LED flash flashlight or light source has been modified or disabled e.g. maliciously disabling an emergency signaling app etc. detecting that a speaker or microphone has been turned on or powered detecting a charging or power event detecting that the mobile device is being used as a game controller etc. Sensor level observations may also include collecting information from medical or healthcare sensors or from scanning the user s body collecting information from an external sensor plugged into the USB audio jack collecting information from a tactile or haptic sensor e.g. via a vibrator interface etc. collecting information pertaining to the thermal state of the mobile device etc.

To reduce the number of factors monitored to a manageable level in an aspect the behavior observer modules may perform coarse observations by monitoring observing an initial set of behaviors or factors that are a small subset of all factors that could contribute to the mobile device s degradation. In an aspect the initial set of behaviors and or subset of the factors may be selected by analysis of benign and problematic applications on mobile devices. In various aspects the behavior observer module may receive the initial set of behaviors and or factors from another processing core e.g. master processing core etc. a network server or a component in a cloud service provider network.

The behavior analyzer module may receive behavior vectors from the behavior observer module and compare them to one or more behavior modules to determine whether a particular mobile device behavior software application or process is performance degrading malicious benign or suspicious. The behavior analyzer module may also compare the received information i.e. observations with contextual information received from the external context information module to identify subsystems processes and or applications that are contributing to or are likely to contribute to the device s degradation over time or which may otherwise cause problems on the mobile device.

In an aspect the behavior analyzer module may include intelligence for utilizing a limited set of information i.e. coarse observations to identify behaviors processes or programs that are contributing to or are likely to contribute to the device s degradation over time or which may otherwise cause problems on the device. For example the behavior analyzer module may be configured to analyze information e.g. in the form of observations collected from the various processing cores and modules e.g. the behavior observer module external context information module etc. learn the normal operational behaviors of the mobile device and generate or update one or more behavior vectors based the results of the comparisons. In an aspect the behavior analyzer module may send the generated behavior vectors to the actuator module which may perform various actions or operations to correct mobile device behaviors determined to be malicious or performance degrading and or perform operations to heal cure isolate or otherwise fix the identified problem.

In an aspect if the behavior analyzer module determines that a behavior software application or process is suspicious the behavior analyzer module may notify the behavior observer module which may adjust the adjust the granularity of its observations i.e. the level of detail at which mobile device behaviors are observed and or change the behaviors that are observed based on information received from the behavior analyzer module e.g. results of the real time analysis operations generate or collect new or additional behavior information and send the new additional information to the behavior analyzer module for further analysis classification. Such feedback communications between the behavior observer module and the behavior analyzer module enable the mobile device to recursively increase the granularity of the observations i.e. make finer or more detailed observations or change the features behaviors that are observed until a source of a suspicious or performance degrading mobile device behavior is identified until a processing or batter consumption threshold is reached or until the mobile device processor determines that the source of the suspicious or performance degrading mobile device behavior cannot be identified from further increases in observation granularity.

On a heterogeneous platform a software application may be broken down into several sub tasks each of which may be scheduled onto a different core. That is different portions of a software application may perform operations e.g. API calls on different individual cores and the application s behavior may be spread across the different cores. For this reason it is often difficult challenging to obtain a complete picture of an application s behavior across the multiple heterogeneous cores processing units.

In an aspect the mobile device may be configured to generate a task graph that characterizes the complete behavior of a software application distributed across multiple heterogeneous processing cores as a function of parameters API calls parameter values and timestamps. In an aspect the task graph may be used to obtain a complete picture of an application s behavior across the multiple heterogeneous processing cores.

Due to the hardware software and or architectural differences between the heterogeneous cores Cores 1 3 communicating information between the cores may be prohibitively expensive or may reduce the performance and power consumption of the mobile device. That is mobile devices are resource constrained systems that have relatively limited processing memory and energy resources. Therefore cumbersome or exhaustive approaches to coordinating the operations of the multiple cores in order to observe or monitor a software application or behavior are not well suited for use in mobile devices. For example transferring API logs from the various slave cores to a master core can result in prohibitive overheads particularly for the battery driven mobile devices. That is it may be prohibitively expensive to transfer or send API logs generated in the secondary processing cores to the master core for analysis.

The various aspects may reduce or avoid cumbersome communications or exhaustive approaches to coordinating the operations of the multiple cores by generating behavior signatures in the secondary cores and communicating the behavior signatures instead of API logs the across cores. The master processing core may receive and combine the partial signatures in a meaningful fashion i.e. via the task graph based on time using an action sequence number etc. to obtain the overall behavior of the software application.

In the example illustrated in the master core includes a master behavior observer module that includes a global behavior detection unit module a local behavior detection unit module a task graph module a work distribution monitor module and a local observation module. Each of the secondary cores may include a slave behavior observer module that includes a local behavior detection unit module and a local observation module. The local behavior detection unit modules may be configured to interpret local observations in their respective cores and provide a behavior signature to the global behavior detection unit module for each software application being monitored.

Each slave behavior observer module may monitor one or more activities e.g. important APIs in its respective secondary core generate a signature of the monitored activity that describes the behavior of the software application with respect to that particular core and is thus a signature of a partial behavior of the application . The behavior signature may be generated from behavior information collected by the slave behavior observer module and succinctly describe portions of the mobile device behavior in a value or vector data structure e.g. in the form of a string of numbers etc. . In an aspect the behavior signature may function as an identifier and or a certification that enables the master processing core to quickly recognize and identify a sub task and its position in the application task graph without performing any additional cumbersome or power intensive analysis or verification operations.

The slave behavior observer module may send the generated signature to the master behavior observer module which may use the application task graph to combine the partial incomplete behavior signatures to obtain identify the complete behavior of the software application.

The work distribution monitor may be configured to keep track of how the operations work i.e. sub tasks within a single application are being distributed to the various secondary cores which may be achieved by monitoring calls to the transport layer the heterogonous transport protocol module or to the global behavior detection unit module. The work distribution monitor may also generate and maintain the application task graph i.e. a concurrent execution pattern for use by the global behavior detection unit which may use local behavior signatures received from the secondary cores in conjunction with the task graph to generate a behavior vector that describes the overall behavior of the software application. This behavior vector may then be sent to the behavior analyzer module and used to identify behaviors that have a high probability of negatively impacting the mobile device s performance or battery consumption levels.

The observer mode module may receive control information from various sources which may include an analyzer unit e.g. the behavior analyzer module described above with reference to and or an application API. The observer mode module may send control information pertaining to various observer modes to the adaptive filter module and the high level behavior detection module .

The adaptive filter module may receive data information from multiple sources and intelligently filter the received information to generate a smaller subset of information selected from the received information. This filter may be adapted based on information or control received from the analyzer module or a higher level process communicating through an API. The filtered information may be sent to the throttle module which may be responsible for controlling the amount of information flowing from the filter to ensure that the high level behavior detection module does not become flooded or overloaded with requests or information.

The high level behavior detection module may receive data information from the throttle module control information from the observer mode module and context information from other components of the mobile device. The high level behavior detection module may use the received information to perform spatial and temporal correlations to detect or identify high level behaviors that may cause the device to perform at sub optimal levels. The results of the spatial and temporal correlations may be sent to the behavior vector generator which may receive the correlation information and generate a behavior vector that describes the behaviors of particular process application or sub system. In an aspect the behavior vector generator may generate the behavior vector such that each high level behavior of a particular process application or sub system is an element of the behavior vector. In an aspect the generated behavior vector may be stored in a secure buffer . Examples of high level behavior detection may include detection of the existence of a particular event the amount or frequency of another event the relationship between multiple events the order in which events occur time differences between the occurrence of certain events etc.

The behavior observer module may perform adaptive observation techniques and control the observation granularity based on information received from a variety of sources. For example the high level behavior detection module may receive information from the throttle module the observer mode module and context information received from other components e.g. sensors of the mobile device. As an example a high level behavior detection module performing temporal correlations might detect that a camera has been used and that the mobile device is attempting to upload the picture to a server. The high level behavior detection module may also perform spatial correlations to determine whether an application on the mobile device took the picture while the device was holstered and attached to the user s belt. The high level behavior detection module may determine whether this detected high level behavior e.g. usage of the camera while holstered is a behavior that is acceptable or common which may be achieved by comparing the current behavior with past behaviors of the mobile device and or accessing information collected from a plurality of devices e.g. information received from a crowd sourcing server . Since taking pictures and uploading them to a server while holstered is an unusual behavior as may be determined from observed normal behaviors in the context of being holstered in this situation the high level behavior detection module may recognize this as a potentially threatening behavior and initiate an appropriate response e.g. shutting off the camera sounding an alarm etc. .

The various aspects may provide cross layer observations on mobile devices encompassing webkit SDK NDK kernel drivers and hardware in order to characterize system behavior. The behavior observations may be made in real time.

The observer module may perform adaptive observation techniques and control the observation granularity. As discussed above there are a large number i.e. thousands of factors that could contribute to the mobile device s degradation and it may not be feasible to monitor observe all of the different factors that may contribute to the degradation of the device s performance. To overcome this the various aspects dynamically identify the relevant behaviors that are to be observed and dynamically determine the level of detail at which the identified behaviors are to be observed.

When the mobile device processor determines that the suspicious behaviors or potential problems can not be identified and or corrected based on the results of the behavioral analysis i.e. determination block No in determination block the mobile device processor may determine whether there is a likelihood of a problem. In an embodiment the mobile device processor may determine that there is a likelihood of a problem by computing a probability of the mobile device encountering potential problems and or engaging in suspicious behaviors and determining whether the computed probability is greater than a predetermined threshold. When the mobile device processor determines that the computed probability is not greater than the predetermined threshold and or there is not a likelihood that suspicious behaviors or potential problems exist and or are detectable i.e. determination block No the processor may return to block to perform additional coarse observations.

When the mobile device processor determines that there is a likelihood that suspicious behaviors or potential problems exist and or are detectable i.e. determination block Yes in block the mobile device processor may perform deeper logging observations or final logging on the identified subsystems processes or applications. In block the mobile device processor may perform deeper and more detailed observations on the identified subsystems processes or applications. In block the mobile device processor may perform further and or deeper behavioral analysis based on the deeper and more detailed observations. In determination block the mobile device processor may again determine whether the suspicious behaviors or potential problems can be identified and corrected based on the results of the deeper behavioral analysis. When the mobile device processor determines that the suspicious behaviors or potential problems can not be identified and corrected based on the results of the deeper behavioral analysis i.e. determination block No the processor may repeat the operations in blocks until the level of detail is fine enough to identify the problem or until it is determined that the problem cannot be identified with additional detail or that no problem exists.

When the mobile device processor determines that the suspicious behaviors or potential problems can be identified and corrected based on the results of the deeper behavioral analysis i.e. determination block Yes in block the mobile device processor may perform operations to correct the problem behavior and the processor may return to block to perform additional operations.

In an aspect as part of blocks of method the mobile device processor may perform real time behavior analysis of the system s behaviors to identify suspicious behavior from limited and coarse observations to dynamically determine the behaviors to observe in greater detail and to dynamically determine the precise level of detail required for the observations. This enables the mobile device processor to efficiently identify and prevent problems from occurring without requiring the use of a large amount of processor memory or battery resources on the device.

In block a master observer module of the master or primary processing core may monitor calls to the transport layer and generate a task graph. In block the master observer module may receive behavior signatures from the slave secondary processing cores Core Core Core n . In block the master observer module may combine the received behavior signatures with behavior information collected on the master core to generate a global behavior vector. In block the master observer module may send the generated global behavior vector to an analyzer module for further analysis.

Example components and modules of an exemplary non limiting aspect of such a mobile device are illustrated in . A mobile computing device may include a circuit board of electronic components some or all of which may be integrated into an on chip system that includes a control processor coupled to memory . The control processor may further be coupled to a digital signal processor and or an analog signal processor which also be coupled together. In some embodiments the control processor and a digital signal processor may be the same component or may be integrated into the same processor chip. A display controller and a touchscreen controller may be coupled to the control processor and to a display touchscreen within or connected to the mobile computing device .

The control processor may also be coupled to removable memory e.g. an SD memory or SIM card in the case of mobile computing devices and or to external memory such as one or more of a disk drive CD drive and a DVD drive. The control processor may also be coupled to a Universal Serial Bus USB controller which couples to a USB port . In various aspects a power supply may be coupled to the circuit board through the USB controller or through different electrical connections to provide power e.g. DC power to the various electronic components.

The control processor may also be coupled to a video encoder e.g. a phase alternating line PAL encoder a sequential couleur a memoire SECAM encoder or a national television system s committee NTSC encoder. Further the video encoder may be coupled to a video amplifier which may be coupled to the video encoder and the display touchscreen . Also a video port may be coupled to the video amplifier to enable connecting the mobile computing device to an external monitor television or other display not shown .

The control processor may be coupled to a radio frequency RF transceiver such as via an analog signal processor . The RF transceiver may be coupled to an RF antenna for transmitting and receiving RF signals. The RF transceiver may be configured to transmit and receive communication signals of one or more different wireless communication protocols including for example cellular telephone e.g. G 3 UMTS CDMA etc. WiFi WiMax and Bluetooth.

The control processor may further be coupled to a network card which may be coupled to a network connector and or the RF transceiver and configured to enable communications via an external network e.g. local area networks the Internet an intranet WiFi networks Bluetooth networks personal area network PAN etc. The network card may be in the form of a separate chip or card or may be implemented as part of the control processor or the RF transceiver or both as a full solution communication chip.

A number of analog devices may be coupled to the control processor via the analog signal processor such as a keypad . In other implementations a keypad or keyboard may include its own processor so that the interface with the control processor may be via direct connection not shown via a network connection e.g. via the network card or via the USB port .

In some implementations a digital camera may be coupled to the control processor . In an exemplary aspect the digital camera may be a charge coupled device CCD camera or a complementary metal oxide semiconductor CMOS camera. The digital camera may be built into the mobile computing device or coupled to the device by an external cable.

In some implementations an audio CODEC e.g. a stereo CODEC may be coupled to the analog signal processor and configured to send sound signals to one or more speakers via an audio amplifier . The audio CODEC may also be coupled to a microphone amplifier which may be coupled to a microphone e.g. via a microphone jack . A headphone jack may also be coupled to the audio CODEC for outputting audio to headphones.

In some implementations the mobile computing device may include a separate RF receiver circuit which may be coupled to an antenna for receiving broadcast wireless communication signals. The receiver circuit may be configured to receive broadcast television signals e.g. EBMS broadcasts and provide received signals to the DSP for processing. In some implementations the receiver circuit may be configured to receive FM radio signals in which case the received signals may be passed to the Audio CODEC for processing.

In an aspect processor executable instructions for accomplishing one or more of the method operations described above may be stored in the internal memory removable memory and or non volatile memory e.g. as on a hard drive CD drive or other storage accessible via a network . Such processor executable instructions may be executed by the control processor in order to perform the methods described herein.

The various aspects may be implemented on a variety of mobile computing devices an example of which is illustrated in in the form of a smartphone. A smartphone may include a processor coupled to internal memory a display and to a speaker. Additionally the smartphone may include an antenna for sending and receiving electromagnetic radiation that may be connected to a wireless data link and or cellular telephone transceiver coupled to the processor . Smartphone typically also include menu selection buttons or rocker switches for receiving user inputs.

A typical smartphone also includes a sound encoding decoding CODEC circuit which digitizes sound received from a microphone into data packets suitable for wireless transmission and decodes received sound data packets to generate analog signals that are provided to the speaker to generate sound. Also one or more of the processor wireless transceiver and CODEC may include a digital signal processor DSP circuit not shown separately .

Portions of the aspect methods may be accomplished in a client server architecture with some of the processing occurring in a server such as maintaining databases of normal operational behaviors which may be accessed by a mobile device processor while executing the aspect methods. Such aspects may be implemented on any of a variety of commercially available server devices such as the server illustrated in . Such a server typically includes a processor coupled to volatile memory and a large capacity nonvolatile memory such as a disk drive . The server may also include a floppy disc drive compact disc CD or DVD disc drive coupled to the processor . The server may also include network access ports coupled to the processor for establishing data connections with a network such as a local area network coupled to other broadcast system computers and servers.

The processors may be any programmable microprocessor microcomputer or multiple processor chip or chips that can be configured by software instructions applications to perform a variety of functions including the functions of the various aspects described below. In some mobile devices multiple processors may be provided such as one processor dedicated to wireless communication functions and one processor dedicated to running other applications. Typically software applications may be stored in the internal memory before they are accessed and loaded into the processor . The processor may include internal memory sufficient to store the application software instructions.

Many mobile computing devices operating system kernels are organized into a user space where non privileged code runs and a kernel space where privileged code runs . This separation is of particular importance in Android and other general public license GPL environments where code that is part of the kernel space must be GPL licensed while code running in the user space may not be GPL licensed. It should be understood that the various software components modules discussed here may be implemented in either the kernel space or the user space unless expressly stated otherwise.

As used in this application the terms component module system service engine listener manager and the like are intended to include a computer related entity such as but not limited to hardware firmware a combination of hardware and software software or software in execution which are configured to perform particular operations or functions. For example a component may be but is not limited to a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device may be referred to as a component. One or more components may reside within a process and or thread of execution and a component may be localized on one processor or core and or distributed between two or more processors or cores. In addition these components may execute from various non transitory computer readable media having various instructions and or data structures stored thereon. Components may communicate by way of local and or remote processes function or procedure calls electronic signals data packets memory read writes and other known computer processor and or process related communication methodologies.

The foregoing method descriptions and the process flow diagrams are provided merely as illustrative examples and are not intended to require or imply that the steps of the various aspects must be performed in the order presented. As will be appreciated by one of skill in the art the order of steps in the foregoing aspects may be performed in any order. Words such as thereafter then next etc. are not intended to limit the order of the steps these words are simply used to guide the reader through the description of the methods. Further any reference to claim elements in the singular for example using the articles a an or the is not to be construed as limiting the element to the singular.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the aspects disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The hardware used to implement the various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a multiprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a multiprocessor a plurality of multiprocessors one or more multiprocessors in conjunction with a DSP core or any other such configuration. Alternatively some steps or methods may be performed by circuitry that is specific to a given function.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored as one or more instructions or code on a non transitory computer readable storage medium non transitory computer readable medium or non transitory processor readable medium. The steps of a method or algorithm disclosed herein may be embodied in a processor executable software module which may reside on a non transitory computer readable or processor readable storage medium. Non transitory computer readable or processor readable storage media may be any storage media that may be accessed by a computer or a processor. By way of example but not limitation such non transitory computer readable or processor readable media may include RAM ROM EEPROM FLASH memory CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to store desired program code in the form of instructions or data structures and that may be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above are also included within the scope of non transitory computer readable and processor readable media. Additionally the operations of a method or algorithm may reside as one or any combination or set of codes and or instructions on a non transitory processor readable medium and or computer readable medium which may be incorporated into a computer program product.

The preceding description of the disclosed aspects is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the aspects shown herein but is to be accorded the widest scope consistent with the following claims and the principles and novel features disclosed herein.

