---

title: High availability distributed deduplicated storage system
abstract: A high availability distributed, deduplicated storage system according to certain embodiments is arranged to include multiple deduplication database media agents. The deduplication database media agents store signatures of data blocks stored in secondary storage. In addition, the deduplication database media agents are configured as failover deduplication database media agents in the event that one of the deduplication database media agents becomes unavailable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633033&OS=09633033&RS=09633033
owner: Commvault Systems, Inc.
number: 09633033
owner_city: Tinton Falls
owner_country: US
publication_date: 20140110
---
The present application claims priority to U.S. Provisional App. No. 61 751 699 filed Jan. 11 2013 entitled HIGH AVAILABILITY DISTRIBUTED DEDUPLICATED STORAGE SYSTEM the entirety of which is incorporated herein by reference.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks while minimizing impact on productivity. Protecting information is often part of a routine process that is performed within an organization.

A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect computing systems used by each of its employees such as those used by an accounting department marketing department engineering department and so forth.

Given the rapidly expanding volume of data under management companies also continue to seek innovative techniques for managing data growth in addition to protecting data. For instance companies often implement migration techniques for moving data to lower cost storage over time and data reduction techniques for reducing redundant data pruning lower priority data etc.

Enterprises also increasingly view their stored data as a valuable asset. Along these lines customers are looking for solutions that not only protect and manage but also leverage their data. For instance solutions providing data analysis capabilities improved data presentation and access features and the like are in increasing demand.

In response to these challenges one technique developed by storage system providers is data deduplication. Deduplication typically involves eliminating or reducing the amount of redundant data stored and communicated within a storage system improving storage utilization. For example data can be divided into units of a chosen granularity e.g. files or data blocks . As new data enters the system the data units can be checked to see if they already exist in the storage system. If the data unit already exists instead of storing and or communicating a duplicate copy the storage system stores and or communicates a reference to the existing data segment.

Deduplication can improve storage utilization system traffic e.g. over a networked storage system or both. Deduplication techniques designed to reduce the demands on storage systems during storage operations such as backup and or replication operations can be found in the following U.S. patent applications each of which is incorporated by reference in its entirety. One or more embodiments of the present disclosure may be used with systems and methods disclosed therein 

As the amount of data increases in systems employing deduplication the amount of computational and storage overhead involved in managing the deduplication process can become quite significant. For example as the amount of data increases there is a corresponding increase in the number of deduplication data blocks or other deduplication data units to maintain. Moreover such systems often calculate and store signatures e.g. hashes of the data blocks associated with each data block which are used to identify and remove redundant data blocks presenting further capacity and maintenance challenges.

In order to address such challenges a deduplicated storage system is provided according to certain embodiments that distributes deduplicated data across multiple networked media agents. As will be described in greater detail the media agents can communicate with one another using a light weight customized communication scheme. Using multiple distributed media agents for deduplication will generally be referred to as parallel deduplication throughout the disclosure.

In some cases deduplication management information is stored separately from the deduplicated data in separate special purpose networked storage nodes for example. The management information can include without limitation data block signatures and associated metadata and mappings of deduplicated files including pointers to data blocks making up the respective files and or data block location information. The management information can also be distributed across multiple management nodes e.g. deduplication database media agents in a manner similar to the deduplicated data. The distributed nature of the deduplicated data and or management information enhances scalability among providing other benefits.

In addition to increase system availability and reduce the likelihood that a backup operation will fail each of the special purpose networked storage nodes can act as a failover for another special purpose networked storage node. For example if management information is evenly distributed across four nodes and one of the nodes becomes unavailable another one of the four nodes can begin storing the management information that would have been stored in the unavailable node. If the failover node also becomes unavailable one or both of the remaining two nodes can store the management information that would have been stored in the two unavailable nodes etc.

Generally described the present disclosure is directed to a system method and computer readable non transitory storage medium for storing data to and restoring data from a storage system including a deduplication database. Although various aspects of the disclosure will be described with regard to examples and embodiments one skilled in the art will appreciate that the disclosed embodiments and examples should not be construed as limiting.

Each DDB media agent in the system can be assigned its own logical partition in a global deduplication database. Furthermore the system can assign the different DDB media agents to store the signatures of different data blocks. For example in some embodiments the system can assign the DDB media agents to store signatures based on a modulo operation performed on the signature of each data block. As an example and not to be construed as limiting if there are four DDB media agents DDB media agent DDB media agent and modulo is used to assign the signatures to different DDB media agents DDB media agent can store the signatures when the modulo operation results in a 0 DDB media agent can store the signatures that result in a 1 etc.

During a backup the system determines the signature of each data block and queries the DDB media agent assigned to store the corresponding signature based on the modulo operation. If the signature is found the system stores a link to a copy of the data block stored in secondary storage. If the signature is not found in the assigned DDB media agent a copy of the data block is stored in secondary storage and the signature and a link to the copy of the data block are stored in the assigned DDB media agent.

To increase system availability and reduce the likelihood that a backup operation will fail each DDB media agent can act as a failover DDB media agent for another DDB media agent. With continued reference to the example given above the DDB media agent can act as a failover for the DDB media agent the DDB media agent can act as the failover for the DDB media agent the DDB media agent for the DDB media agent and the DDB media agent for the DDB media agent. Thus if one of the DDB media agents e.g. DDB media agent becomes unavailable e.g. due to a network outage power outage hardware software malfunction scheduled maintenance etc. the system can use the assigned failover DDB media agent e.g. DDB media agent to store signatures that are assigned to be stored in the unavailable DDB media agent DDB media agent and to verify whether data blocks are already stored in secondary storage.

In addition if DDB media agent becomes unavailable as well its assigned failover DDB media agent e.g. DDB media agent can store the signatures for the two unavailable DDB media agents DDB media agent and DDB media agent and so on. The system can also use the failover DDB media agents for database pruning. Accordingly the system can remain available for backup operations despite the unavailability of one or more DDB media agents.

Furthermore once the unavailable DDB media agent becomes available the system can continue to refer to the failover DDB media agent for the signatures that were stored there while the other DDB media agent was unavailable. With continued reference to the example given above the system can track the signatures stored in DDB media agent as a result of the unavailability of DDB media agent. Thus even when DDB media agent becomes available the system can continue to refer to DDB media agent for the signatures stored thereon while DDB media agent was unavailable. For new signatures and signatures stored on DDB media agent previously the system can refer to DDB media agent.

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions have been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally includes combinations of hardware and software configured to protect and manage data and metadata generated and used by the various computing devices in the information management system .

The organization which employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to CommVault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The information management system can include a variety of different computing devices. For instance as will be described in greater detail herein the information management system can include one or more client computing devices and secondary storage computing devices .

Computing devices can include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers.

Other computing devices can include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc. Computing devices can include servers such as mail servers file servers database servers and web servers.

In some cases a computing device includes virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments computing devices can include one or more virtual machine s running on a physical virtual machine host operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual or physical machine as a mail server. A virtual machine manager VMM e.g. a Hypervisor may manage the virtual machines and reside and execute on the virtual machine host. Examples of techniques for implementing information management techniques in a cloud computing environment are described in U.S. Pat. No. 8 285 681 which is incorporated by reference herein. Examples of techniques for implementing information management techniques in a virtualized computing environment are described in U.S. Pat. No. 8 307 177 also incorporated by reference herein.

The information management system can also include a variety of storage devices including primary storage devices and secondary storage devices for example. Storage devices can generally be of any suitable type including without limitation disk drives hard disk arrays semiconductor memory e.g. solid state storage devices network attached storage NAS devices tape libraries or other magnetic non tape storage devices optical media storage devices combinations of the same and the like. In some embodiments storage devices can form part of a distributed file system. In some cases storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor . A storage device in some cases comprises a disk array or portion thereof.

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases the information management system generally refers to a combination of specialized components used to protect move manage manipulate analyze and or process data and metadata generated by the client computing devices . However the information management system in some cases does not include the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system residing on the client computing devices and the primary storage devices . As an example information management system may sometimes refer to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include any of the types of computing devices described above without limitation and in some cases the client computing devices are associated with one or more users and or corresponding user accounts of employees or other individuals.

The information management system generally addresses handles the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss and managed.

The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications browser applications mobile applications entertainment applications and so on.

The client computing devices can have at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. installed thereon which may support or host one or more file systems and other applications .

As shown the client computing devices and other components in the information management system can be connected to one another via one or more communication pathways . The communication pathways can include one or more networks or other connection types including as any of following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network a neural network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs.

Primary data according to some embodiments is production data or other live data generated by the operating system and other applications residing on a client computing device . The primary data is generally stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data . In some cases some or all of the primary data can be stored in cloud storage resources.

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary data may sometimes be referred to as a primary copy in the sense that it is a discrete set of data. However the use of this term does not necessarily imply that the primary copy is a copy in the sense that it was copied or otherwise derived from another stored version.

The primary storage devices storing the primary data may be relatively fast and or expensive e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be intended for relatively short term retention e.g. several hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data representing files may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to organize the primary data into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other hierarchies or organizations of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file e.g. a data block .

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLs system metadata e.g. registry information combinations of the same or the other similar information related to the data object.

In addition to metadata generated by or related to file systems and operating systems some of the applications and or other components of the information management system maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are generally associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of routing and or storing data to the particular primary storage device coordinating the routing and or storing of data to the particular primary storage device retrieving data from the particular primary storage device coordinating the retrieval of data from the particular primary storage device and modifying and or deleting data retrieved from the particular primary storage device .

The primary storage devices can include any of the different types of storage devices described above or some other kind of suitable storage device. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

In some cases each primary storage device is dedicated to an associated client computing device . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices e.g. via a network such as in a cloud storage implementation. As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications .

Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPs cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device . The hosted services may be implemented in a variety of computing environments. In some cases they are implemented in an environment having a similar arrangement to the information management system where various physical and logical components are distributed over a network.

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged or otherwise corrupted.

For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may sometimes be referred to as a secondary storage subsystem .

Creation of secondary copies can help in search and analysis efforts and meet other information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

The client computing devices access or receive primary data and communicate the data e.g. over the communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. In some other cases secondary copies can be stored in the same storage device as primary data and or other previously stored copies. For example in one embodiment a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies . Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s .

Since an instance of a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also in some embodiments stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediate components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediate components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules residing on corresponding secondary storage computing devices or other appropriate devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any of the computing devices described above without limitation In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy involving the copying of data from the primary storage subsystem to the secondary storage subsystem the client computing device in some embodiments communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections . In some other cases one or more secondary copies are created from existing secondary copies such as in the case of an auxiliary copy operation described in greater detail below.

Some or all primary data objects are associated with corresponding metadata e.g. Meta1 11 which may include file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy data objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy data objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization.

For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager .

By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a computing device for hosting the storage manager can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application. The storage manager generally initiates performs coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata.

As shown by the dashed arrowed lines the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager whereas payload data and payload metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of the storage manager . Control information can generally include parameters and instructions for carrying out information management operations such as without limitation instructions to perform a task associated with an operation timing information specifying when to initiate a task associated with an operation data path information specifying what components to communicate with or access in carrying out an operation and the like. Payload data on the other hand can include the actual data involved in the storage operation such as content data written to a secondary storage device in a secondary copy operation. Payload metadata can include any of the types of metadata described herein and may be written to a storage device along with the payload content data e.g. in the form of a header .

In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database of management related data and information management policies . The database may include a management index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices . For instance the storage manager index may store data associating a client computing device with a particular media agent and or secondary storage device as specified in a storage policy.

Administrators and other employees may be able to manually configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management.

Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager .

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components.

Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface . An information management cell may generally include a logical and or physical grouping of a combination of hardware and software components associated with performing information management operations on electronic data. For instance the components shown in may together form an information management cell. Multiple cells may be organized hierarchically. With this configuration cells may inherit properties from hierarchically superior cells or be controlled by other cells in the hierarchy automatically or otherwise . Alternatively in some embodiments cells may inherit or otherwise be associated with information management policies preferences information management metrics or other properties or characteristics according to their relative position in a hierarchy of storage operation cells. Cells may also be delineated and or organized hierarchically according to function geography architectural considerations or other factors useful or desirable in performing information management operations. A first cell may represent a geographic segment of an enterprise such as a Chicago office and a second storage operation cell may represent a different geographic segment such as a New York office. Other cells may represent departments within a particular office. Where delineated by function a first cell may perform one or more first types of information management operations e.g. one or more first types of secondary or other copies and a second cell may perform one or more second types of information management operations e.g. one or more second types of secondary or other copies .

In general the management agent allows multiple information management cells to communicate with one another. For example the information management system in some cases may be one information management cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in U.S. Pat. No. 7 035 880 which is incorporated by reference herein.

As discussed a variety of different types of applications can reside on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences between applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations. For instance the data agent may take part in performing data storage operations such as the copying archiving migrating replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent or may perform other functions such as encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple application specific data agents each of which may perform information management operations e.g. perform backup migration and data recovery associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data one data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and restore all of the data on a Microsoft Exchange server the client computing device may use one Microsoft Exchange Mailbox data agent to backup the Exchange mailboxes one Microsoft Exchange Database data agent to backup the Exchange databases one Microsoft Exchange Public Folder data agent to backup the Exchange Public Folders and one Microsoft Windows File System data agent to backup the file system of the client computing device . In such embodiments these data agents may be treated as four separate data agents even though they reside on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediate components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. As one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices . For instance other components in the system interact with the media agents to gain access data stored on the secondary storage devices whether it be for the purposes of reading writing modifying or deleting data. Moreover as will be described further media agents can generate and store data and metadata data that generally provides insight into the data stored on associated secondary storage devices .

Media agents can comprise separate nodes in the information management system e.g. nodes that are separate from the client computing devices storage manager and or secondary storage devices . In general a node within the information management system can be a logically and or physically separate component and in some cases is a component that is individually addressable or otherwise identifiable. In addition each media agent may reside on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents reside on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device coordinating the retrieval of data from a particular secondary storage device and modifying and or deleting data retrieved from the particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices one or more media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may reside on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent resides on a first server computer and is in communication with a secondary storage device s residing in a separate rack mounted RAID based system.

Where the information management system includes multiple media agents a first media agent may provide failover functionality for a second failed media agent . In addition media agents can be dynamically selected for storage operations to provide load balancing. Failover and load balancing are described in greater detail below.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device to perform an information management operation. For instance a media agent may instruct a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . As another example a secondary storage device may include an array of hard disk drives or solid state drives organized in a RAID configuration and the media agent may forward a logical unit number LUN and other appropriate information to the array which uses the received information to execute the desired storage operation. The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent resides. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index including data generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In some cases the index does not form a part of and is instead separate from the media agent database .

A media agent index or other data structure associated with the particular media agent may include information about the stored data. For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use in storage operations and other activities without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the data in the index may instead or additionally be stored along with the data in a secondary storage device e.g. with a copy of the index . In some embodiments the secondary storage devices can include sufficient information to perform a bare metal restore where the operating system of a failed client computing device or other restore target is automatically rebuilt as part of a restore operation.

Because the index maintained in the database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly or via one or more intermediary components to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may reside on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents reside can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications residing thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the storage management database is relatively large the management database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss incident at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage devices and corresponding media agents and or secondary storage devices . Moreover where multiple fungible components are available load balancing can be implemented to dynamically address identified bottlenecks. As an example the storage manager may dynamically select which media agents and or secondary storage devices to use for storage operations based on a processing load analysis of the media agents and or secondary storage devices respectively.

Moreover each client computing device in some embodiments can communicate with among other components any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with among other components any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner to provide load balancing failover and the like. Further examples of scalable systems capable of dynamic storage operations and of systems capable of performing load balancing and fail over are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager reside on the same client computing device . In another embodiment one or more data agents and one or more media agents reside on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations analysis reporting and management operations.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system in an original native and or one or more different formats. For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from one or more first storage devices to one or more second storage devices such as from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s from secondary storage devices to primary storage devices or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication or single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of a version of data e.g. one or more files or other data units in primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is generally stored in a form that is different than the native format e.g. a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at on offsite location.

Backup operations can include full synthetic or incremental backups. A full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Any of the above types of backup operations can be at the volume level file level or block level. Volume level backup operations generally involve the copying of a data volume e.g. a logical disk or partition as a whole. In a file level backup the information management system may generally track changes to individual files at the file level and includes copies of files in the backup copy. In the case of a block level backup files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a file level copy than a volume level copy. Likewise a block level copy may involve the transfer of less data than a file level copy resulting in faster execution times. However restoring a relatively higher granularity copy can result in longer restore times. For instance when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the volume level file level or block level.

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size from the source copy may be removed from source storage. Archive copies are sometimes stored in an archive format or other non native application format. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format.

In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the archived primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies. Examples of compatible data archiving operations are provided in U.S. Pat. No. 7 107 298 entitled SYSTEM AND METHOD FOR ARCHIVING OBJECTS IN AN INFORMATION STORE which is incorporated by reference herein.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time. In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A hardware snapshot operation can be a snapshot operation where a target storage device e.g. a primary storage device or a secondary storage device performs the snapshot operation in a self contained fashion substantially independently using hardware firmware and or software residing on the storage device itself. For instance the storage device may be capable of performing snapshot operations upon request generally without intervention or oversight from any of the other components in the information management system . In this manner using hardware snapshots can off load processing involved in creating and management from other components in the system .

A software snapshot operation on the other hand can be a snapshot operation in which one or more other components in the system e.g. the client computing devices media agents etc. implement a software layer that manages the snapshot operation via interaction with the target storage device. For instance the component implementing the snapshot management software layer may derive a set of pointers and or data that represents the snapshot. The snapshot management software layer may then transmit the same to the target storage device along with appropriate instructions for writing the snapshot.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or an application. In some other cases the snapshot may created at the block level such as where creation of the snapshot occurs without awareness of the file system. Each pointer points to a respective stored data block so collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

In some embodiments once a snapshot has been taken subsequent changes to the file system typically do not overwrite the blocks in use at the time of the snapshot. Therefore the initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are actually modified later. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage. The snapshot mapping of file system data is also updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored or substantially immediately copied to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data was the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits.

Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication or single instance storage which is useful to reduce the amount of data within the system. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into portions e.g. sub file level blocks files etc. of a selected granularity compared with blocks that are already stored and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to streamline the comparison process the information management system may calculate and or store signatures e.g. hashes corresponding to the individual data blocks in a database and compare the hashes instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy.

Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. Pub. No. 2012 0084269 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Instead of or in combination with target side deduplication deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data e.g. according to one or more criteria related to the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source copy is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device or other source storage device such as a secondary storage device to replace the deleted data in primary data or other source copy and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and often make recovery of the data appear transparent even though the HSM data may be stored at a location different from the remaining source data. In this manner the data appears to the user e.g. in file system browsing windows and the like as if it still resides in the source location e.g. in a primary storage device . The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies . Examples of HSM and ILM techniques are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial or primary secondary copy may be generated using or otherwise be derived from primary data or other data residing in the secondary storage subsystem whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

Data analysis reporting and management operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data analysis operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data analysis operations are performed in conjunction with data movement operations. Some data analysis operations include content indexing operations and classification operations which can be useful in leveraging the data under management to provide enhanced search and other features. Other data analysis operations such as compression and encryption can provide data reduction and security benefits respectively.

In some embodiments the information management system analyzes and indexes characteristics content and metadata associated with the data stored within the primary data and or secondary copies providing enhanced search capabilities for data discovery and other purposes. The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

In order to leverage the data stored in the information management system to perform these and other tasks one or more components can be configured to scan data and or associated metadata for classification purposes to populate a database of information which can be referred to as a metabase . Such scanned classified data and or metadata may be included in a separate database and or on a separate storage device from primary data and or secondary copies such that operations related to the database do not significantly impact performance on other components in the information management system .

In other cases the database s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with user specified identifiers e.g. tag entries in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system .

The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies or archive copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management and reporting functions. Examples of some compatible management and reporting techniques are provided in U.S. Pat. No. 7 343 453 entitled HIERARCHICAL SYSTEMS AND METHODS FOR PROVIDING A UNIFIED VIEW OF STORAGE INFORMATION which is incorporated by reference herein.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like.

As an example a storage manager or other component in the information management system may analyze traffic patterns and suggest or automatically route data via a particular route to e.g. certain facilitate storage and minimize congestion. In some embodiments the system can generate predictions relating to storage operations or storage operation information. Such predictions described may be based on a trending analysis that may be used to predict various network operations or use of network resources such as network traffic levels storage media use use of bandwidth of communication links use of media agent components etc. Further examples of traffic analysis trend analysis prediction generation and the like are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some configurations a master storage manager may track the status of a set of associated storage operation cells in a hierarchy of information management cells such as the status of jobs system components system resources and other items by communicating with storage managers or other components in the respective storage operation cells. Moreover the master storage manager may track the status of its associated storage operation cells and associated information management operations by receiving periodic status updates from the storage managers or other components in the respective cells regarding jobs system components system resources and other items. In some embodiments a master storage manager may store status information and other information regarding its associated storage operation cells and other system information in its index or other location .

The master storage manager or other component in the system may also determine whether a storage related criteria or other criteria is satisfied and perform an action or trigger event e.g. data migration in response to the criteria being satisfied such as where a storage threshold is met for a particular volume or where inadequate protection exists for certain data. For instance in some embodiments the system uses data from one or more storage operation cells to advise users of risks or indicates actions that can be used to mitigate or otherwise minimize these risks and in some embodiments dynamically takes action to mitigate or minimize these risks. For example an information management policy may specify certain requirements e.g. that a storage device should maintain a certain amount of free space that secondary copies should occur at a particular interval that data should be aged and migrated to other storage after a particular period that data on a secondary volume should always have a certain level of availability and be able to be restored within a given time period that data on a secondary volume may be mirrored or otherwise migrated to a specified number of other volumes etc. . If a risk condition or other criteria is triggered the system can notify the user of these conditions and may suggest or automatically implement an action to mitigate or otherwise address the condition or minimize risk. For example the system may indicate that data from a primary copy should be migrated to a secondary storage device to free space on the primary storage device . Examples of the use of risk factors and other triggering criteria are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments the system may also determine whether a metric or other indication satisfies a particular storage criteria and if so perform an action. For example as previously described a storage policy or other definition might indicate that a storage manager should initiate a particular action if a storage metric or other indication drops below or otherwise fails to satisfy a specified criteria such as a threshold of data protection. Examples of such metrics are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

In some embodiments risk factors may be quantified into certain measurable service or risk levels for ease of comprehension. For example certain applications and associated data may be considered to be more important by an enterprise than other data and services. Financial compliance data for example may be of greater importance than marketing materials etc. Network administrators may assign priorities or weights to certain data or applications corresponding to its importance priority value . The level of compliance with the storage operations specified for these applications may also be assigned a certain value. Thus the health impact and overall importance of a service on an enterprise may be determined for example by measuring the compliance value and calculating the product of the priority value and the compliance value to determine the service level and comparing it to certain operational thresholds to determine if the operation is being performed within a specified data protection service level. Further examples of the service level determination are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The system may additionally calculate data costing and data availability associated with information management operation cells according to an embodiment of the invention. For instance data received from the cell may be used in conjunction with hardware related information and other information about network elements to generate indications of costs associated with storage of particular data in the system or the availability of particular data in the system. In general components in the system are identified and associated information is obtained dynamically or manually . Characteristics or metrics associated with the network elements may be identified and associated with that component element for further use generating an indication of storage cost or data availability. Exemplary information generated could include how fast a particular department is using up available storage space how long data would take to recover over a particular network pathway from a particular secondary storage device costs over time etc. Moreover in some embodiments such information may be used to determine or predict the overall cost associated with the storage of certain information. The cost associated with hosting a certain application may be based at least in part on the type of media on which the data resides. Storage devices may be assigned to a particular cost category which is indicative of the cost of storing information on that device. Further examples of costing techniques are described in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

Any of the above types of information e.g. information related to trending predictions job cell or component status risk service level costing etc. can generally be provided to users via the user interface in a single integrated view or console. The console may support a reporting capability that allows for the generation of a variety of reports which may be tailored to a particular aspect of information management. Report types may include scheduling event management media management and data aging. Available reports may also include backup history data aging history auxiliary copy history job history library and drive media in library restore history and storage policy. Such reports may be specified and created at a certain point in time as a network analysis forecasting or provisioning tool. Integrated reports may also be generated that illustrate storage and performance metrics risks and storage costing information. Moreover users may create their own reports based on specific needs.

The integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. As one example the user interface may provide a graphical depiction of one or more primary storage devices the secondary storage devices data agents and or media agents and their relationship to one another in the information management system . The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. network pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like.

Further examples of some reporting techniques and associated interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a data structure or other information source that defines or includes information sufficient to determine a set of preferences or other criteria for performing information management operations. Storage policies can include one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination.

As an illustrative example data associated with a storage policy can be logically organized into groups. In some cases these logical groupings can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location.

Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data. While information in the storage policy can be statically assigned in some cases some or all of the information in the storage policy can also be dynamically determined based on criteria which can be set forth in the storage policy. For instance based on such criteria a particular destination storage device s or other parameter of the storage policy may be determined based on characteristics associated with the data involved in a particular storage operation device availability e.g. availability of a secondary storage device or a media agent network status and conditions e.g. identified bottlenecks user credentials and the like 

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data e.g. one or more sub clients associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

The information management policies may also include one or more scheduling policies specifying when and how often to perform operations. Scheduling information may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular logical groupings of data associated with a storage policy e.g. a sub client client computing device and the like. In one configuration a separate scheduling policy is maintained for particular logical groupings of data on a client computing device . The scheduling policy specifies that those logical groupings are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protecting operations quickly.

Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when one or more data agent s are installed on one or more client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible. For instance the information management policies can also include one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. .

An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

In some implementations the information management policies may include one or more provisioning policies. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how clients or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail client application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A may or may not be stored contiguously.

The exemplary storage policy A includes backup copy preferences or rule set disaster recovery copy preferences rule set and compliance copy preferences or rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent B than the media agent A associated with the backup copy rule set will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other data loss event that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step 1 the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device to begin the backup operation.

At step 2 the file system data agent A and the email data agent B residing on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation from the primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step 3 the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step 4 conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A. The storage manager may similarly update its index to include information relating to the storage operation such as information relating to the type of storage operation a physical location associated with one or more copies created by the storage operation the time the storage operation was performed status information relating to the storage operation the components involved in the storage operation and the like. In some cases the storage manager may update its index to include some or all of the information stored in the index of the media agent A.

At step 5 the storage manager initiates the creation of a disaster recovery copy according to the disaster recovery copy rule set . For instance at step 6 based on instructions received from the storage manager at step 5 the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step 7 again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy on the tape library . In some cases the disaster recovery copy is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy C may be generated in some other manner such as by using the primary data A from the storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies A are deleted after 60 days.

At step 8 the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step 9 as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified in the illustrated example compliance copies C are created quarterly and are deleted after ten years.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the media agent index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files.

The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the storage manager index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly. During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files.

Data can also be communicated within the information management system in data channels that connect the client computing devices to the secondary storage devices . These data channels can be referred to as data streams and multiple data streams can be employed to parallelize an information management operation improving data transfer rate among providing other advantages. Example data formatting techniques including techniques involving data streaming chunking and the use of other data structures in creating copies e.g. secondary copies are described in U.S. Pat. Nos. 7 315 923 and 8 156 086 and U.S. Pat. Pub. No. 2010 0299490 each of which is incorporated by reference herein.

Referring to the data stream has the stream header and stream payload aligned into multiple data blocks. In this example the data blocks are of size 64 Kb. The first two stream header and stream payload pairs comprise a first data block of size 64 Kb. The first stream header indicates that the length of the succeeding stream payload is 63 Kb and that it is the start of a data block. The next stream header indicates that the succeeding stream payload has a length of 1 Kb and that it is not the start of a new data block. Immediately following stream payload are an identifier header and identifier data pair. The identifier header includes an indication that the succeeding identifier data includes the identifier for the immediately previous data block. The identifier data includes the identifier that the data agent generated for the data block. The data stream also includes other stream header and stream payload pairs which may be for SI data and or for non SI data.

As an example the data structures illustrated in may have been created as a result of two storage operations involving two clients . For example a first storage operation on a first client could result in the creation of the first chunk folder and a second storage operation on a second client could result in the creation of the second chunk folder . The container files in the first chunk folder would contain the blocks of SI data of the first client . If the two clients have substantially similar data the second storage operation on the data of the second client would result in the media agent storing primarily links to the data blocks of the first client that are already stored in the container files . Accordingly while a first storage operation may result in storing nearly all of the data subject to the storage operation subsequent storage operations involving similar data may result in substantial data storage space savings because links to already stored data blocks can be stored instead of additional instances of data blocks.

If the operating system of the secondary storage computing device on which the media agent resides supports sparse files then when the media agent creates container files it can create them as sparse files. As previously described a sparse file is type of file that may include empty space e.g. a sparse file may have real data within it such as at the beginning of the file and or at the end of the file but may also have empty space in it that is not storing actual data such as a contiguous range of bytes all having a value of zero . Having the container files be sparse files allows the media agent to free up space in the container files when blocks of data in the container files no longer need to be stored on the storage devices. In some examples the media agent creates a new container file when a container file either includes 100 blocks of data or when the size of the container file exceeds 50 Mb. In other examples the media agent creates a new container file when a container file satisfies other criteria e.g. it contains from approximately 100 to approximately 1000 blocks or when its size exceeds approximately 50 Mb to 1 Gb .

In some cases a file on which a storage operation is performed may comprise a large number of data blocks. For example a 100 Mb file may be comprised in 400 data blocks of size 256 Kb. If such a file is to be stored its data blocks may span more than one container file or even more than one chunk folder. As another example a database file of 20 Gb may comprise over 40 000 data blocks of size 512 Kb. If such a database file is to be stored its data blocks will likely span multiple container files multiple chunk folders and potentially multiple volume folders. As described in detail herein restoring such files may thus requiring accessing multiple container files chunk folders and or volume folders to obtain the requisite data blocks.

As shown in the system can further include one or more deduplication database media agents DDB media agents examples of which are described in greater detail in U.S. Pub. No. 2012 0150826 previously incorporated herein by reference. The DDB media agents can include deduplication databases A D that store deduplication information such as data block signatures and the location information of data blocks stored in the secondary storage devices as described above. The deduplication databases A D can also store other deduplication information such as a count value indicative of the number of instances that a particular block is used. Furthermore the DDB media agents can be implemented on the same computing devices as one or more of the media agents or on separate computing devices .

During a backup or other secondary copy operation using deduplication techniques the system can query the DDB media agents for signatures of the data blocks to be backed up. In some embodiments the client computing device can query the DDB media agents and in certain embodiments the secondary storage computing devices can query the DDB media agents . When a signature is found in the DDB media agents a link to the location of a copy of the data block stored in the secondary storage devices is stored as part of the backup. When a signature is not found in the DDB media agents a copy of the data block is stored in the secondary storage devices and the signature of the data block is stored in the DDB media agents.

A data block distribution policy can specify which DDB media agents store which signatures and which DDB media agents are therefore queried for particular data block signatures. For example the distribution policy can indicate that data block signatures are stored in DDB media agents based on a modulo operation of the signature of the data block as described previously. Furthermore should one of the DDB media agents e.g. DDB media agent become unavailable the distribution policy can specify another DDB media agent e.g. DDB media agent as a failover DDB media agent and use the failover DDB media agent for deduplication operations while the other DDB media agent DDB media agent is unavailable.

In the illustrated embodiment of four DDB media agents DDB media agent DDB media agent DDB media agent DDB media agent are implemented as failover DDB media agents in a round robin fashion such that each DDB media agent is configured as a failover DDB media agent for another DDB media agent e.g. DDB media agent is the failover DDB media agent for DDB media agent DDB media agent is the failover DDB media agent for DDB media agent DDB media agent is the failover DDB media agent for DDB media agent and DDB media agent is the failover DDB media agent for DDB media agent . In this way should any one of the DDB media agents become unavailable its assigned failover DDB media agent will handle any additional queries. Furthermore should all but one DDB media agent become unavailable the remaining DDB media agent can satisfy the signature queries for the other DDB media agents.

It will be understood that other techniques can be used to implement the failover policy. For example one of the DDB media agents can be identified as the failover DDB media agent for multiple DDB media agents. Alternatively one DDB media agent can remain in a stand by mode and can be activated when another one of the DDB media agents becomes unavailable.

In some embodiments when one of the DDB media agents becomes unavailable the signature function can be altered such that signatures that are assigned to be stored by the unavailable DDB media agent are evenly distributed amongst the other DDB media agents. As a non limiting example modulo four can be used to evenly distribute signatures between four DDB media agents. If the third DDB media agent becomes unavailable the system can identify the signatures that are assigned to be stored in the third DDB media agent. Once the signatures assigned to the third DDB media agent are identified the system can use modulo three to evenly distribute those signatures to the three available DDB media agents. Thus the system can maintain data integrity by continuing to use modulo four to evenly distribute the signatures amongst the four DDB media agents as if all four DDB media agents are available and using modulo three to evenly distribute the signatures assigned to the third DDB media agent to the remaining available DDB media agents.

The illustrated embodiment includes a client computing device with an associated primary storage device deduplication database media agents A B C referred to generically as DDB media agent deduplication databases A B C each associated with one of the DDB media agents referred to generically as DDB media agents A B referred to generically as media agent and secondary storage devices each of which is described in greater detail above. The other components of the system are not shown for purposes of simplicity.

Furthermore while a single client is shown for the purpose of illustration there may be more than one client in other embodiments. Similarly there can be any number of DDB media agents e.g. one or more and media agents e.g. one or more . Additionally in certain embodiments some of the components shown as separate components in can reside on a single computing device. In some embodiments for example the functionality of the DDB media agent A and the media agent A can be implemented on a first computing device the functionality of the DDB media agent B and the media agent B can be implemented on another computing device etc.

In the illustrated embodiment the data blocks or other units in secondary storage are stored separately from the deduplication management information. For example in some embodiments the media agents aid in the storage of the data blocks in the secondary storage devices . In contrast the DDB media agents store the deduplication management information such as data block signatures e.g. hashes and storage location information for the data blocks in the secondary storage devices . The location information for the data blocks stored in the secondary storage devices can also be referred to as a link.

Generally deduplication management information can include any appropriate information used to manage the deduplication process. As an example in addition to deduplication signatures the management information can further include metadata related to the deduplicated data blocks. For instance a count value may be maintained for each deduplicated data block that indicates the number of times the particular data block is being used. As one example if two files each include three instances of a particular data block and a third file includes one instance of the data block the count for that data block would be seven. The management information can further include addresses or other location information related to the data blocks. As yet another example the management information can include mappings of the individual deduplicated files including pointers to the data blocks making up the files and an indication as to the ordering of the data blocks within the files.

As described above the signature can be generated using a hash function or some other function and can be used by the system to determine whether the data block already exists in the storage system. The signature can also be used to determine the location of data blocks within the secondary storage devices and the like. As described location information is associated with each signature and is used by the system to locate and retrieve specific data blocks.

In one embodiment the link includes a media agent ID indicating which media agent was used to store the data block and a path ID address and offset indicating where the data block stored in the secondary storage devices The location information or link can generally include various types of media agent identifiers directory names filenames address locations pointers offsets and the like which can aid the system in locating individual data blocks. The media agent identifiers can include MAC addresses IP addresses router information directory information filenames and or other alphanumeric identifiers capable of uniquely identifying the different media agents . Thus the DDB media agents store signatures and links to data blocks stored within the secondary storage devices . The links can include without limitation a signature associated with the block and identifiers indicative of the location of the data block. The locational identifiers can include positional information such as the relevant host mount point file identifier offset and size of the block etc.

As will be described in greater detail below the media agents use the links during storage operations to reference data blocks already stored in secondary storage i.e. redundant data blocks . The media agents can also use the links during restore operations to locate and retrieve data blocks stored in the secondary storage devices .

In the illustrated embodiment the media agents store files received from the client as a plurality of individual data blocks in secondary storage. In some embodiments the data blocks associated with a specific file can be distributed across multiple media agents .

As mentioned previously the system can use various distribution policies to determine which media agents store which data blocks. In some embodiments the system selects a media agent to backup a particular file or block s in a file based on a predetermined distribution policy. For instance the system can perform a modulo or other appropriate operation on the signature of the file or block s in the file and select the appropriate media agent based on the output of the operation.

Similarly the storage system can use similar data block distribution policies to identify a media agent storing a particular file for purposes of a restore operation. In one embodiment the storage manager or another component can track which media agent handled the backup operation and send the restore request to that media agent .

With further reference to the interaction between the various components of the storage environment when one of the DDB media agents becomes unavailable will now be described in greater detail with respect to data flow steps indicated by the numbered arrows. In the illustrated embodiment there are three DDB media agents A B C and modulo is used to distribute the signatures between the three DDB media agents. It will be understood that functions other than a modulo may be used. For example the storage system can distribute queries to the respective DDB media agents based on factors other than the modulo of the signature e.g. based on file type client source modulo of the data block pseudo randomly etc.

Furthermore in the illustrated embodiment each DDB media agent acts as a failover DDB media agent for another DDB media agent. For example in the illustrated embodiment DDB media agent A is the failover DDB media agent for DDB media agent C DDB media agent B is the failover DDB media agent for DDB media agent A and DDB media agent C is the failover DDB media agent for DDB media agent B. In addition in the illustrated embodiment the system has determined that DDB media agent A is unavailable.

At step 1 the client initiates a storage operation of a file stored in the primary storage device . In the illustrated embodiment the media agent B is selected to handle the storage operation based on the distribution policy. As mentioned previously any one of the media agents can be selected to handle the storage operation according to the particular predetermined policy.

As part of the storage operation the file is broken up into data blocks and the media agent B performs a signature function on each data block. In the illustrated embodiment each data block is sent to the media agent B for storage based on the predefined distribution policy. In some embodiments a data agent residing on the client performs the signature function on the data block and the signature is initially sent to the media agent B. If it is determined that the data block is not stored in secondary storage the data block is sent as well.

Before storing a copy of each data block in secondary storage the media agent B determines whether the identified data block is already stored in the secondary storage devices by consulting one of the DDB media agents . As mentioned previously the DDB media agents store signatures of the data blocks stored in the secondary storage devices and the signatures are distributed amongst the DDB media agents based on a distribution policy. Having knowledge of this policy the media agents can advantageously identify the appropriate DDB media agent to query regarding the presence of the data block in secondary storage. In the present example the distribution policy dictates that a modulo of the signature of the data block is used to select the appropriate DDB media agent .

Accordingly at step 2 the media agent B performs the modulo operation on the signature of the data block and identifies the DDB media agent assigned to store the signature. Based on the output of the modulo operation the media agent B determines that the DDB media agent A is assigned to store the signature corresponding to the data block.

As mentioned in the illustrated embodiment the system has detected that the DDB media agent A is unavailable. Thus as part of step 2 the media agent B can identify the failover DDB media agent DDB media agent B for DDB media agent A and determine that the failover DDB media agent is to be queried for the signature. The media agent can identify the failover DDB media agent by referring to the distribution policy and or a failover policy as described in greater detail above. The media agent B can determine that the failover DDB media agent is to be queried for the signature dynamically or based on information that is stored at the time the system detects that the DDB media agent A is unavailable.

At step 3 the media agent B queries the failover DDB media agent DDB media agent B for the signature. At step 4 the DDB media agent B responds. If the DDB media agent B locates an entry in its DDB B corresponding to the signature the DDB media agent B accesses the entry. According to certain embodiments the entry can include a copy of the signature a link identifying the location of the corresponding data block in the secondary storage devices and a count value. The count value can correspond to a number of instances of the particular data block in the files or other data stored in the secondary storage devices . For instance while there may only be one stored copy of the data block in the secondary storage devices because of the deduplication multiple files stored in the secondary storage devices may point to the copy of the data block. The DDB media agent B forwards the link to media agent B. Upon receiving the link the media agent B can store the link or other metadata representative of the data block in the secondary storage devices instead of storing another copy of the data block.

In the event that the DDB media agent B does not find the signature the DDB media agent B responds to the media agent B indicating that the data block is not stored in secondary storage. In turn the media agent B stores the data block in the secondary storage devices . The media agent B can also send the signature of the data block as well as location information indicating where the data block is stored in the secondary storage devices to the DDB media agent B. Upon receiving the signature and the location information the DDB media agent B uses the location information to generate a link for the data block and stores the link and or signature in DDB A for future reference.

Alternatively once the DDB media agent B determines that the data block is not stored in secondary storage it stores the signature in the DDB A before responding to the media agent B. In response the media agent B stores the data block as discussed above and sends the location information of the data block to the DDB media agent B. In turn the DDB media agent B generates the link and stores the link in the DDB A along with the already stored signature. In addition to the examples provided it will be appreciated that a variety of other handshaking mechanisms are possible between the media agents and the DDB media agents .

The remaining data blocks of the file are backed up to the media agent B in a similar fashion wherein copies of the data blocks themselves are stored for new data blocks and links to redundant data blocks are stored in the secondary storage devices as appropriate.

A similar process can be used to prune data from secondary storage. For example when data is removed from the secondary storage devices to long term storage e.g. magnetic tape steps 1 3 can be used to query the appropriate DDB media agent to reduce the count value of a particular data block signature. For instance when a particular data block is removed the selected media agent e.g. media agent B uses the distribution scheme to query the appropriate DDB media agent e.g. failover DDB media agent B . If a stored count value associated with the data block indicates that no more instances of the data block exist in the secondary storage devices e.g. the count value of the signature is zero the queried DDB media agent can delete the signature from its DDB and the media agent can remove the data block from the secondary storage devices . If after deletion the count value is greater than or equal to one then one or more instances of the data block will remain in the secondary storage devices following deletion and the count value will decremented without deleting the instance of the signature from the database .

At block the system receives a storage operation request for a data block. The request can be received from the client a new client one client on behalf of another a storage manager the media agent the DDB media agent or the like. Alternatively the system can receive a signature of a data block or a file as described above.

At block the system identifies the DDB media agent assigned to store the signature corresponding to the data block. As mentioned previously the signature can be calculated by a variety of components of the system and can be used to uniquely identify the data block. Further the system can identify the assigned DDB media agent using any number of techniques. In some embodiments the system performs a modulo operation on the signature of the data block to identify the DDB media agent assigned to store the signature associated with the data block.

At block the system determines that the assigned DDB media agent is unavailable. The DDB media agent may become unavailable due to due to a network outage power outage hardware software malfunction scheduled maintenance etc. The system can determine the DDB media agent is not available by requesting status updates from the different DDB media agents reviewing status updates automatically sent by the DDB media agents etc.

At block the system identifies a failover DDB media agent. For example the system may identify the failover DDB media agent by consulting the distribution policy which stores an indication of the failover DDB media agent. The distribution policy can specify the failover DDB media agents for each DDB media agent in the system . In other embodiments the failover DDB media agent is stored in a data structure that is separate from the distribution policy. In some embodiments the system identifies the failover DDB media agent at the time the system detects that a DDB media agent is unavailable and stores an indication of the unavailable DDB media agent and the appropriate failover DDB media agent in conjunction with the distribution policy or in a separate location depending on the embodiment. In certain embodiments the system identifies the failover DDB media agent dynamically each time a data block is stored e.g. when the unavailable DDB media agent is identified as the DDB media agent assigned to store the signature corresponding to the data block.

The system can use a variety of techniques to determine which DDB media agent is the failover DDB media agent for each DDB media agent. In some embodiments each DDB media agent is a failover for another DDB media agent. In certain embodiments the DDB media agents are not failover DDB media agents for each other i.e. if DDB media agent is the failover DDB media agent for DDB media agent then DDB media agent is not the failover DDB media agent for DDB media agent . In some embodiments the DDB media agents are failover DDB media agents for at most one other DDB media agent. In certain embodiments one DDB media agent is the failover DDB media agent for multiple DDB media agents. The distribution policy can use any one or a combination of the aforementioned embodiments or other techniques to assign one or more failover DDB media agents for each DDB media agent.

At block the system queries the failover DDB media agent for the data block location. Following the query the system determines whether the data block is located in secondary storage using information found in the DDB media agent.

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in without departing from the spirit and scope of the description. In some embodiments any one or a combination of the blocks can be used as part of the routine . For example if the storage operation is a backup operation and the signature is not stored in the failover DDB media agent the system can store the signature in the failover DDB media agent as illustrated at block . In addition a copy of the data block can be stored in the secondary storage devices and the location of the copy can be sent to the failover DDB media agent for storage.

In some embodiments if the signature is stored in the failover DDB media agent the system can store a link to the copy of the data block stored in the secondary storage devices and increment a count value in the DDB media agent to indicate that a new instance of the data block has been backed up as illustrated at block .

In certain embodiments if the storage operation is a pruning operation the system can decrement the count value in the DDB media agent as illustrated at block . Further if the count value reaches zero the system can remove the signature from the DDB media agent and delete the copy of the data block from the secondary storage devices .

In addition prior to querying the DDB media agent the system can query the database of a media agent for the data block or the location of the data block. If the data block or its locations is not found in the database of the media agent the system can query the DDB media agent or failover DDB media agent. If the data block is found in the database of the media agent and the storage operation is a backup operation the system can store a link to the data block in the media agent and notify the DDB media agent or failover DDB media agent that a new instance of the data block is now found in the secondary storage devices . In addition the backup storage device can aggregate a number of queries to the DDB media agent and transmit all the queries together as a bundle.

In some embodiments when an unavailable DDB media agent becomes available the failover DDB media agent can copy the signatures that would have been stored on the unavailable DDB media agent if it had been available to the previously unavailable DDB media agent. For example entries in the DDB of the failover DDB media agent and corresponding failover data blocks can be identified e.g. using a modulo operation and copied to the DDB of the previously unavailable DDB media agent which has come back on line. As part of the copy operation the previously unavailable DDB media agent and the failover DDB media agent can synchronize the data to remove duplicate signatures and data blocks. As part of the synchronization process the system can remove duplicate data blocks in the secondary storage and update the links in the secondary storage devices that reference the duplicate data blocks. Following the synchronization process the system can avoid referring to the failover DDB media agent during future copy operations while the previously unavailable DDB media agent is available.

In addition to the embodiments described above with reference to the system can include a failover index . In the illustrated embodiment of a failover index is included in each of the media agents A C failover indexes A C respectively and can be implemented as part of the database and or index described previously or can be a separate index. However it will be understood that the failover index can be located in the client data agent storage manager in the DDB media agents etc.

The failover index can store the failover policy for the system. Thus the failover index can be used by the system to determine the failover DDB media agent s for each DDB media agent. Furthermore in some embodiments the failover index can store additional information that can be used when a DDB media agent becomes unavailable and after the DDB media agent comes back on line. For example as will be described in greater detail below the failover index can track which DDB media agents are unavailable the amount of time a DDB media agent is unavailable signatures that were stored in a failover DDB media agent as a result of the unavailability of another DDB media agent location information for data blocks in secondary storage that were stored when the assigned DDB media agent was unavailable etc.

In some embodiments the failover index can track which DDB media agents have been unavailable and their corresponding failover DDB media agents. Once an unavailable DDB media agent becomes available and the system queries it for a signature if the signature is not found the system can query the failover DDB media agent for the signature. For example assuming DDB media agent A has been unavailable the system can record that DDB media agent A was unavailable and also record the identity of the failover DDB media agent DDB media agent B that stored any signatures on behalf of the DDB media agent A. After the DDB media agent A comes back on line and following a failed query to the DDB media agent A e.g. the signature was not found the system can use the tracked information to query the failover DDB media agent for the signature.

Furthermore in certain embodiments the failover index can store signature information when a DDB media agent becomes unavailable and a failover DDB media agent is used. For example if DDB media agent A becomes unavailable and signatures assigned to be stored in DDB media agent A are stored in DDB media agent B the failover DDB media agent the failover index B can track the signatures that are stored in the failover DDB media agent DDB media agent B for later reference by the system. The failover index can include the signatures stored in failover DDB media agents when a DDB media agent is unavailable as well as location information of the signatures including where the signature is located in the failover DDB media agent.

In some embodiments the failover index can be used as the failover DDB media agent. For example when a DDB media agent becomes unavailable the signatures that would have been stored in the unavailable DDB media agent can be stored in the failover index . Thus when a media agent receives a signature for the unavailable DDB media agent it can refer to the failover index . If the signature is not found in the failover index a copy of the data block can be stored in the secondary storage devices and the location of the copied data block and a copy of the signature can be stored in the failover index . If the signature is found in the failover index the media agent can use the location information of the copied data block that is stored in the failover index as part of the backup operation. When the unavailable DDB media agent becomes available the failover index can copy and synchronize its contents with the previously unavailable DDB media agent.

At step 5 the client initiates a storage operation of a file stored in the primary storage device . As mentioned previously a signature for each data block in the file is determined. In addition prior to storing a copy of each data block the media agent B determines whether the received data block is already stored in the secondary storage devices by consulting one of the DDB media agents .

At step 6 the media agent B performs a DDB media agent identifier operation on the signature of the data block to identify the DDB media agent assigned to store the signature. Based on the output of the operation the media agent B determines that the DDB media agent A is assigned to store the signature corresponding to the data block.

However as discussed in greater detail above with reference to as DDB media agent A was previously unavailable some signatures that would have been stored in DDB media agent A were stored in the failover DDB media agent DDB media agent C . Accordingly as part of step 6 the media agent B determines whether the signature was stored in the failover DDB media agent. The system can determine that the signature was stored in the failover DDB media agent using a variety of techniques. For example the system can use the DDB media agent failover index B to track the signatures stored in a failover DDB media agent while the DDB media agent A was unavailable. As discussed previously the failover index B can include the signature of the data block as well as an identifier indicating in which failover DDB media agent the signature is located. If the signature is found in the failover index B the system can determine that the signature was stored in the failover DDB media agent.

At step 7 in the illustrated embodiment the media agent B determines that the signature was stored in the DDB media agent B the failover DDB media agent for DDB media agent A and queries the failover DDB media agent for the signature and the location of the data block. The failover DDB media agent can increment the count value of the signature.

Similarly if the storage operation is a pruning operation and the system determines that the signature is stored in the failover DDB media agent the system can decrement the count value in the failover DDB media agent. If the count value in the failover DDB media agent indicates there are no more instances of the data block in the secondary storage devices the system can delete the copy of the data block that is referenced by the signature in the failover DDB media agent. However it will be understood that there may still be a copy of the data block in the secondary storage devices that is identified by the assigned DDB media agent.

In some embodiments if the system determines that the signature was not stored in the failover DDB media agent the system can use the assigned DDB media agent to store the signature retrieve the location of the data block and or increment decrement the count value of the signature according to the distribution policy. Thus the system can use the failover DDB media agent for the signatures stored thereon while the other DDB media agent was unavailable and use the assigned DDB media agent for all other signatures.

At step 8 the failover DDB media agent provides the signature information to the media agent B. As mentioned previously the signature information can include location information regarding the location of the data block in the secondary storage devices .

At block the system receives a storage operation request for a data block. The request can be received from the client a new client one client on behalf of another a storage manager the media agent the DDB media agent or the like. Alternatively the system can receive a signature of a data block or a file as described above.

At block the system identifies the DDB media agent assigned to store the signature corresponding to the data block. As mentioned previously the signature can be calculated by a variety of components of the system and can be used to uniquely identify the data block. Further the system can identify the assigned DDB media agent using any number of techniques. In some embodiments the system performs a modulo operation on the signature of the data block to identify the DDB media agent assigned to store the signature associated with the data block.

At block the system determines that although the signature is assigned to be stored in the assigned DDB media agent the signature is stored in a failover DDB media agent. As discussed in greater detail above this can be due to the unavailability of the assigned DDB media agent for a period of time and the system assigning the failover DDB media agent to handle signature queries for the assigned DDB media agent.

At block the system queries the failover DDB media agent for the data block location. Based on the query the failover DDB media agent can increment or decrement the count value of the associated signature as discussed in greater detail above with reference to . If the count value is decremented to zero the system can remove the corresponding data block from the secondary storage devices and can remove the signature from the failover DDB media agent.

One skilled in the art will appreciate that routine can include fewer more or different blocks than those illustrated in without departing from the spirit and scope of the description. For example in some embodiments the system can query the failover DDB media agent only if the signature is not found in the assigned DDB media agent.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out all together e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operations to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

While certain embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the described methods and systems may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

