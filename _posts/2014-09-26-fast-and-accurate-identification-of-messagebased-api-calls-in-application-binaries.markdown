---

title: Fast and accurate identification of message-based API calls in application binaries
abstract: Disclosed are various embodiments for fast and accurate identification of message-based application programming interface (API) calls in Objective-C binaries. An application binary is analyzed to determine a first listing of classes and a first listing of methods. Metadata is extracted from the application to determine a second listing of classes and a second listing of methods. A listing of external classes and a listing of external methods are determined. Data identifying public API definitions is obtained. Public APIs invoked by the application are determined by comparing the external classes and methods with the public API definitions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09280665&OS=09280665&RS=09280665
owner: AIRWATCH LLC
number: 09280665
owner_city: Atlanta
owner_country: US
publication_date: 20140926
---
This application claims the benefit of U.S. Provisional Application No. 61 914 772 filed on Dec. 11 2013 and entitled FAST AND ACCURATE IDENTIFICATION OF MESSAGE BASED API CALLS IN OBJECTIVE C BINARIES the entirety of which is incorporated herein by reference. This application also incorporates by reference the entirety of U.S. Provisional Application No. 61 877 623 filed on Sep. 13 2013 and entitled SOFTWARE APPLICATION SCANNING AND REPUTATION ANALYSIS. 

This application is related to U.S. patent application Ser. No. 14 498 115 filed on Sep. 26 2014 and entitled RISK ASSESSMENT FOR MANAGED CLIENT DEVICES the entirety of which is incorporated herein by reference.

Static program analysis is the analysis of computer software that is performed without actually executing the software. Software application scanning through static program analysis is a proactive approach for enterprise information technology administrators to effectively manage the risks of software applications running on mobile devices of their employees. Because IT administrators usually do not have source code only binary code of a mobile application static analysis of binary code becomes the choice for software application scanning in mobile application management MAM solutions.

A multitude of iOS applications in application marketplaces are developed with Objective C an object oriented programming language. Objective C source code of an application is compiled by a compiler e.g. GCC or Clang and transformed to machine code. Directly analyzing machine code is difficult as the machine code is just a series of bits 0 s and 1 s. However translating the machine code back to original Objective C source code is also infeasible because symbol information like variable types and names are stripped off during the compilation process. A common way to translate the machine code is to use a tool to disassemble the machine code and convert it to assembly a low level intermediate representation between source code and machine code. A static analysis may then be performed over the assembly code.

The present application is generally directed to application scanning and more particularly to systems methods apparatuses and computer program products for providing application scanning Example embodiments of such application systems methods apparatuses and computer program products may be configured to scan applications create an application analysis based on the scan and enforce compliance rules relating to application quality. More specifically the application scanning may involve identifying message based application programming interface calls in Objective C binaries using a fast and accurate approach. As discussed below such application scanning may be performed for example by an apparatus embodied by or otherwise associated with a server and comprising means such as at least one processor at least one memory at least one communication interface and or the like for performing such scanning according to one or more algorithms.

The user device s may comprise any electronic device configured to communicate over one or more networks such as the network depicted in . For example the user device s may comprise one or more electronic devices such as a mobile telephone smartphone tablet computer portable digital assistant pager desktop or laptop computer a set top box a music player a game console or any of numerous other fixed or portable communication devices computation devices content generation devices content consumption devices or combinations thereof.

The resource server may for example comprise any type of network accessible electronic device or system that includes storage such as the depicted resource store . The resource server may according to one example embodiment comprise a public server that may be accessible to anyone who connects to it over a network such as the network . According to another example embodiment the resource server may be a private server accessible only over a private network such as the network and or may be located behind a firewall. According to another example embodiment the resource server may additionally or alternatively require user registration and or may require use of an authorized user device to access it. The resource server may store any type of data such as one or more databases some of which will be described in further detail below.

The compliance server may be any type of network accessible electronic device or system that includes storage such as the depicted compliance rule store and may be configured to communicate with the user device s and or the resource server over one or more networks such as the network depicted in to provide device content and or application management capabilities. For example the compliance server may comprise cloud based solutions server computers and or any other systems configured to provide device content and or application management capability. The compliance server may according to some example embodiments further be configured to direct the resource server to transmit data e.g. to one or more user devices and or to direct the one or more user device s to transmit data e.g. to the compliance server and or resource server . According to other example embodiments the compliance server may be configured to scan one or more applications as described below.

The compliance server may comprise a management application and a compliance rule store storing one or more compliance rules e.g. compliance policies that may be applicable to the user device s . While the management application is shown as within the compliance server the management application may additionally or alternately be within the user device s and or remotely located on the resource server and may be remotely updated such as periodically by the compliance server according to any number of suitable over the air OTA updating methods. The compliance server may additionally include an application scanning service an application analysis store an application wrapper store and or other applications.

Attempts by the user device s to perform certain functionality such as viewing modifying transmitting and or receiving various content may require the user device to be in compliance with one or more of the compliance rules. Depending on the sensitivity and or nature of a given functionality different compliance rules may be necessary to ensure that the functionality is adequately restricted. Some functionality may only require ensuring e.g. by one or more authentication procedures that the proper user is requesting the functionality. Other functionality may require compliance with more stringent authorization rules such as determining whether the functionality is restricted during certain time windows or geographic areas. Accordingly the user device s and or the compliance server may be operative to determine whether the user of the user device is authorized to perform requested functionality at the time the user requests to perform such functionality.

The compliance server may for example use the compliance rules to impose hardware restrictions regarding the use of specific devices and or specific device features such as for instance cameras BLUETOOTH infrared tethering external storage a mobile access point and or other hardware restrictions. The compliance rules may additionally or alternatively impose software restrictions such as the use of specific wireless device operating systems or applications Internet browser restrictions screen capture functionality and or other software restrictions. Mobile device management restrictions may additionally or alternatively be included in the compliance rules and may comprise encryption requirements firmware versions remote lock and wipe functionalities logging and reporting features global positioning system GPS tracking and or other mobile device management features.

The compliance server may determine whether one or more device characteristics of a requesting device e.g. the user device s satisfy one or more of the restrictions enumerated in the compliance rules. For example the compliance server may determine that a requesting device that has a camera BLUETOOTH capability and is executing a specified version of an operating system is compliant with the compliance rules. As another example the compliance server may determine that a requesting device that is associated with an external storage unit and has screen capture functionality enabled is not compliant with the compliance rules.

In some embodiments an agent application executed on the user device s may make the compliance determination based on a device profile credentials and or user preferences. For instance the agent application may monitor calls by applications such as a browser an email client a secure application and or any other application on the user device to an operating system of the user device to determine whether the user device seeks to perform functionality associated with one and or more of the compliance rules described above. Additionally the agent application executed on the user device s may approve and or deny the associated functionality requests. For instance the agent application may instruct the operating system on the user device s to prevent the device from performing certain functionality in response to a determination that a compliance rule specifies that such functionality is not authorized.

In some embodiments the agent application executed on the user device s may rely on the compliance server to determine whether a given functionality of the device is authorized according to the compliance rules. For instance the agent application may transmit information such as a device profile access credentials authentication information information regarding one or more authentication attempts and or information regarding one or more individuals to the compliance server so that compliance server may determine whether the user device seeks to perform functionality that may violate a given compliance rule. Additionally the compliance server may approve and or deny the associated functionality requests.

In some embodiments the compliance rules may comprise device settings and or executable instructions that define which functionality the operating system of the user device s is authorized to perform. Furthermore the compliance rules may comprise a list of functions such as those provided by application programming interfaces APIs associated with the operating system and or a platform library that may be treated as protected functions. Viewing modifying receiving and or transmitting content may for example comprise or otherwise be associated with one or more of these functions. Calls to these functions such as calls to retrieve login credentials or attempts to interact with e.g. view modify transmit or receive content may result in checks by the user device e.g. by the agent application and or the compliance server e.g. by the management application for compliance with the compliance rules. According to some example embodiments compliance rules may comprise application characteristics such as application reputation and or quality such as may be determined by scanning an application as described herein. Such application scanning may for example be performed by the application scanning service . The application scanning service may for example be embodied as program code embodied in one or more memories and executed by one or more processors and which may be embodied by or otherwise associated with the compliance server . Resultant analysis from the application scanning may be stored for later reference e.g. when enforcing compliance rules in the application analysis store .

In some embodiments the agent application may perform a set of ordered operations to accomplish a requested function. These operation sets may be defined on e.g. stored in a memory of the user device s and or the compliance server and may comprise one or more operations to determine whether the user device is in compliance with compliance rules from the compliance rule store . The agent application may control at least one respective computing resource of the user device s . The operations may include configuring at least one respective computing resource of the user device s such as restricting access to at least one resource managed by the agent application .

For purposes of convenience the resource server and compliance server are each referred to herein in the singular although it will be understood that a plurality of one or both servers may be employed in the arrangements as described herein. For example in some embodiments multiple compliance servers and or resource servers may operate on the same server computing device. The components executed on the compliance server and or the resource server may for example comprise various applications services processes systems engines or functionality not disclosed in detail herein.

As shown in the user device s the compliance server and or resource server may communicate with one another directly and or through the network . The user device s the compliance server and or the resource server may connect to the network through wired or wireless means such as through one or more intermediate networks. For example the user device s compliance server and or resource server may connect with the network through wired means such as Ethernet USB Universal Serial Bus or the like or through wireless means such as for example WI FI BLUETOOTH or the like or by connecting with a wireless cellular network such as a Long Term Evolution LTE network an LTE Advanced LTE A network a Global Systems for Mobile communications GSM network a Code Division Multiple Access CDMA network e.g. a Wideband CDMA WCDMA network a CDMA2000 network or the like a General Packet Radio Service GPRS network or other type of network.

Accordingly the network may comprise for example one or more wired and or wireless networks such as one or more wireless local area networks WLAN wireless wide area networks WWAN Ethernet networks fiber optic networks and or any other type of wired and or wireless network. Additionally the network may comprise the Internet and or one or more intranets extranets microwave networks satellite communications networks cellular networks infrared communication networks global area networks or other suitable networks etc. or any combination of such networks.

As discussed above the application scanning service may scan one or more applications as described herein and may for example be embodied as program code embodied in one or more memories and executed by one or more processors which may be embodied by or otherwise associated with the application scanning server . Resultant analysis from the application scanning may be stored for later reference e.g. when enforcing compliance rules in the application analysis store . It will be understood that one or more components of may exist in a single system. For example some embodiments may employ one or more of a compliance server an application scanning server and or an application server in conjunction.

Turning now to a diagram of an example user device is depicted. While illustrates one example configuration of such a user device numerous other configurations may be used according to other embodiments. With reference to however the user device may comprise a processor e.g. at least one processor co processor and or processing circuitry and at least one memory . Depending on the configuration and type of device the memory may comprise but is not limited to volatile e.g. random access memory RAM non volatile e.g. read only memory ROM flash memory or any combination thereof. The memory may store executable programs e.g. program code instructions and related data components of various applications and modules for execution by the processor . The at least one memory may be communicatively connected to the at least one processor e.g. by one or more system buses for transferring data.

Basic functionality of the user device may be provided by an operating system contained in the at least one memory and executed by the at least one processor . One or more programmed software applications may be executed by utilizing the computing resources in user device . For example applications stored in the memory may be executed by the processor under the auspices of operating system . For example processor may be configured to execute applications such as web browsing applications email applications instant messaging applications social networking applications applications configured to view and or manipulate content and or other applications capable of receiving and or providing data.

Data provided as input to and or generated as output from the application s may be stored in the memory and read by the processor from the memory as needed during the course of application program execution. Input data may be data stored in the memory by a secondary application or other source either internal or external to user device or provided during installation of the application.

The user device may include one or more communication ports such as the communication ports A C depicted in . It will be understood that although three communication ports are depicted in the example user device depicted in any number of such ports may be present according to other example configurations of a user device . Such communication ports A C may allow the user device to communicate with other devices such as other user devices the compliance server and or the resource server and may comprise components such as a wireless network connectivity interface an Ethernet network adapter and or a modem. For example the wireless network connectivity interface may comprise one and or more of a wireless radio transceiver PCI Peripheral Component Interconnect card USB Universal Serial Bus interface PCMCIA Personal Computer Memory Card International Association card SDIO Secure Digital Input Output card NewCard Cardbus a modem and or the like. According to some embodiments the communication ports A C may additionally or alternatively include one or more antennas supporting hardware and or software and or supporting circuitry configured to receive and or transmit signals according to any short range communication protocols and or standards such as for example near field communication NFC BLUETOOTH and or BLUETOOTH Low Energy BLE . According to some embodiments the communication ports A C may additionally or alternatively include one or more interfaces configured to provide location services such as one or more antennas supporting hardware and or software and or supporting circuitry configured to receive signals transmitted from GPS satellites.

The user device may also receive data as user input through an input interface such as one or more of a keyboard a mouse a pen a stylus a sound input device a touch input device a biometric device a capture device a brain computer interface BCI etc. The input interface may additionally or alternatively comprise one or more sensing devices such as one or more cameras microphones motion detectors proximity sensors biometric sensors and or the like which may be configured to capture visual aural physical and or other types of stimuli and or information such as spoken words motions gestures biometric signatures and or the like.

Data generated by applications may be caused to be stored in the memory by the processor during the course of application program execution. Data may be provided to the user of the user device during application program execution by means of an output interface . The output interface may comprise one or more devices configured to provide information and or stimuli to a user such as one or more display devices speakers force vibration and or haptic feedback generating devices implanted and or physiologically integrated output devices heads up display devices and or the like. It will be understood that although the input and output interfaces are depicted as distinct components in they may according to example embodiments be embodied by one or more components comprising both input and output functionality. For example the input and output interface may comprise a touchscreen device e.g. a display device configured to both display information and receive user input such as through a touch detection interface.

The at least one memory may also comprise a platform library . The platform library may comprise one or more collections of functionality e.g. utilities useful to multiple applications such as may be provided by an application programming interface API to a software development kit SDK . These utilities may be accessed by applications as necessary so that each application does not have to contain these utilities thus allowing for memory consumption savings and a consistent user experience. The platform library may also provide functionality associated with application wrapping defined herein as adding additional functionality referred herein as wrapper provided functionality to applications without affecting or in some cases only minimally affecting the application s preexisting or stock functionality. For example an existing game application may be wrapped to provide support for compliance rules such as those that prohibit the application from executing during work hours the game s functionality would be unaffected during non work hours. Similarly an existing application may be wrapped to require user authentication before the application may be accessed. Some example embodiments may provide security breach remediation functionality to applications by wrapping.

Furthermore embodiments of this disclosure may be practiced in conjunction with a graphics library other operating systems or any other application program and is not limited to any particular application or system. The devices described with respect to the Figures may have additional features or functionality. For example user device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape not shown .

The user device may store in the memory e.g. in a data store a device profile user data resources and compliance rules . The device profile may for example comprise information such as an indication of a current position of user device and or indications of various hardware software and or security attributes pertaining to the user device . For instance the device profile may represent hardware specifications of the user device version and or configuration information of various software program and or hardware components installed on user device data transmission protocols enabled on user device version and usage information of the various resources stored on user device and or any other attributes associated with the state of user device . The device profile may additionally or alternatively comprise operational status information such as information regarding any errors or faults detected in the user device information regarding device temperature information regarding resource levels such as battery levels free storage space and or signal strengths and or the like. The device profile may additionally or alternatively comprise data indicating a date of last virus scan of the user device a date of last access of the user device by an IT representative a date of last service of the user device by an IT representative and or any other data indicating maintenance and or usage of the user device . The device profile may additionally or alternatively comprise indications of past behavior of associated users such as resources accessed charges for resource accesses and or inventory accessed from such resources.

The user data may comprise information regarding one or more users of the user device . For example the user data may comprise one or more user preferences e.g. one or more parameters that may affect the experience of the user. Additionally or alternatively the user data may include indications of a device user s age gender bodily traits preferred resource types preferred venue resources and or any other type of information relating to a user or combinations of such information. Additionally or alternatively the user data may include indications of one or more access levels roles policy groups or the like of a device user e.g. for use in providing varying levels of functionality and or access e.g. to protected content for different users of a given user device .

The user device may also store at least one resource in the data store . The resources may for example include any data or content such as databases applications audio video content electronic records applications and or application files and or the like. More specifically resources may include at least one of the following file types data files audio files video files three dimensional image files raster image files vector image files page layout files text files word processor files spreadsheet files presentation files graphic files audio files photographic files video files database files executable files CAD files web files plug in files font files system files settings files encoded files compressed files disk image files developer files backup files and or any other files.

Wrapped application may comprise a binary executable file whose functionality has been modified by the addition of an application wrapper . The application wrapper may for example comprise a program or application that encapsulates the application serving as an intermediary between the application and the operating system and or the platform library . In this way the application wrapper may modify e.g. add to restrict enhance etc. any of the stock functionality provided by the application . For example if the application is configured to be accessible without requesting user authentication the wrapper may add to the functionality of the application by requiring authentication before a user can access the application . Similarly if application is configured to communicate over an unsecured e.g. unencrypted connection with a given public server the wrapper may modify this functionality by forcing the communication to take place over a secured connection or even by preventing the communication altogether. The modifications provided by the wrapper may for example comprise precompiled functions that may call out to an API such as the API .

Thus application wrapping may allow additional wrapper provided functionality to be added to an existing application such as the application . In some embodiments application wrapping may be accomplished dynamically upon installation and or execution of an application without requiring recompilation of the source code of the application . Application wrapping may thus comprise a preferred and or more convenient means of modifying an application and may according to some embodiments even be used in instances in which source code for the application is unavailable.

In some embodiments compliance rules such as those provided by the compliance server may control which functions of the API are enabled and or used in the application and wrapped application . For example users in a sales group may be permitted by the compliance server to download an enterprise s expense submitting application without modification while users in an accounting group may receive a modified version of the same application . The modified version may rely on functionality provided by the platform library to enhance the security of the application such as by adding a call to an encryption function for communications from the application that are intended for transmission over the network .

Various functions may be provided by the platform library including authentication authorization and determination functions. The device management functions may comprise for example functions operative to determine whether user device has been compromised e.g. rooted jailbroken or the like and or to identify a location of the user device by invoking and or accessing one or more location services of the user device such as a GPS service and or a signal e.g. cellular or WI FI triangulation based service. The application management functions may comprise for example functions operative to encrypt data and or communications used by the application and the wrapped application to distribute configuration information to provide authorization and or credentials and or to provide logging and reporting functionality. The content management functions may comprise for example functions to update shared content data used by application and wrapped application and or to provide branding functionality to alter the appearance of application and wrapped application .

Other management functionality may comprise enforcing compliance rules and or restrictions distributed by compliance server which may be accomplished at the device application and or content level. Such compliance rules may comprise time date and or location based restrictions on accessing the user device the application the wrapped application local assets and or remote assets.

Moving on to shown is an example data flow diagram for an application scanning procedure according to various embodiments of the present disclosure. An iOS application typically interacts with external entities such as the operating system and the network through invoking the application programming interfaces in iOS platform libraries which may also be termed frameworks. One task used in static program analysis by an application scanning service is to extract the system library API calls in a target application .

Objective C implements the API calls based on a message passing approach. When calling an API a message is sent to a receiver object that then uses the dynamic dispatch routine objc msgSend to handle the message at runtime. The routine objc msgSend is a message passing function and may be considered as a proxy function. The message normally is composed of three parts the pointer to the called object the target method name called a selector in Objective C and an argument list. To resolve the message the objc msgSend method is configured to locate the target method address of the called object and to invoke the method with the argument list in the message. Note this message resolving process occurs while application is actually running and before that the API call in the Objective C binary is present in the form of an objc msgSend invocation with the message as an argument. For example calling method sel in object obj with argument arg looks as below in Objective C source code 

In this non limiting example obj sel and arg are passed to objc msgSend method as arguments. According to ARM s calling convention registers R R of the processor are used to hold the first three arguments passed to a function call. Consequently identifying message based system library API calls in Objective C binary involves extracting and recognizing the arguments of objc msgSend calls which is not a trivial task.

One approach may be to traverse the text section of the Objective C binary and identify all of the call sites of objc msgSend function. Then for each call site backward slicing may be performed over the register R class name and R selector name respectively. This is used to locate all instructions that influence or define the values in the target register. The searching is stopped when either the start of the function is reached or the values of target operands can be statically determined e.g. either a constant or a static address.

If a static address is encountered the corresponding symbol is resolved by looking up the  objc classrefs or  objc selrefs sections in the Objective C binary. Dissemblers e.g. IDA Pro may create cross references for these static addresses if possible. Accordingly with these cross references the corresponding symbols class name or function name are directly available and no discovery operation is needed. The constants and symbols of those operands are forward propagated along the slice according to the semantics of the instructions. The propagation stops when the call site of objc msgSend function is reached. If the target register either R or R is hit then its value is determined otherwise its value is unknown. When all the objc msgSend functions are resolved the public APIs being invoked in the binary may then be reported.

See e.g. M. Egele C. Kruegel E. Kirda and G. Vigna PiOS Detecting Privacy Leaks in iOS Applications in Proceedings of the Network and Distributed System Security Symposium NDSS San Diego Calif. February 2011 J. Han Q Yan D. Gao J. Zhou and R. Deng Comparing Mobile Privacy Protection through Cross Platform Applications in Proceedings of the Network and Distributed System Security Symposium NDSS San Diego Calif. February 2013 and T. Werthmann R. Hund L. Davi A. Sadeghi and T. Holz PSiOS Bring Your Own Privacy Security to iOS Devices in 8th ACM Symposium on Information Computer and Communications Security ASIACCS 2013 May 2013 all of which are herein incorporated by reference.

Such an approach is inefficient because it does not differentiate the calls of local functions from those in platform libraries during the message resolving phase while resolving only the public API calls may be of importance for application scanning. As a result all the computing efforts spent on resolving the local function calls are wasted. Further given the static analysis nature it may be likely to miss capturing a target register in many cases for example used object object passed to function as an argument object defined in an array and so on which is especially true for R class name . Consequently false negatives may result.

Approaches to application scanning that involve identifying public API calls in particular will next be discussed with reference to the entities depicted in . Various public API definitions may be obtained as an initial matter. These public API definitions may include class names method names argument lists and or other data. For APPLE based platforms these public API definitions may be extracted from the header files of the public platform libraries that are available in Xcode. This may be a one time operation and the output list can be applied to analysis of any Objective C binary. In some cases the public API definitions may be updated and refreshed.

Next the metadata may be extracted from a target binary of an application . The metadata may include a list of classes and a list of methods which are local to the application in other words implemented in the application among other data. The list of classes may specify the names of the classes. The list of methods may specify the method names and starting addresses for the methods of each class. The  objc selrefs section and the  objc classrefs section of the application may be provided by a disassembler or another tool that performs a similar analysis.

The  objc classrefs section may be traversed to obtain all of the classes both local and external used in the application . This list may then be compared with the list of classes to obtain all of the external classes in the application . Next the  objc selrefs section may be traversed to obtain all of the methods both local and external used in the application . This list may then be compared with the list of methods to obtain all of the external methods in the application . The external classes and the external methods are then compared with the public API definitions to produce a list of invoked public APIs .

Based upon this list of invoked public APIs further analysis may be performed on the binary for the application . In particular instructions are located that refer to the method names of the invoked public APIs in the  objc selrefs section . For each such instruction forward constant propagation may be performed along the control flow graph of the function starting from the operand that has the static address and cross reference to the method name. If a call site of the objc msgSend function is hit and the current operand is R the corresponding public API may be reported with this instruction address namely where this public API is called. The constant propagation stops either at the last instruction of the current function or the current operand that contains the constant is overwritten by another variable.

Optionally if an argument of a public API that is found needs to be checked backward slicing and forward constant propagation may be performed over the corresponding register starting from the call site of the public API.

It is noted that the approach outlined above does not involve resolving all objc msgSend calls but instead focuses on the method name instead of the class name for each target public API. Accordingly this approach is faster and more accurate than other approaches. Indeed experimental results confirm that this approach is about three to ten times faster than other approaches and can also find more public API calls for real world iOS applications .

Various non limiting examples of public API calls that may be searched for by the application scanning service will next be described. In the calendar category the application scanning service may search for method calls relating to event searches event saving event removing reminder searches calendaring items saving reminders removing reminders committing and so on. In the location category the application scanning service may search for method calls relating to updating location monitoring significant location changes determining whether locations have been updated monitoring for a region entering a region exiting a region and so on. In the contacts category the application scanning service may search for method calls relating to a people picker navigation controller and its delegate and others.

In the network category the application scanning service may search for method calls relating to web view load requests network resource connections and others. In the phone category the application scanning service may search for method calls relating to calling a phone number obtaining a carrier name and so on. In the text messaging category the application scanning service may search for method calls relating to a compose view controller and its delegate and others.

In the camera category the application scanning service may search for method calls relating to an image picker controller writing images and videos to a photo album a view controller and others. In the files category the application scanning service may search for method calls relating to writing to a uniform resource locator URL writing to a file initializing with contents of a URL or file and others. In the ownership category the application scanning service may search for method calls relating to user defaults with a parameter of a phone number and others. In the audio category the application scanning service may search for method calls relating to recording audio and others.

In various embodiments the application scanning performed by the application scanning service described herein may be configured to search for bad coding practices out of date API calls calls that load other code dynamically reflection related code that can expose internal operating system data and or other types of code that can be considered problematic.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application scanning service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application scanning service as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in a compliance server an application scanning server or a user device according to one or more embodiments.

Beginning with box the application scanning service obtains the public API definitions . In box the application scanning service obtains a binary application . In box the application scanning service extracts the metadata including a list of classes and a list of methods FIG. the  objc selrefs section and the  objc classrefs section from the application .

In box the application scanning service identifies external classes and external methods by comparing the classes in the list of classes with the classes in the  objc classrefs section and by comparing the methods in the list of methods with the methods in the  objc selrefs section . In box the application scanning service compares the external classes and the external methods with the public API definitions to determine the invoked public APIs .

In box the application scanning service locates instructions of the application that refer to the public APIs. In box the application scanning service performs forward constant propagation for instructions that refer to public APIs. In box the application scanning service reports instructions that invoke public APIs. In box the application scanning service may check arguments of one or more invocations of public APIs using backward slicing and forward constant propagation. Thereafter the portion of the application scanning service ends.

Continuing to shown is a flowchart that provides one example of the operation of another portion of the application scanning service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the application scanning service as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in a compliance server an application scanning server or a user device according to one or more embodiments.

Beginning with box the application scanning service obtains compliance rules from a compliance rule store . In box the application scanning service receives a request to scan an application . In box the application scanning service scans the application including performing the process depicted in the flowchart of . In box the application scanning service creates an application analysis in the application analysis store based at least in part on the application scan.

In box the application scanning service may wrap the application embed a software development kit SDK into the application or perform another action based at least in part on the application analysis. In box the application scanning service may create a developer reputation record based at least in part on the application analysis. In box the application scanning service enforces the compliance rules based at least in part on the software analysis and or the developer reputation record. Thereafter the portion of the application scanning service ends.

The flowcharts of show the functionality and operation of an implementation of portions of the application scanning service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Further any logic or application described herein including the application scanning service may be implemented and structured in a variety of ways. For example one or more applications described may be implemented as modules or components of a single application. Further one or more applications described herein may be executed in shared or separate computing devices or a combination thereof. For example a plurality of the applications described herein may execute in the same computing device or in multiple computing devices in the same computing environment. Additionally it is understood that terms such as application service system engine module and so on may be interchangeable and are not intended to be limiting.

Disjunctive language such as the phrase at least one of X Y or Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

Although the embodiments described herein are discussed in terms of examples relating to iOS and Objective C it is understood that the principles of the present disclosure may apply to other operating systems and programming languages.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

