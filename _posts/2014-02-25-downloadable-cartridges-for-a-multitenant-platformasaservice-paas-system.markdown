---

title: Downloadable cartridges for a multi-tenant platform-as-a-Service (PaaS) system
abstract: Implementations for downloadable cartridges for a multi-tenant Platform-as-a-Service (PaaS) system are disclosed. A method of the disclosure includes receiving, by a processing device of a multi-tenant Platform-as-a-Service (PaaS) system, a location of a cartridge manifest corresponding to a cartridge that is maintained outside of the multi-tenant PaaS system, downloading the cartridge manifest from the received location, parsing the downloaded cartridge manifest to determine a source location of files of the cartridge, the source location separate from the multi-tenant PaaS system, and causing the files of the cartridge to be obtained from the determined source location for use by at least one node of the multi-tenant PaaS system that is hosting an application requesting the cartridge.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251030&OS=09251030&RS=09251030
owner: Red Hat, Inc.
number: 09251030
owner_city: Raleigh
owner_country: US
publication_date: 20140225
---
This application claims the benefit under 35 U.S.C. 119 e of U.S. Patent Provisional Application No. 61 925 381 filed on Jan. 9 2014 the entirety of which is incorporated herein by reference.

The implementations of the disclosure relate generally to computing infrastructures and more specifically relate to downloadable cartridges for a multi tenant Platform as a Service PaaS system.

Currently a variety of Platform as a Service PaaS offerings exist that include software and or hardware facilities for facilitating the execution of web applications. In some cases these PaaS offerings utilize a cloud computing environment the cloud to support execution of the web applications. Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose.

The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include software components such as a kernel and an operating system and or middleware and a framework. Customers that have installed and are executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

PaaS offerings typically facilitate deployment of web applications without the cost and complexity of buying and managing the underlying hardware software and provisioning hosting capabilities providing the facilities to support the complete life cycle of building delivering and servicing web applications that are entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

Implementations of the disclosure provide downloadable cartridges for a multi tenant Platform as a Service PaaS system. In one implementation a cartridge of the PaaS system may be written by a cartridge author and utilized in deployed applications by application developers. The PaaS system may include a broker server with a cartridge download component to manage the installation of third party custom cartridges downloadable cartridges that are created outside of the PaaS system. In one implementation the cartridge download component receives identification of a cartridge manifest of a downloadable cartridge downloads the identified cartridge manifest parses the downloaded cartridge manifest to determine a source location of files of the downloadable cartridge obtains the downloadable cartridge from the source location and deploys the obtained downloadable cartridge to a node of the PaaS. Implementations of the disclosure allow for the download and deployment of fully featured cartridges that are not maintained or controlled by the PaaS system. In addition the downloadable cartridges do not have to be maintained on a cartridge library or repository of a node before being deployed on that node.

Previously cartridges of a PaaS system were generated and maintained by the PaaS system. Third party cartridge authors were not able to create and provide their cartridges for use on the PaaS system. Furthermore cartridges of previous implementations of PaaS system were stored and maintained at the nodes of the PaaS system. This did not provide for flexibility and or adaptability of the PaaS systems. Implementations of the disclosure overcome this drawback by providing downloadable cartridges written by third party cartridge authors that may be obtained from outside of the PaaS system. These downloadable cartridges may be installed on the fly meaning the cartridges do not have to be deployed and stored at the nodes hosting the applications utilizing the downloadable cartridges.

In some implementations the host machines are often located in a data center. For example VMs and are hosted on physical machine in cloud provided by cloud provider . Users can interact with applications executing on the cloud based VMs using client computer systems such as clients and via corresponding web browser applications and . In other implementations the applications may be hosted directly on hosts through N without the use of VMs e.g. a bare metal implementation and in such an implementation the hosts themselves are referred to as nodes .

Clients and are connected to hosts on cloud and the cloud provider system via a network which may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer a tablet computing device a server device or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one implementation the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some implementations cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some implementations the data may be provided to the cloud provider and stored in an image repository or in an image repository not shown located on each host or in an image repository not shown located on each VM . This data is used for the execution of applications for a multi tenant PaaS system managed by the PaaS provider controller .

In one implementation a cartridge of the PaaS system may be written by a cartridge author and utilized in deployed applications by application developers. The PaaS provider controller may include a broker server with a cartridge download component to manage the installation of third party custom cartridges downloadable cartridges that are created outside of the PaaS system. In one implementation the cartridge download component receives identification of a cartridge manifest corresponding to a downloadable cartridge downloads the identified cartridge manifest parses the downloaded cartridge manifest to determine a source location of files of the downloadable cartridge obtains the downloadable cartridge from the source location and deploys the obtained downloadable cartridge to a node of the PaaS. Implementations of the disclosure allow for the download and deployment of fully featured cartridges that are not maintained or controlled by the PaaS system. In addition the downloadable cartridges do not have to be maintained on a cartridge library or repository of a node before being deployed on that node. Further details of providing installation and update of cartridges in a multi tenant PaaS system are described below with respect to .

While various implementations are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways. For example the data from the image repository may run directly on a physical host instead of being instantiated on a VM .

In one implementation the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to a broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

In one implementation the client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Another example of an SCM or revision control system is Debian also available as open source software. Git Debian and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes for each application associated with the end user of the PaaS system . The packaged software application can then be pushed from the local SCM repository to a remote SCM repository such as app repos at the node s running the associated application. From the remote SCM repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one implementation also includes a set of command line tools that a user can utilize to create launch and manage applications. In one implementation the command line tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one implementation the command line tools make use of an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some implementations.

In one implementation the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one implementation each node is a VM provisioned by an Infrastructure as a Service IaaS provider. In other implementations the nodes may be physical machines e.g. bare metal or VMs residing on a single physical machine and running gears discussed below that provide functionality of applications of a multi tenant PaaS system. In one implementation the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some implementations the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one implementation the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one implementation when a user using the command line tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one implementation the authentication service may comprise custom authentication methods or standard protocols such as SAML OAuth etc. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes 

In one implementation the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one implementation functions to coordinate server client interaction between multiple sometimes a large number of servers. In one implementation the servers being orchestrated are nodes which are acting as application servers and web servers.

In one implementation the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client command line tools . The server orchestration system then takes the actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one implementation the information collected about the nodes can be stored in a data store . In one implementation the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Storage as a Service SaaS provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one implementation data of a node is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In implementations of the disclosure the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications . In some implementations portions of an application are run on multiple different nodes . For example as shown in components of application are run in both node and node . Similarly application is run in node and node while application is run in node and node

In addition each node also maintains a cartridge library . The cartridge library maintains multiple software components referred to herein as cartridges that may be utilized by applications deployed on node . A cartridge can represent a form of support software or middleware providing the functionality such as configuration templates scripts and or dependencies to run an application and or add a feature to an application . In one implementation the cartridges support languages such as but not limited to JBoss PHP Ruby Python Perl and so on. In addition cartridges may be provided that support databases such as MySQL PostgreSQL Mongo and others. Cartridges may also be available that support the build and continuous integration environments such as a Jenkins cartridge. Lastly cartridges may be provided to support management capabilities such as PHPmyadmin RockMongo 10gen mms agent cron scheduler and HAProxy for example. Adding an instance of a cartridge from cartridge library to an application provides a capability for the application without the customer who owns the application having to administer or update the included capability.

In some implementations a cartridge may include an entirely functioning application. For example the cartridge may include the entire code application dependencies and so on to execute an application.

In one implementation each node is implemented as a VM and has an operating system that can execute applications using the app repos and cartridge libraries that are resident on the nodes . Each node also includes a server orchestration system agent not shown configured to track and collect information about the node and to perform management actions on the node . Thus in one implementation using MCollective as the server orchestration system the server orchestration system agent not shown at the node can act as a MCollective server. The server orchestration system would then act as the MCollective client that can send requests queries and commands to the MCollective server agent on node 

As previously mentioned cartridges provide the underlying support software that implements the functionality of applications . In one implementation an application may utilize one or more cartridge instances that are run in one or more resource constrained gears on nodes . Cartridge library provides an OS based location outside of all application gears that acts as a source for cartridge instantiations that provide functionality for an application 

An application may use more than one cartridge instance as part of providing functionality for the application . One example of this is a JavaEE application that uses a JBoss AS7 cartridge with a supporting MySQL database provided by a MySQL cartridge. Each cartridge instance may include a software repository that provides the particular functionality of the cartridge instance .

As mentioned above a gear is a resource constrained process space on the node to execute functionality of an application . In some implementations a gear is established by the node with resource boundaries including a limit and or designation of the amount of memory amount of storage and security types and or labels to be applied to any functions executed by the gear . In one implementation gears may be established using the Linux Containers LXC virtualization method. In further implementations gears may also be established using cgroups SELinux and kernel namespaces to name a few examples. As illustrated in cartridges instances for an application may execute in gears dispersed over more than one node . In other implementations cartridge instances for an application may run in one or more gears on the same node 

Implementations of the disclosure provide installation and deployment of a downloadable cartridge by the multi tenant PaaS. In one implementation broker layer includes a cartridge download component to provide support for the installation and deployment of the downloadable cartridge instances of the multi tenant PaaS . In one implementation the cartridge download component is part of broker . The cartridge download component may be the same as cartridge download component described with respect to .

In one implementation a cartridge of the PaaS system may be written by a cartridge author and utilized in deployed applications by application developers. The cartridge download component may manage the installation of third party custom cartridges downloadable cartridges that are created outside of the PaaS system. Previously cartridges utilized by the multi tenant PaaS system were deployed to each node and maintained in the cartridge library of the node for instantiation to the applications running on the node . In one implementation the downloadable cartridges are maintained in locations that are not operated by or controlled by the multi tenant PaaS system. For example the downloadable cartridges may be cartridges that are not kept in the cartridge library of the node 

When a user of the multi tenant PaaS such as an application developer seeks to utilize a downloadable cartridge for an application cartridge manifest information corresponding to the downloadable cartridge may be provided via client layer to the cartridge download component . A cartridge manifest information may refer to information identifying a cartridge manifest associated with the downloadable cartridge. The cartridge manifest may be a file that details the features of the downloadable cartridge and includes fields utilized by the multi tenant PaaS to deploy the downloadable cartridge to a node and or application

In one implementation the cartridge manifest information may be provided via a graphical user interface GUI such as a web interface at the client layer . The GUI may be provided by the broker to facilitate communication between the application developer and the multi tenant PaaS. The cartridge manifest information may include but is not limited to a Uniform Resource Locator URL from which cartridge manifest files can be accessed.

In one implementation the cartridge manifest information is obtained from the cartridge author. For example the cartridge author may identify and describe the downloadable cartridge in a web site a blog post or in some other communication medium. In addition the multi tenant PaaS may feature or otherwise identify a downloadable cartridge to users of the multi tenant PaaS. In some implementations the cartridge manifest files may be provided from the user directly via the client layer .

After the cartridge manifest information is received the cartridge download component downloads the identified cartridge manifest files and parses the downloaded cartridge manifest files to determine a source location of files of the downloadable cartridge. In one implementation the cartridge manifest files includes a source location field that identifies a URL where the downloadable cartridge files may be obtained. The cartridge download component then directs one or more of the nodes to obtain the downloadable cartridge files from the source location. As a result the cartridge download component may manage the deployment of the obtained downloadable cartridge to the requesting application created by the requesting application developer on a node of the multi tenant PaaS system.

Implementations of the disclosure allow for the download and deployment of fully featured cartridges that are not maintained or controlled by the PaaS system. In addition the downloadable cartridges do not have to be maintained on a cartridge library or repository of a node before being deployed on that node.

Method begins at block where a cartridge request is received at the cartridge download component of a broker of a multi tenant PaaS system. In one implementation the cartridge request corresponds to a downloadable cartridge that is created and maintained outside of the multi tenant PaaS system. The downloadable cartridge may be written by a cartridge author that is third party to the multi tenant PaaS system. In one implementation the cartridge request may be part of creating a new application on the multi tenant PaaS or may relate to an already existing application on the multi tenant PaaS.

At block a location of a cartridge manifest corresponding to the downloadable cartridge is received. A cartridge manifest may be a file that details the features of the downloadable cartridge and includes fields utilized by the multi tenant PaaS to deploy the cartridge to a node and or applications of the multi tenant PaaS. In one implementation the cartridge manifest is provided via a GUI such as a web interface provided by the multi tenant PaaS to interact with an application developer utilizing the multi tenant PaaS. A user of the multi tenant PaaS such as an application developer may provide a URL from which the cartridge manifest can be accessed.

At block the cartridge manifest is downloaded from the received location. Then at block the cartridge manifest is parsed to identify a source location of files of the downloadable cartridge. In one implementation the cartridge manifest includes but is not limited to a source location field that identifies a URL or other source location from which the files of the downloadable cartridge can be obtained. The source location may be a location that is separate from the multi tenant PaaS system.

At block the cartridge download component causes one or more nodes of the multi tenant PaaS to obtain e.g. download files of the downloadable cartridge from the identified source location that was found in the cartridge manifest. Lastly at block the downloadable cartridge is deployed on a node hosting the application requesting the downloadable cartridge. The downloadable cartridge may be deployed for use by the application on the node e.g. deployed as a cartridge instance for the requesting application .

The computer system includes a processing device e.g. processor CPU etc. a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device communicably coupled to a network . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored software embodying any one or more of the methodologies of functions described herein. The software may also reside completely or at least partially within the main memory as instructions and or within the processing device as processing logic during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store instructions to implement a cartridge download component to manage installation of downloadable cartridges in a multi tenant PaaS such as cartridge download component described with respect to and or a software library containing methods that call the above applications. While the machine accessible storage medium is shown in an example implementation to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the disclosure. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however that the disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding obtaining referencing determining providing implementing downloading parsing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosure. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Whereas many alterations and modifications of the disclosure will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular implementation shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various implementations are not intended to limit the scope of the claims which in themselves recite only those features regarded as the disclosure.

