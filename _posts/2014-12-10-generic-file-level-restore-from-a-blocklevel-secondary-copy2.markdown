---

title: Generic file level restore from a block-level secondary copy
abstract: Systems and methods are provided which perform a file level restore by utilizing existing operating system components (e.g., file system drivers) that are natively installed on the target computing device. These components can be used to mount and/or interpret a secondary copy of the file system. For instance, the system can instantiate an interface object (e.g., a device node such as a pseudo device, device file or special file) on the target client which includes file system metadata corresponding to the backed up version of the file system. The interface provides a mechanism for the operating system to mount the secondary copy and perform file level access on the secondary copy, e.g., to restore one or more selected files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632882&OS=09632882&RS=09632882
owner: COMMVAULT SYSTEMS, INC.
number: 09632882
owner_city: Tinton Falls
owner_country: US
publication_date: 20141210
---
Any and all priority claims identified in the Application Data Sheet or any correction thereto are hereby incorporated by reference under 37 CFR 1.57.

Businesses worldwide recognize the commercial value of their data and seek reliable cost effective ways to protect the information stored on their computer networks while minimizing impact on productivity. Protecting information is often part of a routine process that is performed within an organization.

A company might back up critical computing systems such as databases file servers web servers and so on as part of a daily weekly or monthly maintenance schedule. The company may similarly protect computing systems used by each of its employees such as those used by an accounting department marketing department engineering department and so forth.

Given the rapidly expanding volume of data under management companies also continue to seek innovative techniques for managing data growth in addition to protecting data. For instance companies often implement migration techniques for moving data to lower cost storage over time and data reduction techniques for reducing redundant data pruning lower priority data etc.

Enterprises also increasingly view their stored data as a valuable asset. Along these lines customers are looking for solutions that not only protect and manage but also leverage their data. For instance solutions providing data analysis capabilities improved data presentation and access features and the like are in increasing demand.

Given the integral nature of file systems in typical computing environments it is generally important for data protection schemes to protect file system data e.g. files and directories metadata mount points etc. . Thus data protection systems often create backups or other secondary copies of file system data.

File system data can be copied at the file level in some cases in which each file is copied to secondary storage as a complete logical entity. In other cases the files can be copied at the block level in which each of the files are divided data blocks e.g. fixed size data blocks and copied to secondary storage. Block level copying can provide certain advantages. For instance backing up or otherwise copying at the block level can be significantly faster than file level backups particularly when the file system is full or nearly full. This is because unlike a file level backup the disk is typically read sequentially or substantially sequentially during a block level backup without parsing the file system metadata. However users generally will want to restore the data at the file level and restoring data at the file level from block level secondary copies can be challenging.

For instance restoring a particular file to a target computing device involves identifying the blocks that form the file and locating those blocks in secondary storage. But the secondary copy of the file system generally includes the metadata corresponding to the directory structure which is file system type specific and restoring the file would typically require knowledge of the internal file system layout to reconstruct the files.

In some cases specialized code can be used to parse through the data during the backup process to create a traversable map of the backed up version of the file system. This map could be stored in a cache or on secondary storage along with the secondary copy. On restore the system accesses the pre existing map and uses it to mount and or traverse through the file system hierarchy. In this manner the system can locate files being restored their constituent data blocks and the locations of the data blocks in secondary storage.

In such a scheme the specialized code implements logic that is based the specification of the file system and is therefore specifically tailored to the particular type and or version of the file system being protected. Particularly where multiple file system types and or versions are supported by the data storage system developing and maintaining such specialized modules for interpreting each file system type and or version can become burdensome.

Thus according to some embodiments systems and methods are provided which perform a file level restore by utilizing existing operating system components e.g. file system drivers that are natively installed on the target computing device. These components are used to mount and or interpret the backed up version of the file system.

For instance in some embodiments the system instantiates an interface object e.g. device node such as a pseudo device device file or special file on the target client which includes file system metadata e.g. block size information inode table location or other information related to inode tables a block map block group information etc. corresponding to the backed up version of the file system. The interface provides a mechanism for the operating system to mount the secondary copy and perform file level access on the secondary copy e.g. to restore one or more selected files.

As one example the system instructs the operating system on the target client also referred to as a destination client to mount or otherwise process the interface object. As part of this process the operating system obtains and processes the file system metadata selects the appropriate file system driver and instructs that driver to perform the mount. The metadata is generally sufficient to allow the native operating system components to mount the secondary copy. The user can select one or more files to restore by browsing the mounted version of the file system represented by the mounted secondary copy. To restore the requested files the file system drivers can interact with the device interface to process the file system metadata and identify and request the constituent blocks that form the selected files. The interface services the block requests by obtaining the requested blocks from secondary storage. The target client processes the received blocks to reconstitute the requested files and restore them to primary storage.

Systems and methods are described herein for performing a file level restore from a block level secondary copy. Examples of such systems and methods are discussed in further detail herein e.g. with respect to . Moreover it will be appreciated that the file level restore techniques described herein may be performed by information management systems such as those that will now be described with respect to . And the componentry for implementing file level restore functionality can be incorporated into such systems.

With the increasing importance of protecting and leveraging data organizations simply cannot afford to take the risk of losing critical data. Moreover runaway data growth and other modern realities make protecting and managing data an increasingly difficult task. There is therefore a need for efficient powerful and user friendly solutions for protecting and managing data.

Depending on the size of the organization there are typically many data production sources which are under the purview of tens hundreds or even thousands of employees or other individuals. In the past individual employees were sometimes responsible for managing and protecting their data. A patchwork of hardware and software point solutions have been applied in other cases. These solutions were often provided by different vendors and had limited or no interoperability.

Certain embodiments described herein provide systems and methods capable of addressing these and other shortcomings of prior approaches by implementing unified organization wide information management. shows one such information management system which generally includes combinations of hardware and software configured to protect and manage data and metadata generated and used by the various computing devices in the information management system .

The organization which employs the information management system may be a corporation or other business entity non profit organization educational institution household governmental agency or the like.

Generally the systems and associated components described herein may be compatible with and or provide some or all of the functionality of the systems and corresponding components described in one or more of the following U.S. patents and patent application publications assigned to CommVault Systems Inc. each of which is hereby incorporated in its entirety by reference herein 

The illustrated information management system includes one or more client computing device having at least one application executing thereon and one or more primary storage devices storing primary data . The client computing device s and the primary storage devices may generally be referred to in some cases as a primary storage subsystem .

Depending on the context the term information management system can refer to generally all of the illustrated hardware and software components. Or in other instances the term may refer to only a subset of the illustrated components.

For instance in some cases information management system generally refers to a combination of specialized components used to protect move manage manipulate and or process data and metadata generated by the client computing devices . However the term may generally not refer to the underlying components that generate and or store the primary data such as the client computing devices themselves the applications and operating system residing on the client computing devices and the primary storage devices .

As an example information management system may sometimes refer only to one or more of the following components and corresponding data structures storage managers data agents and media agents. These components will be described in further detail below.

There are typically a variety of sources in an organization that produce data to be protected and managed. As just one illustrative example in a corporate environment such data sources can be employee workstations and company servers such as a mail server a web server or the like. In the information management system the data generation sources include the one or more client computing devices .

The client computing devices may include without limitation one or more workstations personal computers desktop computers or other types of generally fixed computing systems such as mainframe computers and minicomputers.

The client computing devices can also include mobile or portable computing devices such as one or more laptops tablet computers personal data assistants mobile phones such as smartphones and other mobile or portable computing devices such as embedded computers set top boxes vehicle mounted devices wearable computers etc.

In some cases each client computing device is associated with one or more users and or corresponding user accounts of employees or other individuals.

The term client computing device is used herein because the information management system generally serves the data management and protection needs for the data generated by the client computing devices . However the use of this term does not imply that the client computing devices cannot be servers in other respects. For instance a particular client computing device may act as a server with respect to other devices such as other client computing devices . As just a few examples the client computing devices can include mail servers file servers database servers and web servers.

The client computing devices may additionally include virtualized and or cloud computing resources. For instance one or more virtual machines may be provided to the organization by a third party cloud service vendor. Or in some embodiments the client computing devices include one or more virtual machine s running on a virtual machine host computing device operated by the organization. As one example the organization may use one virtual machine as a database server and another virtual machine as a mail server. A virtual machine manager VMM e.g. a Hypervisor may manage the virtual machines and reside and execute on the virtual machine host computing device.

Each client computing device may have one or more applications e.g. software applications executing thereon which generate and manipulate the data that is to be protected from loss.

The applications generally facilitate the operations of an organization or multiple affiliated organizations and can include without limitation mail server applications e.g. Microsoft Exchange Server file server applications mail client applications e.g. Microsoft Exchange Client database applications e.g. SQL Oracle SAP Lotus Notes Database word processing applications e.g. Microsoft Word spreadsheet applications financial applications presentation applications browser applications mobile applications entertainment applications and so on.

The applications can include at least one operating system e.g. Microsoft Windows Mac OS X iOS IBM z OS Linux other Unix based operating systems etc. which may support one or more file systems and host the other applications .

As shown the client computing devices and other components in the information management system can be connected to one another via one or more communication pathways . The communication pathways can include one or more networks or other connection types including as any of following without limitation the Internet a wide area network WAN a local area network LAN a Storage Area Network SAN a Fibre Channel connection a Small Computer System Interface SCSI connection a virtual private network VPN a token ring or TCP IP based network an intranet network a point to point link a cellular network a wireless data transmission system a two way cable system an interactive kiosk network a satellite network a broadband network a baseband network other appropriate wired wireless or partially wired wireless computer or telecommunications networks combinations of the same or the like. The communication pathways in some cases may also include application programming interfaces APIs including e.g. cloud service provider APIs virtual machine management APIs and hosted service provider APIs.

Primary data according to some embodiments is production data or other live data generated by the operating system and other applications residing on a client computing device . The primary data is stored on the primary storage device s and is organized via a file system supported by the client computing device . For instance the client computing device s and corresponding applications may create access modify write delete and otherwise use primary data .

Primary data is generally in the native format of the source application . According to certain aspects primary data is an initial or first e.g. created before any other copies or before at least one other copy stored copy of data generated by the source application . Primary data in some cases is created substantially directly from data generated by the corresponding source applications .

The primary data may sometimes be referred to as a primary copy in the sense that it is a discrete set of data. However the use of this term does not necessarily imply that the primary copy is a copy in the sense that it was copied or otherwise derived from another stored version.

The primary storage devices storing the primary data may be relatively fast and or expensive e.g. a disk drive a hard disk array solid state memory etc. . In addition primary data may be intended for relatively short term retention e.g. several hours days or weeks .

According to some embodiments the client computing device can access primary data from the primary storage device by making conventional file system calls via the operating system. Primary data representing files may include structured data e.g. database files unstructured data e.g. documents and or semi structured data. Some specific examples are described below with respect to .

It can be useful in performing certain tasks to break the primary data up into units of different granularities. In general primary data can include files directories file system volumes data blocks extents or any other types or granularities of data objects. As used herein a data object can refer to both 1 any file that is currently addressable by a file system or that was previously addressable by the file system e.g. an archive file and 2 a subset of such a file.

As will be described in further detail it can also be useful in performing certain functions of the information management system to access and modify metadata within the primary data . Metadata generally includes information about data objects or characteristics associated with the data objects.

Metadata can include without limitation one or more of the following the data owner e.g. the client or user that generates the data the last modified time e.g. the time of the most recent modification of the data object a data object name e.g. a file name a data object size e.g. a number of bytes of data information about the content e.g. an indication as to the existence of a particular search term to from information for email e.g. an email sender recipient etc. creation date file type e.g. format or application type last accessed time application type e.g. type of application that generated the data object location network e.g. a current past or future location of the data object and network pathways to from the data object frequency of change e.g. a period in which the data object is modified business unit e.g. a group or department that generates manages or is otherwise associated with the data object and aging information e.g. a schedule such as a time period in which the data object is migrated to secondary or long term storage boot sectors partition layouts file location within a file folder directory structure user permissions owners groups access control lists ACLS system metadata e.g. registry information combinations of the same or the like.

In addition to metadata generated by or related to file systems and operating systems some of the applications maintain indices of metadata for data objects e.g. metadata associated with individual email messages. Thus each data object may be associated with corresponding metadata. The use of metadata to perform classification and other functions is described in greater detail below.

Each of the client computing devices are associated with and or in communication with one or more of the primary storage devices storing corresponding primary data . A client computing device may be considered to be associated with or in communication with a primary storage device if it is capable of one or more of storing data to the primary storage device retrieving data from the primary storage device and modifying data retrieved from a primary storage device .

The primary storage devices can include without limitation disk drives hard disk arrays semiconductor memory e.g. solid state drives and network attached storage NAS devices. In some cases the primary storage devices form part of a distributed file system. The primary storage devices may have relatively fast I O times and or are relatively expensive in comparison to the secondary storage devices . For example the information management system may generally regularly access data and metadata stored on primary storage devices whereas data and metadata stored on the secondary storage devices is accessed relatively less frequently.

In some cases each primary storage device is dedicated to an associated client computing devices . For instance a primary storage device in one embodiment is a local disk drive of a corresponding client computing device . In other cases one or more primary storage devices can be shared by multiple client computing devices . As one example a primary storage device can be a disk array shared by a group of client computing devices such as one of the following types of disk arrays EMC Clariion EMC Symmetrix EMC Celerra Dell EqualLogic IBM XIV NetApp FAS HP EVA and HP 3PAR.

The information management system may also include hosted services not shown which may be hosted in some cases by an entity other than the organization that employs the other components of the information management system . For instance the hosted services may be provided by various online service providers to the organization. Such service providers can provide services including social networking services hosted email services or hosted productivity applications or other hosted applications .

Hosted services may include software as a service SaaS platform as a service PaaS application service providers ASPS cloud services or other mechanisms for delivering functionality via a network. As it provides services to users each hosted service may generate additional data and metadata under management of the information management system e.g. as primary data . In some cases the hosted services may be accessed using one of the applications . As an example a hosted mail service may be accessed via browser running on a client computing device .

The primary data stored on the primary storage devices may be compromised in some cases such as when an employee deliberately or accidentally deletes or overwrites primary data during their normal course of work. Or the primary storage devices can be damaged or otherwise corrupted.

For recovery and or regulatory compliance purposes it is therefore useful to generate copies of the primary data . Accordingly the information management system includes one or more secondary storage computing devices and one or more secondary storage devices configured to create and store one or more secondary copies of the primary data and associated metadata. The secondary storage computing devices and the secondary storage devices may be referred to in some cases as a secondary storage subsystem .

Creation of secondary copies can help meet information management goals such as restoring data and or metadata if an original version e.g. of primary data is lost e.g. by deletion corruption or disaster allowing point in time recovery complying with regulatory data retention and electronic discovery e discovery requirements reducing utilized storage capacity facilitating organization and search of data improving user access to data files across multiple computing devices and or hosted services and implementing data retention policies.

Types of secondary copy operations can include without limitation backup operations archive operations snapshot operations replication operations e.g. continuous data replication CDR data retention policies such as information lifecycle management and hierarchical storage management operations and the like. These specific types operations are discussed in greater detail below.

Regardless of the type of secondary copy operation the client computing devices access or receive primary data and communicate the data e.g. over the communication pathways for storage in the secondary storage device s .

A secondary copy can comprise a separate stored copy of application data that is derived from one or more earlier created stored copies e.g. derived from primary data or another secondary copy . Secondary copies can include point in time data and may be intended for relatively long term retention e.g. weeks months or years before some or all of the data is moved to other storage or is discarded.

In some cases a secondary copy is a copy of application data created and stored subsequent to at least one other stored instance e.g. subsequent to corresponding primary data or to another secondary copy in a different storage device than at least one previous stored copy and or remotely from at least one previous stored copy. Secondary copies may be stored in relatively slow and or low cost storage e.g. magnetic tape . A secondary copy may be stored in a backup or archive format or in some other format different than the native source application format or other primary data format.

In some cases secondary copies are indexed so users can browse and restore at another point in time. After creation of a secondary copy representative of certain primary data a pointer or other location indicia e.g. a stub may be placed in primary data or be otherwise associated with primary data to indicate the current location on the secondary storage device s .

Since an instance a data object or metadata in primary data may change over time as it is modified by an application or hosted service or the operating system the information management system may create and manage multiple secondary copies of a particular data object or metadata each representing the state of the data object in primary data at a particular point in time. Moreover since an instance of a data object in primary data may eventually be deleted from the primary storage device and the file system the information management system may continue to manage point in time representations of that data object even though the instance in primary data no longer exists.

For virtualized computing devices the operating system and other applications of the client computing device s may execute within or under the management of virtualization software e.g. a VMM and the primary storage device s may comprise a virtual disk created on a physical storage device. The information management system may create secondary copies of the files or other data objects in a virtual disk file and or secondary copies of the entire virtual disk file itself e.g. of an entire .vmdk file .

Secondary copies may be distinguished from corresponding primary data in a variety of ways some of which will now be described. First as discussed secondary copies can be stored in a different format e.g. backup archive or other non native format than primary data . For this or other reasons secondary copies may not be directly useable by the applications of the client computing device e.g. via standard system calls or otherwise without modification processing or other intervention by the information management system .

Secondary copies are also often stored on a secondary storage device that is inaccessible to the applications running on the client computing devices and or hosted services . Some secondary copies may be offline copies in that they are not readily available e.g. not mounted to tape or disk . Offline copies can include copies of data that the information management system can access without human intervention e.g. tapes within an automated tape library but not yet mounted in a drive and copies that the information management system can access only with at least some human intervention e.g. tapes located at an offsite storage site .

The secondary storage devices can include any suitable type of storage device such as without limitation one or more tape libraries disk drives or other magnetic non tape storage devices optical media storage devices solid state storage devices NAS devices combinations of the same and the like. In some cases the secondary storage devices are provided in a cloud e.g. a private cloud or one operated by a third party vendor .

The secondary storage device s in some cases comprises a disk array or a portion thereof. In some cases a single storage device e.g. a disk array is used for storing both primary data and at least some secondary copies . In one example a disk array capable of performing hardware snapshots stores primary data and creates and stores hardware snapshots of the primary data as secondary copies .

Creating secondary copies can be a challenging task. For instance there can be hundreds or thousands of client computing devices continually generating large volumes of primary data to be protected. Also there can be significant overhead involved in the creation of secondary copies . Moreover secondary storage devices may be special purpose components and interacting with them can require specialized intelligence.

In some cases the client computing devices interact directly with the secondary storage device to create the secondary copies . However in view of the factors described above this approach can negatively impact the ability of the client computing devices to serve the applications and produce primary data . Further the client computing devices may not be optimized for interaction with the secondary storage devices .

Thus in some embodiments the information management system includes one or more software and or hardware components which generally act as intermediaries between the client computing devices and the secondary storage devices . In addition to off loading certain responsibilities from the client computing devices these intermediary components can provide other benefits. For instance as discussed further below with respect to distributing some of the work involved in creating secondary copies can enhance scalability.

The intermediary components can include one or more secondary storage computing devices as shown in and or one or more media agents which can be software modules residing on corresponding secondary storage computing devices or other appropriate devices . Media agents are discussed below e.g. with respect to .

The secondary storage computing device s can comprise any appropriate type of computing device and can include without limitation any of the types of fixed and portable computing devices described above with respect to the client computing devices . In some cases the secondary storage computing device s include specialized hardware and or software componentry for interacting with the secondary storage devices .

To create a secondary copy the client computing device communicates the primary data to be copied or a processed version thereof to the designated secondary storage computing device via the communication pathway . The secondary storage computing device in turn conveys the received data or a processed version thereof to the secondary storage device . In some such configurations the communication pathway between the client computing device and the secondary storage computing device comprises a portion of a LAN WAN or SAN. In other cases at least some client computing devices communicate directly with the secondary storage devices e.g. via Fibre Channel or SCSI connections .

Some or all primary data objects are associated with a primary copy of object metadata e.g. Meta1 11 which may be file system metadata and or application specific metadata. Stored on the secondary storage device s are secondary copy objects A C which may include copies of or otherwise represent corresponding primary data objects and metadata.

As shown the secondary copy objects A C can individually represent more than one primary data object. For example secondary copy data object A represents three separate primary data objects C and C represented as C and C respectively . Moreover as indicated by the prime mark a secondary copy object may store a representation of a primary data object or metadata differently than the original format e.g. in a compressed encrypted deduplicated or other modified format.

The information management system can incorporate a variety of different hardware and software components which can in turn be organized with respect to one another in many different configurations depending on the embodiment. There are critical design choices involved in specifying the functional responsibilities of the components and the role of each component in the information management system . For instance as will be discussed such design choices can impact performance as well as the adaptability of the information management system to data growth or other changing circumstances.

As noted the number of components in the information management system and the amount of data under management can be quite large. Managing the components and data is therefore a significant task and a task that can grow in an often unpredictable fashion as the quantity of components and data scale to meet the needs of the organization.

For these and other reasons according to certain embodiments responsibility for controlling the information management system or at least a significant portion of that responsibility is allocated to the storage manager .

By distributing control functionality in this manner the storage manager can be adapted independently according to changing circumstances. Moreover a host computing device can be selected to best suit the functions of the storage manager . These and other advantages are described in further detail below with respect to .

The storage manager may be a software module or other application. The storage manager generally initiates coordinates and or controls storage and other information management operations performed by the information management system e.g. to protect and control the primary data and secondary copies of data and metadata.

As shown by the dashed arrowed lines the storage manager may communicate with and or control some or all elements of the information management system such as the data agents and media agents . Thus in certain embodiments control information originates from the storage manager whereas payload data and metadata is generally communicated between the data agents and the media agents or otherwise between the client computing device s and the secondary storage computing device s e.g. at the direction of the storage manager . In other embodiments some information management operations are controlled by other components in the information management system e.g. the media agent s or data agent s instead of or in combination with the storage manager .

According to certain embodiments the storage manager provides one or more of the following functions 

The storage manager may maintain a database of management related data and information management policies . The database may include a management index or other data structure that stores logical associations between components of the system user preferences and or profiles e.g. preferences regarding encryption compression or deduplication of primary or secondary copy data preferences regarding the scheduling type or other aspects of primary or secondary copy or other operations mappings of particular information management users or user accounts to certain computing devices or other components etc. management tasks media containerization or other useful data. For example the storage manager may use the index to track logical associations between media agents and secondary storage devices and or movement of data from primary storage devices to secondary storage devices .

Administrators and other employees may be able to manually configure and initiate certain information management operations on an individual basis. But while this may be acceptable for some recovery operations or other relatively less frequent tasks it is often not workable for implementing on going organization wide data protection and management.

Thus the information management system may utilize information management policies for specifying and executing information management operations e.g. on an automated basis . Generally an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with storage or other information management operations.

The storage manager database may maintain the information management policies and associated data although the information management policies can be stored in any appropriate location. For instance a storage policy may be stored as metadata in a media agent database or in a secondary storage device e.g. as an archive copy for use in restore operations or other information management operations depending on the embodiment. Information management policies are described further below.

According to certain embodiments the storage manager database comprises a relational database e.g. an SQL database for tracking metadata such as metadata associated with secondary copy operations e.g. what client computing devices and corresponding data were protected . This and other metadata may additionally be stored in other locations such as at the secondary storage computing devices or on the secondary storage devices allowing data recovery without the use of the storage manager .

As shown the storage manager may include a jobs agent a user interface and a management agent all of which may be implemented as interconnected software modules or application programs.

The jobs agent in some embodiments initiates controls and or monitors the status of some or all storage or other information management operations previously performed currently being performed or scheduled to be performed by the information management system . For instance the jobs agent may access information management policies to determine when and how to initiate and control secondary copy and other information management operations as will be discussed further.

The user interface may include information processing and display software such as a graphical user interface GUI an application program interface API or other interactive interface through which users and system processes can retrieve information about the status of information management operations e.g. storage operations or issue instructions to the information management system and its constituent components.

The storage manager may also track information that permits it to select designate or otherwise identify content indices deduplication databases or similar databases or resources or data sets within its information management cell or another cell to be searched in response to certain queries. Such queries may be entered by the user via interaction with the user interface .

Via the user interface users may optionally issue instructions to the components in the information management system regarding performance of storage and recovery operations. For example a user may modify a schedule concerning the number of pending secondary copy operations. As another example a user may employ the GUI to view the status of pending storage operations or to monitor the status of certain components in the information management system e.g. the amount of capacity left in a storage device .

In general the management agent allows multiple information management systems to communicate with one another. For example the information management system in some cases may be one information management subsystem or cell of a network of multiple cells adjacent to one another or otherwise logically related in a WAN or LAN. With this arrangement the cells may be connected to one another through respective management agents .

For instance the management agent can provide the storage manager with the ability to communicate with other components within the information management system and or other cells within a larger information management system via network protocols and application programming interfaces APIs including e.g. HTTP HTTPS FTP REST virtualization software APIs cloud service provider APIs and hosted service provider APIs. Inter cell communication and hierarchy is described in greater detail in U.S. Pat. No. 7 035 880 which is incorporated by reference herein.

As discussed a variety of different types of applications can reside on a given client computing device including operating systems database applications e mail applications and virtual machines just to name a few. And as part of the as part of the process of creating and restoring secondary copies the client computing devices may be tasked with processing and preparing the primary data from these various different applications . Moreover the nature of the processing preparation can differ across clients and application types e.g. due to inherent structural and formatting differences between applications .

The one or more data agent s are therefore advantageously configured in some embodiments to assist in the performance of information management operations based on the type of data that is being protected at a client specific and or application specific level.

The data agent may be a software module or component that is generally responsible for managing initiating or otherwise assisting in the performance of information management operations. For instance the data agent may take part in performing data storage operations such as the copying archiving migrating replicating of primary data stored in the primary storage device s . The data agent may receive control information from the storage manager such as commands to transfer copies of data objects metadata and other payload data to the media agents .

In some embodiments a data agent may be distributed between the client computing device and storage manager and any other intermediate components or may be deployed from a remote location or its functions approximated by a remote process that performs some or all of the functions of data agent . In addition a data agent may perform some functions provided by a media agent e.g. encryption and deduplication.

As indicated each data agent may be specialized for a particular application and the system can employ multiple data agents each of which may backup migrate and recover data associated with a different application . For instance different individual data agents may be designed to handle Microsoft Exchange data Lotus Notes data Microsoft Windows file system data Microsoft Active Directory Objects data SQL Server data SharePoint data Oracle database data SAP database data virtual machines and or associated data and other types of data.

A file system data agent for example may handle data files and or other file system information. If a client computing device has two or more types of data one data agent may be used for each data type to copy archive migrate and restore the client computing device data. For example to backup migrate and restore all of the data on a Microsoft Exchange server the client computing device may use one Microsoft Exchange Mailbox data agent to backup the Exchange mailboxes one Microsoft Exchange Database data agent to backup the Exchange databases one Microsoft Exchange Public Folder data agent to backup the Exchange Public Folders and one Microsoft Windows File System data agent to backup the file system of the client computing device . In such embodiments these data agents may be treated as four separate data agents even though they reside on the same client computing device .

Other embodiments may employ one or more generic data agents that can handle and process data from two or more different applications or that can handle and process multiple data types instead of or in addition to using specialized data agents . For example one generic data agent may be used to back up migrate and restore Microsoft Exchange Mailbox data and Microsoft Exchange Database data while another generic data agent may handle Microsoft Exchange Public Folder data and Microsoft Windows File System data.

Each data agent may be configured to access data and or metadata stored in the primary storage device s associated with the data agent and process the data as appropriate. For example during a secondary copy operation the data agent may arrange or assemble the data and metadata into one or more files having a certain format e.g. a particular backup or archive format before transferring the file s to a media agent or other component. The file s may include a list of files or other metadata. Each data agent can also assist in restoring data or metadata to primary storage devices from a secondary copy . For instance the data agent may operate in conjunction with the storage manager and one or more of the media agents to restore data from secondary storage device s .

As indicated above with respect to off loading certain responsibilities from the client computing devices to intermediary components such as the media agent s can provide a number of benefits including improved client computing device operation faster secondary copy operation performance and enhanced scalability. As one specific example which will be discussed below in further detail the media agent can act as a local cache of copied data and or metadata that it has stored to the secondary storage device s providing improved restore capabilities.

Generally speaking a media agent may be implemented as a software module that manages coordinates and facilitates the transmission of data as directed by the storage manager between a client computing device and one or more secondary storage devices . Whereas the storage manager controls the operation of the information management system the media agent generally provides a portal to secondary storage devices .

Media agents can comprise logically and or physically separate nodes in the information management system e.g. separate from the client computing devices storage manager and or secondary storage devices . In addition each media agent may reside on a dedicated secondary storage computing device in some cases while in other embodiments a plurality of media agents reside on the same secondary storage computing device .

A media agent and corresponding media agent database may be considered to be associated with a particular secondary storage device if that media agent is capable of one or more of routing and or storing data to the particular secondary storage device coordinating the routing and or storing of data to the particular secondary storage device retrieving data from the particular secondary storage device and coordinating the retrieval of data from a particular secondary storage device .

While media agent s are generally associated with one or more secondary storage devices the media agents in certain embodiments are physically separate from the secondary storage devices . For instance the media agents may reside on secondary storage computing devices having different housings or packages than the secondary storage devices . In one example a media agent resides on a first server computer and is in communication with a secondary storage device s residing in a separate rack mounted RAID based system.

In operation a media agent associated with a particular secondary storage device may instruct the secondary storage device e.g. a tape library to use a robotic arm or other retrieval means to load or eject a certain storage media and to subsequently archive migrate or retrieve data to or from that media e.g. for the purpose of restoring the data to a client computing device . The media agent may communicate with a secondary storage device via a suitable communications link such as a SCSI or Fiber Channel link.

As shown each media agent may maintain an associated media agent database . The media agent database may be stored in a disk or other storage device not shown that is local to the secondary storage computing device on which the media agent resides. In other cases the media agent database is stored remotely from the secondary storage computing device .

The media agent database can include among other things an index including data generated during secondary copy operations and other storage or information management operations. The index provides a media agent or other component with a fast and efficient mechanism for locating secondary copies or other data stored in the secondary storage devices . In one configuration a storage manager index or other data structure may store data associating a client computing device with a particular media agent and or secondary storage device as specified in a storage policy. A media agent index or other data structure associated with the particular media agent may in turn include information about the stored data.

For instance for each secondary copy the index may include metadata such as a list of the data objects e.g. files subdirectories database objects mailbox objects etc. a path to the secondary copy on the corresponding secondary storage device location information indicating where the data objects are stored in the secondary storage device when the data objects were created or modified etc. Thus the index includes metadata associated with the secondary copies that is readily available for use in storage operations and other activities without having to be first retrieved from the secondary storage device . In yet further embodiments some or all of the data in the index may instead or additionally be stored along with the data in a secondary storage device e.g. with a copy of the index .

Because the index maintained in the database may operate as a cache it can also be referred to as an index cache. In such cases information stored in the index cache typically comprises data that reflects certain particulars about storage operations that have occurred relatively recently. After some triggering event such as after a certain period of time elapses or the index cache reaches a particular size the index cache may be copied or migrated to a secondary storage device s . This information may need to be retrieved and uploaded back into the index cache or otherwise restored to a media agent to facilitate retrieval of data from the secondary storage device s . In some embodiments the cached information may include format or containerization information related to archives or other files stored on the storage device s . In this manner the index cache allows for accelerated restores.

In some alternative embodiments the media agent generally acts as a coordinator or facilitator of storage operations between client computing devices and corresponding secondary storage devices but does not actually write the data to the secondary storage device . For instance the storage manager or the media agent may instruct a client computing device and secondary storage device to communicate with one another directly. In such a case the client computing device transmits the data directly to the secondary storage device according to the received instructions and vice versa. In some such cases the media agent may still receive process and or maintain metadata related to the storage operations. Moreover in these embodiments the payload data can flow through the media agent for the purposes of populating the index cache maintained in the media agent database but not for writing to the secondary storage device .

The media agent and or other components such as the storage manager may in some cases incorporate additional functionality such as data classification content indexing deduplication encryption compression and the like. Further details regarding these and other functions are described below.

As described certain functions of the information management system can be distributed amongst various physical and or logical components in the system. For instance one or more of the storage manager data agents and media agents may reside on computing devices that are physically separate from one another. This architecture can provide a number of benefits.

For instance hardware and software design choices for each distributed component can be targeted to suit its particular function. The secondary computing devices on which the media agents reside can be tailored for interaction with associated secondary storage devices and provide fast index cache operation among other specific tasks. Similarly the client computing device s can be selected to effectively service the applications residing thereon in order to efficiently produce and store primary data .

Moreover in some cases one or more of the individual components in the information management system can be distributed to multiple separate computing devices. As one example for large file systems where the amount of data stored in the storage management database is relatively large the management database may be migrated to or otherwise reside on a specialized database server e.g. an SQL server separate from a server that implements the other functions of the storage manager . This configuration can provide added protection because the database can be protected with standard database utilities e.g. SQL log shipping or database replication independent from other functions of the storage manager . The database can be efficiently replicated to a remote site for use in the event of a disaster or other data loss incident at the primary site. Or the database can be replicated to another computing device within the same site such as to a higher performance machine in the event that a storage manager host device can no longer service the needs of a growing information management system .

The distributed architecture also provides both scalability and efficient component utilization. shows an embodiment of the information management system including a plurality of client computing devices and associated data agents as well as a plurality of secondary storage computing devices and associated media agents .

Additional components can be added or subtracted based on the evolving needs of the information management system . For instance depending on where bottlenecks are identified administrators can add additional client computing devices secondary storage devices and corresponding media agents and or secondary storage devices .

Moreover each client computing device in some embodiments can communicate with any of the media agents e.g. as directed by the storage manager . And each media agent may be able to communicate with any of the secondary storage devices e.g. as directed by the storage manager . Thus operations can be routed to the secondary storage devices in a dynamic and highly flexible manner. Further examples of scalable systems capable of dynamic storage operations are provided in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

In alternative configurations certain components are not distributed and may instead reside and execute on the same computing device. For example in some embodiments one or more data agents and the storage manager reside on the same client computing device . In another embodiment one or more data agents and one or more media agents reside on a single computing device.

In order to protect and leverage stored data the information management system can be configured to perform a variety of information management operations. As will be described these operations can generally include secondary copy and other data movement operations processing and data manipulation operations and management operations.

Data movement operations according to certain embodiments are generally operations that involve the copying or migration of data e.g. payload data between different locations in the information management system . For example data movement operations can include operations in which stored data is copied migrated or otherwise transferred from primary storage device s to secondary storage device s from secondary storage device s to different secondary storage device s or from primary storage device s to different primary storage device s .

Data movement operations can include by way of example backup operations archive operations information lifecycle management operations such as hierarchical storage management operations replication operations e.g. continuous data replication operations snapshot operations deduplication operations single instancing operations auxiliary copy operations and the like. As will be discussed some of these operations involve the copying migration or other movement of data without actually creating multiple distinct copies. Nonetheless some or all of these operations are referred to as copy operations for simplicity.

A backup operation creates a copy of primary data at a particular point in time. Each subsequent backup copy may be maintained independently of the first. Further a backup copy in some embodiments is stored in a backup format. This can be in contrast to the version in primary data from which the backup copy is derived and which may instead be stored in a native format of the source application s . In various cases backup copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format. For example a backup copy may be stored in a backup format that facilitates compression and or efficient long term storage.

Backup copies can have relatively long retention periods as compared to primary data and may be stored on media with slower retrieval times than primary data and certain other types of secondary copies . On the other hand backups may have relatively shorter retention periods than some other types of secondary copies such as archive copies described below . Backups may sometimes be stored at on offsite location.

Backup operations can include full synthetic or incremental backups. A full backup in some embodiments is generally a complete image of the data to be protected. However because full backup copies can consume a relatively large amount of storage it can be useful to use a full backup copy as a baseline and only store changes relative to the full backup copy for subsequent backup copies.

For instance a differential backup operation or cumulative incremental backup operation tracks and stores changes that have occurred since the last full backup. Differential backups can grow quickly in size but can provide relatively efficient restore times because a restore can be completed in some cases using only the full backup copy and the latest differential copy.

An incremental backup operation generally tracks and stores changes since the most recent backup copy of any type which can greatly reduce storage utilization. In some cases however restore times can be relatively long in comparison to full or differential backups because completing a restore operation may involve accessing a full backup in addition to multiple incremental backups.

Any of the above types of backup operations can be at the file level e.g. where the information management system generally tracks changes to files at the file level and includes copies of files in the backup copy. In other cases block level backups are employed where files are broken into constituent blocks and changes are tracked at the block level. Upon restore the information management system reassembles the blocks into files in a transparent fashion.

Far less data may actually be transferred and copied to the secondary storage devices during a block level copy than during a file level copy resulting in faster execution times. However when restoring a block level copy the process of locating constituent blocks can sometimes result in longer restore times as compared to file level backups. Similar to backup operations the other types of secondary copy operations described herein can also be implemented at either the file level or the block level.

Because backup operations generally involve maintaining a version of the copied data in primary data and also maintaining backup copies in secondary storage device s they can consume significant storage capacity. To help reduce storage consumption an archive operation according to certain embodiments creates a secondary copy by both copying and removing source data. Or seen another way archive operations can involve moving some or all of the source data to the archive destination. Thus data satisfying criteria for removal e.g. data of a threshold age or size from the source copy may be removed from source storage. Archive copies are sometimes stored in an archive format or other non native application format. The source data may be primary data or a secondary copy depending on the situation. As with backup copies archive copies can be stored in a format in which the data is compressed encrypted deduplicated and or otherwise modified from the original application format.

In addition archive copies may be retained for relatively long periods of time e.g. years and in some cases are never deleted. Archive copies are generally retained for longer periods of time than backup copies for example. In certain embodiments archive copies may be made and kept for extended periods in order to meet compliance regulations.

Moreover when primary data is archived in some cases the archived primary data or a portion thereof is deleted when creating the archive copy. Thus archiving can serve the purpose of freeing up space in the primary storage device s . Similarly when a secondary copy is archived the secondary copy may be deleted and an archive copy can therefore serve the purpose of freeing up space in secondary storage device s . In contrast source copies often remain intact when creating backup copies.

Snapshot operations can provide a relatively lightweight efficient mechanism for protecting data. From an end user viewpoint a snapshot may be thought of as an instant image of the primary data at a given point in time. In one embodiment a snapshot may generally capture the directory structure of an object in primary data such as a file or volume or other data set at a particular moment in time and may also preserve file attributes and contents. A snapshot in some cases is created relatively quickly e.g. substantially instantly using a minimum amount of file space but may still function as a conventional file system backup.

A snapshot copy in many cases can be made quickly and without significantly impacting primary computing resources because large amounts of data need not be copied or moved. In some embodiments a snapshot may exist as a virtual file system parallel to the actual file system. Users in some cases gain read only access to the record of files and directories of the snapshot. By electing to restore primary data from a snapshot taken at a given point in time users may also return the current file system to the state of the file system that existed when the snapshot was taken.

Some types of snapshots do not actually create another physical copy of all the data as it existed at the particular point in time but may simply create pointers that are able to map files and directories to specific memory locations e.g. disk blocks where the data resides as it existed at the particular point in time. For example a snapshot copy may include a set of pointers derived from the file system or an application. Each pointer points to a respective stored data block so collectively the set of pointers reflect the storage location and state of the data object e.g. file s or volume s or data set s at a particular point in time when the snapshot copy was created.

In some embodiments once a snapshot has been taken subsequent changes to the file system typically do not overwrite the blocks in use at the time of the snapshot. Therefore the initial snapshot may use only a small amount of disk space needed to record a mapping or other data structure representing or otherwise tracking the blocks that correspond to the current state of the file system. Additional disk space is usually required only when files and directories are actually modified later. Furthermore when files are modified typically only the pointers which map to blocks are copied not the blocks themselves. In some embodiments for example in the case of copy on write snapshots when a block changes in primary storage the block is copied to secondary storage or cached in primary storage before the block is overwritten in primary storage. The snapshot mapping of file system data is also updated to reflect the changed block s at that particular point in time. In some other cases a snapshot includes a full physical copy of all or substantially all of the data represented by the snapshot. Further examples of snapshot operations are provided in U.S. Pat. No. 7 529 782 which is incorporated by reference herein.

Another type of secondary copy operation is a replication operation. Some types of secondary copies are used to periodically capture images of primary data at particular points in time e.g. backups archives and snapshots . However it can also be useful for recovery purposes to protect primary data in a more continuous fashion by replicating the primary data substantially as changes occur. In some cases a replication copy can be a mirror copy for instance where changes made to primary data are mirrored to another location e.g. to secondary storage device s . By copying each write operation to the replication copy two storage systems are kept synchronized or substantially synchronized so that they are virtually identical at approximately the same time. Where entire disk volumes are mirrored however mirroring can require significant amount of storage space and utilizes a large amount of processing resources.

According to some embodiments storage operations are performed on replicated data that represents a recoverable state or known good state of a particular application running on the source system. For instance in certain embodiments known good replication copies may be viewed as copies of primary data . This feature allows the system to directly access copy restore backup or otherwise manipulate the replication copies as if the data was the live primary data . This can reduce access time storage utilization and impact on source applications among other benefits.

Based on known good state information the information management system can replicate sections of application data that represent a recoverable state rather than rote copying of blocks of data. Examples of compatible replication operations e.g. continuous data replication are provided in U.S. Pat. No. 7 617 262 which is incorporated by reference herein.

Another type of data movement operation is deduplication which is useful to reduce the amount of data within the system. For instance some or all of the above described secondary storage operations can involve deduplication in some fashion. New data is read broken down into blocks e.g. sub file level blocks of a selected granularity compared with blocks that are already stored and only the new blocks are stored. Blocks that already exist are represented as pointers to the already stored data.

In order to stream line the comparison process the information management system may calculate and or store signatures e.g. hashes corresponding to the individual data blocks and compare the hashes instead of comparing entire data blocks. In some cases only a single instance of each element is stored and deduplication operations may therefore be referred to interchangeably as single instancing operations. Depending on the implementation however deduplication or single instancing operations can store more than one instance of certain data blocks but nonetheless significantly reduce data redundancy. Moreover single instancing in some cases is distinguished from deduplication as a process of analyzing and reducing data at the file level rather than the sub file level.

Depending on the embodiment deduplication blocks can be of fixed or variable length. Using variable length blocks can provide enhanced deduplication by responding to changes in the data stream but can involve complex processing. In some cases the information management system utilizes a technique for dynamically aligning deduplication blocks e.g. fixed length blocks based on changing content in the data stream as described in U.S. Pat. Pub. No. 2012 0084269 which is incorporated by reference herein.

The information management system can perform deduplication in a variety of manners at a variety of locations in the information management system . For instance in some embodiments the information management system implements target side deduplication by deduplicating data e.g. secondary copies stored in the secondary storage devices . In some such cases the media agents are generally configured to manage the deduplication process. For instance one or more of the media agents maintain a corresponding deduplication database that stores deduplication information e.g. datablock signatures . Examples of such a configuration are provided in U.S. Pat. Pub. No. 2012 0150826 which is incorporated by reference herein. Deduplication can also be performed on the source side or client side e.g. to reduce the amount of traffic between the media agents and the client computing device s and or reduce redundant data stored in the primary storage devices . Examples of such deduplication techniques are provided in U.S. Pat. Pub. No. 2012 0150818 which is incorporated by reference herein.

In some embodiments files and other data over their lifetime move from more expensive quick access storage to less expensive slower access storage. Operations associated with moving data through various tiers of storage are sometimes referred to as information lifecycle management ILM operations.

One type of ILM operation is a hierarchical storage management HSM operation. A HSM operation is generally an operation for automatically moving data between classes of storage devices such as between high cost and low cost storage devices. For instance an HSM operation may involve movement of data from primary storage devices to secondary storage devices or between tiers of secondary storage devices . With each tier the storage devices may be progressively relatively cheaper have relatively slower access restore times etc. For example movement of data between tiers may occur as data becomes less important over time.

In some embodiments an HSM operation is similar to an archive operation in that creating an HSM copy may though not always involve deleting some of the source data. For example an HSM copy may include data from primary data or a secondary copy that is larger than a given size threshold or older than a given age threshold and that is stored in a backup format.

Often and unlike some types of archive copies HSM data that is removed or aged from the source copy is replaced by a logical reference pointer or stub. The reference pointer or stub can be stored in the primary storage device to replace the deleted data in primary data or other source copy and to point to or otherwise indicate the new location in a secondary storage device .

According to one example files are generally moved between higher and lower cost storage depending on how often the files are accessed. When a user requests access to the HSM data that has been removed or migrated the information management system uses the stub to locate the data and often make recovery of the data appear transparent even though the HSM data may be stored at a location different from the remaining source data. The stub may also include some metadata associated with the corresponding data so that a file system and or application can provide some information about the data object and or a limited functionality version e.g. a preview of the data object.

An HSM copy may be stored in a format other than the native application format e.g. where the data is compressed encrypted deduplicated and or otherwise modified from the original application format . In some cases copies which involve the removal of data from source storage and the maintenance of stub or other logical reference information on source storage may be referred to generally as on line archive copies . On the other hand copies which involve the removal of data from source storage without the maintenance of stub or other logical reference information on source storage may be referred to as off line archive copies .

An auxiliary copy is generally a copy operation in which a copy is created of an existing secondary copy . For instance an initial or primary secondary copy may be generated using or otherwise be derived from primary data whereas an auxiliary copy is generated from the initial secondary copy . Auxiliary copies can be used to create additional standby copies of data and may reside on different secondary storage devices than initial secondary copies . Thus auxiliary copies can be used for recovery purposes if initial secondary copies become unavailable. Exemplary compatible auxiliary copy techniques are described in further detail in U.S. Pat. No. 8 230 195 which is incorporated by reference herein.

The information management system may also perform disaster recovery operations that make or retain disaster recovery copies often as secondary high availability disk copies. The information management system may create secondary disk copies and store the copies at disaster recovery locations using auxiliary copy or replication operations such as continuous data replication technologies. Depending on the particular data protection goals disaster recovery locations can be remote from the client computing devices and primary storage devices remote from some or all of the secondary storage devices or both.

As indicated the information management system can also be configured to implement certain data manipulation operations which according to certain embodiments are generally operations involving the processing or modification of stored data. Some data manipulation operations include content indexing operations and classification operations can be useful in leveraging the data under management to provide enhanced search and other features. Other data manipulation operations such as compression and encryption can provide data reduction and security benefits respectively.

Data manipulation operations can be different than data movement operations in that they do not necessarily involve the copying migration or other transfer of data e.g. primary data or secondary copies between different locations in the system. For instance data manipulation operations may involve processing e.g. offline processing or modification of already stored primary data and or secondary copies . However in some embodiments data manipulation operations are performed in conjunction with data movement operations. As one example the information management system may encrypt data while performing an archive operation.

In some embodiments the information management system content indexes data stored within the primary data and or secondary copies providing enhanced search capabilities for data discovery and other purposes. The content indexing can be used to identify files or other data objects having pre defined content e.g. user defined keywords or phrases metadata e.g. email metadata such as to from cc bcc attachment name received time etc. .

The information management system generally organizes and catalogues the results in a content index which may be stored within the media agent database for example. The content index can also include the storage locations of or pointer references to the indexed data in the primary data or secondary copies as appropriate. The results may also be stored in the form of a content index database or otherwise elsewhere in the information management system e.g. in the primary storage devices or in the secondary storage device . Such index data provides the storage manager or another component with an efficient mechanism for locating primary data and or secondary copies of data objects that match particular criteria.

For instance search criteria can be specified by a user through user interface of the storage manager . In some cases the information management system analyzes data and or metadata in secondary copies to create an off line content index without significantly impacting the performance of the client computing devices . Depending on the embodiment the system can also implement on line content indexing e.g. of primary data . Examples of compatible content indexing techniques are provided in U.S. Pat. No. 8 170 995 which is incorporated by reference herein.

In order to help leverage the data stored in the information management system one or more components can be configured to scan data and or associated metadata for classification purposes to populate a metabase of information. Such scanned classified data and or metadata may be included in a separate database and or on a separate storage device from primary data and or secondary copies such that metabase related operations do not significantly impact performance on other components in the information management system .

In other cases the metabase s may be stored along with primary data and or secondary copies . Files or other data objects can be associated with user specified identifiers e.g. tag entries in the media agent or other indices to facilitate searches of stored data objects. Among a number of other benefits the metabase can also allow efficient automatic identification of files or other data objects to associate with secondary copy or other information management operations e.g. in lieu of scanning an entire file system . Examples of compatible metabases and data classification operations are provided in U.S. Pat. Nos. 8 229 954 and 7 747 579 which are incorporated by reference herein.

The information management system in some cases is configured to process data e.g. files or other data objects secondary copies etc. according to an appropriate encryption algorithm e.g. Blowfish Advanced Encryption Standard AES Triple Data Encryption Standard 3 DES etc. to limit access and provide data security in the information management system .

The information management system in some cases encrypts the data at the client level such that the client computing devices e.g. the data agents encrypt the data prior to forwarding the data to other components e.g. before sending the data media agents during a secondary copy operation. In such cases the client computing device may maintain or have access to an encryption key or passphrase for decrypting the data upon restore. Encryption can also occur when creating copies of secondary copies e.g. when creating auxiliary copies. In yet further embodiments the secondary storage devices can implement built in high performance hardware encryption.

Certain embodiments leverage the integrated ubiquitous nature of the information management system to provide useful system wide management functions. As two non limiting examples the information management system can be configured to implement operations management and e discovery functions.

Operations management can generally include monitoring and managing the health and performance of information management system by without limitation performing error tracking generating granular storage performance metrics e.g. job success failure information deduplication efficiency etc. generating storage modeling and costing information and the like.

Such information can be provided to users via the user interface in a single integrated view. For instance the integrated user interface can include an option to show a virtual view of the system that graphically depicts the various components in the system using appropriate icons. The operations management functionality can facilitate planning and decision making. For example in some embodiments a user may view the status of some or all jobs as well as the status of each component of the information management system . Users may then plan and make decisions based on this data. For instance a user may view high level information regarding storage operations for the information management system such as job status component status resource status e.g. network pathways etc. and other information. The user may also drill down or use other means to obtain more detailed information regarding a particular component job or the like.

In some cases the information management system alerts a user such as a system administrator when a particular resource is unavailable or congested. For example a particular primary storage device or secondary storage device might be full or require additional capacity. Or a component may be unavailable due to hardware failure software problems or other reasons. In response the information management system may suggest solutions to such problems when they occur or provide a warning prior to occurrence . For example the storage manager may alert the user that a secondary storage device is full or otherwise congested. The storage manager may then suggest based on job and data storage information contained in its database an alternate secondary storage device .

Other types of corrective actions may include suggesting an alternate data path to a particular primary or secondary storage device or dividing data to be stored among various available primary or secondary storage devices as a load balancing measure or to otherwise optimize storage or retrieval time. Such suggestions or corrective actions may be performed automatically if desired. Further examples of some compatible operations management techniques and of interfaces providing an integrated view of an information management system are provided in U.S. Pat. No. 7 343 453 which is incorporated by reference herein. In some embodiments the storage manager implements the operations management functions described herein.

The information management system can also be configured to perform system wide e discovery operations in some embodiments. In general e discovery operations provide a unified collection and search capability for data in the system such as data stored in the secondary storage devices e.g. backups archives or other secondary copies . For example the information management system may construct and maintain a virtual repository for data stored in the information management system that is integrated across source applications different storage device types etc. According to some embodiments e discovery utilizes other techniques described herein such as data classification and or content indexing.

As indicated previously an information management policy can include a data structure or other information source that specifies a set of parameters e.g. criteria and rules associated with secondary copy or other information management operations.

One type of information management policy is a storage policy. According to certain embodiments a storage policy generally comprises a logical container that defines or includes information sufficient to determine one or more of the following items 1 what data will be associated with the storage policy 2 a destination to which the data will be stored 3 datapath information specifying how the data will be communicated to the destination 4 the type of storage operation to be performed and 5 retention information specifying how long the data will be retained at the destination.

Data associated with a storage policy can be logically organized into groups which can be referred to as sub clients . A sub client may represent static or dynamic associations of portions of a data volume. Sub clients may represent mutually exclusive portions. Thus in certain embodiments a portion of data may be given a label and the association is stored as a static entity in an index database or other storage location.

Sub clients may also be used as an effective administrative scheme of organizing data according to data type department within the enterprise storage preferences or the like. Depending on the configuration sub clients can correspond to files folders virtual machines databases etc. In one exemplary scenario an administrator may find it preferable to separate e mail data from financial data using two different sub clients.

A storage policy can define where data is stored by specifying a target or destination storage device or group of storage devices . For instance where the secondary storage device includes a group of disk libraries the storage policy may specify a particular disk library for storing the sub clients associated with the policy. As another example where the secondary storage devices include one or more tape libraries the storage policy may specify a particular tape library for storing the sub clients associated with the storage policy and may also specify a drive pool and a tape pool defining a group of tape drives and a group of tapes respectively for use in storing the sub client data.

Datapath information can also be included in the storage policy. For instance the storage policy may specify network pathways and components to utilize when moving the data to the destination storage device s . In some embodiments the storage policy specifies one or more media agents for conveying data e.g. one or more sub clients associated with the storage policy between the source e.g. one or more host client computing devices and destination e.g. a particular target secondary storage device .

A storage policy can also specify the type s of operations associated with the storage policy such as a backup archive snapshot auxiliary copy or the like. Retention information can specify how long the data will be kept depending on organizational needs e.g. a number of days months years etc. 

The information management policies may also include one or more scheduling policies specifying when and how often to perform operations. Scheduling information may specify with what frequency e.g. hourly weekly daily event based etc. or under what triggering conditions secondary copy or other information management operations will take place. Scheduling policies in some cases are associated with particular components such as particular sub clients client computing device and the like. In one configuration a separate scheduling policy is maintained for particular sub clients on a client computing device . The scheduling policy specifies that those sub clients are to be moved to secondary storage devices every hour according to storage policies associated with the respective sub clients.

When adding a new client computing device administrators can manually configure information management policies and or other settings e.g. via the user interface . However this can be an involved process resulting in delays and it may be desirable to begin data protecting operations quickly.

Thus in some embodiments the information management system automatically applies a default configuration to client computing device . As one example when a data agent s is installed on a client computing devices the installation script may register the client computing device with the storage manager which in turn applies the default configuration to the new client computing device . In this manner data protection operations can begin substantially immediately. The default configuration can include a default storage policy for example and can specify any appropriate information sufficient to begin data protection operations. This can include a type of data protection operation scheduling information a target secondary storage device data path information e.g. a particular media agent and the like.

Other types of information management policies are possible. For instance the information management policies can also include one or more audit or security policies. An audit policy is a set of preferences rules and or criteria that protect sensitive data in the information management system . For example an audit policy may define sensitive objects as files or objects that contain particular keywords e.g. confidential or privileged and or are associated with particular keywords e.g. in metadata or particular flags e.g. in metadata identifying a document or email as personal confidential etc. .

An audit policy may further specify rules for handling sensitive objects. As an example an audit policy may require that a reviewer approve the transfer of any sensitive objects to a cloud storage site and that if approval is denied for a particular sensitive object the sensitive object should be transferred to a local storage device instead. To facilitate this approval the audit policy may further specify how a secondary storage computing device or other system component should notify a reviewer that a sensitive object is slated for transfer.

In some implementations the information management policies may include one or more provisioning policies. A provisioning policy can include a set of preferences priorities rules and or criteria that specify how clients or groups thereof may utilize system resources such as available storage on cloud storage and or network bandwidth. A provisioning policy specifies for example data quotas for particular client computing devices e.g. a number of gigabytes that can be stored monthly quarterly or annually . The storage manager or other components may enforce the provisioning policy. For instance the media agents may enforce the policy when transferring data to secondary storage devices . If a client computing device exceeds a quota a budget for the client computing device or associated department is adjusted accordingly or an alert may trigger.

While the above types of information management policies have been described as separate policies one or more of these can be generally combined into a single information management policy . For instance a storage policy may also include or otherwise be associated with one or more scheduling audit or provisioning policies. Moreover while storage policies are typically associated with moving and storing data other policies may be associated with other types of information management operations. The following is a non exhaustive list of items the information management policies may specify 

Policies can additionally specify or depend on a variety of historical or current criteria that may be used to determine which rules to apply to a particular data object system component or information management operation such as 

As indicated by the dashed box the second media agent B and the tape library B are off site and may therefore be remotely located from the other components in the information management system e.g. in a different city office building etc. . In this manner information stored on the tape library B may provide protection in the event of a disaster or other failure.

The file system sub client and its associated primary data A in certain embodiments generally comprise information generated by the file system and or operating system of the client computing device and can include for example file system data e.g. regular files file tables mount points etc. operating system data e.g. registries event logs etc. and the like. The e mail sub client on the other hand and its associated primary data B include data generated by an e mail client application operating on the client computing device and can include mailbox information folder information emails attachments associated database information and the like. As described above the sub clients can be logical containers and the data included in the corresponding primary data A B may or may not be stored contiguously.

The exemplary storage policy A includes a backup copy rule set a disaster recovery copy rule set and a compliance copy rule set . The backup copy rule set specifies that it is associated with a file system sub client and an email sub client . Each of these sub clients are associated with the particular client computing device . The backup copy rule set further specifies that the backup operation will be written to the disk library A and designates a particular media agent A to convey the data to the disk library A. Finally the backup copy rule set specifies that backup copies created according to the rule set are scheduled to be generated on an hourly basis and to be retained for 30 days. In some other embodiments scheduling information is not included in the storage policy A and is instead specified by a separate scheduling policy.

The disaster recovery copy rule set is associated with the same two sub clients . However the disaster recovery copy rule set is associated with the tape library B unlike the backup copy rule set . Moreover the disaster recovery copy rule set specifies that a different media agent B than the media agent A associated with the backup copy rule set will be used to convey the data to the tape library B. As indicated disaster recovery copies created according to the rule set will be retained for 60 days and will be generated on a daily basis. Disaster recovery copies generated according to the disaster recovery copy rule set can provide protection in the event of a disaster or other data loss event that would affect the backup copy A maintained on the disk library A.

The compliance copy rule set is only associated with the email sub client and not the file system sub client . Compliance copies generated according to the compliance copy rule set will therefore not include primary data A from the file system sub client . For instance the organization may be under an obligation to store maintain copies of email data for a particular period of time e.g. 10 years to comply with state or federal regulations while similar regulations do not apply to the file system data. The compliance copy rule set is associated with the same tape library B and media agent B as the disaster recovery copy rule set although a different storage device or media agent could be used in other embodiments. Finally the compliance copy rule set specifies that copies generated under the compliance copy rule set will be retained for 10 years and will be generated on a quarterly basis.

At step the storage manager initiates a backup operation according to the backup copy rule set . For instance a scheduling service running on the storage manager accesses scheduling information from the backup copy rule set or a separate scheduling policy associated with the client computing device and initiates a backup copy operation on an hourly basis. Thus at the scheduled time slot the storage manager sends instructions to the client computing device to begin the backup operation.

At step the file system data agent A and the email data agent B residing on the client computing device respond to the instructions received from the storage manager by accessing and processing the primary data A B involved in the copy operation from the primary storage device . Because the operation is a backup copy operation the data agent s A B may format the data into a backup format or otherwise process the data.

At step the client computing device communicates the retrieved processed data to the first media agent A as directed by the storage manager according to the backup copy rule set . In some other embodiments the information management system may implement a load balancing availability based or other appropriate algorithm to select from the available set of media agents A B. Regardless of the manner the media agent A is selected the storage manager may further keep a record in the storage manager database of the association between the selected media agent A and the client computing device and or between the selected media agent A and the backup copy A.

The target media agent A receives the data from the client computing device and at step conveys the data to the disk library A to create the backup copy A again at the direction of the storage manager and according to the backup copy rule set . The secondary storage device A can be selected in other ways. For instance the media agent A may have a dedicated association with a particular secondary storage device s or the storage manager or media agent A may select from a plurality of secondary storage devices e.g. according to availability using one of the techniques described in U.S. Pat. No. 7 246 207 which is incorporated by reference herein.

The media agent A can also update its index to include data and or metadata related to the backup copy A such as information indicating where the backup copy A resides on the disk library A data and metadata for cache retrieval etc. After the 30 day retention period expires the storage manager instructs the media agent A to delete the backup copy A from the disk library A.

At step the storage manager initiates the creation of a disaster recovery copy B according to the disaster recovery copy rule set . For instance at step based on instructions received from the storage manager at step the specified media agent B retrieves the most recent backup copy A from the disk library A.

At step again at the direction of the storage manager and as specified in the disaster recovery copy rule set the media agent B uses the retrieved data to create a disaster recovery copy B on the tape library B. In some cases the disaster recovery copy B is a direct mirror copy of the backup copy A and remains in the backup format. In other embodiments the disaster recovery copy C may be generated in some other manner such as by using the primary data A B from the storage device as source data. The disaster recovery copy operation is initiated once a day and the disaster recovery copies A are deleted after 60 days.

At step the storage manager initiates the creation of a compliance copy C according to the compliance copy rule set . For instance the storage manager instructs the media agent B to create the compliance copy C on the tape library B at step as specified in the compliance copy rule set . In the example the compliance copy C is generated using the disaster recovery copy B. In other embodiments the compliance copy C is instead generated using either the primary data B corresponding to the email sub client or using the backup copy A from the disk library A as source data. As specified compliance copies C are created quarterly and are deleted after ten years.

While not shown in at some later point in time a restore operation can be initiated involving one or more of the secondary copies A B C. As one example a user may manually initiate a restore of the backup copy A by interacting with the user interface of the storage manager . The storage manager then accesses data in its index and or the respective storage policy A associated with the selected backup copy A to identify the appropriate media agent A and or secondary storage device A.

In other cases a media agent may be selected for use in the restore operation based on a load balancing algorithm an availability based algorithm or other criteria. The selected media agent A retrieves the data from the disk library A. For instance the media agent A may access its index to identify a location of the backup copy A on the disk library A or may access location information residing on the disk A itself.

When the backup copy A was recently created or accessed the media agent A accesses a cached version of the backup copy A residing in the media agent index without having to access the disk library A for some or all of the data. Once it has retrieved the backup copy A the media agent A communicates the data to the source client computing device . Upon receipt the file system data agent A and the email data agent B may unpackage e.g. restore from a backup format to the native application format the data in the backup copy A and restore the unpackaged data to the primary storage device .

The formatting and structure of secondary copies can vary depending on the embodiment. In some cases secondary copies are formatted as a series of logical data units or chunks e.g. 512 MB 1 GB 2 GB 4 GB or 8 GB chunks . This can facilitate efficient communication and writing to secondary storage devices e.g. according to resource availability. For example a single secondary copy may be written on a chunk by chunk basis to a single secondary storage device or across multiple secondary storage devices . In some cases users can select different chunk sizes e.g. to improve throughput to tape storage devices.

Generally each chunk can include a header and a payload. The payload can include files or other data units or subsets thereof included in the chunk whereas the chunk header generally includes metadata relating to the chunk some or all of which may be derived from the payload. For example during a secondary copy operation the media agent storage manager or other component may divide the associated files into chunks and generate headers for each chunk by processing the constituent files.

The headers can include a variety of information such as file identifier s volume s offset s or other information associated with the payload data items a chunk sequence number etc. Importantly in addition to being stored with the secondary copy on the secondary storage device the chunk headers can also be stored to the index of the associated media agent s and or the storage manager index . This is useful in some cases for providing faster processing of secondary copies during restores or other operations. In some cases once a chunk is successfully transferred to a secondary storage device the secondary storage device returns an indication of receipt e.g. to the media agent and or storage manager which may update their respective indexes accordingly.

During restore chunks may be processed e.g. by the media agent according to the information in the chunk header to reassemble the files. Additional information relating to chunks can be found in U.S. Pat. No. 8 156 086 which is incorporated by reference herein.

The destination client includes a data agent s and an operating system residing thereon. A device interface e.g. a pseudo device can be instantiated on the destination client for the purposes of performing a file level restore and will be described in further detail below.

The data agent can be similar or the same as the data agent described with respect to and can be configured to perform or contribute to creating and recovering restoring secondary copies of data generated by one or more applications not shown executing on the destination client . For instance as described with respect to each data agent may be specific to and handle data generated by a particular application executing on the client . For example the data agent may be configured to process data for a particular file system residing on the client . Compatible file systems include without limitations New Technology File System NTFS based file systems such as Windows e.g. Windows XP Windows 7 etc. File Allocation Table FAT based file systems the Unix file system e.g. Solaris ZFS Solaris UFS and the like Linux e.g. ext2 ext3 ext4 resierfs xfs . In some cases more than one type of file system may be installed on a particular client and the client may include a different data agent for each file system. In other cases a single data agent processes data for more than one file system.

The operating system can include one or more file system drivers . The file system drivers can correspond to one or more of the various types of file systems that may reside on the client . For instance the file system drivers can include a set of one or more NTFS drivers where an NTFS based file system resides on the client . While shown as residing within the operating system the file system drivers reside external to the operating system kernel in certain embodiments or may reside at least partially within the operating system kernel in other configurations. In cases where some or all of the data to be restored resides on a non file system device such as one or more raw devices a pseudo device will be created per raw device e.g. for each raw device . This raw device approach can be useful when restoring files or tables off a large database which resides on one or more raw devices e.g. for an Automatic Storage Management ASM capable Oracle database .

As indicated the system shown in can be used to create a block level secondary copy of file system data generated by the client and then perform a file level restore of at least a portion of the secondary copy to the client . An example of the block level copy and file level restore will now be described. In the example the destination client the client that the data is being restored to is the same client computing device that generated the file system data contained in the secondary copy which may be referred to as the source client . In other scenarios the destination client and the source client are different.

A primary copy of file system data resides in the information store associated with the client computing device . For instance as file system objects e.g. files directories mount points other metadata etc. are generated and modified by the applications and other components executing on the client device the primary copy of the file system information is updated in the information store .

The storage manager sends instructions to the client and media agent to create a secondary copy of the file system data residing in the information store . For instance the storage manager may implement a backup schedule for the client and send instructions to the client to perform a backup based on the schedule. In another case an administrator or other user manually triggers the secondary copy e.g. via a GUI or other interface.

In response to receiving the instructions the destination client and media agent together work to perform the secondary copy. For instance the data agent processes the file system data for backup and the data is communicated to the media agent . The media agent conveys the data to the secondary storage device to create the secondary copy which represents a version of the file system data at a particular first point in time and which resides in the secondary storage space .

As shown the secondary copy is a block level copy of the file system. During a block level copy the data is broken up into blocks 1 N which may be of a certain fixed size e.g. several megabytes . These blocks can be referred to as extents and can be created based on the geometry of the storage device substantially irrespective of the file system contents or properties. Each extent can include fragments of files metadata and or unused space. While not shown the file system metadata may also be stored on a block e.g. extent level basis and therefore correspond to a one or a plurality of constituent data blocks. As shown the secondary copy can begin at a position in the secondary storage device space . While shown as occupying a contiguous portion of the storage space the file system copy can occupy non contiguous space in the storage device in some other configurations.

As shown the secondary copy also includes file system metadata . The file system metadata generally describes characteristics of the file system that is represented by the secondary copy and the metadata can include without limitation the block size inode table location or other information related to inode tables a block map block group information e.g. block group size and the like. In some cases such as where the secondary copy is of a Unix based file system some or all of the file system metadata can be included in a superblock . The metadata can also describe the file system directory structure here including parent child relationships and contents of individual directories. The file system metadata is organized according to the specification of the particular file system and can be used to mount the file system to provide file level access to the underlying data as will be described further.

As shown the media agent may store a copy of the file system metadata using a cache or other storage mechanism. For instance the media agent may cache the copy of the file system metadata during the backup process.

After the secondary copy is created a request to restore the secondary copy to the destination client is received. Or a request or instruction is received to mount the secondary copy to the destination client . For instance an administrator or other user may interact with a GUI or other interface provided by the storage manager to browse to a list of one or more secondary copies associated with the client . The user selects an entry corresponding to the particular secondary copy of the file system data representing the file system of the client at the first point in time. In response the storage manager instructs the data agent on the destination client to begin the restore and or mount process.

In response to the restore and or mount instructions the data agent instantiates a device interface on the destination client . The device interface provides a mechanism for interfacing the destination client with the secondary copy of the file system data that resides on the secondary storage device . The device interface can comprise a device file or special file and may appear to the operating system as an ordinary file in the file system of the client . In such cases instantiating the pseudo device can comprise writing the device file or special file. The device interface in some embodiments allows operating system components such as the file system drivers to mount the secondary copy of the file system e.g. through the use of standard input output system calls. As indicated in the device interface can be a pseudo device such as where the operating system is a UNIX based or UNIX like operating system. The pseudo device can generally provide an interface between the file system driver and the data agent s . The file system driver requests certain file system blocks from the pseudo device and the data agent pulls the requested blocks from secondary storage . The pseudo device can also maintain a cache of previously retrieved blocks. Thus in some cases where there is a cache hit certain block requests from the file system driver are not actually forwarded to the data agent but are instead forwarded from the cache of the pseudo device to the file system driver .

As shown the device interface can include file system metadata and file data . In one embodiment the file system metadata e.g. superblock directory structure etc. and file data are stored in a cache not shown that is shared between the pseudo device and the data agent s . The cache can reside on a disk or other dedicated storage device. For instance the file system metadata may be a copy of or otherwise be derived from the file system metadata in the secondary copy that resides on the secondary storage device . While shown for the purposes of illustration as logically residing within the pseudo device the actual data forming the file system metadata may reside in the data store or may be stored in other memory associated with the client e.g. main memory . In one embodiment data agent obtains the cached copy of the file system metadata associated with the media agent and associates it with the pseudo device e.g. upon instantiation of the pseudo device . The metadata can include file names file attributes file layout information or any other type of metadata such as any of the types of metadata described herein. The pseudo device may also include or expose file data . In general the pseudo device can expose all or substantially all of the bytes included in the file system at the time of the secondary copy e.g. backup . The file data can be a copy of or otherwise be derived from the secondary copy e.g. the blocks 1 N residing in secondary storage device . While shown for the purposes of illustration as logically residing within the pseudo device the actual data forming the file system data may reside in the data store or may be stored in other memory associated with the client e.g. main memory .

After instantiating the device interface the data agent or other component instructs the operating system to mount the secondary copy of the file system using the device interface . For instance where the device interface is a device file such as a pseudo device the data agent instructs the operating system to mount the device file. The operating system then accesses the file system metadata e.g. the superblock to begin the mount process.

For instance in an example case the operating system calls a mount command and inputs to the mount command a handle for the pseudo device a temporary directory name and certain mount options. The operating system e.g. kernel opens the pseudo device and determines the appropriate file system driver . For instance the operating system accesses the superblock and based on the file system type indicated in the superblock selects the appropriate file system driver s to perform the mount. The operating system then instantiates the selected file system driver on top of the pseudo device or otherwise calls the file system driver and passes the mount request to the file system driver . The file system driver analyzes the contents of the pseudo device by reading the appropriate blocks according to the underlying file system specification e.g. by first reading the superblock which is stored in a pre determined known location and then requesting additional blocks depending on the contents of the superblock and the structure of the file system. The additional blocks may generally comprise blocks sufficient to retrieve one or more inode tables and a root directory inode for example.

As indicated the superblock can include an identifier that indicates a file system type for the file system represented by the secondary copy . As an example the file system type may be NTFS and the operating system invokes the NTFS drivers to execute the mount. The NTFS driver s begins to process the superblock. In certain embodiments the file system metadata includes information sufficient for the NTFS driver to construct the file system hierarchy. Thus the NTFS driver processes the superblock to create a mounted view of the hierarchy of the version of the NTFS file system represented by the secondary copy . The mounted view can then be displayed to the user. For instance the view can be presented to the user on a GUI or other interface provided by the storage manager .

In general the pseudo device driver receives the read requests from the file system driver and checks its cache to determine whether or not the requested block is already stored in the cache. If so it accesses the block from the cache and forwards the accessed block to the file system driver to satisfy the request. If the requested block is not in the cache the pseudo device driver forwards the request to the data agent for retrieval from the media agent . In some embodiments the media agent serves blocks having a certain pre determined e.g. fixed relatively large size e.g. extents of 2 3 4 5 10 or more megabytes to the data agent . On the other hand the block requests coming from the file system driver are for relatively small blocks e.g. between 1 and 10 kilobytes less than 10 kilobytes less than 100 kilobytes or less than 1 megabyte . As a result the cache shared by the pseudo device driver and the data agent can fill up rather quickly because the data agent is receiving rather large amounts of data in response to requests from the file system driver for relatively small amounts of data. The initial mount process is intended to create a mounted view of the file system which generally only involves accessing and processing file system metadata not file data . However as indicated the media agent will forward extent level data to the data agent and each extent can include both file data and file system metadata . Thus it is likely that file data will be forwarded to the data agent during the mount process along with the requested file system metadata . For instance file level data although not specifically requested by the file system driver may be included in an extent forwarded by the media agent that includes requested file system metadata .

Through the use of the pseudo device the system advantageously exploits the existing NTFS driver to interpret the file system metadata and create the mounted view of the file system hierarchy. Otherwise customized code may be required for each supported file system type and or version in order to properly process the file system metadata according to the specification of the particular type of file system.

Once the file system represented by the secondary copy is mounted on the destination client and viewable to the user the user can select a subset e.g. one or more files or directories of the file system to restore to the destination client . In the example scenario the user selects FILE A and FILE B to restore. In response a restore application or module running on the destination client or another appropriate component such as one of the data agents may use a standard I O system call to request the mounted files. The file system driver in turn requests any missing blocks for the requested files from the pseudo device which either 1 satisfies the requests from its cache or 2 for requests which do not produce a cache hit forwards the request to the data agent for delivery to the media agent . In certain embodiments the request sent from the pseudo device to the data agent is at the extent level and is thus for the extent s including requested data block s not the for the individual data blocks requested by the file system driver . The media agent in turn accesses the extent s including the appropriate data blocks from the secondary storage device and returns the extent s to the data agent via the restore data pipeline. The system maintains a mapping that maps the extents in the recovered file system to the actual physical locations of the extents on the secondary storage device . For instance the mapping may reside on the media agent in some cases. In such cases the pseudo device communicates logical identifiers for the requested extents to the media agent and the media agent accesses a stored mapping to identify the physical locations on the secondary storage device at which the extents or other types of data blocks reside. In an alternative embodiment the pseudo device maintains such a mapping. In this case the pseudo device receives block requests from the file system driver s including logical data block identifiers. The pseudo device uses the mapping to translate the logical identifiers to physical data block locations on the secondary storage device and communicates the physical data block locations to the media agent . The pseudo device passes the data blocks along to the file NTFS system driver s and the files are eventually reconstructed and restored to the information store . In some cases the files are copied to a temporary mount point and are then copied to the information store or to another selected location.

At block the routine receives a request to perform a file level restore of a block level secondary copy stored in one or more secondary storage devices . For instance a user may interact with a GUI hosted by the storage manager or another component to select the block level secondary copy by clicking on an icon representing the secondary copy for example. In response the storage manager sends a request or instructions to the data agent residing on the destination client to mount the secondary copy .

At block in response to receiving the request to mount the secondary copy the data agent instantiates a device interface on the destination client . The device interface provides a mechanism for the operating system to mount and access the secondary copy . For instance as described above the device interface may be a pseudo device device file special file combination of the same or the like. The pseudo device can also include file system metadata such as a superblock associated with the file system represented by the secondary copy .

The data agent instructs the operating system to use the device interface to mount the secondary copy at step . For instance where the device interface comprises a pseudo device the data agent instructs the operating system to mount the pseudo device . The operating system mounts the pseudo device by accessing and beginning to process the file system metadata embedded in or obtainable via the device interface . For instance the metadata may include information identifying the type of file system represented by the secondary copy and the operating system selects an appropriate file system driver s to perform the mounting based on the file system type. The selected file system driver s continues to process the file system metadata to construct a navigable view of the file system which can be displayed to the user.

The user may then navigate the view of the mounted file system represented by the secondary copy and selects one or more files to restore from the secondary copy . A restore application or other module executing on the destination client copies the selected files e.g. via standard operating system I O calls. As part of this process the file system driver s process the file system metadata to identify data blocks corresponding to the requested files and requests the data blocks via the device interface . At block the device interface and media agent service the block requests. For instance the device interface communicates the data block requests e.g. for extents including desired data blocks to the media agent via the data agent which accesses the requested data blocks e.g. extents from the secondary storage device . The media agent returns the accessed data blocks e.g. extents to the data agent which stores them in a cache stored with the device interface . The data agent can also indicate to the pseudo device that the requested extent has been successfully obtained and the pseudo device in turn forwards it along to the file system driver s . The file system driver s and or another component reconstitute the requested file s using the received data blocks and at block the file s are restored to primary storage. For instance the recovered files are stored in the information store .

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out all together e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Systems and modules described herein may comprise software firmware hardware or any combination s of software firmware or hardware suitable for the purposes described herein. Software and other modules may reside on servers workstations personal computers computerized tablets PDAs and other devices suitable for the purposes described herein. Software and other modules may be accessible via local memory via a network via a browser or via other means suitable for the purposes described herein. Data structures described herein may comprise computer files variables programming arrays programming structures or any electronic information storage schemes or methods or any combinations thereof suitable for the purposes described herein. User interface elements described herein may comprise elements from graphical user interfaces command line interfaces and other suitable interfaces.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. Various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Embodiments are also described above with reference to flow chart illustrations and or block diagrams of methods apparatus systems and computer program products. Each block of the flow chart illustrations and or block diagrams and combinations of blocks in the flow chart illustrations and or block diagrams may be implemented by computer program instructions. Such instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified in the flow chart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified in the flow chart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operations to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the acts specified in the flow chart and or block diagram block or blocks.

While certain embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the described methods and systems may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

