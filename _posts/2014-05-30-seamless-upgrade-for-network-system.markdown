---

title: Seamless upgrade for network system
abstract: In one embodiment, a network system may be upgraded without losing access to write privileges to a network file  during the system upgrade. A network file management system  may execute a system upgrade. A network file management system  may provide direct write access for a data file  to a user throughout the system upgrade.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430668&OS=09430668&RS=09430668
owner: Microsoft Technology Licensing, LLC
number: 09430668
owner_city: Redmond
owner_country: US
publication_date: 20140530
---
A network file management system may store a data file accessible by multiple users via a data network. The data file may be a multi share data file accessible to be edited by multiple users. The network file management system may track any changes made to the data file by a user. Further the network file management system may perform any conflict resolution to alleviate conflicting edits performed by multiple users.

To upgrade a network system the network system may be transferred from a source server space to a target server space. During this system upgrade the user may be blocked from making any changes to any data stored on the network system to prevent having to add file changes to the target server space. A user may be alerted to the specific downtime window during the system upgrade so that the user may plan accordingly.

This Summary is provided to introduce a selection of concepts in a simplified form that is further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Embodiments discussed below relate to upgrading a network system without losing access to write privileges to a network file during the system upgrade. A network file management system may execute a system upgrade. A network file management system may provide direct write access for a data file to a user throughout the system upgrade.

Embodiments are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the subject matter of this disclosure. The implementations may be a machine implemented method a tangible machine readable medium having a set of instructions detailing a method stored thereon for at least one processor or a network file management system.

During a system upgrade a user may be prevented from editing a document or web page stored on a network file management system. The user may not execute a write operation during the time window of the system upgrade. While the maintenance window may be shortened and scheduled the user may be still be inconvenienced.

To allow consistent access to any stored data files the network file management system may control the flow of access requests using network frontend clusters running on different version of binaries by directing the user requests to the same content database acting as backend storage. The network file management system may direct the access requests to a user proxy account operating with whichever configuration is appropriate. The network file management system may use management proxy accounts to restrict write access to the content database when shared among multiple frontend clusters.

The source frontend for the network file management system may receive an access request from a client device. A load balancer of the network file management system may direct the access request to a source user proxy account. The network file management system may direct an access request from the source server farm of the network file management system to a source management proxy account. The content database may be connected to the source server farm with both source user proxy account and the source management proxy account having access. A grid manager of the network file management system may remove write access from the source management proxy account which eliminate changes from background access requests.

The network file management system may grant any target user proxy account and target management proxy accounts full access to the content database. The source server farm and the target server farm may share access to the content database. The load balancer may redirect any access requests from the client device to a target user proxy account executing on a virtual machine operated by the target server farm seamlessly granting access. Once the content database is connected to the target server farm access requests initiated from the target server farm assume control of background operations. The grid manager may disconnect the source server farm from the content database to finish the system upgrade.

Thus in one embodiment a network system may be upgraded without losing access to write privileges to a network file during the system upgrade. A network file management system may maintain a content database separate from a source server farm configuration database that stores source configuration data. A network file management system may execute a system upgrade from the source server farm configuration database to a target server farm configuration database that stores target configuration data. A network file management system may process an access request to a data file on the content database during the system upgrade.

The network file management client may allow a user to perform a read operation or a write operation on the data file over a network. A read operation sends a copy of the data stored in the data file to the client device . A write operation creates or deletes a data file or enters changes to the data file as stored in the network file management system .

The processor may include at least one conventional processor or microprocessor that interprets and executes a set of instructions. The memory may be a random access memory RAM or another type of dynamic data storage that stores information and instructions for execution by the processor . The memory may also store temporary variables or other intermediate information used during execution of instructions by the processor . The data storage may include a conventional ROM device or another type of static data storage that stores static information and instructions for the processor . The data storage may include any type of tangible machine readable medium such as for example magnetic or optical recording media such as a digital video disk and its corresponding drive. A tangible machine readable medium is a physical medium storing machine readable code or instructions as opposed to an ephemeral medium such as a signal. Having instructions stored on computer readable media as described herein is distinguishable from having instructions propagated or transmitted as the propagation transfers the instructions versus stores the instructions such as can occur with a computer readable medium having instructions stored thereon. Therefore unless otherwise noted references to computer readable media medium having instructions stored thereon in this or an analogous form references tangible media on which data may be stored or retained. The data storage may store a set of instructions detailing a method that when executed by one or more processors cause the one or more processors to perform the method.

The database interface may connect to a database storing content such as a data file or a database storing configuration data for the network file management system . The computing device may have a content database interface to interact with a content database and a server farm configuration database interface to interact with a server farm configuration database. The computing device may have a database interface act as both a content database interface and a server farm configuration database interface .

The input output device may include one or more conventional mechanisms that permit a user to input information to the computing device such as a keyboard a mouse a voice recognition device a microphone a headset a gesture recognition device a touch screen etc. The input output device may include one or more conventional mechanisms that output information to the user including a display a printer one or more speakers a headset or a medium such as a memory or a magnetic or optical disk and a corresponding disk drive. The communication interface may include any transceiver like mechanism that enables computing device to communicate with other devices or networks. The communication interface may include a network interface or a transceiver interface. The communication interface may be a wireless wired or optical interface. The communication interface may act as a database interface .

The computing device may perform such functions in response to processor executing sequences of instructions contained in a computer readable medium such as for example the memory a magnetic disk or an optical disk. Such instructions may be read into the memory from another computer readable medium such as the data storage or via the database interface or from a separate device via the communication interface .

In a system upgrade a source server farm configuration database may store source configuration data manage the data files in the content database . The network file management system may have a target server farm configuration database containing the source configuration data with updates and patches applied to create target configuration data. The network file management system may dual mount the content database to the source server farm configuration database and the target server farm configuration database . The network file management system may have a source server farm configuration database interface to interact with a source server farm configuration database or a target server farm configuration database interface to interact with a target server farm configuration database . Alternately the network file management system may have a server farm configuration database interface to act as both a source server farm configuration database interface and a target server farm configuration database interface .

The network file management system may have a grid manager . The grid manager may implement various grid jobs and internal administration jobs. The grid manager may administer a set of source grid jobs from the source server farm. The grid manager may administer a set of target grid jobs from the target server farm.

A processor of the network file management system may execute a virtual machine VM to operate a proxy account to handle access requests to the content database using configuration data from the server farm configuration database. The virtual machine may use a user proxy account UPA to handle access requests from the client device such as read operations write operations worker processes and web service application pool operations. The virtual machine may use a management proxy account MPA to handle access requests from a server farm such as read operations write operations farm operations and timer operations.

A source virtual machine may use source configuration data to access the content database . The source virtual machine may operate a source user proxy account to handle access requests from a client device and a source management proxy account to handle access requests from the source server farm. A target virtual machine may use target configuration data to access the content database . The target virtual machine may operate a target user proxy account to handle access requests from a client device and a target management proxy account to handle access requests from the target server farm.

During the system upgrade a load balancer may receive access requests from the client device . Prior to a changeover point the load balancer may direct an access request to a source user proxy account in the source virtual machine to process allowing the client device to execute a read operation or a write operation on the data file . A changeover point occurs when the network file management system removes a write access to the data files from the source management proxy account and the source grid jobs . After the changeover point the load balancer redirects the access requests to a target user proxy account in the target virtual machine to process. Once the system upgrade is complete the source server farm configuration database may be dis mounted from the content database .

The network file management system may use one or more different software architectures to implement the system upgrade. For example illustrates in a block diagram one embodiment of a system upgrade software architecture . The grid manager may establish a remote session with a provider host executing on one of the virtual machines. A provider host loads a provider into a shared host process that has a specified level of privilege. The provider host may have a post script library PS LIB to ensure that an upgrade module is loaded. The post script library may retrieve practical data such as grid objects for use by the upgrade module . The upgrade module may handle the permission switching mounting and dismounting of the databases using lightweight commands and a data capture application programming interface DCAPI to update data. The upgrade module may establish a structured query language connection with a server farm to mount and dismount the source server farm configuration database and the target server farm configuration database .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms for implementing the claims.

Embodiments within the scope of the present invention may also include computer readable storage media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable storage media may be any available media that can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable storage media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic data storages or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions or data structures. Combinations of the above should also be included within the scope of the computer readable storage media.

Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs objects components and data structures etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Although the above description may contain specific details they should not be construed as limiting the claims in any way. Other configurations of the described embodiments are part of the scope of the disclosure. For example the principles of the disclosure may be applied to each individual user where each user may individually deploy such a system. This enables each user to utilize the benefits of the disclosure even if any one of a large number of possible applications do not use the functionality described herein. Multiple instances of electronic devices each may process the content in various possible ways. Implementations are not necessarily in one system used by all end users. Accordingly the appended claims and their legal equivalents should only define the invention rather than any specific examples given.

