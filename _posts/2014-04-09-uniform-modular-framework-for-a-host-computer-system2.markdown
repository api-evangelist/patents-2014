---

title: Uniform modular framework for a host computer system
abstract: A security framework for a host computer system which allows a host to control access to a compliant security token by ensuring enforcement of established security policies administered by a middleware application. Processing between the host computer system and the security token is performed using one or more modular security application agents. The modular security application agents are counterpart applications to security applications installed in the security token and may be retrieved and installed upon to ensure compatibility between counterpart token and host security applications. The security policies are a composite of host security policies and token security policies which are logically combined by the middleware application at the beginning of a session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09576111&OS=09576111&RS=09576111
owner: Assa Abloy AB
number: 09576111
owner_city: Stockholm
owner_country: SE
publication_date: 20140409
---
This application is a continuation of U.S. application Ser. No. 12 932 499 filed Feb. 25 2011 pending which is a continuation of U.S. application Ser. No. 11 939 444 filed Nov. 13 2007 now U.S. Pat. No. 7 921 298 which is a continuation of U.S. application Ser. No. 10 425 028 filed Apr. 29 2003 which are all incorporated herein by reference.

The present invention relates generally to a data processing system method and computer program product and more specifically to a uniform security application framework for a host computer system in communication with a security token.

In the relevant art host applications for supporting authentication and secure messaging functions involving the use of security tokens lack a uniform programming framework which has largely resulted in development of proprietary applications. The proprietary nature of these applications limits the ability to provide a uniform approach in the development and implementation of security applications. Vendors prefer to provide end to end solutions which generally work well with there own applications but are difficult to configure and maintain when combined with software and or firmware provided by others.

Efforts to address interoperability of host security applications have focused primarily on resolving specific compatibility issues rather than providing a uniform programming framework in which to develop security applications. Little effort has been made to provide a standardized framework for a host computer system which allows applications developed by different providers to be installed without encountering interoperability issues. To date the majority of attention has been focused on developing customized security token applications rather than on the host applications intended to interface with the security token applications.

For example one vendor may excel at providing user authentication mechanisms using dynamic passwords while another may excel at providing certain types of biometric authentication mechanisms such as fingerprint reading while another may excel at providing biometric iris scanning mechanisms.

However in the relevant art it is generally difficult to mix vendor products due to compatibility issues and the non modular nature of security applications deployed. While efforts have been made to standardize certain portions of the host security applications the majority of host security applications available today intend to provide the entire solution rather than allowing a potential customer to pick and choose the most cost effective application s to meet a particular security requirement. The vendor s host security applications are specifically written to interface with the vendor s security token applications. Compatibility with other vendor products being of secondary importance.

Therefore what is needed is a uniform host applications framework for deployment on a host computer system which allows interoperability of host security applications allows modularization of host security applications and interfaces with security tokens having a compatible internal framework.

This invention addresses the limitations described above and provides a uniform applications framework for host computers which supports modular host security application installations and allows independent operations of applications installed in the security token. In particular proprietary biometric applications such as match on card technologies are decoupled from other host middleware applications and from the applications installed in the security token.

The term security token as defined herein refers to hardware based security devices such as security tokens integrated circuit tokens subscriber identification modules SIM wireless identification modules WIM USB token dongles identification tokens secure application modules SAM hardware security modules HSM secure multi media token SMMC Trusted Computer Platform Alliance chip TCPA and like devices. Temporary virtual security tokens are included as well.

The term credential as defined herein refers to critical security parameters CSP such as authentication data passwords PINs biometric templates secret and private cryptographic keys and challenge response messages or combinations thereof.

The term parameter as defined herein refers to a status flag text a number arguments or an argument name assigned to a value that is passed from one routine to another or used as a means of customizing program operation which is broader than its normal context.

The invention comprises a system which provides a uniform security applications framework for a host computer system which cooperates with one or more compliant security tokens. The compliant security token s is in processing communications with the host computer system and includes a compatible uniform security framework which interfaces with the host security framework a set of token security policies and one or more token security applications.

The host computer system includes a token access control application token selection policies and several security application agents which are counterparts to the token security application s . A set of host security policies associated with each of the security application agents is retrievably coupled to the token access control application.

The token access control application allows the retrieval of at least a portion of the token security policies from which a composite set of security policies is generated by logically combining the host security policies token selection policies and the token security policies.

If the token access control application determines that a required security application agent and or token security application is not present the required applications may be downloaded and operatively installed from either a local or a remote storage location as individual modules without disruption of existing dependencies.

In one embodiment of the invention ensuring enforcement of the composite set of security policies is performed by the token access control application. In this embodiment of the invention the token access control application further includes the ability to receive a credential cause at least one of the security application agents to execute in response to an access request and the ability to send a credential to the appropriate security application agent.

In a second embodiment of the invention ensuring enforcement of the composite security policies is performed by the applicable security application agents which receive the composite security policy from the token access control application. In this embodiment of the invention a hierarchy exists between security application agents which causes the required security application agents to execute sequentially in accordance with the applicable portion of the composite set of security policies. In this embodiment of the invention credentials are sent directly to the appropriate security application agent.

In yet another embodiment of the invention the responsibility for ensuring enforcement of the composite set of security policies is performed by a calling application. In this embodiment of the invention the token access control application generates the composite security policies and forwards them to a calling application. The calling application then sequentially causes the required security application agents to execute sequentially in accordance with the applicable portion of the composite set of security policies. In this embodiment of the invention credentials are forwarded to the appropriate security application agent by the calling application.

In all embodiments of the invention the security application agents include the ability to perform a security function with one or more counterpart token security applications in accordance with the composite set of security policies and return objects in which a security function is performed by a token application. The security application agents may exist as separate applications dynamically linked libraries associated with the token access control application or any combination thereof.

In another embodiment of the invention the composite set of security policies includes token access control rules host access control rules token selection rules and composite access control rules but lacks a registry. In this embodiment of the invention an operating system installed on the host administers the security application agents.

In yet another embodiment of the invention a local registry is included which is administered by the token access control application. The local registry is comprised of enablement flags and operational states related to authentication secure messaging and application enablement. Each available application requires a corresponding entry in the registry including registered token security applications and registered security agent applications.

The token security applications includes a token security domain control application a token services application a token administrative services application and a token security services application. The token security services application includes the ability to perform authentication and secure messaging. The token services application includes the ability to perform cryptography return objects in which a security function was performed to a security agent application. The object includes a credential a digital certificate data to undergo a cryptographic function or data to be stored in said security token.

e. combining the token security policies the host security policies and the token selection policies into a composite security policy 

h. sending the credential to an appropriate security application agent if required by the composite security policy 

i. sending the credential to an appropriate token security application if required by the composite security policy and

iv verifying that at least one counterpart pair of a token security application and host security application agent are operatively installed and

v retrieving and operatively installing a missing component of the counterpart pair from either a local or a remote storage location.

The invention also provides for retrieval of compatibility information related to one or more counterpart security application agents from a functionally connected security token by at least one security application installed on a host computer system wherein the retrievable capability information relates to compatibility between the one or more counterpart security application agents and the one or more token security applications. The at least one security application includes functionality for 

retrieving the compatibility information related to the one or more counterpart security application agents 

verifying that at least one compatible counterpart security application agent is operatively installed and if not retrieving and operatively installing at least one compatible counterpart security application agent.

The at least one security application includes either a security application installed in a middleware services layer or is a token access control application retrieved from either a local or remote storage location.

Installation of the retrieved at least one compatible counterpart security application agent is accomplished by entering one or more parameters associated with the at least one compatible counterpart security application agent in a registry.

The at least one compatible counterpart security application agent is a modular software application which can be added removed or replaced without disruption of any existing dependencies by changing the one or more parameters in entered in the registry.

The retrieval of compatibility information related to one or more counterpart security application agents from a functionally connected security token by at least one security application installed on a host computer system is accomplished by performing the steps of 

a. retrieving compatibility information related to one or more counterpart security application agents from a security token 

b. verifying that at least one compatible counterpart security application agent is operatively installed on a host computer system and if not 

d. performing a signature verification process and allowing installation if successful or aborting the installation if unsuccessful 

e. operatively installing said at least one compatible counterpart security application agent on said host computer system and

f. entering one or parameters associated with said at least one compatible counterpart security application agent into a registry.

The programs and data may be placed onto transportable medium such as a CD ROM floppy disk data tape portable hard disk flash memory device or DVD for installing on a host computer system.

This present invention provides a uniform host application framework which separates authentication and secure messaging functions into modular security applications allows interoperability of host security applications and interfaces with security tokens having a compatible internal framework. The invention further allows selection of individual security tokens to perform selected security tasks administered by token selection policies.

The invention has the added features of providing a more uniform security application programming interface which improves overall interoperability of security applications simplifies security application development and provides application level management and enforcement of security policies. The applications are envisioned to be programmed using high level programming languages such as Java Visual Basic C or C.

Referring to a typical host computer system is shown which includes a processor a main memory a display electromagnetically coupled to a display interface a secondary memory subsystem electromagnetically coupled to a hard disk drive a removable storage drive electromagnetically coupled to a removable storage unit and an auxiliary removable storage interface electromagnetically coupled to an auxiliary removable storage unit .

A communications interface subsystem is coupled to a network interface and a network a security token interface and a security token a user input interface including a mouse and a keyboard a biometric scanner interface and a biometric scanner .

The processor main memory display interface secondary memory subsystem and communications interface system are electromagnetically coupled to a communications infrastructure . The host computer system includes an operating system a token access control application TACA and associated middleware security agent application agents one or more applications requiring security services from a security token cryptography software capable of performing symmetric and asymmetric cryptographic functions secure messaging software and device interface software. Data necessary to support the security functions should be assumed to be present as well.

The security token includes a wireless and or electrical connection means compatible with the security token interface a processor volatile and non volatile memory electromagnetically coupled to the processor a runtime operating environment cryptography extensions incorporated into the operating system and capable of performing symmetric and asymmetric cryptographic functions compatible with the host cryptography software a security domain access control application SDCA and associated security applications one or more credential protected applications functionally coupled to the security executive application and a public key infrastructure PKI key pair functionally coupled to the security executive application. Data necessary to support the security functions should be assumed to be present as well. The non volatile memory has operatively stored therein one or more reference credentials which are verified by the security applications to allow access to the one or more credential protected applications.

The cryptographic services layer allows access to host cryptographic resources and acts as a gateway to a middleware services layer . The middleware services layer routes requests for token services sent by the host applications to a token access control application TACA . The middleware services layer is intended to provide a consistent and modular application interface between the security applications and the token access control application TACA and in an alternate embodiment of the invention maintains security application agent module consistency with their counterpart security applications installed inside the security token .

The TACA is associated with a set of token security policies that controls which security token will perform a specific type of security transaction when a plurality of security tokens are available to perform the transaction.

The TACA is also associated with a set of host security policies which controls a security function of one or more security application agents and in one embodiment of the invention maintains security application agent module consistency with their counterpart security applications installed inside the security token .

The security application agents may exist as separate applications dynamically linked libraries associated with the token access control application or any combination thereof. Both the security application agents and token security applications are modular in nature and may be retrieved locally if available on a local hard drive or downloaded from a centralized repository and dynamically installed without disruption of existing dependencies which is a central concept of the uniform modular framework. The uniform modular framework being comprised of the API layer cryptographic services layer middleware services layer token access control application token messaging layer token runtime operating environment and security domain control application .

In one embodiment of the invention the TACA ensures enforcement of the security policies. In another embodiment of the invention the appropriate security application agents receives the security policies from the TACA and self enforces the security policies. In a third embodiment of the invention the TACA sends the security policies to the requesting application which ensures enforcement of the security policies.

The security application agents are designed to perform a security function in conjunction with their counterpart security applications installed in the security token . The security application agents functionally decouples security applications installed on the host from those applications installed in the security token allowing greater interoperability between host applications and security token applications and is part of the modular plug in architecture.

This allows the security application agents and their counterpart token security applications to act in concert with a middleware security application but functionally independent from the middleware security application.

A typical arrangement of security application agents includes a PIN agent a biometric agent a secure messaging agent and a public key cryptography agent . Additional agents may be installed to perform other functions as is shown by the other agent . In another embodiment of the invention administrative control of the security application agents remains with the operating system installed on the host. A token messaging layer provides communications protocol conversion into ISO 7816 compliant application protocol data unit APDU format. Addressing of the counterpart token security applications may be accomplished explicitly using traditional APDU messaging or implicitly by remote method invocation RMI both of which are supported by the JCRE version 2.2. The Java Card 2.2 Runtime Environment JCRE Specification is included as a reference to this specification.

A security token includes a security domain control application SDCA coupled to a runtime operating environment and a set of token security policies . The token security policies control a security function associated with a PIN application a biometric application a secure messaging application a PKI cryptography application and an additional application . The token security applications each includes information which is used by the middleware services layer to determine if the proper counterpart security application agent s is installed.

This information is transferred along with the token security policies and is used by the middleware services layer for security application agent version control and security application agent module loading. The operation of the token security applications and SDCA is described in co pending U.S. application Ser. No. 10 321 624 to Eric Le Saint al. entitled Uniform Framework for Security Tokens and filed on Dec. 18 2002

Referring to an embodiment of the invention is shown where several security tokens are available to perform one or more security transactions. The security tokens include a traditional smart card A a Trusted Computer Platform Alliance TPCA chip B a local virtual security C a remote virtual security D a remote TPCA chip E or a hardware security module HSM F. The token access control application TACA selects the appropriate security token in which to process a security transaction based on criteria included in the Token Policies . One or more of the security tokens may be employed to complete a security transactions.

For instance authentication may be performed using a local virtual security token C installed in the host and a remote virtual security token D installed in a remote server connected by a network may be used to establish secure messaging.

Referring to if upon generating a composite security policy the TACA or middleware services layer determines that a required security application agent either not present or incompatible with a token security application the application agent may be securely retrieved from a local storage location or the application may be downloaded a remote storage location and installed in the applicable location s . Upon installation the new application is registered in either a registry table maintained by the host operating system or a separate registry table maintained by the TACA described below. An optional code authentication may be performed by comparing digital signatures before installation and registration is performed.

In a relationship between the TACA host security policies and token security policies is provided. In one embodiment of the invention the composite security policies C include a set of logic based host access control rules a set of logic based token access control rules and a composite set of access control rules derived from the logical combination of the host access control rules and the token access control rules . The composite security policies C may be stored locally on the host or stored remotely on a security server and retrieved by the host TACA . In an alternate embodiment of the invention a local registry shown in dashed lines is included.

The local registry is administered by the TACA and provides additional administrative controls over the security application agents. The token policies are likewise based on logic based rules and may be stored locally on the host or stored remotely on a security server and retrieved by the host TACA as well. In the embodiment of the invention including a registry entries are included to designate which security token s are to perform specific security transactions.

Referring to the embodiment including a local registry administered by the TACA is depicted. The local registry is comprised of a set of unique identifiers Host App D for the available security application agents and a set of security type Type indicators for the security application agents.

The security type divides the security application agents into two broad categories including security services SS such as authentication and secure messaging and token services TS such as signing and secure storage of information. The local registry may either be stored on the host computer system or retrieved from a remote source for example a server.

A set of enablement status flags Enabled is provided which allows for administrative control over the security application agents. Activation and inactivation of the security application agents is accomplished by changing the status flag value. In this example 1 indicates an active state while a 0 would indicate an inactive state.

Another set of unique identifiers Host ID is included for the host access control rules. These entries provide a relational link to a table or equivalent data structure which includes the specific access control rule identified in the registry. A set of security application agent versions are retained inside the registry and checked by either the TACA or middleware services layer shown in to ensure that the proper version of the security application agent is operatively installed. If the required version is not present it may be retrieved and installed as described above in . Upon installation the required entries are included in the registry. The registry table is part of the modular framework which allows changes to available security application agents without disruption of existing dependencies.

A list of available tokens is provided and updated by the TACA. A counterpart set of unique token application identifiers Token App ID is provided for available security applications installed in one or more available security tokens. The security token entries included in the registry are obtained either by directing a request to a specific security token or returned automatically by the token messaging layer shown in .

A set of unique identifiers Token. ID is likewise provided for the token access control rules. These entries are retrieved from the security policies included in a security token by the security domain control application SDCA shown in . A set of enablement status flags Enabled is provided which accomplishes the same administrative functions for the token security applications as described above for the security application agents.

Another set of unique identifiers Token Rule is provided for the token selection rules. These entries may be administratively defined or determined using information received from the token interface layer shown in .

A set of unique identifiers codes Cred ID is provided for the credentials required by one or more active security tokens. In this example P refers to PIN while B refers to biometric type credentials. These codes are referred to by the access control rules to specify which credential is required for a specific transaction. To simplify administration an additional set of credential type indicators Type is provided for each credential type.

A set of authentication states State associated with each of the credentials is provided. The authentication states are checked by the TACA during enforcement of a required security policy. In this example a value of 0 indicates that no successful authentication has occurred within the current session for the particular credential.

A value of 1 indicates that a successful authentication has occurred within the current session for the particular credential. A set of enablement status flags Enabled is provided for each credential which accomplishes the same administrative functions as described above.

A set of unique cryptographic key codes Key ID for each cryptographic key included in the active security tokens is provided. These codes are referred to by the access control rules to specify which key is to be used in a specific transaction. To simplify administration an additional set of key type indicators Key is provided. In this example PKI refers to a public key infrastructure key while XAUT refers to a symmetric type key.

A set of secure messaging session flags State associated with each of the cryptographic keys is provided. The session states are checked by the TACA during enforcement of a required security policy. In this example a value of 0 indicates that no active session has been established during the current session. A value of 1 indicates that an active session is established during the current session using a particular cryptographic key. A set of enablement status flags Enabled is provided for each cryptographic key which accomplishes the same administrative functions as described above.

The secure messaging session state and secure messaging application enablement flag are automatically transferred from the SDCA to the TACA upon insertion of the security token into a hardware interface with the host upon a first attempted access of the security token or provided automatically from the token interface layer shown in Once the necessary information is retrieved the token access control application TACA verifies the state and enablement status locally rather than retrieving the security parameters from the associated security token.

This limits the amount of data sent to and from the security token s thus improving performance. Overall system security remains unaffected as a change in a security state in the local registry does not necessarily reflect the controlling security state of the security token.

Rule AC02 translates to use authentication application AM0 which requires a biometric input BIO1 or use authentication application AM1 which requires a credential PIN2 and a secure messaging session using secure messaging application with cryptographic key PKI1.

Combined rule CAC02 was generated by the TACA from the logical combination of host access control rule HAC00 with token access control rule AC02 and translates to use authentication application AM0 with biometric input BIO1 and receive a right index finger RIF input and establish a secure messaging session using secure messaging application SM2 using cryptographic key PKI1. As an alternative use authentication application AM1 and receive a PIN having a length of eight characters and establish a secure messaging session using secure messaging application SM1 using cryptographic key PKI1.

The composite access control may then be combined with the token selection rule TK2 which requires a first use of token1 if available otherwise use token2. In all cases where token selection rules token access control rules and host access control rules address a specific security requirement the most restrictive rule is adopted for the composite access control rule.

The token security policies are returned to the TACA and logically combined with the host security policies resulting in a set of composite security policies C. In an alternate embodiment of the invention information related to the required counterpart security application agents is returned as well for verification and if necessary installation. The TACA applies the composite security policies for signing the object . Depending on the embodiment of the invention registry embodiment the security parameters associated with the security token may be passed as well to the TACA. The operation of one embodiment of the invention is shown by way of example.

Referring back to. a composite security policy CAC02 requires a user to authenticate using token authentication application AM1 by entry of a personal identification number PIN having a pin length of 8 characters and establishment of a secure messaging session using token application SM1 before allowing access to the token signing application PKI .

The applicable portion of the composite security policy implemented is CAC02 AM1 PIN2 AND PIN LN 8 AND SM1 PKI1 and token selection rule TK2 requires a first use of TOKEN1 if available otherwise use TOKEN2.

Referring back to the requirements of the composite security policy CAC02 token selection rule TK2 and the required local security states must be verified by the TACA before a security function is allowed using a designated security token. The TACA verifies that the required enablement status flags are set to true 1 for the required host application agents Enabled verifies that the required enablement status flags are set to true 1 for the token security applications Enabled verifies that the required enablement status flags are set to true 1 for the credentials Enabled and verifies that the required enablement status flags are set to true 1 for the cryptographic keys Enabled .

If any of the required enablement flags are not set to the proper value an error is returned and processing ends. The TACA also checks the flag for the current authentication state State and session state flag for secure messaging Session State . If either or both of these states meet the required composite security policy the portion or all of the policy meeting the requirements may be bypassed to improve operational performance.

In addition TACA also determines which security tokens to perform the authentication and secure messaging functions using token selection rule TK2 . Based on the determination TOKEN 1 is not available therefore TOKEN 2 will be used to perform the security transactions.

In the local registry all of the required enablement states are shown with the proper values . However the authentication state and secure messaging state are required to fulfill the composite security access control rule CAC02 shown in before processing with the security to token is permitted. In the non local registry embodiment of the invention the authentication and secure messaging states are received from the token s security domain control application SDCA and stored in either volatile memory or in a temporary file.

In either embodiment of the invention the TACA causes the PIN application to execute which causes a graphic user interface GUI to be displayed which requires a users credential input in this case a PIN . The user enters his or her PIN which is returned to the PIN agent via the TACA .

The PIN agent routes the PIN to its counterpart token PIN application for processing. Upon successful authentication by the token PIN application the PIN agent is notified of the successful authentication and a state is updated in the registry maintained by the SDCA .

In the local registry embodiment of the invention an analogous process occurs where upon receipt of the successful authentication notification the PIN agent updates the authentication state of the registry maintained by the TACA . In the non local registry embodiment of the invention processing continues without this step.

In either embodiment of the invention an unsuccessful authentication by the token PIN application would return an access denied response to the PIN agent which terminates the signing transaction.

Upon successful completion of the authentication the TACA signals the secure messaging agent SM to establish a secure messaging session using the token secure messaging application SM1 . The secure messaging agent causes the secure messaging application SM1 to establish a secure messaging session in accordance with the combined security policy CAC02 .

Analogously upon successfully establishing a secure messaging session by the token secure messaging application SM1 the secure messaging agent is notified of the successful session and a state is updated in a registry maintained by the SDCA . In the registry embodiment of the invention upon receipt of the successful secure messaging establishment notification the secure messaging agent updates the secure messaging session state of the registry maintained by the TACA . In the non local registry version of the invention processing continues without performing this step.

In either embodiment of the invention an unsuccessful secure messaging session establishment by the token secure messaging application would return an access denied response to the secure messaging agent which terminates the signing transaction.

Upon establishment of the secure messaging session the TACA signals the requesting application to transfer the object to be signed. The TACA forwards the object to the PKI agent for signing by the token PKI application . The object is sent to the token PKI application where it is signed and returned to the PKI agent .

The signed object A is sent by the PKI agent to the TACA where it is returned to the requesting application .

Referring to another embodiment of the invention is illustrated and continues with the previous example. In this embodiment of the invention the TACA receives a request from a requesting application . As before the requesting application sends a request to the token access control application TACA which causes the TACA to request the token security policies from the token s security domain control application SDCA . The token security policies are returned to the TACA and logically combined with the host security policies resulting in the set of composite security policies C. In an alternate embodiment of the invention information related to the required counterpart security application agents is returned as well for verification and if necessary installation. The authentication enablement secure messaging states and token selection are verified as before.

However in this embodiment of the invention the TACA extracts the applicable portions of the composite security policies for signing the object and forwards the applicable security policies onto the PIN agent and secure messaging agent which enforce their portion of the forwarded composite security policies. In this embodiment of the invention the PIN agent causes the PIN application to execute.

The entered PIN is then sent directly to the PIN agent where processing of the PIN by the token PIN application and the updating of registry information if applicable to the embodiment of the invention is performed as previously described.

The successful completion of the authentication transaction causes the TACA to forward the applicable security policies associated with secure messaging to the secure messaging agent . The secure messaging agent causes the secure messaging application SM1 to establish a secure messaging session in accordance with the applicable portion of the composite security policy. Establishment of a secure messaging session and updating of registry entries is performed if applicable to the embodiment of the invention as previously described.

Once the required security policies have been achieved the TACA signals the PKI agent to process the object to be signed. The PKI agent signals the requesting application to send the object . The object is sent by the requesting application to the PKI agent where it is transferred to the token PKI application signed and returned to the PKI agent . In this embodiment of the invention the PKI agent returns the signed object A directly to the requesting application.

Referring to a third embodiment of the invention is illustrated and again continues with the previous example. In this embodiment of the invention the TACA receives a request from a requesting application .

As before the requesting application sends a request to the token access control application TACA which causes the TACA to request the token security policies from the token s security domain control application SDCA and retrieves the token policies for proper token selection.

The token security policies are returned to the TACA and logically combined with the host security policies resulting in the set of composite security policies C. In an alternate embodiment of the invention information related to the required counterpart security application agents is returned as well for verification and if necessary installation. The authentication enablement secure messaging parameters and token selection are again verified as before if applicable to the embodiment of the invention.

In this embodiment of the invention the TACA forwards the applicable portion of the security policy to the requesting application . The requesting application becomes responsible for implementing the composite set of security policies. The requesting application signals the PIN agent and causes the PEN application to execute. The PIN is sent directly to the PIN agent where processing of the PIN by the token PIN application and the updating of registry information if applicable to the embodiment of the invention is performed as previously described. The PIN agent signals the requesting application of the successful completion of the authentication transaction.

The requesting application then signals the secure messaging agent to establish a secure messaging session. The secure messaging agent causes the secure messaging application SM1 to establish a secure messaging session in accordance with the applicable portion of the composite security policy. Establishment of a secure messaging session and updating of registry entries if applicable to the embodiment of the invention is performed as previously described.

The secure messaging agent signals the requesting application that a secure messaging session is established. The requesting application then signals the PKI agent to receive the object to be signed. The object is sent by the requesting application to the PKI agent where it is transferred to the token PKI application signed and returned to the PKI agent . In this embodiment of the invention the PKI agent again returns the signed object A directly to the requesting application.

Referring to the steps required for implementing the invention are depicted. The sequence is initiated by receiving a request to perform a security function using a security token from an application by a token access control application TACA . The TACA retrieves the token policy and selects the proper security token s to implement the transaction . The TACA then retrieves a token security policy from the selected security token s reads the host security policy and generates a composite set of security policies from the logical combination of the token and host security policies.

The TACA ensure enforcement of the security policies in one embodiment of the invention by accessing a registry comprising security parameters for verifying a set of enablement states in a registry verifying an authentication state in a registry verifying a secure messaging state in the registry and verifying that the required security agent and or counterpart security application are compatible . The discussion of compatibility verification between token security applications and host security application agents is provided under below. The compatibility verification process is initiated at step A and if compatibility is established between the token security applications and host security application agents at step B processing continues by enforcement of the combined security policies . If compatibility is not established between the token security applications and host security application agents at step C processing ends .

In another embodiment of the invention the security policy is enforced without verifying security parameters non local registry embodiment and continues by receiving a specific credential if required causing the execution of one or more appropriate security agents sending the received credential to the appropriate security agent if required sending the received credential to the proper token application establishing a secure messaging session if required performing a security function and ending processing after performing the security function.

Referring to the steps required for implementing another embodiment of the invention are depicted. The sequence is initiated by receiving a request to perform a security function using a security token from an application by a token access control application TACA . The TACA retrieves a token selection policy and selects the security tokens to perform the security transactions. The TACA then retrieves a token security policy from the selected security token s reads an associated host security policy and generates a composite security policy from the logical combination of the token and host security policies.

In one embodiment of the invention the TACA accesses a registry comprising security parameters for verifying a set of enablement states in the registry verifying an authentication state in the registry verifying a secure messaging state in the registry and verifying that the required security agent and or counterpart security application are compatible . The compatibility verification process is initiated at step A and if compatibility is established between the token security applications and host security application agents at step B processing continues by enforcement of the combined security policies . If compatibility is not established between the token security applications and host security application agents at step C processing ends . Otherwise processing continues by enforcement of the combined security policies .

In another embodiment of the invention the security policy is enforced without verifying security parameters non local registry embodiment and continues by executing the appropriate security application agents sending the combined set of security policies to the appropriate security application agents ensuring enforcement of the composite set of security policies by the appropriate security agents receiving a specific credential if required sending the received credential to the proper token application if required establishing a secure messaging session if required performing a security function and ending processing after performing the security function.

Referring to the steps required for implementing the yet another embodiment of the invention are depicted. The sequence is initiated by receiving a request to perform a security function using a security token from an application by a token access control application TACA . The TACA retrieves token policies and selects the proper security token s to perform the transaction . The TACA then retrieves a token security policy from the selected security token s retrieves the host security policy and generates a composite security policy from the logical combination of the token and host security policies.

In one embodiment of the invention the TACA accesses a registry comprising security parameters for verifying a set of enablement states in the registry verifying an authentication state in the registry verifying a secure messaging state in the registry and verifying that the required security agent and or counterpart security application are compatible The compatibility verification process is initiated at step A and if compatibility is established between the token security applications and host security application agents at step B processing continues by enforcement of the combined security policies .

If compatibility is not established between the token security applications and host security application agents at step C processing ends . Otherwise processing continues by enforcement of the combined security policies .

In another embodiment of the invention non local registry embodiment the security policy is enforced without verifying security parameters and continues by executing the appropriate security agents sending the combined security policy to the requesting application ensuring enforcement of the security policy by the appropriate security agents receiving a specific credential if required sending the received credential to the proper token application if required establishing a secure messaging session if required performing a security function and ending processing after performing the security function.

Referring to the steps required to retrieve compatibility information from the compliant security token to the host computer system is depicted. The compatibility information ensures that the proper version of security application agent is installed on the host computer system in order to properly operate with their counterpart token security applications. The process is initiated at step A by retrieving the compatibility information from the security token . The information may be retrieved from a registry maintained by the security domain control application installed inside the security token or provided directly by each of the token security applications.

The retrieved compatibility information is then used to verify that the installed host security application agents are compatible with the installed token security applications . If the security application agents are compatible with token security applications this portion of the processing ends and returns at step B .

If one or more of the security application agents are not compatible with one or more of the token security applications one or more compatible security application agents are retrieved . The security application agent s may be retrieved from either a local or remote storage location. A digital signature verification is then performed .

If the digital signature s are not verified the installation process is aborted and processing terminated at step C . If the digital signature s are verified the retrieved application s are installed on the host computer system . The newly installed security application agent s are then registered with either the host operating system or token access control application by entry of parameters in a registry . Once the appropriate registry has been updated with the parameters processing is completed at step B .

The foregoing described embodiments of the invention are provided as illustrations and descriptions. They are not intended to limit the invention to precise form described. In particular it is contemplated that functional implementation of the invention described herein may be implemented equivalently in hardware software firmware and or other available functional components or building blocks. No specific limitation is intended to a particular security token operating environment. Other variations and embodiments are possible in light of above teachings and it is not intended that this Detailed Description limit the scope of invention but rather by the Claims following herein.

