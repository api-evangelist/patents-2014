---

title: Methods and systems for a copy-offload operation
abstract: Methods and systems for executing a copy-offload operation are provided. The method includes determining if content of a source data container can be changed, after the source data container is opened for a copy-offload operation to copy the source data container from a source location to a destination location. The method further includes using a direct copy mode for generating a token for the copy-offload operation, without taking a point in time image of the source data container, when the content cannot be changed based on a mode in which the source data container is opened; and selecting a point in time copy mode by taking the point in time image of the source data container for generating the token, when the content can be changed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582206&OS=09582206&RS=09582206
owner: NETAPP, INC.
number: 09582206
owner_city: Sunnyvale
owner_country: US
publication_date: 20140616
---
The present disclosure relates to storage systems and more particularly to performing copy offload operations.

Various forms of storage systems are used today. These forms include direct attached storage DAS network attached storage NAS systems storage area networks SANs and others. Storage systems are commonly used for a variety of purposes such as providing multiple users with access to shared data backing up data and others.

A storage system typically includes at least a computing system may also be referred to as a server or storage server which is a processing system configured to store and retrieve data on behalf of one or more client computing systems clients . The storage system may be presented to a client system for storing information.

Traditionally when a client system intends to copy data from a source storage location to a destination storage location the storage system retrieves the data provides the data to the client system the client system saves the data at a memory location and then data is transferred to the destination storage location. The source and the destination storage locations may be within a same storage device or different storage devices.

The traditional client centric copy approach described above has shortcomings because it consumes processing resources as well as network bandwidth. To alleviate the shortcomings of the traditional approach a token based copy offload process is one technique that is used to copy a source data container from a source location to a destination location without having to send the actual data to the client.

The following process steps are typically used in a conventional method to copy a source data container from a source location to a destination location using a copy offload operation a In response to a copy offload request a source data container is opened and then read. b A token that represents information of the source data container at any given time is generated. A point in time copy or a snapshot of the data container is taken to generate the token. c The token is provided to the client and the client then sends an offload write request. d A destination data container is opened and then using the token the data container is copied from the source location. Generating the token by taking the snapshot is undesirable since it uses processing time and may limit a size of the token. Continuous efforts are being made to efficiently perform copy offload operations preferably without taking a point in time copy of the data container that is being copied.

In one aspect a machine implemented method is provided. The method includes determining if content of a source data container can be changed after the source data container is opened for a copy offload operation having an offload read operation and an offload write operation to copy the source data container from a source location to a destination location. To execute an offload read request a storage system that manages a storage device returns a token to a client in response to the offload read request where the token represents the content of the source data container.

The method further includes using a direct copy mode for generating the token for the offload read operation without taking a point in time image of the source data container when the content cannot be changed based on a mode in which the source data container is opened and selecting a point in time copy mode by taking the point in time image of the source data container for generating the token when the content can be changed.

In another aspect a non transitory machine readable storage medium having stored thereon instructions for performing a method for a copy offload operation is provided. The machine executable code which when executed by at least one machine causes the machine to determine if content of a source data container can be changed after the source data container is opened for a copy offload operation having an offload read operation and an offload write operation to copy the source data container from a source location to a destination location. To execute an offload read request a storage system that manages a storage device returns a token to a client in response to the offload read request where the token represents the content of the source data container.

The machine executable code which when executed by at least one machine further causes the machine to use a direct copy mode for generating the token for the offload read operation without taking a point in time image of the source data container when the content cannot be changed based on a mode in which the source data container is opened and select a point in time copy mode by taking the point in time image of the source data container for generating the token when the content can be changed.

In yet another aspect a system with a memory having machine readable medium comprising machine executable code having instructions stored thereon and a processor module coupled to the memory configured to execute the machine executable code is provided. The machine executable code is executed to determine if content of a source data container can be changed after the source data container is opened for a copy offload operation having an offload read operation and an offload write operation to copy the source data container from a source location to a destination location. To execute an offload read request a storage system that manages a storage device returns a token to a client in response to the offload read request where the token represents the content of the source data container.

The machine executable code further uses a direct copy mode for generating the token for the offload read operation without taking a point in time image of the source data container when the content cannot be changed based on a mode in which the source data container is opened and selects a point in time copy mode by taking the point in time image of the source data container for generating the token when the content can be changed.

This brief summary has been provided so that the nature of this disclosure may be understood quickly. A more complete understanding of the disclosure can be obtained by reference to the following detailed description of the various aspects thereof in connection with the attached drawings.

As a preliminary note as used in this disclosure the terms component module system and the like are intended to refer to a computer related entity either software executing general purpose processor hardware firmware and a combination thereof. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computing device. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various non transitory computer readable media having various data structures stored thereon.

The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Computer executable components can be stored for example at non transitory computer readable media including but not limited to an ASIC application specific integrated circuit CD compact disc DVD digital video disk ROM read only memory floppy disk hard disk EEPROM electrically erasable programmable read only memory memory stick non transitory storage media or any other storage device type in accordance with the claimed subject matter.

In one aspect methods and systems for executing a copy offload operation are provided. The method determines if content of a source data container cannot be changed based on a mode in which the source data container is opened to copy the source data container from a source location to a destination location. A direct copy mode is used for generating a token for the copy offload operation without taking a point in time image of the data container when the content cannot be changed. A point in time copy mode is used by taking a point in time image of the data container for generating the token when the content of the data container can be changed.

The storage system may include or interface with a storage subsystem having multiple mass storage devices A N may also be referred to as storage device or storage devices . The mass storage devices may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magneto optical MO storage or any other type of non volatile storage devices suitable for storing structured or unstructured data.

The storage system executes a storage operating system for managing storage space within storage subsystem and presenting storage space to clients . As an example storage operating system maybe the DATA ONTAP storage operating system available from NetApp Inc. that implements a Write Anywhere File Layout WAFL storage system or any other suitable storage operating system without derogation of any trademark rights .

In one aspect storage system also includes a copy system that includes a token manager a copy manager and copy engines A N for executing copy offload operations. A copy offload request may be received from one or more of clients to copy certain data containers from a source location to a destination location. In response to the client request the token manager generates a token which is a representation of the data that is being copied at any given time. The token manager uses a data structure to track the tokens that are generated by the token manager . It is noteworthy that although for clarity the token data structure is shown in a separate block it can be implemented as part of token manager .

The copy manager interfaces between the token manager and the storage operating system . The copy engines are used for performing the actual copy operations. Details regarding copy offload operations are provided below.

Storage operating system and applications running on the client systems . .N communicate according to well known protocols such as the NFS protocol or the CIFS protocol to make data stored at storage device appear to users and or application programs as though the data were stored locally at the client systems . .N. CIFS means the Common Internet File System Protocol an access protocol that client systems use to request file access services from storage systems over a network. NFS means a Network File System a protocol that allows a user to access storage over a network.

Storage operating system can present or export data stored at storage devices as a volume may also be referred to as a storage volume or one or more qtree sub volume units to each of the client systems . .N. In one aspect a volume is a logical data set which is an abstraction of physical storage combining one or more physical mass storage devices or parts thereof into a single logical storage object. From the perspective of a client system each volume can appear to be a single storage drive. However each volume can represent the storage space in one storage device an aggregate of some or all of the storage space in multiple storage devices a RAID group or any other suitable set of storage space. Each volume may be configured to store data containers for example data files scripts word processing documents executable programs structured and unstructured data and the like. Specifically each volume can include a number of individually addressable files.

The storage operating system may implement a high level module such as a file system to logically organize the information stored at storage devices as a hierarchical structure of directories files blocks structured and un structured data may be referred to as data containers . For example each on disk data container may be implemented as set of data structures i.e. blocks configured to store information such as the actual data for storage volumes. These data blocks are organized within a logical volume block number vbn space that is maintained by the file system. The file system organizes the storage data blocks within the vbn space as a logical volume each logical volume may be although is not necessarily associated with its own file system.

In a typical mode of operation one of the client systems . .N transmits one or more I O input output commands such as an NFS or CIES request over network to the storage system to read or write information. The storage system issues one or more I O commands to storage device to read or write the data on behalf of the client system. The storage system also issues an NFS or CIFS response containing the requested data over network to the client system.

The management console may be for example a conventional PC workstation or the like. The storage management application can be a software application typically used by a storage network administrator to manage a pool of storage devices and other modules of system . The management application may be used to configure a direct copy mode or a default point in time copy mode for generating tokens for copy offload operations as described below in detail.

Communication between the storage management application and storage system may be accomplished using any of the various conventional communication protocols and or application programming interfaces APIs the details of which are not germane to the technique being introduced here. This communication may be enabled by network or via a direct link not shown between the management console and one or more of the storage systems.

The adaptive aspects described herein can be implemented in a cluster based system that has a distributed architecture unlike the monolithic architecture of the non clustered environment. depicts an illustrative aspect of a clustered storage environment including a plurality of client systems . . similar to clients . .N a clustered storage system and at least one computer network communicably connecting the client systems . . and the clustered storage system . The clustered storage system includes a plurality of nodes . . a cluster switching fabric and a plurality of mass storage devices . ..

Each of the plurality of nodes . . may be configured to operate as a source storage system or a destination storage system. Each node may include a network interface a storage interface and a management module each of which can be implemented as a separate processor executable or machine implemented module. Specifically node . includes a n network interface . a storage interface . and a management module . node . includes a network interface . a storage interface . and a management module . and node . includes a network interface . a storage interface . and a management module ..

The network interfaces . . include functionality that enables the respective nodes . . to connect to one or more of the client systems . . over the computer network while the storage interfaces . . connect to one or more of the storage devices . ..

The management modules . . provide management functions for the clustered storage system . Accordingly each of the plurality of server nodes . . in the clustered storage server arrangement provides the functionality of a storage server.

A switched virtualization layer including a plurality of virtual interfaces VIFs is provided below the interface between the respective network interfaces . . and the client systems . . allowing storage . . associated with the nodes . . to be presented to the client systems . . as a single shared storage pool. For example the switched virtualization layer may implement a virtual interface architecture. depicts only the VIFs at the interfaces to the network interfaces . . for clarity of illustration.

The clustered storage system can be organized into any suitable number of vservers in which each virtual storage system represents a single storage system namespace with separate network access. Each vserver has a user domain and a security domain that are separate from the user and security domains of other virtual storage systems. Client systems can access storage space via a VServer from any node of the clustered system .

Each of the nodes . . may be defined as a computer adapted to provide application services to one or more of the client systems . .. The nodes . . are interconnected by the switching fabric which for example may be embodied as a Gigabit Ethernet switch or any other interconnect type.

Although depicts three network interfaces . . the storage interfaces . . and the management modules . . any other suitable number of network interfaces storage interfaces and management modules may be provided. There may also be different numbers of network interfaces storage interfaces and or tests management modules within the clustered storage system . For example in alternative aspects the clustered storage system may include a plurality of network interfaces and a plurality of storage interfaces interconnected in a configuration that does not reflect a one to one correspondence between the network interfaces and storage interfaces.

The client systems . . of may be implemented as general purpose computers configured to interact with the respective nodes . . in accordance with a client server model of information delivery. In the presently disclosed aspect the interaction between the client systems . . and the nodes . . enable the provision of network data storage services. Specifically each client system . . may request the services of one of the respective nodes . . . and that node may return the results of the services requested by the client system by exchanging packets over the computer network which may be wire based optical fiber wireless or any other suitable combination thereof. The client systems . . may issue packets according to file based access protocols such as the NFS or CIFS protocol when accessing information in the form of files and directories.

As shown in network interface includes different interface types to receive client requests that comply with different protocols. For example network interface includes a SCSI interface A to receive SCSI requests from a client . a CIFS interface B for receiving CIFS requests from a client . and a NFS interface C to receive requests from client .. Network interface includes a processing module that maintains a data structure A for processing copy offload requests as described below in detail. It is noteworthy that although the processing module is shown as a separate entity it can be implemented as part of the various interfaces A C. Data structure A is used to maintain the state for all client connections and requests that are being processed at any given time. It is noteworthy that data structure A may be part of the CIFS interface B and NFS interface C. Network interface further includes a storage interface for communicating with storage interface .

Storage interface includes a network interface for sending and receiving information to and from network interface . Storage interface also executes a file system that is a part of the overall storage operating system described below in detail. The file system interfaces with storage device for reading and writing data.

Storage interface executes one or more components of the copy offload system . The copy offload system interfaces with the file system as described below in detail. The copy offload system includes a token manager similar to a copy manager similar to and copy engines A N similar to A N . The various functions executed by the copy offload system are described below.

In one aspect the storage operating system maintains a plurality of lock types in responding to client requests for reading a data container writing a data container or modifying a data container. The following provides an example of different lock types that may be used for managing access to data containers. The various aspects described herein are not limited to any particular lock type.

A Shared Lock is typically granted to a client application by storage operating system . The shared lock in the CIFS context represents an open mode which defines the nature of access for an entity that opened the lock and what other applications entities are allowed to do. For example when the shared lock is opened for read and write for a data container and shared for just read then the entity that opened the lock can read and write while other entities are only permitted to read the data container.

 Byte lock is a lock type that limits access to a portion of a data container. A client may request to open a data container and request a lock for a byte range of the file.

To manage the various locks the storage operating system interfaces with or includes a lock manager that maintains one or more lock data structures A. Data structure A identifies the data containers against which locks may have been granted and the identity of the application or client to whom the lock is granted. The lock data structure A also stores lock attributes indicating the lock type. It is noteworthy that although the lock data structure A is shown as a separate block for clarity it can be implemented as an integral part of the lock manager .

After the data container is opened the network interface of the source node sends a response to the client in block B. The client then sends an offload read request to the network interface of the source node to read the source data container in block B. The network interface knows the state in which the source data container was opened and determines if the direct copy mode or the point in time copy mode is to be used for generating the token. Based on the selected mode as described below in detail a token is generated and provided to the client in block B.

In block B the client sends a request to a network interface of the destination node . to open the destination data container B for the copy offload operation. The destination node . opens the destination data container in block B. It is noteworthy that if the source and destination nodes are the same then the request is sent to the same node.

An offload write request is then sent by the client with the token in block B. The data from the source data container is then copied in block B. Thereafter both the source and destination data containers are closed in block B.

When the source data container is opened in a mode that prevents data from being changed then in block B a token is generated by the token manager as described below in detail using a direct copy mode.

When the source data container is opened in a write mode or a shared write mode then the token is generated in block B using a point in time copy of the source data container as described below in detail because the content of the source data container can be changed.

In block B the network interface determines if a direct copy mode can be used for generating a token. This determination is based on the state in which the source data container was opened. If the data container was opened in a read or shared read mode then the direct copy mode can be used. Otherwise the direct copy mode cannot be used. This information is maintained at the data structure A.

If the direct copy mode cannot be used then in block B the network interface sends a request to the token manager to create a token for copying the data container using a point in time copy of the data container. The process and system for using the point in time copy is described in U.S. patent application Ser. No. 13 681 096 entitled Inter Protocol Copy Offload filed on Nov. 12 2012 the disclosure of which is incorporated herein by its entirety.

If the direct copy mode can be used then in block B the network interface determines if there is any conflict with a byte range lock denying a read operation for the source data container A. Network interface may use the data structure A to determine if there are any conflicting locks for the data container. Alternatively the lock information may be obtained from the lock manager and data structure A. A conflicting lock may deny a read operation for the requested data container.

If there is no conflict then in block B the network interface sends a request to the token manager to create a token in the direct copy mode without taking a point in time copy.

If the token request is for a direct copy mode then in block B the token manager creates a token entry with the source data container details. The token manager embeds shared lock information in the token entry. The shared lock information provides the details of the entity that owns the shared lock and the nature of the shared lock i.e. read only or read and delete. The lock information is maintained by the lock manager for managing read write and delete access to a data container. The token entry with shared lock information is then sent to the network interface in block B and the process ends in block B.

As an example a token sent to the client may include a plurality of fields including a Type This field specifies the token type. b Length This field indicates the length of the token. c Vendor Id This field identifies a vendor for example NetApp that provides the underlying storage. d Version This field indicates the version of the token. For the direct copy mode a different version number is used compared to a version number for using the point in time copy. e Protocol This field includes the protocol that is used to create the token for example SMB Server Message Block protocol. f File Handle This provides a volume identifier of the source data container. g Key This field is a unique identifier for the token. h Cluster Identifier This field identifies the cluster that created the token. This identifier can be used to determine if the copy offload operation is within the same cluster or across another cluster. i Source storage interface identifier This field identifies the source storage interface. j Destination storage interface identifier This field identifies the destination storage interface identifier. k VServer Identifier This field identifies the Vserver that created the token. l Shared Lock information This field identifies the shared lock used for opening the source data container.

In block B the token manager looks up the token entry details at token data structure and determines if the request is for a direct copy mode. If not then in block B a copy request is initiated for the copy manager . The source data container is specified as the PIT file and the copy manager is provided with the destination and destination lock information if any. Thereafter the process moves to block B that is described below in detail with respect to .

If the copy request is for a direct copy mode then in block B the copy request is initiated with the copy manager . The request specifies the source data container the destination location and the lock information for locks at the source and destination nodes.

In block B the copy operation is performed using one of the copy engines A N. A response is provided to the network interface . Thereafter in block B a response is sent to the client.

In block the I O request is validated. The validation is to ensure that all the shared lock protecting the source data container is still valid. Thereafter in block the storage operating system copies the source data container to the destination. The copy manager is notified in block B and thereafter the client is notified in block B.

The foregoing aspects have various advantages in executing a copy offload operation. For example a point in time copy is not used when a direct copy offload mode is appropriate. This saves processing resources and time.

The cluster access adapter comprises a plurality of ports adapted to couple node . to other nodes of cluster . In the illustrative aspect Ethernet or any other protocol may be used as the clustering protocol and interconnect media although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate aspects where the network interfaces and storage interfaces are implemented on separate storage systems or computers the cluster access adapter is utilized by the network interface storage interface for communicating with other network interface storage interface in the cluster .

Each node . is illustratively embodied as a dual processor storage system executing a storage operating system similar to that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories and files on storage .. However it will be apparent to those of ordinary skill in the art that the node . may alternatively comprise a single or more than two processor systems. Illustratively one processor A executes the functions of the network interface on the node while the other processor B executes the functions of the storage interface .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing programmable instructions and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the programmable instructions and manipulate the data structures. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the present disclosure.

The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node . by inter alia invoking storage operations in support of the storage service implemented by the node.

The network adapter comprises a plurality of ports adapted to couple the node . to one or more clients . . over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network .

The storage adapter cooperates with the storage operating system executing at node . to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on storage device .. The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the storage devices over an I O interconnect arrangement such as a conventional high performance FC link topology.

In one example storage operating system may include several modules or layers executed by one or both of network interface and storage interface . These layers include a file system manager similar to that keeps track of a directory structure hierarchy of the data stored in storage devices and manages read write operations i.e. executes read write operations on storage in response to client . . requests.

Operating system may also include a protocol layer and an associated network access layer to allow node . to communicate over a network with other systems such as clients . .. Protocol layer may implement one or more of various higher level network protocols such as NFS CIFS Hypertext Transfer Protocol HTTP TCP IP and others.

Network access layer may include one or more drivers which implement one or more lower level protocols to communicate over the network such as Ethernet. Interactions between clients . . and mass storage devices . are illustrated schematically as a path which illustrates the flow of data through operating system .

The operating system may also include a storage access layer and an associated storage driver layer to allow storage interface to communicate with a storage device.

The storage access layer may implement a higher level storage protocol such as RAID while the storage driver layer may implement a lower level storage device access protocol such as FC or SCSI.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node . implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows XP or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the various inventive aspects described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and a storage device directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present disclosure may be utilized with any suitable file system including a write in place file system.

The processing system includes one or more processor s and memory coupled to a bus system . The bus system shown in is an abstraction that represents any one or more separate physical buses and or point to point connections connected by appropriate bridges adapters and or controllers. The bus system therefore may include for example a system bus a Peripheral Component Interconnect PCI bus a HyperTransport or industry standard architecture ISA bus a small computer system interface SCSI bus a universal serial bus USB or an Institute of Electrical and Electronics Engineers IEEE standard 1394 bus sometimes referred to as Firewire .

The processor s are the central processing units CPUs of the processing system and thus control its overall operation. In certain aspects the processors accomplish this by executing machine executable code stored in memory . A processor may be or may include one or more programmable general purpose or special purpose microprocessors digital signal processors DSPs programmable controllers application specific integrated circuits ASICs programmable logic devices PLDs or the like or a combination of such devices.

Memory represents any form of random access memory RAM read only memory ROM flash memory or the like or a combination of such devices. Memory includes the main memory of the processing system . Instructions which implement the process steps described above may reside in and execute by processors from memory .

Also connected to the processors through the bus system are one or more internal mass storage devices and a network adapter . Internal mass storage devices may be or include any conventional medium for storing large volumes of data in a non volatile manner such as one or more magnetic or optical based disks. The network adapter provides the processing system with the ability to communicate with remote devices e.g. storage servers over a network and may be for example an Ethernet adapter a Fibre Channel adapter or the like.

The processing system also includes one or more input output I O devices coupled to the bus system . The I O devices may include for example a display device a keyboard a mouse etc.

The system and techniques described above are applicable and useful in the upcoming cloud computing environment. Cloud computing means computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. The term cloud is intended to refer to the Internet and cloud computing allows shared resources for example software and information to be available on demand like a public utility.

Typical cloud computing providers deliver common business applications online which are accessed from another web service or software like a web browser while the software and data are stored remotely on servers. The cloud computing architecture uses a layered approach for providing application services. A first layer is an application layer that is executed at client computers. After the application layer is a cloud platform and cloud infrastructure followed by a server layer that includes hardware and computer software designed for cloud specific services. In this example a source storage system and a destination storage system may be presented in a cloud for storing information.

Thus a method and apparatus for copying a source data container from a source location to a destination location have been described. Note that references throughout this specification to one aspect or an aspect mean that a particular feature structure or characteristic described in connection with the aspect is included in at least one aspect of the present disclosure. Therefore it is emphasized and should be appreciated that two or more references to an aspect or one aspect or an alternative aspect in various portions of this specification are not necessarily all referring to the same aspect. Furthermore the particular features structures or characteristics being referred to may be combined as suitable in one or more aspects of the present disclosure as will be recognized by those of ordinary skill in the art.

While the present disclosure is described above with respect to what is currently considered its preferred aspects it is to be understood that the disclosure is not limited to that described above. To the contrary the disclosure is intended to cover various modifications and equivalent arrangements within the spirit and scope of the appended claims.

