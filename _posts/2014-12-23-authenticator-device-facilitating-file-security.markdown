---

title: Authenticator device facilitating file security
abstract: Disclosed are various embodiments for facilitating the encryption of files as well as facilitating requiring a user to employ an authenticator device in order to access a file that is encrypted or otherwise secured. The authenticator device can provide an authenticator code in which a security key used to access a secured file can be embedded. An additional layer of encryption can also be applied in the authenticator code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09413754&OS=09413754&RS=09413754
owner: AirWatch LLC
number: 09413754
owner_city: Palo Alto
owner_country: US
publication_date: 20141223
---
An enterprise and or its users may wish to secure documents or other files by requiring a password or another authentication mechanism that is designated as a requirement in order to access a particular file. In some cases a document can be protected with a password or key that must be supplied in order to open or access the document. In some cases if such a password is compromised access to a particular document or file can also be compromised.

An enterprise or users of an enterprise may wish to secure files or documents to prevent access by unauthorized users. Files may be secured by applying an encryption process in which the file is encrypted utilizing a security key such that in order to be accessed the file must be decrypted with the security key. In other words a symmetric encryption process can be utilized. In some embodiments the security key can encrypt a collection of file keys rather than a security key that is specific to the file. In some scenarios a user may wish to utilize public key private key encryption methodologies where a file is encrypted using a public key and must be decrypted using a private key that corresponds to the public key in order for the file to be accessed or an asymmetric encryption process. Files can also be secured by utilizing a password protection process that may not involve encryption of the file. For example a binary file that is encoded in a proprietary or open format that is viewable by a reader or editor such as a file format supported by MICROSOFT WORD ADOBE ACROBAT or other software programs can be password protected such that in order to be accessed using a reader or editor program a correct password must be supplied by a user attempting to access the file.

Accordingly access to files that are secured using such methodologies may be compromised in the event that a password or other pre shared secret is compromised. Therefore embodiments of the disclosure can employ an authenticator computing device hereinafter authenticator device that is separate from a computing device that is attempting to access a secured file hereinafter access device . In order to access a secured file on an access device embodiments of the disclosure can require that a security key must be obtained from such an authenticator device. In some embodiments such a security key may be received from the authenticator device by a localized communication interface such as via a quick response QR code or any other barcode or visual identifier displayed on a display of the authenticator device communication via a localized network interface such as BLUETOOTH near field communication NFC radio frequency identification RFID or any other localized communication mechanism.

Additionally the security key that facilitates decryption or access to a secured file can itself be encrypted or further secured to protect against the possibility that the communication between the authenticator device and the device attempting to access the secured file is intercepted. For example the security key can be encrypted or protected using a one time password or a time varying token. In addition to such a one time password the security key can also be protected using a password personal identification number PIN or a pre shared secret that must be supplied in addition to or in combination with the one time password in order to access the security key obtained from the authenticator device. The security key can also be encrypted with a public key that corresponds to a private key associated with a particular user or access device. Additionally an application executed by the access device can also be configured to avoid storage or persistence of the security key in mass storage disk or any other non volatile storage of the device so that subsequent attempts to access the secured file via the access device would require obtaining the security key again from the authenticator device. In some embodiments the security key can secure a collection of keys that are in turn employed to decrypt the secured file rather than being a file specific security key.

Accordingly embodiments of the present disclosure can facilitate the security of files that are obtained from a server or other resource by requiring that a device on which a file is accessed communicates with an authenticator device in order to obtain an authenticator code or a double encrypted security key that can be used to facilitate access or decrypt the file.

As shown in the example scenario of an authenticator device can comprise a smartphone a mobile device or any other computing device. Similarly an access device can comprise a smartphone a mobile device or any other computing device. The access device can attempt to access or open a secured file that is stored on or otherwise accessible to the access device . The secured file can be encrypted or secured by a security key to which the access device does not have access. Accordingly in order to access or open the secured file an application that facilitates access to the secured file can prompt the user to obtain an authenticator code from the authenticator device . The authenticator code in embodiments of this disclosure can comprise a multiply encrypted version of the security key. In other words the authenticator code can be the security key with multiple layers of encryption applied. In some embodiments of the disclosure the authenticator code can comprise a double encrypted security key or the security key with two layers of encryption or security applied.

The authenticator code can be obtained from the authenticator device by the access device via a localized networking or communication capability. In the depicted scenario of such a capability includes the display by the authenticator device of a data representation of the authenticator code on a display of the authenticator device which can be captured by the access device via a camera capability of the access device . For example the authenticator code can be embedded within a quick response QR code or other visual data representation. As another example the authenticator code can be transmitted to the access device via a localized communication interface such as near field communication NFC radio frequency identification technology or an audible transmission where the authenticator code is embedded within an audible noise that can be captured by a microphone associated with the access device .

Accordingly a secured file obtained or received by the access device can be encrypted with the security key but the security key can be initially withheld from the access device . The security key can be encrypted by a file server or other computing device with a public key that corresponds to a private key associated with the access device or a user associated with the access device . The encrypted security key can be provided to the authenticator device which can apply an additional encryption layer to the encrypted security key to generate the double encrypted security key. The authenticator code can comprise the double encrypted security key. As will be described herein the access device can decrypt the authenticator code or the double encrypted security key in order to access a secured file.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment an authenticator device and a access device which are in data communication with each other via a network . The network includes for example the Internet one or more intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks other suitable networks or any combination of two or more such networks. For example such networks may comprise satellite networks cable networks Ethernet networks telephony networks and other types of networks. In the depicted example of the authenticator device and access device are shown merely for illustrative purposes to describe how embodiments of the disclosure may operate. It should be appreciated that the illustrated devices can be deployed in various ways and that the depicted illustration is non limiting.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may comprise a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. For example the computing environments may comprise a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing environment is referred to herein in the singular. Even though the computing environment is referred to in the singular it is understood that a plurality of computing environments may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of memory of the computing environment mass storage resources of the computing environment or any other storage resources on which data may be stored by the computing environment . The data store may also be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a file storage application and other applications services processes systems engines or functionality not discussed in detail herein. The file storage application is executed to facilitate the storage of files on behalf of a user an enterprise or organizational storage account or any other entity. The file storage application can facilitate access to files stored by or on behalf of users as well as the encryption and security of the files that are stored within the computing environment.

The data stored in the data store includes for example file data and potentially other data. The file data can include data associated with a user or an account associated with an organization or entity. File data can include information about files that are stored on behalf of a user or organization within the computing environment . File data can also include other data and information that facilitates access to files that are stored within the computing environment . For example file data can also include access settings such as authentication credentials delegation settings e.g. information about other users who may be provided access to the files of a particular user or organization synchronization settings user or organizational profile information or any other forms of user data.

As noted above file data can include data about various files that are stored within the computing environment . A particular file can be stored as a secured file . A secured file is encrypted or otherwise protected by a security key. Such a security key may or may not be stored in conjunction with the secured file in the file data . In some embodiments it may be desired that the security key used to encrypt and or decrypt the file should not be stored in the data store unless it is encrypted. Accordingly in some embodiments an encrypted form of the security key or an encrypted security key is stored with file data . An encrypted security key can be encrypted with a public key corresponding to a user organization and or access device that is associated with the secured file . In other words the security key used to encrypt the file of a user is encrypted with the public key of the user and stored as the encrypted security key . In some embodiments the encrypted security key can correspond to a key that is employed to encrypt a collection of security keys rather than a file specific security key.

Secured files can correspond to files that can represent documents media or any other data that can be stored in a file system or storage accessible to the computing environment . A security key used to encrypt or protect a file as a secured file can represent a password encryption key or any other data that can be used to generate an encrypted or secured version of a particular file. The public key can correspond to an encryption key in an asymmetric encryption methodology such as RSA in which an encryption key used to generate encrypted data is separate from a private key that is used to decrypt data that was encrypted using the public key . As noted above the encrypted security key can be encrypted using the public key corresponding to a user or organization to which the secured file belongs.

The authenticator device and access device are representative of one or more devices that may be associated with a user or organization associated with a particular secured file stored within the computing environment and made accessible via the file storage application . The authenticator device and or access device may comprise for example a processor based system such as a computer system that may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone a smartphone a set top box a music player a web pad a tablet computer system a game console an electronic book reader or any other device with like capability. The authenticator device and or access device may include a display that comprises for example one or more devices such as liquid crystal display LCD displays or other types of display devices. The authenticator device and or access device may also be equipped with networking capability or networking interfaces including a localized networking or communication capability such as an NFC capability RFID read and or write capability a microphone and or speaker or other localized communication capability.

The authenticator device may be configured to execute various applications such as an authenticator application . The authenticator application is configured to obtain an encrypted security key associated with a particular secured file or a collection of security keys one of which is associated with the secured file from the file storage application in response to a request on behalf of a user or organization to access one or more secured files that are stored within the computing environment and or stored within a particular access device of a user or enterprise. Additionally the authenticator application is also configured to generate an authenticator code or a double encrypted security key from the encrypted security key . The authenticator application can transmit the double encrypted security key to an access device on which a user is attempting to access a secured file that corresponds to the encrypted security key from which the double encrypted security key was generated.

The access device may be configured to execute various applications such as a file decrypter a file viewer and other applications or services. The file decrypter is executed to decrypt a secured file using a double encrypted security key obtained from the authenticator device . The file viewer is executed to facilitate viewing or other ingestion or processing of a secured file that is decrypted by the file decrypter . In some embodiments the functionality described herein as a part of the file viewer and file decrypter can be combined into a single application or invoked via an application programming interface API calls.

Next a general description of the operation of the various components of the networked environment is provided. To begin the file storage application can facilitate encryption of files with a security key on behalf of a user or organization. A file can be encrypted or secured with a security key and stored as a secured file in the data store as file data by the file storage application . For example a user may upload a file or cause a file to be uploaded by an application configured to synchronize files between the computing environment and the access device . Such a file can be received by the file storage application . A security key corresponding to the file or a collection of keys one of which corresponds to the file can be generated by the file storage application and used as an encryption key with which a secured file is generated. Then the file storage application can encrypt the security key as an encrypted security key with a public key corresponding to the user and or access device with which the file is associated or to whom the file belongs.

It should be appreciated that in some embodiments a copy of the public key may not be stored in association with each secured file and that a single copy of a public key may be stored in association with a particular user account or an organization account within the data store . Additionally in some embodiments a unique encrypted security key may or may not be generated for each secured file that is stored by the file storage application in the data store . In certain scenarios the file storage application may employ a single security key that is in turn encrypted with a single public key where the same security key is employed to generate secured files that correspond to various files stored by or on behalf of users or organizations within the computing environment . By generating the security key or obtaining the security key from a source other than the user or the access device the file storage application can store a file in a manner such that a decryption key for a secured file is not available to the access device . Additionally by encrypting the security key with the public key as an encrypted security key the decryption key needed to access the secured file is also unavailable to the file storage application as the file storage application can be configured to avoid storing or persisting the unencrypted security key used to generate the secured file .

Accordingly now that a secured file that is protected by an encryption methodology is stored in the data store the file storage application can respond to requests by or on behalf of a user to access the secured file . In embodiments of the disclosure the file storage application can require that in order for a user to access a particular secured file that a pairing relationship be established between a user account and an authenticator device such that the file storage application will only provide an encrypted security key needed to access a secured file to a particular authenticator device executing an authenticator application that provides particular authentication credentials or parameters to the file storage application . A process for establishing such a pairing relationship can provide for a public key corresponding to the access device or a user associated with the access device being transmitted to the file storage application which can store the public key in association with a user account or a device account in the data store . The file decrypter or any other software executed by the access device can generate or obtain a public key private key pair and retain the private key on the access device . Such a pairing relationship can also be established in a manner that allows the authenticator device and access device to exchange a shared secret from which a one time password or a time varying password can be later generated that will facilitate decryption of a double encrypted security key .

In some embodiments the file storage application can authenticate a request to access a secured file with a username password pair or other form of user authentication credentials. In some embodiments the file storage application can be configured to only provide a copy of the secured file to a particular access device based upon a hardware identifier associated with the access device such as a media access control MAC address. Upon receiving a request to access a secured file the file storage application can provide the secured file to the file decrypter or file viewer executed by the access device but not the encrypted security key . The encrypted security key can be transmitted or pushed to the authenticator application executed by the authenticator device .

The authenticator device can generate a time varying password that can be used to encrypt the encrypted security key in order to generate a double encrypted security key . In other words the authenticator application can apply an additional encryption layer to the encrypted security key based upon the time varying password generated by the authenticator application . The time varying password can be used as an encryption key that is used to apply the additional encryption layer. In one embodiment such a time varying password can be generated from a time code that corresponds to at least a portion of the current time. Such a time code can be combined with a shared secret that can be pre shared between the authenticator device and access device as a part of the above referenced pairing process. Such a time code can also be combined with a password or PIN that is provided by the user from which time varying passwords should be generated. For example the time code can be concatenated onto or otherwise combined with such a shared secret password or PIN to form a time varying password.

In some embodiments the time code can represent a truncation of the current time so that a corresponding time code generated by the access device that is generated some quantum of time later such as seconds or minutes later matches the time code generated by the authenticator application . For example the time code in some embodiments can represent a truncation of the current time such that the seconds are removed from the time code so that a corresponding time code generated by the access device sixty seconds after the generation of the time code matches the time code. In another scenario a corresponding time code generated by the access device that is within a certain of a time code generated by the authenticator device can also form an acceptable time code such that a range of acceptable time codes can be employed.

Upon generating a time varying password the authenticator application can encrypt the encrypted security key using the time varying password to generate the double encrypted security key . For example the authenticator application can generate a keyed hash message authentication code HMAC where the cryptographic key is the time varying password and the message content encrypted is the encrypted key . In other words the authenticator application can execute an HMAC algorithm such as SHA1 SHA256 etc. where the inputs are the time varying password and the encrypted security key .

In another scenario the time varying password can be used as an input to a hash function or cryptographic hash function to generate an output. The output of such a hash function can then be employed as an encryption key with which the additional encryption layer is applied to the encrypted security key in order to generate the double encrypted security key . In yet another scenario the time varying password itself can be employed as an encryption key that is used to generate the double encrypted security key from the security key .

Upon generating the double encrypted security key the authenticator application can provide the double encrypted security key to the file decrypter executed by the access device which is tasked with decrypting the secured file obtained from the file storage application . In one embodiment an application executed by the access device such as the file viewer or the file decrypter can prompt a user to obtain an authenticator code or the double encrypted security key from the authenticator device when the user attempts to access a secured file via the file viewer and or file decrypter . In some embodiments the file viewer can transmit a request to the authenticator application with data identifying the secured file so that the authenticator application can obtain an encrypted security key corresponding to the secured file and from which the double encrypted security key can be generated.

As noted above the double encrypted security key can be embedded within a QR code or other visual data representation that is displayed on a display of the authenticator device . The double encrypted security key can also be transmitted via an NFC capability from the authenticator device to the access device . As noted above the authenticator application can also generate an audible data representation of the double encrypted security key that is emitted via a speaker of the authenticator device . The access device can capture the audible representation via one or more microphones integrated within the access device . By employing a localized communication interface or capability of the authenticator device and access device in order to obtain the double encrypted security key the authenticator device and access device can be required to be in proximity with one another.

Upon receiving the double encrypted security key the file decrypter can remove the first layer of encryption from the double encrypted security key . In other words the file decrypter can decrypt the layer of encryption applied to the encrypted security key by the authenticator application . In order to do so the file decrypter can generate the time varying password that was generated by the authenticator application to apply the second layer of encryption. As noted above the time varying password is based upon a time code corresponding to the current time or a truncation of the current time as well as a shared secret that is either shared between the authenticator device and the access device or known to the user such as a password or PIN. Accordingly the file decrypter can generate the same time varying password as was generated by the authenticator application so long as it does so within a period of time after the time varying password was generated by the authenticator application . Such a period of time can vary depending upon the precision of the time code used to generate the time varying password by the authenticator application .

Upon generating the time varying password the file decrypter can use the time varying password to remove the second layer of encryption applied to the double encrypted security key . In other words the file decrypter can extract the encrypted security key from the double encrypted security key . Next because as noted above the encrypted security key was encrypted using a public key corresponding to a private key associated with the access device the file decrypter can extract the security key used to generate the secured file from the encrypted security key by decrypting the encrypted security key using the private key .

The security key can then be used by the file decrypter to access the secured file obtained from the file storage application . As noted above the security key can comprise an encryption key employed as a part of a symmetric encryption process to generate the secured file from a file associated with the user or a particular organization to which the file belongs. The security key may also comprise a password that is used to password protect access to the file. The file decrypter can be configured to decrypt or otherwise access a secured file as well as be configured to only store the security key the encrypted security key and or double encrypted security key in volatile memory. In other words the file decrypter can be configured as a trusted application that does not persist the security key the encrypted security key and or double encrypted security key associated with a particular secured file in non volatile memory mass storage or in any other portion of the access device in which they may be accessed by any other application or service that is not authorized to do so. In some embodiments the security key the encrypted security key and or double encrypted security key can only be manipulated in a trusted or secure memory portion of the access device . In some embodiments the file decrypter can also be configured to discard the security key the encrypted security key and or double encrypted security key from memory upon decryption of a file. In this way the security key the encrypted security key and or double encrypted security key are not retained within the access device once a secured file has been decrypted or otherwise accessed by the file decrypter .

Upon decryption of the secured file the file decrypter can provide the file to the file viewer which can facilitate viewing printing or other consumption of the contents of the file by a user using the access device . The file viewer can also be configured as a trusted application that does not persist the decrypted version of the secured file or any portion thereof in non volatile memory mass storage or in any other portion of the access device in which they may be accessed by any other application or service that is not authorized to do so. In some embodiments the file viewer can also be configured to discard portions of a decrypted version of the secured file when a user terminates a session associated with viewing the file in the file viewer or when a particular decrypted portion of the secured file are no longer displayed by the file viewer . In this way neither the security key nor the decrypted version of the secured file persist on the access device .

In some embodiments the file storage application can generate encrypted keys corresponding to a particular secured file in the event that a particular user account or organizational account is associated with multiple computing devices that are associated with different public key private key pairs. In such a scenario the file storage application can generate more than one encrypted security key that is encrypted with each respective public key associated with the user account. Accordingly in response to a request to access a secured file the file storage application can provide the multiple encrypted keys to the authenticator application which can in turn generate multiple double encrypted keys that can be transmitted to the access device .

In some embodiments in response to a request to invoke the authenticator application to display a QR code in which the double encrypted security keys are embedded the authenticator application can embed the multiple double encrypted security keys in such a QR code or other data representation of the double encrypted security keys . The double encrypted security keys can be embedded in such a data representation along with metadata identifying a particular access device or public key to which each of the double encrypted encrypted security keys that are embedded therein correspond. In this way the file decrypter can identify which of the double encrypted security keys have been encrypted with the public key corresponding to the access device or user to which the particular instance of the file decrypter corresponds.

Referring next to shown is an example sequence diagram that illustrates one example of interactions between the various components illustrated in the example networked environment of . illustrates an example of the file storage application that has received a request to access a secured file on behalf of a particular user or organization. Upon authentication of the user and or the access device from which the user is attempting to access the secured file the file storage application can provide the encrypted security key corresponding to the secured file to the authenticator application executed by the authenticator device . The file storage application can also provide the secured file to the file decrypter executed by the access device . In this way the encrypted security key and the secured file are not provided to the same device. Additionally in order to access the secured file via the access device proximity to or communication with the authenticator device can be required. In other words in order to access the secured file the user can be required to authenticate himself or herself using a separate authenticator device . In some embodiments in order to access the secured file the authenticator device and access device can also authenticate physical presence with respect to one another by providing location data such as global positioning system GPS location data network location data e.g. Wi Fi media access control data internet protocol address data to the file storage application before the file storage application provides the encrypted security key to the authenticator device .

Next the authenticator device can generate a time varying password at arrow . As noted above such a time varying password can be used to apply an additional encryption layer to the encrypted security key . Then the authenticator application executed by the authenticator device can transmit the double encrypted security key to the file decrypter executed by the access device . As described above the double encrypted security key can be transmitted to the file decrypter via a localized communication interface.

Upon receiving the double encrypted security key the file decrypter can extract the encrypted security key by generating the time varying password with which the security key can be accessed at arrow . Next the file decrypter can decrypt the encrypted security key to access the security key associated with the secured file using the private key corresponding to the public key with which the encrypted security key was generated at arrow . Next the file decrypter can decrypt the secured file using the security key extracted from the encrypted security key at arrow . In some embodiments the security key extracted from the encrypted security key can correspond to a security key that is used to access a collection of security keys from which a file specific security key is extracted.

Referring next to and shown is a scenario illustrating how the time varying password generated by the file decrypter executed by the access device can require the user to enter a password and or PIN in order to generate a time varying password in order to remove the additional encryption layer applied to the encrypted security key by the authenticator application when the double encrypted security key is generated. As shown in just as in the example of a user can be prompted by the file decrypter executed by the access device to obtain an authenticator code or a double encrypted security code from the authenticator application . Accordingly the user may invoke the authenticator application executed by the authenticator device which can generate a QR code in which the double encrypted security key is embedded.

Accordingly the file decrypter executed by the access device can capture the double encrypted security key . Referring next to the file decrypter can then prompt the user to provide a password PIN biometric authentication data or other authentication mechanisms with which the time varying password was generated in order to apply the second encryption layer to the double encrypted security key . In this way the file decrypter can also require user authentication of an authentication credential in order to confirm that a user attempting to access a secured file is authorized to do so.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the file storage application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the file storage application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments. Functionality attributed to the file storage application can be implemented in a single process or application executed by the computing environment and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the file storage application can generate a security key in response to a request to store a file in association with a particular user account or organizational account in the data store . At box the file storage application can generate a secured file from the security key by encrypting or password protecting the file using the security key. At box the file storage application can generate one or more encrypted security key using one or more public key corresponding to a user organization or access device . In some embodiments the security key embedded within the encrypted security key can correspond to a security key that is used to access a collection of security keys from which a file specific security key is extracted.

At box the file storage application stores the secured file in the data store . In this way the unsecured or unencrypted file can avoid being stored in the data store . At box the file storage application can store the one or more encrypted security key generated using the respective public key . In this way the unencrypted security key can avoid being stored in the data store and the file storage application would not have access to the private key needed to decrypt the encrypted security key . At box the process proceeds to completion.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the file storage application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the file storage application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments. Functionality attributed to the file storage application can be implemented in a single process or application executed by the computing environment and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the file storage application can obtain a request to access a secured file stored in the data store on behalf of a particular user access device and or organization. At box the file storage application can transmit the secured file to an access device that is executing a file decrypter . In some embodiments the file storage application can authenticate the access device and or the user prior to transmitting the secured file . At box the file storage application can transmit the one or more encrypted security key corresponding to the secured file to the authenticator device . In this way the secured file and the encrypted security key are provided to different computing devices so that a user can be required to obtain the encrypted security key from the authenticator device to access the secured file on the access device . In some embodiments the security key embedded within the encrypted security key can correspond to a security key that is used to access a collection of security keys from which a file specific security key is extracted.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the authenticator application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the authenticator application as described herein. As an alternative the flowchart of FIG. may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments. Functionality attributed to the authenticator application can be implemented in a single process or application executed by the authenticator device and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the authenticator application can obtain a request to access an authenticator code or a double encrypted security key on behalf of an access device associated with a user. Such a request can take the form of a user executing the authenticator application on the authenticator device or the authenticator application receiving a request from the access device . Such a request can also be generated in response to a file decrypter executed by the access device attempting to access a secured file . If such a request is received then at box the authenticator application can generate a double encrypted security key that is encrypted based upon a time varying password generated by the authenticator application . At box the authenticator application can transmit the double encrypted security key to the file decrypter executed by the access device . Thereafter the process proceeds to completion at box .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the file decrypter accessing a secured file according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the authenticator application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the computing environment according to one or more embodiments. Functionality attributed to the authenticator application can be implemented in a single process or application executed by the authenticator device and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the file decrypter can obtain a request to access a secured file obtained from the file storage application on behalf of a access device associated with a user. Such a request can take the form of a user attempting to access a particular file via the file storage application or a storage account of the user. If such a request is received then at box the file decrypter can obtain a double encrypted security key that is encrypted based upon a time varying password generated by the authenticator application from an authenticator device . At box the file decrypter can generate a time varying password in order to remove the first encryption layer from the double encrypted security key .

At box the file decrypter can remove the first encryption layer from the double encrypted security key using the time varying password. In other words the file decrypter can extract the encrypted security key from the double encrypted security key . At box the file decrypter can then decrypt the encrypted security key using the private key stored on or accessible to the access device to extract the security key associated with the secured file . At box the file decrypter can then decrypt the secured file using the security key extracted from the double encrypted security key . In some embodiments the security key embedded within the encrypted security key can correspond to a security key that is used to access a collection of security keys from which a file specific security key is extracted. Thereafter the process proceeds to completion at box .

The authenticator device access device or computing devices comprising the computing environment can include at least one processor circuit for example having a processor and at least one memory device both of which are coupled to a local interface respectively. Such a device may comprise for example at least one computer a mobile device smartphone computing device or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory device are both data and several components that are executable by the processor. In particular stored in the one or more memory device and executable by the processor of such a device can be the authenticator application file decrypter the file storage application and potentially other applications. Also stored in the memory may be a data store and other data.

A number of software components are stored in the memory and are executable by a processor. In this respect the term executable means a program file that is in a form that can ultimately be run by the processor. Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of one or more of the memory devices and run by the processor code that may be expressed in a format such as object code that is capable of being loaded into a random access portion of the one or more memory devices and executed by the processor or code that may be interpreted by another executable program to generate instructions in a random access portion of the memory devices to be executed by the processor etc. An executable program may be stored in any portion or component of the memory devices including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

Memory can include both volatile and nonvolatile memory and data storage components. Also a processor may represent multiple processors and or multiple processor cores and the one or more memory devices may represent multiple memories that operate in parallel processing circuits respectively. Memory devices can also represent a combination of various types of storage devices such as RAM mass storage devices flash memory hard disk storage etc. In such a case a local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memory devices etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

The computing device may include a display upon which a user interface generated by the file storage application or another application can be rendered. The computing device may also include one or more input output devices that may include for example a capacitive touchscreen or other type of touch input device fingerprint reader keyboard etc.

Although the file storage application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The sequence diagram and flowcharts show an example of the functionality and operation of an implementation of portions of components described herein. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the sequence diagram flowcharts show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in the drawings may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to solid state drives flash memory etc. Further any logic or application described herein may be implemented and structured in a variety of ways. For example one or more applications described may be implemented as modules or components of a single application. Further one or more applications described herein may be executed in shared or separate computing devices or a combination thereof. For example a plurality of the applications described herein may execute in the same computing device or in multiple computing devices. Additionally it is understood that terms such as application service system engine module and so on may be interchangeable and are not intended to be limiting.

It is emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiments without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

