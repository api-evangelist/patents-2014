---

title: Multi-tiered coarray programming
abstract: Techniques are provided for multi-tiered coarray programming. An exemplary coarray programming method comprises obtaining an index address identifying a memory element in a memory array in a multi-tiered storage environment, wherein the index address comprises an identifier of a storage tier within the multi-tiered storage environment where the memory element is stored; and converting the index address to one or more of a path name, an object name and a key value based on the identified storage tier to access the memory element. Exemplary aspects of the invention extend a coarray programming model to employ one or more of a file interface and an object interface for remote storage tiers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501229&OS=09501229&RS=09501229
owner: EMC IP Holding Company LLC
number: 09501229
owner_city: Hopkinton
owner_country: US
publication_date: 20141223
---
The field relates generally to data storage and more particularly to data storage using coarray programming.

Many compute sites support a combination of enterprise and High Performance Computing HPC applications. HPC workloads tend to be comprised of a plurality of interdependent parallel processes that must run synchronously in time due to the large amount of inter process communication. Typical HPC workloads execute on clusters of compute nodes interconnected by a low latency network. Enterprise workloads on the other hand tend to be independent tasks that do not require a significant amount of inter process communication.

Unfortunately the compute infrastructure historically employed for an enterprise site does not closely resemble the compute infrastructure historically employed for HPC sites. Therefore distinct compute sites have typically been employed for each workload type. It is anticipated however that HPC and enterprise computing systems will converge. For typical compute systems there is significant pressure to support a variety of services using a shared converged infrastructure.

Coarrays are an extension of Fortran and allow a set of cooperative processes to share memory arrays. Each process often referred to as an image has its own private variables. Coarrays are variables that are visible on more than one image. Coarray Fortran employs a coarray parallel programming model that extends the array syntax of Fortran with indices to indicate the location of a data element across a set of cooperative processes.

In both HPC and enterprise environments there is an emerging hardware architecture in which multi tiered storage is employed. For example the multi tiered storage may comprise a fast storage tier and a slow storage tier where fast and slow in this context are relative to one another. Thus in order for HPC applications to be successfully deployed in a multi tiered enterprise storage environment a need exists for a coarray parallel programming model for multi tiered enterprise storage architectures.

Illustrative embodiments of the present invention provide techniques for multi tiered coarray programming. In one embodiment a coarray programming method comprises obtaining an index address identifying a memory element in a memory array in a multi tiered storage environment wherein the index address comprises an identifier of a storage tier within the multi tiered storage environment where the memory element is stored and converting the index address to one or more of a path name an object name and a key value based on the identified storage tier to access the memory element. Exemplary aspects of the invention extend a coarray programming model to employ a file interface and or an object interface for remote storage tiers.

The index address can be converted for example by converting an access of an array element to an access of a storage tier in the multi tiered storage environment using storage communications and or by employing a software function to concatenate a plurality of index values within the index address into the one or more of the path name the object name and the key value.

The multi tiered coarray programming techniques of the illustrative embodiments overcome one or more of the problems associated with the conventional techniques described previously and allow HPC applications to be deployed in a multi tiered enterprise storage environment. These and other features and advantages of the present invention will become more readily apparent from the accompanying drawings and the following detailed description.

As will be described the present invention in one or more illustrative embodiments provides techniques for multi tiered coarray programming. At least one embodiment of the invention extends the coarray parallel programming model of Coarray Fortran to employ one or more indices identifying a particular storage tier where a data element is stored within a multi tiered enterprise storage environment. Coarray Fortran is typically implemented on top of an MPI library for portability. While exemplary embodiments of the present invention employ MPI communications and the associated MPI application programming interface API and library other message passing paradigms can be employed as would be apparent to a person of ordinary skill in the art. In addition while the exemplary embodiment is discussed in the context of particular exemplary storage architectures for each storage tier such as a flash storage tier comprised of one or more PCIE linked DSSD flash storage devices from EMC Corp. the present invention may be employed in any multi tiered storage environment as would be apparent to a person of ordinary skill in the art.

Additional aspects of the invention extend existing MPI libraries to augment their existing support for traditional coarray programming with an implementation that provides a coarray parallel programming model for multi tiered enterprise storage architectures. Exemplary pseudo code for the extended MPI libraries to implement the multi tiered storage aspects of the invention is discussed below in conjunction with .

The interdependent parallel processes Pthrough Pcan access various storage tiers and communicate with one another using one or more networks and or interconnects. In the exemplary embodiment each exemplary compute node comprises a disk server through M a file system client through M and a PCIE bus through M.

The disk servers through M are interconnected by an interconnect network . The disk servers through M allow the processes on a respective compute node such as compute node to access its own local storage disk or the local storage disk through M of another compute node through M over the interconnect network .

The processes on a respective compute node such as compute node can access its own memory array using direct memory access. The processes on a respective compute node such as compute node can access the memory array through M of another compute node through M using the coarray Fortran communications described herein.

The file system clients through M allow the processes on a respective compute node through M to access an exemplary file system stored on one or more disk storage nodes through J over a storage network . One or more of said disk storage nodes can be embodied using an exemplary Kinetic Open Storage platform from Seagate Technology LLC.

The PCIE buses through M allow the processes on a respective compute node through M to access one or more PCIE linked DSSD flash storage devices a PCIE bus over a PCIE switch as discussed further below. While exemplary embodiments of the present invention employ Peripheral Component Interconnect Express PCIE communications other low latency communications can be employed as would be apparent to a person of ordinary skill in the art.

With respect to the exemplary embodiment of for example tier 0 can be comprised of the memory array on the respective compute node tier 1 can be comprised of the one or more PCIE linked DSSD flash storage devices tier 2 can be comprised of the local file system stored on the remote memory arrays of other compute nodes accessed over the interconnect network and tier 3 can be comprised of the remote file system stored on the one or more disk storage nodes through J.

In the exemplary embodiment the source and destination addresses for the get and put operations comprise 4 tuple values in a similar manner to the array address discussed above in conjunction with . A put operation converts the exemplary 4 tuple array address to a key indicating a memory address and node. Likewise a get operation converts a key indicating an address and node to the exemplary 4 tuple array address.

Among other benefits the disclosed multi tiered coarray programming techniques of the illustrative embodiments allow HPC applications to be deployed in a multi tiered enterprise storage environment.

The compute nodes through M or portions thereof comprising a processor memory and network interface components as described above are examples of what is more generally referred to herein as a processing device. Each of the devices herein may similarly be implemented as a processing device comprising processor memory and network interface components. Thus one or more of the exemplary compute nodes through M in the exemplary enterprise environment comprises a processor coupled to a memory. The processor may comprise a microprocessor a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA or other type of processing circuitry as well as portions or combinations of such circuitry elements. The memory may comprise random access memory RAM read only memory ROM or other types of memory in any combination. The memory and other memories disclosed herein may be viewed as examples of what are more generally referred to as computer program products storing executable computer program code. Also optionally included in one or more of the exemplary compute nodes is network interface circuitry. The network interface circuitry allows the exemplary compute nodes to communicate over a network with other devices. The network interface circuitry may comprise for example one or more conventional transceivers.

It is to be appreciated that the particular operations and associated messaging illustrated herein are exemplary only and numerous other types of operations and messaging may be used in other embodiments.

It should therefore be understood that in other embodiments different arrangements of additional or alternative elements may be used. At least a subset of these elements may be collectively implemented on a common processing platform or each such element may be implemented on a separate processing platform.

Also numerous other arrangements of computers servers storage devices or other components are possible in the exemplary enterprise environment of the present invention. Such components can communicate with other elements of the exemplary enterprise environment over any type of network or other communication media.

As indicated previously components of an exemplary enterprise environment as disclosed herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device. A memory having such program code embodied therein is an example of what is more generally referred to herein as a computer program product. 

The exemplary enterprise environment or portions thereof may be implemented using one or more processing platforms each comprising a plurality of processing devices. Each such processing device may comprise processor memory and or network interface components.

As indicated above the disclosed multi tiered coarray programming techniques described herein can be implemented at least in part in the form of one or more software programs stored in memory and executed by a processor of a processing device such as a computer or server. A memory or other storage device having such program code embodied therein is an example of what is more generally referred to herein as a computer program product. Certain system components are implemented using a combination of software and hardware.

It should again be emphasized that the above described embodiments of the invention are presented for purposes of illustration only. Many variations and other alternative embodiments may be used. For example the disclosed techniques are applicable to a wide variety of other types and arrangements of compute nodes and interrelated processes that can benefit from the disclosed multi tiered coarray programming functionality as described herein. Also the particular configurations of system and device elements shown in can be varied in other embodiments. Moreover the various assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

