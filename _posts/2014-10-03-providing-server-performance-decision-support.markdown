---

title: Providing server performance decision support
abstract: An application provides server performance decision support to end-users. The application monitors the transaction data of servers. The transaction data includes network communications as well as server specific information such as resource utilization. The application captures a sample of the transaction data. The captured sample can be random or predetermined. The sample is limited in length according to a preset time value. The application analyzes the sample to determine performance metrics for the server. The application presents the performance metrics within a business intelligence data structure to enable an end-user to data mine the performance metrics according to additional variables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09264324&OS=09264324&RS=09264324
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09264324
owner_city: Redmond
owner_country: US
publication_date: 20141003
---
This Application is a continuation under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 325 883 filed on Dec. 14 2011 now patented as U.S. Pat. No. 8 874 773 on Oct. 28 2014. The disclosure of the U.S. Patent is hereby incorporated by reference in its entirety.

Distributed computing technologies have enabled multiple computing resources to provide coordinated or distinct solutions. An example of distributed computing cloud computing brings together multiple systems to provide solutions to user needs. Cloud computing can span a vast array of computing resources. The computing resources utilized in cloud computing applications may be dispersed across networks and locations. Dispersed computing resources are remotely controlled and managed. Usually automated systems monitor and troubleshoot problems associated with dispersed computing resources. Manual troubleshooting by human components of widely dispersed computing resources is not cost effective.

Conventional monitoring solutions for cloud computing systems performance have limitations. The amount of data generated by cloud computing systems is vast. Computing power necessary to analyze and produce performance metrics from the data is equally large. Conventional solutions typically rely on threshold based implementations. Such implementations are usually inflexible and rarely meet customer demands for redirecting servers to other purposes. Current monitoring implementations also frequently require human intervention to configure parameters and other values to maintain normalized operations. Additionally data mining and other end user based post analysis needs are rarely met by current approaches.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identity key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to server performance monitoring in very large scale cloud computing environments. According to some embodiments an application may provide server performance decision support. The application may monitor transaction data of one or more servers. The transaction data may include communications data performance parameters etc. The application may capture a sample of the transaction data of the monitored server s . The sample may be limited according to a preset time value. The application may analyze the sample to determine performance metrics for the monitored server s . Performance metrics may include resource availability. The application may present the performance metrics within a business intelligence data structure which may provide analyzed performance data according to multiple variables. An example may be an online analytical processing OLAP cube presenting performance metrics according to multiple parameters such as resources utilization etc.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above an application may provide server performance decision support. The application may monitor transaction data of a server. The server may be a remote or a local server providing a variety of services. The application may have access to server specific transactions such as performance parameters or access to network traffic of the server. The application may capture a sample of the transaction data of the server. The sample may be a grain of the transaction data limited according to a preset length of the grain. The application may analyze the sample to determine performance metrics for the server. The application may employ deterministic algorithms to detect server behavior from the analysis. Next the application may present the performance metrics within a business intelligence data structure. The application may provide the performance metrics according to analyzed variables in a structure best suited to present multiple variable based data analysis.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in the limiting sense and the scope of the present invention is defined by the appended claims and their equivalents. While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium is a computer readable memory device. The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

According to embodiments an application may monitor servers for performance data. Performance data may encompass variety of server operations including resource utilization availability consumption and or predictable events. The application may reside within a full system embodied by a monitoring server executing the application. Alternatively the application may execute as a part of a monitoring platform running within the monitored server. Yet in other embodiments the application may be a distributed application having components reside in monitored servers as well as in analysis servers. In other embodiments the application may monitor local servers within a local network and remote servers outside the local network.

The application may capture and analyze the transaction data of servers and within performance monitoring server . The analysis may be performed through variety of business intelligence methods including multiple variable analyses of performance data. The application of performance monitoring server may produce performance metrics upon the conclusion of the analysis and present the performance metrics for consumption. An end user may retrieve the performance metrics by accessing the application of performance monitoring server through network s .

Subsequently the application executed on the performance monitoring server may analyze the sample of the transaction data stored in local copy through data processing . The local copy may be a data store. The data store may be temporary such as a cached data store. Alternatively the data store may be persistent. Data processing may generate performance metrics from the transaction data and store the performance metrics in a business intelligence data structure to enable subsequent data mining. An example business intelligence data structure may be a pivot table organizing the performance metrics according to multiple variables. Upon conclusion of the analysis the application may employ a data removal process to remove sample transaction data from local copy . An example of removed data may be sample data with an expiration value. Upon reaching the expiration time the application may remove the sample data from the local copy .

According to an example embodiment the application may utilize Structured Query Language SQL analysis services of the performance monitoring server to generate high performance queries. High performance queries may analyze the sample of the transaction data according to scalable algorithms to meet demand for performance metrics. The application may provide self service business intelligence to end users through the high performance queries. In an example the performance metrics may be generated on the fly upon business intelligence needs of the end user. The application may tailor production of the performance metrics according to analysis parameters provided by the end users.

According to another example embodiment the application may group a monitored server with others according to an operations category. The categories may include a service a role or similar ones. The application may analyze the sample using additional control management business logic associated with the operations category of the server. In an example scenario the application may apply different parameters to performance metrics analysis according to an operation category of a server having a mission critical role. An example may be lowered responsiveness parameters for a mission critical server compared to a server belonging to a data center based service operations category. The additional control management business logic may employ algorithms tailored to measure performance metrics associated with the operations category.

According to further embodiments the application may execute an in depth data mining analysis to determine the performance metrics. An in depth data analysis may scrutinize the transaction data to compare one or more performance metrics against a predetermined normal server behavior range to determine an operational status of the server. The operational status may include a normal operation and an abnormal operation. Alternatively the application may predict a resource depletion event by comparing one or more server utilization servers retrieved from the performance metrics against a predetermined threshold value. The application may trigger a messaging process to alert about the resource depletion event a responsive entity associated with the resource depletion event. The responsive entity may be an end user a monitoring server and another application.

According to yet other embodiments the application may determine key server performance issues from the performance metrics. The key performance issues may indicate an underperforming server according to preset performance values. Conversely the key performance issues may also enable discovery of an underutilized server or groups of servers indicating an opportunity for virtualization as an improvement in efficiency saving cost and energy resources. The application may present the key server performance issues through a reporting service for cloud computing analysis. Cloud computing analysis may assess and take corrective action to improve the health of the cloud computing. The key server performance issues may include a server health analysis a server performance analysis or a server resource analysis.

Alternatively a content management application may implement a scheduled refresh to retrieve performance metrics from the analysis services . The content management application may present the performance metrics to an end user in a corporate or other separate environment through secure communications using secure communication port . Additionally the content management application may transmit the performance metrics to an archive through a scheduled export process .

According to an embodiment the performance metrics produced as result of the analysis services may be stored at an intermediary data table . The stored performance metrics may be refreshed automatically . The performance metrics may be transmitted to an archive from the data table . The archive may be replicated through a file replication process and a local copy may be stored in an archive within the corporate or other separate environment. Another content management application may access the archive and present performance metrics to another end user .

According to another embodiment the application may employ a star schema utilizing key dimensions to analyze the sample. The key dimensions may include objects counters and instances of the performance metrics. Additionally the application may provide aggregation and report design functionality for the performance metrics to the end users through utilization of the key dimensions. An example may be aggregating performance metrics according to an instance of the performance metric such as maximum memory utilization or by server categorization or classification algorithms such that servers are grouped together with other like servers.

According to some embodiments the business intelligence data structure may be an online analytical processing OLAP cube or a pivot table. Either structure may provide analyzed data grouped according to multiple variables.

According to further embodiments the application may capture a grain as a sample of the transaction data. The grain may be captured according to the length of the grain. The length of the grain may be a predetermined number of seconds a predetermined number of minutes and a predetermined number of hours. The application may retain the grain for a predetermined time period associated with the length of the grain. An example may be retaining a grain under 60 seconds for a number of days a grain between 1 and 60 minutes for number of weeks and a grain between 1 and multiple hours for number of months. Additionally the application may provide historical trend analysis for the performance metrics determined from the retained grain. The application may display trend reports by analyzing the changes in a monitored performance metric determined from the retained grain.

A data schema according to embodiments may for example have a PERFORMANCE MONITOR table to relate performance metrics values to each other. A SERVER table may store values to identify the monitored server. A CALENDAR TIME table may store date time information about the timing and length of the sample of the transaction data. A PERFORMANCE COUNTER table may store values about the performance metric. A CALENDAR DATA table may store time stamp information defining preset values for time ranges to be used during sample analysis to produce performance metrics.

Various configurations data structures server roles and interactions are used in through to describe example embodiments. The examples are for illustration purposes and embodiments are not limited to those. Different aspects of the presented disclosure may be implemented using other configurations servers interactions and data structures using the principles described herein.

As previously discussed server performance decision support may be provided by the hosted service or application. The performance metrics may be analyzed from a grain or sample of the server transaction data.

Client devices are used to access the functionality provided by the hosted service or application. One or more of the servers or a server may be used to provide a variety of services as discussed above. Relevant data may be stored in one or more data stores e.g. data store which may be managed by any one of the servers or by database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include a secure network such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as PSTN or cellular networks. Network s provides communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to provide server performance decision support. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Analysis module may operate in conjunction with the operating system or performance support application and provide performance metrics as discussed previously. Analysis module may also enable self service business intelligence by providing the performance metrics in end user configurable business intelligence data structures. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device an optical capture device for detecting gestures and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wireless network in a distributed computing environment a satellite link a cellular link and comparable mechanisms. Other devices may include computer device s that execute communication applications other directory or policy servers and comparable devices.

Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where an application may monitor transaction data of a server. The server may be grouped to an operational category with other servers according to a service a role or similar aspects. Subsequently the application may capture a sample of the transaction data of the server at operation . The sample may be a grain of the transaction data captured according to a length of the grain. The grain length may be a predetermined time value. Next the application may analyze the sample to determine performance metrics for the server at operation . The performance metrics may include resource consumption resource availability server health etc. At operation the application may present the performance metrics in a business intelligence data structure. The business intelligence data structure may be an OLAP cube a pivot table or similar data structure enabling an end user to analyze the performance metrics according to multiple variables.

The operations included in process are for illustration purposes. Providing server performance decision support according to embodiments may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

