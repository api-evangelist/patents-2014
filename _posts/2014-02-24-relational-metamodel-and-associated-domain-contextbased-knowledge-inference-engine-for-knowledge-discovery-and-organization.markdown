---

title: Relational meta-model and associated domain context-based knowledge inference engine for knowledge discovery and organization
abstract: Methods and systems for knowledge discovery and organization employ a relational meta model and domain context-based knowledge inference engine to produce answers to queries that involve inferences among items stored as knowledge in a knowledgebase.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832147&OS=08832147&RS=08832147
owner: KNF Technologies, Inc.
number: 08832147
owner_city: San Martin
owner_country: US
publication_date: 20140224
---
This application is a CONTINUATION of U.S. application Ser. No. 13 596 539 filed Aug. 28 2012 which is a NONPROVISIONAL of and claims priority to U.S. Provisional Application No. 61 530 356 filed Sep. 1 2011 the contents of which are incorporated herein by reference.

The present invention relates to methods and systems for knowledge discovery and organization and in particular to such systems and methods as employ a relational meta model and a domain context based knowledge inference engine.

Relational databases organize data into tables of rows and columns according to strictly defined rules. Columns are typically related by way of a key and these relationships are subject to certain restraints. When a user submits a query these rules keys and constraints are used to search through information stored in the relational database to find data that matches the query. However such searches are limited to literal interpretations of the query and the literal application of the rules keys and constraints to the data stored within the relational database. Consequently certain relationships between the stored data and the query are missed because they are not literally correlated to the query or how the data is classified or categorized within the relational database using the rules keys and constraints.

Embodiments of the invention provide methods and systems for knowledge discovery and organization in particular such systems and methods as employ a relational meta model and domain context based knowledge inference engine. The present invention finds particular application where inferences involving items stored as knowledge in a knowledgebase e.g. a meta detect data store are required. The items may be discovered through accesses to remote data stores. Thus the present invention provides a system with learning capabilities i.e. inferences based on data become available even though the original knowledge stores housing such data may not have provided such capabilities. Further since the present system uses a discovered meta model to correlate unrelated data using genetic algorithms by finding disjointed relationships it exhibits intelligence to accommodate variations in datasets and types of data values to derive dynamic results in the form of resultant datasets. Finally the present system is inherently scalable inasmuch as whenever an input query or keywords cannot be resolved the system requests external input to provide clarification. These clarifications can be in form of computational arithmetic expressions or proportionality functions which are stored in the knowledgebase.

Throughout the drawings the same reference numerals and characters unless otherwise stated are used to denote like features elements components or portions of the illustrated embodiments. Moreover while the subject invention will now be described in detail with reference to the drawings the description is done in connection with the illustrative embodiments. It is intended that changes and modifications can be made to the described embodiments without departing from the true scope and spirit of the subject invention as defined by the appended claims.

The present system utilizes a relational meta model which organizes and stores information in multiple dimensions organized in a hierarchical fashion. The meta model is an assembly of meta names their aliases and dependent terms along with relationship information associating the terms to one another that collectively describe a meta data schema. The present invention utilizes the associations specified in the meta data schema to derive inferences. For example the knowledge inference engine will infer and extract knowledge based on a descriptor or combination of descriptors that are part of the meta data schema. The meta data schema provides the domain that is being addressed and the context to address it.

The dataset on which the knowledge inference engine operates is defined by a set of keywords. As described in detail below the keywords form the meta model that describes the underlying information. The keywords and their associations with one another are discovered dynamically for example from Web based data sources or other data sources. By dynamically building a set of associations among keywords from information included in different data sources the present system is able to respond to queries even if the queries themselves do not employ terms that are themselves keywords in a particular dataset. That is the meta data schema into which the dataset is organized allows the knowledge inference engine to processes infer and derive knowledge i.e. responses to inquiries from the dataset whether or not the terms used in the queries match particular keywords.

Before discussing the present system in detail it is important to recognize that embodiments of the present invention may be implemented with the aid of computer implemented processes or methods a.k.a. programs or routines that may be rendered in any computer language including without limitation C C C Fortran COBOL PASCAL assembly language markup languages e.g. HTML SGML XML VoXML and the like as well as object oriented environments such as the Common Object Request Broker Architecture CORBA Java and the like. In general however all of the aforementioned terms as used herein are meant to encompass any series of logical steps performed in a sequence to accomplish a given purpose. In view of the above it should be appreciated that some portions of the description that follows are presented in terms of algorithms and symbolic representations of operations on data within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the computer science arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated.

It will prove convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it will be appreciated that throughout the description of the present invention use of terms such as processing computing calculating determining displaying or the like refer to the action and processes of an appropriately programmed computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention can be implemented with one or more apparatus to perform the operations described herein. This apparatus may be specially constructed for the required purposes or it may comprise a computer system that is selectively activated or reconfigured by a computer program which it executes and which is stored on one or more computer readable storage mediums accessible to processing elements of the computer system. For example such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks compact disk read only memories CD ROMs and magnetic optical disks read only memories ROMs flash drives random access memories RAMs erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs flash memories hard drives or other forms of magnetic or optical storage media or any type of media suitable for storing electronic instructions and each accessible to a computer processor e.g. by way of a system bus or other communication means.

The algorithms and processes presented herein are not inherently related to any particular computer system processor or other apparatus. Various electronic computing apparatus along with where necessary suitable computer programs that instantiate processes in accordance with the teachings herein may be used. For example any of the present methods can be implemented in hard wired circuitry by appropriate programming of a computer processor or processors or any combination of hardware and software may be used to carry out the methods discussed below. Of course the invention can be practiced with computer system configurations other than those particularly described below including systems that comprise hand held devices multiprocessor systems microprocessor based electronic devices digital signal processor based devices networked computer systems minicomputers mainframe computers personal computers and the like and it should be recognized that these examples presented herein are used merely for purposes of illustration. The invention can also be practiced in distributed computing environments where tasks are performed by computer processing devices that are remote to one another either physically and or logically and are linked through one or more communications networks. The required structure for a variety of these systems will appear from the description below.

For purposes of example one form of computer system which may be configured in accordance with embodiments of the invention includes a bus or other communication mechanism for communicating information and a processor coupled with the bus for processing information. Such a computer system also includes a main memory such as a RAM or other dynamic storage device coupled to the bus for storing information and instructions to be executed by the processor. The main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by the processor. The computer system further includes a read only memory ROM or other static storage device coupled to the bus for storing static information and instructions for the processor. A storage device such as a magnetic disk or optical disk is provided and coupled to the bus for persistent storage of information and instructions.

The computer system may be coupled via the bus to a display such as a liquid crystal display LCD light emitting diode LED display or other display device for displaying information to a computer user. An input device typically including alphanumeric and other keys is usually coupled to the bus for communicating information and command selections to the processor. Another type of user input device for cursor control such as a mouse a trackball or cursor direction keys may also be present for communicating direction information and command selections to the processor and for controlling cursor movement on the display.

The computer system operates in response to the processor executing sequences of instructions contained in the main memory. Such instructions may be read into the main memory from another computer readable medium such as the persistent storage device. Execution of the sequences of instructions contained in the main memory causes the processor to perform the process steps described below. In alternative embodiments hard wired circuitry may be used in place of or in combination with computer software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The computer system may also include a communication interface coupled to the bus. The communication interface provides two way data communication for the computer system across one or more networks for example via a wired or wireless communication interface. The network may be a local area network LAN which itself is coupled to one or more other networks and other computer based devices and or data stores. For example the computer system may be coupled to data equipment operated by an Internet Service Provider ISP which in turn provides data communication services through the Internet. Thus the computer system can send and receive messages and data including program code through its communication interface.

With the above in mind we return to a discussion of the system illustrated in . Above it was noted that the system is configured to respond to and process queries. The query may be classified as an inquiry one that is inference based or one that is forecast based. Depending on its type the query will trigger one or more computer executed processes to formulate and or explore the meta model use it to gather data from one or more data sources and ultimately present it to a user in a selected or determined format. The various engines namely the reporting trending and predictive analysis engines and respectively illustrated in operate on the extracted data to produce the desired result. The result in this case may be presented as a printed output e.g. a tabular sheet graph or stream comprising multiple numeric and or character values and or a visual output on a display. In some instances the output may be or may include an electronic message such as an e mail or text message which is sent to one or more recipients.

As indicated above the present system employs a relational meta model to derive answers to queries. In one instance the meta model may include one or more charts e.g. tables or other two dimensional data structures each with several columns having titles. The titles describe the contents of the respective columns and hence describe the data. A single meta model can include several charts which may be related to one another by way of one or more relationships. illustrates an example of a meta model .

As shown in the illustration a section is used to allow meta model to store several two dimensional data structures. A single meta model may include several sections each of which comprises one or more columns also called members . Each member includes one or more associated definitions and or aliases which describe and or define the member. The aliases may be synonyms describing a respective column in a business context. Note also that a meta model will be always associated with a domain as in a business domain or industry and optionally one or more sub domains therein. For example a particular meta model may be associated with a healthcare industry domain and an insurance processing sub domain within the healthcare industry domain. Further each domain or sub domain may have an optional context that is an attribute that qualifies the respective sub domain or domain . Continuing the previous example the insurance processing sub domain within the healthcare domain may have an insurance billing context.

Finally since a single meta model can comprise several sections the sections may be associated with one another via a relationship . The section relationship attribute in the meta model allows for storing any inter relationship information between the sections . Such relationships come in several varieties. For example one section can be related to another section by a column . Note that this is different than a relational database schema where columns can be related only by ways of keys and these relationships can have a constraint. In the present meta model the section relationships can include a column association but can also specify a loosely coupled relation. The loosely coupled relation can be described using a proportionality expression or even an arithmetic expression or set qualifications such as can contain must contain etc. As an example a relationship can be stated as 

In some embodiments meta models may occur in multiple generations and may be categorized into for example a base meta model second generation meta model third generation meta model etc. Each generation may have a specified relationship to its prior generation s .

By definition the base meta model will be the first generation meta model defined in system either by a user or as derived from an existing database or data store such as data store . As indicated in the data store schema may be auto discovered for example using an access bridge e.g. an ODBC JDBC bridge or similar construct or using an application programming interface API that exposes data store e.g. in extensible markup language XML format . A discover external data source schema component of system may thus retrieve the data store schema assemble it e.g. in XML format and push it into the meta detect data store . The flowchart shown in describes a process used by discover external data source schema component to retrieve a data store schema with all of its attributes from an external data source via an external data access interface such as one or more of data stores .

At the outset it may be determined whether a data source interface is available step and if not it may be further determined whether data to be processed is in a free text form ASCII or EDI format step . When the data is in a free text form ASCII or EDI format a textual data discovery process such as process as described below with regard to may be executed step . When the data is not in a free form ASCII or EDI format the data may be unidentified and process may be aborted step .

When a data source interface is available configuration information is received from the user step . Such configuration information may include a selection of a data store access type e.g. ODBC JDBC and driver information and associates them with a database name. Then when invoked the configuration information is used to access one or more of data store s step . Data schema details are obtained step from the data store and assembled e.g. in an XML format with headers e.g. table name field name field descriptors if available field data type and values relationships and constraints etc. step . The resulting assembly is then formatted and saved in the meta detect data store step .

As mentioned in the process depicted in process utilizes user configured interfaces for the data sources that have predefined or available interfaces. For unknown data sources wherein the input is a stream of free text or ASCII data in no specific format a textual data discovery process as shown in may be executed.

Initially in step data in one or more segments is retrieved from an unformatted data source. The data may be in the form of for example free text ASCII or EDI formats. The data segments will be read step and delimiters may be placed on the data based on for example predefined data types and delimiters like SPACES NUMERIC DATE TIME or ALPHABETIC data characters occurring together step . For example when the data segments are in the form of 

A delimiter pattern may be retrieved from for example meta detect data store and compared with the delimiter pattern of the retrieved data step and when a match is found step domain keywords may be associated with the data segment s and a delimiter pattern for the received data segment s and the associated domain keywords may be derived and stored step . For example the above stream may be delimited as 

When a match is not found step context domain components of the context based relationship identifier may be used to associate the received data with a current business domain and context. When all fields of the received data are associated with domain keywords step step may be performed. When all fields of the received data are not associated with domain keywords step it may be determined whether the number of tries to perform the matching is exhausted step . When exhausted data characteristics may be retrieved from the contextual store and the delimiter positioning may be updated step and step may be repeated. When the number of tries is not exhausted the unidentified data elements may be registered step and step may be repeated.

Next in step it may be determined whether there are any more data segments of the received data remaining to be processed and if so steps may be repeated until all data segments are processed. When no data segments remain to be processed the retrieved record descriptions may be stored in meta detect data store step .

In some embodiments a record of the results of process may be saved in for future use or comparisons. As an example the above stream of data may be associated with the following meta data record layout 

In above pattern N stands for numeric data DT indicates date C stands for character data is the element separator indicates a space separator within an element and ND indicates decimal data.

The importance of storing the pattern along with the identified meta data description of the data is that when the next segment is read the assembly will first compare it with all the collected patterns and if it matches then it bypasses the discovery process and marks the record with already discovered meta data description. This can be helpful when discovering data from a large free text or ASCII stream. In some embodiments process may be configurable to allow a user to enter a maximum number of records to use to obtain meta data descriptions and collect patterns. Once the assembly passes the maximum record type limit it will simply read the data segment and compare it with existing pattern and classify it accordingly.

The assembly may then associate the meta data with the segment data and also reformat the input data into XML format providing a schema data layout and an example of this is shown below 

The process of defining a base meta model for a discovered data store schema is performed by the auto discovery meta model component illustrated in . illustrates a process used by the auto discovery meta model component to create a new base meta model for a data store schema. At the outset a data store schema is retrieved from the meta detect data store step . A new meta model with a new section is defined step . For each field and its attributes included in the retrieved data store schema a corresponding column is created in the new meta model e.g. field name data type value etc. step . Field descriptors are associated as definition attributes for the column in the meta model step . Once all of the fields have been registered in this fashion the relationships and constraints are retrieved from the data store schema and associated with the new meta model step . When storing the new meta model system stores all of the mappings between the original data store schema table fields and the meta model sections columns. The auto discovery meta model component may also perform meta model discovery for relational meta models as described below.

The discovery function can in some instances be performed manually via an appropriate user interface. In such instances the user may manually create the meta model and map it to the data store schema in meta detect data store . Regardless of whether it is done manually automatically or semi automatically once the base meta model has been created the user may review it and associate additional definition changes or aliases or even change the column names.

As indicated above each new generation of meta model once created by auto discovery or otherwise will reference previous generations and may also reference meta models of the same generation. A meta model relationship manager component manages the relationships between the generations of meta models as and when discovered by the auto discovery meta model component . illustrates an example of map showing meta model generations and their inter generational references.

As shown the base meta model has a one to one mapping with the original data store schema and each succeeding generation of meta model leverages that mapping by including a relation to its immediately preceding generation and in some cases multiple preceding generations thereby establishing a chain back to the base meta model . Stated differently a new generation meta model can be formed or its members derived by referencing more than one previous generation meta models. Since the discovery or formation of a next generation meta model by the auto discovery meta model component is expected to combine new information succeeding generations of meta models may be regarded as representing acquired knowledge. That is each successive generation of meta model is a derived meta model inferred from previous generations of meta models with relationship information managed and maintained by the meta model relationship manager . For example map illustrates the relationship between base meta model and a second generation meta model and the relationship between second generation meta model and a third generation meta model and the relationship between third generation meta model and an nth generation meta model .

To facilitate the storage of these newly discovered relationships some embodiments of the present invention use a meta model MM relation structure an example of which is depicted in . As shown a relationship between several meta models that are discovered during the auto discovery process and or generated by one or more processes described herein is saved as MM relation structure . MM relation structure provides details of meta models involved with one or more contributing members . Contributing members may include meta models that participate in a particular relationship definition . The relationship itself may be specified by a formula or other construct which specifies how the meta model and its members are related. An expression describes the formula and can be for example a computational equation or a proportionality expression. Finally for each member in the expression the domain or context by which it was found suitable for inclusion within MM relation structure is also specified in the structure.

Once the next generation meta model is derived by the auto discovery meta model component the derived meta model along with its associated relationships see is stored and managed in the meta detect data store by the meta model relationship manager . shows the layout of an exemplary relation structure for storing multiple generations of meta models.

As shown relation structure includes the next generation meta model description and a relation specifier which defines the related columns within the next meta model and associations with prior generation meta models. Note that the relation specified within relation structure can be direct like derived from or complex for example using a computational equation or proportionality to describe the derivation. Relation structure also facilitates describing discovered meta models which include the same structure as standard meta models.

The auto discovery meta model component uses specific process and sub processes and as shown in and respectively to achieve matches to queries and generate new meta models. It utilizes the matching of keywords and identities resolved by context based identity relationship generator component of system .

Beginning in an input stream that includes keywords domain and context information and associated identity and relationships is received e.g. in the form of information retrieved from a remote data source step . In response one or more base meta models are retrieved from meta detect data store step . In most cases the retrieved base meta models will match a domain specified or implied by the input stream. A first sub process A see is then called to selectively filter or reduce the number of meta models matching the input stream step so that only meta models that match the input stream are further processed step .

As shown in sub process selectively filters or reduces the number of meta model matching input streams. The process begins by obtaining keywords from the input stream step . The keywords are compared to the retrieved base meta model s columns step . When a match is found step the name of the matching base meta model and the columns matched are recorded step otherwise keywords from the input stream are compared to definitions and aliases included within the respective base models step and as before if a match is found step names of the matching meta models and the columns matched are recorded step . If no matches are found the keyword is simply recorded without a match and with a notification of no match being found step . Once all of the keywords have been evaluated the keywords and match results including the no match results may be packaged step and used to perform a second level sub process to further filter the match results to more closely match the scope of the input stream step .

Returning to upon return from sub process the auto discovery meta model component calls sub process B illustrated in to further filter the matching base meta models to match the scope of the input stream step . As part of this sub process column definitions and aliases are obtained from the context based domain taxonomy generator step . The column definitions and aliases are then compared to the non matching keywords step and when a match is found step the match is recorded step . When a match is not found step additional applicable associations to the non matching keywords that could not matched by direct comparison may be retrieved from a fuzzy engine step . Process may repeat until all non matching keywords have been tested and the keywords match results and meta model referenced are then packaged and returned to the main process illustrated in step .

Upon return from the second level sub process the auto discovery meta model component passes matching meta models with the input data stream to the meta model relationship manager to obtain a relational data stream step . The matching meta models and the relationship data are passed to the meta model assembly component to obtain singular discovered meta models step . Finally the meta model assembly is validated and stored in the meta detect data store as a new next generation meta model step .

Matching meta models as determined via process es and or may be packaged as an MM relationship schema shown in by the meta model relationship manager component and the MM relationship schema may be stored in the meta detect data store . illustrates an example of this process .

First in step an input stream including keywords context identifiers relationships and matching meta models may be received step and meta model columns that match input keywords may be retrieved step . For each matching reference meta model the section and column relationships of the meta model are retrieved step and identity names and context qualifiers and their aliases of the matching reference meta model are included in the MM relationship schema as new meta model aliases step . Next industry standard or other common reference names for meta model identifiers are retrieved and assigned as aliases to the columns and their definitions step and the referenced meta model column names and context qualifiers with related expressions are used to create relationship specifiers step . The new discovered meta model is stored along with relationships in the meta detect data store step . As process is performed for each matched meta model each matched meta model is appended to a newly discovered meta model based on the matching relationships step . Within this process additional column aliases and definitions with associated context expression information are obtained from the fuzzy engine for a preconfigured score limit. When process is complete the MM relationship schema is complete and a stream of information conveying the MM relationship schema is packaged and returned step .

As indicated above the meta model assembly component takes the input relationship stream and the meta model constructed from the matching columns validates it and repackages it to be saved into the meta detect data store for further use. Note that the meta model assembly component registers each newly discovered meta model under the specific domain context section of the data store and also maintains the bookkeeping of model creation as related to input query and resolved keywords. This information is used by the system to further check if a similar discovery of a new meta model for the same scenario was previously performed and if so is available to be returned as a previously constructed meta model instead of discovering a new one.

As shown in inputs to system are provided through an input interface and query resolution module component . Though module may provide a simple query interface the input stream can also be in for example an XML format coming from an external system. In one embodiment input interface and query resolution module component is a simple text interface that allows a user to enter the query in the form of a question. Alternatively graphical and or speech to text interfaces may be used. The input interface and query resolution module component decodes the content of user query and packages it in XML format for the next components in system to process. Processes and as shown in and respectively provide further details of the operation of the input interface and query resolution module component .

Beginning at an input stream that includes the user query and domain information is received step and decoded step . An exemplary decoding process is illustrated in . During decoding process the first word of the query is examined to determine the query type step . If the query begins with the word what step the type is determined as a composite conventional query step and the resolved query type is returned step . If the first word is how step the type is determined as forecast predictive step and the resolved query type is returned step . If the first word is generate step the next word in the query string is examined. If the next word is report table or chart step the query is classified as a report type step and the resolved query type is returned step . However if the word following generate is comparison or trend step the query type is determined to be trending step and the resolved query type is returned step . If no query type can be determined at this stage the process returns an error and seeks re entry of the query step . Note in the above described process the use of terms first word and next word or similar are not intended to be restrictive. The present system can parse syntaxes of the form 

Assuming a query type is returned the string is decoded with the potential keywords according to exemplary process as shown in . Process begins by removing the query type component step and obvious connectors such as is are the etc. as well as descriptive adjectives from the input stream query step . Numeric qualifiers are retained if they have associated e.g. immediately preceding or following descriptors such as year version etc. and the number string and its descriptor s are marked as a single keyword step . The remaining words in the stream are packaged as keywords both individually and in combinations with one another to represent the permutations of the keywords step and this package is returned to the process shown in step . In some cases the query type and keywords may be packaged e.g. in an XML stream with domain information and provided as an output.

In addition to queries having the above noted syntax embodiments of the present invention require the user to select or enter a domain to which the query pertains. The domain may be a specific industry such as Healthcare Industry Bio medical Hospitals Clinics Insurance Billing Investments Financial Banking etc. or a more particular market segment within a broader industry. It is worth mentioning that the input module can be replaced or supplemented by any other natural language interpretation engine to facilitate a more elaborate decoding of a received query.

The packaged streams of domain query type and possible keywords are passed to the context based domain taxonomy generator and industry based identity discovery components . Both the components use a predefined area in the meta detect data store to obtain a query resolution hierarchy. The meta detect data store may include a domain context store designed to provide association between the keywords and terms for a specific domain. The structure of an exemplary domain context section of the meta detect data store is shown in wherein for each domain one or more contexts are defined. Each context has one or more members . Each member has an associated definition with various attributes and an applicability . The attributes of the member definition may be refined by one or more qualifiers which include possible matches for keywords .

Context based domain taxonomy generator component utilizes information stored in and organized by the domain context section of the meta detect data store to derive a definitive context for an input user query stream. For example the information stored in domain and keyword may be used to query sections of the domain context section of the meta detect data store to derive the applicable contexts for the current user input. Note that the query type qualifier is also used by this component to further narrow down applicable contexts since the query type specifies whether the user request is computational reporting type or trending type. depicts an example of a process implemented by the context based domain taxonomy generator component to derive a definitive context for an input user query stream.

Process begins when an input stream comprising domain query type and possible keywords are received by the context based domain taxonomy generator component step . As shown if the input has been determined to be a reporting or trending type of query step all contexts that match the input domain and keywords are retrieved by matching keywords to context attributes and keywords step . If a match is found step the keyword stream is repackaged to include keywords for the context that match the definition step . If a match is not found step the user is prompted to clarify the input query and or keywords step .

If the query was determined to be a composite or forecast type step the keywords are matched to definitions for the keywords and all matching contexts are retrieved step . When a match is found step the keyword stream is repackaged to include keywords for contexts that match the definition step . If a match is not found step the user is prompted to clarify the input keywords step . Then a domain context stream applicable to the current user input is returned to system step .

In some embodiments system may use the clarification provided by the user in response to the request of step to build its own knowledge base of keywords and or user specific terms and hence provide a learning mechanism for the system to mature when as it is used.

Further the identities are related to each other and the scope of the relation can be direct or indirect as in loosely coupled . shows an example of a structure used for storing an identity relation . In the identity relation structure each domain may have any of several identities each having a defined relationship and associated keywords and expressions . Separate

Identities and the relationships may be used to derive various keywords which can be then associated with suitable contexts. It is important to mention that the identities and their relationships play an important role when deriving forecast type of query data. For example two identities e.g. stock prices and natural disasters may not be directly related but can be related by using a qualifier such as 

As illustrated in the context based identity relationship generator component takes the identities qualifiers and keywords of process and consolidates them together to retrieve relevant identity relationships in process . This is done by taking the received input domain context stream for the current user input step and the consolidated identities qualifiers and keywords expressions step and validating the domain context stream with reference to the associated keywords step . Next the identities and relationships are validated with reference to the associated keywords step . The meta detect data store is queried to finalize the list of keywords and context applicable to the current user query step and the identities are used to create and populate additional context definitions required for supporting the user query analysis step . The finalized keywords are packaged along with the query details and contexts step and the package is returned step . Thus the context based identity relationship generator component generates an output by packaging the keywords identities and associated context with all relationships and triggers the auto discovery meta model component.

One of the key tasks performed by the context based identity relationship generator component is the use of identities to populate relevant contexts that will be used by further components to discover a meta model matching an input stream and or query. For any query or keyword for which the previous component could not find a match it passes that query keyword to the fuzzy engine for further resolution. The fuzzy engine utilizes associations form the data store to find any applicable associations to the keywords that could not be matched by direct comparison. Alternatively or in addition the fuzzy engine may also utilize dictionary and or encyclopedia sections of the meta detect data store or from any remote source accessible to system to find synonyms matching the query keyword s in question.

An example of an associations data store structure is shown in . For each unmatched query and or keyword one or more direct or indirect associations may exist. The associations may be defined by a formula which may be defined as an expression and or represented as keywords members in the expression . Complex or composite unmatched queries and or keywords can be represented as expressions . As an example the keyword Labor Cost may be described by an expression such as Hourly Wages Hours Worked

Based on the current domain and contexts the fuzzy engine scores each discovered alternate keyword. For this it utilizes the synonym domain and its approximate closeness to the keyword in question. provides details of one example of a process used by the fuzzy engine to perform its task.

For input keywords with associated context requiring resolution step the resolutions and synonyms may be obtained from external sources step . If a match is found step the matching keywords are retrieved and scored step . Otherwise possible associations that match the keywords of their aliases are retrieved from the data store step and if a match is found step the possible associations of keywords participating in the expression are retrieved and included in an XML stream step . Ultimately the packaged keyword matches expression stream and associated score are returned step .

System produces the output for user actions using the components described above. To present the output system offers a singular interface component called the meta model inquiry interface component . The meta model inquiry interface component interfaces with the meta detect data store meta model assembly and meta model relationship manager to retrieve the discovered meta model s from the meta detect data store and pass it them to a respective engine e.g. reporting engine trending engine predictive analysis engine etc. based on the query type to route the output to a suitable channel. illustrates an example of a process flow executed by the meta model inquiry interface component .

As shown a received input stream includes a reference to the relevant meta model and contexts identity relationship step . The meta model details are retrieved from the meta detect data store step and the meta model mapping is resolved to an entity relationship diagram using for example backward progression to find the base meta model step and external databases may be queried for their respective result sets step . This is done for all meta models referenced in the input stream and the outputs are provided to the associated engine depending on the query type steps and .

Each of the respective engines take the result sets as input perform processing and data reformatting and pass it to the Output Interface Module steps and . For example when the query type is composite conventional step the result sets may be passed to trigger reporting engine step when the query type is forecast predictive step the result sets may be passed to trigger predictive analysis engine step and when the query type is trending step the result sets may be passed to trigger trending engine step . When a match is not found an error message is returned step . The Output Interface Module further provides presentation and formatting capabilities to present the results as table chart graphic or raw XML format or other desired format .

As shown the data clustering and organizer component provides the predictive analysis engine a way to derive the required goal result set. For facilitating prediction system uses the datasets and their associations through the keywords as related by expressions and or relationships.

Thus methods and systems for knowledge discovery and organization and in particular such systems and methods as employ a relational meta model and domain context based knowledge inference engine have been described. The present invention finds particular application where inferences involving items stored as knowledge in a knowledgebase e.g. the meta detect data store are required. The items may be discovered through accesses to remote data stores. Thus the present invention provides a system with learning capabilities i.e. inferences based on data become available even though the original knowledge stores housing such data may not have provided such capabilities. Further since the present system uses a discovered meta model to correlate unrelated data using genetic algorithms by finding disjointed relationships it exhibits intelligence to accommodate variations in datasets and types of data values to derive dynamic results in the form of resultant datasets. Finally the present system is inherently scalable inasmuch as whenever an input query or keywords cannot be resolved the system requests external input to provide clarification. These clarifications can be in form of computational arithmetic expressions or proportionality functions which are stored in the knowledgebase.

