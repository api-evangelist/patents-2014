---

title: Building an intelligent, scalable system dump facility
abstract: A computer program product and a computer system for building a scalable system dump facility is provided. The method includes loading a component into system memory. The component includes a plurality of program modules. A component text range table entry is created for each component, whereby the component text range table entry includes: an address range, a component identifier, a data collection function, and a link to one or more related components. Upon invoking a system dump facility, a failing function instruction is determined, based on an address of the failing instruction. The component text range table is searched for an address of a failing function that is in the address range. Memory regions that are associated with the address range are transferred to a storage device first. Memory regions that are associated with related components are transferred next. Remaining memory regions are then transferred.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09442791&OS=09442791&RS=09442791
owner: International Business Machines Corporation
number: 09442791
owner_city: Armonk
owner_country: US
publication_date: 20141107
---
This disclosure relates generally to computer systems and more particularly to building an intelligent and scalable system dump facility.

A system dump consists of the contents of the system memory regions that are in use in a computer at a given point in time. The system dump includes the program states of applications that were executing at the time. The operating system control structures such as page tables status flags control registers program counter and stack pointer are also captured in the system dump. Analyzing a catastrophic system or application failure is the most common purpose for creating a system dump. After its creation the system dump is typically written to a non volatile data file for further analysis to determine the root cause of the failure. Further system activity is suspended and recovery is not begun until the transfer of the system dump to the data file is complete. Since system memory sizes of 3 terabytes TB are common in enterprise class computer systems collecting the system dump data becomes time consuming in view of increasingly strict system availability requirements as may be set by service level agreements. Consequently system administrators may be encouraged to either prematurely abort system dump data collection or to forego it altogether rather than extend the duration of the system outage.

According to one embodiment a method for building a scalable system dump facility is provided. The method includes loading a component into system memory whereby the component includes a plurality of program modules creating a component text range table entry for each component whereby the component text range table entry comprises an address range a component identifier a data collection function and a link to one or more related components responsive to invoking a system dump facility determining a failing function based on an address of a failing instruction searching the component text range table for an entry whereby the address of the failing function is in the address range and transferring first number of memory regions associated with the address range to a storage device.

According to another embodiment a computer program product for building a scalable system dump facility including a computer readable storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method is provided. The method includes loading a component into system memory whereby the component includes a plurality of program modules creating a component text range table entry for each component whereby the component text range table entry comprises an address range a component identifier a data collection function and a link to one or more related components responsive to invoking a system dump facility determining a failing function based on an address of a failing instruction searching the component text range table for an entry whereby the address of the failing function is in the address range and transferring a first number of memory regions associated with the address range to a storage device.

According to another embodiment a computer system for building a scalable system dump facility including a memory a processing unit communicatively coupled to the memory and a management module communicatively coupled to the memory and processing unit whereby the management module is configured to perform the steps of a method is provided. The method includes loading a component into system memory wherein the component includes a plurality of program modules creating a component text range table entry for each component wherein the component text range table entry comprises an address range a component identifier a data collection function and a link to one or more related components responsive to invoking a system dump facility determining a failing function based on an address of a failing instruction searching the component text range table for an entry whereby the address of the failing function is in the address range and transferring a first number of memory regions associated with the address range to a storage device.

Although an illustrative implementation of one or more embodiments is provided below the disclosed systems and or methods may be implemented using any number of techniques. This disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

The present disclosure relates generally to the field of computer systems and more particularly to building an intelligent and scalable system dump facility. The following described exemplary embodiments provide a system method and program product to reduce the time required to collect diagnostic information upon a catastrophic system failure thereby reducing the time to collect the data required for root cause analysis.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

Turning now to a block diagram of an exemplary computer system server operable for various embodiments of the disclosure is presented. As shown the server is only one example of a suitable computer for executing the program instructions for selecting and prioritizing memory regions during system dump generation and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the disclosure described herein.

The server is operational in numerous other computing system environments or configurations. For example the server may be a standalone machine a virtual partition on physical host a clustered server environment or a distributed cloud computing environment that include any of the above systems or devices and the like. When practiced in a distributed cloud computing environment tasks may be performed by both local and remote servers that are linked together and communicate through a communications network such as the network .

The server may be described in the context of executable instructions such as a program or more specifically an operating system OS that is an aggregate of program modules being executed by the processing unit to control the operation of the server . Program modules perform particular tasks of the OS such as process management memory management and device management. The program modules may be implemented as routines programs objects components logic or data structures for example. The program modules performing the particular tasks may be grouped by function according to the server component that the program modules control. At least a portion of the program modules may be specialized to execute the algorithms of .

In a distributed computing environment such as a cloud computing environment each participating server may be under the control of an OS residing on each local and remote server respectively. In a virtual machine also referred to as a virtual server each instance of the virtual machine is an emulation of a physical computer. A physical computer may host multiple virtual machine instances each sharing the hardware resources of the physical computer and each emulating a physical computer. Each of the virtual machine instances is under the control of an OS .

As shown in the components of the server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components such as the system memory to processor .

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . The server may further include other removable non removable volatile non volatile computer system storage media.

By way of example only a storage system can be provided as one or more devices for reading from and writing to a non removable non volatile magnetic media such as a hard disk drive HDD or an optical disk drive such as a CD ROM DVD ROM. Each device of the storage system can be connected to bus by one or more data media interfaces. The program modules the OS and one or more application programs may be stored on the storage system and subsequently loaded into memory for execution as needed.

The server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with the server and or any devices e.g. network card modem etc. that enable the server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still the server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via a network adapter . As depicted the network adapter communicates with the other components of the server via bus . External storage adapter connects the server with external storage subsystems such as a storage area network SAN or RAID array. Exemplary external storage adapters include but are not limited to a host bus adapter HBA host channel adapter HCA SCSI and iSCSI depending upon the architectural implementation. The external storage adapter communicates with the processing unit and memory of the server over bus .

It should be understood that although not shown other hardware and or software components could be used in conjunction with the server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

As shown illustrates exemplary system trace output from a system dump and an excerpt from the associated component look up table according to various embodiments of the disclosure. A well known system debugger such as the kernel debugger KDB may be invoked to generate the illustrated output from the system dump file. Server memory is divided into platform dependent segments also referred to as regions. Various control structures in both the server and the OS track the properties associated with each memory region including which executables are using the memory region the process which owns the memory region and which processes are authorized to access the memory region. In normal operation when a process begins execution the OS allocates a platform dependent unit of memory for example a frame of real memory to store the execution environment of the process. The execution environment may include among other things the address in memory where the process was loaded variables and parameters used in the process and values assigned to the variables and parameters. For each subsequent process that begins execution such as when a process transfers control to another process the memory allocation and execution environment storing operations are repeated. Each line in the system trace including each of the two lines in entry represent a unit of memory into which the OS has stored the execution environment of an executing process.

As previously described with reference to the program modules of the OS may be grouped by function according to the server component that the program modules control. Following several preliminary low level operations to prepare the server hardware for further initialization the OS receives control and completes the startup i.e. boot process by loading into memory and starting the background processes such as the scheduler system logger and networking for the server to run. In computing a process is an instance of an executing program. Each process performs work on behalf of the component to which it belongs. As each component is loaded into memory the OS creates an entry for it in the component look up table here referred to as the component text range table. The component text range table may be located in pinned memory i.e. memory that cannot be swapped out to secondary storage thus ensuring its continued availability to the OS . A well known system debugger such as KDB may be invoked to inspect the system dump file and extract the system trace output and the component text range table as needed to determine a root cause of a system failure.

As will be discussed in more detail with reference to the functions std devstrat at address 000EF478 and devstrat 000EF7D0 appear in the system trace output as entry . Inspection of the component text range table shows that these functions belong to the specfs id component as shown by a comparison of the addresses in the entry for the component specfs id i.e. 000EF000 000EF900 .

At as each component is loaded into memory the OS creates an entry for it in the component text range table . The entry may include a starting and an ending address range for where the component is loaded in memory i.e. 000EF000 000EF900 an identifier for the component i.e. specfs id a data collection function that is invoked to collect the system dump output i.e. specfs cdt func and a link not shown such as an address pointing to other related components or subcomponents. The link may be used to locate components and subcomponents that should be transferred together if a system dump is requested since these related components and subcomponents may not be loaded sequentially in system memory.

At a system dump is invoked. In general a system dump begins when a catastrophic event in hardware or software prevents the server from continuing normal operation. For example in an instruction store interrupt ISI a component of the server such as the processing unit recognizes an exception when the address for an instruction access cannot be translated. Similarly a data storage interrupt DSI exception is recognized when the address for a data access cannot be translated. Alternatively a system dump may be manually invoked for example by a systems administrator.

At specialized components in the server for example registers not shown in the processing unit track the instruction address condition code and other information that is used to control instruction sequencing and to determine the state of the server . In cooperation with the specialized components the OS may obtain the address of the failed instruction that triggered the system dump.

Using the failed instruction address at the OS may determine the failed system component by searching the component text range for an address range that contains the failed instruction address.

At the OS begins transferring memory regions that are associated with the failed system component to a storage device such as storage system . These are the prioritized first memory regions. At as long as there are still more memory regions associated with the identified failed component the OS may continue transferring memory regions to the storage device. The transferred memory regions may include both memory regions associated with the identified failed component as well as those associated with related components. For example if the failed component is the logical volume manager LVM a related subcomponent may include the disk driver for the storage system . At least enough of the LVM memory and the disk driver memory may be prioritized to be transferred to the storage device to indicate a cause of the component failure. The related component memory regions are the second priority memory regions. This prioritization of memory region collection may increase the likelihood that in case of a prematurely aborted system dump the data for determining the root cause of the system failure is collected. Additionally after the prioritized memory regions have been collected the system may be restarted. This not only reduces system down time but also saves storage device space since only a fraction of the as much as 3 terabytes TB of the total system memory may be needed for root cause analysis.

The remainder of system memory is the third priority for transfer to the storage device. Having completed the transfer of the memory regions at the OS may proceed to transfer the memory regions associated with the remaining components. In another embodiment the system dump component may separately store diagnostic information related to the system failure for example in a database or other similar data storage for later analysis. The stored diagnostic information may at least include an error code the most recently called functions and parameter values associated with the most recently called functions. Through statistical analysis and modeling the failure symptom may be associated with a resolution based on its likelihood of success. A measure of accuracy i.e. success rate for the resolution as applied to system failures having the identified characteristics may be calculated thereby generating several suggested resolutions in decreasing likelihood of success improving product quality and improving the efficiency and accuracy of customer support engineers.

At an end user such as a systems programmer selects a component for additional data collection. For example the user may select a component by its identifier from a list of components that are currently registered with the system dump facility but should be included for additional data collection. Alternatively the user may register the component with the OS for additional data collection using an API provided by the OS vendor. The component registration may include at least a component name and a name of a function for the system dump and additional data collection facility to invoke. The named function may include at least one condition to monitor such as a particular error code error severity or value of a variable at least one action to take upon a condition occurring such as to collect specified data or abnormally terminate the component and a location for writing the collection additional data such as a file on a disk storage device. The system dump component may include the additional data collection facility. Optionally the additional data collection facility may be implemented as a separate standalone program product. As another option a server within the distributed computing environment may be configured and designated to perform the functions of a central dump server as depicted and described with reference to .

At the additional data collection facility is enabled through any one of several options that may be similar to registering a component for the system dump facility including registering through a vendor supplied API a command line option i.e. flag of a well known compiler a dynamically executed script and inclusion in the server boot process. The enabling command or script may include such parameters as an identifier that is associated with the desired component to be monitored a location for the output and a level of detail to capture which may be dependent upon an error level severity.

The behavior of the additional data collection facility may be dynamically modified through the parameters to the command thereby providing a tool for use in diagnosing difficult to diagnose problems. For example through multiple component failures the user learns that a given failure always occurs after a certain I O pattern. The user may dynamically invoke a function that collects associated memory buffers having characteristics that have been identified through analysis of previous data collection activities.

Once additional data collection is enabled at the named function monitors its component for an occurrence of the named condition. If at the named condition does not occur the monitoring continues. However if the named condition occurs at the named function takes the action programmatically defined in the named function. When collected the additional data may be stored for later analysis as diagnostic information related to the system failure. The stored diagnostic information may at least include an error code the most recently called functions and parameter values associated with the most recently called functions. Through statistical analysis and modeling the failure symptom may be associated with a resolution based on its likelihood of success. A measure of accuracy i.e. success rate for the resolution as applied to system failures having the identified characteristics may be calculated thereby generating several suggested resolutions in decreasing likelihood of success improving product quality and improving the efficiency and accuracy of customer support engineers.

In this configuration registering the component dump handler described previously with reference to may now be managed by the central dump server rather than by each individual OS . For example to diagnose a system failure reported by one of the servers in the distributed computing environment a systems programmer may analyze the failure symptom from the system dump and develop a data collection function to execute in the event of another similar system failure. The systems programmer may register the data collection function with the central dump server. The central dump server may deploy the data collection function to each server in the distributed computing environment.

At the systems administrator configures the central dump server with sets of rules to prioritize the selection of the dump content that should be included in a system dump. The rule sets may be classified by failure symptom including an error code an abnormal termination and a deterioration in system performance. Additionally each rule in the rule set may have an assigned priority or weight to ensure that at least the required data collection is performed in case the system dump is abnormally terminated.

As an example a rule to select and prioritize data collection may apply to device driver failures. If an identified Small Computer System Interface SCSI device driver is in the system trace then the rule may specify to collect all the outstanding I O requests that are queued to the SCSI device. As another example a rule may apply when a threshold number of CPUs in a server is waiting for the same lock. This condition may be difficult to diagnose since no system failure may result and the only symptom may be gradually diminishing throughput in the server. Here a statement of the rule may be to collect all thread structures in the server when this condition is recognized. A default data collection rule may be defined for each component when the failure symptom is unique i.e. not found in existing rule sets .

At when a system dump is required the dump driver agent on the affected server may communicate the failure symptom data to the central dump server. The failure symptom data may include at least an error code the most recently called functions and parameter values associated with the most recently called functions. The dump driver agent may communicate with the central dump server over a network such as network of . Alternatively the dump driver agent and central dump server may communicate by placing data messages in a shared storage or memory location.

In a further embodiment at the central dump server may store the failure symptom data from the dump driver agent for example as a log entry or table entry in a database for further statistical analysis.

At the central dump server searches its configured rule sets for a match to the failure symptom data sent by the dump driver agent. If at a match is not found then at the central dump server may send the default actions specified in the rule set to the dump driver agent. The default may include transferring to the storage device the processor registers the state of the currently executing program or process and the program stack pointer.

However where a matching rule set is found at the central dump server communicates the data collection actions that are associated with the rule set for example a sequence of data collection functions to execute to the dump driver agent. In another embodiment the central dump server may search the analyzed stored failure symptom data to determine whether a potential failure resolution is associated with the failure symptom that the dump driver agent reported. If so the central dump server may take an action such as notifying a systems administrator or dynamically deploying maintenance updates.

At another component of the central dump server or another data analytics function may evaluate the stored failure symptom data for several factors including a statistical distribution of types of failures a potential failure resolution and a probability of success when applying the potential failure resolution. A measure of accuracy i.e. success rate for the resolution as applied to system failures having the identified characteristics may be calculated thereby generating several suggested resolutions in decreasing likelihood of success improving product quality and improving the efficiency and accuracy of customer support engineers.

Referring now to computing device may include respective sets of internal components and external components that together may provide an environment for a software application such as the bid and exchange agents. Each of the sets of internal components includes one or more processors one or more computer readable RAMs one or more computer readable ROMs on one or more buses one or more operating systems executing the method of and one or more computer readable tangible storage devices . The one or more operating systems including the additional data collection facility are stored on one or more of the respective computer readable tangible storage devices for execution by one or more of the respective processors via one or more of the respective RAMs which typically include cache memory . In the embodiment illustrated in each of the computer readable tangible storage devices is a magnetic disk storage device of an internal hard drive. Alternatively each of the computer readable tangible storage devices is a semiconductor storage device such as ROM EPROM flash memory or any other computer readable tangible storage device that can store a computer program and digital information.

Each set of internal components also includes a R W drive or interface to read from and write to one or more computer readable tangible storage devices such as a CD ROM DVD SSD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device.

Each set of internal components may also include network adapters or switch port cards or interfaces such as a TCP IP adapter cards wireless WI FI interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The operating system including the additional data collection facility that is associated with computing device can be downloaded to computing device from an external computer e.g. server via a network for example the Internet a local area network or other wide area network and respective network adapters or interfaces . From the network adapters or switch port adapters or interfaces and operating system associated with computing device are loaded into the respective hard drive and network adapter . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components can include a computer display monitor a keyboard and a computer mouse . External components can also include touch screens virtual keyboards touch pads pointing devices and other human interface devices. Each of the sets of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

Various embodiments of the invention may be implemented in a data processing system suitable for storing and or executing program code that includes at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements include for instance local memory employed during actual execution of the program code bulk storage and cache memory which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input Output or I O devices including but not limited to keyboards displays pointing devices DASD tape CDs DVDs thumb drives and other memory media etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the available types of network adapters.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

Although preferred embodiments have been depicted and described in detail herein it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the disclosure and these are therefore considered to be within the scope of the disclosure as defined in the following claims.

