---

title: Anti-takeover systems and methods for network attached peripherals
abstract: Methods, systems, and devices are described for the prevention of network peripheral takeover activity. Peripheral devices may implement an anti-takeover mechanism limiting the number of available device command classes when certain handshake and verification requirements are not met. Anti-takeover peripheral devices with protection enabled may be relocated within a controller network, or in certain cases, from one controller network to another controller network when certain conditions are met. That same device may be hobbled when removed from a controller network and may remain hobbled when connected to another network that fails to meet certain conditions. Unprotection and unhobbling of a device may occur through an algorithmic mechanism using values stored on the peripheral device and the controller device for one or more of anti-takeover code generation, anti-takeover code comparison, network identification value comparison, and manufacturer identification value comparison.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503476&OS=09503476&RS=09503476
owner: Vivint, Inc.
number: 09503476
owner_city: Provo
owner_country: US
publication_date: 20140128
---
Advancements in media delivery systems and media related technologies continue to increase at a rapid pace. Increasing demand for media has influenced the advances made to media related technologies. Computer systems have increasingly become an integral part of the media related technologies. Computer systems may be used to carry out several media related functions. The wide spread access to media has been accelerated by the increased use of computer networks including the Internet and cloud networking.

Many homes and businesses use one or more computer networks to generate deliver and receive data and information between the various computers connected to computer networks. Users of computer technologies continue to demand increased access to information and an increase in the efficiency of these technologies. Improving the efficiency of computer technologies is desirable to those who use and rely on computers.

With the wide spread use of computers and mobile devices has come an increased presence of home automation and security products. Advancements in mobile devices allow users to monitor an aspect of a home or business. Protection mechanisms preventing competitors from taking over and utilizing automation and security system peripheral devices while simultaneously allowing such devices to be transferred between a dealer s own networks may not be available.

The systems and methods described herein relate to home automation and home security. More specifically the systems and methods described herein relate to the prevention of network peripheral takeover activity. Peripheral devices may include anti takeover devices and unprotected devices without anti takeover mechanisms. Anti takeover devices may implement an anti takeover mechanism limiting the number of available device command classes when certain handshake and verification requirements are not met. This mechanism may operate in the case of an anti takeover device participating as a node in a network while in protected mode or where the anti takeover device is removed from a network while the device is in a protected mode. Unprotected devices may include peripheral devices that do not include an anti takeover mechanism and therefore provide unrestricted access to the command classes associated with the peripheral device.

Anti takeover peripheral devices with protection enabled may be relocated within a controller network or in certain cases from one controller network to another controller network when certain conditions are met. That same device may be hobbled when removed from a controller network and may remain hobbled when connected to another network that fails to meet certain conditions. The transition of a peripheral device from a protected hobbled state to a protected unhobbled state or to an unprotected state may occur based at least in part on handshake and verification activities between the protected peripheral device and the controller device without the use of authentication schemes relying on remotely stored authentication information. Unprotection of a device may occur through an algorithmic mechanism using values stored on the peripheral device and the controller device for anti takeover code generation anti takeover code comparison network identification value comparison and manufacturer identification value comparison. Introduction of a new controller device to an existing controller network may involve related handshake and verification methods between the new controller and the networked peripheral devices such that the networked peripheral devices will provide command class information to the new controller node.

The foregoing has outlined rather broadly the features and technical advantages of examples according to the disclosure in order that the detailed description that follows may be better understood. Additional features and advantages will be described hereinafter. The conception and specific examples disclosed may be readily utilized as a basis for modifying or designing other structures for carrying out the same purposes of the present disclosure. Such equivalent constructions do not depart from the spirit and scope of the appended claims. Features which are believed to be characteristic of the concepts disclosed herein both as to their organization and method of operation together with associated advantages will be better understood from the following description when considered in connection with the accompanying figures. Each of the figures is provided for the purpose of illustration and description only and not as a definition of the limits of the claims.

While the embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The systems and methods described herein relate to home automation and home security. More specifically the systems and methods described herein relate to the prevention of network peripheral takeover activity.

Anti takeover peripheral devices with protection enabled may be relocated within a controller network or in certain cases from one controller network to another controller network when certain conditions are met. That same device may be hobbled when removed from a controller network and may remain hobbled when connected to another network that fails to meet certain conditions. The transition of a peripheral device from a protected hobbled state to a protected unhobbled state or to an unprotected state may occur based at least in part on handshake and verification activities between the protected peripheral device and the controller device without the use of authentication schemes relying on remotely stored authentication information. Unprotection of a device may occur through an algorithmic mechanism using values stored on the peripheral device and the controller device for anti takeover code generation anti takeover code comparison network identification value comparison and manufacturer identification value comparison. Introduction of a new controller device to an existing controller network may involve related handshake and verification methods between the new controller and the networked peripheral devices such that the networked peripheral devices will provide command class information to the new controller node.

Still referring to the environment may include a remote management device a service provider device a sensor a feature controller a router a meter and or a network that allows the remote management device service provider device controller network nodes to communicate with one another. Examples of remote management device include multi site dashboards mobile devices smart phones personal computing devices computers servers etc. Examples of controller nodes include a dedicated home automation computing device e.g. wall mounted controller a personal computing device e.g. laptop desktop etc. a mobile computing device e.g. tablet computing device smartphone mobile remote device etc. and the like.

In some embodiments remote management device may be integrated with controller network in the form of one or more personal computing devices e.g. mobile devices smart phones and or personal computing devices to both control aspects of a property as well as to receive and display notifications regarding monitored activity of a property. Examples of sensor include a camera sensor audio sensor forced entry sensor shock sensor proximity sensor boundary sensor appliance sensor light fixture sensor temperature sensor light beam sensor three dimensional 3 D sensor motion sensor smoke sensor glass break sensor door sensor window sensor carbon monoxide sensor accelerometer global positioning system GPS sensor Wi Fi positioning system sensor capacitance sensor radio frequency sensor near field sensor heartbeat sensor breathing sensor oxygen sensor carbon dioxide sensor brain wave sensor movement sensor voice sensor and the like.

Sensor may represent one or more separate sensors or a combination of two or more sensors in a single sensor device. For example sensor may represent one or more camera sensors and one or more motion sensors connected to environment . Additionally or alternatively sensor may represent a combination sensor such as both a camera sensor and a motion sensor integrated in the same sensor device. Although sensor is depicted as connecting to controller node over network in some embodiments sensor may connect directly to remote management device . Additionally or alternatively sensor may be integrated with a home appliance or fixture such as a light bulb fixture. Sensor may include an accelerometer to enable sensor to detect a movement. Sensor may include a wireless communication device enabling sensor to send and receive data and or information to and from one or more devices in environment . Additionally or alternatively sensor may include a GPS sensor to enable sensor to track a location of sensor . Sensor may include a proximity sensor to enable sensor to detect proximity of a person relative to a predetermined distance from a dwelling e.g. geo fencing . Sensor may include one or more security detection sensors such as for example a glass break sensor a motion detection sensor or both. Additionally or alternatively sensor may include a smoke detection sensor a carbon monoxide sensor or both.

Feature controller may represent one or more separate feature controls or a combination of two or more feature controls in a single feature controller device. For example feature controller may represent one or more camera controls and one or more door lock controls connected to environment . Additionally or alternatively feature controller may represent a combination feature controller such as both a camera control and a door lock control integrated in the same feature controller device. Although feature controller is depicted as connecting to remote management device over network in some embodiments feature controller may connect directly to remote management device . Additionally or alternatively feature controller may be integrated with a home appliance or fixture such as a light bulb fixture. Feature controller may include a lighting control mechanism configured to control a lighting fixture. Feature controller may include a wireless communication device enabling feature controller to send and receive data and or information to and from one or more devices in environment . Additionally or alternatively feature controller may include an appliance control interface enabling feature controller to send commands to an integrated appliance interface. Feature controller may include an interface to a security system to monitor activate modify and or arm one or more security features.

Router may represent one or more slave nodes functioning as a router when a source node e.g. a controller node attempts to reach a destination node e.g. another slave node where the source node is out of direct range of the destination node. The routing slave node may have the same functionality as a non routing slave node but in addition the routing node may initiate transmission of data to one or more other nodes in the controller network . In some instances the routing slave may be mains powered battery powered or both. Routing slave nodes may include for example a movement detector. In some cases the routing slave may be include an external EEPROM for storing application data.

Meter may represent a slave node configured to realize various types of meters such as gas water and electricity meters. In some instances a meter is a pulse meter reporting pulses having a specific meaning for a specific meter type.

In some configurations remote management device may include components such as application and data store . Although the components of remote management device are depicted as being internal to remote management device it is understood that one or more of the components may be external to the remote management device and connect to remote management device through wired and or wireless connections. For example one or more components e.g. software firmware and or hardware of application may be located installed and or part of a controller node service provider device slave node and or database .

In some embodiments remote management device may include a television set. Additionally or alternatively management device may include one or more processors one or more memory devices and or a storage device. Examples of management device may include a viewing device associated with a media content set top box satellite set top box cable set top box DVRs personal video recorders PVRs and or mobile computing devices smart phones personal computing devices computers servers etc. Thus application may be installed on management device in order to allow a user to interface with a function of controller node and or service provider device .

In some embodiments remote management device may communicate with service provider device via network . Examples of networks include cloud networks local area networks LAN wide area networks WAN virtual private networks VPN wireless networks using 802.11 for example and or cellular networks using 3G and or LTE for example etc. In some configurations the network may include the Internet. In some embodiments a user may access the functions of controller node from management device . For example in some embodiments management device includes a mobile application that interfaces with one or more functions of controller node and or service provider device .

In certain implementations controller node includes components such as presentation module application module and data module Although the components of controller node are depicted as being internal to controller node it is understood that one or more of the components may be external to the controller node and connect to remote management device through wired and or wireless connections. For example one or more components e.g. software firmware and or hardware of application module may be located in installed at and or part of remote management device web service application module not shown service provider device and or database . Data content and data management functions of data module may be located replicated or both in one or more of database and remote management device data store .

In some instances the controller network will include one or more static controllers residing in a fixed locations within the controller network . The static controller may serve as a receiver for sensors and battery operated devices that need to send unsolicited reports to a controller and may also act as an internet gateway which can be accessed remotely. The static controller may also provide routing support between nodes in the controller network . This may include collecting node Information maintaining a routing table creating routing lists and using routing lists for data transmissions. The controller network may also include one or more portable controllers that do not maintain fixed locations in the controller network .

In some embodiments service provider device may be coupled to database . Database may include application data associated with the monitored activities of a property. For example remote management device may access application data in database over network via service provider device . Database may be internal or external to the service provider device . In one example remote management device may include an integrated data store being internal or external to device . Data store may include application data associated with the monitoring activities of a property. In some embodiments application data includes one or more replicated application data items. In certain instances one or more application data items are synchronized with one or more application data items.

Application may allow a user to control either directly or via controller node an aspect of the monitored property including security energy management locking or unlocking a door checking the status of a door locating a person or item controlling lighting thermostat cameras receiving notification regarding a current status or anomaly associated with a home office place of business and the like. In some configurations application may enable device to interface with controller node and provide a graphical user interface to display home automation content on remote management device . Thus application via the graphical user interface may allow users to control aspects of their home and or office.

Referring now to in some embodiments an example controller node application module of the application modules includes a node detection module an anti takeover code module a communications module and a parsing module . The node detection module may detect inclusion and exclusion events related to connection activity node connection request activity or both. In certain instances an inclusion detection component detects a message received as a result of an attempted network connection by a peripheral device. This message may be generated by the peripheral device as a result of the peripheral device detecting the presence and availability of a the network by another network connected device as a result of detecting the presence of the peripheral device or acting in a routing capacity or in response to a command from a controller node e.g. see .

In some implementations a communications module includes a node communication component and an optional Internet gateway component . The node communication component may provide support for transmitting and receiving messages to and from slave nodes e.g. see controller nodes or both. The communication module may access and use routing tables and routing lists stored in data module for controller network data transmissions. An optional Internet gateway component may provide communication support for communicating with remote management devices service provider devices web services not shown and the like.

In certain instances an anti takeover code module generates a code for use in preventing peripheral device take over activities. For example in some embodiments the anti takeover code module includes a hint package generation component and a hash value generation component . The hint package generated by the hint package generation component may be used as an identifier or key value for retrieving or generating an anti takeover code. The exact format and meaning of the sub codes within the hint package may be specific to the product or service enabling anti takeover protection on the peripheral device and may be associated with a manufacturer identification value. The hint package generation component may for example generate a set of hint bytes representative of a combination of a dealer identification value a shared secret version value and a set of random bytes. The dealer identification value and shared secret version value may reside in a persistent data store on the controller node and retrieved through the data module . The set of random bytes may be generated by a random number generation algorithm as part of the hint package generation component or by a request to an external random number generation service not shown .

The hint bytes may be passed to a hash value generation component and act as a seed value for a hash algorithm. In some implementations the hash value generation component may execute a one way hash algorithm such as the SHA 256 cryptographic hash algorithm seeded with the hint bytes and the shared secret value that corresponds to the shared secret version value included in the hint bytes. The anti takeover code module may then for example set the anti takeover code to a value equal to the least significant 12 bytes of the hash value generated by the hash value generation component . The generated anti takeover code hint bytes or both may be passed to the data module for persistent storage on the controller to the communication module for transmission to a slave node or both.

The parsing module may be configured to process node information byte streams strings received from the presentation module the data module e.g. See the anti takeover code module and the communications module . In some embodiments the parsing module includes a node information frame parser for parsing node information received from a slave node by the node communication component when for example a node is to be included in the controller network e.g. see or upon request. A byte parser may parse byte streams such as a set of hint bytes received from a slave node for use in determining for example whether the node already belongs to a controller network or for the generation of an anti takeover code by the anti takeover code module . In addition a string parser may parse messages received from other nodes or modules or provide strings parsed from message data to other modules such as the presentation module .

Still referring to in some embodiments an example slave node includes a code compare module a command processor module an optional routing module an application programming interface mapping module a communication module a command class application programming interface one or more command classes and an exclusion detection component . The code compare module may compare a received anti takeover code value with a stored anti takeover code value requested from the data module e.g. see at least in part to determine whether to change to an unprotected mode unhobble the peripheral such as by returning a complete set of available device command classes in response to a node information request or both. An optional routing module may operate as discussed previously.

In some implementations a command class application programming interface may be provided such that controller nodes can send commands to the communication module . Commands received by the communication module in accordance with application programming interface may be passed to the application programming interface mapping module that maps the command class application programming interface command to the corresponding proprietary device command. The mapped device command is then sent to the command processor module for processing and handling.

An exclusion detection component may detect a message received as a result of a planned network disconnect event. This message may be generated by a controller node e.g. see as a result of a selection event related to planned removal of a peripheral device from the network. In addition an exclusion detection component may determine that a slave node peripheral device has been removed based on sensing conditions associated with an exclusion event such as the absence of communication from a controller node.

Communication between devices may be carried out by a set of commands organized into one or more command classes. Command classes may include a fundamental grouping of commands including commands implementing specific functionality in a peripheral device. A peripheral device generally contains a number of different functionalities and includes logical grouping of functions that are not command classes . Tailored functionality of a device may be achieved by including appropriate command classes for selected devices. Vendors may thusly provide devices with features differentiating their product in the marketplace while at the same time achieving a high degree of interoperability. The set of command classes may include for example device command classes and anti takeover command classes . The device command classes may include the available device services. The anti takeover command classes may include the command classes specific to the anti takeover mechanisms.

The anti takeover command class may be used to disable a subset of supported command classes in a device if the device is being hobbled such as when a device is being excluded from a controller network. The anti takeover command class may couple the peripheral device to one or more controller networks and render it functionally limited if it is removed from its current network without being unprotected in advance of exclusion. Referring now to anti takeover command classes may include for example an anti takeover set command and anti takeover get command . The anti takeover set command may be structured with the following arguments 

In some instances a shared secret version value a network identification value such as a dealer identification value and a random number such as a series of random hint bytes are combined into a hint package as a single byte stream. The protection state value returned may be one of the group of unprotected protected or hobbled with each having the meaning described previously. A node information report request command may be available for all protection state conditions although the hobbled condition may return a sub set of the available command classes that would otherwise be returned if the protection state value were set to unprotected or protected. For example the node information frame may then no longer advertise support of the protected command classes but only advertise support of the anti takeover command class and other non device specific device command classes so long as the device remains in a hobbled state. The device may further fail to process protected commands while remaining in the hobbled state in a foreign network. Re inclusion in the network where the device was originally protected may provide an automated method for a state modification to an unprotected state.

Referring now to in some embodiments a controller network is associated with an entity such as a dealer that may be involved in the selling distribution or servicing of one or more devices included in such controller networks . For purposes of this application the term identifier means identification value. For purposes of this application the term enabled when used to refer to a protection state means protected. In this example the dealer is identified as Dealer A and the network is identified as a first controller network associated with Dealer A namely A. At the time Dealer A slave nodes are included in controller network A Dealer A controller may generate a hint package and an anti takeover code then transmit the hint package anti takeover code and manufacturer identifier to the slave nodes . In some instances the hint package includes a dealer identifier in this case a value associated with Dealer A. In addition the transmission may include a command to set the protection state to protected. In certain implementations a shared secret associated with and stored on multiple Dealer A controller devices is used to seed an anti takeover code generation algorithm. Generated anti takeover codes may be stored on controller nodes where such codes may be used to unprotect peripheral devices automatically without first generating a node information request and re generating the anti takeover code based on the information in the request response.

One or more Dealer A controller devices may receive a new shared secret from time to time. In some cases protected devices that received an anti takeover code seeded with the old shared secret may not have received an updated anti takeover code seeded with the new shared secret. To address this inconsistency controller devices may maintain a history of shared secrets with a unique version number associated with each shared secret. Further shared secrets may be distinct for different manufacturers. The controller device may maintain distinct sets of manufacturer associated shared secrets and corresponding shared secret version values. Thus peripheral devices protected with older shared secrets may be unprotected unhobbled or both when joining a network with a controller node that includes the older shared secret by providing the shared secret version value with the network identifier such as a dealer identifier and the manufacture identifier to the controller device.

Referring now to in some embodiments Dealer A Slave Node e.g. see transitions to a hobbled peripheral device upon the occurrence of an exclusion event relating to controller network A . Hobbled peripheral device may maintain in memory the Dealer A anti takeover code the hint package including the Dealer A identifier the shared secret version and the randomly generated value and the manufacturer identifier. The protection state may be set to hobbled in response to detection of an exclusion event such as the absence of communication with a controller node or receiving an exclusion message from a controller node. The hobbled peripheral device may be automatically unprotected hobbled or both when re included in the controller network A. Upon detection of an inclusion event the Dealer A controller may transmit an anti takeover set command setting the protection state value to unprotected and including the controller stored anti takeover code thus unhobbling the device.

A peripheral device formerly acting as a slave node in a dealer network may be automatically unhobbled when added to another network associated with the same dealer. Referring now to the hobbled peripheral device formerly acting as Dealer A slave node in controller network A e.g. see is included in controller network A associated with the same Dealer A. This may occur for example where Dealer A decommissions a peripheral device at one location and recommissions the device at a different location. In this example the hobbled peripheral device becomes Dealer A slave node in controller network A . The dealer A controller device in this network is associated with two different manufacturers each having its own associated dealer specific shared secrets and shared secret versions. Upon detection of an inclusion event relating to the now designated Dealer A slave node the Dealer A controller may obtain the node information from Dealer A slave node parse the node information and determine if the manufacturer identifier and dealer identifier of Dealer A slave node match the values stored in the Dealer A controller memory. Here the manufacturer identifier of Dealer A slave node matches one of the manufacturer identifiers of Dealer A controller such that the unhobbling process proceeds. In some embodiments the unhobbling process may proceed without comparing network identification values or manufacturer identification values.

The dealer identifier value Dealer A slave node here Dealer A identifier matches the dealer identifier value on the Dealer A controller . In some embodiments this dealer identifier is included as a value within a hint package parsed by the controller device. There may be multiple versions of dealer specific shared secrets. In this example there are two different shared secrets stored on the Dealer A controller namely version 1.1 and version 2.0. Dealer A slave node received an anti takeover code seeded with the version 2.0 shared secret associated with Dealer A. Dealer A slave node received an anti takeover code seeded with the version 1.1 shared secret associated with Dealer A as part of joining controller network A . Since Dealer A slave node has not been a part of controller network A Dealer A controller has not stored the anti takeover code for Dealer A slave node and may therefore generate the anti takeover code based on the hint package received and retrieval of the appropriate shared secret from Dealer A controller memory. Upon generating the anti takeover code Dealer A controller may store the anti takeover code in memory and transmit an anti takeover set command to Dealer A slave node that includes the anti takeover code and the hint package and sets the protection state to unprotected thus automatically unhobbling the peripheral device. Dealer A controller may subsequently generate an updated anti takeover code seeded with the version 2.0 shared secret store the updated shared secret and transmit the updated shared secret and corresponding hint package to Dealer A slave node .

A peripheral device formerly acting as a slave node in a dealer network may not be automatically unhobbled when added to another network associated with a different dealer. Referring now to the hobbled peripheral device formerly acting as Dealer A slave node in controller network A e.g. See is included in controller network B associated with the Dealer B. This may occur for example where Dealer B attempts to commission a device formerly deployed by Dealer A within a Dealer A network into a Dealer B network. In this example the hobbled peripheral device may perform handshake activities and negotiations determining whether unhobbling may occur. The dealer B controller device in this network is associated with the same manufacturer as peripheral device . Upon detection of an attempted inclusion event relating to the peripheral device the Dealer B controller may obtain the node information from peripheral device parse the node information and determine if the manufacturer identifier and dealer identifier of peripheral device match the values stored in the Dealer B controller memory. Here the manufacturer identifier of Dealer A slave node matches one of the manufacturer identifiers of Dealer A controller such that the unhobbling process proceeds. In some embodiments the attempted unhobbling process may proceed without comparing network identification values or manufacturer identification values.

The dealer identifier value peripheral device here Dealer A identifier does not match the dealer identifier value on the Dealer B controller . In some embodiments this dealer identifier is included as a value within a hint package parsed by the controller device. At this point the unhobbling process may cease and the peripheral device may remain in a hobbled state. In some embodiments unhobbling of peripheral device may not occur until the device is included in a network where the controller device includes the same shared secret used to generate the anti takeover code stored on the peripheral device . In some implementations an anti takeover code generation and comparison on the controller device may not occur unless manufacturer identifier the dealer identifier or both on the controller device match the manufacturer identifier the dealer identifier or both on the peripheral device . In some instances this may be accomplished by recommissioning peripheral device in a Dealer A network. Additionally or alternatively peripheral device may be unhobbled by replacing Dealer B controller with a Dealer A controller device thus transforming the network to a Dealer A network. Referring now to peripheral device was set to an unprotected state prior to being excluded from controller network A . When a device is in an unprotected state the device may maintain a persistent unhobbled condition such as where all command classes may be available and may be added to controller network B without negotiation. Upon detection of an inclusion event Dealer B controller may generate a hint package generate an anti takeover code store the anti takeover code in memory and transmit an anti takeover set command to peripheral device that includes the anti takeover code the hint package and the manufacturer identifier and sets the protection state to protected. In addition and alternatively peripheral may remain in an unprotected state without limitations to command class availability.

Referring now to through a general method of using various embodiments of the systems and or devices described herein is shown. For example method may be implemented utilizing the various embodiments of system portable controller node static controller node slave node controller application module slave application module sensor feature controller router meter and or other devices and or components.

Referring to at block a data session may be established between the communication module e.g. see of a peripheral device and a network. Peripheral devices may include for example a sensor feature controller router meter and the like. The network may be a controller network . The established data connection may be preceded by a handshake between controller node and a peripheral device.

At block a controller may detect an inclusion event. The controller may be a portable controller node or a static controller node . Inclusion event detection may include an inclusion detection component e.g. see receiving a message from the peripheral device attempting to join the network detecting a change to the physical network receiving a message from a peripheral device or a controller device indicating there is a new peripheral device attempting to join the network and the like.

At block in some instances the controller node application module e.g. see and may request node information from the peripheral device pursuing network inclusion. The request may take the form of an command class application programming interface call to the communication module of the peripheral device . The command processor module of the peripheral device may process the node information request and return a node information message to the requesting application module .

At block the controller may receive the node information message at the node communication component e.g. see and the node communication component may pass the node information message to the parsing module . At block the parsing module may parse the node information message obtaining the current protection state value for the peripheral device.

At block the controller node application module e.g. see and may determine if the device associated with the node information message is an anti takeover device. This determination can be made by for example evaluating each of the parsed node information values and determining if any of these values are associated with an anti takeover device. If the determining step determines that the device is not an anti takeover device then it may remain in an unprotected state . If the determining step determines that the device is an anti takeover device the method proceeds.

Referring now to at block the controller node application module e.g. see and determines if the anti takeover device is in an unprotected state. This determination can be made by for example evaluating the parsed node information value associated with the current protection state. In some embodiments the protection states include an unprotected state a protection enabled state and a hobbled state.

If the evaluation of the protection state value indicates the current protection state is unprotected then a protection state selection prompt interface may be displayed . A set protection state select event may occur in response to the display of the protection state selection prompt . At block the controller node application module e.g. see and may detect the protection state selection event triggering the generation of one or more protection related values.

At block an hint package may be generated. Referring now to in some embodiments at block the manufacturer associated network identification value may be retrieved from the controller e.g. see memory. The network identification value may be associated with a particular entity such as for example a dealer. The network identification value may be used by multiple controllers located in different networks associated with the same dealer. The network identification value may also be associated with a manufacturer.

At block the shared secret version number associated with the shared secret may be retrieved from the parsed node information message. If the parsed node information message does not include a shared secret version the shared secret version associated with the latest shared secret corresponding to the manufacture associated network identification value may be retrieved from controller e.g. see memory.

The anti takeover code module e.g. see may generate a random value such as a random number for inclusion in the hint package. In certain implementations this random value is a random series of bytes. At block the hint package generation component may combine the network identification value the shared secret version number and the random value into a hint package. In some embodiments the hint package is a series of bytes. The first byte may encode the network identifier value such as a dealer identifier. The second byte may indicate the version associated with the shared secret used to seed the algorithm generating the anti takeover code. The remainder of the bytes may be randomly generated by the anti takeover code module .

Referring again to at block a process for generating an anti takeover code may be initiated that includes the results of the hint package generation. Referring now to at block the hint package may be retrieved from the parsed node information message. If the parsed node information message does not include a hint package the hint packaged generated at block may be retrieved.

At block a shared secret may be retrieved from controller e.g. see memory. In some embodiments one or more common shared secrets reside on multiple controller nodes located on different controller networks associated with a common dealer identifier. The retrieval of a particular shared secret may involve determining the shared secret associated with a particular manufacturer a particular dealer or both. Further the selection of the shared secret may involve identifying a particular shared secret version.

At block a one way hash function such as for example the SHA 256 cryptographic hash algorithm may be seeded with the hint package retrieved at block and the shared secret retrieved at block . At block a set of bytes are obtained from the result of the one way hash algorithm. In some instances some number of least significant bytes are obtained such as the least significant 12 bytes.

Referring again to the controller node application module e.g. see and may store the peripheral associated anti takeover code in controller memory. The controller node may automatically unhobble the associated peripheral devices using the stored anti takeover code. At block the anti takeover code hint package and protection state set command may be transmitted to the peripheral device. The peripheral device may store this information and return it as part of a node information report in response to node information requests.

Referring again to block the controller node application module e.g. see and determines if the anti takeover device is in an unprotected state. If the evaluation of the protection state value indicates the current protection state is not unprotected then a determination is made if the retrieved manufacturer identifier matches a controller manufacturer identifier having an associated shared secret . If the result of this determination at block is the lack of a match then the peripheral device will maintain a hobbled state .

If the result of this determination at block is a match then the network identification value associated with the peripheral device may be retrieved from the parsed node information message and a determination made whether the received network identification value matches the controller network identification value . If the determining step of block identifies the values as matching then the hint package and anti takeover code may be generated and the device may be unhobbled . If the determining step of block identifies the values as non matching then the peripheral device may maintain a hobbled state .

Referring now to through a series of flowcharts illustrating methods for implementing an anti takeover mechanism is shown in accordance with various embodiments. Methods and may be implemented utilizing the various embodiments of system portable controller node static controller node slave node controller application module slave application module sensor feature controller router meter and or other devices and or components. With reference now to initially at block the system may establish a data session between the peripheral device and the network. For example a data session may be established between the communication module e.g. see of a peripheral device and a network. Peripheral devices may include for example a sensor feature controller router meter and the like. The network may be a controller network . The established data connection may be preceded by a handshake between controller node and a peripheral device. In some embodiments the data connection may be a wireless connection.

At block the peripheral device may receive a hint package and an anti takeover code. In some implementations the anti takeover code is derived at least in part from a function seeded with a shared secret value. The shared secret value may be an undiscoverable values shared by a plurality of controller devices on one or more related networks such as a dealer network. The receipt of the hint package and anti takeover code may be in response to the inclusion detection component of node detection module detecting a network inclusion event relating to the peripheral device.

Referring now to a block diagram of an embodiment of is shown. In addition to the steps and of the peripheral device may store the hint package and the anti takeover code . The hint package may be later retrieved and provided to controller nodes e.g. see such that the controller nodes may generate an anti takeover code as part of an unhobbling process. The anti takeover code may be later retrieved by the peripheral device and compared against received anti takeover codes as another part of the unhobbling process.

At block the peripheral device may be configured to detect a network exclusion event such as when there is an absence of communication from a controller node e.g. see . Detection by an exclusion detection component may trigger the peripheral to obtain a hobbled state as described previously .

At block a data session may be established between the peripheral device and another network. For example a data session may be established between the communication module e.g. see of a peripheral device and this second network where the second network includes one or more controller nodes e.g. see storing shared secrets network identifiers or both that differ from those stored on the controller nodes of the first network.

At block the peripheral device may transmit the hint package to a node on the network such as a controller device e.g. see as part of an unhobbling process. In some embodiments the hint package includes a network identification value such as for example a dealer identifier a shared secret version value and a random value such as a series of randomly generated bytes. The transmission may be in response to a request taking the form of a command class application programming interface call to the communication module of the peripheral device . The command processor module of the peripheral device may process the node information request and return a node information message to the requesting application module .

At block the peripheral device may receive a second anti takeover code. In some implementations this second anti takeover code is also derived at least in part from a function seeded with a shared secret value stored on a controller node device e.g. see of the second network. This shared secret value may be the same shared secret value as that used by the first network to generate the stored anti takeover code or it may be a different shared secret. The receipt of anti takeover code may be a result of the anti takeover code being generated by controller node in response to receiving a hint package from the peripheral device.

Referring now to a block diagram of an embodiment of is shown. In addition to the steps and of the peripheral device may determine if the received anti takeover code matches a stored anti takeover code and in response unhobble the peripheral device such as by enable one or more additional command classes based at least in part on the result of the determining step . Alternatively if no match is identified the peripheral device may maintain a hobbled stated .

Referring now to a general method for implementing an anti takeover mechanism is shown in accordance with various embodiments. For example method may be implemented utilizing the various embodiments of system portable controller node static controller node slave node controller application module slave application module sensor feature controller router meter and or other devices and or components. At block the controller node data module e.g. see may store a shared secret value. The shared secret value may be written to memory at the time of manufacturing or after release from manufacturing. The shared secret value may be common across one or more controller nodes in one or more controller networks associated with a common network identification value.

At block the controller node data module e.g. see may store a network identification value. The network identification value may be written to memory at the time of manufacturing or after release from manufacturing. The network identification value may be associated with an entity such as for example a dealer. The network identification value may be common across one or more controller nodes in one or more controller networks.

At block the system may establish a data session between the peripheral device and the network. For example a data session may be established between the communication module e.g. see of a peripheral device and a network. Peripheral devices may include for example a sensor feature controller router meter and the like. The network may be a controller network . The established data connection may be preceded by a handshake between controller node and a peripheral device. In some embodiments the data connection may be a wireless connection.

At block the controller may receive a node information message at the node communication component e.g. see . The node information message may include a hint package. In some embodiments the hint package includes a network identification value such as for example a dealer identifier a shared secret version value and a random value such as a series of randomly generated bytes. The receipt of the hint package may be in response to the inclusion detection component of node detection module detecting a network inclusion event relating to the peripheral device.

At block the anti takeover code module e.g. see may generate an anti takeover code. The anti takeover code may be derived at least in part from a calculation seeded with one or more hint package values and the shared secret value. The shared secret may be retrieved from controller e.g. see memory. In some embodiments one or more common shared secrets reside on multiple controller nodes located on different controller networks associated with a common dealer identification value. The retrieval of a particular shared secret may involve determining the shared secret associated with a particular manufacturer a particular dealer or both. Further the selection of the shared secret may involve identifying a particular shared secret version.

The calculation may include a one way hash function such as for example the SHA 256 cryptographic hash algorithm which may be seeded with one or more hint package values and the shared secret. In some embodiments a set of bytes are obtained from the result of the one way hash algorithm. Some number of least significant bytes may be obtained from the result such as the least significant 12 bytes which then may constitute the anti takeover code.

Referring now to a block diagram of an embodiment of is shown. At block and block a first shared secret value is stored and a second shared secret value is stored. In some implementations additional shared secrets are stored. In certain instances the controller node data module e.g. see stores the shared secret values. The shared secret values may be written to memory at the time of manufacturing or after release from manufacturing. The shared secret values may be common across one or more controller nodes in one or more controller networks associated with a common network identification value.

At block the the controller node data module e.g. see may store a network identification value. The network identification value may be written to memory at the time of manufacturing or after release from manufacturing. The network identification value may be associated with an entity such as for example a dealer. The network identification value may be common across one or more controller nodes in one or more controller networks.

At block the system may establish a data session between the peripheral device and the network. For example a data session may be established between the node communication module e.g. see of a controller node application module and a network. The established data connection may be preceded by a handshake between controller node and a peripheral device. In some embodiments the data connection may be a wireless connection.

At block the controller may receive the node information message at the node communication component e.g. see . The node information message may include a hint package. In some embodiments the hint package includes a network identification value such as for example a dealer identifier a shared secret version value and a random value such as a series of randomly generated bytes. The receipt of the hint package may be in response to the inclusion detection component of node detection module detecting a network inclusion event relating to the peripheral device.

At block the anti takeover code module e.g. see may generate an anti takeover code. The anti takeover code may be derived at least in part from a calculation seeded with one or more hint package values and the shared secret value. The shared secret may be retrieved from controller e.g. see memory. In some embodiments one or more common shared secrets reside on multiple controller nodes located on different controller networks associated with a common dealer identification value. The retrieval of a particular shared secret may involve determining the shared secret associated with a particular manufacturer a particular dealer or both. Further the selection of the shared secret may involve identifying a particular shared secret version.

The calculation may include a one way hash function such as for example the SHA 256 cryptographic hash algorithm which may be seeded with the one or more hint package values and the shared secret. In some embodiments a set of bytes are obtained from the result of the one way hash algorithm. Some number of least significant bytes may be obtained from the result such as the least significant 12 bytes which may then constitutes the anti takeover code. At block the controller communications module e.g. see may transmit the anti takeover code and the hint package on the controller network. In certain implementations the network identification value is a hint package.

Referring now to the controller may be an example of a controller node e.g see . In one configuration controller includes a bus which interconnects major subsystems of controller such as a central processor a system memory typically RAM but which may also include ROM flash RAM or the like an input output controller an external audio device such as a speaker system via an audio output interface an external device such as a display screen via display adapter an input device e.g. remote control device interfaced with an input controller multiple USB devices interfaced with a USB controller and a storage interface . Also included are at least one sensor connected to bus through a sensor controller and a network interface coupled directly to bus .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory may contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components or devices. Applications e.g. application resident with controller are generally stored on and accessed via a non transitory computer readable medium such as a hard disk drive e.g. fixed disk or other storage medium. Additionally applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via interface .

Storage interface as with the other storage interfaces of controller may connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of controller or may be separate and accessed through other interface systems. Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like. In some embodiments one or more sensors e.g. motion sensor smoke sensor glass break sensor door sensor window sensor carbon monoxide sensor and the like connect to controller wirelessly via network interface .

Many other devices or subsystems not shown may be connected in a similar manner e.g. entertainment system computing device remote cameras wireless key fob wall mounted user interface device cell radio module battery alarm siren door lock lighting system thermostat home appliance monitor utility equipment monitor and so on . Conversely all of the devices shown in need not be present to practice the present systems and methods. The devices and subsystems may be interconnected in different ways from that shown in . The aspect of some operations of a system such as that shown in are readily known in the art and are not discussed in detail in this application. Computer instructions to implement the present disclosure may be stored in a non transitory computer readable medium such as one or more of system memory or fixed disk . The operating system provided on controller may be for example iOS ANDROID MS DOS MS WINDOWS OS 2 UNIX LINUX OSX or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal may be directly transmitted from a first block to a second block or a signal may be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present systems and methods may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block may be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures may be implemented to achieve the same functionality.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and may be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

Furthermore while various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present systems and methods and their practical applications to thereby enable others skilled in the art to best utilize the present systems and methods and various embodiments with various modifications as may be suited to the particular use contemplated.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. In addition the term based on as used in the specification and the claims is to be construed as meaning based at least upon. 

