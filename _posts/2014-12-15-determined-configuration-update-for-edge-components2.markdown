---

title: Determined configuration update for edge components
abstract: A method, device, system, and computer program product that relate to configuration of an edge component and subcomponents to adapt data from a Device to a readable form and to communicate the adapted data to a Network End Environment. The Network End Environment includes a user interface by which a user requests that the edge component is updated to have a configuration version stored at a source. The system processes the request and updates the edge component configuration. The edge component is updated to a source configuration at a predetermined time interval according to one of a full configuration refresh or a delta configuration. Data received and processed by the edge component can thereafter be pushed to the Network End Environment for storage and/or use in a Network application. The edge component is described as a Connector, and the subcomponents of the edge component are described as Connector components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553766&OS=09553766&RS=09553766
owner: SAP SE
number: 09553766
owner_city: Walldorf
owner_country: DE
publication_date: 20141215
---
A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

A method device system and computer program product that relate to updating the configuration of edge components such that any one of a set of Devices can efficiently interact and interface with a Network Based Environment and in addition the invention relates to a Network interfacing with the Devices by updating the configuration in a local customer environment.

In software development environments developers must design install configure and test software applications such that Devices can interface with a Network Based Environment. In so doing a developer must be aware of a variety of different Devices and how data is formatted when output from these Devices. Each of the different Devices can have a different number of output signals which provide different units of data and which must be quantified in different ways to be recognized as meaningful information by the Network Based Environment. Accordingly for each of these different Devices it is customary to have a configuration tool. The configuration tool for one Device is different than a configuration tool used for a different Device. The configuration tools allow the Devices to be configured in a way that they can send data in a meaningful manner to the Network Based Environment.

A different configuration tool for interfacing between the Device and the Network Based Environment is required for each different type of Device. A configuration tool requires at least one of different software plug ins different back end environments to handle data received from the Devices and different device adapters for the different Devices. Therefore configuration tools are packaged differently in a software development environment for a respective variety of Devices. Utilizing a variety of different configuration tools to interface with numerous devices is often cumbersome in terms of volume e.g. quantity implementation and size e.g. memory . Moreover updating the configuration tools whenever a particular application requires an interface with a specific Device can be annoying and or time consuming for the customer especially when the customer expects a software development environment to be as complete as possible.

Accordingly there is a need for development of a device a system a method and a computer program product to configure edge components to provide an updateable interface between Devices and a Network Based Environment. There is also a need for such a configuration to be performed in a fast efficient and reliable manner across a variety of Devices and Network.

Example embodiments of the present invention provide a method device system and computer program product for configuring data received from at least one Customer External Device to interface with a Network End Environment. An edge component is coupled to receive output from at least one Customer External Device. Upon receipt of the output the edge component manipulates the output such that it is readable data for use later on in a Network End Environment. The edge component is further coupled to the Network End Environment such that the output of the edge component including the readable data is transmitted to the Network End Environment for storage or manipulation according to a Network application. An edge component is a system element that runs or is connected to the edge of the system where the at least one Customer External Device is located. The edge component is the system element that provides what is otherwise described as a bridge gateway or portal between the at least one Customer External Device and the Network End Environment. Edge components facilitate communication in the Internet of Things IoT industry. In an example embodiment edge components have utility in providing connectivity with the SAP HANA platform IoT Edition as the Network End Environment. According to an example embodiment a Connector is applied as an edge component. A Connector has a particularized configuration and component configuration as described herein but it should be noted that the breadth of edge component connectivity platforms extends beyond the scope of the described Connector.

When the at least one Customer External Device is changed or updated it is likely that at least one of the Connector configuration and a configuration of a component within the Connector configuration must be updated. At regular intervals the Network End Environment which stores configuration information for the Connector and its components provides configuration update information to the Connector. The Connector is then able to implement this specific configuration update to successfully interact with the at least one Customer External Device. According to an example embodiment the configuration update information made available to the connector includes only information that has changed since the previous update. Accordingly the Connector is not required to receive an entirely new Connector configuration and or Connector component configuration from the Network End Environment.

The system includes two subsystems Target Environment and Network End Environment . Target Environment further includes at least one Customer External Device Device and an edge component. In this example embodiment the edge component is a Connector . The at least one Device is connected to the Connector by a communication connection . In an example embodiment communication connection is one of a wired connection or a wireless connection. Data provided from the at least one Device to the Connector over the communication connection includes any one of sensor data an alarm and a device status. The Connector receives the data from the Device over the communication connection . In an example embodiment the Connector retrieves the data over the communication connection from the at least one Device . The Connector if necessary proceeds to apply data processing. The Connector is capable of running on any computing device such as an industrial personal computer IPC . After having received the data from the Device and after having processed the data the Connector channels the data over a second communication connection to the Network End Environment . In an example embodiment second communication connection is one of a wired connection or a wireless connection. Data provided from the Connector to the Network End Environment is either processed or unprocessed data regarding at least any one of sensor data an alarm and a device status. The Connector sends the data over the second communication connection to the Network End Environment . In an example embodiment the Network End Environment retrieves the data over the second communication connection from the Connector . Once the data is available to the Network End Environment the data is at least one of stored implemented and made available for end user applications by the Network End Environment to make use of the gathered data from the at least one Device.

Connector is a runtime component hosted on an execution environment. The execution environment can be one of a Windows environment a Windows Embedded environment a Linux environment an OSX environment and any similar environment known to one of ordinary skill in the art. The architecture for the execution environment is selected to be one of x86 ARM or a similar architecture known to one of ordinary skill in the art. The runtime component Connector and its execution environment are implemented in software. The software is hosted on a processing device having a memory component in Random Access Memory RAM . The software is written in code that is executable by a processor. In an example embodiment the Connector is implemented in hardware. The Connector does not have a GUI and instead the updating of the Connector software is initiated by commands from the Network End Environment. In an example embodiment the operating system in which the Connector is installed has a GUI.

The Connector comprises three components a Device Adapter a Data Processor and a Network Module . In an example embodiment the Connector includes components in addition to the Device Adapter the Data Processor and the Network Module such as component N . In an example embodiment the Connector does not include all three of the three described components. The Connector runs on an edge meaning that its deployment is co located with connected Devices.

A first Connector Component the Device Adapter component interfaces directly with the communication connection . Communication connection provides data from the at least one Device to the Device Adapter . Device Adapter includes a device agent. The device agent is executable on the Device Adapter component of the Connector and provides interfaces that are missing for specific Devices. A Device Adapter component can in an example embodiment be a third party software element integrated into the Connector . When the Device Adapter used is a third party software element the Connector includes an additional capability to interface with the third party software element. Output is provided by the Device Adapter on a local communication connection to other components of the Connector. Local communication connection is bidirectional. In an example embodiment the Device Adapter has the capacity for bidirectional communication with the at least one Device .

A second Connector Component the Data Processor component parses and filters the data received from the Device Adapter . The Data Processor persists data received from the Device Adapter over the local communication connection . Data received from the Device Adapter and other sources is aggregated by the Data Processor over a predetermined period of time. Data received from the Device Adapter is sent over local communication connection a communication bus and second local communication connection to the Data Processor . Second local communication connection is bidirectional. Information is retrieved by the Data Processor over local communication connection and second local communication . According to an example embodiment the Data Processor includes or interacts with at least one processing device. In an example embodiment the Data Processor includes a plurality of processing devices and a subset of the plurality of the processing devices are implemented depending on the characteristics of the applicable Devices. The Data Processor performs parallel processing of the same data over different processing devices. In an example embodiment the Data Processor performs parallel processing of the same data over the same processing device. In an example embodiment the Data Processor performs parallel processing of different data over different processing devices with one processing device implementing an at least one function on a unique set of data. In an example embodiment the Data Processor performs parallel processing of different data over the same processing device. The processing performed by the Data Processor includes traditional pre processing. For example pre processing can include signal converters suitable for an analog to digital conversion such as a pulse code modulation an oversample a decimation filter a noise filter or a filter implemented to perform particular spectral shaping. Analog to digital conversion includes both manipulations that convert analog signals into digital signals and that convert digital signals into analog signals. Data Processor is also capable of implementing a delay for at least some of the data received retrieved from the local communication connections. After having processed the data received from the Devices the Data Processor provides output over second local communication connection to other components of the Connector.

A third Connector Component the Network Module component implements Network protocols such that the received retrieved data and or the data processed by the Data Processor can be sent as a data packet to a Network End Environment . The Network protocol used is one of Message Queue Telemetry Transport MQTT Hyper Text Transfer Protocol HTTP Secure Hyper Text Transfer Protocol HTTPS and Sockets Direct Protocol Sockets . The Network protocol is used to communicate between the Network Module and the Network End Environment . A third local communication connection by which it accepts input from the other components of the Connector. Third local communication connection is a bidirectional connection. Network Module requests input from one of the Data Processor component the Device Adapter component and the Nth component over the third local communication connector . Network Module then provides output for transmission over the second communication connection to the Network End Environment .

All of the components of the Connector including any of the Network Module the Data Processor the Device Adapter and Component N communicate with one another over an event bus of the Connector . The event bus is coupled to each of the local communication connection the second local communication connection the third local communication connection and the Nth local communication connection . In an example embodiment the event bus incorporates all of the local communication connection the second local communication connection the third local communication connection and the Nth local communication connection . The event bus in its communications with the components of the Connector has multiple channels of communication. Event bus performs bidirectional communication.

The event bus which is also herein referred to as a message bus is used to send and receive messages between the different components such as the Network Module the Data Processor the Device Adapter and Component N . Within the component sending the message there is a validation procedure. The component sending the message validates the messages in a manner specific to a type of the message. In an example embodiment the component receiving the message executes another validation procedure. The component receiving the message will validate the messages according to the type of the message. The validation procedure of the component changes on a component by component basis. Each component has its own validation procedure which is set by an initial configuration or a most recent configuration of the components. Based on the configuration the Connector registers specific components as listeners to the message bus. Therefore components will only receive messages that they support according to their configuration.

Connector further comprises a connector configuration portion . The connector configuration portion interfaces with the components of the Connector. The connector configuration portion requests a configuration update from the Network End Environment . The connector queries the Core Device Configuration for a configuration update from the Network End Environment . In so doing the Connector sends a status update to the Network End Environment configuration portion. The Connector also sends a query to retrieve component binaries data. In another example embodiment the Connector sends a query to retrieve a connector configuration from the Core Device Configuration. In another example embodiment the Connector sends a query to retrieve component configuration data from the Core Device Configuration. In an example embodiment the connector configuration portion receives from the Network End Environment a configuration update. According to an example embodiment a query sent from the Connector to the configuration portion of the Network End Environment can include multiple requests at one time.

The Connector queries the configuration portion of the Network End Environment for the Connector configuration or a component of the Connector configuration in one of at least two ways. According to a first example embodiment the Connector retrieves from the Core Device Configuration a full configuration request. A full configuration request occurs when the Connector queries the Core Device Configuration for all configuration operations necessary to obtain the most current configuration as stored in the Core Device Configuration. In response the Connector receives all configuration operations necessary to obtain the current configuration from the Core Device Configuration. According to a second example embodiment the Connector retrieves from the Core Device Configuration a delta configuration update. A delta configuration update occurs when the Connector runs with a certain predetermined or previously implemented configuration and then queries the Core Device Configuration for those operations necessary to update the current configuration on the Connector to the state as currently stored in the Core Device Configuration. In response the Connector then receives only the configuration operations necessary to update the current configuration on the connector to the state stored in the Core Device Configuration.

A user can implement one of a full configuration refresh or a delta configuration update by interacting with the Workbench as described herein. During a component configuration update the Connector downloads component binary files from the Core Device Configuration to obtain component runtime code. In an example embodiment the component binary files downloaded from the Core Device Configuration are Java archive JAR files.

The Network End Environment includes two sub environments a Configuration Environment and a Data Environment . In an example embodiment the Network End Environment is the SAP HANA platform IoT Edition. The Network End Environment stores data received through the edge component. In an example embodiment the edge component is the Connector . The Network End Environment also manages the configuration process as necessary through configuration updates of the Connector .

The Configuration Environment includes a Workbench and a Core Device Configuration . Workbench is essentially a user interface. The Core Device Configuration which is coupled to the Workbench is used to store the connector configuration of the Connector and is also used to provide the connector configuration to the Connector .

The Data Environment includes a Core Device Messaging System a database and at least one application . Upon receipt of data at the Core Device Messaging System the data is transformed into an appropriate message and transferred to the database for storage. In an example embodiment the database is a HANA database. Upon the storage of data in the database the data is made generally available to at least one application that is hosted on the Network End Environment . An application will query the database for relevant data and the application will retrieve the relevant data. As an example an application that would query the database for relevant data could be a Predictive Maintenance application or a Remote Service Management application. The at least one application does not need to be part of the Network End Environment platform. Instead the at least one application can be instantiated so that it accesses data from the database through the Core Device Messaging System or another interface.

The at least one Device can be any one of sensors alarms and independent devices having outputs. In an example embodiment only one Device is connected to the edge component which in this embodiment is Connector over the communication connection . In an example embodiment more than one Device e.g. . . . N is connected to the Connector over the communication connection .

The GUI of the Workbench provides the user of the Workbench with several options for manipulation of the connector configuration. The GUI of the Workbench itself can be made available to a user in different ways. In an example embodiment the GUI of the Workbench is available to the user over a browser based connection to the Network End Environment . In an example embodiment the GUI of the Workbench is available to user over software implemented in a specific hardware environment communicatively coupled to the Network End Environment .

The GUI of the Workbench provides the user with the functionality to upload software to the edge component. illustrates an embodiment in which the GUI of the Workbench provides the use with the functionality to upload components to running instances of the Connector. The user uses item to upload new device adapters to the configuration connection of the Connector such that new interfaces can be implemented. In addition the user uses item to upload or adjust the data processing performed on the data received from the device adapter within the Connector.

The GUI of the Workbench further provides the user with a field that starts or initializes components. The GUI of the Workbench further provides the user with a field that stops components.

The user can further use the GUI of the Workbench to execute a change in the configuration of the components. A user is able to detail the changes in the configuration that are demonstrated on the GUI of the Workbench and then after user review the altered configuration is then analyzed for changes as compared to the current configuration on the Connector. Core Device Configuration will then execute the commands set by the user at the Workbench and alter the connector configuration in place on the Connector.

The user to further use the GUI of the Workbench to monitor the state of a component. A user views the GUI and determines whether or not a component has been started whether or not a component has been stopped and whether or not an error has been generated. According to an example embodiment a user can create a Connector according to the following which is initiated upon user selection of the create connector item. In an example embodiment a user can create a component of the Connector by selecting the create components item. To undo a recent action a user selects item . To save a created Connector component a user selects item . In a case in which there is an error or in which the Connector is in an inconsistent state such as when the Workbench is not synchronized with the Connector the Connector is restored to a recent configuration. The recent configuration is the configuration having the state that is stored in the Core Device Configuration. To perform such a restore a user selects item . To delete a created Connector or component of a Connector the user selects the desired Connector or component form the side panel and then selects delete item .

All data generated by the Workbench in order to present a GUI to the user is stored in the Core Device Configuration. Accordingly in an example embodiment the Core Device Configuration has a memory component. In an example embodiment the Connector requests at runtime the configuration from the Core Device Configuration. In another example embodiment the Core Device Configuration provides the configuration to the Connector at runtime. In an example embodiment at runtime components can be any one of started stopped reconfigured updated and replaced at runtime.

According to an example embodiment the GUI of Workbench has at least three sections a Details Section a Configuration Section and a Status Section .

The Details Section of the Workbench includes a set of features such as at least some of the following.

Workbench is capable of interfacing with a plurality of connectors. Each of the connectors is therefore assigned a connector ID as shown in . The Workbench displays the version of the connector implemented as shown in . In an example embodiment if versioning of the connectors is not enabled then the version field is marked as N A . The Workbench in an example embodiment names each of the plurality of connectors. In an example embodiment the name of the connector is automatically generated. In another embodiment the Workbench requests that the user provide a name each available connector as shown in and at a side panel as .

The Status Section of the Workbench can include a set of features such as at least some of the following.

The control visible in the Status Section demonstrates the vitality of the Connector meaning when the last alive signal was received from the Connector as shown in item of . A large time gap demonstrates to the user that the system is currently not providing updates to the Connector and also possibly provides a warning to the user that the system is not functioning properly.

According to an example embodiment the Connector is demonstrated as already configured by the Workbench. The status of the configuration is therefore marked as checked in as shown in of the . The Workbench can also provide details to the user regarding the time that the connector was checked in as shown in of .

The GUI of the Workbench provides the user with an ability to execute and review a configuration of at least one of a Connector and a Connector Component.

The Configuration Section of the Workbench can include a set of features such as at least some of the following.

In an example embodiment the user can set the configuration update intervals for the Connector as displayed in . The units for the update intervals can be preset to a time frequency for instance seconds. By so doing the user sets the polling interval that is used by the Connector to check for configuration updates. In another embodiment the update interval set by the user determines the interval by which the Network End Environment checks to determine if the changed configuration must be updated to the Connector.

As stated above a user can implement one of a full configuration refresh or a delta configuration update by interacting with the Workbench. An instruction instituted by the Core Device Configuration advises the Connector how to proceed with the updating of the configuration including whether the update is for the connector configuration or for the configuration of a connector component.

The Connector can be configured in accordance with one of the following operations instituted by the Core Device Configuration RESET CONNECTOR RESTART CONNECTOR and UPDATE CONNECTOR.

According to an example embodiment the instruction instituted by the Core Device Configuration is a RESET CONNECTOR operation. When the RESET CONNECTOR operation is executed the Core Device Configuration advises the Connector to reset to its default factory settings state. By doing so the Connector keeps its onboard information. Upon implementation of the RESET CONNECTOR no configuration components are available in the Connector and all fields are reset to defaults. The data fields reset to defaults include at least one of the update interval the startup update interval the startup update enablement and the alive signal interval. Although the RESET CONNECTOR does not have any mandatory attributes in an example embodiment attributes are assignable to the RESET CONNECTOR.

According to an example embodiment the instruction instituted by the Core Device Configuration is a RESTART CONNECTOR operation. When the RESTART CONNECTOR operation is executed the Core Device Configuration advises the Connector to restart. The restart will disconnect the Connector from the Network End Environment . After a restart is enabled and during the log on process previously entered credentials are authenticated against the Core Device Configuration automatically. Although the RESTART CONNECTOR does not have any mandatory attributes in an example embodiment attributes are assignable to the RESTART CONNECTOR.

According to an example embodiment the instruction instituted by the Core Device Configuration is a UPDATE CONNECTOR operation. When the UPDATE CONNECTOR operation is executed the Core Device Configuration advises the Connector to update its configuration settings to the provided values. The configuration portion of the Network End Environment will send a notification over communication connection three to the Connector that such a connector configuration device is advisable. UPDATE CONNECTOR has attributes that are mandatory to its operation. The mandatory attributes of the UPDATE CONNECTOR can include any one of UPDATEINTERVAL STARTUPDATEENABLED and ALIVESIGNALINTERVAL. UPDATEINTERVAL is an attribute that is of an integer type which describes the interval for the configuration update cycle according to a unit of time. According to an example embodiment the unit of time is seconds. STARTUPDATEENABLED is an attribute that is of a Boolean type which determines if the Connector should query for a configuration device immediately after each startup. ALIVESIGNALINTERVAL is an attribute that is of an integer type which describes the interval for when the Connector sends its component status update cycle according to a unit of time. According to an example embodiment the unit of time is seconds. The UPDATE CONNECTOR using UPDATEINTERVAL STARTUPDATEENABLED and ALIVESIGNALINTERVAL advises the Connector to update its configuration settings to the provided values.

According to an example embodiment the components of the Connector can be configured in accordance with one of the following operations instituted by the Core Device Configuration ADD COMPONENT TYPE DELETE COMPONENT TYPE ADD MESSAGE TYPE DELETE MESSAGE TYPE ADD SUPPORTED MESSAGE TYPE DELETE SUPPORTED MESSAGE TYPE ADD COMPONENT UPDATE COMPONENT CONFIGURATION UPDATE COMPONENT ACTIVE STATE UPDATE COMPONENT TYPE and DELETE COMPONENT.

According to an example embodiment the instruction instituted by the Core Device Configuration is an ADD COMPONENT TYPE operation. When ADD COMPONENT TYPE is executed the Core Device Configuration advises the Connector to download and install files containing the runtime code for the referenced component type. In an example embodiment the files installed are component binaries such as JAR files. The mandatory attributes of ADD COMPONENT TYPE can include any one of SYMBOLICNAME and VERSION. SYMBOLICNAME is an attribute that is of a string type which describes the symbolic name of the component type. VERSION is an attribute that is of a version string e.g. x.y.z which is the version of the component type. ADD COMPONENT TYPE allows the addition of a new component type which can include any one of the previously discussed component types such as device adapter data processor and Network module.

According to an example embodiment the instruction instituted by the Core Device Configuration is a DELETE COMPONENT operation. When DELETE COMPONENT TYPE is executed the Core Device Configuration advises the Connector to uninstall and delete the runtime code for the referenced component type. In an example embodiment the files uninstalled are JAR files. The mandatory attributes of DELETE COMPONENT TYPE can include any one of SYMBOLICNAME and VERSION which were both described above with regards to the ADD COMPONENT TYPE operation. DELETE COMPONENT TYPE is a counterpart to ADD COMPONENT TYPE. DELETE COMPONENT TYPE allows for the removal of a previously deployed component type which can include any one of the previously discussed component types such as device adapter data processor and Network module.

According to an example embodiment the instruction instituted by the Core Device Configuration is an ADD MESSAGE TYPE operation. When the ADD MESSAGE TYPE operation is executed the Core Device Configuration advises the Connector to add the referenced message type to its internal message type repository. The mandatory attributes of the ADD MESSAGE TYPE can include any one of SYMBOLICNAME VERSION and SCHEMA. SYMBOLICNAME is an attribute that is of a string type which describes the symbolic name of the message type. VERSION is an attribute that is of a version string e.g. x.y.z which is the version of the message type. SCHEMA is of Base64 encoded Extensible Markup Language XML string type which describes the schema of the message type.

According to an example embodiment the instruction instituted by the Core Device Configuration is a DELETE MESSAGE TYPE operation. When the DELETE MESSAGE TYPE operation is executed the Core Device Configuration advises the Connector to delete the referenced message type from the internal message type repository. DELETE MESSAGE TYPE is a counterpart to the ADD MESSAGE TYPE. The mandatory attributes of DELETE MESSAGE TYPE can include any one of SYMBOLICNAME and VERSION which were both described above with regards to the ADD MESSAGE TYPE operation.

According to an example embodiment the instruction instituted by the Core Device Configuration is an ADD SUPPORTED MESSAGE TYPE operation. When the ADD SUPPORTED MESSAGE TYPE operation is executed the Core Device Configuration advises the Connector to add the described supported message type to its internal message type repository. The mandatory attributes of ADD SUPPORTED MESSAGE TYPE can include any one of COMPONENTTYPESYMBOLICNAME COMPONENTTYPEVERSION MESSAGETYPESYMBOLICNAME MESSAGETYPEVERSION INCOMING OUTGOING SYNCHRONOUS ASYNCHRONOUS RESPONSEMESSAGETYPESYMBOLICNAME and RESPONSEMESSAGETYPEVERSION. COMPONENTTYPESSYMBOLICNAME is of string type which describes the symbolic name of the component type. COMPONENTTYPEVERSION is of version string type x.y.z which describes the version of the component type. MESSAGETYPESYMBOLICNAME is of string type which describes the symbolic name of the request message type. MESSAGETYPEVERSION is of a version string type x.y.z which describes the version of the request message type. INCOMING is of a Boolean type which determines if receiving messages of the pending receipt type is supported. OUTGOING is of a Boolean type which determines if sending messages of the pending sent type is supported. SYNCHRONOUS is of a Boolean type which determines if messages of this type are supported in a synchronous way. ASYNCHRONOUS is of a Boolean type which determines if messages of this type are supported in an asynchronous way. RESPONSEMESSAGETYPESYMBOLICNAME is of a string type which is only mandatory if SYNCHRONOUS is 1 then the symbolic name of the response message type. RESPONSEMESSAGETYPEVERSION is of a version string type x.y.z which is only mandatory if SYNCHRONOUS is 1 then the version of the response message type.

According to an example embodiment the instruction instituted by the Core Device Configuration is a DELETE SUPPORTED MESSAGE TYPE operation. When the DELETE SUPPORTED MESSAGE TYPE operation is executed the Core Device Configuration advises the Connector to delete the referenced supported message type from the internal message type repository. The mandatory attributes of DELETE SUPPORTED MESSAGE TYPE can include any one of COMPONENTTYPESYMBOLICNAME COMPONENTTYPEVERSION MESSAGETYPESYMBOLICNAME and MESSAGETYPEVERSION. The mandatory attributes of DELETE SUPPORTED MESSAGE TYPE were all described above with regards to the ADD SUPPORTED MESSAGE TYPE operation. DELETE SUPPORTED MESSAGE TYPE is a counterpart to ADD SUPPORTED MESSAGE TYPE.

According to an example embodiment the instruction instituted by the Core Device Configuration is an ADD COMPONENT operation. When the ADD COMPONENT operation is executed the Core Device Configuration advises the Connector to create a component with the given id of the referenced component type configure the referenced component type with the given configuration and start the component if specified. The mandatory attributes of ADD COMPONENT can include any of ID SYMBOLICNAME VERSION CONFIGURATION and ACTIVE. ID is an identifier which identifies the component. According to an example embodiment ID is automatically generated as a numeric value by the Core Device Configuration. In an example embodiment ID is interpreted as a string type by the Connector. ACTIVE is of a Boolean type 1 or 0 which determines if the component has to be started immediately. CONFIGURATION is of Base64 encoded XML string type which describes the initial configuration of the component. The mandatory attributes of SYMBOLICNAME and VERSION were both described above.

According to an example embodiment the instruction instituted by the Core Device Configuration is an UPDATE COMPONENT CONFIGURATION operation. When the UPDATE COMPONENT CONFIGURATION operation is executed the Core Device Configuration advises the Connector to update the configuration of the referenced component accordingly. The mandatory attributes of UPDATE COMPONENT CONFIGURATION can include any one of ID and CONFIGURATION. The mandatory configuration of ID and CONFIGURATION were both described above with regards to the ADD COMPONENT operation.

According to an example embodiment the instruction instituted by the Core Device Configuration is an UPDATE COMPONENT ACTIVE STATE operation. When the UPDATE COMPONENT ACTIVE STATE operation is executed the Core Device Configuration advises the Connector to start ACTIVE is 1 or to stop ACTIVE is 0 the referenced component. The mandatory attributes of UPDATE COMPONENT ACTIVE STATE can include any one of ID and ACTIVE which were described above with regards to the ADD COMPONENT operation.

According to an example embodiment the instruction instituted by the Core Device Configuration is an UPDATE COMPONENT TYPE operation. When the UPDATE COMPONENT TYPE operation is executed the Core Device Configuration advises the Connector to update a component with the given ID of the referenced component type and configure it with the existing configuration and start it if specified. The UPDATE COMPONENT TYPE assumes that no changes were made to the configuration schema and no message types have been added removed. The mandatory attributes of UPDATE COMPONENT TYPE can include any one of ID SYMBOLICNAME VERSION and CONFIGURATION which were each described above.

According to an example embodiment the instruction instituted by the Core Device Configuration is a DELETE COMPONENT operation. When the DELETE COMPONENT operation is executed the Core Device Configuration advises the Connector to stop and uninstall the referenced component. A mandatory attribute of DELETE COMPONENT is ID. ID was describes above with regards to the ADD COMPONENT operation. DELETE COMPONENT is a counterpart to ADD COMPONENT.

According to an example embodiment the GUI of the Connector Component has three sections. In a first section the GUI displays information regarding the source configuration. In a second section the GUI displays information regarding the target configuration. In a third section the GUI displays information regarding a proxy configuration. The GUI of the Connector Component can included all or less than all of the three sections. In an example embodiment the information described as included in the three sections can be presented by the GUI in a form having all or less than all of the information from the three sections without the described section formatting. The formatting and structuring of the GUI is the same for each Connector Component. The GUIs of some Connector Components in an example embodiment are the same and some are different. According to an example embodiment the formatting and structuring of the GUI is different for each Connector Component. The GUI of the Connector Component can be formatted and structured according to other information that would be known to one of ordinary skill in the art.

As an example the configuration of the connector component may be configuration of a special component to monitor a folder on the computer in the user environment. Under the source configuration first section the GUI provides information regarding the folder that is being monitored e.g. . The GUI provides additional information regarding the interval at which the folder is being monitored e.g. and the unit of the interval e.g. . The first section also includes a field e.g. that provides the user with an opportunity to describe the source configuration process.

Under the source configuration second section the GUI provides information regarding the target to which data received from the device is being sent. For example the target address to which information is sent could be in the form of a server URL e.g. . The second section further describes the location within the repository of the identified address of the target where data is to be stored. In an example embodiment the user can create a path by labeling a new path as shown in not yet instantiated in the repository. In another example embodiment the user can identify a path within the repository from a preselected set of options. In order to access the target configuration and to save to the repository the target device on the Network could have security and or authentication requirements. In an example embodiment the user is required to enter a user name e.g. and a password associated with that user name e.g. to access the repository.

Under the source configuration third section the GUI provides information regarding a proxy over which the data is sent from the source connector to the target Network End Environment . According to an example embodiment a user can select as to whether or not a proxy server is necessary or desirable for the specific application. If the user identifies that the proxy is to be implemented the user then must identify via the GUI a proxy port name e.g. and a proxy port e.g. .

In a first step the user selects an edge component. In a second step the user creates and selects a component of the edge component. In a third step the user sets a source location remote to the edge component and hosted on a Network to be monitored for new files. In a fourth step the user sets a target location in the Network End Environment to store data adapted by the edge component once it is configured. In a fifth step the user sets configuration update interval check times for the selected edge component. In a sixth step the user creates the edge component. In a seventh step the user updates the edge component. In an example embodiment steps and together configure the specifics of a component of the edge component. According to an example embodiment the edge component is a Connector and the component of the edge component is a component of the Connector. For the sake of clarity the components of the edge components are referred to as subcomponents.

In a first step the edge component obtains a configuration from a Network End Environment . In an example embodiment the obtained edge component configuration includes all configuration operations necessary to achieve the current configuration as it was stored in the Network End Environment . In an example embodiment the updated edge component configuration is retrieved from the Core Device Configuration. In a second step the edge component implements the obtained edge component configuration. In a third step the edge component obtains component configuration information from the Network End Environment . In a fourth step the edge component implements the received component configuration. In a fifth step the edge component receives data from a device coupled to the edge component. In a sixth step the edge component adapts the data received from the coupled device. In an example embodiment the edge component processes the adapted received data. In a seventh step the edge component pushes the data to the Network End Environment . In an example embodiment the method includes a step where the edge component configuration received from the Network End Environment is a delta configuration which only provides operations necessary to update the current configuration. The device data is retrieved prior to retrieval of the edge component configuration. In an example embodiment the edge component sends the Network End Environment a configuration status update. In an example embodiment the edge component sends the Network End Environment a live status update. In an example embodiment the edge component queries the Network End Environment for component binaries. In an example embodiment above referenced steps and are executed together prior to the implementation of the updated edge component Configuration in step . In an example embodiment above referenced steps and are executed sequentially prior to the implementation of the updated edge component Configuration in step . According to an example embodiment the edge component is a Connector and the component of the edge component is a component of the Connector. For the sake of clarity the components of the edge components are referred to as subcomponents.

It should be appreciated that the present invention can be implemented in numerous ways including as a process an apparatus a system a computer processor executing software instructions or a computer readable medium such as a non transitory computer readable storage medium or a computer Network wherein program instructions are sent over optical or electronic communication or non transitory links. It should be noted that the order of the steps of disclosed processes can be altered within the scope of the invention as noted in the appended claims and in the description herein.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications can be practiced within the scope of the appended claims. The present invention can be practiced according to the claims and or the embodiments without some or all of these specific details. Portions of the embodiments described herein can be used with or without each other and can be practiced in conjunction with a subset of all of the described embodiments. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the present invention is not unnecessarily obscured. It should be noted that there are many alternative ways of implementing both the process and apparatus of the present invention. Accordingly the present embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but can be modified within the scope and equivalents of the appended claims.

