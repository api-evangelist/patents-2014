---

title: Method and apparatus for minimizing application delay by pushing application notifications
abstract: A method for minimizing application initialization delay comprising sending, from a privileged application executing on a mobile device, a registration message to a server, receiving, at the privileged application, a response message from the server, extracting, from the response message, application information and notifying the mobile device of the application information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438640&OS=09438640&RS=09438640
owner: Vonage America Inc.
number: 09438640
owner_city: Holmdel
owner_country: US
publication_date: 20140828
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 901 224 filed May 23 2013 which is incorporated herein by reference in its entirety.

Embodiments of the present invention generally relate to a voice over internet protocol VoIP service and more specifically to a method and apparatus for minimizing application initialization delay by pushing application notifications.

When an application moves from the background to the foreground of a mobile device i.e. the application goes from being unused to being used by a user of the mobile device the application may need to send one or more requests to one or more servers. For example applications i.e. mobile applications may check for configuration changes updates whether a user account is still active updating a contacts list changes to licensing agreements change to fees and charges or the like. These application requests create a delay wherein the user of the mobile device cannot fully use the application while the requests are pending. Typically the application will send an application programming interface API request for each check and the application will block other actions while waiting for a response causing considerable delay perceptible by the user.

Therefore there is a need in the art for a method and apparatus for reducing application update delay when moving the application to the foreground of a device in accordance with exemplary embodiments of the present invention.

Embodiments of the present invention relate to a method and apparatus for minimizing application initialization delay comprising sending from a privileged application executing on a mobile device a registration message to a server receiving at the privileged application a response message from the server extracting from the response message application information and notifying the mobile device of the application information.

Further embodiments of the present invention relate to a method for providing update information in a response message comprising receiving at a registration service a registration message from a mobile device communicating with one or more third party services to determine if application information is updated for applications on the mobile device and forming a response message and appending the application information to the response message.

Embodiments of the present invention generally relate to a method for minimizing delay in mobile application initialization. According to one embodiment an application with special privileges is stored in the memory of a mobile device. The operating system of the mobile device allows the privileged application to execute as a background process and provides the privileged application with one or more handlers for handling incoming communication and a timer for periodically sending notifications to an external server while a non privileged application may not execute as a background process and cannot perform any activity during hibernation. According to this embodiment the privileged application periodically sends a registration message to a remote server and receives a response.

According to the present invention the privileged application may also embed a request for updated data on behalf of non privileged applications and receive an embedded update in the response message from the server to avoid an extraneous round trip communication with a server from the non privileged application as the non privileged application is brought to the foreground. The privileged application extracts application notification information from the response and stores the information in a shared data store of the mobile device. Accordingly non privileged applications executing on the mobile device can selectively choose which updates to request from an external server based on the application notification information when they are brought to the foreground minimizing the delay required after it is brought to the foreground.

The memory or computer readable medium stores non transient processor executable instructions and or data that may be executed by and or used by the processor . These processor executable instructions may comprise firmware software and the like or some combination thereof. Modules having processor executable instructions that are stored in the memory comprise one or more privileged application and applications comprising one or more applications 1 . . . N. The device may be programmed with one or more operating systems which may include OS 2 Java Virtual Machine Linux SOLARIS UNIX HPUX AIX WINDOWS IOS and ANDROID among other known platforms.

The memory and the memory may include one or more of the following random access memory read only memory magneto resistive read write memory optical read write memory cache memory magnetic read write memory and the like as well as signal bearing media as described below.

The operating system gives special privileges to a privileged application. For example in APPLE IOS only privileged applications for example voice over internet protocol VoIP applications may execute as background processes allowing the privileged applications to perform tasks in the background while another application is in the foreground. For example if a user of the device initially executes the VoIP application on device the VoIP application will be in the foreground. However when the user switches back to a home screen of the device the device places the VoIP application in the background with privileged access.

Conversely if the user initially executed a non privileged application on device such as a game i.e. application 1 and subsequently switches back to the home screen the operating system of the device will cause the game to hibernate. In hibernation state the game cannot perform any background tasks such as checking an external server for game updates score updates contact updates or the like. However when the user launches the game again the operating system of the device will release the game from hibernation state and execute the game as a foreground process.

The privileged application handles incoming communications even as a background process. The privileged application may be programmed to send local notifications for alerting the user of the device or handle notification information and go back to a suspended state waiting for incoming communication. Alternatively the privileged application may execute a periodic communication to an external server through the client registration service . For example if the privileged application is a VoIP application the VoIP application will send a registration message to a VoIP server through network to registration service . According to some embodiments of the present invention the registration message is a Session Initiation Protocol SIP REGISTER message comprising information related to the internet protocol IP address of the device .

The registration service is a remote service executing on a server such as a VoIP server. The registration service receives the registration message indicating the location of the device and sends a response in return through the network back to the device through the I O interface . According to exemplary embodiments of the present application the update module of the registration service may also retrieve updates from third party service third party service and third party service on behalf of applications 1 . . . N stored in device . Accordingly the applications 1 . . . N will not have to contact remote servers to retrieve update information. In some embodiments the update module only includes flags indicating that a change has occurred. The applications 1 . . . N then may only make server requests corresponding to the flagged updates and do not perform server requests on items which are not flagged.

According to some embodiments the updates may include checking for new configuration parameters missed calls system message waiting determining whether a user or account is still active with the third party service updating a contact list changes to licensing or service changes to the privacy policy modifications to service rates or the like. The update module subsequently inserts proprietary headers into the server response from the registration service . According to exemplary embodiments the server response is a 200 OK SIP response and the update module appends headers to the response corresponding to the application notification flags.

The I O interface couples the response to the client registration service of the privileged application . The notification service of the privileged application extracts the headers from the response and extracts and application notification flags indicating which updates should be requested by any third party applications. Once the flags are extracted by the notification service the privileged application goes into a suspended state and as described above will be woken periodically to perform registration and to acquire any new application flags.

For example if the user launches the game application application 1 once more the game application requests a list of updated application flags relating to the game application from the operating system . If the notification service retrieved any update flags from the registration service the notification service will store those flags in memory of the device . According to one embodiment the notification service stores the application information in a shared data store of a device. According to one embodiment whenever an application is launched the notification service intercepts server requests and only permits those service requests for which flags have been saved in memory .

According to another embodiment the application from applications 1 . . . N determines on launch which server update request to perform based on the application flags stored in memory . According to yet another embodiment the application flags contain the updated information and the application 1 for example retrieves the information from the memory of device instead of sending a request to a remote server. The application 1 may then launch or move to the foreground of device and allow the user to use the application 1 without an update delay.

According to an alternate embodiment the notification service may write the application flag data to shared data area of the device . For example the notification service may write data to a dummy contact or a calendar entry named Application 1 . Application 1 of the applications will be programmed to access the Application 1 contact for example to access its application flags or its updated data. Application 2 will similarly extract the update data from the application information from contact Application 2 . According to embodiments of the present invention the data may be shared with applications by writing the data to any shared data store in memory such as e mail text message or the like as understood by those of ordinary skill in the art.

The method begins at step and proceeds to step . At step a privileged application executing on a device such as a mobile phone tablet or the like uses client registration service to send a register message to the registration service through network . The privileged application may be a VoIP application and the client registration service may be a component of the VoIP application or may be implemented as a separate service and stored in memory . The registration message may be a SIP REGISTER message used in VoIP applications or may be any message that is periodically sent to a server. The privileged application sends the registration message during the periodic timer assigned to privileged applications by the operating system while the privileged application is executing as a background process.

The method proceeds to step where the client registration service receives a response from the registration service . According to some embodiments the response is an SIP 200 OK response to the registration message though one of ordinary skill would recognize that any other response messages may be used.

The method then proceeds to step where the notification service extracts application information from the response received from the registration service . The application information may indicate which applications need to initiate an update or may indicate a portion of updates that a particular application has to update.

According to some embodiments updated application content may be embedded along with the application flags. For example a third party service may in one instance provide a flag indicating that application configuration information such as a server address has changed. According to another instance the third party service may send the registration service the server address instead of the flag thereby obviating the need for an application to request the new server address.

The method then proceeds to step . At step the notification service notifies the mobile device via the operating system . According to exemplary embodiments the notification service sends a message to the operating system according to the norms of the operating system . In other instances the notification service may create or update contacts calendar entries emails or the like each associated with a particular Application of application with the flag information.

For example Application 1 may only check the contacts for a contact named Application 1 for any application flags. When the user of device brings Application 1 into the foreground i.e. launches Application 1 or switches to Application 1 Application 1 initially checks the contact named Application 1 to determine which parameters of Application 1 need to be updated. In contact Application 1 three application flags are listed update configuration update score server to NEWSERVERADDRESS and subscription has changed .

Application 1 will only request the updated configuration the new score server address and the user s subscription level instead of requesting all updates which Application 1 would normally request thereby minimizing the initialization delay of Application 1. The user is able to use Application 1 quickly after the user launches Application 1 without sensing a delay before the user interface reacts to the user s input. Subsequently the method terminates at step .

The method begins at step and proceeds to step . At step the registration service receives a registration message from a device. According to exemplary embodiments the device may be a VoIP device and the registration message may be a SIP REGISTER message from the VoIP device. In other instances the registration message may be any form of messaging sent to a server for registering location. The registration message may be an HTTP request or the like as known to those of ordinary skill in the art. The device may be a non VoIP device such as a mobile phone executing a VoIP application.

The method then proceeds to step where the update module of the registration service waits for an update from one or more third party services to determine if there is any application information available to update. For example one or more of the third party services for example GOOGLE contacts may notify the update module that updated contact information is available. If the service has updated data then according to one embodiment the update module will set a flag indicating that contact data is updated. According to another embodiment the update module will receive the updated contact data.

At step the registration service forms a response message and appends the application information e.g. the contact flag to a response to the registration message. According to some embodiments the response is any SIP response for example an SIP 200 OK response. In some embodiments the flag information is embedded into additional headers in the response message. According to other embodiments the update data is embedded into the headers of the response message

The method proceeds to step where the registration service sends the formed response to the device of origination. The method then terminates at step .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

