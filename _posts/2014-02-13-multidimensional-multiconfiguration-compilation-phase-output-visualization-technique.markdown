---

title: Multi-dimensional, multi-configuration compilation phase output visualization technique
abstract: Systems and methods of providing a visual output of a compilation phase is provided. An example method includes receiving input source code for compilation by a compiler and displaying a multi-dimensional coordinate system including first and second axes. The method also includes providing a first user interface object associated with the first axis and providing a second user interface object associated with the second axis. The first user interface object enables a user to select one or more compilation phases, and the second user interface object enables the user to select one or more compiler versions. The method further includes receiving via the first user interface object a user selection of a compilation phase and obtaining an output of the input source code compiled in accordance with the selected compilation phase. The method further includes displaying the output between two axes of the multi-dimensional coordinate system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235388&OS=09235388&RS=09235388
owner: Red Hat, Inc.
number: 09235388
owner_city: Raleigh
owner_country: US
publication_date: 20140213
---
The present disclosure generally relates to compilers and more particularly to providing a visual output associated with a compilation process.

Instructions for a programmable processor may be stored in a form that is directly executable by the processor object or executable form or the instructions may be stored in a human readable text form called source code that can be automatically processed by a development tool commonly known as a compiler to produce executable code. The compiler may be used to develop the source code and ensure that it executes properly.

A compiler translates an input program written in a programming language into an equivalent program in another language. In particular the compiler takes a program written in a high level programming language as input and translates the program into an equivalent program in a low level language such as machine language or assembly language. The program written in the high level language may be referred to as the source program and the program converted into the low level language may be referred to as the object or target program. After compilation of the source program the target program may be loaded into memory for execution. The compilation process has many phases and debugging a compiler may be time consuming.

This disclosure relates to providing a visual output of one or more compilation phases. Methods systems and techniques for providing a visual output of one or more compilation phases are provided.

According to an embodiment a system for providing a visual output of one or more compilation phases includes a first input output I O interface that receives input source code for compilation by a compiler. The compilation of the input source code includes a plurality of compilation phases. The system also includes a second I O interface that obtains a first output of the input source code compiled in accordance with a user selected first compilation phase. The system further includes a user interface that receives via a first user interface object the user selection of the first compilation phase. The system also includes a coordinate system display engine that displays a multi dimensional coordinate system including a first axis that represents compilation phases and a second axis that represents versions of the compiler. The coordinate system display engine displays the first output between two axes of the multi dimensional coordinate system. The system further includes an object display engine that displays the first user interface object associated with the first axis and displays a second user interface object associated with the second axis. The first user interface object enables a user to select one or more compilation phases. The second user interface object enables the user to select one or more compiler versions.

According to another embodiment a method of providing a visual output of one or more compilation phases includes receiving input source code for compilation by a compiler. The compilation of the input source code includes a plurality of compilation phases. The method also includes displaying a multi dimensional coordinate system including first and second axes. The first axis represents compilation phases. The second axis represents versions of the compiler. The method further includes providing a first user interface object associated with the first axis. The first user interface object enables a user to select one or more compilation phases. The method also includes providing a second user interface object associated with the second axis. The second user interface object enables the user to select one or more compiler versions. The method further includes receiving via the first user interface object a user selection of a first compilation phase. The method also includes obtaining a first output of the input source code compiled in accordance with the selected first compilation phase. The method further includes displaying the first output between two axes of the multi dimensional coordinate system.

According to another embodiment a non transitory machine readable medium includes a plurality of machine readable instructions that when executed by one or more processors are adapted to cause the one or more processors to perform a method including receiving input source code for compilation by a compiler the compilation of the input source code including a plurality of compilation phases displaying a multi dimensional coordinate system including first and second axes wherein the first axis represents compilation phases and the second axis represents versions of the compiler providing a first user interface object associated with the first axis wherein the first user interface object enables a user to select one or more compilation phases providing a second user interface object associated with the second axis wherein the second user interface object enables the user to select one or more compiler versions receiving via the first user interface object a user selection of a first compilation phase obtaining a first output of the input source code compiled in accordance with the selected first compilation phase and displaying the first output between two axes of the multi dimensional coordinate system.

It is to be understood that the following disclosure provides many different embodiments or examples for implementing different features of the present disclosure. Some embodiments may be practiced without some or all of these specific details. Specific examples of components modules and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting.

A compiler may be used to compile a program including source code into object code. The source code may be written in a high level programming language and represented as a text file or a logically related group of text files. Object code may refer to native machine code that is executable on a hardware platform e.g. x86 . Compilation of the input source code may include a plurality of compilation phases. In an example the successive compilation phases may include lexical analysis parsing or syntax analysis semantic or context dependent or type dependent analysis intermediate code generation code optimization and code generation. The compilation phases associated with different compilers may be different. Each phase takes as the input the result of the previous phase and passes its output to the next phase.

A compiler may be complicated technology and developers may not understand the effect the compiler has on the program. For example the compiler may exploit hardware enhancements by determining capabilities of new chip designs and transform an application into highly tuned machine code that optimally performs on the new hardware. Further the compiler may optimize the program. For example the compiler may transform an application into a significantly more efficient version of itself by recognizing inefficient programming practices and converting them into more efficient ones. Additionally a compiler may generate code for different hardware architectures e.g. ARM devices . Developers may not understand the low level details of the hardware to code an efficient program.

Compilers are typically backend tools. It may be desirable to provide a frontend tool that is able to connect to the backend system and be able to help a user to effectively visualize the compilation process. For example compiler developers and software developers may be interested in how their source code is transformed through the various compilation phases. In an example it may be desirable to provide a visualization technique to compiler developers and or software developers so they can better understand code transformations. With this knowledge software developers may write better programs with an understanding of programming language grammar compiler capabilities hardware support and visualization. Additionally compiler developers may be better able to debug their compilers and write more efficient compilers by being able to see how their code changes affect input source code given to the compiler. The disclosure provides assistance to users interested in understanding the compilation process or code transformations between compilation phases.

In an embodiment a system for providing a visual output of one or more compilation phases includes a first input output I O interface that receives input source code for compilation by a compiler. The compilation of the input source code includes a plurality of compilation phases. The system also includes a second I O interface that obtains a first output of the input source code compiled in accordance with a user selected first compilation phase. The system further includes a user interface that receives via a first user interface object the user selection of the first compilation phase. The system also includes a coordinate system display engine that displays a multi dimensional coordinate system including a first axis that represents compilation phases and a second axis that represents versions of the compiler. The coordinate system display engine displays the first output between two axes of the multi dimensional coordinate system. The system further includes an object display engine that displays the first user interface object associated with the first axis and displays a second user interface object associated with the second axis. The first user interface object enables a user to select one or more compilation phases. The second user interface object enables the user to select one or more compiler versions.

Client includes a visualizer I O interface and user interface . Visualizer provides a visual output of one or more compilation phases in accordance with a user s input. In an embodiment I O interface receives input source code in a high level programming language. Examples of high level programming languages are the C C COBOL Common Business Oriented Language and Java programming languages.

Source code may be stored in text files called source code files. In an example the source code in Table A is stored in a file test.c. To generate different compilation phase output files for test.c using a GNU GNU s Not Unix compiler collection GCC compiler a user may type in the command line gcc fdump tree all test.c which creates a number of test.c. files.

Client may receive source code over network or retrieve source code from a local storage device. Source code is human readable code that is eventually converted into something that a computer processor can understand to control input and output devices and or to perform calculations. In an example source code may be converted into machine language which includes logical ones and zeros that present basic instructions for one or more central processing units CPUs and is executed by the one or more CPUs. A compiler translates source code into binary code that can be directly executed on a CPU. In an example the compiler produces native code that is executed by the CPU. Although the description describes the machine instructions as executing on a CPU it should also be understood that the machine instructions may execute on a graphic processing unit GPU . In such an example the compiler that produces the machine instructions on which the GPU is to be executed is specific to the GPU.

Source code may be transformed into different forms before eventually being transformed into machine language. For example the compilation of source code includes a plurality of compilation phases that may include lexical analysis parsing or syntax analysis semantic or context dependent or type dependent analysis intermediate code generation code optimization and code generation. An output of the lexical analysis phase may be a stream of tokens. An output of the parsing phase may be a tree representation of the source code. An output of the semantic analysis may be warnings or errors if the semantic checks fail. An output of the intermediate code generation phase may be a representation of the code in an intermediate format that may vary between compilers. An output of the code optimization phase may be optimization of the intermediate format that uses minimal code instructions. An output of the code generation phase may be the machine code that is executed on the CPU. The output of the code generation phase may enable a user to see which instructions were picked by the compiler.

Additionally the compiler may have different available versions and or may have different options. The user may desire to see the output from one or more of the compilation phases in a user friendly interface and compiled in accordance with a particular compiler version and or option. A user may use client to send a request to server for information regarding one or more compilers. Server may be a backend server from which the user may request an output of source code in accordance with a particular compilation phase compiler version and or compiler option. In server includes one or more compilers and is coupled to a database that stores data associated with compilers. Database may store information on different compilers e.g. versions and options and compilation phases. Although database is illustrated as being a database coupled to server this is not intended to be limiting and database may be a memory cache. The cache may provide for faster data lookups.

Server includes a compiler version V1.0 compiler version V2.0 and compiler version V3.0 . Compiler version V1.0 may be the first version of a compiler compiler version V2.0 may be the second version of the compiler and compiler version V3.0 may be the third version of the compiler. Compiler versions change such that compiler version V1.0 may successfully compile source code to machine language while compiler version V2.0 produces warnings or errors when it compiles source code . Client may send requests to server regarding compiler version V1.0 compiler version V2.0 and or compiler version V3.0 . Although server is illustrated as including three versions of a compiler it should be understood that server may include one or more versions of a compiler.

The user may select one or more features that is applied in relation to the compilation of source code . A feature may be for example a compilation phase compiler version or compiler option. In an example the user only selects the compilation phase and the compiler options but does not select the compiler version because only one compiler version is available e.g. a default compiler version .

Client sends to server a communication including the user s selection which may include a compilation phase compiler version and or compiler options. Client may also supply source code to server for compilation in accordance with the user s selection . Server may send to client a response including an output of the compilation in accordance with the user s selection . Output may include the actual code that is generated by the compiler. The user may invoke an application programming interface API e.g. Restful API including source code at the backend system to obtain the output.

It may be desirable to provide the user with a visualization of the multi dimensional multi configuration compilation process. Client is coupled to a display that displays objects to a user e.g. a screen . Visualizer provides a visual output of one or more compilation phases in accordance with a user s feature selections. Visualizer includes a coordinate display engine and object display engine . In an embodiment coordinate display engine displays a multi dimensional coordinate system that provides the user with greater details on the compiler such as the compilation process and its different compilation phases available versions of the compiler and or compiler options. Visualizer may provide a multi dimensional view of the compilation process so that a developer can see how a high level programming language is transformed across different compilation phases compiler versions and or different compiler options. Accordingly visualizer may provide a friendly and easy to understand user interface representation of the compilation process.

Y axis represents different compilation phases during the compilation process that transform source code into machine language. Y axis includes the lexical analysis static single assignment SSA and optimization phases. The lexical analysis phase may parse source code to produce a stream of tokens. The SSA phase may be a property of an intermediate representation which states that each variable is assigned exactly once. The optimization phase may optimize the output from the previous compilation phase.

Z axis represents compiler options and includes different levels of optimizations Level O Level O and Level O. A user interested in optimization level Level O may include a mobile space developer or data center manager. A mobile space developer may want to conserve as much energy as possible to conserve energy on the mobile device which typically does not have a consistent power supply aside from its battery. A data center manager may be interested in efficiency conserving power and energy consumption. Available compiler options may depend on the compilation phase selected by the user and may vary from compiler to compiler. In an example a compiler option is used for debugging purposes or optimization purposes e.g. Level O Level O and Level O . A user may select optimization Level O for debugging purposes and may select optimization Levels O or O for code that is already in production. In another example a compiler option is hardware specific or language specific. A user may be interested in seeing how code is represented for different hardware platforms. In another example a compiler option triggers a specific warning.

The multi dimensional display may enable a user to more easily grasp the compilation process and the transformation of the source code to machine language. Although multi dimensional coordinate system is described as having three axes it should also be understood that other embodiments in which multi dimensional coordinate system has two or more axes are within the scope of the disclosure. In an example multi dimensional coordinate system includes fewer than three axes e.g. two axes or more than three axes. Further each axes may be labeled differently from that illustrated in . For example another multi dimensional coordinate system may include only an axis that represents compiler versions and another axis that represents compiler options.

In an embodiment object display engine provides one or more user interface objects associated with an axis and the user may use the user interface object to select one or more features associated with the axis and applied in relation to the compilation of source code . User interface may receive via the user interface object a user selection associated with the compilation process. In an example object display engine provides a user interface object associated with x axis and user interface object enables the user to select one or more compiler versions. In such an example the user may use user interface object to select V1.0 V2.0 or V3.0. If the user selects V1.0 client may send a request to the backend server to use compiler version V1.0 to compile source code . Similarly if the user selects V2.0 client may send a request to server to use compiler version V2.0 to compile source code . Similarly if the user selects V3.0 client may send a request to server to use compiler version V3.0 to compile source code .

Object display engine may provide a user interface object associated with y axis and user interface object enables the user to select one or more compilation phases. In such an example the user may use user interface object to select the lexical analysis SSA or optimization compilation phases. If the user selects the lexical analysis phase client may send a request to server to compile source code up to the lexical analysis phase and provide the output from the lexical analysis phase. Similarly if the user selects the SSA phase client may send a request to server to compile source code up to the SSA phase and provide the output from the SSA phase. Similarly if the user selects the optimization phase client may send a request to server to compile source code up to the optimization phase and provide the output from the optimization phase.

Object display engine may provide a user interface object associated with z axis and user interface object enables the user to select one or more compiler options. In such an example the user may use user interface object to select optimization Levels O O or O. The user may select different levels of optimization to see how the code is optimized.

Object display engine may display user interface objects and on display . In the example illustrated in a user interface object is a sliding bar that intersects with its associated axis and can be moved across the axis to make a feature selection. This is not intended to be limiting and the user interface objects may be different from a sliding bar. The user interface object may be any object that enables a user to make a selection via display . For example a user interface object may be a radio button or drop down menu. Further the multi dimensional coordinate system is an example and other views of the compilation process may be provided to assist the user in understanding the different compilation phases compiler versions and or compiler options.

Further although the user interface objects of may be described as enabling the user to make a single selection associated with any one axis this is not intended to be limiting and the user may be able to make more than one selection in association with any of the different groups of features. For example the user may select multiple compiler phases if multiple radio buttons are displayed and each radio button corresponds to a compilation phase. Additionally if the user selects the lexical analysis phase and then another compilation phase server may be able to efficiently provide two different compilation phases by compiling source code up to the lexical analysis phase save that output and continue to compile source code . This may help reduce processing time and processing power because server does not start from source code each time but rather leverages the fact that is just compiled source code up to the lexical analysis phase and uses that output for subsequent compilation phases. Client may automatically send the user s selection s to server after each axis has a selected value or may wait until the user selects a button DONE before sending the user s selection to server for processing.

The user may use a variety of objects to make his or her selection. In an example the user uses a cursor to make her selection by for example controlling cursor with a computer mouse and dragging user interface object from V2.0 to V1.0 of x axis . In such an example client may send a request to server to use compiler version V.0 to compile source code . In another example display includes a touchscreen device and the user uses her finger or a digital stylus to make a selection. To select compiler version V1.0 the user may place her finger on display corresponding to a location on or in close proximity to user interface object and drag user interface object to V1.0 which corresponds to compiler version V1.0 in server . In such an example client may send a request to server to use compiler version V.0 to compile source code .

The following is a description of a user selection of the lexical analysis phase and compiler version V2.0. This description may apply to other compilation phases and compiler versions as well as to compiler options. In the user s selection is the lexical analysis phase and V2.0 of the compiler. In an example user interface receives via user interface object a user selection of the lexical analysis phase and receives via user interface object a user selection of compiler version V2.0. I O interface may send over network to server a request including source code and the user s selection .

Server may receive the source code and compile the source code in accordance with the user s selection . For example server may use compiler version V2.0 to compile source code up to the user s selected compilation phase which in this example is the lexical analysis phase to determine output . Output may be included in a plain text file e.g. JavaScript Object Notation JSON file . During the lexical analysis phase a parser may parse source code and produce a list of tokens defined in the programming language in which source code is written. A purpose of the lexical analysis phase is to translate source code to a stream of tokens. A token is a primitive unit of a programming language. Examples of tokens are reserved words names operators and punctuation symbols.

Output may include an output of the lexical analysis phase after compiler version V2.0 has compiled source code up to the lexical analysis phase. An example output after compiler version V2.0 has compiled the source code in Table A in accordance with the lexical analysis phase is provided in Table B below.

Server may send output to client for display to the user. I O interface may obtain output over network and coordinate display engine may display output on display . In an example server compresses output and client decompresses output when it is received. In an example coordinate display engine displays output in an output box which is between two axes of multi dimensional coordinate system .

Coordinate display engine may display one or more outputs in a way such that the user can easily understand the compilation process. For example coordinate display engine may simultaneously display two or more outputs. In such an example coordinate display engine may simultaneously display an output of the lexical analysis phase and an output of the optimization phase on display . Accordingly the user may more easily compare the two outputs. In another example coordinate display engine superimposes two or more outputs. In another example coordinate display engine provides a movie of the outputs so that the user can see how the code is transformed between the user s selected compilation phases. Additionally client may execute a web browser that interacts with server . When server sends the output to client coordinate display engine may display the output in the browser.

The user may continue to select different compilation phases compiler versions and or compiler options to be provided with a visual output based on his of her selections. In an example while the output of the lexical analysis phase is displayed user interface may receive the user s subsequent selection s . After the output of the lexical analysis phase is displayed via display the user may select another compilation phase such as the optimization phase associated with y axis . In such an example user interface may receive via user interface object a user selection of the optimization phase. The compiler version and or compiler options may change or stay the same.

Client may send source code and a request including the appropriate user s selection s including the optimization phase to server which performs the processing and produces an output of the compilation in accordance with the user s selection s . In keeping with the above example server sends back a response including the output of source code in accordance with the selected optimization phase and compiler V2.0. In particular compiler version V2.0 may compile source code up to the optimization phase to determine an output. I O interface may obtain the output of source code compiled in accordance with the selected optimization phase and compiler version V2.0 and coordinate display engine may display the output in output box .

An example of the output after compiler version V2.0 has compiled the source code in Table A in accordance with the optimization phase is provided in Table C below. The example output of the optimization phase in Table C may enable developers to see how efficiently the code is transformed into an intermediate representation. In the example illustrated in Table C and are branch labels.

In another example the user may select another compiler version and user interface may receive via user interface object a user selection of a compiler version. For example the user may select V1.0 associated with x axis . In such an example user interface may receive via user interface object a user selection of V1.0 . The user s selection of compilation phase and or compiler options may change or stay the same in relation to the previous user selection. Client may send a request to server to use compiler version V1.0 to determine an output of compiling source code in accordance with the user s selection . Additionally coordinate display engine may display a plurality of outputs based on different compiler versions next to each other so that the user can easily compare the outputs from the two different compiler versions.

In another example the user may select a compiler option and user interface may receive via user interface object a user selection of a compiler option. For example the user may select Level O associated with z axis . In such an example user interface may receive via user interface object a user selection of Level O . The user s selection of compilation phase and or compiler version may change or stay the same in relation to the previous user selection. Client may send a request to server to use compiler option Level O to determine an output of compiling source code in accordance with the user s selection . One or more compilers in server may compile source code in accordance with the compiler options. In an example a compiler may compile the same source code for different optimization levels. In an example coordinate display engine displays two outputs based on compiler option Level O from the above example and a subsequently user selected compiler option Level O next to each other so that the user can easily compare the outputs from the two different compiler options. Additionally coordinate display engine may display a plurality of outputs based on different compiler options next to each other so that the user can easily compare the outputs from the two different compiler options.

As discussed above and further emphasized here are merely examples which should not unduly limit the scope of the claims. For example although block diagram is described herein with reference to server including three versions of a compiler server may include one or more compilers and one or more versions for each compiler. Further it should be understood that one or more modules e.g. I O interface user interface coordinate display engine and object display engine in may be combined with another module. In an example coordinate display engine and object display engine are combined into a single module. It should also be understood that one or more modules in may be separated into more than one module. In an example I O interface may be separated into a first I O interface and a second I O interface.

Additionally components in may reside in a machine different from that shown in . For example one or more compilers included in server may reside in client . In such an example visualizer may be a standalone application that provides source code to the compilers and displays an output as described above without sending source code over a network to be compiled. In another example visualizer may be included in an application that runs on a mobile device e.g. laptop smartphone and tablet . Moreover although source code is described as being the input it should be understood that any output from a compilation phase may be used as input into its subsequent compilation phase. Similarly any output from a compilation phase may be used as input into its subsequent compilation phase. Further server may store in database an output from a particular compilation phase and when a request is received for an output in accordance with a compilation phase subsequent to the particular compilation phase server may use the output from the particular compilation phase as an input to determine the output from the subsequent compilation phase. The subsequent compilation phase may be one or more compilation phases after the particular compilation phase.

Further although one server e.g. server is illustrated in as producing the compilation phase output and sending it to client this is not intended to be limiting and other embodiments in which more than one server is used to produce the output in accordance with the user s selection and send it to client may be used. In an example I O interface may supply source code to compiler version V1.0 in accordance with the user s selection and may supply source code to compiler version V2.0 in accordance with the user s selection . Compiler version V1.0 and compiler version V2.0 may reside in a common computing device or may reside in distributed computing devices.

For example when server receives a request for compilation data the analysis may be performed on a single server e.g. server or in parallel with different virtual machines. Additionally the analysis of the compilation data may be performed on virtual machines on the backend. By harnessing the power of cloud computing faster performance may be provided to the user. The user may invoke an API e.g. Restful API to transfer the workload to multiple systems e.g. servers or virtual machines to speed up any operations. In an example different APIs may be provided for different computing or storage systems.

When multiple compilation phases compiler versions and or compiler options are specified in the user s selection hypervisor may start multiple virtual machines to compile the program in accordance with the different user selections. For example if the user s selection includes the lexical analysis compilation phase and compiler versions V1.0 and V2.0 hypervisor may start virtual machine to use compiler version V1.0 to compile source code up to the lexical analysis phase and may start virtual machine to use compiler version V2.0 to compile source code up to the lexical analysis phase.

Virtual machine and virtual machine may execute their operations in parallel. Allowing virtual machine and virtual machine to execute their operations in parallel may eliminate or greatly reduce user observable wait time. Virtual machine and virtual machine may execute their operations in parallel when execution of an operation by virtual machine and execution of an operation by virtual machine has some overlap. In an example virtual machine may execute an operation on a first processor during a period of time in which virtual machine executes an operation on a second processor. Each of the virtual machines may return the results to server which may send the result including the appropriate compilation phase output s to client .

To optimize performance server may store data associated with the compilation process. For example when server receives source code from a client server may store source code in database for later retrieval. In such an example the client may send source code to server which may request that the client label source code e.g. give it a filename . Client and or server may then be able to retrieve source code using the label if needed later.

Database may store metadata associated with one or more compilers. The metadata may include the available versions of a compiler how many compilation phases a compiler transitions through to transform source code into machine language and the options available for the compiler. In an embodiment server pre computes the outputs based on one or more compilation phases one or more compiler versions and or one or more compiler options that have not yet been selected by the user and caches the output s or stores them in database . This may help reduce processing time and processing power because when client sends a request for an output that has been pre computed it may be unnecessary for server to compute the output in real time. Rather server may retrieve the already computed output from the cache or database . Accordingly server may speed up the response time by pre computing these outputs.

Server may keep track of different repositories. For example server may keep track of compiler development changes made by developers and build a series of compilers with the different combination of options for every release. The individual compiler executables may be stored in database or be made available in the cloud. In an example the executables are accessed via a REST API. Further server may determine whether source code has changed. If source code has changed since the last cached version server may determine to compile the new source code

Server may compile source code to object code or past the selected compilation phase in the user s selection regardless of the compilation phase actually selected by the user. Server knows the compilation phases of the user s selected compiler. As such server may generate an output after each compilation phase and store it in database for later retrieval. Referring to after compiler version V2.0 determines the output for source code in accordance with the selected lexical analysis phase compiler version V2.0 may continue to compile source code passed the selected compilation phase. For example before receiving a user selection of the SSA or optimization phases compiler version V2.0 may cache the output from the lexical analysis phase or store the output in database and compiler version V2.0 may use that output as input into a subsequent compilation phase to determine the output from the SSA phase. Compiler version V2.0 may cache the output from the SSA phase or store the output in database and compiler version V2.0 may use that output as input into a subsequent compilation phase to determine the output from the optimization phase. Responsive to receiving a request for the SSA or optimization phase in relation to compiler version V2.0 server may retrieve the appropriate output from the cache or database .

In an example before receiving a user selection of one or more given compiler versions server supplies source code to a compiler for compilation in accordance with the not yet user selected compiler version s . When user interface receives via user interface object a user selection of a compiler version client may send a request to server for the output. Server may determine whether an output in accordance with the user selected compiler version has been pre computed. When server determines that the output in accordance with the compiler version along with any other appropriate criteria has been pre computed server may retrieve the pre computed output from the cache or database and send the output for display on display .

In an example before receiving a user selection of one or more given compiler options server supplies source code to a compiler for compilation in accordance with the not yet user selected compiler option s . When user interface receives via user interface object a user selection of a compiler option client may send a request to server for the output. Server may determine whether an output in accordance with the user selected compiler option has been pre computed. When server determines that the output in accordance with the compiler option along with any other appropriate criteria has been pre computed server may retrieve the pre computed output from the cache or database and send the output for display on display .

Method includes blocks . In a block input source code for compilation by a compiler is received the compilation of the input source code including a plurality of compilation phases. In an example I O interface receives input source code for compilation by a compiler the compilation of source code including a plurality of compilation phases. In a block a multi dimensional coordinate system including first and second axes is displayed where the first axis represents compilation phases and the second axis represents versions of the compiler. In an example coordinate display engine displays multi dimensional coordinate system including x axis and y axis where y axis represents compilation phases and x axis represents versions of the compiler.

In a block a first user interface object associated with the first axis is provided where the first user interface object enables a user to select one or more compilation phases. In an example object display engine provides user interface object associated with y axis where user interface object enables a user to select one or more compilation phases. In a block a second user interface object associated with the second axis is provided where the second user interface object enables the user to select one or more compiler versions. In an example object display engine provides user interface object associated with x axis where user interface object enables the user to select one or more compiler versions.

In a block a user selection of a first compilation phase is received via the first user interface object. In an example user interface receives via user interface object a user selection of a first compilation phase. In a block a first output of the input source code compiled in accordance with the selected first compilation phase is obtained. In an example I O interface obtains an output of source code compiled in accordance with the selected first compilation phase. In a block the first output is displayed between two axes of the multi dimensional coordinate system. In an example coordinate display engine displays the first output between two axes of the multi dimensional coordinate system.

It is also understood that additional processes may be inserted before during or after blocks discussed above. It is also understood that one or more of the blocks of method described herein may be omitted combined or performed in a different sequence as desired.

Computer system includes a bus or other communication mechanism for communicating information data signals and information between various components of computer system . Components include an input output I O component that processes a user action such as selecting keys from a keypad keyboard selecting one or more buttons or links etc. and sends a corresponding signal to bus . I O component may also include an output component such as a display and an input control such as a cursor control such as a keyboard keypad mouse etc. . An optional audio input output component may also be included to allow a user to use voice for inputting information by converting audio signals into information signals. Audio I O component may allow the user to hear audio. A transceiver or network interface transmits and receives signals between computer system and other devices via a communication link to a network. In an embodiment the transmission is wireless although other transmission mediums and methods may also be suitable. A processor which may be a micro controller digital signal processor DSP or other processing component processes these various signals such as for display on computer system or transmission to other devices via communication link . Processor may also control transmission of information such as cookies or IP addresses to other devices.

Components of computer system also include a system memory component e.g. RAM a static storage component e.g. ROM and or a disk drive . Computer system performs specific operations by processor and other components by executing one or more sequences of instructions contained in system memory component . Logic may be encoded in a computer readable medium which may refer to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. In various implementations non volatile media includes optical or magnetic disks or solid state drives volatile media includes dynamic memory such as system memory component and transmission media includes coaxial cables copper wire and fiber optics including wires that include bus . In an embodiment the logic is encoded in non transitory computer readable medium. In an example transmission media may take the form of acoustic or light waves such as those generated during radio wave optical and infrared data communications.

Some common forms of computer readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EEPROM FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer is adapted to read.

In various embodiments of the present disclosure execution of instruction sequences to practice the present disclosure may be performed by computer system . In various other embodiments of the present disclosure a plurality of computer systems coupled by communication link to the network e.g. such as a LAN WLAN PTSN and or various other wired or wireless networks including telecommunications mobile and cellular phone networks may perform instruction sequences to practice the present disclosure in coordination with one another.

Where applicable various embodiments provided by the present disclosure may be implemented using hardware software or combinations of hardware and software. Also where applicable the various hardware components and or software components set forth herein may be combined into composite components including software hardware and or both without departing from the spirit of the present disclosure. Where applicable the various hardware components and or software components set forth herein may be separated into sub components including software hardware or both without departing from the spirit of the present disclosure. In addition where applicable it is contemplated that software components may be implemented as hardware components and vice versa.

Application software in accordance with the present disclosure may be stored on one or more computer readable mediums. It is also contemplated that the application software identified herein may be implemented using one or more general purpose or specific purpose computers and or computer systems networked and or otherwise. Where applicable the ordering of various blocks described herein may be changed combined into composite blocks and or separated into sub blocks to provide features described herein.

The foregoing disclosure is not intended to limit the present disclosure to the precise forms or particular fields of use disclosed. As such it is contemplated that various alternate embodiments and or modifications to the present disclosure whether explicitly described or implied herein are possible in light of the disclosure. Changes may be made in form and detail without departing from the scope of the present disclosure. Thus the present disclosure is limited only by the claims.

