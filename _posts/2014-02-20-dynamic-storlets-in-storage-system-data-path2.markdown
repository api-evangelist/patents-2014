---

title: Dynamic storlets in storage system data path
abstract: Machines, systems and methods for dynamically implementing storlets in a storage data path. The method comprises receiving a request to perform a storage-related function on data stored on a first data storage medium in a data storage system; verifying the request by way of an authentication and authorization mechanism to prevent unauthorized access to data stored on the first data storage medium in the data storage system; and utilizing a storlet to service the request, wherein the storlet is dynamically deployed on a node in the data storage system such that the node has sufficient resources to support the storlet to service the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582677&OS=09582677&RS=09582677
owner: International Business Machines Corporation
number: 09582677
owner_city: Armonk
owner_country: US
publication_date: 20140220
---
A portion of the disclosure of this patent document may contain material which is subject to copyright protection. The owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

Certain marks referenced herein may be common law or registered trademarks of the applicant the assignee or third parties affiliated or unaffiliated with the applicant or the assignee. Use of these marks is for providing an enabling disclosure by way of example and shall not be construed to exclusively limit the scope of the disclosed subject matter to material associated with such marks.

The disclosed subject matter relates generally to dynamic deployment and usage of storlets in the data path of a storage system and particularly to a data storage system in which special purpose storlets are executed close to the location of the target data.

In a client server architecture a client machine submits data requests to a server system over a communications network. In response to receiving a request the server locates target data stored on a storage system and transfers a copy of the data from the server to the client where the data is processed by a computing processor unit CPU on the client.

In some cases the result of data processing performed on a client node is returned to the server to update the storage system records. The above data transfer regiment can result in the generation of a substantial amount of network traffic and congestion if large volumes of data are being transferred between the clients and the servers.

Advanced storage systems have been developed with locally available computing resources e.g. CPU memory etc. . The storage side local resources may not be fully utilized at all times. To help reduce network congestion it is desirable to utilize these resources to process data that would otherwise be transferred to a client node for processing.

For purposes of summarizing certain aspects advantages and novel features have been described herein. It is to be understood that not all such advantages may be achieved in accordance with any one particular embodiment. Thus the disclosed subject matter may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages without achieving all advantages as may be taught or suggested herein.

In accordance with one embodiment a method for dynamically implementing storlets in a storage data path is provided. The method comprises receiving a request to perform a storage related function on data stored on a first data storage medium in a data storage system verifying the request by way of an authentication and authorization mechanism to prevent unauthorized access to data stored on the first data storage medium in the data storage system and utilizing a storlet to service the request wherein the storlet is dynamically deployed on a node in the data storage system such that the node has sufficient resources to support the storlet to service the request.

In accordance with one or more embodiments a system comprising one or more logic units is provided. The one or more logic units are configured to perform the functions and operations associated with the above disclosed methods. In yet another embodiment a computer program product comprising a computer readable storage medium having a computer readable program is provided. The computer readable program when executed on a computer causes the computer to perform the functions and operations associated with the above disclosed methods.

One or more of the above disclosed embodiments in addition to certain alternatives are provided in further detail below with reference to the attached figures. The disclosed subject matter is not however limited to any particular embodiment disclosed.

Features elements and aspects that are referenced by the same numerals in different figures represent the same equivalent or similar features elements or aspects in accordance with one or more embodiments.

In the following numerous specific details are set forth to provide a thorough description of various embodiments. Certain embodiments may be practiced without these specific details or with some variations in detail. In some instances certain features are described in less detail so as not to obscure other aspects. The level of detail associated with each of the elements or features should not be construed to qualify the novelty or importance of one feature over the others.

Referring to an exemplary computing environment is illustrated in which a client node communicates with a storage system . Storage system may comprise proxy nodes and object nodes where a node has a data path logic an extension service and an execution service . The storage data path logic on a proxy node of storage system may perform client authentication and authorization services for requests received from the client . Authentication of a request helps ensure the identity of the client is valid and authorization verifies the client has access rights to resources specified in the request. The storage data path logic on an object node of storage system may be responsible for the actual retrieval of the data of the object in the request.

Extension service may run on the proxy node or the object node or both and may be utilized to determine whether the request may be processed by an application e.g. storlet that is locally running at the proxy node or at the storage object node. The extension service may have intelligent logic and access to mapping data to determine which proxy node or storage object node is a good candidate e.g. has the adequate level of CPU or memory resources to service the request. The extension service may communicate with an execution service running on a proxy node or a storage object node to execute the storlet. The execution service may comprise one or more sandboxes and one or more storlets running within the sandboxes .

The extension service may be implemented to select a proxy node or a storage object node that is for example closest to the data storage medium where the target data is stored and cause execution service to execute one or more storlets on the selected node. The execution service may manage a sandbox which may be configured to limit the functionality of the storlet based on parameters passed to the selected node by the proxy node. The parameters may define the privileges associated with a request that is to be serviced by the storlet . Additional details and considerations about the location of execution of the storlets are provided in further detail below in application to one or more exemplary embodiments.

Referring to in accordance with one embodiment a client node may communicate a request to a proxy node in the storage system S . The proxy node may be in communication with one or more storage object nodes in storage system . The proxy nodes or the storage object nodes may be commodity servers equipped with computing resources e.g. CPU power memory capacity etc. that are more powerful in terms of resources than a traditional storage sever and thus have sufficient resources to process certain requests in close proximity to where the data is stored thereby avoiding the need for data transfer across the network for the client node to process the data for example.

In one implementation the functionality related to storage data path logic may be augmented with extension service . As noted earlier the storage data path logic may be configured for determining whether a request submitted by a client is authentic and whether the sender of the request has sufficient authorization to access the requested data S . The storage data path logic may also retain information about the location or the node on which the requested data is stored. The extension service determines which storlet is proper for performing a requested function and where or in which node the storlet is to be deployed and executed S .

In a particular embodiment extension service is added to the storage data path logic at intercept points to perform a call e.g. a hypertext transfer protocol HTTP call to the execution service for the purpose of executing a storlet in a sandbox . The extension service may be thus tied to the storage data path logic of the proxy server or of the object server. If that server utilizes a web server gateway interface WSGI framework e.g. OpenStack Swift for example then the extension service may be a WSGI middleware that intercepts HTTP requests. The execution service may be platform independent and reside in for example the proxy node or the storage object node.

For example the extension service may determine that the request is for performing an analysis on data that is stored on multiple storage object nodes. For optimization it may be desirable to determine whether it is more appropriate or practical for the requested data to be transferred to the proxy for analysis or whether the data may be separately analyzed at each of the storage object nodes. In one example scenario the extension service running on the proxy may determine that the computing resources at the proxy node are better suited to process the data. If so then the target data is transferred to the proxy node from the storage object nodes and the execution service is provided at the proxy level e.g. by way of deploying and executing one or more storlets on the proxy .

In contrast if extension service determines that one or more storage object nodes are more suitable for processing the data then the execution service is provided at the one or more storage object nodes e.g. by way of deploying one or more storlets on the storage object node . In this manner the data processing is advantageously performed at a level that is more local i.e. at the storage object node vs. the proxy node to the location of storage of the target data. This localized processing of the data by way of locally deployed storlets helps avoid the need for data transfer from the storage object nodes to the proxy node easing the traffic across the storage network.

In addition to freeing up transmission bandwidth over the storage network the above implementation would also allow for the use of processing power memory and other resources that are available at the local data storage object node level or the proxy level where such resources may be otherwise underutilized or wasted. The execution service at the storage object node level or at the proxy level may be configured to process the client request based on the privileges e.g. read write modify and limitations e.g. resource usage limitations associated with the client request.

For example the execution service may determine the privileges and limitations of a request based on parameters submitted with or embedded in the data packets that carry the request to the proxy node or the data storage object node from the client. The parameters submitted may for example define the following exemplary attributes associated with a request 

Depending on implementation deployment and execution of storlets may vary as either dependent or independent on other storlets. In other words a request for deploying or undeploying a storlet e.g. a deploy undeploy event may be separate from a request for executing a storlet e.g. execute first execute last event . Certain storlet functionality at the execution service may be controlled by storage data path logic .

For example when a request is processed by the storage data path logic a rule associated with the request may be triggered that would cause the initiation of storlet execution in the data path as performed when initiated by the client . The triggering of the rule may be transparent to the client as the format of request may not require any special additional storlet parameters and may apply to any normally formed request. In one implementation a rules handler in the storage data path logic may be configured to manage the rules and the related triggering.

Depending on implementation information fields e.g. extension fields may be include in requests submitted by client to specify required capabilities provided by the extension service . The information fields dynamically specify how to define a new storlet what storlet computation to run and provide details of how to run the storlet. For example if the client requests use HTTP REST web services format the information for the extension fields may be added in the query string or in the headers. If for example the client requests the use of HTTP SOAP web services the information for the extension fields may be added as parameters in the methods. If understanding of the information fields and the related options may be difficult for an end user certain rules and default behaviors may be implemented to reduce complexity to the end user.

In the following an exemplary scenario as related to data access and retrieval in an image processing application is provided to help better introduce the concepts and methodology provided in this disclosure. It is noteworthy however that this exemplary scenario should not be narrowly construed to limit the scope of the claimed subject matter to the specific details or embodiment. In one example a request may be submitted to a medical data storage system to view a portion of a medical image e.g. a CT Scan in the highest resolution available. The request may include parameters that identify the specific portion of the image that is of interest.

When a proxy node receives the request from the client storage data path logic executed on the proxy node authenticates and authorizes the request. Upon successful authentication and authorization the extension service executed on the proxy node determines whether there is a storlet available to service the request and determines which storage object nodes in storage system are proper candidates for deploying the storlet. Desirably extension service selects the storage object node that is closest to the data to execute the storlet. In one embodiment the execution service may deploy the storlets on the proxy node if data stored on several storage object nodes has to be retrieved into the proxy node for the purpose of processing.

Extension service may communicate with the execution service running on the selected storage object node to retrieve the requested part of the image i.e. not the entire image . Extension service may also use rules with particular triggers e.g. rule all objects in specific container will be transformed on access to pdf via a TransformationStorlet . It is noteworthy that the execution service may execute multiple storlets in the proxy nodes or the storage object nodes depending on implementation and suitability of the nodes.

In one or more embodiments the execution service manages the sandbox . The sandbox is implemented to limit the functionality of the storlet based on the parameters passed to the storage object node by the proxy node. The parameters may define the privileges for the storlet execution. Sandbox may define for example the ports that are available limit amount of storage capacity memory and CPU resources available to the storlet. The privileges and the control over the sandbox may be provided by a human operator.

Advantageously the above implementations help provide a generic architecture in which the execution service may reside in any network node whether a proxy node or the storage object node. This approach enables the optimization of placement of the execution service taking in account which node has unutilized compute power and free network bandwidth. Further storlets may be dynamically deployed and executed code within the data path of a submitted request leveraging existing security mechanisms e.g. Keystone authentication in Swift . Dynamic configuration of the storlet parameters may be also supported in one or more embodiments such that for the same data different storlets may be executed with different input parameters in different sandboxes. The input parameters may vary from one client to another and from one request to another for example.

Accordingly storlets or other computational modules in the storage system may be generically defined deployed and executed and persist within a selected data path. Certain embodiments provide a general purpose configurable computational mechanism that uses the data path rather than a separate messaging network such as in RPC . General purpose computation may be supported in contrast to known mechanisms in the data path that leverage only specific predefined computations e.g. SVC de duplication HSM encryption etc. as storlets may be dynamically defined and deployed. The above mechanism thus advantageously leverages existing data path authentication authorization security mechanisms that penetrate deep into the storage system lower layers and may also leverage the existing data path optimized access methods to the various objects in the storage.

References in this specification to an embodiment one embodiment one or more embodiments or the like mean that the particular element feature structure or characteristic being described is included in at least one embodiment of the disclosed subject matter. Occurrences of such phrases in this specification should not be particularly construed as referring to the same embodiment nor should such phrases be interpreted as referring to embodiments that are mutually exclusive with respect to the discussed features or elements.

In different embodiments the claimed subject matter may be implemented as a combination of both hardware and software elements or alternatively either entirely in the form of hardware or entirely in the form of software. Further computing systems and program software disclosed herein may comprise a controlled computing environment that may be presented in terms of hardware components or logic code executed to perform methods and processes that achieve the results contemplated herein. Said methods and processes when performed by a general purpose computing system or machine convert the general purpose machine to a specific purpose machine.

Referring to a computing system environment in accordance with an exemplary embodiment may be composed of a hardware environment and a software environment . The hardware environment may comprise logic units circuits or other machinery and equipments that provide an execution environment for the components of software environment . In turn the software environment may provide the execution instructions including the underlying operational settings and configurations for the various components of hardware environment .

Referring to the application software and logic code disclosed herein may be implemented in the form of machine readable code executed over one or more computing systems represented by the exemplary hardware environment . As illustrated hardware environment may comprise a processor coupled to one or more storage elements by way of a system bus . The storage elements for example may comprise local memory storage media cache memory or other machine usable or computer readable media. Within the context of this disclosure a machine usable or computer readable storage medium may include any recordable article that may be utilized to contain store communicate propagate or transport program code.

A computer readable storage medium may be an electronic magnetic optical electromagnetic infrared or semiconductor medium system apparatus or device. The computer readable storage medium may also be implemented in a propagation medium without limitation to the extent that such implementation is deemed statutory subject matter. Examples of a computer readable storage medium may include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk an optical disk or a carrier wave where appropriate. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W digital video disk DVD high definition video disk HD DVD or Blue ray disk.

In one embodiment processor loads executable code from storage media to local memory . Cache memory optimizes processing time by providing temporary storage that helps reduce the number of times code is loaded for execution. One or more user interface devices e.g. keyboard pointing device etc. and a display screen may be coupled to the other elements in the hardware environment either directly or through an intervening I O controller for example. A communication interface unit such as a network adapter may be provided to enable the hardware environment to communicate with local or remotely located computing systems printers and storage devices via intervening private or public networks e.g. the Internet . Wired or wireless modems and Ethernet cards are a few of the exemplary types of network adapters.

It is noteworthy that hardware environment in certain implementations may not include some or all the above components or may comprise additional components to provide supplemental functionality or utility. Depending on the contemplated use and configuration hardware environment may be a machine such as a desktop or a laptop computer or other computing device optionally embodied in an embedded system such as a set top box a personal digital assistant PDA a personal media player a mobile communication unit e.g. a wireless phone or other similar hardware platforms that have information processing or data storage capabilities.

In some embodiments communication interface acts as a data communication port to provide means of communication with one or more computing systems by sending and receiving digital electrical electromagnetic or optical signals that carry analog or digital data streams representing various types of information including program code. The communication may be established by way of a local or a remote network or alternatively by way of transmission over the air or other medium including without limitation propagation over a carrier wave.

As provided here the disclosed software elements that are executed on the illustrated hardware elements are defined according to logical or functional relationships that are exemplary in nature. It should be noted however that the respective methods that are implemented by way of said exemplary software elements may be also encoded in said hardware elements by way of configured and programmed processors application specific integrated circuits ASICs field programmable gate arrays FPGAs and digital signal processors DSPs for example.

Referring to software environment may be generally divided into two classes comprising system software and application software as executed on one or more hardware environments . In one embodiment the methods and processes disclosed here may be implemented as system software application software or a combination thereof. System software may comprise control programs such as an operating system OS or an information management system that instruct one or more processors e.g. microcontrollers in the hardware environment on how to function and process information. Application software may comprise but is not limited to program code data structures firmware resident software microcode or any other form of information or routine that may be read analyzed or executed by a processor .

In other words application software may be implemented as program code embedded in a computer program product in form of a machine usable or computer readable storage medium that provides program code for use by or in connection with a machine a computer or any instruction execution system. Moreover application software may comprise one or more computer programs that are executed on top of system software after being loaded from storage media into local memory . In a client server architecture application software may comprise client software and server software. For example in one embodiment client software may be executed on a client computing system that is distinct and separable from a server computing system on which server software is executed.

Software environment may also comprise browser software for accessing data available over local or remote computing networks. Further software environment may comprise a user interface e.g. a graphical user interface GUI for receiving user commands and data. It is worthy to repeat that the hardware and software architectures and environments described above are for purposes of example. As such one or more embodiments may be implemented over any type of system architecture functional or logical platform or processing environment.

It should also be understood that the logic code programs modules processes methods and the order in which the respective processes of each method are performed are purely exemplary. Depending on implementation the processes or any underlying sub processes and methods may be performed in any order or concurrently unless indicated otherwise in the present disclosure. Further unless stated otherwise with specificity the definition of logic code within the context of this disclosure is not related or limited to any particular programming language and may comprise one or more modules that may be executed on one or more processors in distributed non distributed single or multiprocessing environments.

As will be appreciated by one skilled in the art a software embodiment may include firmware resident software micro code etc. Certain components including software or hardware or combining software and hardware aspects may generally be referred to herein as a circuit module or system. Furthermore the subject matter disclosed may be implemented as a computer program product embodied in one or more computer readable storage medium s having computer readable program code embodied thereon. Any combination of one or more computer readable storage medium s may be utilized. The computer readable storage medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing.

In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable storage medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out the disclosed operations may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages.

The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Certain embodiments are disclosed with reference to flowchart illustrations or block diagrams of methods apparatus systems and computer program products according to embodiments. It will be understood that each block of the flowchart illustrations or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer a special purpose machinery or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions or acts specified in the flowchart or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function or act specified in the flowchart or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer or machine implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions or acts specified in the flowchart or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical functions. It should also be noted that in some alternative implementations the functions noted in the block may occur in any order or out of the order noted in the figures.

For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams or flowchart illustration and combinations of blocks in the block diagrams or flowchart illustration may be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The claimed subject matter has been provided here with reference to one or more features or embodiments. Those skilled in the art will recognize and appreciate that despite of the detailed nature of the exemplary embodiments provided here changes and modifications may be applied to said embodiments without limiting or departing from the generally intended scope. These and various other adaptations and combinations of the embodiments provided here are within the scope of the disclosed subject matter as defined by the claims and their full set of equivalents.

