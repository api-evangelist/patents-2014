---

title: Automated deployment of applications
abstract: Functionality is disclosed for automated deployment of applications. A network-based deployment service provides functionality for deploying software components to physical or virtual hosts in a service provider network and/or to hosts in other types of networks external to the service provider network. A user of the deployment service creates an application revision that includes deployable content and an application specification defining how the application is to be deployed and one or more lifecycle events. The application revision is then uploaded to a storage service, source code repository, or other location. A deployment configuration is also created that defines the location of the application revision, a deployment group, and a schedule for the deployment. A deployment agent executing on hosts in the deployment group obtains the application revision from the specified location, deploys the deployable content according to the schedule, and performs the lifecycle events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547564&OS=09547564&RS=09547564
owner: Amazon Technologies, Inc.
number: 09547564
owner_city: Seattle
owner_country: US
publication_date: 20141110
---
Deployment of software to a large number of network hosts hosts in a fleet can be a complex and time consuming process. For example a fleet containing a large number of physical or virtual machine hosts might be utilized to provide a network accessible service or application such as a Web site. In order to deploy the software for providing the service or application to the hosts in the fleet or an update to the software it may be necessary for a system administrator to perform many complex manual tasks and or to utilize many different types of software components. In addition it might be difficult for a system administrator to coordinate the deployment of the software to the hosts in a fleet in a way that does not negatively impact the performance of the service or application provided by the hosts. Deployment of software to hosts in a fleet efficiently and in a way that does not negatively impact application performance can be complicated and time consuming even for skilled system administrators.

The following detailed description is directed to technologies for automated deployment of software to one or more hosts such as the hosts in a fleet of hosts provided by a service provider network or an on premises network. Utilizing an implementation of the technologies described herein a system administrator can reliably and rapidly deploy software to hosts in a fleet of hosts. Additionally the software can be deployed in a way that minimizes any negative effects on application performance. Deployments can also be stopped and rolled back in the event of errors. A system administrator can also initiate and track the status of deployments through a centralized deployment service.

According to one configuration presented herein a deployment service is provided that operates within or in conjunction with a service provider network. The deployment service is a network service that provides functionality for coordinating the deployment of software to one or more hosts in a fleet of hosts. The hosts may be physical hosts such as server computers or virtual hosts such as virtual machine instances. The hosts might also be provided by the service provider network or located in a network external to the service provider network such as hosts in a network owned or operated by a customer or other user of the deployment service.

As will be described in greater detail below the deployment service provides functionality for allowing a user who also might be referred to as a customer of the deployment service to supply a deployment configuration that defines aspects of a software deployment to be performed by the deployment service. For example the deployment configuration might specify the location of an application revision that contains deployable content which might be referred to herein as an application that is to be deployed to one or more physical or virtual hosts in a deployment group. A deployment group is a group of hosts to which a deployment is to be made. The deployment service might also provide functionality for allowing a user to define the hosts that are in a deployment group. The deployment configuration might also specify a schedule which might also be referred to herein as a strategy or a deployment strategy for deploying the application. In some configurations the deployment configuration might also define one or more success or failure conditions for the deployment.

In some configurations the deployment service is implemented in a service provider network. Additionally in some configurations a user of the deployment service might store the application revision containing the application to be deployed in a storage service that is also provided by the service provider network. In another configuration the application is stored in a source code repository or revision control system that is external to the service provider network. For instance in one specific configuration the application revision is stored in the GITHUB revision control system. Other source code repositories and or revision control systems within or external to the service provider network might also be utilized to store the application revision for deployment.

The application revision defined by the user of the deployment system includes deployable content i.e. the executable and or non executable files making up all or a portion of the application to be deployed . The application revision may further include an application specification that defines how the hosts are to deploy the application. For example and without limitation the application specification might provide a mapping between files in the application revision and locations on a host.

The application specification might also define one or more lifecycle events to be performed by the hosts to which the application is deployed. For example and without limitation the application specification might define scripts that are to be performed prior to deploying the application on a host following deployment of an application on a host prior to executing the application on a host and or following the termination of the application on a host. Other types of lifecycle events might also be defined for execution at different times during the deployment and or execution lifecycle of an application.

As mentioned briefly above the deployment configuration might specify a schedule for deployment of an application. The deployment service utilizes the specified schedule to determine whether the application is to be deployed to the hosts in a deployment group. Various types of schedules might be defined by a user of the deployment service in various configurations. For example rather than deploying an application to all of the hosts in a deployment group concurrently the schedule might specify a schedule for a rolling deployment in which an application is deployed to a subset of the hosts in a deployment group at a time. Deploying an application using a well defined rolling deployment can ensure that the deployment of the application to the hosts results in minimal loss of processing capacity.

In one configuration the schedule specifies a percentage based deployment wherein a rolling deployment of the application is performed to a percentage of the hosts in a deployment group at a time e.g. 10 . When the application has been successfully deployed to the specified percentage of hosts the application will then be deployed to the next percentage of hosts i.e. the next 10 of the hosts until the application has been deployed to all of the hosts in the deployment group.

An exponential deployment schedule might also be defined in some configurations. An exponential deployment schedule allows the number of hosts to which an application is deployed at a time to increase exponentially. For instance and without limitation an application might first be deployed to two hosts in a fleet. If the deployment completes successfully it might then be made to four hosts. Deployment might then continue to an exponential number of hosts at a time until the application has been deployed to all of the hosts in the fleet.

A function based deployment schedule might also be defined in some configurations. Using this mechanism a user of the deployment service defines an arbitrary mathematical function that defines the rate at which an application is to be deployed to subsets of hosts in a deployment group. The deployment service utilizes the specified function to perform the deployment. It should be appreciated that the deployment schedules mentioned above are merely illustrative and that other deployment schedules might be utilized in other configurations.

In some configurations an application is deployed to the hosts in a deployment group using an in place deployment. In an in place deployment a host might be taken out of service e.g. removed from a load balancer or other networking device or service that routes traffic to the host and the application is then deployed to the host. Once the application has been successfully deployed to the host the host may be returned to operational status e.g. added back to the load balancer so that it can once again begin serving network traffic .

In another configuration an application might be deployed to hosts using a replacement deployment which might also be referred to as a blue green deployment . In a replacement deployment a new host is instantiated such as for example using an on demand computing service provided by a service provider network. The application is then deployed to the new host. Once the application has been deployed to the new host the new host is added to a deployment group e.g. by adding the new host to a load balancer or other networking device or service that routes traffic to the deployment group . Another host might then be removed from the deployment group.

In some configurations the hosts removed from a deployment group during a replacement deployment might be retained for some period of time following the deployment. If one or more user defined failure conditions occur within a user specified period following the deployment the removed hosts can be quickly returned back to the deployment group. In this way the deployment of an application can be rolled back with little operational impact on the deployment group for a user defined period following the deployment.

The hosts to which an application is to be deployed may be configured to execute a deployment agent. In one configuration the deployment agent is configured to periodically poll the deployment service to determine if an application is to be deployed. In other configurations a push mechanism might be utilized by which the deployment service pushes notifications to the hosts indicating that an application is to be deployed. Other mechanisms might be utilized in other configurations to inform the deployment agents executing on the hosts that an application is to be deployed.

When a host is selected for deployment the deployment service may instruct the deployment agent executing on the host to obtain the application revision from the location specified in the deployment configuration and to deploy the application. In turn the deployment agent obtains the application revision from the specified location e.g. from a storage service in the service provider network or an external source code repository . The deployment agent then utilizes the application specification in the application revision to deploy the application. The deployment agent may also perform any lifecycle events defined in the application specification.

The hosts might also determine if any of the user specified failure conditions occurred during the deployment. If no failure conditions occurred i.e. the application deployment was successful the deployment service might continue deploying the application to other hosts in the deployment group. If a failure condition or conditions occurred i.e. the deployment was unsuccessful the deployment service might roll back the deployment of the application. For example and as described briefly above when a replacement deployment is performed the hosts replaced in the deployment group might quickly be returned to service.

In order to provide the functionality described above the deployment service or another component might expose various network service application programming interfaces APIs in some configurations. For example and without limitation the deployment service might expose APIs for configuring and initiating a deployment of an application in the manner described herein. Other types of APIs for performing other types of functions might also be provided in other configurations.

In some configurations the application revision is defined such that it contains only files that have changed as compared to a previous version of the application. In this way only the files that need to be updated on a host are transferred to the storage service or external source code repository and to the hosts for deployment. This configuration can save significant network bandwidth during deployment especially where a large application is deployed to a large number of geographically disparate hosts. Additional details regarding the various components and processes described briefly above for automated deployment of applications to hosts in a fleet will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers mobile telephone devices tablet computing devices special purposed hardware devices network appliances and the like. As mentioned briefly above the configurations described herein may be practiced in distributed computing environments where tasks may be performed by remote computing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific configurations or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

Each type or configuration of a computing resource may be available from the service provider network in different sizes. For example a service provider might offer physical hosts virtual machine instances or other types of data processing resources that are available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system. In this regard it should be appreciated that the term host as used herein might also encompass other types of execution environments such as software containers.

A service provider might also offer other types of resources for purchase and use by customers. For example a service provider might offer hardware devices database resources file or block data storage resources and or networking resources such as load balancing resources domain name service DNS resources virtual private cloud VPC resources virtual local area network VLAN resources and or other types of hardware and software computing resources or services on a permanent or as needed basis.

The service provider operating the service provider network might also charge a fee for operating the resources to a customer that creates and uses the resources. The fee charged for a particular resource might be based upon the type and or configuration of the resource. For example in the case of a data processing resource like a virtual machine instance the fee for use of the resource might be charged based upon the amount of time the resource is utilized. In the case of a data storage resource the fee might be computed based upon the amount of data stored and or the amount of data transferred into or out of the resource. The fees for other types of resources might also be based upon other considerations. A service provider might also utilize various purchasing models to determine the amount to charge a customer for use of resources provided by the service provider network .

The resources described above may be provided in one particular implementation by one or more data centers operated by the service provider. As known to those skilled in the art data centers are facilities utilized to house and operate computer systems and associated components. Data centers also typically include redundant and backup power communications cooling and security systems. The data centers might be located in geographically disparate locations and might also be connected to various other facilities such as co location facilities and various wide area networks WANs such as the Internet. In the environment shown in a service provider might operate one or more data centers configured to provide the resources in the service provider network to its customers over a network .

The resources described briefly above might also be provisioned and de provisioned as needed in an automated fashion. For example the service provider network might be configured to instantiate a new instance of a computing resource such as a virtual machine instance in response to an increase in demand for a network service or other condition. Other types of computing resources might also be provisioned and de provisioned in a similar manner. Services in the service provider network might also provide functionality for automatically scaling and or de scaling resources based upon demand for the resources and or other factors.

A customer or potential customer of the service provider network might utilize an appropriate computing system such as the development system to communicate with the service provider network over an appropriate data communications network . In this way a customer of the service provider network can configure various aspects of the operation of the computing resources provided by the service provider network or to otherwise control any computing resources being utilized by the customer. For example and without limitation a computing system utilized by a customer of the service provider network might be utilized to purchase computing resources in the service provider network to configure aspects of the operation of the computing resources to deploy applications in the manner described herein and or to perform other types of functionality with regard to the operation of the computing resources provided by the service provider network .

A customer computing system such as the development system might be any type of computing device capable of connecting to the service provider network via a suitable data communications network such as but not limited to a laptop or desktop computer a tablet computing device a server computer or a mobile telephone. Administrative users employed by the operator of the service provider network such as administrators managing the operation of the service provider network might also connect with and utilize resources provided by the service provider network in a similar fashion.

The service provider network might also be configured to provide various types of network services for use internally and by customer customers. For example and without limitation the service provider network may provide an on demand computing service for providing physical or virtual machine hosts on demand a data storage service for storing data a cryptography service a notification service an authentication service a policy management service a task service and potentially other types of network accessible services. These and other services may be utilized together to implement various types of network based applications in the service provider network . Additional details regarding one implementation of the service provider network and the various types of network services that might be provided by the service provider network will be provided below with regard to .

As discussed briefly above the service provider network is also configured with a deployment service in one configuration. The deployment service is a network service that provides functionality for coordinating the deployment of software which may referred to herein as an application or applications to one or more hosts in a fleet of hosts. As also mentioned above the hosts may be physical hosts such as server computers or virtual hosts such as virtual machine instances provided by the on demand computing service in one particular configuration. The hosts might also be provided by the on demand computing service operating in the service provider network as shown in . Alternately the hosts might be located in a network external to the service provider network such as hosts in a network owned or operated by a customer or user of the deployment service. Additional details regarding a configuration wherein the hosts are external to the service provider network will be described below will regard to .

As also shown in a customer or other user of the service provider network might utilize a development system to utilize functionality provided by the deployment service . In particular the development system might be utilized to create an application revision . The application revision defined by the user of the deployment system includes deployable content i.e. the executable and or non executable files making up all or a portion of the application to be deployed . The application revision may further include an application specification that defines how the hosts are to deploy the application. For example and without limitation the application specification might provide a mapping between files in the application revision and locations on the file system of a host .

The application specification might also define one or more lifecycle events to be performed by the hosts to which the application is deployed or by other systems and or services within or external to the service provider network. For example and without limitation the application specification might define scripts that are to be performed prior to deploying the application on a host e.g. stop the execution of the application following deployment of an application on a host e.g. start the execution of the application prior to executing the application on a host and or following the start of execution e.g. confirm that the application is executing properly or termination of the application on a host . Other types of lifecycle events might also be defined for execution at different times during the deployment and or execution lifecycle of an application. A status report might also be provided back to the deployment service or another user defined location following the completion of the lifecycle events described above. Additional details regarding the performance of one or more customer specified deployment lifecycle events will be provided below with regard to .

As shown in in some configurations a user of the deployment service might utilize the development system to store the application revision containing the application to be deployed in a storage service that is also provided by the service provider network . In another configuration the deployment system might be utilize to store the application revision in a source code repository or revision control system that is external to the service provider network . For instance in one specific configuration the application revision is stored in the GITHUB revision control system. Other source code repositories and or revision control systems within or external to the service provider network might also be utilized to store the application revision for deployment.

The deployment service also provides functionality for allowing a user to supply a deployment configuration for use with the application revision that defines aspects of a deployment to be performed by the deployment service . For example the deployment configuration might specify the location e.g. in the storage service or the source code repository of the application revision that contains the deployable content that is to be deployed to one or more physical or virtual hosts in a deployment group . In some configurations the deployment configuration might also define one or more success or failure conditions for the deployment.

The deployment configuration also includes data identifying the deployment group to which the identified application revision is to be deployed. As mentioned briefly above a deployment group is a group of hosts to which a deployment is to be made. The deployment service might also provide an API or another mechanism for allowing a user to define the hosts that are in a deployment group . It should be appreciated that different deployment groups might be created to execute different versions of an application. For example and without limitation a deployment group might be created to run a development version of an application another deployment group might be created to run a test version of an application and another deployment group might be created to run a production version of an application. The deployment groups might have hosts that are in different geographical locations.

The deployment configuration might also specify a schedule for deploying the application. The deployment service utilizes the specified schedule to determine whether the application is to be deployed to the hosts in the deployment group specified by the data in the deployment configuration . As also mentioned above various types of schedules might be defined by a user of the deployment service in various configurations. For example rather than deploying an application to all of the hosts in a deployment group concurrently the schedule might specify a schedule for a rolling deployment in which an application is deployed to a subset of the hosts in a deployment group at a time. Deploying an application using a well defined rolling deployment schedule can ensure that the deployment of the application to the hosts results in minimal loss of processing capacity.

In one configuration the schedule specifies a percentage based deployment wherein a rolling deployment of the application is performed to a percentage of the hosts in a deployment group at a time e.g. 10 . A customer might specify a percentage of hosts to which an application is to be deployed at a time e.g. 10 or specify the percentage as a raw number e.g. deploy to ten of 100 hosts at a time . When the application has been successfully deployed to the specified percentage of hosts the application will then be deployed to the next percentage of hosts i.e. the next 10 of the hosts until the application has been deployed to all of the hosts in the deployment group .

The schedule might also be an exponential deployment schedule that allows the number of hosts to which an application is deployed at a time to increase exponentially. For instance and without limitation an application might first be deployed to two hosts in a deployment group . If the deployment completes successfully it might then be made to four hosts . Deployment might then continue to an exponentially increasing number of hosts at a time until the application has been deployed to all of the hosts in the deployment group .

A function based deployment schedule might also be defined in some configurations. Using this mechanism a user of the deployment service defines an arbitrary mathematical function that defines the rate at which an application is to be deployed to subsets of hosts in a deployment group . The deployment service utilizes the specified function to perform the deployment. It should be appreciated that the deployment schedules mentioned above are merely illustrative and that other deployment schedules might be utilized in other configurations. For example and without limitation a user might specify a schedule such that an application will be deployed to one host at a time to all of the hosts in a deployment group at the same time or in another manner.

A schedule might also be defined that specifies confidence intervals that increase the number of hosts to which the application is deployed based upon the success or failure of the deployment. In this way deployment might start with a small subset of hosts . If the deployment to the small subset is successful the next subset of hosts to which the application is deployed may then be increased. This process might continue until the deployment has completed to all of the hosts in a deployment group . Additional details regarding utilizing the schedules described above to perform a rolling deployment will be provided below with regard to .

In some configurations an application is deployed to the hosts in a deployment group using an in place deployment. In an in place deployment a host might be taken out of service e.g. removed from a load balancer or other networking device or service that routes traffic to the host and the application is then deployed to the host . Once the application has been successfully deployed to the host the host may be returned to operational status e.g. added back to the load balancer so that it can once again begin serving network traffic . Additional details regarding an in place deployment will be provided below with regard to .

In another configuration an application might be deployed to hosts in a deployment group using a replacement deployment which might also be referred to as a blue green deployment . In a replacement deployment a new host is instantiated such as for example using the on demand computing service provided by the service provider network . The application is then deployed to the newly instantiated host . Once the application has been deployed to the new host the new host is added to the deployment group e.g. by adding the new host to a load balancer or other networking device or service that routes traffic to the deployment group . Another host might then be removed from the deployment group . The deployment configuration or another mechanism might be utilized to specify whether a particular deployment is to be performed as an in place or a replacement deployment. Additional details regarding a replacement deployment will be provided below with regard to .

In some configurations the hosts removed from a deployment group during a replacement deployment might be retained for some period of time following the deployment. If one or more user defined failure conditions occur within a user specified period following the deployment the removed hosts can be quickly returned back to the deployment group . In this way the deployment of an application can be rolled back with little operational impact on the deployment group for a user defined period following the deployment. Additional details regarding a mechanism for rolling back an replacement deployment will be provided below with regard to . Additional details regarding a mechanism for rolling back an in place deployment will be provided below with regard to .

As shown in the hosts to which an application is to be deployed may be configured to execute a deployment agent in one configuration. The deployment agent may be configured to periodically poll the deployment service to determine if an application is to be deployed to the host upon which the deployment agent is executing. In other configurations a push mechanism might be utilized by which the deployment service pushes notifications to the deployment agent indicating that an application is to be deployed to the host upon which the deployment agent is executing. Other mechanisms might be utilized in other configurations to inform the various instances of the deployment agent executing on the hosts that an application is to be deployed thereupon.

When a host is selected for deployment the deployment service may instruct the deployment agent executing on the host to obtain the application revision from the location specified in the deployment configuration and to deploy the application. In turn the deployment agent obtains the application revision from the specified location e.g. from a storage service in the service provider network or an external source code repository . The deployment agent then utilizes the application specification in the application revision to deploy the application onto the host upon which it is executing. The deployment agent may also perform any lifecycle events defined in the application specification . Additional details regarding the deployment process described above will be provided below with regard to .

The hosts might also determine if any of the user specified failure conditions occurred during the deployment. If no failure conditions occurred i.e. the application deployment was successful the deployment service might continue deploying the application to other hosts in the deployment group . If a failure condition or conditions occurred i.e. the deployment was unsuccessful the deployment service might roll back the deployment of the application. For example and as described briefly above when a replacement deployment is performed the hosts replaced in the deployment group might quickly be returned to service.

In order to provide the functionality described above the deployment service or another component might expose various network service APIs and or command line interfaces CLIs in some configurations. For example and without limitation the deployment service might expose APIs or CLIs for defining and or registering an application with the deployment service and for configuring and initiating a deployment of the application in the manner described herein. APIs might also be provided for submitting the information described above as being contained in the deployment configuration . For example APIs might be provided for submitting the location of the application revision for providing data identifying the deployment group for a deployment for defining the deployment schedule for defining the success and or failure conditions and or for defining other aspects of a deployment. The deployment service might also provide other APIs or CLIs for monitoring the status of an in progress deployment obtaining the status of a instances in a deployment for troubleshooting a deployment for stopping an in progress deployment and or for rolling back a failed or problematic deployment. Other types of APIs for performing other types of functions might also be provided in other configurations.

In some configurations the application revision is defined such that it contains only deployable content that has changed as compared to a previous version of the application. In this way only the files that need to be updated on a host are transferred to the storage service or to the external source code repository and subsequently to the hosts for deployment. This configuration can save significant network bandwidth during deployment especially where a large application is deployed to a large number of geographically disparate hosts . Additional details regarding the performance of an incremental file deployment will be provided below with regard to .

In the configuration shown in the physical or virtual machine hosts in the deployment group to which the application is to be deployed are in the network rather than in the service provider network . Additionally the hosts in the network might utilize an authentication mechanism to authenticate with the storage service . In other ways however the configuration shown in operates in the same manner as the configuration shown in and described above. For instance the deployment service may utilize the deployment configuration and the schedule specified therein to select hosts in the deployment group for deployment of the application. The instances of the deployment agent executing on the hosts in the deployment group receive instructions from the deployment service to obtain the application revision from the storage service the source code repository or other location. The instances of the deployment agent then obtain the application revision perform the deployment including any user defined lifecycle events and report the results back to the deployment service .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein. Some or all of these operations might also be performed by components other than those specifically identified.

The routine begins at operation where a user of the storage service creates deployable content . For example and without limitation a user might utilize software development tools executing on the development system or another system e.g. a development system within the service provider network to create executable interpretable and or other type of program code. The user might create other types of non executable files such as graphics text configuration files packages and or other content for use by the application. In this regard it should be appreciated that the term deployable content is meant to encompass any type of file that is used to provide an application on the hosts .

Once the deployable content has been created the routine proceeds to operation where the application specification for the deployable content is created. As discussed above the application specification includes data that defines how the hosts are to deploy the deployable content . For example and without limitation the application specification might provide a mapping between the files of the deployable content and file system locations on a host . As also discussed above the application specification for the deployable content might also define one or more lifecycle events to be performed by the hosts in conjunction with the deployment and or execution of the deployable content . For example and without limitation the application specification might define scripts that are to be performed prior to deploying the application on a host following deployment of an application on a host prior to executing the application on a host and or following the termination of the application on a host . Other types of lifecycle events might also be defined for execution at different times during the deployment and or execution lifecycle of an application.

From operation the routine proceeds to operation where the user might specify a deployment configuration for the deployable content i.e. the application that is to be deployed . As discussed above the deployment configuration may include a location of the application revision containing the deployable content and the application specification . The deployment configuration might also include data defining a deployment group to which the deployable content is to be deployed. The deployment configuration might also define a deployment schedule and the type of deployment to be performed e.g. an in place deployment or a replacement deployment .

The deployment configuration might also define one or more conditions that signal the success or failure of the deployment. The deployment configuration might also provide other types of data for configuring a deployment in other configurations. In this regard it should be appreciated that various mechanisms such as web service APIs and CLIs might be utilized to provide the deployment configuration to the deployment service .

From operation the routine proceeds to operation where a user of the development system may upload the application revision to the storage service in the service provider network to the source code repository or to another network accessible location. As discussed above the location specified in the deployment configuration specifies the location of the application revision .

From operation the routine proceeds to operation where the deployment service utilizes the schedule and or other information contained in the deployment configuration to select hosts to which the application is to be deployed. When a host is selected the hosts is instructed to obtain the application revision from the specified location .

In turn the host obtains the application revision and deploys the deployable content contained therein. As discussed above the host might also perform one or more lifecycle events in conjunction with the deployment and or execution of the application. The host might also report the status of the deployment back to the deployment service at various times during the deployment process. In this way the deployment service and or the user that requested the deployment can check the results of the deployment at various times to ensure that the deployment is proceeding satisfactorily.

If it is necessary to redeploy the deployable content for some reason or to deploy an update to the deployable content the routine may repeat operations to perform another deployment. If no further deployment is required the routine may proceed from operation to operation where it ends. In this regard it should be appreciated that it may not be necessary to repeat operations in order to deploy an application revision to a different deployment group. For example the application revision might first be deployed to a deployment group used for testing. If the testing completes successfully the same application revision might then be deployed to a production deployment group without repeating operations for creating the deployable content creating the application specification etc. Additional details regarding the deployment process including the rolling back of a deployment will be provided below.

The routine begins at operation where the deployment service identifies a host to which the deployable content is to be deployed. As discussed above the schedule and or other considerations might be utilized to select a particular host or hosts for deployment. Once a host has been selected the routine proceeds to operation where the host to which the deployable content is to be deployed is removed from a load balancer or other networking device or service that routes network traffic to the deployment group containing the host . In some configurations the deployment service communicates directly with the networking device or service to perform this functionality. In other configurations the application specification includes a script or other type of program code that performs this function. This functionality might also be accomplished using other mechanisms in other configurations.

From operation the routine proceeds to operation where the deployment service instructs the host to which the deployment content is to be deployed to perform the deployment. As discussed above various types of push or pull mechanisms might be utilized to provide this instruction to the host . Other mechanisms might also be utilized. In response to such an instruction the host obtains the application revision from the location and performs the deployment including the performance of any lifecycle events specified in the application specification .

Once the deployment has completed the routine proceeds from operation to operation . At operation the load balancer or other networking device or service fronting the deployment group is instructed to add the host to which the deployment was performed. In this way network traffic can be routed to the host to which the deployment was performed. In some configurations the deployment service communicates directly with the networking device or service to perform this function. In other configurations the application specification includes a script or other type of program code that performs this function. This functionality might also be accomplished using other mechanisms in other configurations. From operation the routine proceeds to operation where it ends.

Once a new host has been made available the routine proceeds to operation where the deployment agent is deployed to the new host and instructed to perform the deployment. As discussed above various types of push or pull mechanisms might be utilized to provide this instruction to the new host . Other mechanisms might also be utilized. In response to such an instruction the new host obtains the application revision from the location and performs the deployment including the performance of any lifecycle events specified in the application specification .

Once the deployment has completed the routine proceeds from operation to operation . At operation the new host is added to the deployment group . By adding the new host to the deployment group network traffic can be routed to the new host to which the deployment was performed. Once the new host has been added to the deployment group the routine may proceed to operation where another host may be removed from the deployment group . The host removed from the deployment group might be retained for some user specified period of time for use in rolling back the deployment if necessary or desired. Additional details regarding this mechanism will be provided below with regard to .

Using the replacement deployment mechanism described above the deployment can be performed to a new host and the new host can replace an existing host in the deployment group . Consequently by performing a replacement deployment for all of the hosts in a deployment group a deployment can be performed with minimal impact on the performance of the deployment group . From operation the routine proceeds to operation where it ends.

The routine begins at operation where the deployment service receives the schedule for the deployment. As discussed above the schedule might be submitted to the deployment service by way of an API or CLI. The routine then proceeds to operation where the deployment service determines whether the schedule specifies a percentage based deployment. As discussed above the schedule might specify a percentage based deployment wherein a rolling deployment of the application is performed to a percentage of the hosts in a deployment group at a time e.g. 10 .

When the application has been successfully deployed to the specified percentage of hosts the application will then be deployed to the next percentage of hosts i.e. the next 10 of the hosts until the application has been deployed to all of the hosts in the deployment group . If such a schedule has been specified the routine proceeds from operation to operation where the deployment is performed in this manner. The routine then proceeds from operation to operation where it ends.

If a percentage based deployment has not been specified the routine proceeds from operation to operation where a determination is made as to whether the schedule specifies an exponential deployment. As discussed above an exponential deployment schedule allows the number of hosts to which an application is deployed at a time to increase exponentially. If an exponential deployment has been specified the routine proceeds from operation to operation where the deployment is performed in this manner. The routine then proceeds from operation to operation where it ends.

If neither a percentage based or exponential deployment schedule has been specified the routine proceeds from operation to operation . At operation a determination is made as to whether the deployment schedule specifies a function based deployment. As discussed briefly above a user of the deployment service might specify an arbitrary mathematical function that defines the rate at which an application is to be deployed to subsets of hosts in a deployment group . The deployment service utilizes the specified function to perform the deployment. If a user defined function based deployment has been specified the routine proceeds from operation to operation where the deployment is performed to the hosts in the deployment group according to the user defined function. The routine then proceeds from operation to operation where it ends.

If neither a percentage based exponential or function based deployment has been specified the routine proceeds from operation to operation . At operation the deployment might be performed according to another type of user defined schedule . For example and without limitation the application might be deployed to all of the hosts in a deployment group at a time. Alternately the application might be deployed to one host in the deployment group at a time. Other schedules for deploying an application to the hosts in a deployment group might also be utilized.

As discussed briefly above a schedule might also be defined that specifies confidence intervals that increase the number of hosts to which the application is deployed based upon a confidence level of the deployment. In this way deployment might start with a small number of hosts and increase the number of hosts to which the application is deployed at a time if the deployment is successful. Confidence intervals might also be utilized in other ways to accelerate or decelerate the number of hosts to which an application is to be deployed based upon the confidence in previous deployments of the application. From operation the routine proceeds to operation where it ends.

The routine begins at operation where the deployment service might receive one or more customer defined failure conditions which might also be referred to as alarm conditions . The failure conditions define conditions under which a deployment of an application to hosts in a deployment group should be rolled back i.e. restore the hosts to the state they were in just prior to the deployment . Various systems and or services in the service provider network along with the hosts themselves might be utilized to monitor for the occurrence of the alarm conditions.

From operation the routine proceeds to operation where the deployment service might also receive a customer defined retention period for hosts that are removed from a deployment group as a part of a replacement deployment. The retention period might specify for example that hosts removed from a deployment group in conjunction with a replacement deployment of an application are to be retained for five days or other period of time following the completion of the deployment.

From operation the routine proceeds to operation where a replacement deployment is performed to hosts in a deployment group in the manner described above with regard to . The routine then proceeds to operation where a determination is made as to whether one of the customer specified alarm conditions has occurred.

If an alarm condition has occurred the routine proceeds from operation to operation where one or more hosts that were removed from the deployment group as part of the replacement deployment are added back to the deployment group e.g. added back to the load balancer or service that fronts the deployment group . The routine then proceeds from operation to operation where the hosts to which the application was deployed are removed from the deployment group e.g. removed from the load balancer or network service that fronts the deployment group . The removed hosts might also be de provisioned following removal from the deployment group . In this way the hosts to which the deployment was performed can be quickly removed from the deployment group and the hosts that were removed from the deployment group as part of the deployment can be returned to the deployment group . From operation the routine proceeds to operation where it ends.

If at operation it is determined that an alarm condition has not occurred the routine proceeds to operation . At operation a determination is made as to whether the user specified retention period has expired following completion of the deployment at operation . If the retention period has not expired the routine proceeds from operation to operation . If the retention period has expired the routine proceeds from operation to operation . At operation hosts removed from the deployment group as part of the replacement deployment may be de provisioned. For example a virtual host might be destroyed. Other types of hosts might be de provisioned in different ways. The routine then continues from operation to operation where it ends.

The routine begins at operation where one or more customer defined alarm conditions might be received in the manner described above. The routine then proceeds from operation to operation where an in place deployment of hosts in a deployment group is started in the manner described above with regard to . The routine then proceeds from operation to operation where a determination is made as to whether one or more of the user specified alarm conditions has occurred. If an alarm condition has occurred the routine proceeds from operation to operation .

At operation the in progress deployment is stopped. For example and without limitation the deployment service might instruct the hosts involved in the deployment to discontinue any further processing of the deployment. From operation the routine then proceeds to operation where the deployment service instructs the hosts involved in the deployment to begin a new in place deployment with the previous version of the application. In this way a deployment can be stopped and the deployment can be rolled back to the previous version of the application in response to the detection of an alarm condition. From operation the routine proceeds to operation where it ends.

If at operation it is determined that no alarm condition has occurred the routine proceeds from operation to operation . At operation a determination is made as to whether the deployment has completed. If the deployment has not completed the routine proceeds back to operation where another determination might be made as to whether an alarm condition has occurred during the deployment. If it is determined at operation that the deployment has completed the routine proceeds from operation to operation where it ends.

The routine begins at operation where an instance of the deployment agent executing on a host polls the deployment service to determine whether a deployment is to be performed. As mentioned above a push mechanism might be utilized in other configurations to instruct a host that a deployment is to be performed. If a deployment is to be performed the routine proceeds from operation to operation .

At operation the instance of the deployment agent retrieves the application revision from the location specified in the deployment configuration . The routine then proceeds from operation to operation where the deployment agent performs any pre installation lifecycle events e.g. scripts specified in the application specification . The routine then proceeds from operation to operation where the deployable content in the application revision is deployed to the host .

From operation the routine proceeds to operation where the deployment agent performs any post installation lifecycle events specified in the application specification . The routine then proceeds to operation where any pre execution lifecycle events specified in the application specification are also performed. Once any pre execution lifecycle events have been performed the routine proceeds from operation to operation where execution of the deployed application may be started.

From operation the routine proceeds to operation where a determination is made as to whether the execution of the deployed application has been stopped. If execution of the application has been stopped the routine proceeds from operation to operation where any post application stop lifecycle events specified in the application specification are performed. The routine then proceeds to operation where it ends. It should be appreciated that the various lifecycle events described above are merely illustrative and that other lifecycle events might be defined for performance by the hosts and or other systems and or services within or external to the service provider network at other times during the deployment and or execution of an application.

The routine begins at operation where a customer utilizes the deployment system to submit a request to deploy an application to the deployment service . The request might come in the form of the deployment configuration for example. In response to receiving such a request the routine proceeds from operation to operation where the deployment service or another system or service identifies files in the deployable content of the application revision that have changed since the previous deployment of the application. For example and without limitation the deployment service might communicate with a source code repository to determine the files that have changed. Alternately the deployment service might maintain a cache of previously deployed application revisions and utilize the revisions stored in the cache to identify the files that have changed. Other mechanisms might be utilized to identify those files that have changed since the previous deployment.

Once the changed files have been identified the routine proceeds from operation to operation where the deployment service causes a deployment to be performed to the hosts in a deployment group of only the changed files identified at operation . For example the deployment service might provide the instances of the deployment agent executing on the hosts with the location of an application revision that contains only the changed files identified at operation . The changed files are then deployed to the hosts in the manner described above. The routine then proceeds from operation to operation where it ends.

The computing resources provided by the service provider network may include various types of computing resources such as data processing resources data storage resources networking resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as described briefly above with regard to data processing resources may be available as physical computers or virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Data storage resources may include file storage devices block storage devices and the like. As discussed briefly above the service provider network might also be configured to provide other types of network services.

The computing resources provided by the service provider network are enabled in one implementation by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements some of the technologies disclosed herein for providing a deployment service within the service provider network will be described below with regard to .

The customers and other users of the service provider network may access the computing resources provided by the service provider network over a network such as a wide area network WAN . For example and without limitation a development system operated by a customer or other user of the service provider network might be utilized to access the service provider network by way of the network . It should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The server computers may be standard tower rack mount or blade server computers configured appropriately for providing the computing resources described herein. As mentioned above the computing resources might be data processing resources such as virtual machine instances or hardware computing systems data storage resources database resources networking resources and others. Some of the servers might also be configured to execute a resource manager capable of instantiating and or managing the computing resources. In the case of virtual machine instances for example the resource manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server . Server computers in the data center might also be configured to provide network services and other types of services some of which are described in detail below with regard to .

The data center shown in also includes a server computer F that may be utilized for executing some or all of the software components described above. For example and without limitation the server computer F might be configured to execute the deployment service which has been described in detail above. The server computer F might also be configured to execute other components and or store data for providing some or all of the functionality described herein.

In the example data center shown in an appropriate LAN is also utilized to interconnect the server computers A F. The LAN is also connected to the network illustrated in . It should be appreciated that the configuration and network topology described herein has been greatly simplified and that many more computing systems software components networks and networking devices may be utilized to interconnect the various computing systems disclosed herein and to provide the functionality described above. Appropriate load balancing devices or other types of network infrastructure components might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and potentially between computing resources in each of the data centers . It should be appreciated that the configuration of the data center described with reference to is merely illustrative and that other implementations might be utilized.

It should be appreciated that customers of the service provider network may include organizations or individuals that utilize some or all of the services provided by the service provider network . As shown in a customer may communicate with the service provider network through a network which may be a communication network such as the Internet an intranet or an Internet service provider ISP network or a combination of such networks. Communications from the development system to the service provider network may cause the services provided by the service provider network to operate in accordance with the described configurations or variations thereof.

The services provided by the service provider network in the example shown in may further include a cryptography service a notification service an authentication service a policy management service a task service and potentially other services . The service provider network might also provide the deployment service for use internally and by external customers in the manner described above.

It is noted that not all configurations described include the services described with reference to and additional services may be provided in addition to or as an alternative to services explicitly described. Each of the services shown in might also expose web service interfaces that enable a caller to submit appropriately configured API calls to the various services through web service requests. In addition each of the services may include service interfaces that enable the services to access each other e.g. to enable a virtual computer system provided by the on demand computing service to store data in or retrieve data from the data storage service . Additional details regarding some of the services shown in will now be provided.

The on demand computing service may be a collection of computing resources configured to instantiate virtual machine instances. For example a customer of the service provider network may interact with the on demand computing service via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the service provider network . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing resources for the customer. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications. Although the on demand computing service is shown in any other computer system or computer system service may be utilized in the service provider network such as a computer system or computer system service that does not employ virtualization and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The storage service might include software and computing resources that collectively operate to store data using block or file level storage devices and or virtualizations thereof . The storage devices of the storage service might for instance be operationally attached to virtual computer systems provided by the on demand computing service to serve as logical units e.g. virtual drives for the computer systems. A storage device might also enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service might only provide ephemeral data storage.

The service provider network may also include a cryptography service . The cryptography service may utilize storage services of the service provider network such as the storage service to store encryption keys in encrypted form whereby the keys may be usable to decrypt customer keys accessible only to particular devices of the cryptography service . The cryptography service might also provide other types of functionality not specifically mentioned herein.

The service provider network might also provide a notification service in some configurations. The notification service may comprise a collection of computing resources collectively configured to provide a web service or other interface and a browser based management console. The management console can be used to configure topics for which customers seek to receive notifications configure applications or people subscribe clients to the topics publish messages or configure delivery of the messages over clients protocol of choice i.e. hypertext transfer protocol HTTP e mail and short message service SMS among others . The notification service might also provide notifications to clients using a push mechanism without the need to periodically check or poll for new information and updates. The notification service may further be used for various purposes such as monitoring applications executing in the on demand computing service workflow systems time sensitive information updates mobile applications and many others.

As illustrated in the service provider network in various configurations also includes an authentication service and a policy management service . The authentication service in one example is a computer system i.e. collection of computing resources configured to perform operations involved in authentication of users. For instance one of the services shown in may provide information from a user to the authentication service to receive information in return that indicates whether or not the requests submitted by the user are authentic.

The policy management service in one example is a computer system configured to manage policies on behalf of customers or internal users of the service provider network . The policy management service may include an interface that enables customers to submit requests related to the management of policy. Such requests may for instance be requests to add delete change or otherwise modify policy for a customer service or system or for other administrative actions such as providing an inventory of existing policies and the like.

The service provider network in various configurations is also configured with a task service . The task service is configured to receive a task package and to enable executing tasks and or the performance of other types of workflows as dictated by the task package. The task service may be configured to use any resource of the service provider network such as instantiated virtual machines or virtual hosts for executing the task. The task service may configure the instantiated virtual machines or virtual hosts to operate using a selected operating system and or a selected execution application in accordance with specified requirements.

The service provider network might also provide a database service for providing network accessible database services. The service provider network might also provide a monitoring service . The monitoring service provides functionality for monitoring aspects of the operation of devices and or services operating in the service provider network . For example and without limitation the monitoring service might be utilized to determine whether any of the customer specified failure conditions have occurred.

The service provider network may additionally maintain other services based at least in part on the needs of its customers. For instance the service provider network may maintain a database service not shown in in some configurations. A database service may be a collection of computing resources that collectively operate to create maintain and allow queries to be performed on databases stored within the service provider network . For example a customer of the service provider network may operate and manage a database from the database service by utilizing appropriately configured network API calls. This in turn may allow the customer to maintain and potentially scale the operations in the database. Other services include object level archival data storage services and services that manage and or monitor other services. The service provider network might also be configured with other services not specifically mentioned herein in other configurations.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative configuration one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the configurations described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media is any available media that provides for the non transitory storage of data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one configuration the operating system comprises the LINUX operating system. According to another configuration the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further configurations the operating system may comprise the UNIX operating system or one of its variants. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer . For example the mass storage device might store the deployment agent when the architecture shown in is utilized to implement a host . The mass storage device might also store other programs and data not specifically identified herein.

In one configuration the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the configurations described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one configuration the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to . The computer might also include computer readable storage media for performing any of the other computer implemented operations described herein.

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly an input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Clause 1 A non transitory computer readable storage medium having computer executable instructions stored thereupon which when executed by a computer cause the computer to receive a customer provided deployment configuration at a deployment service executing in a service provider network the deployment configuration defining a location of an application revision containing an application to be deployed to one or more hosts in a deployment group and a deployment schedule for deploying the application determine based upon the deployment schedule whether to cause the application to be deployed to at least a subset of the one or more hosts in the deployment group and instruct a deployment agent executing on the subset of the one or more hosts in the deployment group to obtain the application revision from the location and to deploy the application on the subset of the one or more hosts.

Clause 2 The non transitory computer readable storage medium of clause 1 wherein the application revision is stored by a storage service in the service provider network.

Clause 3 The non transitory computer readable storage medium of clauses 1 and 2 wherein the application revision is stored by a source code repository external to the service provider network.

Clause 4 The non transitory computer readable storage medium of clauses 1 3 wherein the one or more hosts are provided by an on demand computing service operating in the service provider network.

Clause 5 The non transitory computer readable storage medium of clauses 1 4 wherein the one or more hosts are located in a customer network external to the service provider network.

Clause 6 The non transitory computer readable storage medium of clauses 1 5 wherein the deployment schedule specifies a percentage based deployment an exponential deployment or a function based deployment.

Clause 7 The non transitory computer readable storage medium of clauses 1 6 wherein the application revision further defines one or more deployment lifecycle events to be performed prior to deploying the application on the subset of the one or more hosts following deployment of the application on the subset of the one or more hosts prior to executing the application on the subset of the one or more hosts or following the execution of the application on the subset of the one or more hosts.

Clause 8 An apparatus for performing a deployment of an application to one or more hosts the apparatus comprising a processor and a non transitory computer readable storage medium having instructions stored thereupon which are executable by the processor and which when executed cause the apparatus to expose one or more network service application programming interfaces APIs external to a service provider network for configuring the deployment of the application to the one or more hosts receive a customer supplied deployment configuration by way of one of the APIs the deployment configuration specifying a location of the application and a schedule for deployment of the application and utilize the schedule to instruct at least a portion of the one or more hosts to obtain the application from the location and to deploy the application.

Clause 9 The apparatus of clause 8 wherein a deployment service executing in the service provider network exposes the one or more network service APIs.

Clause 10 The apparatus of clauses 8 and 9 wherein the one or more hosts operate in the service provider network or in a network external to the service provider network.

Clause 11 The apparatus of clauses 8 10 wherein the schedule specifies a percentage based deployment an exponential deployment or a function based deployment.

Clause 12 The apparatus of clauses 8 11 wherein the application comprises only one or more files that have changed as compared to a previous version of the application.

Clause 13 The apparatus of clauses 8 12 wherein the application revision further defines one or more deployment lifecycle events.

Clause 14 The apparatus of clauses 8 13 wherein the lifecycle events are performed on the portion of the one or more hosts prior to deploying the application on the portion of the one or more hosts following deployment of the application on the portion of the one or more hosts prior to executing the application on the portion of the one or more hosts or following the execution of the application on the portion of the one or more hosts.

Clause 15 A computer implemented method for automating the deployment of an application to one or more hosts the method comprising performing computer implemented operations for exposing by way of a computer one or more network service application programming interfaces APIs external to a service provider network for configuring the deployment of the application to the one or more hosts receiving a customer supplied deployment configuration through one of the APIs the deployment configuration specifying a location of the application and a schedule for deployment of the application and utilizing the schedule to instruct the one or more hosts to obtain the application from the location and to deploy the application.

Clause 16 The computer implemented method of clause 15 wherein the schedule specifies a percentage based deployment an exponential deployment or a function based deployment.

Clause 17 The computer implemented method of clauses 15 and 16 wherein the deployment configuration further defines one or more failure conditions for the deployment and wherein the method further comprises determining whether the one or more failure conditions have occurred and rolling back the deployment of the application from the one or more hosts in response to determining that the one or more failure conditions have occurred.

Clause 18 The computer implemented method of clauses 15 17 wherein the one or more hosts operate in the service provider network or in a network external to the service provider network.

Clause 19 The computer implemented method of clauses 15 18 wherein the application is stored by a storage service in the service provider network or by a source code repository external to the service provider network.

Clause 20 The computer implemented method of clauses 15 19 wherein the application revision further defines one or more deployment lifecycle events to be performed on the one or more hosts in conjunction with the deployment of the application.

Clause 21 A non transitory computer readable storage medium having computer executable instructions stored thereupon which when executed by a computer cause the computer to receive at a computer system executing a deployment service a customer defined deployment configuration specifying a schedule for performing a rolling deployment of an application to a plurality of hosts select a first subset of the plurality of hosts based on the schedule cause the application to be deployed to the first subset of the hosts select a second subset of the plurality of hosts based at least in part on the schedule and cause the application to be deployed to the second subset of the plurality of hosts following successful completion of the deployment of the application to the first subset of the plurality of hosts.

Clause 22 The non transitory computer readable storage medium of clause 21 wherein the schedule comprises a percentage based deployment schedule.

Clause 23 The non transitory computer readable storage medium of clauses 21 and 22 wherein the schedule comprises an exponential deployment schedule.

Clause 24 The non transitory computer readable storage medium of clauses 21 23 wherein the schedule comprises a function based deployment schedule.

Clause 25 The non transitory computer readable storage medium of clauses 21 24 wherein the deployment of the application is performed in place on the plurality of hosts.

Clause 26 The non transitory computer readable storage medium of clauses 21 25 wherein the deployment of the application is performed by deploying the application to a new host adding the new host to the plurality of hosts and removing one of the hosts from the plurality of hosts.

Clause 27 The non transitory computer readable storage medium of clauses 21 26 wherein the deployment configuration further specifies one or more lifecycle events to be performed in conjunction with the deployment of the application to the plurality of hosts.

Clause 28 An apparatus for performing a rolling deployment of an application to a plurality of hosts the apparatus comprising a processor and a non transitory computer readable storage medium having instructions stored thereupon which are executable by the processor and which when executed cause the apparatus to receive a deployment configuration specifying a user defined schedule for performing the rolling deployment of the application to the plurality of hosts select a first subset of the plurality of hosts based at least in part on the user defined schedule cause the application to be deployed to the first subset of the plurality of hosts and cause the application to be deployed to one or more additional subsets of the plurality of hosts selected based at least in part on the user defined schedule following successful completion of the deployment of the application to the first subset of the plurality of hosts.

Clause 29 The apparatus of clause 28 wherein the user defined schedule comprises a percentage based deployment schedule for the application.

Clause 30 The apparatus of clauses 28 29 wherein the user defined schedule comprises an exponential deployment schedule for the application.

Clause 31 The apparatus of clauses 28 30 wherein the user defined schedule comprises a function based deployment schedule for the application.

Clause 32 The apparatus of clauses 28 31 wherein the deployment of the application is performed in place on the plurality of hosts.

Clause 33 The apparatus of clauses 28 32 wherein the deployment of the application is performed by deploying the application to a new host adding the new host to the plurality of hosts and removing a host from the plurality of hosts.

Clause 34 The apparatus of clauses 28 33 wherein the deployment configuration further specifies one or more lifecycle events to be performed on the plurality of hosts in conjunction with the deployment of the application.

Clause 35 A computer implemented method for performing a rolling deployment of an application to a plurality of hosts the method comprising performing computer implemented operations for receiving at a computer a configuration for the deployment that defines a schedule for performing the rolling deployment of the application to the plurality of hosts causing by the computer the application to be deployed to a first subset of the plurality of hosts selected based at least in part upon the schedule and causing by the computer the application to be deployed to one or more additional subsets of the plurality of hosts also selected based at least in part on the schedule following successful completion of the deployment of the application to the first subset of the plurality of hosts.

Clause 36 The computer implemented method of clause 35 wherein the schedule comprises a percentage based deployment schedule for the application.

Clause 37 The computer implemented method of clauses 35 and 36 wherein the user defined schedule comprises an exponential deployment schedule for the application.

Clause 38 The computer implemented method of clauses 35 37 wherein the user defined schedule comprises a function based deployment schedule for the application.

Clause 39 The computer implemented method of clauses 35 38 wherein the configuration further specifies one or more failure conditions and wherein the method further comprises detecting an occurrence of the one or more failure conditions and causing the deployment of the application to one or more of the subsets of the plurality of hosts to be rolled back based upon the detection of the occurrence of the one or more failure conditions.

Clause 40 The computer implemented method of clauses 35 39 further comprising causing one or more lifecycle events to be performed on the plurality of hosts in conjunction with the deployment of the application.

Clause 41 A non transitory computer readable storage medium having computer executable instructions stored thereupon which when executed by a computer cause the computer to perform a deployment of an application to a plurality of hosts by creating one or more new hosts deploying the application to the one or more new hosts adding the one or more new hosts to the plurality of hosts and removing one or more hosts from the plurality of hosts maintain the removed hosts for a user specified period of time following the deployment determine whether one or more user defined failure conditions occurred during the user specified period of time following the deployment and return the removed hosts to the plurality of hosts and remove the new hosts from the plurality of hosts in response to determining that one or more user defined failure conditions occurred during the user specified period of time.

Clause 42 The non transitory computer readable storage medium of clause 41 wherein hosts are selected for the deployment based upon a percentage based deployment schedule.

Clause 43 The non transitory computer readable storage medium of clauses 41 and 42 wherein hosts are selected for the deployment based upon an exponential deployment schedule.

Clause 44 The non transitory computer readable storage medium of clauses 41 43 wherein hosts are selected for deployment based upon a user supplied function.

Clause 45 The non transitory computer readable storage medium of clauses 41 44 wherein one or more lifecycle events are performed on the plurality of hosts in conjunction with the deployment of the application.

Clause 46 The non transitory computer readable storage medium of clauses 41 45 wherein the plurality of hosts are provided by an on demand computing service operating in a service provider network or are located in a customer network external to the service provider network.

Clause 47 The non transitory computer readable storage medium of clauses 41 46 wherein the deployment is performed in response to a call received at a network service application programming interface API exposed by a deployment service executing in a service provider network.

Clause 48 An apparatus for performing a deployment of an application to a plurality of hosts the apparatus comprising a processor and a non transitory computer readable storage medium having instructions stored thereupon which are executable by the processor and which when executed cause the apparatus to cause the deployment of the application to be performed by instantiating one or more new hosts deploying the application to the one or more new hosts adding the one or more new hosts to the plurality of hosts and removing one or more other hosts from the plurality of hosts maintain the removed hosts for a period of time following the deployment determine whether one or more failure conditions occurred during the period of time following the deployment and return the removed hosts to the plurality of hosts and removing the new hosts from the plurality of hosts.

Clause 49 The apparatus of clause 48 wherein hosts are selected for the deployment based upon a percentage based deployment schedule.

Clause 50 The apparatus of clauses 48 49 wherein hosts are selected for the deployment based upon an exponential deployment schedule.

Clause 51 The apparatus of clauses 48 50 wherein hosts are selected for deployment based upon a user supplied function.

Clause 52 The apparatus of clauses 48 51 wherein the application comprises only one or more files that have changed as compared to a previous version of the application.

Clause 53 The apparatus of clauses 48 52 wherein one or more lifecycle events are performed on the plurality of hosts in conjunction with the deployment of the application.

Clause 54 The apparatus of clauses 48 53 wherein the plurality of hosts are provided by an on demand computing service operating in a service provider network or are located in a customer network external to the service provider network.

Clause 55 A computer implemented method for deploying an application to hosts in a deployment group the method comprising performing computer implemented operations for performing the deployment of the application by causing one or more new hosts to be created causing the application to be deployed to the one or more new hosts adding the one or more new hosts to the deployment group and removing one or more other hosts from the deployment group maintaining the hosts removed from the deployment group for a period of time following the deployment determining whether one or more failure conditions occurred during the period of time following the deployment and returning the hosts removed from the deployment group back to the deployment group and removing the new hosts from the deployment group.

Clause 56 The computer implemented method of clause 55 wherein hosts are selected for the deployment based upon a percentage based deployment schedule.

Clause 57 The computer implemented method of clauses 55 and 56 wherein hosts are selected for the deployment based upon an exponential deployment schedule.

Clause 58 The computer implemented method of clauses 55 57 wherein hosts are selected for deployment based upon a user supplied function.

Clause 59 The computer implemented method of clauses 55 58 wherein the deployment is performed in response to a call received at a network service application programming interface API exposed by a deployment service executing in a service provider network.

Clause 60 The computer implemented method of clauses 55 59 wherein the application is stored in a storage service provided by a service provider network or in a source code repository external to the service provider network.

Based on the foregoing it should be appreciated that technologies for automated deployment of software components have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and media are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example configurations and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

