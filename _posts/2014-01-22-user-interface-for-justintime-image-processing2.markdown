---

title: User interface for just-in-time image processing
abstract: Technology is disclosed for an image editing tool that generates a recipe for just-in-time processing of images (“the technology”). Various embodiments of the technology include an image processing system that provides image processing services to a client system that publishes content including an image to end users. The image processing system processes the image based on a recipe to generate a processed image. The image editing tool is integrated into an application, e.g., webpage or a web browser, that displays the content. A user, e.g., administrator of the client system, can use the image editing tool to edit the image on the webpage and generate the recipe including instructions regarding the edits. The recipe is transmitted to the image processing system which processes the image based on the recipe, and transmits the processed image to the client system for further transmission to the end users accessing the content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654602&OS=09654602&RS=09654602
owner: ZEBRAFISH LABS, INC.
number: 09654602
owner_city: San Francisco
owner_country: US
publication_date: 20140122
---
This application is related to U.S. application Ser. No. 14 083 166 titled JUST IN TIME PROCESSING OF IMAGES filed on Nov. 18 2013 which is incorporated herein by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Several of the disclosed embodiments relate to image processing and more particularly to a user interface for generating instructions for just in time image processing.

Online publishers publish various content including text image video and audio. An online publisher may want to publish a particular image in various color schemes patterns layouts etc. For example an online art merchant may want to publish an image of a sculpture which was captured using a camera online. However the merchant may want to enhance the image in a particular way before the image is published online to demand a buyer s attention. The merchant may want to generate multiple images showing specific portions of the sculpture.

Current publishing techniques typically require the merchant to generate a version of the particular image for each of the different ways the merchant wishes to publish the image. For example if the merchant wishes to highlight only the portion of the image having the sculpture the surrounding portions of the sculpture in the image may have to be blurred. In another example if the merchant wishes to show how the sculpture looks in a particular decor the surrounding portions of the sculpture in the image may also have to be shown. This requires the merchant to have different version of the images which serves different purposes. This can be a time consuming process since all versions have to be generated before they are published.

Further the merchant may have to use a special image editing software to generate such images. The drawback of the current publishing techniques is that the merchant is expected to have image processing skills. Further the process can also result in increased storage space for storing various versions of the particular image. As the number of images increase or the versions of a particular image increase a need arises for a robust version management system. All these factors can add to the maintenance costs for the merchant.

The problem increases by many folds if the image has to be rendered based on the device on which the buyer is viewing the image. Different devices can have different display sizes form factors resolutions rendering techniques etc. Not only this requires the merchant to generate various versions of an image to suit the devices it also requires the merchant to be aware of the devices available or to be available in the market. Further in scenarios where certain images are not viewed by the buyers the computing resources such as processing time and storage space for generating and storing such images are not utilized effectively.

Technology is disclosed for just in time processing of an image the technology . Various embodiments of the technology include an image processing system for providing image processing services for clients who publish content including a number of images to end users. In some embodiments processing an image includes executing a set of instructions also referred to as a recipe on one or more original source images to render a processed image on the end user device. The recipe enables the processed images to be rendered on the end user device as per the preferences of a client system using the image processing system.

For example the recipe can specify that the processed images be rendered in a particular size color scheme layout resolution etc. The recipe can also specify that a portion of the processed image be highlighted cropped a particular color be enhanced etc. In some embodiments the recipe may be provided at least in part by the client system. The recipe may also be generated at least in part by the image processing system. The image processing system enables the client system to obtain various processed images for a given single original source image. In some embodiments more than one source image may be used to render the processed image.

In some embodiments the image processing system processes the images upon receiving a request for retrieving the images associated with the content. That is the image processing system processes the images just in time. For example consider a client system that publishes online content including images to the end users using various means including a website or an application also known as an app . The end users access the content using various devices including a desktop a laptop a smartphone a tablet etc. In some embodiments when the end user accesses the client system for viewing the online content including images the client system requests the image processing system to obtain processed images associated with the content. The image processing system processes the images and returns them to the client system which further serves the processed images to the requesting end user device.

In some embodiments the images are also processed based on a context of the request. The context of the request can include data regarding attributes of the end user device e.g. a resolution of display a size of the display a type of the end user device a smartphone tablet laptop etc. an operating system on the end user device ambient lighting a network bandwidth available to the end user device etc. The image processing system renders the processed images based on the attributes of the device. For example the images can be rendered in a particular resolution based on the resolution of the display of the display of the end user device. In another example the brightness of the processed image may be adjusted based on the ambient lighting on the end user device. In some embodiments the context of the request for obtaining the image is included in the request and or provided by the client system.

In some embodiments the image processing system can be implemented as a multi tier architecture having various tiers of servers performing specific functions of the image processing system. Each of the tiers can have one or more servers. The image processing system can include a content delivery network having one or more tiers to receive a request for obtaining an image to be displayed at the end user device from a client system. The servers in the content delivery network can be spread across various geographical locations. The content delivery network receives the request from client systems in various geographical locations passes the request to a load balancing server tier if the processed images are not available at the content delivery network.

The load balancing server tier manages image processing requests from the client system by inserting them into a queue. The load balancing server tier receives the request from the content delivery network and inserts the request into the queue. An image processing server tier obtains an image processing request from the queue and generates a processed image. The processing includes retrieving one or more original source images and processing them based on the recipe and the context of the request to generate the processed image. The processed image is returned to the client system through the content delivery network and the client system further serves the processed image to the end user device.

In some embodiments the image processing system also includes a source image server tier that is configured to obtain the original source images from a source location specified by the client system and store them at a source image cache associated with the source image server tier. In some embodiments the image processing system generates a log file containing data related to the processing of the one or more requested images. The image processing system also includes a prediction server that can predict the different processed images that may be requested by the end user devices in the future. In some embodiments the prediction server can use various prediction techniques including statistical analysis to determine a set of processed images that may be requested in the future based at least in part on the data in the log file.

In some embodiments the image processing system provides an image editing tool hereinafter referred to as a visor that generates a recipe for on demand processing of images. The visor includes a graphical user interface GUI that provides various editing controls for performing various editing operations on an image. The client system can use the visor to edit the image. The visor generates a set of image processing instructions corresponding to the editing operations performed by the client system and transmits the set of image processing instructions which form a recipe for generating a processed image to the image processing system. The image processing system processes the image based on the recipe and transmits the processed image to the client system which further serves the processed image to the end users accessing the image.

In some embodiments the image can be part of the content published by the client system. For example the image can be part of content published via a webpage. In some embodiments the image processing system generates the visor on the same webpage as the content having the image. By generating the visor on the same webpage as the content the client system can edit the image on the webpage and view the resulting image as it will be seen by an end user accessing the content. This can help the client system in obtaining a perspective on whether the edited image may be pleasing to the end users eyes and in determining whether or not to publish the edited image.

The source image most often provides the base image data used in producing a processed image. In some embodiments one or more source images may be used in generating the processed image. In some embodiments the image processing system obtains the source image from a location such as a source image storage system specified by the client system or from a cache associated with the image processing system not illustrated . The source image storage system can be any type of storage system including a database file storage and or any other convenient or known storage techniques. Further the source image storage system can be part of the client system or provided by any third party storage services such as cloud storage from Dropbox Amazon Google etc. where the client system has stored the source images at.

The image processing system processes the source image based on a recipe for the particular image and or a context of the request. The recipe includes a set of instructions to be executed on the source image to generate the processed image. The recipe can include instructions regarding at least one of a a target size of the image to be rendered b a target resolution of the image to be rendered c a target color pattern of the image to be rendered d a target layout of the image with respect to other content with which the image is served e a target brightness value f a target contrast value g a target saturation value h a target portion of the image to be highlighted or i a target area of the image to be cropped etc.

In some embodiments the recipe can be provided by the client system . For example the client system can provide a recipe which instructs the image processing system to crop an image to include only a portion of the image having faces of certain subjects. In another example the recipe can instruct the image processing system to crop a specific portion of the image if the image is rendered on a smartphone but include a larger portion of the image when it is rendered on a laptop. In another example the recipe can instruct the image processing system to change a color pattern of the image in order to match with a webpage with which the image is displayed or to highlight enhance a particular color of the image to grab attention from the end user.

In some embodiments the recipe can also be generated by the image processing system . For example the image processing system can determine based on historical data which of the colors when enhanced in the image received more attention from the users determined based on e.g. a number of clicks and enhance the color of the image and or other images in the webpage accordingly.

The recipe can be stored in a storage system such as a recipe store . In some embodiments the recipe store can be implemented as various storage systems including a database a file system and or any other convenient or known storage techniques.

In some embodiments the recipe can also be based on a context of the request. The context of the request can include an attribute of the end user device such as a a type of the end user device b a size of a display of the end user device c a resolution of the display of the end user device d an operating system of the end user device e ambient lighting of the end user device etc. For example if the end user device has a display with resolution higher than a predefined resolution then the recipe can instruct the image to be rendered in a resolution higher than a predefined resolution. In some embodiments the image processing system can have a predefined range of resolutions at which the processed image can be rendered. In another example if the end user device has a display with resolution lower than a predefined resolution then the recipe can instruct the image to be rendered in low resolution. In another example the brightness of the image can be changed based on the ambient lighting condition on the end user device

Further in some embodiments the context of the request can also include network bandwidth availability between the end user device and the client system . For example if the network bandwidth is below a predefined threshold the recipe can instruct the image processing system to render a low resolution image. The context of the request can be included in the request and or provided by the client system independent of the request.

In some embodiments various recipes can be used to generate various processed images for a particular image. The client system may provide access to at least one source image to the image processing system and request the image processing system to return one or more processed images for the source image. For example for a given image by the client system various processed images such as a high resolution image a low resolution image an image with a particular color enhanced an image with a particular color scheme brightness saturation or hue etc. can be generated using the corresponding recipe. In some embodiments a given recipe can be reused for processing various images. For example a default recipe can process one or more images. The default recipe can be for enhancing the colors brightness saturation etc. of the one or more images.

The image processing system enables the client system to obtain various processed images for a given single image. This minimizes the resources required for maintaining various versions of the images by the client system . However in some embodiments more than one source image may be used to render a processed image for example a derivative image. A derivative image is a kind of rendered image that depends on one or more original source images. For example an image of a logo may be superimposed onto another image to obtain the derivative image. In embodiments where the image processing system renders a derivative image the image processing system may retrieve the necessary original source images from the source image storage system .

The content published by the client system can include text video audio or any other multi media content. The content can be published in many ways including websites applications also known as apps . The content can be accessed by the end users in a number of ways e.g. via web browsers or apps which when executed on an end user device display the content.

In some embodiments the image processing system can be implemented as a multi tier architecture having various tiers of servers performing specific functions of the image processing system . One such example multi tier implementation of the image processing system is illustrated in .

Each of the tiers can have one or more servers. A server can be either a physical computer in a data center or a virtual instance of a computer in cloud infrastructure. A server typically receives requests for work performs or distributes the work and then returns a response. The edge server tier can receive requests from a client system such as client system e.g. on behalf of an end user for obtaining processed images. For example when the end user accesses the content published by the client system which includes the processed image the edge server tier receives the request from the client system to obtain the processed image. The edge server tier includes multiple servers such as edge server and one or more associated caches such as edge cache . In some embodiments each of the edge servers in the edge server tier has an associated edge cache as illustrated in . However in some embodiments the edge cache may be associated with more than one edge server.

In some embodiments the edge servers in the edge server tier may be located in various geographical locations. The edge servers may be configured to serve requests from predefined geographical locations. When a request arrives at the edge server tier from a client system the request is routed to an edge server that is configured to serve the geographical location in which the particular client system is located. For example while edge server may be configured to serve requests from geographical locations A B and C another edge server may be configured to serve requests from geographical locations X Y and another edge server may be configured to serve requests from geographical location Z. That is the edge servers in the edge server tier act as a closest point of contact of the image processing system for the client systems.

When a request is received at the edge server tier from the client system at a geographical location A the edge server checks whether the edge cache has the processed image. If the edge cache has the processed image the edge server serves the processed image to the client system which further serves the processed image to the end user s device such as end user device . If the edge cache does not contain the processed image the edge server tier passes the request to the shield server tier .

The shield server tier includes multiple servers such as shield server and associated shield cache . In some embodiments the shield servers in the shield server tier can be distributed across various geographical regions. In some embodiments a geographical region includes a number of geographical locations. The shield servers can be configured to receive requests from a group of edge servers in a particular geographical region. In some embodiments the shield server tier can have a shield server for every x number of edge servers where x is a number configurable by a user such as an administrator of the image processing system . The shield cache can be associated with one or more shield servers and the shield server tier can have one or more shield caches.

When a shield server such as shield server receives the request from an edge server such as edge server the shield server determines whether the shield cache contains the processed image. If the shield cache can contains the processed image the shield server obtains the processed image from the shield cache and returns the image to the edge server which further serves the processed image to the client system . If the shield cache does not contain the processed image the shield server passes the request to the load balancing server tier .

In some embodiments the edge server tier can bypass the shield server tier and pass the request to the load balancing server tier directly if the processed image is not available at the edge cache . However typically the edge server tier determines whether the processed image is available at the shield server tier before the request is passed to the load balancing server tier . In some embodiments the time consumed for the determination by the edge server of whether a shield server contains the processed image is not significant because the edge server and the shield server can share the same communication network.

The load balancing server tier receives the image processing requests from the edge server tier and or shield server tier and inserts them into a queue . An image processing server of the image processing server tier fetches a request from the queue and processes the request to generate a processed image. In some embodiments the load balancing server tier balances a load of the image processing system by inserting the requests into the queue and not assigning them directly to the image processing servers in the image processing server tier upon receipt of a request at the load balancing server tier . The image processing server can pick up a request from the queue when the image processing server is available to process a request.

In some embodiments the load balancing server tier determines whether a particular request is a valid request for an image before inserting the request into the queue . In some embodiments the validity of the request can be determined by determining whether a signature of an image for which the request is received matches with the any of the signatures maintained at the image processing system . If the particular request is valid the load balancing server tier inserts it into the queue .

The image processing server tier obtains an image processing request also referred to as a task for a particular image from the queue and processes the particular image based on a recipe for the particular image and the context of the request. The image processing server tier determines whether the particular image that is an original source image provided by the client system is available at the image processing server cache . If the original source image is available at the image processing server cache the image processing server tier obtains the image from the image processing server cache and processes the original source image to generate the processed image. If the original source image is not available at the image processing server cache the image processing server cache requests the source image server tier to obtain the original source image. The source image server tier obtains the original source image and returns it to the image processing server tier for processing the original source image. The image processing server tier may store the received original source image at the image processing server cache .

In some embodiments the source image server tier obtains the original source image from a location specified by the client system for example at storage such as the source image storage system . The source image server tier obtains the original source image from the source image storage system via a communication network and returns the original source image to the image processing server tier . The source image server tier can also store the retrieved original source image at the source image cache . In some embodiments obtaining the original source image from the source image storage system can consume significant amount of computing resources especially in cases where the source image storage system is implemented as cloud storage service for a number of reasons including performing authentication operations performing read operations from a slow storage medium such as a hard drive etc. Accordingly in order to minimize the consumption of computing resources the original source image retrieved by the source image server tier may be stored at the source image cache .

Also in some embodiments the source image server tier may regardless of whether a request is received for obtaining a particular original source image pre fetch the original images from the source image storage system and store the original source images in the source image cache . The pre fetching may be performed based on a predefined condition for example at a particular time of the day day of the week etc. or when the load on the image processing system is below a predefined threshold. In some embodiments the pre fetching may help the source image server tier to minimize the delay caused due to obtaining a particular source image from the source image storage system in serving a request for the particular original source image from the image processing server tier . The source image server tier may refresh the source image cache that is add or delete original source images from the source image cache based on predefined cache management policies.

Referring back to the image processing server tier after obtaining the original source image either from the image processing server cache or from the source image server tier the image processing server tier identifies a recipe for the original source image and processes the original source image using the recipe and a context of the image processing request to generate a processed image. The recipe can be identified using various data including information regarding the client the content being published e.g. based on URL of a webpage of the content information regarding attributes of an end user device from which the request is initiated etc. Any necessary information for determining the recipe for processing the original source image is provided to the image processing system for example via the request. In some embodiments the information for determining the recipe may be provided by the client system to the image processing system independent of the request.

The recipe can be provided by the client and or generated by the image processing system . The recipes can be stored at a storage system such as recipe storage system . In some embodiments the recipe storage system can be implemented as various storage systems for example a database a file system and or any other convenient or known storage techniques.

The recipe includes a set of instructions to be executed on the original source image to render a processed image. The recipe can include instructions regarding at least one of a a target size of the image to be rendered b a target resolution of the image to be rendered c a target color pattern of the image to be rendered d a target layout of the image with respect to other content with which the image is served e a target brightness value of the image to be rendered f a target contrast value of the image to be rendered g a target saturation value of the image to be rendered h a target portion of the image to be highlighted or i a target area of the image to be cropped etc.

In some embodiments the recipe can also be based on a context of the request. The context of the request can include an attribute of the end user device . The attribute of the end user device can include at least one of a a type of the end user device b a size of a display of the end user device c a resolution of the display of the end user device d an operating system of the end user device or e ambient lighting of the end user device etc. In some embodiments the recipe can be determined based on the context of the request. For example if the end user device has a display with a resolution higher than a predefined resolution then the recipe can include instructions to render the image in high resolution. In another example if the end user device has a display with resolution lower than a predefined resolution then the recipe can include instructions to render the image in low resolution. In another example the brightness of the image can be changed based on the ambient lighting condition on the end user device

Further in some embodiments the context of the request can also include network bandwidth availability between the end user device and the client system . For example if the network bandwidth is below a predefined threshold the recipe can include instructions to render a low resolution image.

After the original image is processed based on the recipe and the context of the request the processed image is returned to the client system which further serves the processed image to the end user device

In some embodiments when the image processing server tier returns the processed image to the client system the processed image is transmitted to the client system though one or more tiers e.g. load balancing server tier shield server tier and edge server tier above the image processing server tier . The one or more tiers may also store the received processed image in a cache associated with the corresponding server tier.

In some embodiments the image processing server tier can include different servers for performing different parts of processing the image. For example tasks such as face recognition can be performed by a set of servers changing a color scheme of a specific portion can be performed by another set of servers cropping can be performed by another set of servers etc. The image processing server tier can have logic either in software hardware firmware or a combination to assign a particular image processing operation to a particular server in the image processing server tier .

Further in some embodiments a particular image processing request can be split into a number of sub tasks. For example if a particular request requires face recognition and cropping the face recognition operation and the cropping operation can be split into two tasks and added to the queue as two sub tasks. The face recognition task can be assigned to a server that performs face recognition task and the cropping task can be assigned to a server that performs the cropping operation. The final processed image can be rendered by combining the results of the sub tasks or having each successive task work on the image resulting from the previous sub task until all the sub tasks are completed.

In some embodiments one or more tiers of the image processing system generate log containing information at least regarding image processing requests and the image processing operations performed on the images. The log can include information such as whether a particular processed image was available in a cache associated with a particular tier or was retrieved from a cache associated with a tier below the particular tier performance metrics on rendering the processed image e.g. time taken to render the processed image memory consumed a size of the original source image how many source images were used to generate the processed image time taken to load wait or convert a particular image a total response time in serving the processed image to the client system response time of each tier average time a particular task was in the queue a number of tasks waiting in the queue at a given point of time a point in time when the maximum queue size was reached a time when evicting queue items were started etc.

In some embodiments each of the one or more tiers can generate the log separately. In some embodiments the one or more tiers can generate information into a single log file . The log includes information to identify which of the tiers generated particular information in the log . In some embodiments the image processing system may use a logging system not illustrated e.g. real time logging systems to generate the log . The logging system can be provided by a third party.

In some embodiments the information in the log can be analyzed and used to enhance the performance of the image processing system . In some embodiments the information in the log can be used to predict image processing requests that may be received in the future and pre render the processed images in advance. The pre rendered images may be stored at a cache such as edge server cache . When a predicted request is actually received at the edge server tier the edge server may obtain the processed image from the edge server cache and return the processed image to the client system . By predicting the requests processing the predicted request to rendered the processed image and storing the processed image at the cache in advance of receiving the actual request the time consumed in obtaining the processed image when the actual request is received is minimized significantly. This enhances the user experience of the end user since the end user experiences minimum to near zero delay in the processed image being rendered on the end user device

In some embodiments the image processing system includes prediction servers that generate predictions having information regarding future image processing requests. The predictions are input to the image processing system via the edge server tier similar to the image processing requests from client system which renders the processed images based on the predictions . In some embodiments the image processing system may schedule rendering of the processed images for the predictions based on a predefined criterion. For example image processing system may decide to render the processed images for the predictions when a load on the image processing system is below a predefined threshold at a particular time of the day a particular time of the week when a predefined number of requests have been received from a particular client system etc.

The prediction servers can generate the predictions based on the information in the log using various known prediction techniques. For example the predictions can be generated based on a statistical analysis of the information in the log . In another example the prediction servers can employ an expert system or a rule engine that can help in generating the predictions based on the information in the log .

In some embodiments one or more tiers of the image processing system can be owned or operated by different entities. That is the image processing system can be a combination of various infrastructure provided by different entities.

In some embodiments the CDN can be a large distributed system of servers deployed in multiple data centers across the Internet. The goal of CDN can be to serve content to end users with high availability and high performance. The CDNs serve content including web objects text graphics and scripts downloadable objects media files software documents applications e commerce portals live streaming media on demand streaming media and social networks.

In some embodiments the CDNs served content using dedicated servers owned and operated by the CDN operator who is different from an image processing entity providing the image processing system including tiers . The image processing entity may ask the CDN operator to configure the CDN as per the image processing entity s needs to serve the processed images to the clients.

In some embodiments there the CDN can also be based on a hybrid model that uses peer to peer P2P technology. In the hybrid model content is served using both dedicated servers of the CDN operator and other peer user owned for example image processing entity computers as applicable. However in some embodiments the image processing entity may also own and operate the CDN entirely.

A source image storage system includes original source images of the clients such as client system of . The image processing system can obtain the original source images from the source image storage system for rendering processed images. The source image storage system can be owned by the client system or can be a third party storage service such as a cloud storage to which the client system has subscribed to for storing the original source images. The image processing system may obtain the original source images from the source image storage system via a communication network . In some embodiments the clients can have different source image storage systems. Accordingly the image processing system may access the corresponding source storage system using the credentials provided by the corresponding client.

Referring back to the CDN in some embodiments the CDN provides edge servers such as edge server tier and in some cases also shield servers such as shield server tier for caching the processed images around various geographical locations. The processed images potentially multiple copies may exist on several edge and or shield servers. When an end user contacts the client system for accessing content which includes the processed image published by the client system the client system in turn requests the CDN e.g. using a CDN hostname to obtain the processed image. A domain name service DNS will resolve the request to an optimized CDN edge server based on location availability cost and other metrics and that edge server will handle the request.

After a particular edge server receives the request the process for obtaining the processed image is similar to the process described above at least with reference to . In some embodiments a load balancing server tier is similar to load balancing server tier an image processing server tier is similar to the image processing server tier and source image server tier is similar to the source image server tier . In the CDN and the source image storage system are illustrated in dashed lines to indicate that those entities can be owned and or operated by an entity other than the image processing entity.

The image processing system provides an API for performing various functions of the image processing system. The API includes a purge API for purging various kinds of data from a cache or other storage systems based on a predefined criterion. For example when an original source image changes then all the derivative images that used that original source image must immediately be purged so that they can be updated. Further in some embodiments items from a cache can also be evicted based on various eviction policies e.g. least recently used policy in order to make room for new items.

The API includes APIs for generating storing and retrieving recipes . The API includes APIs for retrieving source configuration files that contains data including authentication data necessary for establishing a secure connection to the source image storage system . The API includes APIs for uploading source images to the source image storage system . In some embodiments a client such as client system can use the image uploading API to upload source images to the source storage system . In some embodiments the source images so uploaded can also be stored at the source image cache simultaneously which helps in fast retrieval of the source image by the source image server tier when asked to retrieve the source image. By storing the source image at the source image cache computing resources such as time and network bandwidth that may be consumed for obtaining the source image from the source storage system is minimized.

A graphical user interface GUI may be provided to the clients for generating recipes and providing the recipes to the image processing system. In some embodiments the GUI can be integrated into the client applications that publish content to the end users. For example the GUI can be integrated into a website published by the client system that contains the processed image. The client system may use the GUI which uses the API to edit the images displayed in the website and create a recipe based on the edits performed to the image. The recipe so created can be sent to the image processing system. The GUI may also issue image processing requests to the image processing system.

The API also provides APIs for generating a log file such as log containing various data regarding processing of the images. In some embodiments the API may use a logging system not illustrated e.g. real time logging systems to generate the log . The logging system can be provided by a third party.

At step the image processing system determines a context of the request for rendering the image on the end user device . In some embodiments the context of the request includes at least an attribute of the end user device . At step the image processing system identifies a recipe associated for generating the processed image. The recipe includes a set of instructions for processing the particular image. At step the image processing system processes the particular image based on the recipe and the context of the request to generate the processed image.

In some embodiments processing the image includes rendering the image based on a a target size b a target resolution c a target color pattern d a target layout of the image with respect to other content with which the image is served e a target brightness value f a target contrast value or g a target saturation value. The processing can also include highlighting a target portion of the image or cropping a target area of the image recognizing a face in the image performing predefined image editing operations on the recognized face etc.

Further the above processing can also be dependent on the attribute of the end user device such as a a type of the end user device b a size of a display of the end user device c a resolution of the display of the end user device d an operating system of the end user device e ambient lighting of the end user device etc. For example if the end user device has a display with a resolution higher than a predefined resolution then the recipe can include instructions to render the image in high resolution. In another example if the end user device has a display with resolution lower than a predefined resolution then the recipe can include instructions to render the image in low resolution. In another example the brightness of the image can be changed based on the ambient lighting condition on the end user device

At step the image processing system transmits the processed image to the client system . At step the client system serves the processed image to the end user device . For example the processed image is served with the content in response to the end user device accessing the URL of the website of the client system .

In some embodiments the edge servers may be located in various geographical locations. The servers in the edge server tier may be configured to serve requests from predefined geographical locations. The shield servers can be distributed across various geographical regions wherein a geographical region includes a number of geographical locations. In some embodiments the shield servers can be configured to receive requests from a group of edge servers in a particular geographical region.

At step the first set of server nodes determines whether the processed image is available at a first cache associated with the first set of server nodes. In some embodiments the edge server tier has one or more associated edge server caches and if a shield server tier exists the shield server tier will also have one or more associates shield server caches. At step if the processed image is available at the first cache edge server cache and or shield server cache associated with the first set of server nodes the processed image is retrieved and the control is transferred to step where the processed image is transmitted to the client system . On the other hand responsive to a determination that the processed image is not available at the first cache the first set of server nodes asks a second set of server nodes associated with the image processing system to insert the request into a queue such as queue . In some embodiments the second set of server nodes can be a load balancing server tier .

At step the second set of server nodes determines whether the request is a valid request. In some embodiments the validity of the request can be determined by determining whether a signature of an image for which the request is received matches with the any of the signatures maintained at the image processing system . If the particular request is not valid the process returns. On the other hand if the request is valid at step the second set of server nodes inserts the request into the queue .

At step a third set of server nodes such as image processing server tier obtains the request from the queue . The queue can have multiple requests for processing one or more images. Further a request can be split into multiple sub tasks. For example if a particular request requires face recognition and cropping the face recognition operation and the cropping operation can be split into two tasks and added to the queue as two sub tasks. The face recognition task can be assigned to a server that performs face recognition task and the cropping task can be assigned to a server that performs the cropping operation.

After obtaining the request from the queue the image processing server tier determines whether the original source image for which the processed image has to be rendered is available at a cache associated with the third set of server nodes such as the image processing server cache . Responsive to a determination that the original source image is not available at the image processing server cache the third set of server nodes requests a fourth set of server nodes such as source image server tier to obtain the original source image. The source image server tier obtains the original source image from either a cache such as source image server cache associated with the source image server tier or from a location specified by the client system . In some embodiments the location specified by the client system can be a third party storage service such as a cloud storage service. The source image server tier may obtain the original source image from the cloud storage service using the authentication credentials provided by the client system .

Referring back to step if the original source image is available at the image processing server cache the image processing server tier retrieves the original source image from the image processing server cache and proceeds with processing the image at step .

At step the image processing server tier processes the original source image based on the recipe and the context of the request. In some embodiments processing the original source image includes identifying a recipe associated with the original source image and retrieving the associated recipe from a storage system such as recipe storage system . The image processing server tier may access the recipe using an API such as API of .

In some embodiments processing the original source image based on the recipe includes rendering the image based on a a target size b a target resolution c a target color pattern d a target layout of the image with respect to other content with which the image is served e a target brightness value f a target contrast value or g a target saturation value. The processing can also include highlighting a target portion of the image or cropping a target area of the image recognizing a face in the image performing predefined image editing operations on the recognized face etc.

Further the above processing can also be dependent on the context of the request which includes one or more attributes of the end user device such as a a type of the end user device b a size of a display of the end user device c a resolution of the display of the end user device d an operating system of the end user device e ambient lighting of the end user device etc. For example if the end user device has a display with a resolution higher than a predefined resolution then the recipe can include instructions to render the image in high resolution. In another example if the end user device has a display with resolution lower than a predefined resolution then the recipe can include instructions to render the image in low resolution. In another example the brightness of the image can be changed based on the ambient lighting condition on the end user device

In some embodiments the processed image rendered by the image processing server tier is a derivate image. A derivative image is a kind of rendered image that depends on one or more original source images. In embodiments where the image processing server tier renders a derivative image the image processing server tier may retrieve the necessary original source images from the image processing server cache and or the source image server tier . In some embodiments the recipe can include the data regarding the original source images required for the recipe and may also include the locations of the original source images.

At step the image processing server tier transmits the processed image to the client system . In some embodiments when the image processing server tier returns the processed image to the client system the processed image is transmitted to the client system though one or more tiers e.g. load balancing server tier shield server tier and edge server tier above the image processing server tier . The one or more tiers may also store the processed image received from the image processing server tier in a cache associated with the corresponding server tier.

At step the client system serves the processed image to the end user device . For example the processed image is served with the content in response to the end user device accessing the URL of the website of the client system .

The content publishing system publishes an image which may be accessed by one or more end users . The image can be part of content published to the end users . The end users can access the content over a communication network such as Internet. The end users may access the content in various ways e.g. via a web browser or an app executing on a device an end user. Further the end users can access the content on a variety of devices including a desktop computer a laptop a smartphone a tablet etc.

In the environment the image presented to the end users is typically processed using the image processing system . In some embodiments the image processing system is remote from the content publishing system and so a communication network such as Internet LAN WAN etc. can be used for connecting the image processing system with the content publishing system .

As described at least with reference to and processes and or the image processing system receives a request from the content publishing system e.g. on behalf of one or more end users for obtaining the image which is to be served to the end users with the content . The image processing system obtains a source image from a storage associated with the image processing system or the content publishing system e.g. caches or of and or source image storage system of and processes the source image based on a particular recipe to generate the image . The image is then returned to the content publishing system which further serves it to the end users .

The content publishing system can generate a recipe for processing the image for example to generate a new processed image. The content publishing system can generate recipes using an image editing tool such as the visor that enables the content publishing system to edit the image and generate recipes based on the edits. The visor includes a GUI that provides various editing controls for performing various editing operations on the image . After the image is edited using the visor the visor generates a recipe corresponding to the editing operations performed by the content publishing system and transmits the recipe to the image processing system . It should be noted that the visor may not transmit the image itself to the image processing system .

Upon receiving the recipe associated with the image the image processing system retrieves a copy of the image from a storage system associated with the image processing system or the content publishing system and processes the copy of the image based on the recipe to generate the processed image as described above. The processed image is transmitted to the content publishing system which further serves the processed image to the end users .

The visor is typically provided by the entity associated with image processing system . However various other image editing tools provided by third parties can also be configured in a similar way to generate a recipe that can be processed by the image processing system .

In some embodiments the visor can be integrated into a medium using which the content publishing system publishes content to the end users . For example the visor can be integrated into a webpage containing the content of which the image is a part as shown in . In another example the visor can be integrated into an app of a smartphone tablet etc. through which the content is published.

The administrator can access the visor presented in the webpage and edit the image . By presenting the visor on the same webpage as the image the administrator can edit the image and view the resulting image as it will be seen by an end user accessing the content . This can help the administrator in obtaining a perspective on how the edited image may look with the content to an end user before the edited image is actually published. The administrator may then decide whether or not to publish the edited image. If the administrator decides to publish the edited image the visor sends the recipe having the instructions corresponding to the edit operations performed on the image to the image processing system .

The visor can either be integrated into the webpage having the content or into the web browser . If the visor is integrated into the webpage the visor may be available on any device that can access the webpage. The administrator may not have to install additional software to access or obtain the visor . On the other hand if the visor is integrated into the web browser the administrator may have to install a software on the device having the web browser e.g. device to access the visor . In some embodiments the visor is integrated into the webpage using a JavaScript containing the code for the visor . However the visor may be implemented using various other programming languages. In some embodiments the visor is integrated into the web browser as a plug in or an extension to the web browser .

In some embodiments the visor can be accessible by the end users especially when the visor is integrated into the webpage containing the content . The image processing system can have the visor authenticate a user before providing access to the user. The user may be allowed to access the visor and or edit the image only if the user is authorized. In some embodiments the image processing system supports creation of user profiles of various categories. The content publish system can create user profiles of various categories and set various access levels to the user profile categories. For example a category of users may be allowed to only view the visor another category of users may be allowed to edit the image but not transmit the recipe to image processing system another category may be allowed to perform a subset of editing operations etc.

In the screenshot the visor is displayed as a sidebar in the web browser . However the visor may be displayed in multiple configurations e.g. as a tool bar at the top or bottom of the web browser as a menu option in the web browser as a pop up window or anywhere in the same window as the web browser displaying the content . The position of sidebar may also be changed for e.g. the visor may be displayed towards the left end of web browser .

The user e.g. administrator may select the image to be edited using the image picker button . The visor allows editing one or more images simultaneously. While the screenshot illustrates editing of a single image example screenshot of illustrates editing of multiple images.

It should be noted that though illustrate integrating the visor into a webpage and or a web browser the integration of the visor is not limited to the webpage and or the web browser. The visor can also be integrated into other mediums through which the content published by the content publishing system is accessible. For example the visor can be integrated into an app through which the content can be accessed. The app can be executed on a variety of devices including desktop laptop smartphone tablet etc.

The fifth editing control can be used to perform a set of editing operations including changing the attributes of text such as font color alignment etc. The sixth editing control can be used to perform a set of editing operations including adjusting the attributes of a watermark of an image such as the watermark image location watermark width height alignment etc. The seventh editing control can be used to perform a set of editing operations including adjusting the format e.g. jpg bmp etc. quality of an image background color etc.

The editing operations described above are examples only. The visor may be configured to provide a number of other editing options including editing three dimensional 3D attributes of images. The image processing system can perform 3D processing of images based on the 3D editing operations performed on the image using the visor .

The visor can also display statistical information not illustrated including data related to a types of editing operations performed b time taken by the image processing system to process the image based on the recipe c size of the image d tiers of the image processing system the processing of the image had to pass through e geographical location of a storage system from where a copy of the image is obtained by the image processing system to process the image for generating a processed image f geographical location of the image processing system that processed the image g end users who have viewed the image h types of end user devices on which the image was rendered i headers of the image or j a various metrics of processing the image etc.

The visor GUI generation module executes the code of the visor to generate and display the GUI of the visor on a display. The GUI includes various editing controls for example editing controls described at least with reference to . If the visor is integrated into the webpage the visor generation module executes for example the JavaScript code embedded in the webpage containing the content to generate the GUI in the webpage. If the visor is integrated into the web browser the visor GUI generation module executes plug in installed in the web browser to generate the GUI. The visor GUI generation module ensures that the visor is generated per the user preferences for example in the same window of the web browser displaying the content as a pop up window as a sidebar as a tool bar etc.

The system includes an image recipe generation module that generates a recipe containing a set of image processing instructions that correspond to the editing operations performed on the image by the administrator. The image recipe generation module can generate the recipe in various programming languages including Java JavaScript C C etc.

After the recipe is generated an image recipe transmission module transmits the recipe to the image processing system . The image recipe transmission module may send additional data including an identification ID of the image being edited an ID of the content publishing system etc. to the image processing system with the recipe. It should be noted that the image recipe transmission module does not transmit the edited image to the image processing system . Upon receiving the recipe from the visor the image processing system retrieves a copy of the image from the storage system or the cache associated with image processing system processes the image to generate a processed image and transmits the image to the content publishing system .

The system can also include an authentication module to determine whether a user e.g. the administrator is authorized to perform the editing operations on the image. The authentication module allows a user to access the visor and edit the image only if the user is authorized to do so. As described above at least with reference to since various categories of users are provided with various levels of access to the visor the authentication module ensures that a particular user is authorized to perform a particular operation.

The system also includes a statistical information presentation module that presents statistical information not illustrated including data related to a types of editing operations performed b time taken by the image processing system to process an image e.g. the image based on the recipe c size of the image d tiers of the image processing system the processing of the image had to pass through e geographical location of a storage system from where a copy of the image is obtained by the image processing system to process the image for generating a processed image f geographical location of the image processing system that processed the image g end users who have viewed the image h types of end user devices on which the image was rendered i headers of the image or j a various metrics of processing the image etc.

At block the visor GUI generation module presents the visor to the content publishing system. In some embodiments presenting the visor includes generating and displaying the visor GUI on the content publishing system e.g. on an I O device associated with the content publishing system. The visor can be generated in the webpage containing the content in the same window of the web browser displaying the content as a pop up window as a sidebar as a tool bar in an app displaying the content etc.

At block the visor receives a set of editing operations performed on the image by the content publishing system. A user e.g. an administrator of the content publishing system can perform various editing operations on the image using the GUI of the visor. In some embodiments the editing operations can be performed on the image directly in the webpage displaying the content. The editing operations can include editing at least one of a a target size of the image b a target resolution of the image c a target color pattern of the image d a target layout of the image with respect to other content with which the image is served e a target brightness value f a target contrast value g a target saturation value h a target portion of the image to be highlighted i a target area of the image to be cropped j a watermark of the image or k three dimensional 3D features of the image.

After the editing operations are performed at block the image recipe generation module generates a recipe including a set of image processing instructions corresponding to the editing operations performed on the image.

At block the image recipe transmission module transmits the recipe to the image processing system. It should be noted that the visor does not transmit the edited image to the image processing system .

At block the image processing system receives the recipe from the image transmission module of the visor. The recipe is stored at a storage e.g. a recipe store of .

At block the image processing system retrieves a copy of the image from a cache associated with the image processing system . In some embodiments the image processing system can retrieve a copy of the image based on one or more of the ID of the image the ID of the content publishing system etc. The cache associated with the image processing system can be one or more of caches or of .

At block the image processing system processes the copy of the image based on the recipe received from the visor to generate a processed image. In some embodiments the copy of the image may be processed using at least one of processes or .

At block the image processing system transmits the processed image to the content publishing system for further transmission to any end users accessing the content including the processed image.

At block the content publishing system serves the processed image to the end users accessing the content and the process returns.

The source URL in node can be a value calculated by combining the URL of the source origin of the image and any other user specific account configuration parameters. This value may be used an input value for one or more nodes in the graph node . When used this value may be implicitly fetched from the origin storage e.g. source image storage system of and used as an file object. The file object may be inspected for content type and it should be an image like object for use as an image. Other operation types may use other object types. For example a text file object may be used for composing text on top of an image. An archive file object such as a zip file may be used as a container of subsequent file objects. There may be node operations for extracting individual file objects from the container or for iterating over each file object in the container.

A node may declare a conditional set of operations as illustrated in node . The node contains a sub sequence of operations that are only applied when the conditional filter passes.

At the termination of the node graph a save operation e.g. node is applied to indicate the output value from the node graph . The save operation is a terminal operation. Thus if a save operation is applied within the sub sequence of a conditional operation assuming the condition were to pass the node graph can terminate at the save point. The save point may result in non image file objects where applicable. For example a color palette may be extracted from the image and saved as a JSON dictionary or a CSS file.

The distinct graphs may be named for identify to be used in subsequent nodes. A compound operation may consist of a compound frame as shown in node . The compound frame may provide a fixed frame of images with an input for each placement in the frame. The node graph shows two frame positions represented by nodes and . However the number of frame positions is unbounded. Also a user may declare the structure of the frame in which case there would be an input image for each custom placement.

After defining the node graphs the user e.g. content publishing system of may compile the graph and send the compiled graph to the image processing system . The image processing system processes the images using the provided node graph and serve the images to the end users . In some embodiments this node graph pipeline may be compiled ahead of time and used in place of the default static pipeline e.g. instructions received from the visor for any number of user images requested through the image processing system .

The declared input parameters e.g. URL query string and HTTP header fields may define a restrictive set of values that advise the ability of a caching layer to serve cached content. Identity of a cached image may be determined by the declared input values used in the node graph. Thus if any of the declared input values differ from those used in a cached image the caching layer e.g. caches or of may simply request a new rendered image. Conversely if a requested image uses a query string value or a header that is not declared the caching layer may ignore the presence of the undeclared value and use a cached object having a different or missing undeclared value.

With compound graphs the input set is a union of all the input values for the primary graph and the input values from subsequent graphs.

The memory and storage devices are computer readable storage media that may store instructions that implement at least portions of the described technology. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communications link. Various communications links may be used such as the Internet a local area network a wide area network or a point to point dial up connection. Thus computer readable media can include computer readable storage media e.g. non transitory media and computer readable transmission media.

The instructions stored in memory can be implemented as software and or firmware to program the processor s to carry out actions described above. In some embodiments such software or firmware may be initially provided to the processing system by downloading it from a remote system through the computing system e.g. via network adapter .

The technology introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired non programmable circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more ASICs PLDs FPGAs etc.

The above description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding of the disclosure. However in certain instances well known details are not described in order to avoid obscuring the description. Further various modifications may be made without deviating from the scope of the embodiments. Accordingly the embodiments are not limited except as by the appended claims.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not for other embodiments.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that the same thing can be said in more than one way. One will recognize that memory is one form of a storage and that the terms may on occasion be used interchangeably.

Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any term discussed herein is illustrative only and is not intended to further limit the scope and meaning of the disclosure or of any exemplified term. Likewise the disclosure is not limited to various embodiments given in this specification.

Those skilled in the art will appreciate that the logic illustrated in each of the flow diagrams discussed above may be altered in various ways. For example the order of the logic may be rearranged substeps may be performed in parallel illustrated logic may be omitted other logic may be included etc.

Without intent to further limit the scope of the disclosure examples of instruments apparatus methods and their related results according to the embodiments of the present disclosure are given below. Note that titles or subtitles may be used in the examples for convenience of a reader which in no way should limit the scope of the disclosure. Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

