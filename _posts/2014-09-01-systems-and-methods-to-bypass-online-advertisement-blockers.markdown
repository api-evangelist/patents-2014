---

title: Systems and methods to bypass online advertisement blockers
abstract: Some embodiments provide an adblocking bypass system for ensuring that advertisements are loaded and presented on a user device running one or more adblockers. The adblocking bypass system is comprised of a bypass loader and a bypass proxy. The bypass loader is a component that is embedded within content publisher content. When the content publisher content is downloaded and parsed by a user device, the bypass loader executes by detecting the presence of any adblocker on the user device. If found, the bypass loader forwards any blocked advertisement calls to the bypass proxy. The bypass proxy retrieves the requested advertisements and returns them to the bypass loader which then reintroduces the advertisements in final content presentation or rendering. The bypass proxy may also modify the content publisher content by replacing any blocked advertisement calls embedded within the content with calls to the bypass proxy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09177335&OS=09177335&RS=09177335
owner: AdSupply, Inc.
number: 09177335
owner_city: Culver City
owner_country: US
publication_date: 20140901
---
The present invention is directed to online advertisement systems and more particularly to systems and methods for counteracting online advertisement blockers that run on user devices.

Online advertising is an important revenue stream for many publishers of online content. Online advertising is also an important means through which different entities products and services generate goodwill brand recognition and customer loyalty as well as promote and disseminate information about those entities products and services.

Online advertisement can be in the form of banner pop up embedded in line interstitial and full page canvas advertisements that are presented when a user visits a page navigates away from a page closes a page or is otherwise directed to a page or an advertisement. The advertisements can be provided as links audio content or visual content including text images and other multimedia content.

Advertisement blocking tools also referred to herein as adblockers operate to block the display and in some cases the loading of online advertisements on websites such as HyperText Markup Language HTML pages and other downloadable content. Adblockers can be software applications browser components extensions add ons scripts or any service that operates in conjunction with a web browsing application such as Chrome Internet Explorer and Firefox for the purpose of blocking the display and or loading of online advertisements.

Adblockers operate by intercepting calls to advertisements within content or preventing the advertisements from loading as part of the content. Typically adblockers identify the advertisement calls that are to be intercepted using various blacklists. The blacklists may specify links or classes that identify various servers services or sources of advertisements. The blacklisted links include Uniform Resource Locators URLs other hyperlinks or addressing to known advertisements or advertising providers. The blacklisted classes include function calls scripting language and other code that are used to embed advertisements within content. Adblockers may also block specific Cascade Style Sheet CSS selectors CSS styles and HTML elements from loading or being included as part of the content presentation. These and many other techniques may be used by different adblockers but their objective is the same to prevent the display or loading of advertisements that are embedded within online content.

Adblockers therefore prevent the presentation of content as originally intended by the originating content publisher. In so doing adblockers deprive the content publisher of advertising revenue and also prevent the marketing promotion and information dissemination of entities products and services. Accordingly there is a need to counteract the effect of adblockers and ensure that content is presented on the user device in the manner intended by the originating online content publisher.

It is an objective of the embodiments described herein to load and display advertisements as originally configured in online content publisher content even when one or more adblockers execute on the user device. To achieve these and other objectives some embodiments provide an adblocking bypass system.

The adblocking bypass system is comprised of a bypass loader and a bypass proxy. The bypass loader is a component that is embedded within content publisher content. The bypass loader is configured to run after the operation of any adblockers and reverse or counteract adblocker operation thereby ensuring that advertisements configured as part of the content will be loaded and presented on the user device. In some embodiments the bypass loader is configured to run after firing or execution of the load or onload event on the user device parsing and rendering the content.

When executed the bypass loader detects presence of an adblocker running on the user device. In some embodiments detection involves attempting to load an advertisement that is itself tracked or contains a trackable resource. If the tracked advertisement or resource is not present after the onload event then the bypass loader determines that an adblocker is running on the user device.

If an adblocker is not detected on the user device the bypass loader terminates and the user device processes renders and presents the content without modification. If the bypass loader detects presence of an adblocker the bypass loader dynamically disguises the advertisement calls within the content to avoid having the calls match entries within the adblocker s blacklist. Specifically the bypass loader uses a cipher to encrypt or otherwise obfuscate the domain name hostname Uniform Resource Locator URL or other address or request of the advertisement call. The bypass loader appends the cipher key used for the obfuscation to the obfuscated advertisement call. In some embodiments the bypass loader also performs a base32 encoding of the obfuscated advertisement call to ensure it is formatted as a proper URL query. The bypass loader then passes the obfuscated advertisement call containing the encrypted original advertisement call and the cipher key used to perform the encryption to the bypass proxy. To ensure that the obfuscated advertisement call passing to the bypass proxy is not blocked by an adblocker some embodiments periodically change the address e.g. domain name of the bypass proxy. The change can be performed automatically using a hash of a key or timestamp to generate the new address or domain name with a concerted action occurring at the bypass proxy to change routing or Domain Name System DNS configurations accordingly.

The bypass proxy is a hosted service that runs on a remote machine operating independent of the user device. The bypass proxy receives the obfuscated advertisement calls from the different bypass loader instances running on different user devices and reverses the obfuscation operations performed by the bypass loaders. For a specific obfuscated advertisement call the bypass proxy decodes the base32 encoding extracts the appended cipher key and uses the cipher key to decrypt the original advertisement call. The bypass proxy then retrieves the advertisement from the corresponding advertisement server identified by the original advertisement call before forwarding the advertisement back to the appropriate bypass loader. To preserve the advertisers ability to track each user device with cookies or other means the bypass proxy may include various header parameters including the user device IP address in the request to the advertisement server. Similarly the header of the advertisement server response containing the requested advertisement may be parsed by the bypass loader to forward any tracking information or other relevant header parameters to the user device.

Upon receiving a forwarded advertisement from the bypass proxy the bypass loader reintroduces the advertisement into the final presentation or rendering of the content. In some embodiments the bypass loader reintroduces the advertisement by manipulating the Document Object Model DOM of the content rendering application running on the user device.

To avoid repeating these operations in some embodiments the bypass proxy modifies the content publisher content hosted on the remote site so that the original advertisement calls are replaced with the obfuscated advertisement calls. In other words the bypass proxy rewrites the advertisement calls in the original content with addressing of the bypass proxy instead of addressing of the corresponding advertisement servers wherein the addressing of the corresponding advertisement servers may be encrypted and or included as part of the rewritten advertisement calls in some embodiments.

In the following detailed description numerous details examples and embodiments for the adblocking bypass system are set forth and described. The adblocking bypass system is not limited to the embodiments set forth and it may be practiced without some of the specific details and examples discussed. Also reference is made to the accompanying figures which illustrate specific embodiments in which the adblocking bypass system can be practiced. It is to be understood that other embodiments can be used and structural changes can be made without departing from the scope of the embodiments herein described.

Content publishers originate content for consumption by the user devices . Content is a general term referring to any web site text document file media application service or game that is digitally encoded and is deliverable across a network such as the Internet. Content itself can be composed of content sub components wherein the sub components may be provided by the same content publisher or other content publishers. For instance content may be embedded with images provided by a first content publisher a service provided by a second content publisher and advertisements provided by one or more advertisement servers. In the content publishers are shown to operate one or more servers that host and deliver their content. However as is well known in the art content publisher originated content can be hosted and served from other sources including content delivery networks CDNs cloud service providers and caching or proxy servers operated by others independent of the content publishers .

The user devices include any device with a processor that runs a content processing rendering or presenting application. The user device can include any of a laptop computer smartphone tablet and desktop computing machine as some examples. The most common application for processing rendering or presenting the content is a web browsing application e.g. Internet Explorer Firefox Chrome and Safari web browsers although other applications running on the user device can similarly process render or present the content publisher content. For the purposes of the discussion that it to follow one or more adblockers are installed on the user devices and running in conjunction with the content retrieval or content rendering application of the user devices . AdBlock and AdBlock Plus are examples of adblockers. As noted in the background section the purpose of the adblockers is to block the display and or loading of online advertisements that are embedded as part of the content being presented on a user device. illustrates various components of the user devices servers for the content publisher content and the adblocking bypass system.

Advertisement servers are machines that host and deliver various advertisements that are embedded within the content publisher content. As earlier noted the content publisher content may be configured with zero or more advertisement calls. When a user device receives and processes content with one or more advertisement calls the user device will parse and invoke those advertisement calls in order to identify and retrieve the advertisements from the appropriate advertisement servers . The advertisements are then rendered or displayed as part of the content in the manner configured or specified within the content publisher content.

The collective operations of the bypass proxy and the bypass loaders counteract adblocker functionality and ensure that advertisements embedded as part of the content publisher content will be loaded and displayed on the user devices even when the user devices run one or more adblockers. In some embodiments the bypass loaders are embedded in content publisher content as server side scripts that dynamically adapt in response to adblocker operation. As adblockers modify which advertisement calls they block the bypass loader modifies the manner in which the advertisements associated with those advertisement calls are retrieved in order to evade the adblocker from blocking those advertisements. In some embodiments the bypass loaders are embodied as JavaScript although other scripting languages or code can be used to implement the bypass loaders . In some embodiments a call or function embedded within the content publisher content can be used to invoke a bypass loader on a machine that is remote to the user device issuing the call or function. In some embodiments the bypass loader is configured to execute when or after the load or onLoad Document Object Model DOM or HyperText Markup Language HTML event fires. These events fire when a page object or entirety of the content has finished loading on the corresponding user device. More importantly the events fire after adblocker execution is complete.

Each bypass proxy is a service that is hosted by the adblocking bypass system. The bypass proxy is a network accessible machine that operates independent of the user devices and content publishers although in some embodiments the bypass proxy functionality described below can be incorporated directly with content publisher resources. Incorporating the bypass proxy functionality directly within servers or other resources e.g. load balancers of the content publishers is preferable for adblockers that prevent user devices from issuing calls to any third party when rendering first party content. In other words when rendering content from a particular content publisher an adblocker may block any calls issued to any domain deviating from that of the particular content publisher.

The message exchange commences when the user device requests at content from the content publisher . The content publisher content is embedded with the bypass loader of some embodiments. The content publisher content is also embedded with at least one advertisement call that points to an advertisement that is hosted and served by the advertisement server . As an example the advertisement call can be an a href HTML attribute with a link specifying an address of the advertisement server. The link can be a Uniform Resource Locator URL having a domain name or Internet Protocol IP address of the advertisement server a directory path and a filename of the advertisement. Different content publishers can use different advertisement call formatting HTML elements and scripts to issue the advertisement calls. In any event once the advertisement call is issued a URL or other address is used to request an advertisement from the appropriate advertisement server . In response to the user device request the content publisher serves at the requested content with the at least one advertisement call and bypass loader to the user device .

The user device or browsing application running on the user device begins by parsing at the content and constructing at the DOM hierarchy. Construction of the DOM hierarchy is well known in the art and an operation performed by most content browsing applications including web browsers. Generally constructing the DOM hierarchy involves parsing the content into its various object components and producing a tree with nodes to represent the object components style and structure in a manner that is accessible through a standardized application programming interface API .

While parsing the content and constructing the DOM hierarchy the adblocker is invoked to intercept any advertisement calls that are embedded in the content and to prevent the advertisements requested by those calls from being loaded as part of the content. As shown the adblocker intercepts and blocks at the advertisement call that attempts to retrieve an advertisement from the advertisement server . The adblocker may identify the advertisement call because the call specifies a URL domain name hostname or other address that matches to an entry in the adblocker blacklist. The adblocker may also indirectly identify advertisement calls by blocking specific Cascade Style Sheet CSS selectors and HTML elements from being added to the DOM hierarchy. Specifically the adblocker can intercept and prevent loading or display of advertisements by removing or hiding nodes from the DOM hierarchy that arise because of various advertisement calls. In such situations the user device may actually issue the advertisement calls with the adblocker later preventing them from being loaded or removing them once they are loaded as part of the content. Other adblockers may prevent the DOM hierarchy from being constructed with any advertisement related nodes. In such situations the adblockers prevent the user device from even issuing the advertisement calls to the corresponding advertisement server.

Once the content is parsed and the DOM hierarchy is constructed the load event fires at . The firing or completion of the load event triggers execution of the bypass loader that is also embedded as part of the content publisher content. The bypass loader detects for the presence of any adblocker running on the user device . The detection can be performed in any number of ways including attempting to load a specific advertisement tag that is itself tracked or contains a trackable resource. If an adblocker was running on the user device the adblocker would remove or block that specific advertisement tag or trackable resource and the absence of which would indicate to the bypass loader that an adblocker is in fact running. The bypass loader then identifies the advertisement calls that were intercepted and blocked by the adblocker. In some embodiments the bypass loader identifies the advertisement calls by scanning the content to look for addressing links or URLs to known advertisers or advertisement servers that are blacklisted by various adblockers. In some embodiments the bypass loader identifies the advertisement calls by identifying calls within the content that do not have corresponding nodes in the DOM hierarchy as a result of the adblocker removing those nodes or preventing those nodes from being constructed. The bypass loader then obfuscates any identified advertisement calls and reissues the obfuscated advertisement calls to the bypass proxy . Obfuscating the advertisement calls is described with reference to below. The bypass proxy address is continually changed to ensure that the address is not within the adblockers blacklists. As such the obfuscated advertisement calls will not be blocked. However some adblockers prevent calls to any third party domain including the domain specified in the bypass proxy address. To overcome such restriction some embodiments direct the obfuscated advertisement call to an address of a load balancer or other server operated by the first party content publisher . The load balancer or other server is configured to identify any obfuscated advertisement calls and either forward those calls to the bypass proxy or perform the bypass proxy operation by incorporating the bypass operation functionality within the first party content publisher s own servers.

In the bypass proxy receives at an obfuscated advertisement call. In some embodiments the obfuscated advertisement call includes the original advertisement call or the original link e.g. URL used in requesting the advertisement from the advertisement server . Accordingly the bypass proxy extracts the original advertisement call from the obfuscated advertisement call requests the original advertisement from the advertisement server as a result of issuing the original advertisement call and retrieves at the original advertisement from the advertisement server . The bypass proxy then forwards at the advertisement to the bypass loader running on the user device .

In some embodiments the bypass proxy may cache a copy of the advertisement such that future requests for that advertisement can be satisfied from cache without having to access the advertisement server . A time to live parameter may be provided to invalidate the cached copy of the advertisement and cause the bypass proxy to retrieve another copy of the advertisement from the advertisement server upon its expiration.

The bypass loader reintroduces the advertisement that the adblocker removed back into the presentation or rendering of the content. In some embodiments the bypass loader reintroduces the advertisement by manipulating at the DOM hierarchy. In some embodiments manipulating the DOM hierarchy involves inserting a node for the advertisement into the hierarchy with the attributes specified by the content provider for presenting the advertisement as part of the content rendering. The user device resumes its normal operation and renders the content based on the modified DOM hierarchy. The resulting content rendering will include the advertisement that was originally intended by the content publisher despite the operation of the adblocker running on the user device .

The bypass proxy also accesses the copy of the content stored by the content publisher in order to modify at the advertisement call in the content. In some embodiments the modification involves changing the source address or link of the advertisement call within the content to a modified address or link that is not within the adblocker blacklist. In some embodiments the modification involves changing the advertisement call from requesting the advertisement from the advertisement server to requesting the advertisement from the bypass proxy with the original request to the advertisement server being encrypted and included as part of the modified advertisement call. Different aliases or addresses for the bypass proxy can be used to ensure that the adblockers do not prevent access of the user device to the bypass proxy .

The content publisher content includes at least an advertisement call for including an advertisement as part of the content publisher content and a script for running the bypass loader of some embodiments. In this figure the advertisement call is an HTML a href attribute specifying an advertisement URL for retrieving the advertisement from the advertisement server . The advertisement URL is www.advertisement.com ad.jpg . As before the bypass loader script is configured to execute after the load event on the user device fires during the processing and rendering the content.

The user device requests and receives the content publisher content from the remote site . The request can be issued by invoking a link directing a browser of the user device to the address of the site or launching any application that loads the content publisher content. The content request is typically issued as a HyperText Transfer Protocol HTTP GET request with a URL identifying an address of the site and the content being requested.

Upon receiving the content an adblocker running on the user device blocks the advertisement call . This may be due to the address i.e. domain name of the advertisement server specified as part of the advertisement call being within the adblocker s blacklist.

After the user device loads the content objects the load event fires. Consequently the bypass loader script is invoked and the bypass loader begins its operation. The bypass loader detects the adblocker running on the user device and the advertisement call that was blocked by the adblocker. The bypass loader then obfuscates the advertisement call and issues the obfuscated advertisement call to the bypass proxy . As shown in the obfuscated advertisement call is specified as www.proxy.com abcdef123456 wherein proxy.com is the domain name pointing to the bypass proxy and the abcdef123456 parameter encrypts the original advertisement call to www.advertisement.com ad.jpg . The obfuscated advertisement call can be issued by the user device because the bypass proxy domain name is not within the adblocker blacklist and therefore will not be blocked. In some embodiments included with the obfuscated advertisement call is a query string argument to inform the bypass proxy that an adblocker was detected on the user device . An example of the query string argument is adblock true . In some embodiments included with the obfuscated advertisement call is an HTTP header to forward the user device IP address to the bypass proxy .

When the bypass proxy receives the obfuscated advertisement call it decrypts the original advertisement URL from obfuscated advertisement call. Then using the original advertisement call the bypass proxy requests and retrieves the original advertisement from the advertisement server . The bypass proxy returns the advertisement to the bypass loader which then reintroduces the advertisement into the final rendering or presentation of the retrieved content as was intended by the content publisher.

The bypass proxy may also modify the content hosted by site so to avoid blocking of the embedded advertisement calls in the future. As shown the bypass proxy modifies the content by modifying the advertisement call to specify the proxy URL instead of the original advertisement URL.

To avoid the bypass proxy address from being blacklisted and the obfuscated calls generated to the bypass proxy from being block the adblocking bypass system of some embodiments continually or dynamically changes the bypass proxy address. In some embodiments the address is automatically changed. In some such embodiments the bypass loader includes an address generation engine that generates an address of bypass proxy based on a hash of a shared key a date or timestamp. The resulting hash can be a temporary domain name that points to the bypass proxy . For example a new domain name resolving to the bypass proxy can be generated daily. The same address generation engine is run for the bypass proxy to dynamically configure any routers or authoritative Domain Name System DNS servers that resolve the temporary domain names to the bypass proxy . This can include changing an A record canonical name CNAME or alias of the routers or DNS servers used to resolve the temporary domain names to the bypass proxy IP address. As noted above an alternative is generate obfuscated calls that address the first party content publisher from which the content is received with the first party publisher redirecting the obfuscated call to the bypass proxy . Specifically local URLs are configured at the first party content publisher to redirect to the bypass proxy and the bypass loader generates obfuscated calls addressed to one of the local URLs.

The process detects at presence of one or more adblockers on the user device on which the bypass loader executes. As noted above this can be accomplished based on the presence or absence of a specific advertisement tag that is required to return before the load event can be fired. If an adblocker was running on the user device the adblocker would remove or block that specific advertisement tag and the absence of which would indicate to the bypass loader that an adblocker is in fact running. In some embodiments the bypass loader detects the presence of an adblocker by identifying that dimensions of an advertisement have been set to zero such that they are not visible.

If no adblocker is detected at the process terminates at operation of the bypass loader and the content is rendered on the user device without any changes. However if one or more adblockers are detected at the process scans at the content to identify advertisement calls that have been or could be blocked by the adblockers.

For each identified original advertisement call that is or may be blocked by an adblocker the process produces an obfuscated advertisement call. The process produces the obfuscated advertisement call by encrypting at the original advertisement call using a cipher and a particular cipher key. The process appends at the particular cipher key to the encryption result yielding a string of potentially arbitrary length. The particular cipher key may be a fixed size e.g. five characters such that the bypass proxy is able to later identify and extract the particular cipher key from the string. The process optionally performs at a base32 encoding of the resulting string to ensure the string is formatted as a proper URL query string argument or pathname. The process then appends at the string or base32 encoded string containing the encrypted original advertisement call and particular cipher key to a URL that specifies the bypass proxy address e.g. IP address or domain name . The bypass proxy address appended with the string containing the original advertisement call and the particular cipher key yield the obfuscated advertisement call. The process issues at the obfuscated advertisement call to the bypass proxy.

As noted above certain adblockers when rendering content of a particular content publisher may block any calls that are issued to any third party domain that deviates from the domain of that particular content publisher. In such cases the bypass proxy address of the obfuscated advertisement call can specify an address to a load balancing server or other server of the particular content publisher that operates in concert with the adblocking bypass system of some embodiments. Thus the bypass loader sends the obfuscated advertisement call to a load balancer or other machine of the content publisher to avoid the adblocker from blocking the call. The load balancer then identifies the obfuscated advertisement call and forwards it to the bypass proxy. Alternatively the load balancer or other machine of the content publisher can directly incorporate and perform the bypass proxy functionality such that the bypass proxy address can address that load balancer or other content publisher machine without any further redirection.

The bypass proxy reverses the bypass loader operations to extract the original advertisement call from the obfuscated advertisement call request the advertisement from the appropriate advertisement server using the original advertisement call and return the advertisement to the bypass loader. Accordingly the process receives at the advertisement from the bypass proxy and reintroduces at the advertisement as part of the content presentation or rendering. As noted above the process can reintroduce the advertisement by manipulating the DOM hierarchy. The process then ends.

In some embodiments the bypass proxy preserves the ability of the advertisement server to track the user devices that receive the advertisements served by the advertisement server. To do so step above can be modified such that when the bypass proxy issues the original advertisement call to the advertisement server the bypass proxy forwards the user device information to the advertisement server. Specifically the bypass proxy reads the request header encapsulating the original advertisement call to extract identifying information about the user device including the user device IP address. The identifying information is then forwarded in the advertisement call that the bypass proxy submits to the advertisement server on behalf of the user device. The advertisement server can then track the true recipient for the advertisement. Similarly when forwarding the advertisement back to the bypass loader at step the bypass proxy can submit the advertisement with the header provided by the advertisement server which may include a cookie or other tracking information.

Some adblockers perform a more aggressive secondary or alternative routine to prevent the display of advertisements. They do so by blocking elements matching certain CSS selectors. The adblocking bypass system of some embodiments circumvents this adblocking operation by using the bypass loader to insert random zero space elements i.e. elements that are invisible on the page to change the DOM ordering. In so doing the bypass loader is able to vary or otherwise modify the sought after selectors. An alternative method to circumvent CSS selector blocking is described with reference to the CSS translation process of .

The process commences with the bypass proxy receiving at a request for a CSS file from a bypass loader with a particular cipher key specified on the URL request. The bypass proxy recognizes at the request for the CSS file retrieves at the CSS file and searches through it to replace at all class names with a ciphered version using the provided particular cipher key before passing at the CSS file with the obfuscated class names to the bypass loader. The process then receives at a request for the content HTML from the bypass loader again with the same cipher key. The process retrieves at the content HTML and performs the same ciphering to obfuscate at the CSS class names therein to match the changed names of the CSS file. The process passes at the modified HTML to the bypass loader which can then render the content in a manner that prevents the CSS and any included advertisement therein from being blocked.

Many of the above described processes and components are implemented as software processes that are specified as a set of instructions recorded on non transitory computer readable storage medium also referred to as computer readable medium . When these instructions are executed by one or more computational element s such as processors or other computational elements like ASICs and FPGAs they cause the computational element s to perform the actions indicated in the instructions. Server computer and computing machine are meant in their broadest sense and may include any electronic device with a processor that executes instructions stored on computer readable media or that are obtained remotely over a network connection. Examples of computer readable media include but are not limited to CD ROMs flash drives RAM chips hard drives EPROMs etc. Further wherever a server or device is identified as a component of the embodied invention it is understood that the server may be a single physical machine or a cluster of multiple physical machines performing related functions or virtualized servers co resident on a single physical machine or various combinations of the above.

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the computer system . For instance the bus communicatively connects the processor with the read only memory the system memory and the permanent storage device . From these various memory units the processor retrieves instructions to execute and data to process in order to execute the processes of the invention. The processor is a processing device such as a central processing unit integrated circuit graphical processing unit etc.

The read only memory ROM stores static data and instructions that are needed by the processor and other modules of the computer system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the computer system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a flash drive as the permanent storage device Like the permanent storage device the system memory is a read and write memory device. However unlike the storage device the system memory is a volatile read and write memory such as random access memory RAM . The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the processes are stored in the system memory the permanent storage device and or the read only memory .

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the computer system. The input devices include but are not limited to alphanumeric keypads including physical keyboards and touchscreen keyboards and pointing devices. The input devices also include audio input devices e.g. microphones MIDI musical instruments etc. . The output devices display images generated by the computer system. The output devices include but are not limited to printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD .

Finally as shown in bus also couples computer to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN or an Intranet or a network of networks such as the Internet.

As mentioned above the computer system may include one or more of a variety of different computer readable media. Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives read only and recordable blu ray discs and any other optical or magnetic media.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. Thus one of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details but rather is to be defined by the appended claims.

