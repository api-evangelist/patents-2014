---

title: Subscriber based priority of messages in a publisher-subscriber domain
abstract: Embodiments of the present invention disclose a method, computer program product, and computer system for prioritizing messages based on subscriber preferences. In an embodiment of the invention, an application server computer determines that a subscriber is subscribed to at least one topic space. The application server computer receives one or more topic priority preferences from the subscriber, and a plurality of messages from the at least one topic space. The application server computer prioritizes the plurality of messages based on the received topic priority preference, and sends the prioritized plurality of messages to the subscriber.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497288&OS=09497288&RS=09497288
owner: International Business Machines Corporation
number: 09497288
owner_city: Armonk
owner_country: US
publication_date: 20140604
---
This application is a Continuation application of pending U.S. patent application Ser. No. 14 064 390 filed Oct. 28 2013.

The present invention relates generally to the field of multicomputer data transferring and communication and more particularly to subscriber based priority of messages in a publisher subscriber domain.

Publish subscribe pub sub data processing and messaging systems have become very popular in recent years as a way of distributing data messages. Pub sub messaging systems are a messaging technology that may be used in Internet based or other networked environments. In a pub sub network one or many publisher applications send messages to the network and subscriber applications register subscriptions to indicate the subscriber s interest in receiving certain types of messages pertaining to certain topics. If a published message matches one of the subscriptions stored for a particular subscriber the message is passed to the subscriber by a subscriber messaging engine. In typical pub sub messaging systems it is the responsibility of a messaging engine to which the publisher application is connected to push messages to messaging engines connected to relevant or subscribed subscriber applications. It is common especially in cloud computing scenarios to have a messaging system with hundreds or more messaging engines.

In typical pub sub messaging systems the publisher sets a message priority level for each message. This priority level reflects the importance of a given message determined by the publisher relative to the other messages published by that publisher. In typical pub sub messaging systems subscribers are not able to affect the order in which the messaging engine delivers the messages. As a result subscribers may often receive messages that are less important to the subscriber than other messages. Publishers also set expiration times for messages. Once a message reaches its expiration time it is deleted from the pub sub messaging system. Because the priorities and expiration times are set by the publisher some messages may expire before they are ever delivered to the subscriber resulting in the subscriber never receiving a message with high priority.

Embodiments of the present invention disclose a method computer program product and computer system for prioritizing messages based on subscriber preferences. In an embodiment of the invention an application server computer determines that a subscriber is subscribed to at least one topic space. The application server computer receives one or more topic priority preferences from the subscriber. The application server computer receives a plurality of messages from the at least one topic space. The application server computer prioritizes the plurality of messages based at least in part on the received topic priority preference and the application server computer sends the prioritized plurality of messages to the subscriber.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code instructions embodied thereon.

Any combination of computer readable media may be utilized. Computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of a computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The present invention will now be described in detail with reference to the figures. is a functional block diagram depicting a message distribution environment generally designated in accordance with an embodiment of the invention. Message distribution environment includes application server computer application server computer and application server computers A to N all interconnected via network . Message distribution environment is representative of a messaging system including any number of messaging clients. In an embodiment message distribution environment includes messaging engines with publisher applications messaging engines with subscriber applications and messaging engines with topic space applications. In various other embodiments of the present invention messaging clients within message distribution environment are connected via network in a network architecture such as a bus network topology a mesh networking topology or a tree structure topology. Network can be for example a local area network LAN a wide area network WAN such as the Internet or any combination of the two and can include wired wireless or fiber optic connections. In general network can be any combination of connections and protocols that will support communication and exchange of messages between application server computer application server computer and application server computers A to N including distributed computing such as cloud computing. In various embodiments of the present invention application server computers and A to N can be laptop computers tablet computers netbook computers PCs PDAs smart phones or any programmable electronic device capable of communicating with application server computer via network . Application server computers A to N may represent a computing system utilizing clustered computers and components to act as a single pool of seamless resources when accessed through a network.

Application server computer includes publisher messaging engine . Publisher messaging engine is a server component capable of providing messaging functions of a service integration bus for example enabling the bus to send and receive messages. Publisher messaging engine manages the bus resources and allows applications to communicate with the bus. In an embodiment publisher messaging engine includes an application for publishing or pushing topic messages to topic messaging engine . Subscriber messaging engines such as subscriber messaging engine A are connected to topic messaging engine and include an application to receive topic messages published from publisher messaging engine . Topic messages are messages pertaining to a particular topic to which a number of subscribers have subscribed to receive messages. In an embodiment topic messages also include message lists or message groups containing multiple messages. Publishers also have the ability to set expiry times for the messages they publish. The default is to have the message remain in message distribution environment indefinitely but a publisher may set a particular time period after which the message will expire.

Application server computer includes topic messaging engine . Topic messaging engine manages the topic spaces to which publisher messaging engine publishes messages. Topic messaging engine is a server component capable of providing messaging functions of a service integration bus for example enabling the bus to send and receive messages. Topic messaging engine manages the bus resources and allows applications to communicate with the bus.

Application server computers A to N include subscriber messaging engines A to N. Subscriber messaging engine A to N hereinafter is a server component capable of providing messaging functions of a service integration bus for example enabling the bus to send and receive messages. Subscriber messaging engine receives topic messages from topic messaging engine via network . Subscriber messaging engine contains a destination stream which includes a list of messages to be delivered to the subscriber. The destination stream is a data structure such as a heap data structure which organizes the queued messages for delivery based on the messages relative priority.

Each of subscriber messaging engines includes message prioritization program . Message prioritization program A to N hereinafter determines the order in which messages delivered from publisher messaging engine to subscriber messaging engine should be delivered to the subscriber. Message prioritization program receives topic messages from topic messaging engine . In the depicted embodiment a subscriber inputs preferences into message prioritization program for different topics to which publisher messaging engine may publish messages. For example preferences can indicate the priority that each message topic should receive when being delivered to the subscriber. Message prioritization program reprioritizes the messages received by subscriber messaging engine according to the subscriber preferences. In addition to reprioritizing messages based on the message topic message prioritization program may also reprioritize messages that are about to expire. If a message is near expiry and has yet to be delivered message prioritization program reprioritizes the message for delivery sooner by for example placing an interrupt to the priority interrupt vector table A to N herein after 136 contained in subscriber messaging engine .

Subscriber messaging engine contains priority interrupt vector table . Priority interrupt vector table is a table of interrupt vectors which processes various requests to interrupt a running program in order to run another program called an interrupt request. In an embodiment of the present invention priority interrupt vector table contains a list of interrupt vectors. Interrupt vectors instruct a processor to save its current state and begin running a different program thread. After the interrupting thread completes the processor returns to its previous state and continues from that point. In an embodiment of the present invention the priority interrupt vector table includes the priority interrupts that interrupt subscriber messaging engine in order to reprioritize messages received from publisher messaging engine via network .

In the depicted embodiment initially a publisher such as a news provider publishes one or more messages via a publisher messaging engine such as publisher messaging engine to one or more topic spaces which are stored by topic messaging engine . Topic messaging engine is located on application server computer which is connected to network . A topic space is a point of addressability within a bus and facilitates publish subscribe messaging capabilities. The publisher sets the initial priority of each message according to the publisher s determination of the relative priority of each message compared to other messages it is publishing. A subscriber such as a consumer interested in a given topic subscribes to the one or more topics in order to automatically receive via network messages published by the publisher to the topics to which the subscriber is subscribed. The subscriber messaging engine which includes message prioritization program receives messages from the topic spaces and organizes them according to the messages relative priority settings.

Message prioritization program receives topic priority settings and expiry priority settings step . In the depicted embodiment message prioritization program receives the topic priority settings and expiry priority settings from the subscriber. In another embodiment message prioritization program receives the expiry priority settings from subscriber messaging engine . The topic priority settings include subscriber preferences which allow the subscriber to dictate the order in which messages from different publishers should be prioritized for delivery. For example a subscriber may wish to receive messages regarding topic A before receiving messages regarding topic B. In this example the priority settings provide instructions that message prioritization program uses to change the priority attached to messages on topic A and topic B so that topic A will be delivered first to the subscriber.

Additionally in the depicted embodiment message prioritization program receives expiry priority settings from subscriber messaging engine . In another embodiment message prioritization program receives expiry priority settings from the subscriber. Expiry priority settings creates a threshold time of expiry. For example when a message is about to expire because of an expiration time set by the publisher the expiry priority time settings can increase the priority of those messages about to expire which ensures that the messages are delivered to the subscriber before they expire. In an exemplary embodiment of the present invention the subscriber may input the topic priority settings and the expiry priority settings through an application programming interface or user interface display such as a menu. After receiving the topic priority settings and expiry priority settings message prioritization program saves the settings in memory such as local cache RAM or external storage.

Message prioritization program receives messages from a topic space via network step . In an illustrative example publisher messaging engine publishes messages to a number of different topic spaces e.g. Topic A and Topic B to which subscriber messaging engine is subscribed. The subscriber then receives the published messages from Topic A and Topic B through an input stream such as network . The published messages are processed according to capabilities of the subscriber messaging engine which includes message prioritization program . Processing includes adding messages from Topic A and Topic B to a destination stream and assigning a priority value to each message. The destination stream is a data structure such as a min heap structure that organizes the messages according to relative priority in order to determine the order in which the messages are delivered to the subscriber. A min heap is a binary tree data structure in which a heap property such as priority value requires that all nodes i.e. messages having a lower priority value be delivered before those nodes with a higher priority value. For example messages that have a priority value of 1 are delivered before messages with a priority value of 2 etc. As a secondary ordering mechanism the nodes can be placed in the queue in the order in which they are received from publisher messaging engine .

Message prioritization program sets the message priority value for each message based on the subscriber topic priority settings step . In the depicted embodiment each message is assigned a priority value based on the topic of the message and the subscriber priority settings. In the illustrative example referenced above where a min heap destination stream is being used topic A and topic B will have different priority values assigned to them where the higher priority message i.e. more important message has a lower priority value applied to it. For example if Topic A is deemed to be higher priority by the subscriber settings then Topic A messages may have a priority value of 1 assigned while Topic B messages have a priority value of 2 assigned.

Messaging prioritization program delivers the messages to the subscriber s destination stream step . As discussed above the destination stream is a data structure which orders the messages for delivery based on the relative priority of the messages. Therefore in the above example messages from Topic A would be delivered to the subscriber first in the order in which they were published and then messages from Topic B would be delivered in the order in which they were published.

In the embodiment depicted in messaging prioritization program determines whether a message has reached its threshold time of expiry decision block by for example comparing the expiry threshold as set by the subscriber to the expiration time set by the publisher. When a message reaches its threshold time of expiry which is set by for example subscriber messaging engine the message is about to expire before it can be delivered to the subscriber. If a message has not reached its threshold time of expiry decision block no branch message prioritization program proceeds to deliver the messages to the subscriber step according to priority settings. When messaging prioritization program determines that a message has reached its threshold time of expiry decision block yes branch it triggers an interrupt to the priority interrupt vector table step . In the depicted embodiment priority interrupt vector table includes a messaging ID subscriber destination information and a priority value for each message. When the interrupt is triggered for a specific messaging ID message prioritization program changes the priority value of the identified message so that the message will be delivered with higher priority.

Message prioritization program reprioritizes the expiring message for delivery according to the interrupt to the priority interrupt vector table step . Reprioritizing the message changes the priority value of the message. In an exemplary embodiment of the present invention reprioritizing the message causes the message to be placed earlier in the destination stream so that the message will be delivered sooner than if left with the previous priority value.

After the priority of a message is increased because of the threshold time of expiry and the message reaches the top of the subscriber s destination queue or alternatively if the message reaches the top of the subscriber s destination queue without reaching its expiry threshold message prioritization program delivers the message to the subscriber step .

Publisher messaging engine publishes a number of messages in this case six to Topic A A and Topic B B which can be included in topic messaging engine . As one of skill in the art will appreciate Topic A A and Topic B B are pub sub topics which may be named logical channels that route to a message broker or event bus. Topics represent a type or class of message in which all of the messages belonging to that topic have a common theme or subject. For example Topic A A may be a topic associated with messages related to sports while Topic B B may be a topic associated with messages related to weather. According to messages are published in order with message being published first and message being published last. Messages and are published to Topic A A and messages and are published to Topic B.

Each of these messages has a priority valued assigned to it by the publisher based on for example the publisher s determination of the importance of a given message compared to the other messages in a given topic. According to the embodiment of the present invention depicted in the publisher assigned prioritization is not determinative and so each of messages may be assumed to have the same publisher priority value. If the subscriber priority values are identical as they are in the exemplary embodiment depicted in delivery will default to a secondary method for delivering messages such as in chronological order.

Subscriber messaging engine which includes message prioritization program is a subscriber messaging engine that is subscribed to both Topic A A and Topic B B. Subscriber messaging engine receives messages in chronological order with message being first then message and so on until message is received.

Messaging prioritization program in accordance with the embodiment depicted in receives the topic priority settings from the subscriber for prioritization of Topic A A and Topic B B. In the illustrative embodiment depicted in messaging prioritization program received instructions to prioritize messages that are delivered to subscriber messaging engine . In the depicted embodiment messages from Topic A A i.e. messages and are placed in destination stream to be delivered before messages received from Topic B B i.e. messages and . Each set of messages coming from a single topic are ordered for example in the order in which they were published.

Application server computer includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Subscriber messaging engine and message prioritization program are stored in persistent storage for execution and or access by one or more of the respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including application server computers . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Subscriber messaging engine and message prioritization program may be downloaded to persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to application server computer . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. subscriber messaging engine and message prioritization program can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s also connect to a display . Display provides a mechanism to display data to a user and may be for example a computer monitor or an incorporated display screen such as is used in tablet computers and smart phones.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

