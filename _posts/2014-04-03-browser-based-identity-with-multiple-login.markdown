---

title: Browser based identity with multiple login
abstract: A system provides a graphical user interface element in a browser. The browser provides multiple different identities for the browser, each of the multiple different identities associated with a different user, each of the multiple different identities being associated with a plurality of accounts. Upon receiving a selection of the graphical user interface element from a first user, the system matches the first user with a first identity that is stored by the browser and associated with the first user. Upon receiving a second selection of the graphical user interface element from a second user, the system matches the second user with a second identity that is stored by the browser and associated with the second user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369284&OS=09369284&RS=09369284
owner: Google Inc.
number: 09369284
owner_city: Mountain View
owner_country: US
publication_date: 20140403
---
This disclosure generally relates to web browser technology and in particular to an identity mechanism for a web browser.

A web browser may maintain an identity and authenticate the identity to a server. Yet there is no system to provide a common identity across different web applications or a different identity for multiple users of a web application that can be easily accessed via the web browser. Each time a user accesses a different web application web service or website the user may have to login separately. Moreover a user may have multiple accounts for various third party websites where the websites are each managed separately. For example a bank website a social media service website and photo editing website may all be managed by separate companies or entities each of the companies or entities being unrelated to the browser i.e. the websites may be considered as third parties . Each third party website may not wish to trust a browser alone to authenticate a user. Instead each third party website may have its own authentication methods for a user. Yet it can prove very difficult for multiple users to maintain different usernames and passwords and to have to login so many times to various different websites or web applications. Moreover multiple users may wish to use the same computer but each user may have different credentials for each website or web application. Accordingly a need exists for systems and methods to address the shortfalls of present technology and to provide other new and innovative features.

A method includes providing a graphical user interface element in a browser wherein the browser provides multiple different identities for the browser each of the multiple different identities associated with a different user each of the multiple different identities being associated with a plurality of accounts upon receiving a selection of the graphical user interface element from a first user matching the first user with a first identity that is stored by the browser and associated with the first user and upon receiving a second selection of the graphical user interface element from a second user matching the second user with a second identity that is stored by the browser and associated with the second user.

Other implementations of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

In various implementations the method includes automatically syncing data associated with the first identity among multiple computing devices associated with the first identity. In some implementations the method includes using the first identity to obtain a token from a web application associated with the browser and authenticating the first user to the web application using the token. In some implementations the web application is precompiled and executed directly by a processor of the computing device using a browser based runtime environment. In some implementations the web application is coded using browser based language. At least some of the accounts may be associated with third party website services.

According to another general aspect a method includes providing a graphical user interface element in a chrome frame of a browser wherein the browser provides multiple different identities for the browser each of the multiple identities associated with a different user upon receiving a selection of the graphical user interface element from a first user matching the first user with a single identity that is stored by the browser and associated with the first user using the single identity to obtain a token from a web application associated with the browser and authenticating the first user to the web application using the token. Other implementations of this aspect include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

In some implementations the method includes automatically syncing the single identity among multiple computing devices associated with the identity of the first user. In some implementations the method includes storing the token in association with the single identity. In some implementations the graphical user interface element provides an option for the first user to associate an account with the single identity. In some implementations the single identity is associated with multiple accounts for the first user at least some of the multiple accounts being associated with third party web services. In some implementations the graphical user interface element provides an option for a second user to access a second identity associated with the browser. In some implementations the second identity includes multiple accounts for the second user.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

A web browser such as browser application is executed by a client device and can receive code e.g. HTML code from a remote server e.g. a remote server that hosts a website and can execute the received code on the client device for the benefit of a user of the client device. In various implementations the browser application may be associated with one or more web applications e.g. web applications . Web applications can be hosted applications or packaged applications. As used herein hosted applications may include at least a portion of a website that itself includes web pages. Some web applications may also include metadata that may be especially pertinent to the web application or to the user of the web application to allow the web application to perform some particular functionality for the user. Packaged applications can be thought of as web applications whose code is bundled so that the user can download all of the content of the web application for execution by the browser. A packaged web application may not need to have network access to perform its functionality for the user and rather may be executed successfully by the browser locally on the computing device without access to a network. Packaged web applications have the option of using Extension APIs allowing packaged applications to change the way the browser behaves or looks. In various implementations a web browser may include or be configured to interact with one or more browser extensions. In this context a browser extension may include one or more web pages packaged or grouped together as a definable whole and configured to extend the functionality to the web browser. Browser extensions may be webpages and may use all application programming interfaces APIs that the browser application provides to web pages. A browser extension may include HTML CSS JAVASCRIPT images other types of files and web related computer languages and code. Thus browser extensions also provide extra functionality to a browser but generally unlike web applications there is little or no user interface component to the functionality provided by a browser extension. Instead browser extensions extend the functionality of the browser and the websites being viewed in it. For example browser extensions can extend the functionality of the browser by adding a new button to the address bar such as an ever present currency converter. Buttons like this can also apply to the current website being viewed for example clicking the currency converter button can convert all prices on the website presented to a user into a currency chosen by the user. In another example an extension can be installed so that when a user hovers a cursor over a thumbnail image on a webpage executed by a browser a larger size version of the image is displayed until the user moves the cursor away from the image. In another example an extension may be installed to embed a mail this button next to every link in every page. Compared to web applications extensions cut across websites and web applications. Extensions may be in effect across all websites though some are site specific . Web applications may not combine with other applications in this way. Rather web applications generally run standalone like any regular website. Web applications may be coded using browser based language. For example web applications may be coded using HTML CSS or JAVASCRIPT as examples.

A platform application such as the platform application shown in may be downloaded from a marketplace server via a web browser such as a browser application and may be installed on computer system . The platform application may operate using a runtime . The platform application may be configured to be executed directly by a processor e.g. microprocessor of the computer system using the runtime for example. Because the platform application is coded with web technologies no compilation step is required. Instead the platform application may simply be packaged e.g. in a .CRX format or zipped for example with some signature or verification and provided the computer system for example the browser application from a digital marketplace or other remote server. The runtime may accept the platform application as a packaged file e.g. .CRX files and then execute platform application . The platform application may load locally so that it is less dependent on a network than a web application such as the web application . The runtime may be an environment that operates above a native O S and that uses a multi process architecture. Thus if one platform application crashes a user will not lose other platform applications that are simultaneously also running via runtime . Each application operates as a new process on the runtime . The runtime may act as an intermediary environment that allows a platform application to run on any computing device using any operating system as long as the runtime is installed on the computing device such as the computer system . The runtime may allow the platform application to appear as if it is a native application while the platform application is not actually being executed through the O S but still may be able to access portions of the O S . The runtime may also in some implementations be utilized to execute the browser application.

Examples of web applications include email applications calendars photo editing applications games or banking applications. One or more web applications may require some form of authentication to use the web application for personal use. For example a user that accesses a banking web application may need to login or otherwise authenticate himself to access his personal bank account information.

Users may wish to avoid having to re login or re authenticate themselves to websites web applications with every instance of opening the application or accessing the website. Each single user may have a corresponding single identity such as identity or . Each identity may be unique to a single person and may correspond with a table or other data structure that is automatically generated or stored by a system such as a server. The identity may be unique to a single person and may represent a string or other unique identifier such as ABCSMITH18 as an example. Each real person has one identity although each person may have multiple accounts or profiles such as accounts for different personal use businesses or side businesses . Each different account can be associated with different websites or information available on the website. For example if John accesses a document editing web service when logged in as john work.com he may receive different information such as different work documents including memos than when John accesses the same document editing web service when John is logged in as john mail.com where he might see all of his personal documents such as grocery lists.

In various implementations each single identity may be associated with multiple accounts or personas. An account may be a personal record including at least one identifier and data that is associated with a particular web application or website. Examples of accounts include bank accounts email accounts or photo editing accounts. As an example an e mail web application account may include at least one identifier such as a username and or password and data that is associated with the e mail web application such as messages. As another example a banking web application account may include at least one identifier such as a username and or password and data that is associated with the banking web application such as a checking account balance a savings account balance transactions messages between a customer and a bank and deposits. As yet another example a photo editing web application account may include at least one identifier such as a username and or password and data that is associated with the photo editing web application such as photos and metadata for each of the photos.

In some implementations each identity may include multiple accounts per website such as a personal business and family account for an e mail service or a shopping website . For example the identity is associated with accounts and . The identity is associated with account . The identity is associated with account . Each account may include an e mail account corresponding to a separate e mail address for a certain e mail provider or website for example or each account may correspond to a separate third party account. For example a user Anne may have the identity which may be as an example a string Anne Smith. Anne s accounts may include a first account for Anne s email account corresponding to an e mail web application hosted by the domain example.com and having the example email address anne example.com Anne s accounts may also include a second account for Anne s extra email account corresponding to the same example email web application example.com and having the email address happy example.com Anne s accounts may also include a third account corresponding to a social media web application social.com and having a login email address of anne social.com.

In various implementations a web application such as the email web application hosted by example.com may generate at least one token for example upon request by a browser application as described in more detail below. The system may use token which may be an alphanumeric string that is created by the web application. The browser application may store the token . When the user visits the web application or website a second or future time the website sends a request to the browser application for the token . Upon receipt of the token the website determines that the token is valid. If the token is valid the website generates a cookie . In some implementations the website may generate or provide a token only if the website requests the browser application to prompt the user e.g. via a graphical user interface element such as a pop up window or other request to determine if the user wants to save the account and if the user agrees to save the account in response to the prompt. Such an implementation may avoid a website setting a permanent credential that could be used to identify a user s other devices without previous permission from the user.

The browser application may not need to parse the token interpret the token or interact with the token . The browser application may store the token in association with the appropriate identity and user account such as the account . The browser application may expose the token to the web application when a user visits the web application again. The web application may recognize and interpret the token because the web application previously generated the token . The tokens in some implementations may be synced between the computer system at least one other device and the tokens can be used to generate cookies on the at least one other device.

In various implementations a system such as the browser application may request user credentials to login to a single identity on the browser application . If two users share a device such as the computer system one user cannot access the other user s accounts without authorization. Thus a user may log in to the browser application to access their identity .

Each account may be associated with one or more tokens . The tokens may be generated by a web application and provided to the browser application . A token may operate as an authentication credential used by a web application or a platform application . A token may be for example a randomly generated string of alphanumeric characters. Examples of tokens are cookies and OAuth tokens. In one example the browser application may allow a website save an identity as a token and specify a field in the token which may be a cookie that designates the token as an account level cookie that could be trusted more than regular cookies. The token may live longer and may be synced among a user s devices. In such an example a website could make minimal changes to existing logic and treat cookies with such an account level field as long lived cookies. In other implementations the browser application may allow a website to save a token as separate from the browser application s cookie jar. In some cases the token itself is sufficient to access a web service. In other cases the token may be a refresh token which may be used to produce or mint other short lived tokens or cookies. The short lived tokens or cookies may correspond to less valuable credentials that are used more widely by a user. In such an example a website may have the browser application save a separate token . When the user returns to the website the website may produce shorter lived cookies if the browser application presents the token . In such an implementation the website would request or check for a token from the browser application before asking a user to sign in to the website. The website may issue new cookies if older cookies expire.

A developer of a web application may be comfortable sharing the token across multiple devices. The web application may store a token with the browser application . The web application may generate the token for example based on an account associated with the identity . The browser application receive the token from the web application or platform application . The browser application or computer system may store the token locally or remotely. The system may use the token to provide a user with automatic access to the web application or platform application without requiring a user to re enter login credentials e.g. user name and password with each access attempt. Indeed a user may no longer be required to enter or provide any user name or password for the web application and instead the browser may expose the token to the web application which authenticates the token and in doing so authenticates the user to the web application. The token may be for example a security feature used to prove an identity electronically for example by a user wishing to access a bank account web application without having to enter secure credentials each time the user access the account bank web application. The token may serve as proof for a user s identity to the web application. In some implementations the token may store a digital signature which may be made with a private key by the web application authorized to make the signature.

Methods and systems provide convenience for users while maintaining security for user identities online. For example a user may include certain payment information in a user specific account cache of information that is stored on a client device so that if the user chooses to subscribe to a monthly subscription for online television viewing using a trusted web application the browser may expose a token or a cookie generated using the token to the web application the token having been generated by the web application. The token may automatically authorize the web application with the user s consent to charge the user s account a monthly subscription fee via the browser without requiring the user to re enter complex payment information for example into a complicated credit card authorization form or bank routing form. For example a user may enter account details once into a web application which in turn may store the account details. The web application may provide a token to a browser application used by the user and the browser application may expose the token to the web application the next time the user attempts to access the web application. The web application may then have permission to use the stored account information without requiring user re entry of the information or of other password or credential information into the browser or into the web application.

Methods and systems described here also provide a way for multiple users to have multiple logins to a browser application operating on one or more computer systems. Each of the users may have a single identity but the single identity may be associated with any number of accounts of the user each account being related to an e mail address third party application or web service as examples.

The area may include a graphical user interface element which in this example includes a sign in drop down menu option. Other implementations may include graphical user interface elements such as element in other areas of the user interface such as in the webpage as an example.

In various implementations a use may open a new account on a website without having to provide a user name and password. In such a case the website can prompt the user to open an account. The website may inform the user that the user does not have to enter a password to enter the website so long as the user is logged into his identity e.g. via the browser application when he visits the website.

In certain implementations the browser application can provide an identity service so that user specific account information such as email address login bank routing information game credentials or other information can be stored in conjunction with an identity of the user and associated with the browser and then automatically provided to web applications that have permission to access the user specific information. In this manner a user may grant permission to a web application once to access such user specific account information and then may not need to manually provide or authorize the provision of such account information such as bank routing information when the user is using the web application in the future from the same browser application. Moreover multiple users that access the same browser may login to their identities to utilize their account information via the same browser. Thus a user can store user specific identities including account information and then may allow the information to be used by certain web applications that have been granted permission to access the information but not allow the information to be used by other websites or web applications that do not have explicit permission to access the user specific account information. In this manner a web application can be utilized to the user s advantage because the user may not want to share his user specific account information with any random website that he visits but may find it advantageous to be able to easily provide such information to web applications that are installed on one or more local client computing devices that execute a browser that stores the user s identity.

In some implementations the user may access the various services by logging into multiple different accounts associated with the different services. For example the user may log in to an account associated with the user s online e mail account the user s online social network account the user s online photo account or accounts at content websites e.g. news websites game websites entertainment websites etc. etc. A sync server may ensure that local data from a computing device e.g. the computer system shown in is synced across all of a user s devices or all devices that are used to log the user into the single identity. For example the sync server may sync at least one token such as the token in with another user device. Further a sync server may sync across different devices all installed web applications browser extensions browser bookmarks settings profiles browser history themes plugins local permissions user specific account information tokens and data associated with the web applications and browser extensions for a user. For example if a user of the computer system accesses the identity for example via a browser application from computer system the sync server may copy settings and data associated with web applications for example that the user has selected to sync from the user account to another device such as a phone. Changes to settings on one computing device may be automatically copied e.g. via sync server from other computers for example if the user has enabled that sync feature . Synced data may be encrypted when it travels between computing devices and sync server to keep information secure.

In various implementations the identities and including the accounts and and associated data such as login credentials or tokens associated with the accounts can be permanently stored in a secure manner within a nonvolatile memory e.g. memory and then loaded when the user successfully logs into the browser application .

In another implementation user specific identity information can be permanently stored in a memory device of an online server. Then when the user logs into an account associated with a service provided by the online server the user specific identity can be downloaded from the online server to a cache of the computer system for use by the browser application with permission from a user. The identity can be downloaded using secure encryption techniques to protect the information while it is being downloaded.

The browser application can be associated with identity information for different users. For example different users may provide login information through a user interface provided by the browser as discussed in more detail below with respect to so that the browser to can retrieve and cache the different user specific identities for the different users. Alternatively or additionally various users of the same client device e.g. a husband and wife using the same desktop computer may create and maintain separate identity profiles having separate identity information yet may allow each other permission to use their identities.

Web applications can use user specific identity information in a variety of ways. For example a web application may provide user specific content to the user through the web application where the user specific content is based on the user s specific identity information that is provided by the browser to the web application. The user specific content can be content that is specially selected based on the user s interests demographics location or other such user specific identity information.

A browser can be shared by multiple users and each user may have different accounts associated with a single identity. Thus when different users login to the browser and launch the an e mail web application within the browser the application may provide different user specific content to each of the different users based on the account information pulled by the web application from the browser for each of the different users without the user having to take any additional steps e.g. login enter passwords etc. after logging into the browser other than launching the web application.

The identity is not provided to the web application or to other websites thus providing security for user identities online. A message encrypted with the user s account information such as information about account however may be provided to web applications or to other websites with the user s consent thus eliminating the need for the user to re enter personal identity information such as name login or even financial information each time the user wishes to access a different web application using the application . For example system may provide a cookie to the web application.

The web application may receive a token from the web application in response to providing account information for example the first time the web application receives the account information. The token may be a secure unique key or an alphanumeric string. The web application may use the token to automatically authenticate the user to the web application eliminating the need for the user to continually re authenticate himself to different web applications each time the user wishes to access a web application using the application . In some cases the system may generate a cookie using the token . In various implementations each web application may provide a separate token to the application at least once. The tokens may be stored natively for example in a memory of a computing device executing the application or may in some implementations be stored remotely for example at a server. In some implementations the tokens may be machine independent and may be synced among multiple computing devices associated with the identity . For example when a user logs into a separate computer system and visits a website the system may expose a token to the website via the second device based on the user s identity and in some cases the user may be automatically logged into the website.

In various implementations if a cookie expires the application may generate a new cookie using the token . In some cases the application may return to the web application and expose the corresponding token to the web application to retrieve a new token to from the web application . The application may generate a new cookie using the new token.

The application may thus utilize a user s identity to expose the identity to at least one web service such as a web application which may be a platform application obtain a token and use the token to authenticate the user to the web application. Account management may therefore happen at an application level such as at a browser level.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD Thin Film Transistor Liquid Crystal Display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provided in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provided as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone D80. It may also be implemented as part of a smart phone D82 personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described herein can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described herein can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described herein can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other embodiments are within the scope of the following claims.

