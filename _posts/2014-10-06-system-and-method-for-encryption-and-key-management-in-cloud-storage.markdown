---

title: System and method for encryption and key management in cloud storage
abstract: A cloud storage system includes an encryption server configured to encrypt a plurality of data by using encryption keys having a hierarchy, the hierarchy of encryption keys corresponding to a relationship among the plurality of encrypted data, and a cloud storage server configured to store the plurality of encrypted data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465947&OS=09465947&RS=09465947
owner: SAMSUNG SDS AMERICA, INC.
number: 09465947
owner_city: Ridgefield Park
owner_country: US
publication_date: 20141006
---
This application claims the benefit of U.S. Provisional Application No. 61 862 228 in the U.S. Patent and Trademark Office the disclosures of which are incorporated herein by reference in their entireties.

Systems and methods consistent with exemplary embodiments relate to encryption and key management in a cloud storage.

As the use of cloud based storage and file sharing becomes more widespread ensuring security and privacy in uploading and or downloading data while also reducing cost to end consumers and enterprises has become gradually more important. One tool for decreasing cost is increasing server and space utilization rate through virtualization and introducing multi tenancy in the cloud service i.e. offering a public cloud . However when a plurality of users exchange and share data in the public cloud the demand for technology for securely delivering data between the users has gradually increased.

Secure sockets layer SSL is primarily used to encrypt data sent over the public cloud. However using SSL a terminal manages a separate certificate for issuing a private key thereby imposing a burden for certificate management on the terminal. Also safety in a key issuance process may not be ensured. In particular when a large number of files are shared among a plurality of users key management may become complicated. Moreover efficiency of a cloud storage may be reduced since the same data may be encrypted multiple times with different encryption keys due to multiple users. Not only this sets bigger strain on computing resources but also when same data is encrypted with different keys it produces different encrypted files which hinders the operation of de duplication systems that aim to reduce storage.

One or more exemplary embodiments provide a file storage system in which data is encrypted for a user according to a key hierarchy where relationship among the keys is mapped to relationships among access policies.

One or more exemplary embodiments also provide a stateless encryption server that may simply receive encryption keys or parameters for calculation of encryption keys from outside.

One or more exemplary embodiments further provide a key management system separate from a cloud storage service.

According to an aspect of an exemplary embodiment a file storage system which stores objects in an encrypted format at a storage server and controls each user s access to objects through controlling access to decryption keys is provided.

In the file storage system when required by access policies objects may be encrypted by an encryption server using content encryption keys CEKs . The content encryption keys may be generated based on a key hierarchy and are accessible to the encryption server. The content encryption keys may be generated outside of the encryption server. A relationship between one content encryption key and other content encryption keys in the key hierarchy may be mapped to a relationship between objects being encrypted. The relationship between the objects being encrypted may correspond to a relationship between access policies or file directories within which the objects being encrypted reside. In an exemplary embodiment the same content encryption key may be used for the objects being encrypted which belong to the same file directory in which all the files therein have the same access policy. Thus the same content encryption key may be used for encryption of more than one object. Also the content encryption key may be used by more than one user of the same object. In this manner the burden of key management as well as file storage may be reduced.

The content encryption key may be delivered to a user in an encrypted form using a key encryption key KEK which belongs to at least one from among a unique user and a pre defined group.

The key encryption key may be one of a Rivest Shaman Adleman RSA public key an identification ID based cryptography IBC public key a symmetric key and the key encryption key may be delivered through a secure channel to the user.

The IBC key encryption key may be delivered to the user possibly through use of a secure channel following a user authentication process.

The authentication service may be provided by a standalone possibly not provided by cloud storage service authentication server issuing authentication tokens for use by at least of one the user a license server and a private key generator server. The authentication service may be part of the identity management system belonging to the organization enterprise that is using the cloud storage service.

The license server ticket may be used by the private key generator server to authenticate the user before delivering the key encryption key or the IBC private key .

The license server ticket may include a function of a user credential that the user uses for authentication to the private key generator server.

The user may be at least one from among an identifiable individual having for example a role within an organization and a software application requiring access to an object. An access policy may be specified based on at least one from among the user s role within a circle a relationship between objects to be encrypted a file directory structure and a sensitivity level of an object.

The content encryption keys may be generated in a stateless manner based on a set of key derivation instructions that are receivable by the encryption server.

The key derivation instructions may include information on how to obtain key derivation information including at least one from among a set of a root key a key derivation function auxiliary information and a key derivation policy.

The information on how to obtain key derivation information may be stored at a resource whose location is conveyed to the encryption server through a uniform resource identifier URI which may be accessed by the encryption server along with a representational state transfer REST instruction such as a Hypertext Transfer Protocol Secure HTTP HTTPS request.

A unique signature of each encrypted file may be created and used in storage de duplication algorithm. The same content encryption key may be used for the same object regardless of the user which may improve efficiency of signature creation and the de duplication algorithm.

The content encryption key may be a temporary key whose life time is specified as part of key derivation mechanism and life time information may be stored as metadata at the storage system which upon expiry of the key may initiate at least of one an alert actions to renew the key and actions to re encrypt data with new keys.

The storage system may not have access to the content encryption key and the key encryption key and may store files only in an encrypted form.

An initial owner of the object may contact the storage system using a REST request provide at least one from among the object key derivation information and object policy group information.

Although exemplary embodiments will be described in detail below with reference to the accompanying drawings the present disclosure is not limited thereto.

In the following description well known technology related to the exemplary embodiments is not described in detail in order to keep the disclosure clear and concise. Terms used herein have been chosen in consideration of functionality of the exemplary embodiments and may vary depending on a user s or an operator s intentions or customs in the art. Therefore the meanings of terms should be interpreted based on the overall context of the present specification.

Herein the term content is used to refer any types of files image files videos audios etc. In order to refer to an individual piece of content the term object may be used.

The term user is used to refer to a person or an application which attempts to access data in cloud storage. The person may belong to or include a plurality of individuals for example in a circle of friends a team within an organization a department human resource HR accounting research and development R D . An application may include for example an email application a procurement or customer relationship management CRM application. An application may be a part of for example circles of applications that have the same access policy with respect to the content. For example financial and or accounting application may have access to employee salary data files while email and or instant messaging and or web conferencing application may have access to employee emails phone number data files etc. The access policy for an application may be defined based on a function of the application users and or security capability in dealing with the content.

Referring to a cloud based storage system according to an exemplary embodiment includes an encryption provider an authentication server a license server a cloud storage server a first terminal and a second terminal .

A user of the first terminal may store data in the cloud storage server to be used by the user or shared with another user e.g. a user of the second terminal . To do so the first terminal may establish a secure link e.g. an Hypertext Transfer Protocol Secure HTTPS link that is protected with a secure sockets layer SSL with the encryption server and send the data which the user of the first terminal wants to store on the cloud to the encryption server to be encrypted. In this case the first terminal may contact a uniform resource identifier URI of the cloud storage server through an HTTP session and this session may be redirected to the encryption server . Here the encryption server may be operated by a security provider distinct from a cloud provider.

The encryption server encrypts the data transmitted from the first terminal . The encryption server performs encryption according to for example a predefined access control policy i.e. an access policy of the user and or the cloud provider. In an exemplary embodiment the access policy of the user may be based on a key hierarchy corresponding to e.g. mapped to a directory structure of the data in the cloud storage server which will be described in detail below with reference to .

Referring to according to an exemplary embodiment data stored in the cloud storage server may have a directory structure for files including a root node first level directories D i.e. directories D D and D under the root node second level directories D i.e. directories D D and D under the first level directories D and third level directories D i.e. directories D D and D under the second level directories D.

Generally a group of objects and or files that are encrypted using the same content encryption key CEK may be referred to as a homogeneous policy group HPG . In the present exemplary embodiment an HPG is based on the directory structure. Specifically a lowest level directory is a directory within which all the files are governed by the same access control policy e.g. a directory in which all files belong to the same project to be accessed only by team members of that project . In other words if a user is authorized to see one of the files in this directory the user can see all of the files within the directory. This allows the encryption system to encrypt all files within the directory with the same key Kdir mapped to the directory while allowing authentication and licensing systems to handle access control and key management for all of the files within the directory in a similar homogenous fashion. This directory level may be referred to as a homogenous level directory HLD .

For example referring to all the files in the third level directory D may be controlled by a same access control policy. In other words when a user is authorized to see one of files file file or file in the third level directory D the user may see all the files file file and file within the third level directory D. Therefore all the files within the same directory may be encrypted with the same key i.e. content encryption key Kdir. In this case a key management process may employ a key hierarchy corresponding to or mapped to the directory structure. That is all the files within the directory may be controlled by a similar homogenous key management scheme or policy. For example a content encryption key Kdir for encrypting the entire directory may be generated by using a root key Kr that is generated or obtained as a unique key for encrypting the root node a path to the directory and a key derivation policy of the user as will be described in further detail below.

The encryption method using a key hierarchy according to the present exemplary embodiment may be implemented by the cloud based storage system in a case where a plurality of users access the files based on pre defined access control policies. Furthermore regardless of which user is using the data as long as the data is linked to a directory the file is encrypted with the same algorithm and the same encryption key as other data stored in the same directory. That is the encrypted data in the same directory has a unique signature such that even when the data is stored by a plurality of users all copies of the data may be effectively detected by a de duplication algorithm implemented by the cloud storage server . Therefore de duplication may be performed with improved efficiency.

The access control policies in are different from that shown in in that files within a directory may be controlled by different policies. That is file and file of the third level directory are controlled by policy while file is controlled by policy . Thus files in the same directory may be encrypted in a different fashion according to for example an encryption policy field in the metadata for the file. In this case a content encryption key Kfile for encrypting a specific file within the directory may be generated by using the encryption key Kdir for encrypting the corresponding directory and a policy which controls the specific file.

Although it is described above that access control is performed based on access policies corresponding to a directory structure one or more other exemplary embodiments are not limited thereto. For example in an exemplary embodiment a plurality of objects and or files located in different directories may be covered under the same policy. In this case the plurality of objects and or files may be encrypted with the same key. For example an enterprise may store files in the cloud storage server and allow employees customers and business partners of the enterprise to access the files based on the pre defined access control policy.

Referring now back to the encryption server may obtain a content encryption key in a stateless manner. For example the encryption server may receive the access policy in a form of a key derivation policy using a representational state transfer REST based instruction. In this case the first terminal may build a representational state transfer REST request that includes a URI reference to a resource for key derivation information including at least one of the key derivation policy the root key Kr and a key derivation function. According to another exemplary embodiment the encryption server may obtain the content encryption key in a stateless manner by receiving the key derivation function and implementing the key derivation function on a root key stored by the encryption server . The key derivation function is a cryptographic function on parameters of the key derivation information. The resource indicated by the URI may also include other information such as a corresponding directory path or a policy group to which the data belongs to and authorization parameters of the user. For example the user s authorization parameters may be defined by the homogeneous policy group. The key derivation information may be stored at the license server and the encryption server may obtain the key derivation information by connecting to the license server . Based on the received key derivation information the encryption server determines e.g. generates obtains etc. the content encryption key for the content. The content encryption key may be used in a designated cryptography algorithm which may be an advanced encryption standard AES 128 in an exemplary embodiment. Here an interface between the encryption server and the license server may be provided to fetch the resource. The interface may be protected using Internet protocol security IPsec or using SSL.

The key derivation information may further include auxiliary information such as for example a validity period a group name for restricting access control to a particular group of users and a policy ID URI for locating a specific policy document or an encryption policy field that is part of metadata generated for the file and used for re creation of the content encryption key CEK for decryption of encrypted objects . The validity period is a parameter that allows the license server to rotate encryption keys on a predetermined period or when necessary. For example the encryption key may be changed every month or whenever the encryption key is released to reduce the probability of piracy. The validity period may be provided with respect to a directory of data stored at the cloud storage server . The cloud storage server may set an alarm for the encryption server and the license server to inform the encryption server and the license server of an upcoming expiration of a validity period. When the validity period expires all files within the corresponding directory may be re encrypted with a new encryption key. In this case the cloud storage server may send data in the corresponding directory to the encryption server for re encryption. In this manner the cloud storage server may avoid liability for privacy issues regarding stored data. When the data is re encrypted the second terminal may be authenticated again by the authentication server and receive a public key with respect to the renewed encryption key.

By way of example the content encryption key Kdir may be obtained according to the following equation 1 dir KDF root path KDF Auxiliary information Equation 1 

where KDF key derivation function is a cryptographic function that is used on the parameters inside the parentheses Kroot is the root key e.g. that is generated as a unique key at top of key hierarchy for each enterprise organization path is the directory path e.g. c projects cloud project security architecture and KDF auxiliary information e.g. other information includes any other parameters that may be included in key derivation examples of which are described above .

After performing encryption the encryption server sends the encrypted data along with corresponding metadata to the cloud storage server . The cloud storage server stores the encrypted data along with the metadata in a particular location based on the provided metadata which may include an encryption policy field.

In the present exemplary embodiment the encryption server may be operated by a security provider. However it is understood that one or more other exemplary embodiments are not limited thereto and the encryption server may be operated by for example the cloud provider.

The authentication server is a server for performing user authentication of a user of the second terminal or the second terminal which attempts to access data stored by the user of the first terminal or the first terminal in the cloud storage server . In an exemplary embodiment the authentication server may include an ID and a password of the user of the second terminal and authenticate the second terminal through for example a password authentication algorithm inside an HTTPS where a user ID and a password is asserted inside an SSL tunnel. Alternatively the authentication may be performed by using any other type of user authentication mechanism e.g. Extended Authentication Protocol Tunneled Transport Layer Security EAP TTLS or Microsoft CHAP version 2 MS CHAP2 . When the user is an enterprise user the authentication may be performed according to a security policy of the enterprise.

When the user of the second terminal is authenticated the authentication server provides an authentication token Auth token including a user ID to the license server . Auth token LS KAS LS AS ID Nonce User ID PSWD validity AS signature Equation 2 

where the nonce is a parameter that can be used to avoid replay attacks. For example the nonce may be a random number or a time stamp pertaining to the time when the user was authenticated. f PSWD indicates a function of the user s password. The function can be a one way cryptographic hash function that avoids revealing of the password. According to another exemplary embodiment the authentication token Auth token may include a user s password instead of the function of the user s password e.g. when the password is not to remain private to the user and hidden from the license server .

The authentication token Auth token may be encrypted by using a key shared between the authentication server and the license server . In an alternative embodiment the authentication token Auth token may not be encrypted when a secure channel is established between the authentication server and the license server . In this case the authentication token Auth token may include a signature performed by the authentication server on the token Auth token. By using the authentication token Auth token the license server may determine whether a user requesting a content from the cloud storage server is allowed or permitted to access the content.

According to another exemplary embodiment instead of generating the authentication token Auth token the authentication server may verify the authentication of the user to the license server through a secure channel between the authentication server and the license server .

When the user is an enterprise user the enterprise user may want to manage its own keys. In this case a dedicated encryption server may be configured with enterprise policies e.g. directory structure authorization policies etc. to apply encryption accordingly. For example the enterprise policies may have a hierarchy structure which maps corresponding access policies. According to an exemplary embodiment all the files within the same directory may have the same access policy. In this case the hierarchy structure of the enterprise policies may correspond to the directory structure.

When the encryption server is shared between a plurality of users for example when the encryption server is provided by the security provider or the cloud provider access policies may be communicated to the encryption server using a REST based instruction so that the encryption server obtains the content encryption keys in a stateless manner.

For example the encryption server may store and or receive the root key Kr and the key derivation policy KDP per user without a need for storing encryption keys for all levels of the file structure. The REST instruction may provide a URI where a resource is stored that has a representation XML JSON etc of the user s key derivation instruction including the root key Kr the key derivation policy KDP and a key derivation function KDF policy information file structure etc. Thus the encryption server may refer to the URI included in the REST based instructions from the user to locate a specific policy document. The encryption server may not store the root key Kr e.g. when the resource also provides information on the root key Kr. In this case according to an exemplary embodiment the root key Kr may be securely transferred to the encryption server when needed.

The license server determines whether the second terminal which requests the data stored in the cloud storage server is authorized to access the content based on a result of the authentication by the authentication server e.g. based on the authentication token Auth token provided from the authentication server . When it is determined that the second terminal is authorized to access the data the license server generates a license that allows the user to access the content. The license may include an encrypted content encryption key which is encrypted for transmitting to the user of the second terminal using a key encryption key that is unique to the user or a group of users to which the user belongs. In an exemplary embodiment identity based cryptography IBC may be used to encrypt the content encryption key. Thus only a user of the second terminal may be allowed to use the IBC public key. Furthermore the license may also include a ticket LS Ticket which may include a validity period an ID of the user etc. as will be described in greater detail below. Alternatively the ticket may use the authentication token Auth token issued by the authentication server . In this way the user s privacy may be protected.

By way of example the license server may generate the license according to the following equation 3 License EIBC Pub CEK LS Ticket. Equation 3 

Although it is described that the IBC may be used to encrypt the content encryption key it is understood that one or more other exemplary embodiments are not limited thereto. For example the content encryption key may be encrypted by using a Rivest Shaman Adleman RSA algorithm. In this case the license may be generated according to the following equation 4 License ERSA Pub CEK LS Ticket. Equation 4 

According to another exemplary embodiment the content encryption key may be encrypted by using symmetric AES algorithm. For example the license may be generated according to the following equation 5 License EAES   CEK LS Ticket. Equation 5 

The cloud based storage system may additionally include a private key generator see co located with or separate from the license server to provide a private key to a user terminal. The private key generator is entity that stores a number of system wide secrets within its secure storage e.g. a hardware security module HSM and calculates private keys for authorized users based on their identity ID and public key Pub . Thus users can refer to the private key generator and after proper assertion of their credentials receive a private key to decrypt anything that was sent to them in IBC encrypted format e.g. to decrypt the encrypted content encryption key .

The license server may issue a ticket to the private key generator according to the following equation 6 LS Ticket E KLS PKG LS ID Random User ID PSWD Auth token LS validity LS signature. Equation 6 

According to Equation 6 the ticket is encrypted with a key shared between the license server and the private key generator KLS PKG and includes an identity of license server LS ID and a random number Random that is shared out of band between the license server and the private key generator. In some cases both the license server and the private key generator are run by the same security provider while the authentication server is implemented by the enterprise. In these cases the KLS PKG may simply be a key that is internal to the license server private key generator housing.

The ticket also includes the User ID which is the same as the ID used in IBC and a copy of the form of password as used by the user to authenticate to the authentication system. Alternatively the ticket could simply use the Auth token as issued by the authentication server to preserve the user s and the enterprise s privacy

Depending on the channel between the license server and the private key generator the encryption E KLS PKG data may or may not be performed. For example if there is an IPsec VPN between the license server and the private key generator a signature may be performed by the authentication server on the token. The signature may either use a public key signature along with license server certificate or simply a symmetric key that is shared between the license server and the private key generator.

Later on when a user engages in a key exchange e.g. Isomorphisms for Password based Authenticated Key Exchange with the private key generator the user sends his or her password to the private key generator using an encryption key that is arrived as part of the key exchange. In this case the private key generator may be pre configured with user passwords or may be tightly integrated with the authentication server to verify the password sent by the user. In the present exemplary embodiment however the private key generator receives a copy of the password through the ticket issued by the license server and may not be pre configured with passwords or be tightly integrated with the enterprise IT system.

Once the key exchange is complete the private key generator delivers the private key to the user so that the user can decrypt the content encryption key delivered with the license from the license server and subsequently decrypt the data. The private key generator may authenticate the user using its private key generator certificates or using implicit knowledge of the user s private key.

In an exemplary embodiment the authentication server and the license server may be provided by the same entity e.g. a security provider. Additionally according to an exemplary embodiment the authentication server and the license server may be implemented in a single server. However it is understood that one or more other exemplary embodiments are not limited thereto. For example according to another exemplary embodiment the authentication server and the license server may be separate entities.

Referring to an ID based key management system according to an exemplary embodiment includes the authentication server the license server a private key generator a public parameter server the first terminal and the second terminal .

The key management system is configured to exchange a message packet through a network. In various exemplary embodiments the network is not limited to a particular type of network and all types of networks capable of packet communication such as a wired and or wireless Internet network and a mobile communication network may be included. In addition to prevent the intrusion of a malicious user etc. through the network the authentication server the license server the private key generator and the public parameter server may be protected through at least a firewall.

The authentication server is a server for performing user authentication on a user of the second terminal which attempts to access data stored in the cloud storage server . In an exemplary embodiment the authentication server may authenticate the second terminal through for example an ID based password authenticated key exchange i PAKE for a user of the second terminal . An authentication process by the authentication server will be further described below. In addition when the user of the second terminal is authenticated the authentication server sends a terminal ID or user ID to the license server . The authentication server may include a separate hardware security module HSM for authenticating an ID and a password of the user of the second terminal using i PAKE.

When the user ID is transmitted from the authentication server the license server generates a public key corresponding to the user ID. In an exemplary embodiment prior to generating the public key the license server may refer to the authentication token Auth token generated by the authentication server to determine whether the second terminal is authorized to access the content. When the second terminal is authorized the license server may generate the public key corresponding to for example the user ID when IBC is used . The exemplary embodiments are not limited thereto and may obtain the public key of the user of the second terminal from other means e.g. when RSA is used . The public key may be a key encryption key that is generated using an identity ID based cryptography IBC . In other words the public key is used to encrypt a content encryption key CEK and thereby create an encrypted version of CEK that is generated directly for the user of the second terminal . The user of second terminal then needs to obtain the private key corresponding to this public key in order to be able to decrypt the CEK and thereafter decrypt the encrypted object and consume the data.

The private key generator generates a private key corresponding to a user ID of the second terminal and provides the generated private key to the authentication server . Although it is described that the private key generator is connected to the license server such that the generated private key is provided to the second terminal through the license server it is understood that one or more other exemplary embodiments are not limited thereto. For example according to another exemplary embodiment the private key generator may directly transmit the generated private key to the terminal .

The public parameter server is a server which stores and manages public parameters used for encryption of the content encryption key by the license server when IBC encryption is used. A strength of encryption within the license server may be determined by a set of parameters provided by the public parameter server .

Referring to in operation a request for data stored in the cloud storage server is received from the second terminal . In operation the authentication server may perform authentication by using an ID and a password of the user of the second terminal . When the second terminal is authenticated by the authentication server the authentication server generates the authentication token Auth token including a user ID and transmits the authentication token Auth token to the license server . The authentication token Auth token may also include a user s password or a function of the user s password. The function of the user s password may be used when the password remains private to the user and hidden from the license server . The function may be a one way cryptographic hash function that avoids revealing of the password.

When the authentication token Auth token is received by the license server the license server may refer to the authentication token Auth token generated by the authentication server to determine whether the second terminal is authorized to access the content. When the second terminal is authorized the license server generates a public key for accessing the data based on the user ID in operation . In an exemplary embodiment the public key may be the key encryption key used to encrypt the content encryption key using an identity ID based cryptography IBC . Alternatively the content encryption key may be encrypted by using a Rivest Shaman Adleman RSA algorithm using a public key of the user of the second terminal. Still alternatively the content encryption key may be encrypted by using symmetric AES algorithm.

Additionally the license server may generate a ticket including the user ID and a copy of a form of password used by the second terminal to authenticate the authentication server . Alternatively the ticket may use the authentication token Auth token issued by the authentication server . In this way the user s privacy may be protected. Also since the password or a function of password is included in the ticket and transmitted to the private key generator the private key generator may not be pre configured with passwords or integrated with the authentication server to verify the password sent by the user. The ticket may also include metadata including for example a validity period.

In operation a private key is calculated based on the public key and or the metadata and transmitted to the second terminal . Specifically the private key generator generates the private key corresponding to the user ID by using the public key or the information within the Auth token or the information within the ticket of the license. Here the private key generator may refer to the authentication token Auth token generated by the authentication server to determine whether the second terminal is authorized to access the object by receiving private key from the private key generator . The second terminal may decrypt the data stored in the cloud storage server by using the private key.

Referring to first the second terminal requests data stored in the cloud storage server and receives encrypted data from the cloud storage server .

Next the second terminal is redirected to the authentication server to perform authentication . The authentication server performs user authentication of the second terminal using an ID and a password. When the second terminal is authenticated by the authentication server the authentication server transmits an authentication token to the license server and requests the license server to generate a ticket LS Ticket for accessing the data based on the user ID . Upon receiving a request the license server may refer to the authentication token Auth token generated by the authentication server to determine whether the second terminal is authorized to access the content. When the second terminal is authorized the license server generates a license including the public key and the ticket LS Ticket corresponding to the user ID. Next the license server transmits the ticket for accessing the data based on the user ID to the second terminal . In an exemplary embodiment the public key may be the key encryption key used for encryption of content encryption key where the public key is created using an identity ID based cryptography IBC . In other words the content encryption key is encrypted directly for the user of the second terminal . However it is understood that one or more other exemplary embodiments are not limited thereto and the content encryption key may be encrypted using an RSA public key or a symmetric key. When the private key generator receives a key request including the license from the second terminal the private key generator generates and transmits the private key to the second terminal .

As described above illustrates an exemplary embodiment in which all the files in a lowest level directory D D or D may be controlled by the same access control policy. In this case the authentication server and the license server may handle access control and key management respectively for all of the files within the directory in a similar homogenous fashion. Here a key management process may employ a key hierarchy corresponding to the directory structure. When the directories are controlled by different access control policies as shown in files objects etc. in the directories may be encrypted in a different fashion according to for example an encryption policy field in the metadata for the directory.

Referring to similar to the exemplary embodiment of the second terminal requests data stored in the cloud storage server receives encrypted data from the cloud storage server and is redirected to the authentication server to perform authentication . When the second terminal is authenticated by the authentication server the authentication server transmits an authentication token to the license server and requests the license server to generate a ticket LS Ticket for accessing the data based on the user ID . Based on the authentication token Auth token generated by the authentication server the license server determines whether the second terminal is authorized to access the content and when the second terminal is authorized the license server generates and transmits a license including a public key and the ticket LS Ticket corresponding to the user ID to the private key generator . Based on the license received from the license server the private key generator generates and transmits the private key to the second terminal .

One or more exemplary embodiments may include a computer readable recording medium having a program for performing methods described in the present specification on a computer. The computer readable recording medium may include a program command a local data file and a local data structure individually or in combination. The above described medium may be a medium specially designed and configured for the present disclosure or already known to and used for those skilled in the art of the computer software field. An example of the computer readable recording medium includes magnetic media such as a hard disk a floppy disk and a magnetic tape optical media such as a compact disc read only memory CD ROM and a digital versatile disc DVD a magneto optical medium such as a floppy disk and a hardware device specially formed to store and perform a program command such as a ROM a random access memory RAM and a flash memory. An example of the program command includes a high level language code that can be executed by a computer using an interpreter as well as a machine language code made by a compiler. Furthermore it is understood that any of the above described apparatuses servers devices etc. may include at least one hardware processor circuitry etc.

It should be understood that the exemplary embodiments described herein should be considered in a descriptive sense only and not for purposes of limitation. Descriptions of features or aspects within each embodiment should typically be considered as available for other similar features or aspects in other embodiments.

While one or more exemplary embodiments have been described with reference to the figures it will be understood by those of ordinary skill in the art that various changes in form and details may be made therein without departing from the spirit and scope of the exemplary embodiments as defined by the following claims.

