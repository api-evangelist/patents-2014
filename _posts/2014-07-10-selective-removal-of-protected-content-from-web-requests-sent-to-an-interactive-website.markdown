---

title: Selective removal of protected content from web requests sent to an interactive website
abstract: A method and apparatus for selectively removing a data element that triggers a policy violation from a web request to an interactive website. In one method, the method identifies a policy for protecting source data, having a plurality of data elements. The method further evaluates a web request sent to an interactive website as part of a web-based application, and determines that the web request includes at least one data element triggering a violation of the policy. The method determines the data boundaries of the web request, and selectively removes data content within the data boundaries containing the at least one data element that triggered the violation to allow the web request to be processed by the interactive website as if it were the original web request containing the at least one data element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118720&OS=09118720&RS=09118720
owner: SYMANTEC CORPORATION
number: 09118720
owner_city: Mountain View
owner_country: US
publication_date: 20140710
---
This application is a continuation of U.S. application Ser. No. 12 395 554 filed Feb. 27 2009 which claims the benefit of U.S. Provisional Application No. 61 098 207 filed Sep. 18 2008.

Embodiments of the invention relate to the field of processing data and more particularly to selectively removing protected content from web requests to interactive websites.

A modern organization typically maintains a data storage system to store and deliver records concerning various significant business aspects of the organization. Stored records may include data on customers or patients pricing contracts deliveries supplies employees manufacturing etc. A data storage system of an organization may utilize relational databases client server applications built on top of relational databases e.g. Oracle Microsoft Siebel SAP etc. object oriented databases object relational databases document stores and file systems that store table formatted data e.g. CSV files Microsoft Excel spreadsheet files etc. password systems single sign on systems etc.

A data storage system of an organization typically runs on a computer connected to a local area network LAN . This computer may be made accessible to the Internet via a firewall router or other packet switching devices. Although the connectivity of a storage system to the network provides for more efficient utilization of information maintained by the storage system it also poses security problems due to the highly sensitive nature of this information. In particular because access to the contents of the data storage system is essential to the job function of many employees in the organization there are many possible points of possible theft or accidental distribution of this information. Theft of information represents a significant business risk both in terms of the value of the intellectual property as well as the legal liabilities related to regulatory compliance. In order to prevent malicious and unintentional data breaches commercial and government regulations often impose restrictions on how confidential data may be stored the format of confidential data who can access that confidential data as well as whether confidential data may be transmitted e.g. by email . In order to comply with these regulations companies create policies to govern how confidential data is stored in the various applications in what format the confidential information is stored who can access that confidential data and to prevent transmission of confidential data.

Some conventional systems employ a blanket Data Loss Prevention DLP policy to accurately detect policy violations in information transfers of the protected data between one or more parties. The DLP policy includes conditions that define the information to be protected e.g. confidential information and an action that needs to be taken when any event matches this condition. The protected information can leave an organization through web operations such as using Hypertext Transfer Protocol HTTP or HTTPS requests or by file transfers such as using File Transfer Protocol FTP . The protected information can also leave an organization through other network protocols such as Simple Mail Transfer Protocol SMTP Transmission Control Protocol TCP etc. While the Internet has provided a platform for information sharing and communication it has also opened paths for confidential data to leave an organization in day to day activities on websites such as through webmail applications blogs and discussion groups. Loss of sensitive data through websites can be controlled by blocking the outgoing web request that triggers the DLP violation and sending notification back to a user as a response for this web request. This scheme may work fine for web requests sent to non interactive websites where the web requests are generated as a result of end user action. This conventional scheme however may be unfavorable for web requests sent to highly interactive websites e.g. Web 2.0 websites . For example the Web 2.0 websites allow users to do more than just retrieve information but can also provide Network as platform computing allowing users to run web based applications entirely through a web browser for example. Although sensitive data leaving an organization through websites can be blocked by conventional DLP solutions highly interactive interfaces as seen in highly interactive websites do not handle this block operation effectively and can lead to poor user experiences by making the web based interactive application unstable or even cause the web based application to crash. It is also hard to decipher application errors caused by the block operation. Creating customized responses for each Web 2.0 website for DLP purposes would be an arduous task which can easily become invalid once the website changes its underlying technology.

A method and apparatus for selectively removing a data element that triggers a policy violation from a web request to an interactive website. In one embodiment a computer implemented method identifies a policy for protecting source data having a plurality of data elements. The method further evaluates a web request sent to an interactive website as part of a web based application and determines that the web request includes at least one of the plurality of data elements triggering a violation of the policy. The method determines the data boundaries of the web request and selectively removes data content within the data boundaries containing the at least one data element that triggered the violation to allow the web request to be processed by the interactive website as if it were the original web request containing the at least one data element.

A method and apparatus for selectively removing a data element that triggers a policy violation from a web request sent to an interactive website. In one embodiment a data monitoring system DMS identifies a policy for protecting source data having a plurality of data elements. The DMS further evaluates a web request sent to an interactive website as part of a web based application and determines that the web request includes at least one of the data elements triggering a violation of the policy. The DMS determines the data boundaries of the web request and selectively removes data content within the data boundaries containing the at least one data element that triggered the violation to allow the web request to be processed by the interactive website as if it were the original web request containing the at least one data element.

As described above protected information can leave an organization through web operations using web requests e.g. HTTP HTTPS as well as other protocols for example sending webmail messages and publishing information on blogs discussion groups or the like. In order to prevent data loss occurrence one or more DLP engines e.g. DMS of are coupled with a proxy in an organization s network. End user web requests and corresponding responses can be routed to and from the Internet through the proxy which can be enabled in transparent or explicit mode of operation. These web requests are forwarded by the proxy to the DLP engines for DLP inspection. The DLP engines decide whether these web requests will go through be blocked or be modified as described herein.

As described above loss of sensitive data through websites can be controlled by blocking the outgoing web request that triggers the DLP violation and sending notification back to the requesting client as a response for this request. As described above this conventional scheme however may be unfavorable for web requests sent to highly interactive websites e.g. Web 2.0 websites . Instead of creating customized responses for each highly interactive website for DLP purposes the embodiments described herein are directed at selectively removing the data content that triggers the policy allowing the web request to be processed by the interactive website as if it were the original web request containing the violating data element s .

The embodiments described herein are directed to ensuring seamless interaction with these interactive websites as well as preventing data loss occurrence by selectively removing sensitive content from these web requests. Selectively removing content from requests may include two tasks 1 determining what content violates a policy and 2 intelligently removing the content. In one embodiment all requests undergoing DLP inspection can be processed by a content matching engine. This engine can determine whether a web request violated any policy and if it does what component attachment file uploads message body etc. of the request triggered this rule. The web requests that undergo selective content removal should look akin to the one that did not undergo content removal and should get processed by the destination server as if it were the original web request. Analyzing web request syntax can aid in determining different content boundaries which are captured in a request grammar using an expression language. Using the feedback from the content matching engine and the request grammar DLP engine can selectively remove content from appropriate data boundaries and set parameters e.g. the web request length appropriately so that the modified web request gets processed by the interactive website as is if it were the original request.

In the following description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing computing calculating determining displaying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The PMS is responsible for receiving parameters pertaining to policies such as pre configured template policies or customized policies and creating policies based on these policy parameters. In one embodiment the PMS receives the policy parameters via the policy definition graphical user interface GUI . In another embodiment the PMS receives the policy parameters from an Application Programming Interface API or via a configuration file formatted in text or a defined data format e.g. extensible markup language XML or binary format . The PMS may create policies based on regulations concerning handling of sensitive information maintained by an organization or based on corporate data governance rules. The regulations may include for example the Health Insurance Portability and Accountability Act HIPAA ensuring the confidentiality of electronic protected health information California Senate Bill 1 SB1 or Senate Bill 1386 SB1386 controlling customer information leaving the company and affiliates the Gramm Leach Bliley Financial Services Modernization Act controlling customer information leaving a financial institution the Cardholder Information Security Program CISP controlling handling of customer credit card information maintained by an organization or the like. In one embodiment the PMS may use policy templates or customized policies pre configured based on input provided by individuals familiar with the relevant regulations or corporate data governance rules.

The policy may include a set of rules that specify which information should be present in a web request to trigger a violation. The set of rules may provide specific conditions for triggering a violation such as inclusion of a keyword s or regular expression pattern in a web request such as for a webmail message a blog post or the like. For example the set of rules may require that a web request be modified if it contains fragments that match information from specific columns of any single row within the pre selected data. In some embodiments the action policy includes rules requiring a specific action if the web request contains a certain keyword s or an expression matching a certain regular expression pattern. In other embodiments the action policy may contain exception clauses that identify exceptions to this policy s rules such as specific web addresses of an interactive website or a specific web domain. The rules in the policy may be combined using logical connectives of first order logic e.g. AND OR NAND NOR NOT equivalent nonequivalent or the like . A web request is sent to an interactive website as part of a web based application. The web based applications may be applications that are accessed via a web browser over a network such as through the Internet or an intranet and can be run entirely through a web browser. Web based applications are popular due to the ubiquity of web browsers the convenience of using a web browser as a client and the ability to update and maintain web applications without distributing and installing the application on each individual client device. Common web based applications include webmail online retail sales online auctions wikis and the like. The web based application generates one or more web requests and sends the web requests to the interactive website.

The policy specifies source data that should be protected from unauthorized transmission access or any other use. In one embodiment the source data is stored in a tabular format e.g. data in a relational database data maintained by client server applications built on top of relational databases data in document and file systems that store table formatted data e.g. CSV files or Excel spreadsheet files etc. . In another embodiment the source data is stored in a non tabular format but convertible to a tabular format e.g. data stored as comma separated values in a flat file a password database or a single sign on system relational data in an object oriented database etc. . Alternatively the source data may not be convertible to a tabular format e.g. content of documents or files . The policy may also specify which elements of the source data should be included in a web request to trigger a policy violation. In one embodiment the PMS extracts copies of the source data and derives from that data an abstract data structure . The abstract data structure may be created periodically and sent or otherwise provided to the DMS along with the policy that is to be implemented.

In the depicted embodiment the DMS is responsible for monitoring web request based on the abstract data structure and policies to detect data elements of the source data that violate policies. A client device may communicate with an interactive website hosting a web based application through the Internet . The interactive website may be hosted by or served from the web server . In other embodiments the interactive website may be operated on another type of server than a web server as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure. When the client device accesses the web based application the web based application may start running on the client device interacting with the user of the client device and causing the web browser operating on the client device to send the web request and to receive the corresponding response through proxy . The web request may include user input such as free form text or form data. The proxy may be a dedicated proxy server or alternatively may be a proxy service operating on a device connected to the Internet . In one embodiment the DMS are coupled with the proxy for example within the same network e.g. LAN . In another embodiment the DMS resides external to the network in which the proxy resides. Alternatively other configurations are possible. The end user web requests can be routed to from the Internet through the proxy which can be enabled in a transparent mode or in an explicit mode of operation. The proxy intercepts the web requests and forwards each request to the DMS for DLP inspection as an original web request . The DMS decides whether the original web request should be forwarded to the web server as is be blocked or be modified. If the DMS decides to modify the original web request the DMS forwards the modified web request to the proxy which sends the modified request to the web server . If the DMS decides not to modify the original web request the DMS forwards the unmodified web request to the proxy which sends the unmodified request to the web server . If the DMS decides to block the original web request the DMS creates a response that contains the block notification message and sends it back to the proxy . The proxy on receiving this blocked response forwards it to the client device and drops the original web request meaning the proxy does not send this request to the web server .

As described above blocking the outgoing web request that triggers DLP violation may be unfavorable for highly interactive clients where many background web requests are performing different tasks and at times not in response to end user action. The DMS can selectively remove data content of the original web request that triggers the policy violation and send the modified web request avoiding instability in the web based application and crashes. Since the modified request has the format of the original web request the web request can be processed by the interactive website operating on the web server as if it were the original web request containing the data content that triggered the policy violation.

In another embodiment once the DMS has selectively removed the data content that triggers the policy violation the DMS may reevaluate the modified web request to validate that the data elements that triggered the violation have been successfully removed from the web request before sending it to the web server .

In one exemplary embodiment the source data includes data elements to be protected. For example the data elements such as an employee s name and corresponding social security number will be part of the source data stored in a database. The DMS in evaluating the web request detects the employee s name and social security number in the web request. In one embodiment once the DMS has detected a potential policy violation the DMS determines whether to allow the transfer of the web request modify the web request or block the web request. If a specific policy is violated the DMS can report the policy violation to an appropriate entity e.g. a manager database administrator a reporting system etc. or perform some other action. In one embodiment the DMS reports the policy violation by generating a policy violation report. When the DMS detects several policy violations in the web request each of the data elements triggering a violation can be selectively removed by the DMS and the DMS can report the policy violations individually or collectively. When the DMS determines that a web request being evaluated includes one or more tokens that violate a specific policy the DMS can selectively remove the tokens from the web request as described herein.

In exemplary embodiment the client device running a web based mail application on a web browser sends a webmail message to the interactive website operating on the web server over the Internet . In this embodiment a user logins into an email account in the web browser and composes a new message or replies to an existing message. The user may also attach one or more files as attachments to the webmail message using a file upload operation. The webmail message may contain sensitive information which is protected by a DLP policy. The client device generates a web request to send the webmail message to the interactive website. The client device passes the HTTP Post request through the corporate web proxy e.g. proxy . The web proxy redirects the POST request to the DMS for DLP inspection. The DMS evaluates the POST request for any sensitive information according to the policy and sends the response to the web proxy including the modified POST request in which the violating content has been selectively removed. The web proxy sends the modified POST request to the web server hosting the web based application of the interactive website. For example the webmail message may include sensitive information in the body of the webmail message and may include two attachments one attachment containing sensitive information and the other not containing sensitive information. The DMS can selectively remove the sensitive information in the body of the webmail message and replace the attachment containing sensitive information with a marker file. The DMS does not modify the second attachment that does not contain sensitive information i.e. keeps the second file as the original attachment . The DMS recomposes a modified web request without the selectively removed content and replaced attachment and passes the modified web request to the interactive website preventing a data loss occurrence. The interactive website processes the modified web request as if it were the original web request.

In another exemplary embodiment the client device sends a HTTPS POST request through the web proxy. This embodiment is similar to the one described above but the web proxy removes the Secure Sockets Layer SSL of the HTTPS POST request and redirects the HTTP POST request to the DMS . Upon receiving the modified POST request from the DMS the web proxy re encrypts the modified HTTP request from the DMS into HTTPS POST request and forwards the request to the interactive website through the Internet .

The data inductor is responsible for receiving the web requests sent to an interactive website. In one embodiment the data inductor has open communication channels with the proxy . The proxy intercepts the web request sent to the interactive website for example from a web browser operating on the client device and forwards the web request to the data inductor . Upon receiving the original web request the data inductor decomposes the web request in different components such as for example the HTTP Universal Resource Identifier URI HTTP headers HTTP Body which may be the webmail message body . Alternatively the data inductor can decompose the web request in different ways such as by creating key value pairs for headers creating an XML graph representation or the like.

The content extractor is responsible for extracting different data content within the component that can be further analyzed by the content matching engine . For example the content extractor can be used to extract data content of a web request that is not in plain text so that the text of the web request can be evaluated by the content matching engine . For example the content extractor can be used to extract text from an attachment file of the web request such as during a file upload operation. Also in the case of attached archive files e.g. zip tar etc the content extractor can extract content from each of the files in the archive. The content extractor can extract data content from various file types and create different components of the web request to be evaluated by the content matching engine .

The content matching engine is responsible for searching the data content of the web request for data elements from the source data based on the specific policy. Exemplary techniques to search web requests for table based source data will be discussed in more detail below in conjunction with B and C. It should be noted however that various other techniques can be used for searching web requests without limiting the scope of the present invention.

In one embodiment the content matching engine detects violations of the policy in the original web request by determining whether the web request includes data elements that match any of the data elements of the source data e.g. that match one or more rows of the abstract data structure .

The rule enforcement engine is responsible for performing an appropriate action as defined by a policy if a web request or a component of a web request contains protected data that triggers a violation of the policy. For example the rule enforcement engine may block the web request reroute the web request or modify the web request using the selective content removal process described herein. In one embodiment when performing the selective content removal process the rule enforcement engine determines data boundaries of the original web request and selectively removes the data elements triggering the violation within the data boundaries.

In one embodiment if the content matching engine detects a DLP violation the content matching engine records the component in which there is a violation. Using the recorded information the rule enforcement engine can execute the action on the component that has the DLP violation including determining data boundaries within the component that need to be removed and selectively removing the data content triggering the violation within the component. In another embodiment the content matching engine records the presence of different matches and match ranges in each component and can report this information to the rule enforcement engine . The rule enforcement engine may use this reported information for specific field request redaction.

In one embodiment the rule enforcement engine can resubmit the modified web request to the content matching engine to validate the selective content removal operations. For example the rule enforcement engine can send the modified web request back to the content matching engine at the end of the selective content removal operations. If the content matching engine reports no sensitive information match for the resubmitted web request then the rule enforcement engine can allow the validated web request to be sent to the interactive website by way of the proxy . However if the content matching engine reports a DLP violation for the resubmitted web request then the rule enforcement engine can execute a secondary action on the web request such as blocking the resubmitted web request and sending notification back to the client device that sent the original web request . This secondary action can be to block the entire web request or to allow the web request to pass through to the interactive website unmodified. Although the user experience may be poor if the web request is blocked blocking will prevent the data loss occurrence. An organization can opt for blocking web requests as a secondary action to ensure data loss prevention or letting it go through to reduce helpdesk calls.

In one embodiment the rule enforcement engine executes the secondary action in cases where rule enforcement engine is unsuccessful in removing the protected content. The rule enforcement engine may be unsuccessful due to changes in web request syntax of a particular website or due to the absence of request grammar rule for the particular URI. In one embodiment the rule enforcement engine generates an incident report for the DLP violation to report the unsuccessful removal event due to change in syntax incomplete grammar rule for the particular website and the violation reporter may report the incident report to an administrator for further corrective actions for example.

In one embodiment the rule enforcement engine can introduce a special HTTP header to the modified web request that is sent back to the content matching engine . The special HTTP header indicates that the web request is a resubmission for content validation. In one embodiment after the content matching engine determines that the resubmitted web request does not trigger a violation the rule enforcement engine removes the special HTTP header from the validated web request before sending the web request to the proxy . Alternatively the proxy may remove the special HTTP header before sending the web request to the interactive website.

It should be noted that although the resubmission of the modified web request may introduce additional delay to the web request the resubmission validates the correctness of the request grammar rule as well as the selective content removal operation performed by the rule enforcement engine preventing data loss occurrence.

The data repository is responsible for storing different policies such as the policies described above with respect to the PMS . In one embodiment the data repository receives the policies from the PMS . In another embodiment the data repository receives the policy and the abstract data structure from the PMS .

The violation reporter is responsible for notifying an appropriate entity of a detected violation e.g. via a user interface an email message etc. . The violation reporter may generate an incident report for each violation or alternatively for each web request that violates at least one policy.

In one embodiment the web request uses HTTP or HTTPS as an application level protocol and the web request is encapsulated according to a data structure specified by the interactive website. The rule enforcement engine may determine the data boundaries of the web request by using a request grammar rule. In one embodiment the request grammar rule is expressed in Backus Naur Form BNF like notation and can be used to capture a request structure of the web request e.g. composition of the web request sent to interactive website. For example the request grammar rule can help in identifying the data boundaries within the web request that needs to be redacted. It should be noted that the request grammar is not a formal language used by any of the interactive websites but is a language used to express request grammar rules that help in representing web requests of different kind to different website in a flexible way. Once the rule enforcement engine has parsed the web request and determined its internal structure the request grammar rule can aid the rule enforcement engine to determine the data boundaries of the web request from which the content needs to be removed.

In one embodiment data boundaries of a web request can be determined using an online request grammar that is developed by analyzing the web request using machine learning techniques. Alternatively a complex web request can be decomposed into small building blocks based on request patterns for example creating an XML tree key value pairs or the like for the web request. In this embodiment the content matching engine can be configured to notify in which block the content violation is found. This feedback from the content matching engine can be used by the rule enforcement engine to determine data boundaries on which content removal operations needs to be performed. Although the embodiments above describe determining the request structures of the web requests at time of the reception of the web request alternatively the structures of the web requests can be predetermined offline. For example using network monitoring and protocol processing tools the syntax of the web requests can be analyzed to determine the request structure used by a particular interactive website and a predetermined request grammar rule can be assigned to that particular interactive website. For example the predetermined request grammar rule may include a URI pattern and the request field description. The assigned URI pattern can be used to match to the request URI in the intercepted web request and the field description to determine data boundaries within the intercepted web request. URI patterns within the predetermined request grammar rules can also be used in performing destination specific content filtering. The data boundaries can refer to specified data ranges within one or more components of the web request. For example a field in a POST request may contain a concentration of website specific parameters like my emailhi there . In this case the data boundaries would define the boundaries around the text my email and hi there . The formatting may vary from website to website. For example the values may be null terminated name value pairs instead of xml fragments. The data boundaries delineate the areas of the web request where it is valid to redact data content without redacting the formatting of the web request.

In one embodiment a request grammar rule can be defined using an expression language. The request grammar rule may include a URI pattern that is used for matching URI requests contained in the received web requests and an action to be performed in response to detecting the violation in the web request. The request grammar rule may also include an action message to be inserted into the web request to replace the data elements triggering the violation s . The request grammar rule may also include a field type and description that is used to identify a field of the web request that is to be evaluated for data elements that are likely to trigger a violation. In one embodiment BNF based expression language is used to define the request grammar rules that aid in determining different data boundaries in web requests sent to different interactive websites that need to be redacted. In other embodiments other context free languages may be used other than BNF to define request grammar rules such as Wirth Syntax Notation WSN Extended Backus Naur form EBNF and Augmented Backus Naur form ABNF or other types of context free grammars that would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.

The following example illustrates selective content removal using the exemplary request grammar rule described above regarding Foo.com. An employee Bob uses his personal webmail account with Foo.com to send a Social Security Number SSN of another employee Eve to his friend Alice . Sending SSN information is a data loss event for his organization which needs to be prevented. The web request for the webmail application is sent through a browser and is routed to the Foo server which hosts the webmail application by way of the organization proxy. One exemplary web request may be expressed as follows 

In this example the proxy forwards the original web request to the DMS for DLP inspection. The data inductor has communication channels open with the proxy and upon receiving the request decomposes the web request into different components. For the webmail example above the decomposition can be HTTP URI HTTP headers and HTTP body which is the web mail body. It should be noted that the data inductor can decompose the same web request in different ways such as by creating key value pairs for headers XML graph representation or the like. The content extractor in this example does not do anything as the content of the webmail message is available in text format. If the employee Bob had sent an archive file containing files of different type having protected information then the content extractor would have extracted content from these files and created web request components from them which can undergo content inspection by the content matching engine . The content matching engine would use different detection algorithms to determine the presence of protected information in each of the components of the web request. If the content matching engine detects a DLP violation the content matching engine can record the component in which there is a violation and may even identify the field or data range of the component in which the DLP violation was detected. The rule enforcement engine can execute the action on the component that has the DLP violation including selectively removing the data content triggering the violation within the component. In one embodiment the content removal rule also replaces the selectively removed content with the identified content removal message e.g. Sensitive content has been removed from this outgoing request as per our Company policies . In another embodiment the content removal rule may include a secondary response action as described herein.

In another exemplary embodiment the rule enforcement engine determines the request grammar rule from complete grammar configuration using the request URI present in the HTTP header. The rule enforcement engine uses the feedback from the content matching engine to determine whether the violation is present in the message body file upload operation or the like. For example in the case where the web request for the webmail application is sent to the Foo server the field type and field description of the request grammar rule e.g. message text helps identify fields that may need to be redacted. The content matching engine has reported SSN policy violation for the message body. The rule enforcement engine uses this feedback and the field type and field description to identify the following fields from the exemplary web request to the Foo server 

If there is no request grammar rule for the particular URI and the violation is in the message body the rule enforcement engine can execute the secondary action such as blocking the web request and sending notification to the client device that requested the original web request . If the violation is present in a file upload operation e.g. attaching files in the webmail application blog or the like the rule enforcement engine uses a file boundary detector to identify the data boundaries in the request structure to identify file start and end locations. The rule enforcement engine replaces the file with a marker file with the content being the action message set in the response rule. This operation may be executed irrespective of whether the request grammar rule is present in grammar configuration or not.

If the violation is present in the web request body then using the request grammar rule the rule enforcement engine determines which data boundaries needs to be selectively removed. Data boundary detection may be done based on the field type set in rule request header parameters and or feedback from content matching engine . The rule enforcement engine removes the sensitive content from these data boundaries and places the replacement action message as set in the rule. As described above the field type and field description of the rule may be used to determine the field which may contain the violating content. For the web mail post by Bob the XPATH query will aid in determining nodes of the Simple Object Access Protocol SOAP envelope and the XML node may be reconstructed with the action message set as its value. SOAP is a protocol specification for exchanging structured information in the implementation of web services in computer networks. SOAP may relay on XML as its request format and usually relies on other application layer protocols such as HTTP HTTPS or Remote Procedure Call RPC for negotiation and transmission of the web request and corresponding responses. Although SOAP is described herein in other embodiments other protocols may be used as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.

The rule enforcement engine can recompose the modified web request from each component and set parameters appropriately such as request length that enables the external Foo web server to interpret this modified request as if it was the original request. The rule enforcement engine sends the modified web request back to the proxy via the data inductor s communication channels.

In another embodiment the request grammar rules can be extended to request field level redaction rules where the replacement content can be specified on each request field. Using this extended grammar web requests that are form field submissions not file uploads or attachments can undergo specific content redaction. The content matching engine identifies the component that triggered a DLP violation. It also identifies data content match ranges in each component. Each violation match and the match range within a web request can be provided to the rule enforcement engine which can then use the extended grammar rule to identify the request fields having a content match and the redaction rule to be applied on these matches. This field level redaction can be helpful where the web server performs some operation on the form submission parameters and creates a dynamic response. In these cases replacement content can be expressed to match the data type and length of original request. It may be difficult to execute specific content match redaction rules for file uploads or attachments as the rules enforcement engine would need to have content extraction and re composition capabilities for every possible file type. Listed below are some other exemplary rules that could be used by the rule enforcement engine 

Alternatively the rule enforcement engine can use other rules for selective content removal of data content of the web request or for blocking the entire web request as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.

Referring to processing logic begins with receiving a rerouted web request from the proxy block and evaluating the web request to determine whether the web request includes at least one data element that triggers a violation of a policy block . Before block processing logic may identify the policy for protecting source data having one or more data elements. The policy may specify the source data and include one or more rules e.g. rules concerning data loss prevention for triggering a violation as well as policy parameters for excusing detected violations. The data elements may be in tabular or non tabular format. If at block the processing logic determines that the web request violates the policy processing logic determines data boundaries of the web request block selectively removes data content within the data boundaries containing the at least one data element that triggered the violation block and sends the modified web request to the interactive website block . By sending a modified web request without the selectively removed data elements the interactive website can process the modified web request as if it were the original web request containing the at least one data element that triggered the violation. If at block the processing logic determines that the web request does not violate the policy processing logic sends the web request unmodified to the interactive website block . The determination at block of whether the web request violates the policy can be made using a variety of search techniques including search techniques discussed in more detail below in conjunction with .

In another embodiment before sending the modified web request the processing logic may reevaluate the web request with the data elements selectively removed to validate that the data elements that triggered the violation have been successfully removed from the web request. The processing logic then sends the validated web request to the interactive website.

It should be noted that an email message sent using a conventional email client follows an internet message format standard for its composition and can be easily interpreted by mail servers spam engines DLP engines etc. However web requests sent to different webmail applications hosted by different websites do not conform to any standard in how the web requests are composed. Typically all of these web requests use the same application level protocol e.g. HTTP but differ in how the content of the webmail is encapsulated within the web requests and do not conform to any standard. Also the encapsulation may change for a particular website depending on the technology used by the web servers. In order to modify the web requests and prevent data loss occurrence the processing logic can determine a request grammar rule that captures the web request structure and aids in determining different data boundaries within a request. For example the processing logic determines the request grammar rule for one of the interactive websites by evaluating a request URI of the web request and matching the request URI to one of multiple predefined URI patterns. Each of the URI patterns corresponds to a predefined request grammar rule for the particular website. The processing logic uses the matched URI pattern to identify which request grammar rule is used for the interactive website to which the web request is being sent.

Using the request grammar rule the processing logic at block can determine the data boundaries of the particular web request for selective content removal. As part of selectively removing the data content at block the processing logic can redact the identified data boundaries to selectively remove the at least one data element from the web request. In one embodiment the redacted portion of the web request is filled with replacement content as expressed in the policy. In another embodiment the processing logic removes an attachment including the data element that triggered the violation to redact the identified data boundaries. In another embodiment the processing logic redacts the identified data boundaries by replacing an attachment including the data element that triggered the violation with a marker file containing replacement content as expressed in the policy.

In addition to the operations illustrated and described with respect to the processing logic may also perform other policy management and data monitoring operations associated with protecting the source data. In one embodiment the processing logic can identify the source data to be protected and define one or more policies to protect the identified source data. The processing logic can also receive parameters pertaining to policies such as pre configured template policies or customized policies for example via the policy definition GUI an API or a configuration file and create policies based on these parameters.

Referring to processing logic of the data monitoring component decomposes the web request into different components block . For each component processing logic determines whether the particular component violates the policy block as described herein. Exemplary search techniques that can be used in this determination will be discussed in more detail below in conjunction with B and C. At block for each policy violation processing logic selectively removes one or more data elements that triggered one or more policies within the component. Once the violating data elements have been selectively removed from each of the components processing logic recomposes a modified web request using each of the components block . At block processing logic sends the modified web request to the interactive website by way of the proxy. By selectively removing the violating data elements and generating the modified web request the interactive website is able to interpret the modified web request as if it were the original web request.

In one embodiment the web request uses HTTP as an application level protocol and includes at least two components a HTTP header and a HTTP body. The data content triggering a violation can be selectively removed from the HTTP request as described below with respect to .

Referring to processing logic begins with determining a request grammar rule using a request URI present in the HTTP header block . At block processing logic determines whether the violation is present in the HTTP body. For example the processing logic may determine whether any tokens of the HTTP body contain data elements from the source data that trigger a violation of the policy. This determination can be made using a variety of search techniques including search techniques discussed in more detail below in conjunction with . If the violation is present in the HTTP body processing logic determines which data boundaries need to be selectively removed using the request grammar rule block and selectively removes the data boundaries that need to be selectively removed block . In one embodiment the data element that triggered the violation can be replaced with a replacement message as defined in the request grammar rule.

If at block the processing logic determines that the violation is not present in the HTTP body processing logic determines whether the violation is present in an attachment file that is part of the web request as a result of a file upload operation block . If the violation is present in the attachment file processing logic identifies file start and end locations of the attachment file to determine data boundaries to be selectively removed using the request grammar rule block and replaces the attachment file with a marker file within the data boundaries block . At block processing logic recomposes a modified web request that is similar in format to the original web request but without the selectively removed data elements and or with the marker file that replaced the removed attachment file. In one embodiment the processing logic sets a request length of the modified web request to match the request length of the original web request. This allows the interactive website to interpret the modified web request as if it were the original web request. At block processing logic sends the modified web request to the interactive website by way of the proxy. However if the violation is not present in the HTTP body or the file upload operation in blocks and processing logic sends the original web request unmodified to the interactive websites block by way of the proxy. Accordingly method allows sensitive information to be protected from unauthorized use through web based applications.

Exemplary search techniques will now be described in more detail. are flow diagrams of various exemplary embodiments of a method to find in a subset of tokens a match satisfying policy parameters in an abstract data structure derived from source data in a tabular format. The method is performed by processing logic that may comprise hardware circuitry dedicated logic etc. software such as is run on a general purpose computer system or a dedicated machine or a combination of both. In one embodiment the method is performed by a data monitoring component e.g. DMS of .

The abstract data structure used by this method may include the actual source data or a signature of the source data. The signature may include an encrypted or hashed copy of the source data element or some other representation of the source data element that would not allow a malicious user to recover the actual content of the source data element. In one embodiment the abstract data structure also includes placement information such as the number of a row and or a column storing the data element in the source data. The data elements may be stored in a tuple storage structure derived from the source data. A tuple storage structure provides a mechanism for storing multiple tuples associated with the elements of the source data. Examples of tuple storage structures include a hash table a vector an array a tree or a list. Each type of the tuple storage structure is associated with a method for retrieving a set of tuples for any given content element the set of tuples may be empty if no match is found in the tuple storage structure . The tuples may be in a predetermined order e.g. in the ascending lexicographic order and the contents of the abstract data structure may be treated cryptographically e.g. with a hash function or using an encryption function with a cryptographic key to further secure the abstract data structure from theft.

Referring to processing logic begins with searching for each token or content fragment the abstract data structure for a set of matching tuples block . For example a word Smith contained in the data content of the web request may have several occurrences in the source data that are reflected in the abstract data structure. Specifically each of these occurrences has a corresponding tuple in the abstract data structure. During the search processing logic retrieves a set of tuples corresponding to the occurrences of the word Smith in the source data. Each tuple stores information about the position of this data fragment within a database or a table storing the source data. In one embodiment the positional information includes the row number of a cell storing the data fragment. In another embodiment the positional information also includes a column number of this cell and optionally the data type of the column.

Next processing logic combines the matching tuple sets found for all the content fragments block and then groups the combined matching tuple sets by row numbers into groups L block . As a result each group L referred to herein as an accumulator contains matching tuple sets that all have the same column number i.e. the matching tuple sets in each group L correspond to fragments of the source data that all appear to be from the same column in the database.

Further processing logic sorts the groups L by the number of matching tuple sets contained in each group block and in one embodiment selects those groups that have tuple sets with distinct column numbers block . Afterwards processing logic determines whether any of the selected groups satisfy policy parameters block .

Referring to processing logic begins with determining whether the policy parameters specify inclusion columns block . If not processing logic proceeds to block . If so processing logic determines whether the policy parameters specify a minimum number M of inclusion columns block . If number M is specified processing logic searches for groups with tuples from at least M number of the inclusion columns block and determines whether any such groups are found i.e. the number of found groups is greater than 0 block . If the determination made at block is positive processing logic proceeds to block . If the determination made at block is negative processing logic decides that no violation has been detected block .

If number M is not specified block processing logic searches for groups with tuples from each specified inclusion column block and determines whether any such groups are found block . If the determination made at block is positive processing logic proceeds to block . If the determination made at block is negative processing logic decides that no violation has been detected block .

At block processing logic determines whether the policy parameters specify any key words or expressions. If not processing logic proceeds to block . If so processing logic searches for groups with tuples matching the specified keywords or expressions block and determines whether any such groups are found block . If the determination made at block is positive processing logic proceeds to block . If the determination made at block is negative processing logic decides that no violation has been detected block .

At block processing logic determines whether the policy parameters specify exclusion columns. If not processing logic proceeds to block . If so processing logic searches for groups with tuples that are not from all of the exclusion columns block and determines whether any such groups are found block . If the determination made at block is positive processing logic proceeds to block . If the determination made at block is negative processing logic decides that no violation has been detected block .

At block processing logic determines whether the policy parameters specify a minimum number L of rows. If not processing logic decides that a violation is detected block . If so processing logic determines whether the most recent number of found groups is not less than L block . If this determination is positive processing logic decides that a violation is detected block . If the determination made at block is negative processing logic decides that no violation has been detected block .

Referring to processing logic begins with receiving parameter m that identifies the minimum number of inclusion columns i.e. data source columns whose data needs to be included in the search result block .

Next processing logic receives parameter S specifying the set of inclusion columns and confirms that S is greater or equal to m block .

At block processing logic receives parameter r specifying the minimum number of rows. Parameter r requires that the search result contain data from at least r rows of the source data.

At block processing logic receives parameter E specifying a set of exclusion columns i.e. data source columns whose data has to be excluded from the search result and confirms that for each e member if E e is equal to m.

At block processing logic determines whether G is greater than r. If so processing logic decides that a match is detected block . If not processing logic decides that no match is detected block .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein such as selective content removal of web requests to an interactive website.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The software may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine e.g. computer and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

The embodiments described herein may be used to ensure seamless interaction with interactive web applications while provisioning DLP using selective content removal. The embodiments described herein may help eliminate poor user experiences that can occur when web request from these interactive web applications are blocked entirely. The embodiments described herein may be used to help users from experiencing unstable application or application crashes. The embodiments described herein can be used to enable DLP in network environments without interrupting employee productivity increasing helpdesk support calls or request or the like.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

