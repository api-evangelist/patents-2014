---

title: Back up and recovery in virtual machine environments
abstract: Embodiments of the present invention provide efficient and cost-effective systems and methods for backing up and recovering a virtual machine and application data therein. Embodiments of the present invention can be used to satisfy near-zero RPOs by providing more recovery points for backups in virtual machine environments, while also providing increased granularity for recovery (i.e., single virtual disk, single file, etc.) and maintaining central management capabilities and back up efficiencies offered by virtual machine-level backups.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606876&OS=09606876&RS=09606876
owner: International Business Machines Corporation
number: 09606876
owner_city: Armonk
owner_country: US
publication_date: 20140829
---
The present invention relates generally to the field of data backup systems and more particularly to backup and recovery of data in virtual machine environments.

Backup and recovery systems are often designed and implemented according to one or more recovery point objectives RPOs . An RPO is a maximum amount of data loss measured in time which a system designer is willing to tolerate if a data loss event should occur. For example to meet an RPO of one hour backups must be performed at a minimum interval of one hour. Where continuity of service and the ability to recover critical data are especially high RPOs may approach near zero meaning that the backup and recovery system is implemented such that backups are taken so frequently that in the event of system failure nearly no data would be lost.

Virtual machines are software based emulations of computer systems. In the context of backup and recovery systems virtual machines can provide efficiencies and cost savings because of their hardware agnostic nature and for providing system administrators with the ability to deploy operate and manage multiple instances of virtual machines in a centralized fashion.

Embodiments of the present invention provide systems methods and program products for backing up and recovering a virtual machine and application data therein such that near zero RPOs can be achieved while also maintaining central management capabilities and backup efficiencies afforded by virtual machine level backups. In one embodiment of the present invention an application executing in a guest operating system in a virtual machine and log data associated with the application are identified for backup. A backup of the virtual machine is created and stored and the backup of the virtual machine is confirmed to be stored on one or more storage devices in a data format that is compatible with backups of log data. A backup of log data is created and stored and the backup of log data is related with the backup of the virtual machine in a relational data structure. Later the related backups of the virtual machine and log data can be restored and the log data can be applied to recover data at a particular recovery point.

Embodiments of the present invention provide efficient and cost effective systems and methods for backing up and recovering a virtual machine and application data therein with increased numbers of recovery points up to and including enough recovery points to achieve near zero RPOs. Embodiments of the present invention provide systems and methods that utilize both periodic full backups of a virtual machine and more frequent backups of log data from applications of interest such as transaction logs of database management applications. In this manner as discussed in greater detail later in this specification embodiments of the present invention can be used to satisfy near zero RPOs by providing more recovery points for backups in virtual machine environments while also providing increased granularity for recovery i.e. single virtual disk single file etc. and maintaining central management capabilities and backup efficiencies offered by virtual machine level backups.

Backup server computer system includes server backup program relational data structure and backup repository . Server backup program performs server side backup operations to backup virtual machine and data of database management program executing within virtual machine in accordance with embodiments of the present invention. Server backup program stores received backup objects in backup repository . Server backup program can be implemented with any suitable server backup software such as Tivoli Storage Manager products available from International Business Machines of Armonk N.Y.

Relational data structure is used by server backup program to maintain backup object entries for each backup object stored in backup repository and to group together backup object entries that are associated with a given backup version. In embodiments of the present invention relational data structure relates data objects from full backups of virtual machine with data objects from backups of log data stored on virtual disk s even if the data objects are stored in different namespaces. The phrase full backup as used herein with respect to virtual machine refers collectively to a backup of all data objects of virtual machine as well as any subsequent incremental backups of data objects of virtual machine that have changed since that last backup of all of the data objects. For example a full backup of virtual machine may be comprised of a first backup of all data objects taken at t as well as incremental backups of data objects captured at t and t that have changed since t. The terms log and log data as used herein refer to log files created by applications that reflect changes to data that have occurred since a particular point in time and which can be later applied to recover data as it existed at a particular point in time captured in the log files e.g. transaction logs for SQL databases . Relational data structure can be implemented using any database architecture known in the art such as for example a relational database an object oriented database and or one or more tables.

Backup repository in which server backup program stores backup objects can be implemented using any non volatile storage media known in the art. For example backup repository can be implemented with a tape library optical library one or more independent hard disk drives or multiple hard disk drives in a redundant array of independent disks RAID .

Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and include wired wireless or fiber optic connections. In general network can be any combination of connections and protocols that will support communications between backup server computer system client computer system and host computer system in accordance with a desired embodiment of the invention.

Client computer system includes client backup program . Client backup program communicates with virtualization program and server backup program via network e.g. using TCP IP to backup virtual machine and data of database management program to backup repository . Client backup program can be implemented with any suitable program that is compatible with virtualization program and server backup program . For example where virtualization program is implemented with a VMware product and server backup program is implemented with a Tivoli Storage Manager product client backup program can be implemented with Tivoli Storage Manager for Virtual Environments Data Protection for VMware DP for VMware also available from International Business Machines of Armonk N.Y. In other embodiments client backup program may reside on a different computer system such as host computer system .

Host computer system includes virtualization program and virtual machine . Virtualization program creates and manages virtual machine . Virtualization program can be implemented with any suitable hypervisor e.g. VMware ESX ESXi Microsoft Hyper v KVM etc. and as part of any suitable virtualization infrastructure that is compatible with server backup program and client backup program in accordance with embodiments of the present invention.

Virtual machine includes guest operating system OS database management program virtual disk s in guest backup agent and in guest recovery agent . Guest operating system can be implemented with any suitable operating system such as Windows or Linux . Database management program is in guest software that creates and manages databases of data. Database management program also creates and during recovery applies log data i.e. transaction logs . Database management program can be implemented with any suitable database software such as Microsoft SQL Server.

In guest backup agent is optional in guest software that is used to backup log data created by database management program to backup repository in accordance with certain embodiments of the present invention e.g. the embodiment discussed with regard to . For example where database management program is implemented with Microsoft SQL Server in guest backup agent may be implemented with Data Protection for SQL available from International Business Machines of Armonk N.Y. In other embodiments e.g. the embodiments discussed with regard to in guest backup agent can be omitted as indicated by dashed lines in .

Virtual disk s are one or more virtualized hardware disk drives on which database management program stores its databases logs and other application data. In certain embodiments virtual disk s comprise a plurality of disks mapped to different drives of the file system of guest operation system e.g. VMDK0 maps to a C drive containing system boot files VMDK1 maps to a D drive containing an SQL database and VMDK2 maps to an L drive containing SQL logs . Virtual disk s may be a virtualized representation of one or more Advanced Technology Attachment ATA Serial ATA SATA Small Computer System Interface SCSI or Serial Attached SCSI SAS compatible hard disk drives. Virtual disk s may also be a virtualized representation of a plurality of such hard disk drives in different configurations such as for example independent hard disk drives or as a plurality of hard disk drives in a redundant array of independent disks RAID . In general virtual disk s may be a virtualized representation of any storage media known in the art.

In guest recovery agent is in guest software that is used to initiate and facilitate recovery of backed up data from backup repository to virtual disk s as discussed in greater detail with regard to .

It should be understood that for illustrative purposes does not show other computer systems and elements which may be present when implementing embodiments of the present invention. For example while shows a single host computer system and a single virtual machine backup system can also include additional host computer systems and virtual machines that use backup server computing system to back up their respective data.

In step client backup program determines whether a full backup of virtual machine should be performed. In this exemplary embodiment client backup program maintains a backup schedule that dictates whether a full backup of virtual machine should be performed based on whether a specified amount of time has elapsed since the last full backup of virtual machine . Client backup program may also query server backup program to confirm whether a non expired full backup of virtual machine is stored in backup repository .

If in step client backup program determines that a full backup of virtual machine should be performed i.e. the elapsed period of time since the last full backup exceeds a specified value then in step a full backup of virtual machine is performed. In this exemplary embodiment client backup program e.g. DP for VMware uses application programming interfaces APIs of virtualization program e.g. VMware to take a snapshot of virtual machine and back up virtual machine including a full backup of application data e.g. an SQL database from database management program to server backup program via network . The term snapshot as used herein refers to preserving a state of virtual machine or a portion thereof at a particular point in time to enable a backup of data to occur without substantially interrupting input output to data being backed up. For example during the full backup a snapshot of the entire virtual machine is taken in other contexts as discussed later in this specification a snapshot may be restricted to particular applications running on virtual machine a particular volume on virtual disk s etc. The ability to take snapshots in virtual machine may be provided for example by virtualization program and or guest operating system . Server backup program receives the data objects e.g. as blocks of data from virtualization program creates entries for the data objects in relational data structure and stores the backup objects in backup repository .

If in step client backup program determines that a full backup of virtual machine should be not be performed i.e. the elapsed period of time since the last full backup is less than a specified value then in step a backup of log data e.g. SQL database transaction logs from database management program e.g. Microsoft SQL Server is performed. As discussed in greater detail with regard to backing up log data to backup repository can be performed in a variety of ways.

In step server backup program relates backed up log data with the appropriate full backup of virtual machine stored on backup repository . In this exemplary embodiment server backup program relates the entries in relational data structure for the backed up log data with the entries in relational data structure for the appropriate full backup version of virtual machine such that an administrator of backup system operating at a virtual machine level can later recover application data of database management program e.g. an SQL database as it existed at a particular point in time .

In step in guest backup agent e.g. DP for VMware identifies database management program whose logs and other application data are stored on virtual disk s . In general however embodiments of the present invention may be used to back up any applications running within virtual machine . For example an administrator of backup system may specify applications to be backed up or in guest backup agent may identify and present to the administrator a list of running applications for his or her selection.

In step in guest backup agent confirms that a compatible full backup of virtual machine is stored on backup repository . A compatible full backup of virtual machine is one which contains the correct data i.e. data representing virtual machine at the correct time including a full backup of one or more databases of database management program in the correct format i.e. a data format that is compatible with a data format used for backups of the log data . In this exemplary embodiment in guest backup agent queries server backup program which in turn accesses relational data structure to confirm that an appropriate full backup of virtual machine is stored on backup repository e.g. confirmed by a unique virtual machine identifier or VM UID . In guest backup agent further confirms that the full backup of virtual machine was created by client backup program i.e. a compatible program and is therefore in a compatible data format.

In step in guest backup agent performs a backup of the log data from database management program that is stored on virtual disk s . In this exemplary embodiment in guest agent accesses the file system through guest operating system copies the appropriate log files belonging to database management program and transmits the log files to server backup program via network . As previously discussed server backup program stores the backed up log files in backup repository and relates those backed up log files with the appropriate full backup of virtual machine in relational data structure .

In step client backup program injects code into virtual machine to identify database management program whose logs and other application data are stored on virtual disk s . As previously discussed in other embodiments of the present invention code may be injected to identify for backup other applications running within virtual machine .

In step client backup program injects code into virtual machine to perform a backup of the log data from database management program that is stored on virtual disk s . Unlike the embodiment of however the injected code uses commands and or interfaces to automate back up of the log data. For example where database management program is implemented with Microsoft SQL Server and server backup program is implemented with Tivoli Storage Manager client backup program can create backups of log data stored on virtual disk s by injecting code to access SQL Server Virtual Device Interface VDI and client backup program can then transmit the log data to server backup program by injecting code to access appropriate Tivoli Storage Manager APIs. In another example client backup program can create backups of log data stored on virtual disk s by injecting code to execute appropriate SQLCMD commands or use SqlBackup Server Management Objects. As previously discussed server backup program then stores the backed up log data in backup repository and relates that backed up log data with the appropriate full backup of virtual machine in relational data structure .

Accordingly in this exemplary embodiment log data is backed up without requiring installation of in guest backup agent on virtual machine . Thus this exemplary embodiment can be used to simplify and automate back up of log data from virtual machine for administrators of backup system operating at the virtual machine level.

In step client backup program injects code into virtual machine to identify database management program whose logs and other application data are stored on virtual disk s .

In step client backup program injects code i.e. using VMware or other virtualization product APIs into virtual machine that invokes a VSS snapshot of virtual machine that is limited to database management program . More specifically client backup program injects code that restricts the VSS snapshot to the writer application of database management program e.g. SQL writer application to freeze the appropriate application data for database management program and virtual disk s on which the log data is stored e.g. VMDK2 in the example discussed earlier .

In step client backup program injects code into virtual machine to mount the snapshot of the virtual disk s on which the log data is stored.

In step client backup program injects code into virtual machine to copy log data i.e. in the form of log files from the mounted snapshot transmit the log data to server backup program and delete the snapshot. As previously discussed server backup program then stores the backed up log data in backup repository and relates that backed up log data with the appropriate full backup of virtual machine in relational data structure .

In step client backup program injects code into virtual machine to identify database management program whose logs and other application data are stored on virtual disk s .

In step client backup program injects code i.e. using VMware or other virtualization product APIs into virtual machine that invokes a VSS snapshot of virtual machine restricted to the writer application of database management program e.g. SQL writer application in order to freeze the appropriate application data for database management program and virtual disk s on which the log data is stored e.g. VMDK2 in the example discussed earlier .

In step client backup program injects code into virtual machine to back up and transmit to server backup program the snapshot of the entire virtual disk s on which the log data is stored and then delete the snapshot. As previously discussed server backup program then stores the backed up log data in backup repository and relates that backed up log data with the appropriate full backup of virtual machine in relational data structure .

Accordingly while both this embodiment and the embodiment of use a snapshot to back up log data this embodiment can increase the efficiency with which the logs can be backed up because it eliminates processing and logistical overhead needed to mount the snapshot and separately copy and track the log data.

In step in guest recovery agent queries backup server computer system to identify available recovery points for the database based on full backups of virtual machine and backups of log data stored on backup repository i.e. based on time points associated with backups in the backup inventory that correspond to time points when the backups were taken . In guest recovery agent can then present the available recovery points to the user of backup system . Furthermore the associations in relational data structure between the full backups of virtual machine and the appropriate backups of log data enable in guest recovery agent to represent the available recovery points to the user independent of the method used to create the recovery point.

In step in guest recovery agent receives a selection from the user of a recovery point for the database and any additional options. For example the user may select a recovery point in the form of a particular date time backup version or some other format.

In step in guest recovery agent passes the selection to client backup program to identify the full backup of virtual machine and backup of log data that are needed to satisfy the recovery point. For example if the user chooses a recovery point that is between a full backup of virtual machine taken at t and a backup of log data that was taken at t client backup program would identify the same.

In step client backup program requests from server backup program via network the identified full backup of virtual machine and backup of log data which are received by host computer system .

In step client backup program mounts the received full backup of virtual machine which in this exemplary embodiment is in the form of a snapshot and initiates recovery from that point in time. Client backup program optionally mounts the received backup of log data depending on its format. For example client backup program also mounts the received virtual disk s to access the backed up log data where the log data was backed up in the form of a snapshot of virtual disk s e.g. the embodiment of .

In step client backup program provides the backed up log data to database management program which may then apply the log data to recover the database to the point in time selected by the user.

Computer system includes communications fabric which provides for communications between one or more processors memory persistent storage communications unit and one or more input output I O interfaces . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media. Software e.g. server backup program virtualization program etc. is stored in persistent storage for execution and or access by one or more of the respective processors via one or more memories of memory .

Persistent storage may include for example a plurality of magnetic hard disk drives. Alternatively or in addition to magnetic hard disk drives persistent storage can include one or more solid state hard drives semiconductor storage devices read only memories ROM erasable programmable read only memories EPROM flash memories or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage can also be removable. For example a removable hard drive can be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit provides for communications with other computer systems or devices via a network e.g. network . In this exemplary embodiment communications unit includes network adapters or interfaces such as a TCP IP adapter cards wireless Wi Fi interface cards or 3G or 4G wireless interface cards or other wired or wireless communication links. The network can comprise for example copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers. Software and data used to practice embodiments of the present invention can be downloaded to computer system through communications unit e.g. via the Internet a local area network or other wide area network . From communications unit the software and data can be loaded onto persistent storage .

One or more I O interfaces allow for input and output of data with other devices that may be connected to computer system . For example I O interface can provide a connection to one or more external devices such as a keyboard computer mouse touch screen virtual keyboard touch pad pointing device or other human interface devices. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. I O interface also connects to display .

Display provides a mechanism to display data to a user and can be for example a computer monitor. Display can also be an incorporated display and may function as a touch screen such as a built in display of a tablet computer.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The terminology used herein was chosen to best explain the principles of the embodiment the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

