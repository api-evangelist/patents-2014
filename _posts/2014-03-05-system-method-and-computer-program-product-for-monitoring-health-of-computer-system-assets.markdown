---

title: System, method, and computer program product for monitoring health of computer system assets
abstract: A method of displaying health information of a system asset in a computer system, the method including: accessing a data log associated with the system asset, wherein the data log includes a store of the health information of the system asset, identifying a plurality of state entries in the store of the health information, each of the state entries including a timestamp and a state of the system asset at the respective time stamp, generating a timeline based on the state entries, the timeline having a plurality of chronological portions defined by the timestamps, wherein each portion of the timeline is assigned a visual cue based on a state associated with its respective state entries, and visually rendering the timeline upon a computer display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507686&OS=09507686&RS=09507686
owner: NETAPP, INC.
number: 09507686
owner_city: Sunnyvale
owner_country: US
publication_date: 20140305
---
The present application claims the benefit of U.S. Provisional Patent Application No. 61 919 487 filed Dec. 20 2013 and entitled System method and computer program product for monitoring infrastructure and assets the disclosure of which is incorporated by reference herein in its entirety.

The present disclosure relates generally to computing system monitoring and more particularly to monitoring the health of computing system assets.

Information storage systems may include a variety of different hardware and software components. For instance a storage system may include one or more storage controllers where each of the storage controllers provides the low level control for a plurality of physical storage drives. The storage system may also include network connections and other items that are ancillary to the storage functionality of the system. Storage systems continue to become more and more complex with storage controllers hosting an increasing number of logical storage volumes and storage controllers being clustered rather than simply standing alone. There is currently a need for a management application that monitors assets of storage systems in an efficient and intuitive manner.

Some current storage monitoring systems gather operational data from multitudes of storage items in a given storage system. Examples of storage items includes virtual volumes storage drive hardware storage controllers network interfaces and the like. A storage monitoring system then logs the operational data for the storage system in a database. In case of a failure an administrator of the storage system may access the log of operational data to determine when errors occurred what the errors were and which devices had no errors.

Viewing data logs of operational data has been somewhat effective in current systems to provide an administrator with actionable information. However the data log as displayed is text based with status and timestamps and text based data has the limitation of not being optimally intuitive nor quickly comprehensible. Accordingly there is a need for a more intuitive storage monitoring system.

In the following description specific details are set forth describing some embodiments consistent with the present disclosure. It will be apparent however to one skilled in the art that some embodiments may be practiced without some or all of these specific details. The specific embodiments disclosed herein are meant to be illustrative but not limiting. One skilled in the art may realize other elements that although not specifically described here are within the scope and the spirit of this disclosure. In addition to avoid unnecessary repetition one or more features shown and described in association with one embodiment may be incorporated into other embodiments unless specifically described otherwise or if the one or more features would make an embodiment non functional.

Various embodiments of the present disclosure provide monitoring of a computer system that is both efficient and easy to understand for a human user. One embodiment includes a user interface that provides an intuitive display of system asset health information within a timeline graph. For instance a user may select a system asset from a variety of system assets and be directed to a display of the selected asset s health information. The health information is rendered visually in a timeline graph that uses visual cues to differentiate health statuses of the system asset over time.

Continuing with the example the timeline includes visual cues such as different colors or fill patterns to represent the different statuses. For instance a timeline color of red may indicate the presence of an error during a specific period of time whereas a color of blue may indicate no errors present during another specific time. However any appropriate visual cue may be used in other embodiments.

In another example there are three statuses no error collection suspended and error present. Also each of the statuses are plotted on the timeline against specific time periods. Thus over time and within a large displayed time period the visual cues representing the different statuses are readily apparent from a quick visual inspection of the interface. An administrator can view periods having error statuses and periods of normal operation within a single view plotted against the progress of time.

In some examples the visual interface is interactive allowing a user to select portions of the interface to receive more information. Each of the regions within the timeline graph can be screen control elements e.g. buttons or links that when selected display to the user hardware and software components within a system asset and applicable error states if any during the time period represented by the selected region. Furthermore selection of a particular region of the timeline may cause the visual cue of the timeline to be changed itself e.g. highlighted to indicate that the region has been selected.

The scope of embodiments may include rendering the visual interface using any appropriate techniques. In one embodiment logic within a management server loads data from the data log parses the data and generates an interactive interface based on the parsed data log. In one example an application parses the data log to create the timeline graph. For instance for a given system asset the application examines the data log for entries corresponding to the system asset. It then parses each entry for its timestamp and health information. Each timeline is created by mapping status to timestamps to create chronologically ordered periods of time that represent the statuses. The display may be created in any appropriate manner one example includes logic in the application to generate web based graphics. For instance the logic may generate HTML or other code configured to cause the timeline to be rendered when processed by a web browser.

Various embodiments may be more intuitive for a human user to understand than previous solutions employing data logs only. Specifically it is generally expected that a human user would be able to comprehend more information more quickly from a visual timeline graph than from data logs in text form only. However various embodiments may include the display of text based log information to supplement timeline information. In other words one advantageous use of some embodiments is to employ the timeline as a quick reference to identify time periods having errors. When those time periods are discovered a human user may then request data log information to investigate specific errors associated with the time period.

The example of below is directed to a network storage system and the scope of embodiments is applicable to a wide variety of computer systems other than storage systems. Accordingly the concepts described herein for monitoring and analyzing system data may be applied to computing systems generally.

The system includes server system connected to client system via a network . The server system accesses storage subsystems that are connected to the server system via a network . The storage subsystems are included in a cluster . Each storage system in the cluster includes a set of storage devices for storing client data the storage devices of the cluster providing the shared storage of the storage system . Each storage subsystem also includes a storage controller . Each storage controller exercises low level control over physical storage devices to provide virtualized storage to server system and client . Examples of storage hardware that can be used as physical storage devices includes e.g. hard disk drives and solid state drives though the scope of embodiments is not limited to any particular storage hardware.

Each storage device may store data to logical storage entities such as one or more storage volumes where each volume has a file system implemented on the volume. A file system implemented on the logical storage entity may provide multiple directories in a single volume each directory containing various filenames each of which may be mapped to a multitude of storage devices .

Client system may run one or more applications e.g. word processing or database programs typified by application that utilize the storage system. Client system includes a computer system that interacts with server system for submitting read write access requests and for receiving or transmitting data from or to the server system over the network . In a virtual server environment application on client system may interact over the network with one or more virtual machines VMs executing on server system .

As mentioned above various embodiments include a system monitoring tool that receives data from the system assets monitors performance of the system assets and provides user access to analyzed system data. System includes a system monitoring tool that is implemented as an application. For instance a system monitoring tool can be implemented as application at client . Additionally or alternatively the system monitoring tool may be implemented as one of applications .

For the purposes of this example application is described as the system monitoring tool. The system monitoring tool receives system data by communicating with storage operating systems at each storage controller . For instance system monitoring tool may communicate via API to receive system information such as hardware names volume names usage data read and write operations per second and the like. Various types of system information are described in more detail below. In short the system information of this example includes any type of information that allows the monitoring tool to construct a comprehensive description of the architecture and performance of system .

Server system includes a computer system that executes applications and interacts with the client system for receiving read write access requests and receiving or transmitting data from or to the client system over the network . Server system in this example is connected to the client system over a network such as a local area network LAN an Ethernet subnet a PCI or PCIe subnet a switched PCIe subnet a wide area network WAN a metropolitan area network MAN the Internet or the like.

The server may include any appropriate computer hardware and software. In one example server includes a general purpose computer configured to execute any of a variety of operating systems including the Unix Linux and Microsoft Windows operating systems.

Server system includes hypervisor which creates and manages one or more Virtual Machines VMs in this case VM . The present example shows only a single VM though in other embodiments the server includes multiple VMs not shown each VM being used by and connected with a client through computer network . Thus systems with more than one client may include more than one VM each client being supported by at least one VM. VM includes an encapsulation or instance of an operating system and applications and executing on top of that instance. Briefly application provides read write access to the clients to data stored in cluster . Application is a system monitoring tool described in more detail below. In some embodiments different types of VM hypervisors may be used e.g. VMware ESX Microsoft Hyper V etc. .

Each storage system is configured to allow server to access its data for example to read or write data to the storage system. The server executes application that connects to storage systems over computer network to send an access request read or write request to storage system for accessing particular data stored on the storage system . The VM application executing on the server services the connected client by receiving the client access requests and submitting the access requests to the storage system for execution.

The scope of embodiments is not limited to the particular architecture of system . For instance other systems may include additional servers each server being similar to server . While the example of shows only one client it is understood that any appropriate number of clients may be supported by the system . Moreover while cluster shows two storage subsystems and it is understood that any appropriate number of controllers and storage drive arrays may be used with various embodiments. For instance some embodiments may include only a single storage subsystem whereas other embodiments may include three or more storage subsystems. In other words the scope of embodiments is not limited to a single storage cluster.

System monitoring tool monitors the assets of system where the assets include any hardware or software component that is included in the architecture of system or affects the performance of the system . Examples of assets include the underlying storage drives e.g. HDDs and SSDs virtual volumes storage controllers storage subsystems aggregates of storage subsystems network connections virtual machines hypervisors applications and the like.

A human user interacts with system monitoring tool via UI . UI may include a command line interface a graphical User interface GUI or other appropriate interface. The human user may rely on UI for troubleshooting and viewing performance data. For instance the human user may input information identifying requested performance statistics identify new assets and change settings using UI . below describes an example screen that may be displayed by IU .

Storage Operating Systems OSs run on storage controllers . The scope of embodiments may include any appropriate OS that provides low level control to implement virtual storage on storage drives. Storage OS instances run on one or more processors at storage controllers . Also communication between storage OSs and system monitoring tool go through communication links such as network .

System monitoring tool automatically imports information on the various infrastructure assets in system providing accurate and real time visibility of servers virtual servers Host Bus Adaptors HBAs switches storage arrays and the like. In one example system monitoring tool discovers the assets by polling each of the assets that it is aware of. Each of the deployed assets provides one or more Application Programming Interfaces APIs that can be invoked to request information therefrom. System monitoring tool is programmed to use those APIs to automatically import the information. Imported information can include but is not limited to device type latency operations per second faults and the like. The scope of embodiments is not limited to any particular asset information and any appropriate asset information may be imported in various embodiments.

Monitoring tool is operable to gather asset health information from any system asset no matter the vendor as long as monitoring tool is programmed to use appropriate protocols defined by the relevant APIs. While many vendors use different API s monitoring tool may save and access communication protocol instructions for some or all of the different storage assets.

In one example a storage controller has a counter that increments at each Input Output I O operation. One or more relevant APIs define communication protocols for monitoring tool to request and receive the counter information for the storage controller. Monitoring tool accesses communication protocol instructions e.g. at RAM at server for the storage asset and desired information and uses such instructions to formulate its request for the counter information. Monitoring tool is programmed to access the communication protocol instructions as needed and the communication protocol instructions can be pre programmed and or continually updated to include relevant APIs for each of the different system assets. Monitoring tool is therefore able to request information from system assets regardless of vendor as long as monitoring tool can access communication protocol instructions for those system assets for the desired information.

Of course a computer system may include a variety of different types of system assets. Monitoring tool polls the various system assets periodically and receives raw data therefrom. Monitoring tool then creates one or more data logs with the data received from the system assets. The data log may be stored e.g. at the server in RAM in any appropriate format such as key value pairs in a database or as one or more files. Monitoring tool creates a comprehensive data log by periodically polling each available asset and collecting data therefrom.

The scope of embodiments may include any appropriate raw or processed information in a data log. One example data log entry includes an identifier of an asset a timestamp performance and configuration data and an indication of whether an error exists. Examples of derived performance information that may be included in a data log include latency I O Operations per Second IOPS throughput e.g. in Gb sec CPU usage memory usage and IP throughput network throughput e.g. in Gb sec .

Display includes asset indication . In the example of a given system asset is also referred to as a data source. In this example the data source is a switching component referred to as B. A Summary section includes fields . Field indicates that an acquisition unit is local. Type field provides a vendor and model name for asset B. Field indicates that the system has collected configuration and performance data for asset B. Examples of configuration data include names of allocated assets e.g. volumes and VMs and hypervisors capacity of volumes speed of network ports amount of memory allocated for an asset CPU count etc. Field provides a comment section which in this example indicates that a technician is working on asset B. Comments may be entered e.g. in another interface display for providing work notes.

Field includes an indication of the most recent configuration status of the asset. In this example the most recent status includes no errors so a success indication is provided. Similarly performance status is currently error free so an OK status is given at field . Field indicates a currently installed software package for asset B. In various embodiments software package information may or may not be gathered from data logs. In one example monitoring tool may include a software patch management tool that provides information for field .

Below the Summary portion is the Event Timeline portion. Display in this example includes two timelines and . However other embodiments may include any appropriate number and types of timelines. The example of shows timeline to summarize configuration data and timeline to summarize performance data.

Timeline shows time periods . Each time period on timeline corresponds to a range of consecutive data log timestamps having a same state. For instance time period indicates a range of consecutive time stamps in the data log in which B s configuration data showed no errors. Similarly time period indicates a range of consecutive time stamps in the data log in which B s configuration data showed one or more errors. Time period however is different from time periods and because it indicates a period of data collection being suspended. Thus it represents a time without collected configuration data in the data log.

In the example of each of the time periods is given a visual cue in this case differing fill patterns. One fill pattern is used for periods of no error status a second fill pattern is used for periods of error present status a third fill pattern is used for periods of data collection being suspended. The scope of embodiments includes any appropriate visual cue. For instance another example visual cue includes color contrast where blue is used for periods of no error status red is used for periods of error present status and white is used for periods of data collection being suspended.

Timeline is similar to timeline in that it also plots health status information visually against time. Timeline shows performance health status in time periods . For instance time periods and indicate errors whereas the other time periods of timeline show either no errors or collection suspended. Examples of performance errors include loss of functionality unacceptable performance in a metric such as IOPS or CPU usage or latency or other less than optimal behavior in asset B. indicates that timelines and show status information for a cumulative period of 15 days however other embodiments may plot status against time for any appropriate amount of time.

Display is interactive. Any tool now known or later developed to provide an interactive Graphical User Interface GUI may be used in various embodiments. For instance HTML or JAVA or other appropriate web technologies may be used to form each of the time periods and as an active screen control similar to a button or other selectable element. A user then employs a selection method such as moving a cursor or touching a touch screen to select one or more time periods from timelines and .

In the present example shows time period having been selected. Another visual cue is used to indicate the selection of time period in this case highlighting. Monitoring tool includes functionality to recognize that a time period has been selected and to display at least a portion of the data log that corresponds to the selected time period. Thus in response to the selection of time period monitoring tool renders log portion which shows data from the data log for asset B during time period . Field shows a specific date and time range corresponding to the time stamps within the data log during time period . Log portion shows configuration log data for asset B. In this example one of the switch elements of asset B shows an error Failed to parse connectivity table. In some embodiments only the error data is shown whereas data log entries success are omitted.

The embodiment of provides one or more advantages over prior solutions. For instance in the present embodiment a human user may briefly scan timelines and for an easily digestible summary of health status information. The human user may then acquire more in depth information for the health status in a particular time period by selecting a time period. The monitoring tool then displays a corresponding portion of the data log which the user can read for more specific information regarding the particular error. Such embodiment stands in contrast to prior solutions that provided data log information only.

At action the application accesses a data log associated with the system asset wherein the data log includes a store of the health information of the system asset. As noted above The data log may be stored e.g. at the server in RAM or other memory or at another device. The data log may also be implemented using any appropriate format such as key value pairs in a database or as one or more files. The system creates a comprehensive data log by periodically polling each available asset and collecting data therefrom. Each entry in the data log in this example includes at least a timestamp and an indication of a health status of the system asset so that over time the data log represents health status information over a significant period of time such as weeks or years.

The accessing at action may be performed in any appropriate manner. For instance if the data log is stored at the same device that runs the application then the application may use its operating system to access the relevant data. If the data log is stored remotely the application may make one or more requests over a network. Action may be performed in some embodiments in response to detecting that a user has accessed a timeline interface corresponding to the particular system asset of interest.

At action the application identifies a plurality of state entries in the store of the health information. In one example the application parses text of the various entries in the data log to identify entries that are relevant. Thus if the application is building a timeline for a particular asset to show the health of the asset over three weeks the application may parse the text of the entries to identify entries corresponding to the particular system asset within the specified time period.

System asset status may include as many different health states as is desirable for a particular system. In one example there are three health states no error error present and data collection suspended with each health state corresponding to a status. However other systems may include simple error or no error health states whereas other systems may include more health states to indicate a larger variety of possible errors.

Action may also include extracting the identified data log entries. Thus the application may copy information from the identified data log entries to a processor cache to be processed.

At action the application generates a timeline based on the state entries. For instance the application may generate the timeline as a group of discrete points each point corresponding to a timestamp entry. In such an embodiment the application logically assigns each entry to a point in a chronological order based on timestamps.

Additionally or alternatively the application may generate the timeline portion by portion where each portion represents multiple timestamp entries with the same system asset status. Thus the application may gather consecutively stamped entries and create a timeline portion with a length proportionally related to the timespan represented by the span of timestamps. The application may create as many portions as there are health status events during the overall time period.

Further in this example the timeline has a plurality of chronological portions defined by the timestamps. Each portion of the timeline is assigned a visual cue based on a state associated with its respective state entries. In one example the visual cue may include a color assignment and or a fill pattern e.g. a cross hatch . However the scope of embodiments may include any appropriate distinguishing cue. In the example of fill patterns are used to indicate health status with one fill pattern indicting error present another fill pattern indicating no error and another fill pattern indicating data collection is suspended.

In some examples the application generates the timeline as an interactive interface. The application may generate an interactive interface by creating one or more of the visual elements of the interface as a conventional web based active screen control. Thus the application may organize the timeline elements as well as other elements into HTML or JAVA code. Examples of active screen controls include buttons and other selectable elements. The embodiment of includes creating the portions and as selectable elements in a GUI.

At action the application visually renders the timeline upon a computer display as in display of . Action may include e.g. sending the HTML or other code defining the interface to a browser. As shown in the example of each timeline and includes a visual element with a length thereof representing a cumulative span of time of three weeks. Each of the portions and also has a length proportional to the time it represents with each of the portions placed chronologically within its respective timeline.

The scope of embodiments is not limited to the specific actions shown in . Rather other embodiments may add omit rearrange or modify actions. In one example the application detects that a user has selected a portion of the timeline by for instance detecting that a user has selected the portion with a cursor or by touching a touch screen. The code defining the display then activates a routine that accesses and displays portions of the data log that correspond to the selected portion. An example is shown in log portion of . A human user may select a portion of the timeline in order to view the corresponding log entries.

Further some embodiments include the application collecting the data to generate the data log. As noted above in some examples the application is operable to gather asset health information from any system asset no matter the vendor because the application is pre programmed to use appropriate protocols defined by the relevant APIs. Thus the application saves and accesses communication protocol instructions for some or all of the different storage assets. The application polls the various assets using the pre programmed protocols to gather the data and generates the data log from the gathered data.

For instance attention is drawn to which shows an example scenario according to one embodiment. Application includes instructions stored to RAM or other memory at server not shown allowing application to use appropriate protocols to communicate with assets . Application also includes data log stored to RAM or other memory at server not shown . Each of the storage assets are provided by different vendors. For instance each asset may include a storage system from a different company with different underlying communication protocols. Application is operable to request and receive system asset health information from each asset .

Assets each have communication protocols that are defined by APIs in this case API1 API2 and API3 respectively. As noted above each vendor may have very different protocols. In this example instructions are pre programmed with the protocols defined by the different APIs. Monitoring tool is programmed to access the communication protocol instructions as needed and the communication protocol instructions are pre programmed and or continually updated to include relevant APIs for each of the different system assets. Monitoring tool is therefore able to request information from system assets regardless of vendor as long as monitoring tool can access communication protocol instructions for those system assets for the desired information. Thus in one example monitoring tool accesses asset by first examining instructions for the protocol defined by API1 and after retrieving the relevant portions of instructions application formulates a request for information according to API1. Of course application would do the same for assets and respectively when requesting information therefrom. illustrates a use case in which heterogeneous storage systems from different vendors are plugged into monitoring tool so that monitoring tool can gather information from disparate sources in a combined GUI e.g. of .

It should be noted that the examples above are given in the context of a network storage system through the scope of embodiments is not so limited. Rather the concepts described above may be implemented in any type of computing cluster wherein performance data is sampled and analyzed. One example embodiment includes a cluster of server nodes where performance data for the server nodes themselves as well as for the applications running on the server nodes is sampled according to a workload of each node or application. Process would generate and display a timeline relevant to the health of an asset of the server cluster.

When implemented via computer executable instructions various elements of embodiments of the present disclosure are in essence the software code defining the operations of such various elements. The executable instructions or software code may be obtained from a non transient tangible readable medium e.g. a hard drive media optical media RAM EPROM EEPROM tape media cartridge media flash memory ROM memory stick network storage device and or the like . In fact readable media can include any medium that can store information.

In the embodiments described above example clients server and storage controllers include processor based devices and may include general purpose processors or specially adapted processors e.g. an Application Specific Integrated Circuit . Such processor based devices may include or otherwise access the non transient tangible machine readable media to read and execute the code. By executing the code the one or more processors perform the actions of the process of .

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. One of ordinary skill in the art would recognize many variations alternatives and modifications. Thus the scope of the invention should be limited only by the following claims and it is appropriate that the claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

