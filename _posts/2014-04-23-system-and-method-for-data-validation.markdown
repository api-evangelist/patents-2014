---

title: System and method for data validation
abstract: Systems and methods for validating data in a communication network environment include receiving a data transformation specification from a user. The data transformation specification is analyzed to determine data transformation rules which are indicative of a relationship between corresponding fields of the source repository and the target repository. Test cases and test scripts are generated based on the data transformation rules and the test cases and the test scripts are executed on the source repository and the target repository to validate the relationship between the corresponding fields of the source repository and the target repository. Thereafter, a log file, indicative of the outcome of the execution of the test cases and the test scripts, is generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424290&OS=09424290&RS=09424290
owner: Wipro Limited
number: 09424290
owner_city: Bangalore
owner_country: IN
publication_date: 20140423
---
This application claims the benefit of Indian Patent Application No. 1267 CHE 2014 filed Mar. 11 2014 which is hereby incorporated by reference in its entirety.

The present subject matter is related in general to data validation and in particular but not exclusively to a method and system for validating data in a communication network environment.

In recent time most of the organizations use various systems and methods to manage their day to day working. Examples of such software tools may include enterprise resource planning ERP systems customer relationship management CRM systems and supply chain management SCM systems. Each of these software tools is associated with various data repositories and has its own respective data model. Examples of data stored in the data repositories include customer data transaction data business research data and so on.

It is well known by those skilled in the art that each of the software tools may use retrieve and store the data in different formats. Further in an organization the various software tools configured to manage the day to day working of the organization are often interlinked. This makes it important that the data used and stored by each of these software tools are accurate updated and consistent.

However with time various changes take place in the organization which may involve installation of new applications re platforming of applications migration of data repositories from one vendor to a different vendor and so on. In many situations this involves migrating the data from an existing data repository to a new data repository.

During this migration many errors such as system field limitations mergers and migrations data repository migrations inconsistent standards discrepancies in data format difference in structure of data repositories missing data data fields filled with default values or nulls spelling errors and data anomalies may creep in and degrade the quality of data. This adversely affects the functioning of the new application or re platformed application or the new data repository. Erroneous data transformation may adversely impact the functioning of the organization. For example the organization having erroneous data transformation processes may suffer from losses arising from extra costs to prepare reconciliations delay or scrapping migration to a new application or new data repository failure to bill or collect receivables inability to deliver orders failure to meet contracts and so on. The erroneous data can also lead to incompetent future decisions of enterprise and has the potential to negatively impact the growth of the enterprise.

Disclosed herein are systems and methods for validating data in a communication network environment. In one example the system for validating data in a communication network environment comprises a processor a memory communicatively coupled to the processor. The system further comprises a processor and a memory communicatively coupled to the processor wherein the memory stores processor executable instructions which on execution cause the processor to receive a data transformation specification from a user analyze the data transformation specification to determine data transformation rules wherein the data transformation rules are indicative of a relationship between corresponding fields of the source repository and the target repository generate test cases and test scripts based on the data transformation rules execute the test cases and the test scripts on the source repository and the target repository to validate the relationship between the corresponding fields of the source repository and the target repository and generate a log file indicative of the outcome of the execution of the test cases and the test scripts.

In an aspect of the invention the method for validating data in a communication network environment comprises a data transformation specification from a user and analyzing the data transformation specification to determine data transformation rules wherein the data transformation rules are indicative of a relationship between corresponding fields of the source repository and the target repository. The method further comprises generating test cases and test scripts based on the data transformation rules and executing the test cases and the test scripts on the source repository and the target repository to validate the relationship between the corresponding fields of the source repository and the target repository. Thereafter a log file indicative of the outcome of the execution of the test cases and the test scripts is generated

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

It should be appreciated by those skilled in the art that any block diagrams herein represent conceptual views of illustrative systems embodying the principles of the present subject matter. Similarly it will be appreciated that any flow charts flow diagrams state transition diagrams pseudo code and the like represent various processes which may be substantially represented in computer readable medium and executed by a computer or processor whether or not such computer or processor is explicitly shown.

In the present document the word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment or implementation of the present subject matter described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Systems and methods for validating data in a communication network environment are described herein. The systems and methods may be implemented in a variety of computing systems. The computing systems that can implement the described method s include but are not limited to a server a desktop personal computer a notebook or a portable computer a mainframe computer and in a mobile computing environment. Although the description herein is with reference to certain computing systems the systems and methods may be implemented in other computing systems albeit with a few variations as will be understood by a person skilled in the art.

In recent time most of the organizations use various systems and methods to manage their day to day working. Examples of such software tools may include enterprise resource planning ERP systems customer relationship management CRM systems and supply chain management SCM systems. Each of these software tools is associated with various data repositories and has its own respective data model. Examples of data stored in the data repositories include customer data transaction data business research data and so on.

It is well known by those skilled in the art that each of the software tools may use retrieve and store the data in different formats. With time the organization may decide to update the installed applications or replace the installed applications with different applications or replace the data repositories or even re platform the installed applications. In many situations the new updated applications or data repositories may have different data formats data types and so on. Hence while transforming the data from a source data repository to a target data repository various data transformation rules are determined which state the relationship between corresponding tables fields of the source data repository and the target data repository. The data transformation operation converts a set of data values from the data format of the source data repository into the data format of the destination data repository. The data transformation operation is usually carried out in two steps. In the first step the corresponding fields and tables of the source data repository and the destination data repository are mapped. Thereafter a code snippet is generated which on execution causes the actual data transformation. In most conventional systems the data transformation rules are then tested manually to ensure that the data transformation has been performed without any errors. However the conventional techniques for verifying data transformation involve a substantial amount of manual actions or manual interventions. Further in many cases mapping the data transformation may be from multiple data sources for example multiple databases stored in the source data repository. In such situations preserving data integration and synchronization functionality becomes very challenging. Hence various errors such as data entry errors limited validation of data at the time of entry system field limitations mergers and migrations data repository migrations inconsistent standards discrepancies in data format difference in structure of data repositories missing data data fields filled with default values or nulls spelling errors and data anomalies may creep in which may adversely affect the functioning of the new updated applications or data repositories.

The present subject matter discloses systems and methods for validating data in a communication network environment. In one implementation a data validation system also referred to herein as a data validation apparatus validates the data transformation processes when transferring data from a source data repository to a target data repository. The source data repository and the target data repository may be implemented using any conventional database systems such as Sybase MySQL DB2 SQL Server Oracle . It should be appreciated by those skilled in the art that though the systems and methods for validating data in a communication network environment are described in the context of validating data transformations when migrating from the source data repository to the target data repository the same should not be construed as a limitation. For example the systems and methods for validating data in a communication network environment may be implemented for various other purposes such for determining data consistency and determining compatibility of data repository with applications.

In one example the data validation system prompts the user to input a data transformation specification. In one example the data transformation specification may include the schema of the source data repository and the target data repository and also include the rules in human readable language based on which the data transformation is to be done. On receiving the data transformation specification the data validation system parses the same and processes the parsed data transformation specification to generate data transformation rules. The data transformation rules may comprise assign rules which assign a default value to particular fields pattern Replace rules in which patterns in the values of the fields are replaced replace rules in which the values of the fields are replaced and truncate rules in which if the length of the value of the field exceeds a pre defined length then the rule truncates the value to the pre defined length.

Thereafter the data validation system generates the test cases and test scripts to validate the data transformation rules. In one example the data validation system may be communicatively coupled to any third party testing tool to generate the test cases and test scripts. In yet another example the user may feed the test cases and test scripts to the data validation system.

On receiving the test cases and the test scripts the data validation system determines whether the number of data records to be processed i.e. validated is more than a critical threshold. If the number of data records to be processed exceeds a critical threshold then the data validation system initiates a parallel execution of the test cases. If the number of data records to be processed is less than a critical threshold then the data validation system initiates a serial execution of the test cases. In one example the data validation system may execute the test cases and test scripts based on the associated data transformation rule. For example the data validation system may execute test cases associated with data transformation rule N before executing test cases associated with data transformation rule M . This may facilitate the data validation system to exit the validation process on determining the data transformation rule N to have been violated and thus save processing power and memory resources by not executing data transformation rule M . In one example the data validation system may determine the sequence of execution of test cases and test scripts based on the optimized use of processing power and memory.

On completion of the execution of the test cases and test scripts the data validation generates a log file. The log file indicates the result of the test cases and mentioned the data transformation rules that have been validated and the data transformation rules that have been violated. In one example the log file may mention the primary key or the record number of the records which have violated the data transformation rules. Thus the data validation system implements a fast data validation process which eliminates manual intervention and hence eliminates errors caused due to manual processing. The data validation system also eliminates the errors caused due to difference in understanding of different testing professionals of the data transformation specification.

The working of the systems and methods for validating data in a communication network environment is described in greater detail in conjunction with . It should be note that the description and drawings merely illustrate the principles of the present subject matter. It will thus be appreciated that those skilled in the art will be able to devise various arrangements that although not explicitly described or shown herein embody the principles of the present subject matter and are included within its spirit and scope. Furthermore all examples recited herein are principally intended expressly to be only for pedagogical purposes to aid the reader in understanding the principles of the present subject matter and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and embodiments of the present subject matter as well as specific examples thereof are intended to encompass equivalents thereof. While aspects of the systems and methods can be implemented in any number of different computing systems environments and or configurations the embodiments are described in the context of the following exemplary system architecture s .

The data validation system may be implemented in a variety of computing systems such as a laptop computer a desktop computer a notebook a workstation a mainframe computer a server a network server and the like. It will be understood that the data validation system may be accessed by users through one or more client devices N collectively referred to as client devices . Examples of the client devices include but are not limited to a desktop computer a portable computer a mobile phone a handheld device a workstation. The client devices may be used by various stakeholders or end users of the organization such as project managers database administrators and application developers. As shown in the figure such client devices are communicatively coupled to the data validation system through a network for facilitating one or more end users to access and or operate the data validation system .

The network may be a wireless network wired network or a combination thereof. The network can be implemented as one of the different types of networks such as intranet local area network LAN wide area network WAN the internet and such. The network may either be a dedicated network or a shared network which represents an association of the different types of networks that use a variety of protocols for example Hypertext Transfer Protocol HTTP Transmission Control Protocol Internet Protocol TCP IP Wireless Application Protocol WAP etc. to communicate with each other. Further the network may include a variety of network devices including routers bridges servers computing devices storage devices etc.

In one implementation the data validation system includes a processor a memory coupled to the processor and interfaces . The processor may be implemented as one or more microprocessors microcomputers microcontrollers digital signal processors central processing units state machines logic circuitries and or any devices that manipulate signals based on operational instructions. Among other capabilities the processor is configured to fetch and execute computer readable instructions stored in the memory . The memory can include any non transitory computer readable medium known in the art including for example volatile memory e.g. RAM and or non volatile memory e.g. EPROM flash memory etc. .

The interface s may include a variety of software and hardware interfaces for example a web interface a graphical user interface etc. allowing the data validation system to interact with the client devices . Further the interface s may enable the data validation system respectively to communicate with other computing devices. The interface s can facilitate multiple communications within a wide variety of networks and protocol types including wired networks for example LAN cable etc. and wireless networks such as WLAN cellular or satellite. The interface s may include one or more ports for connecting a number of devices to each other or to another server.

In one example the data validation system includes modules and data . In one embodiment the modules and the data may be stored within the memory . In one example the modules amongst other things include routines programs objects components and data structures which perform particular tasks or implement particular abstract data types. The modules and may also be implemented as signal processor s state machine s logic circuitries and or any other device or component that manipulate signals based on operational instructions. Further the modules can be implemented by one or more hardware components by computer readable instructions executed by a processing unit or by a combination thereof.

In one implementation the modules further include a user input module a test data workflow module a data transformation validation module a data access module a script generation module and other modules . The other modules may perform various miscellaneous functionalities of the data validation system . It will be appreciated that such aforementioned modules may be represented as a single module or a combination of different modules.

In one example the data serves amongst other things as a repository for storing data fetched processed received and generated by one or more of the modules . In one implementation the data may include for example transformation rules repository temporary data validation reports repository and other data . In one embodiment the data may be stored in the memory in the form of various data structures. Additionally the aforementioned data can be organized using data models such as relational or hierarchical data models. The other data may be used to store data including temporary data and temporary files generated by the modules for performing the various functions of the data validation system .

In one implementation the data validation system is communicatively coupled with a source data repository and a target data repository . The source data repository and the target data repository may comprise one or more commercially available data storage media such as compact discs magnetic tapes SATA disks and so on. The source data repository and the target data repository may also implement various commercially available database management systems such as Oracle Database and Microsoft SQL Server. In one example the source data repository and the target data repository stores raw data which may be further accessed or processed by various applications used in the organization or its clients. In one implementation the source data repository and or the target data repository may be implemented within the data validation system .

In operation the user input module prompts the user to input a data transformation specification. In one example the user input module may generate various graphical user interfaces and or command line interfaces to facilitate the user to enter the data transformation specification. In one example the data transformation specification may the schema of the source data repository and the target data repository . The user input module may facilitate the user to view the schemas in a graphical manner for example in form of a tree structure to facilitate easy creation of mappings of the corresponding fields and tables of the source data repository and the target repository . In one example the user input module may facilitate the user to drag and drop fields from the source data repository to the target data repository for the purpose of creating mappings.

In one implementation the user input module further prompts the user to input the configuration parameters of the source data repository and the target data repository . The configuration parameters may include the authentication details such as username and password to access the source data repository and the target data repository the internet protocol IP addresses of the source data repository and the target data repository the port numbers on which the source data repository and the target data repository are operating the protocol to access the source data repository and the target data repository and so on. On receiving the configuration parameters the data access module validates the configuration parameters and ascertains whether connection with the source data repository and the target data repository can be established with the received configuration parameters.

In one example the test data workflow module analyzes the data transformation specification to generate data transformation rules. In one example the test data workflow module parses the data transformation specification to determine the data transformation rules. The data transformation rules are indicative of the relationship between the values of the corresponding fields of the source data repository and the target data repository . The data transformation rules may modify the values or the patterns in values while transforming from the source data repository to the target data repository . The data transformation rules may be clubbed with conditional rules so as to modify the values or patterns only in fields of the source data repository that meet the pre defined criteria. In one example the test data workflow module may store the data transform rules as transformation rules repository .

Thereafter the test data workflow module generates test cases for validating the data transformation rules. In one implementation the test data workflow module may be communicatively coupled with any commercially available testing tool for the purpose of creation of test cases. In one example the test data workflow module also facilitates the user to select the test cases for testing the data transformation rules. Thereafter the script generation module generates test scripts for executing the test cases.

In one example the script generation module may generate the test scripts in a way so as to execute the test cases based on the associated data transformation rule. For example the script generation module may execute test cases associated with data transformation rule N before executing test cases associated with data transformation rule M . On completion of the generation of test scripts the data transformation validation module executes the test scripts. The order in which the test cases are to be executed facilitates the data transformation validation module to exit the validation process on determining the data transformation rule N to have been violated and thus save processing power and memory resources by not executing data transformation rule M . In one example the data transformation validation module may determine the sequence of execution of test cases and test scripts based on the optimized use of processing power and memory.

On completion of the execution of the test cases and test scripts the data transformation validation module generates a log file. The log file indicates the result of the test cases and mentioned the data transformation rules that have been validated and the data transformation rules that have been violated. In one example the log file may mention the primary key or the record number of the records which have violated the data transformation rules.

In one example the data transformation validation module may generate various reports from the log files which may be used by the users such as developers and or database administrators to analyze any issues that may have taken place during the data transformation process. For example the reports may include various statistical data on the data validation process in tabular format or in the form of charts that may provide the user with an overview of the results of the data validation process.

Thus the data validation system implements a fast data validation process which eliminates manual intervention and hence eliminates errors caused due to manual processing. The data validation system also eliminates the errors caused due to difference in understanding of different testing professionals of the data transformation specification. The detailed working of the data validation system is further explained in conjunction with the .

The order in which the methods and is described is not intended to be construed as a limitation and any number of the described method blocks can be combined in any order to implement the methods and or alternative methods. Additionally individual blocks may be deleted from the methods and without departing from the spirit and scope of the subject matter described herein. Furthermore the methods and can be implemented in any suitable hardware software firmware or combination thereof. With reference to method as depicted in as shown in block a data transformation specification is received from a user. In one example the user input module may generate various graphical user interfaces and or command line interfaces to facilitate the user to enter the data transformation specification.

As illustrated in block the data transformation specification is analyzed to generate data transformation rules. In one example the test data workflow module parses the data transformation specification to determine the data transformation rules.

As depicted in block test cases and test scripts are generated based on the data transformation rules. In one example the test data workflow module generates test cases and test scripts based on the data transformation rules.

At block it is determined whether the number of records is above a critical threshold. In one example the data transformation validation module determines whether the number of records is above a critical threshold.

If at block the number of records is determined to be above the critical threshold then as shown in block parallel execution of the test cases and test scripts is initiated. In one example the data transformation validation module initiates parallel execution of the test cases and test scripts on determining the number of records to be above the critical threshold.

If at block the number of records is determined to be below the critical threshold then as shown in block serial execution of the test cases and test scripts is initiated. In one example the data transformation validation module initiates serial execution of the test cases and test scripts on determining the number of records to be below the critical threshold.

As shown in block a log file is generated wherein the log file is indicative of the result of comparison of data in a source repository and a target data repository. In one example the data transformation validation module generates a log file. The log file indicates the result of the test cases and mentioned the data transformation rules that have been validated and the data transformation rules that have been violated.

As illustrated in block a report is generated for data transformation based on the log file. In one example the data transformation validation module may generate various reports from the log files which may be used by the users such as developers and or database administrators to analyze any issues that may have taken place during the data transformation process.

With reference to method as depicted in as shown in block a source repository and a target repository is ascertained based on user input. In one example the user input module prompts the user to enter the identifiers for the source repository and the target repository. The identifiers may be server name IP address of the source repository and the target repository and so on.

At block configuration parameters of the source repository and the target repository are received. In one example the user input module may generate various graphical user interfaces and or command line interfaces to facilitate the user to enter the configuration parameters of the source repository and the target repository.

As illustrated in block connections are established with the source repository and the target repository. In one example the data access module establishes the connections are established with the source repository and the target repository using the received configuration parameters.

As depicted in block the data transformation rules are retrieved. In one example the test data work flow module retrieves the data transformation rules.

At block test cases and test scripts are generated based on the data transformation rules. In one example the test data work flow module generates the test cases based on the data transformation rules. Thereafter the script generation module generates the test scripts for executing the test cases on the source repository and the target repository.

As illustrated in block the test cases and test scripts are executed on the source repository and the target repository. In one example the data transformation validation module initiates execution of the test cases and test scripts on the source repository and the target repository.

As shown in block at least one report is generated based on the execution. In one example the data transformation validation module may generate various reports based on the execution of the test scripts and test cases which may be used by the users such as developers and or database administrators to analyze any issues that may have taken place during the data transformation process.

Processor may be disposed in communication with one or more input output I O devices via I O interface . The I O interface may employ communication protocols methods such as without limitation audio analog digital monaural RCA stereo IEEE 1394 serial bus universal serial bus USB infrared PS 2 BNC coaxial component composite digital visual interface DVI high definition multimedia interface HDMI RF antennas S Video VGA IEEE 802.n b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA global system for mobile communications GSM long term evolution LTE WiMax or the like etc.

Using the I O interface the computer system may communicate with one or more I O devices. For example the input device may be an antenna keyboard mouse joystick infrared remote control camera card reader fax machine dongle biometric reader microphone touch screen touchpad trackball sensor e.g. accelerometer light sensor GPS gyroscope proximity sensor or the like stylus scanner storage device transceiver video device source visors etc. Output device may be a printer fax machine video display e.g. cathode ray tube CRT liquid crystal display LCD light emitting diode LED plasma or the like audio speaker etc. In some embodiments a transceiver may be disposed in connection with the processor . The transceiver may facilitate various types of wireless transmission or reception. For example the transceiver may include an antenna operatively connected to a transceiver chip e.g. Texas Instruments WiLink WL1283 Broadcom BCM4750IUB8 Infineon Technologies X Gold 418 PMB9800 or the like providing IEEE 802.11a b g n Bluetooth FM global positioning system GPS 2G 3G HSDPA HSUPA communications etc.

In some embodiments the processor may be disposed in communication with a communication network via a network interface . The network interface may communicate with the communication network . The network interface may employ connection protocols including without limitation direct connect Ethernet e.g. twisted pair 10 100 1000 Base T transmission control protocol internet protocol TCP IP token ring IEEE 802.11a b g n x etc. The communication network may include without limitation a direct interconnection local area network LAN wide area network WAN wireless network e.g. using Wireless Application Protocol the Internet etc. Using the network interface and the communication network the computer system may communicate with devices and . These devices may include without limitation personal computer s server s fax machines printers scanners various mobile devices such as cellular telephones smartphones e.g. Apple iPhone Blackberry Android based phones etc. tablet computers eBook readers Amazon Kindle Nook etc. laptop computers notebooks gaming consoles Microsoft Xbox Nintendo DS Sony PlayStation etc. or the like. In some embodiments the computer system may itself embody one or more of these devices.

In some embodiments the processor may be disposed in communication with one or more memory devices e.g. RAM ROM etc. via a storage interface . The storage interface may connect to memory devices including without limitation memory drives removable disc drives etc. employing connection protocols such as serial advanced technology attachment SATA integrated drive electronics IDE IEEE 1394 universal serial bus USB fiber channel small computer systems interface SCSI etc. The memory drives may further include a drum magnetic disc drive magneto optical drive optical drive redundant array of independent discs RAID solid state memory devices solid state drives etc.

The memory devices may store a collection of program or database components including without limitation an operating system user interface application web browser mail server mail client user application data e.g. any data variables or data records discussed in this disclosure etc. The operating system may facilitate resource management and operation of the computer system . Examples of operating systems include without limitation Apple Macintosh OS X UNIX Unix like system distributions e.g. Berkeley Software Distribution BSD FreeBSD NetBSD OpenBSD etc. Linux distributions e.g. Red Hat Ubuntu Kubuntu etc. IBM OS 2 Microsoft Windows XP Vista 7 8 etc. Apple iOS Google Android Blackberry OS or the like. User interface may facilitate display execution interaction manipulation or operation of program components through textual or graphical facilities. For example user interfaces may provide computer interaction interface elements on a display system operatively connected to the computer system such as cursors icons check boxes menus scrollers windows widgets etc. Graphical user interfaces GUIs may be employed including without limitation Apple Macintosh operating systems Aqua IBM OS 2 Microsoft Windows e.g. Aero Metro etc. Unix X Windows web interface libraries e.g. ActiveX Java Javascript AJAX HTML Adobe Flash etc. or the like.

In some embodiments the computer system may implement a web browser stored program component. The web browser may be a hypertext viewing application such as Microsoft Internet Explorer Google Chrome Mozilla Firefox Apple Safari etc. Secure web browsing may be provided using HTTPS secure hypertext transport protocol secure sockets layer SSL Transport Layer Security TLS etc. Web browsers may utilize facilities such as AJAX DHTML Adobe Flash JavaScript Java application programming interfaces APIs etc. In some embodiments the computer system may implement a mail server stored program component. The mail server may be an Internet mail server such as Microsoft Exchange or the like. The mail server may utilize facilities such as ASP ActiveX ANSI C C Microsoft .NET CGI scripts Java JavaScript PERL PHP Python WebObjects etc. The mail server may utilize communication protocols such as internet message access protocol IMAP messaging application programming interface MAPI Microsoft Exchange post office protocol POP simple mail transfer protocol SMTP or the like. In some embodiments the computer system may implement a mail client stored program component. The mail client may be a mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Mozilla Thunderbird etc.

In some embodiments computer system may store user application data such as the data variables records etc. as described in this disclosure. Such databases may be implemented as fault tolerant relational scalable secure databases such as Oracle or Sybase. Alternatively such databases may be implemented using standardized data structures such as an array hash linked list struct structured text file e.g. XML table or as object oriented databases e.g. using ObjectStore Poet Zope etc. . Such databases may be consolidated or distributed sometimes among the various computer systems discussed above in this disclosure. It is to be understood that the structure and operation of the any computer or database component may be combined consolidated or distributed in any working combination.

The specification has described a method and a system for validating data in a communication network environment. The illustrated steps are set out to explain the exemplary embodiments shown and it should be anticipated that ongoing technological development will change the manner in which particular functions are performed. These examples are presented herein for purposes of illustration and not limitation. Further the boundaries of the functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternative boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. Alternatives including equivalents extensions variations deviations etc. of those described herein will be apparent to persons skilled in the relevant art s based on the teachings contained herein. Such alternatives fall within the scope and spirit of the disclosed embodiments. Also the words comprising having containing and including and other similar forms are intended to be equivalent in meaning and be open ended in that an item or items following any one of these words is not meant to be an exhaustive listing of such item or items or meant to be limited to only the listed item or items. It must also be noted that as used herein and in the appended claims the singular forms a an and the include plural references unless the context clearly dictates otherwise.

Furthermore one or more computer readable storage media may be utilized in implementing embodiments consistent with the present disclosure. A computer readable storage medium refers to any type of physical memory on which information or data readable by a processor may be stored. Thus a computer readable storage medium may store instructions for execution by one or more processors including instructions for causing the processor s to perform steps or stages consistent with the embodiments described herein. The term computer readable medium should be understood to include tangible items and exclude carrier waves and transient signals i.e. be non transitory. Examples include random access memory RAM read only memory ROM volatile memory nonvolatile memory hard drives CD ROMs DVDs flash drives disks and any other known physical storage media.

It is intended that the disclosure and examples be considered as exemplary only with a true scope and spirit of disclosed embodiments being indicated by the following claims.

