---

title: Method and system for changing execution environments during application execution
abstract: Some embodiments of the present invention provide a system that executes an application. During operation, the system starts the application using a web browser. Next, the system receives an execution environment change notification from a user of the application, and in response to the notification transitions the application to a second execution environment without interrupting the execution of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09531840&OS=09531840&RS=09531840
owner: ORACLE INTERNATIONAL CORPORATION
number: 09531840
owner_city: Redwood Shores
owner_country: US
publication_date: 20140414
---
This application is a continuation of and hereby claims priority under 35 U.S.C. 120 to a parent application pending U.S. patent application Ser. No. 12 248 349 entitled Method and System for Changing Execution Environments during Application Execution by inventor Kenneth B. Russell filed on 9 Oct. 2008. This parent application claims priority under 35 U.S.C. 119 to U.S. Provisional Patent Application No. 60 978 871 filed on 10 Oct. 2007 entitled Dragging Java Applets to the Desktop by inventors Kenneth B. Russell and Hans E. Muller.

The present invention relates to systems that support execution of applications. More specifically the present invention relates to a method and system for changing execution environments during the execution of applications.

An applet is a software component that can execute in the context of another program such as a web browser. Examples of applets include Java Java is a registered trademark of Sun Microsystems Inc. applets and Flash Flash is a registered trademark of Adobe Systems Inc. movies. In addition applets often perform specific functions beyond the default capabilities of their execution environments e.g. web browsers desktop environments . For example applets may provide features such as games math or physics simulations calculators timers calendars and or weather reports.

An applet is often run within a container provided by a host program a plugin a virtual machine and or a compatible application. The applet may also receive services through the container from the container provider. Furthermore termination of the container provider typically results in termination of the applet. For example an applet running through a web browser may stop executing when the web browser is closed. Consequently applet usage may be limited by the applet s inability to run independently of the original execution environment.

Some embodiments of the present invention provide a system that executes an application. During operation the system starts the application using a web browser. Next the system receives an execution environment change notification from a user of the application and in response to the notification transitions the application to a second execution environment without interrupting the execution of the application.

In some embodiments the application and the web browser are executed in separate operating system processes.

In some embodiments the second execution environment can be a local desktop environment a virtual desktop environment a remote desktop environment or a cooperating application.

In some embodiments a message passing service implementation is used to provide services to the application from the web browser.

In some embodiments the application is transitioned to the second execution environment by replacing the message passing service implementation with a standalone service implementation wherein the standalone service implementation ignores messages between the application and the web browser.

In some embodiments the application is transitioned to the second execution environment by replacing the message passing service implementation with a new message passing service implementation wherein the new message passing service implementation facilitates communication between the application and the cooperating application.

In some embodiments the execution environment change notification involves a drag and drop action or a cut and paste action which moves a visual representation of the application from a visual representation of the web browser to a visual representation of the second execution environment.

The following description is presented to enable any person skilled in the art to make and use the disclosed embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present description. Thus the present description is not intended to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. This includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described below can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

In general embodiments of the invention provide a method and system for executing applications. Applications may include web based applications such as applets. Specifically embodiments of the invention provide a method and apparatus for changing execution environments during application execution. In one or more embodiments of the invention an application may be started in a first execution environment such as a web browser. The application may then be transitioned to a second execution environment such as a cooperating application or a desktop environment e.g. local desktop environment virtual desktop environment remote desktop environment etc. without interrupting the execution of the application.

For example the application may be loaded within a webpage to provide communication e.g. instant messaging email phone etc. features between users of the application. A user may begin using the application within a web browser and decide to continue using the application after completing his her browsing session with the web browser. As a result the user may drag cut and paste or otherwise move the applet from the webpage to the desktop of the computer from which the webpage is loaded. Upon transitioning to the desktop the applet may be disconnected from the web browser and or integrated into the desktop environment. Furthermore the execution of the applet on the desktop may continue after the execution of the web browser is terminated. In other words the executing application may transition from a web application to a desktop application without interrupting the application s execution.

Host may correspond to an electronic device that provides one or more services or functions to a user. For example host may operate as a mobile phone personal computer workstation global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition host may include an operating system that coordinates the use of hardware and software resources on host as well as one or more applications e.g. application application m application application n that perform specialized tasks for the user. For example host may include applications such as an email client an address book a document editor a tax preparation application a web browser and or a media player. To perform tasks for the user the applications may obtain the use of hardware resources e.g. processor memory I O components wireless transmitter etc. on host from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system.

To enable interaction with the user host may include one or more hardware input output I O components such as a pointing device and a display screen. Each hardware I O component may additionally be associated with a software driver not shown that allows the operating system and or applications on host to access and use the hardware I O components.

Execution environments e.g. execution environment execution environment x may correspond to software based environments that enable user interaction with the applications. For example a user may interact with a spell checking plugin through a word processing application. Similarly applications may be initialized and executed from a desktop environment. Execution environments may also refer to various software components on host . For example execution environments may include application software e.g. word processors spreadsheets media players web browsers etc. through which plugins applets and widgets may run.

Applications may also be executed through system based execution environments such as operating systems file systems and or utilities. Moreover execution environments may further be nested. For example a plugin may execute through a larger application which may execute through an operating system desktop.

In one or more embodiments of the invention applications on host are started accessed and or terminated through a corresponding execution environment. For example a word processing application may be started by double clicking an icon on a desktop environment and or windowing system. Once an application is started the application is run from a container associated with the execution environment. Examples of containers may include applet containers for applets e.g. Java Java is a registered trademark of Sun Microsystems Inc. applets the Flash Flash is a registered trademark of Adobe Systems Inc. Player for Flash movies Enterprise JavaBeans EJBs Enterprise JavaBeans is a registered trademark of Sun Microsystems Inc. containers for EJBs and or plugin containers for executing plugins.

In particular each container may manage the startup and termination of the corresponding application and further provide services to the application that enable the application to perform tasks for the user. For example application may request HyperText Markup Language HTML documents via a network connection not shown provided by host . Container may retrieve the documents using the network connection and provide the documents to application . Application may then display the documents to the user and or provide various features to the user using data obtained from the documents.

Those skilled in the art will appreciate that execution environments may be associated with multiple containers and or applications running within containers. Furthermore each container may be configured to provide a different set of services to the corresponding application. For example a word processing application may include several containers for executing various word processing plugins. Each container may be designed to interact with and provide services to the plugin within based on desired functionality security and or other criteria.

In one or more embodiments of the invention certain applications are configured to execute through multiple execution environments. More specifically a widget running within a web browser may also be configured to run on a desktop or within a cooperating application. To change execution environments the widget may be required to temporarily stop execution and or undergo additional configuration changes. For example a web based widget may separately be installed on host for local execution on host . However host may include a framework for changing an application s execution environment without interrupting execution of the application as described below with respect to .

In one or more embodiments of the invention applications on host correspond to web applications. In other words applications on host may correspond to applets e.g. Java applets that are started in and or run through web browser . As a result visual representations of applets within host may initially be embedded and displayed within web browser . The user may further interact with the applets by providing input through web browser . For example applet may be started by navigating web browser to a webpage in which applet is embedded. Upon loading the page applet is executed within a container provided by JVM and a visual representation of the applet is displayed in web browser .

To initiate applet execution web browser may invoke a plugin e.g. a Java plugin . In particular plugin may spawn an instance of JVM and execute the applet within a container that is provided by JVM . Plugin may further facilitate integration of the applet within web browser by establishing a connection between JVM and web browser . In addition plugin and or JVM may display visual representation within web browser through communications with the operating system installed on host . For example visual representation may be displayed within the visual representation of web browser using techniques such as inheritance of window handles and or protocols such as XEmbed. Those skilled in the art will appreciate that JVM may be spawned using a variety of methods including for example platform dependent system calls and platform independent Java programming language application programming interfaces APIs .

In one or more embodiments of the invention an instance of plugin is created for each applet encountered by web browser . Alternatively initialization of all applets encountered by web browser may be handled by a single instance of plugin using multithreading and or other techniques.

Those skilled in the art will appreciate that applets e.g. applet associated with web browser may be executed using a combination of plugin and or JVM instances e.g. JVM . For example each applet may have a one to one mapping with each instance of plugin and or the corresponding JVM instance. On the other hand applets may be mapped to instances of plugin and or JVM based on other criteria such as plugin and or JVM versions. Applets may also swap JVM and or plugin instances due to events such as a reboot of host and or web browser . For example each applet may begin running on a separate JVM instance and plugin instance. However after a reboot of host applets using the same version of a JVM e.g. JVM may all run within the same JVM instance and or plugin instance.

In one or more embodiments of the invention each applet initialized within web browser e.g. applet is executed within a container e.g. container that provides services to the applet using a message passing service implementation . In one or more embodiments of the invention message passing service implementation facilitates execution of the applet by enabling message passing between the applet and web browser . For example message passing service implementation may include functionality to query the HTTP proxy settings of web browser query the HTTP cookies stored in web browser load documents on web browser and or initiate calls between the applet and JavaScript Javascript is a registered trademark of Sun Microsystems Inc. routines from web browser .

In one or more embodiments of the invention message passing service implementation allows applets e.g. applet to execute in JVMs e.g. JVMs that are separate operating system processes from the operating system process of web browser . The message based nature of message passing service implementation may further decouple the applets from web browser by allowing the applets and web browser to communicate using mechanisms other than function calls. As a result message passing service implementation may enable the applets to run independently of web browser .

As described above applications on host may be run using multiple execution environments. In particular applets on host may be transitioned from web browser to a second execution environment e.g. desktop environment cooperating application etc. without interrupting the execution of the applets. In other words a visual representation of an applet may be removed from a visual representation of web browser and added to a visual representation of desktop environment and or cooperating application while the applet is running. For example visual representation may be moved from web browser to desktop environment upon transitioning applet to desktop environment from web browser . Likewise visual representation may be moved from web browser to cooperating application upon transitioning applet from web browser to cooperating application . During the applet s transition to the second execution environment communications and or dependencies between the applet and web browser may be removed during the applet s execution thus allowing the applet to run independently of web browser .

Those skilled in the art will appreciate that desktop environment and or cooperating application may represent a variety of execution environments. For example desktop environment may refer to a local desktop environment a virtual desktop environment and or a remote desktop environment. Along the same lines cooperating application may correspond to a cooperating application in a local virtual and or remote desktop environment. As a result the framework of may for example allow a statistics applet to be transferred from web browser to an accounting application installed locally on host or on a remote desktop that is accessible from host .

In one or more embodiments of the invention an applet e.g. applets is transitioned from web browser to a different execution environment e.g. desktop environment cooperating application upon receiving an execution environment change notification from a user of host . In one or more embodiments of the invention the execution environment change notification corresponds to a drag and drop action or cut and paste action which moves a visual representation e.g. visual representations of the applet from a visual representation of web browser to a visual representation of the second execution environment. The drag and drop action may be performed using a computer mouse trackball touchpad touchscreen button and or other input device on host . Those skilled in the art will appreciate that the execution environment change notification may be carried out using other actions on host such as keyboard shortcuts menu selections etc.

For example during a drag and drop action the applet s visual representation may be selected by clicking a mouse pressing a button and or performing another input action corresponding to a selection of the applet s visual representation. The visual representation may then be placed into a new window with no title bar or borders and moved from web browser to desktop environment and or cooperating application using a cursor or other indicator. Finally the visual representation may be dropped by releasing the mouse click pressing another button and or performing another input action corresponding to a release of the applet s visual representation in the second execution environment.

As with typical drag and drop actions the new execution environment of the applet may be based on the visual representation of the execution environment underneath the visual representation of the applet. For example if the visual representation of the applet is released on top of a visual representation of desktop environment the visual representation of the applet may stay on desktop environment while the applet is moved to standalone service implementation from message passing service implementation . However if the visual representation of the applet is released on top of a visual representation of web browser or an incompatible execution environment e.g. an incompatible application the applet may remain associated with message passing service implementation while the visual representation of the applet returns to its original position within web browser .

In one or more embodiments of the invention an execution environment change notification for a particular applet from the user is received as an event in the container executing the applet. For example an execution environment change notification for applet may be received by container . The execution environment change notification may be passed from plugin to the container. The JVM e.g. JVMs and or container running the applet may then be responsible for transitioning the applet from web browser to the second execution environment.

In one or more embodiments of the invention a change in execution environment is enabled by dynamically changing the mechanism by which an applet receives services from the corresponding container . In other words a change in an applet s execution environment may involve a change in the service implementation e.g. message passing service implementation standalone service implementation message passing service implementation provided to the applet by the corresponding container and or JVM. Each service implementation may allow the applet to run in a particular execution environment by providing services to the applet based on the functionality security and or other attributes of the execution environment.

Furthermore the swapping of service implementations for the applet may occur during the applet s runtime because the JVM and or container containing the applet is executed in a separate operating system process from that of web browser . The applet may also continue to execute in the same JVM e.g. JVMs instance as the swapping of service implementations is made.

To transition an applet e.g. applet from web browser to desktop environment the corresponding container e.g. container dynamically replaces message passing service implementation with standalone service implementation . Similarly a visual representation e.g. visual representations of the applet is concurrently removed from web browser and displayed in desktop environment . After transitioning to desktop environment the applet may continue to run within desktop environment after web browser terminates or navigates to a different webpage because standalone service implementation may provide services to the applet in the context of desktop environment instead of web browser .

In one or more embodiments of the invention standalone service implementation allows the applet to run independently of web browser by ignoring messages between the applet and web browser . As a result applets running in standalone service implementation may no longer be affected by commands from web browser . In other words web browser may be unable to terminate or otherwise affect the execution of applets in standalone service implementation . Likewise web browser may be closed without affecting the execution of applets in standalone service implementation . As with message passing service implementation standalone service implementation exists outside of and operates independently from web browser . Furthermore the execution of JVMs e.g. JVM providing standalone service implementation is based not on the lifetime of web browser but on the lifetimes of applets e.g. applet within the JVMs. As a result a JVM providing standalone service implementation to one or more applets may continue executing until all applets executing within the JVM are closed by the user.

Standalone service implementation may also provide services to the applet in lieu of web browser . For example standalone service implementation may retrieve HTML documents obtain cookie information manage credentials obtain proxies for network locations based on global network settings and or provide other web based services to the applet. Other alternatives to services traditionally provided by web browser may include displaying webpages specified by the applet in a new window of web browser and or printing messages directed to a status bar in web browser to one or more console windows associated with the applet or a log file. The web based services may further allow the applet to update its visual representation e.g. visual representation visual representation n in desktop environment and continue to perform tasks for the user outside of web browser .

To transition an applet e.g. applet from web browser to cooperating application the corresponding container e.g. container may replace message passing service implementation with message passing service implementation . The container may also move a visual representation e.g. visual representation of the applet from web browser to cooperating application by for example transferring ownership of the window containing the visual representation to cooperating application . Unlike message passing service implementation message passing service implementation may provide services to the applet by passing messages between the applet and cooperating application . Consequently the applet may no longer rely on web browser for services and may continue executing within the context of cooperating application after web browser terminates or navigates to a different webpage.

In one or more embodiments of the invention plugin and message passing service implementation allow applets e.g. applet to run within the execution environment of cooperating application instead of web browser . In particular plugin may establish connections between the JVMs e.g. JVM running the applets and cooperating application while message passing service implementation may allow the applets to receive services from cooperating application . For example a user may incorporate a charting application from web browser into a locally installed spreadsheet application.

Furthermore the applet s functionality may be provided to cooperating application using message passing service implementation and or plugin . In particular message passing service implementation and or plugin may facilitate communication between the applet and cooperating application . Consequently cooperating application may take over services requested by the applet from web browser using message passing service implementation . For example cooperating application may transmit data between the applet and the network in lieu of web browser display web pages and messages from the applet and or provide network proxies to the applet. As mentioned previously cooperating application may also use plugin e.g. a Java plugin to connect to and communicate with the JVM s e.g. JVM running applets associated with cooperating application .

Those skilled in the art will appreciate that the use of multiple message passing service implementations to communicate with different execution environments may further allow applets to execute within virtual or remote desktop environments. For example the user may drag an applet from web browser into a window containing a remote desktop. While the applet may continue to execute within a local JVM instance the applet may communicate with the remote desktop using a network based message passing service implementation that enables message passing between the applet and the remote desktop using a network connection with the remote desktop. The network based message passing service implementation may transmit data such as the names of host the applet and or the JVM hosting the applet to the remote desktop. The plugin and or JVM associated with the applet may also hide the window containing the visual representation of the applet on host and instead send the visual representation of the applet to the remote desktop using the network based message passing service implementation. Similar message passing capabilities may be implemented to allow applets to communicate with remotely installed cooperating applications.

Those skilled in the art will appreciate that applets may not be required to participate in execution environment changes. Furthermore applets may be unaware of changes in their execution environments. Consequently all applets may be transitioned from web browser to a second execution environment without altering the applets code or execution. On the other hand newer applets may be notified of the transition by their respective plugin instances and change appearance and or function after being placed in the second execution environment. For example a streaming video applet may change resolution playback options and or other characteristics upon removal from web browser and placement in desktop environment and or cooperating application .

Applets may also experience changes in functionality upon transitioning to a new service implementation e.g. standalone service implementation message passing service implementation from message passing service implementation . For example calls between the applets and Javascript may be terminated when the applets are configured to run independently of web browser . For security reasons applets may also be limited in their ability to transition to the second execution environment from web browser without user input. For example changes in applet execution environment may be prevented from occurring without initiation or confirmation by the user.

Initially the application is started using a web browser operation . The application may be started by navigating the web browser to a webpage in which the application is embedded. Furthermore a visual representation of the application may be displayed within the web browser as the application executes. Initialization of the application from the web browser may further involve connecting the application to a message passing service implementation e.g. message passing service implementation of that provides services to the application by passing messages between the application and the web browser.

Next an execution environment change notification is received from the user of the web browser operation . As mentioned previously the execution environment change notification may involve a drag and drop action cut and paste action keyboard shortcut and or other input method. Upon receiving the execution environment change notification the message passing service implementation is replaced with a standalone service implementation operation that allows the application to run independently of the web browser. The swapping of service implementations may occur during the applet s execution because the applet is executed in an operating system process that is separate from that of the web browser s. As a result the applet may continue to run uninterrupted during the transition to the desktop environment. Once connected to the applet the standalone service implementation may use alternative mechanisms to provide services to the applet in lieu of the web browser such as global network settings and or new browser windows.

Finally a visual representation of the application is moved to the desktop environment operation from the web browser. The visual representation may be moved by placing the visual representation into a new window with no title bar or borders and moving the new window in the desktop environment based on mechanisms associated with the execution environment change notification. For example during a drag and drop action the new window may move with the cursor until the user drops the window using the cursor. Similarly during a cut and paste action the visual representation may disappear from the web browser due to the cut action from the user and reappear in the desktop environment during the paste action from the user.

The application may be unaware of the transition and continue running unaltered or the application may be notified of the transition and change in appearance and or function. Furthermore the user provided execution environment change notification may be required to transition the application to the second execution environment to prevent the application from executing beyond the lifetime of the web browser without the user s knowledge.

As with transitioning to a desktop environment the application is first started using a web browser operation . As discussed above the application may be connected to a message passing service implementation that provides services to the application by passing messages between the application and the web browser. The application may continue executing within the execution environment of the web browser until an execution environment change notification is received from a user of the web browser operation . The execution environment change notification may prompt a transition of the application from the web browser to the cooperating application e.g. word processing application spreadsheet application etc. .

Next the message passing service implementation between the application and the web browser may be replaced by a new message passing service implementation that allows the application to communicate with the cooperating application operation . The cooperating application may thus begin providing services to the application using the new message passing service implementation. Moreover the disconnection of the application from the web browser s services may enable the application to run after the web browser navigates to a different webpage and or terminates.

Finally the visual representation of the application is moved from the web browser to the cooperating application. For example the visual representation may be dragged from the web browser to the cooperating application cut from the web browser and pasted into the cooperating application and or otherwise moved based on the user s input. Moving of the application s visual representation may further involve transferring ownership of the window containing the applet s visual representation from the web browser to the cooperating application.

Initially the user begins dragging the applet to the desktop operation . The applet may correspond to a Java applet that is run within a container provided by a JVM such as JVMs of . The drag action may be signaled by a variety of user initiated actions such as a mouse click a button press a tap on a touchpad a keyboard shortcut etc. Upon starting the dragging action the visual representation of the applet is placed into a new window with no title bar or borders operation . The window s location may further be updated to track the cursor as the applet is dragged to the desktop.

Next the applet is dropped onto the desktop operation . As with operation operation may be prompted by a user initiated action. For example the applet may be dropped by releasing a mouse click and or providing a keyboard shortcut. In addition the drag and drop action may generate an event that updates the container hosting the applet with a disconnected applet status operation . The disconnected applet status may allow the applet to persist beyond the lifetime of the web browser.

In particular when the web browser navigates away from the web page containing the applet and or terminates execution an applet exit request may be received from the plugin operation that facilitates communication between the web browser and the JVM hosting the applet. However because the applet is now disconnected from the web browser the applet continues to execute independently of the web browser. Instead the message passing service implementation between the applet and the web browser is now replaced with a standalone service implementation operation that uses alternative mechanisms to provide services to the applet outside of the web browser. In other words swapping of service implementations for the applet may occur after rather than before or concurrent to moving of the applet s visual representation to the desktop.

Regardless of the timing between operations and the applet continues executing after the termination of the web browser s execution operation . Furthermore the JVM instance is terminated only when all executing applets within have been closed operation .

The foregoing descriptions of embodiments have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

