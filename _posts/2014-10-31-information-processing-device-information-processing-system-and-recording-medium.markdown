---

title: Information processing device, information processing system, and recording medium
abstract: In an information processing device connected to an external device via a network, the external device includes an application platform of an image forming device and the information processing device includes a platform emulator that emulates the application platform. The platform emulator includes an implementing information acquiring part that receives a list of information items of interfaces implemented on the application platform in the external device from the external device and stores the list of information items in a holding part, a determining part that determines, in response to an interface calling request from an application using the platform emulator, whether an interface is implemented in the external device based on the stored list of information items, and an external calling part that transmits, when the interface is implemented, a request of execution of the interface to the external device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454388&OS=09454388&RS=09454388
owner: RICOH COMPANY, LTD.
number: 09454388
owner_city: Tokyo
owner_country: JP
publication_date: 20141031
---
This application is a divisional application of and claims the benefit of priority from U.S. application Ser. No. 12 840 541 filed Jul. 21 2010 and which claims the benefit of priority from Japanese Patent Application No. 2010 043284 filed Feb. 26 2010 and Japanese Patent Application No. 2009 172966 filed Jul. 24 2009 the entire contents of each of the above are incorporated herein by reference.

This invention relates to an information processing device an information processing system and a computer readable recording medium which are adapted to emulate an application platform of an image forming device.

In recent years an image forming device of a certain type such as a multifunctional peripheral is provided with an application platform and the application platform is provided with APIs application programming interfaces which have been made public. Using this application platform a third vendor develops applications and provide such applications to the market. A user of an image forming device can purchase some of the developed applications that are appropriate for his business and can increase the efficiency of the business by installing the applications in the image forming device.

Similar to other general purpose software programs upgrading of the application platform is performed for the purpose of functional enhancement. There is also a case in which a completely new application platform in which a software architecture is fundamentally improved is developed.

When an upgraded application platform or a new application platform in which the software architecture is completely reformed either of which will be called a new version platform is released it is desirable that applications which operate on the new version platform are ready for being provided to the market at the timing of releasing of the new version platform. In order to attain the goal it is necessary for the third vendor to carry out the testing or verification of operation of the existing applications on the new version platform and the development work of a new application which operates on the new version platform concurrently with the development of the new version platform.

Conventionally in order to facilitate the development work an emulator of the new version platform which operates on a PC personal computer has been supplied to the third vendor. The third vendor has conducted the testing or development of an application by using such an emulator. For example Japanese Laid Open Patent Publication No. 2004 252585 discloses a program verification system which includes an in circuit emulator ICE that emulates operation of an actual device.

However the emulator merely acts on the application similar to the way the new version platform acts on the application and the process which is performed in response to the call of the API is a dummy process. Therefore the testing or development of an application on the emulator does not guarantee operation of the application with a high level of accuracy.

The testing of an application using such an emulator does not contribute to the testing of the new version platform at all and there is a problem in that the development work is inefficient. If the testing of an application can be performed directly on the new version platform in the middle of development both the application and the new version platform can be tested at once and the development work can be performed efficiently.

However the manufacturers of image forming devices are hard to accept releasing of the new version platform to third vendors because there is a possibility of the outflow of their own software properties. For example when a new version platform written in Java registered trademark language is implemented one can easily decipher the byte codes of the new version platform.

In one aspect the present disclosure provides an information processing device which can increase appropriately the efficiency of the development work of both an application platform of an image forming device and an application which operates on the application platform.

In an embodiment the present disclosure provides an information processing device which is connected to an external device via a network the external device including an application platform of an image forming device and the information processing device including a platform emulator that emulates the application platform of the image forming device the platform emulator including an implementing information acquiring part to receive a list of information items of interfaces implemented on the application platform in the external device from the external device via the network and store the list of information items in an implementing information holding part a determining part to determine in response to an interface calling request from an application that uses the platform emulator whether an interface is implemented in the external device based on the list of information items stored in the implementing information holding part and an external calling part to transmit when it is determined that the interface is implemented a request of execution of the interface to the external device via the network.

Other objects features and advantages of the present disclosure will become more apparent from the following detailed description when read in conjunction with the accompanying drawings.

A description will be given of embodiments of the present disclosure with reference to the accompanying drawings.

The platform development device is a computer such as PC personal computer which is used to facilitate the development of an application platform of an image forming device. This application platform is a software program which facilitates the development of applications and provides the execution environment of applications on the image forming device.

The APIs application programming interfaces of an application platform in the platform development device are made public. Using the APIs enables a third vendor to carry out the development of applications.

As illustrated in the platform development device includes a simulator an application platform an implementing information transmitting part an internal calling part an implementing information storage part and an internal calling information storage part .

The simulator is a software program for enabling the platform development device to operate on an upper level software program which is in this embodiment the application platform similar to the way the image forming device multifunctional peripheral operates on the upper level software program. For example the simulator provides to the upper level software program the interfaces that are equivalent to interfaces related to device drivers which control one or more of hardware resources including an operation panel a scanner a printer etc. intrinsic to the image forming device. The simulator performs a simulation process similar to the way the original device driver performs the process in response to an interface calling request.

The application platform is an application platform in the middle of development which is to be installed in an image forming device. As illustrated in the application platform includes a scan service a print service a fax service a copy service a panel service etc. The scan service is a program module which provides an API interface related to execution of a scanning process. The print service is a program module which provides an API related to execution of a printing process. The copy service is a program module which provides an API related to execution of a copying process. The panel service is a program module which provides an API related to control of the operation panel.

The implementing information transmitting part transmits the implementing information currently stored in the implementing information storage part to the application development device . The implementing information is a list of information items of the APIs implemented on the application platform . Because the application platform is in the middle of development the APIs implemented on the application platform are changed on a day to day basis. In accordance with the changes to the application platform the implementing information in the implementing information storage part is updated. The implementing information storage part is a storage area for example a file of a nonvolatile storage medium of the platform development device where the implementing information is stored.

In response to an API calling request received from the application development device the internal calling part calls an API or an API of the application platform specified in the API calling request based on the internal calling information stored in the internal calling information storage part . The internal calling part transmits to the application development device a response containing the information indicating a result or a return value of the process performed by the called API. The internal calling information is provided for every API and contains both identification information for example a method name of the API and address information of the API indicating a location of the API in the application platform and associated with the API identification information.

The internal calling information storage part is a storage area for example a file of the nonvolatile storage medium of the platform development device where the internal calling information is stored.

The application development device is a computer such as PC personal computer which is used to facilitate the development of applications which operate on the application platform or using the application platform . As illustrated in the application development device includes the applications and a platform emulator .

The applications are applications in the middle of development which are to be installed in an image forming device. As illustrated in the applications include an application and an application

The platform emulator is an emulator of the application platform . Specifically the platform emulator includes the APIs which are equivalent to the APIs in the application platform and emulates operation of an original API in response to an API calling request from any of the applications . It is not necessary that the kinds of the APIs provided in the platform emulator are exactly in agreement with the kinds of the APIs provided in the application platform . For example the platform emulator may include APIs which have not been implemented on the application platform .

As illustrated in the platform emulator includes a scan emulator a print emulator a fax emulator a copy emulator a panel emulator an implementing information acquiring part a determining part an external calling part and an implementing information holding part .

The scan emulator is an emulator of the scan service the print emulator is an emulator of the print service the fax emulator is an emulator of the fax service the copy emulator is an emulator of the copy service and the panel emulator is an emulator of the panel service . These emulators are directly called and used by any of the applications .

The implementing information acquiring part receives the implementing information from the implementing information transmitting part of the platform development device and stores the received implementing information into the implementing information holding part . The implementing information holding part is a storage area of a storage medium of the application development device where the implementing information is stored.

The determining part determines whether an API called from the application is already implemented on the application platform based on the implementing information stored in the implementing information holding part .

The external calling part transmits when it is determined by the determining part that the API called from the application is implemented on the application platform an API calling request or a request of execution of the API to the internal calling part of the platform development device . In the API calling request the API identification information for example a method name of the API is specified.

A program which when executed by the CPU causes the CPU to execute a process in the application development device is provided by means of a recording medium such as CD ROM. If the recording medium storing the program is set in the drive device the program from the recording medium is installed in the auxiliary memory device through the drive device . However the installation of the program in the application development device is not limited to the above method using the recording medium . Alternatively the program may be downloaded to the application development device from another computer via the network.

The auxiliary memory device stores the program installed therein and also stores the necessary files data parameters etc.

The program is read out from the auxiliary memory device when a program starting command takes place and stored in the main memory device . The CPU carries out the functions of the application development device in accordance with the program stored in the main memory device . The interface device is used to provide an interface for connecting the application development device with the network. The display device displays GUIs graphical user interface in accordance with the program. The input device includes a keyboard a mouse etc. which are used by an operator to input various operational instructions.

The platform development device may have the hardware composition which is essentially the same as that of the application development device illustrated in and a description thereof will be omitted. However the actual image forming device may be used as the platform development device . In such a case the simulator in the platform development device is unnecessary.

When the platform emulator is started the implementing information acquiring part determines whether the remote calling function is active in the application development device S . The remote calling function is a function to perform the remote calling of an API of the application platform . The determination as to whether the remote calling function is active or inactive is made depending on the content of setting information stored in a predetermined setup file. Namely the user can switch the state of the remote calling function between an active state and an inactive state by editing the setting information in the predetermined setup file.

When it is determined in step S that the remote calling function is active the implementing information acquiring part transmits a request of acquisition of the implementing information to the implementing information transmitting part of the platform development device S . In this case the identification information for example an IP address or URL uniform resource locator of a destination device to which the request of acquisition is transmitted may be stored beforehand in a predetermined setup file or a predetermined storage location of in the auxiliary memory device .

In response to the received request of acquisition the implementing information transmitting part transmits the implementing information currently stored in the implementing information storage part to the implementing information acquiring part . The implementing information acquiring part receives the implementing information from the implementing information transmitting part and stores the received implementing information into the implementing information holding part S .

The format in which the implementing information is written is not limited to the XML format. Alternatively it may be written in a CSV Comma Separated Values format or another format.

The implementing information of contains a set of interface elements each surrounded by the tag and the set of interface elements is provided for each of the services such as the scan service the print service etc. already implemented on the application platform . Each interface element contains a name attribute. A corresponding one of the services is identified by the value of its name attribute. For example the value of the name attribute of the interface element el is set to scan . Therefore it can be easily understood that the interface element indicates the state of implementation of the scan service .

Each Interface element contains a set of method elements as child elements for each of the methods already implemented with respect to the corresponding service. Each method element includes a name attribute a parameter attribute a return attribute etc. The value of the name attribute indicates a method name. The value of the parameter attribute indicates the data type of the argument. The value of the return attribute indicates the data type of the return value.

On the other hand when it is determined in step S that the remote calling function is inactive acquisition of the implementing information is not performed. Then the procedure as illustrated in is terminated.

Even after the platform emulator is started the implementing information acquiring part performs the procedure of at a predetermined timing. For example the implementing information acquiring part may be arranged to perform the procedure of periodically or upon receipt of a request of execution input from the user. Accordingly in accordance with the progress of the development of the application platform in the platform development device the implementing information stored in the implementing information holding part will be updated. Alternatively the implementing information transmitting part may be arranged to actively distribute the implementing information immediately after the implementing information in the implementing information storage part is updated.

Next the procedure which is performed by the information processing system of when an API of the platform emulator is called will be described. For the sake of convenience a case in which an API of the scan emulator is called will be described.

In response to the call the bbb method of the scan emulator sends an inquiry about the implementation of the bbb method scan.bbb in the scan service to the determining part S . The determining part accesses the implementing information currently stored in the implementing information holding part and determines whether the bbb method of the scan service is implemented or determines whether the bbb method is already implemented on the application platform S .

Specifically it is determined in step S whether the method element with the name attribute whose value is bbb is included in the implementing information as a child element of the interface element with the name attribute whose value is scan . When the method element is included in the implementing information the determining part determines that the bbb method of the scan service is implemented. When the method element is not included therein the determining part determines that the bbb method of the scan service is not implemented. The determining part sends a result of the determination to the scan emulator S .

When the result of the determination from the determining part indicates that the bbb method of the scan service is implemented the bbb method of the scan emulator sends a request of calling of the bbb method of the scan service to the external calling part S . The external calling part transmits a bbb method calling request in which a service name interface name and a method name are specified to the internal calling part of the platform development device based on the identification information an IP address or URL of the calling device which is set up beforehand and stored in the auxiliary memory device S .

Subsequently the internal calling part sends a call of the bbb method corresponding to the method name specified in the received calling request to the scan service corresponding to the service name specified in the received calling request S . The internal calling part determines the address information of the bbb method of the scan service based on the internal calling information stored in the internal calling information storage part . In this case the dynamic calling or the dynamic linking of the method according to the related art may be used. Depending on the related art technology being used the internal calling information storage part is not directly edited or described by a developer and the internal calling information storage part may be built in or concealed in the internal calling part .

Subsequently in response to the call the bbb method of the scan service performs the process implemented therein S . The bbb method of the scan service sends a return value a result of the process back to the internal calling part S . The internal calling part transmits a response including the return value to the external calling part S . The external calling part sends the return value included in the received response to the scan emulator S . The bbb method of the scan emulator sends the return value to the application S .

On the other hand when the result of the determination from the determining part indicates that the bbb method of the scan service is not implemented the bbb method of the scan emulator performs the process implemented therein and emulates operation of the scan service S . Subsequently the bbb method of the scan emulator sends a return value indicating a result of the emulation to the application S .

When a response to the remote call of the bbb method is not received from the platform development device via the external calling part or when the waiting time for receiving a response exceeds a time out period the bbb method of the scan emulator performs the steps S and S in the procedure of . For example such problems may arise when a failure has occurred in the network when the platform development device is not started or when the application platform in the platform development device does not operate normally.

As described above according to the first embodiment it is possible for the developer of the application to make use of the application platform when checking the operation of the application . Therefore both the developer of the application and the developer of the application platform can perform the development work or the testing efficiently. Namely the developer of the application can perform the testing of the operation of the application on the actual application platform . The developer of the application platform can perform the testing of the operation of the application platform in connection with the testing of the operation of the application .

According to the first embodiment it is not necessary to supply the software substance of the application platform to the developer of the application . Therefore the supplier of the application platform is able to prevent the outflow of the software properties.

According to the first embodiment the implementation of an API is determined for each API and when the API is implemented the application platform is utilized remotely. On the other hand when the API is not implemented the emulation is performed. Accordingly the development work of the application platform and the development work of the application can be carried out smoothly and concurrently.

Next a second embodiment of the present disclosure will be described. The information processing system of the second embodiment is arranged to include a mechanism for displaying a display component or a display screen either of which will be called a display component on the display device of the application development device in response to the call of the panel emulator .

If the procedure of is simply performed with respect to the panel emulator in which the scan emulator is replaced with the panel emulator and the scan service is replaced with the panel service the displaying process based on a display command or a method calling request to the panel emulator will be performed by the platform development device . The display command to the panel emulator will be transmitted to the panel service but the panel service is inherently provided to perform the displaying process on the local display device or the operation panel of the image forming device .

In order to avoid the problem the information processing system of the second embodiment is arranged to have the composition as illustrated in . illustrates the composition of the information processing system of the second embodiment. In the elements which are the same as corresponding elements in are designated by the same reference numerals and a description thereof will be omitted.

As illustrated in a simulator of a platform development device includes a display control part a display data transforming part and a display data supplying part .

The display control part is a simulator of a program module which performs control for displaying a display component on the operation panel of the local image forming device based on the data display data which indicates the display component generated by the panel service .

The display data transforming part transforms the display data generated by the panel service into data in a format that is appropriate for transmission of the data over the network. In this embodiment the HTML hypertext markup language format which is a data format that is appropriate for transmission of the data over the network is used. Alternatively other data formats different from the HTML format such as JPEG joint photographic experts group BITMAP and PDF portable document format may be used instead.

The display data supplying part enables accessing of the HTML data generated by the display data transforming part via the network. Specifically the display data supplying part provides a function as a Web server and associates the HTML data with a predetermined URL uniform resource locator to manage the HTML data. In response to a GET request to the predetermined URL the display data supplying part sends an HTTP response including the HTML data to the device with the predetermined URL.

On the other hand a platform emulator of an application development device further includes a browser part . The browser part receives the HTML data generated by the display data transforming part from the platform development device and displays the HTML data on the display device .

Next the procedure which is performed by the information processing system of the second embodiment will be described.

As illustrated in it is supposed in this embodiment that the application has called a ppp method of the panel emulator during the testing of the application S . It is supposed that the ppp method is equivalent to a display command of a certain display component.

In the procedure of steps S to S are the same as the corresponding steps S to S in the procedure of and a description thereof will be omitted. In the procedure of the steps which are to be performed when the ppp method is not implemented are self explanatory in view of the corresponding steps S and S in the procedure of and a description thereof will be omitted. In the following the procedure which is performed by the information processing system of the second embodiment when the ppp method is implemented will be described.

In response to the call the ppp method of the panel service generates display data of a display component corresponding to the ppp method S . Subsequently the ppp method of the panel service sends a display command containing the generated display data to the display control part S . In accordance with the display command the display control part displays the display component on the display device of the platform development device based on the display data S .

Subsequently the display control part sends a response to the display command to the ppp method of the panel service S . The ppp method sends a display command containing the generated display data to the display data transforming part S . In accordance with the display command the display data transforming part transforms the display data into HTML data S .

Subsequently the display data transforming part sends the HTML data generated by the transform processing to the display data supplying part S . The display data supplying part associates the received HTML data with a predetermined URL and stores the HTML data in the storage medium of the platform development device .

Subsequently the display control part sends a response to the display command in step S to the ppp method of the panel service S .

In the procedure of steps S to S are the same as corresponding steps S to S in the procedure of and a description thereof will be omitted.

On the other hand the browser part of the application development device periodically transmits a request of acquisition GET request of HTML data to the predetermined URL S . That is the browser part performs polling to the predetermined URL. For example the predetermined URL is stored beforehand in the auxiliary memory device .

The display data supplying part receives the request of acquisition from the browser part . When the HTML data associated with the predetermined URL do not exist the display data supplying part sends a response HTTP response indicating that the HTML data do not exist to the browser part .

When the HTML data associated with the predetermined URL exist the display data supplying part sends a response containing the HTML data to the browser part S . After the response containing the HTML data is sent the display data supplying part deletes the HTML data in the storage medium.

When the response containing the HTML data is received the browser part displays the display component on the display device based on the HTML data S .

Alternatively the period of the polling to the predetermined URL performed by the browser part may be restricted after the method of the panel emulator is called. For example when the object of the determination in step S is a method related to the panel service the determining part may generate corresponding data for example a file that indicating the object of the determination as being the method related to the panel service and store the data in the auxiliary memory device . On the other hand the browser part defers the generation of the data.

For example the browser part performs the polling to detect that the corresponding data have been generated. When it is detected that the corresponding data have been generated the browser part deletes the corresponding data and starts the polling to the predetermined URL. When the HTML data are acquired as a result of the polling the browser part terminates the polling to the predetermined URL. Because the period of the polling to the predetermined URL is restricted it is possible to prevent the amount of traffic transmitted over the network from being increased.

Alternatively the browser part may not be a dedicated browser for use in the platform emulator . For example a general purpose Web browser which will be called a Web browser may be used instead of the browser part . The function to perform the polling to the predetermined URL is not beforehand implemented on the Web browser. Hence when the Web browser is used instead a web page HTML data in which a script program which causes the Web browser to perform the polling to the predetermined URL is embedded may be downloaded beforehand from the display data supplying part to the Web browser. If the web page is downloaded to the Web browser and the Web browser is caused to execute the script program the Web browser can perform the function that the same as the function of the browser part .

The necessity of the displaying by the platform development device may be set up beforehand. For example the information indicating the necessity of the displaying may be stored in the storage medium of the platform development device . When the stored information indicates that the displaying is unnecessary the panel service does not send the display command in step S in the procedure of .

Similarly the necessity of the displaying by the application development device may be set up beforehand. For example the information indicating the necessity of the displaying is stored beforehand in the auxiliary memory device of the application development device . When the stored information indicates that the displaying is unnecessary the browser part does not perform the polling to the predetermined URL. When the Web browser is used instead of the browser part the Web browser may be arranged so that the Web browser is not started. Even if the Web browser is started it may be arranged so that the web page in which the script program for performing the polling to the predetermined URL is embedded is not downloaded.

As described in the foregoing according to the second embodiment a display component can be displayed on the application development device based on the display command using the API of the panel emulator . Therefore the checking of a GUI graphical user interface can be performed by the application development device .

Next a third embodiment of the present disclosure will be described. illustrates the composition of an information processing system of the third embodiment.

In the elements which are the same as corresponding elements in are designated by the same reference numerals and a description thereof will be omitted.

As illustrated in a proxy device is another computer different from the platform development device and the implementing information transmitting part the internal calling part the implementing information storage part and the internal calling information storage part are implemented on the proxy device .

When the platform development device is an image forming device the composition of the platform development device illustrated in is desired. That is the respective parts implemented on the proxy device are not contained in the image forming device shipped to the user. By separating the portion of the proxy device from the image forming device the application platform on the image forming device having the same composition at the time of shipment can be developed by using the proxy device .

The procedure which is performed by the information processing system of the third embodiment is self explanatory in view of the procedure of or and a description thereof will be omitted.

According to the present disclosure the efficiency of the development work of both an application platform of an image forming device and an application which operates on the application platform can be increased appropriately.

The present disclosure is not limited to the above described embodiments and variations and modifications may be made without departing from the scope of the present disclosure.

