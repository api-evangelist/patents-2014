---

title: Systems and methods for malware detection and scanning
abstract: Systems and methods are provided for malware scanning and detection in a computing system. In one exemplary embodiment, the method includes launching, in a computing device of the computing system, a virtual machine, and launching, in the virtual machine of the computing device, an internet browser. The method also includes requesting, by the internet browser, data from a web page, and performing, using one or more analysis tools, analysis on the web page. In the method, performing analysis on the web page includes performing monitoring and recording of system application programming interface (API) calls, and creating software objects associated with the web page. The method also includes performing antivirus scanning of the software objects, de-obfuscating JavaScript associated with the software objects, and correlating data associated with the performed analysis to determine if the web page is a malicious web page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09344446&OS=09344446&RS=09344446
owner: VERISIGN, INC.
number: 09344446
owner_city: Reston
owner_country: US
publication_date: 20140908
---
This application is a continuation of U.S. patent application Ser. No. 12 982 508 filed Dec. 30 2010 allowed and is related to U.S. patent application Ser. No. 12 982 540 filed Dec. 30 2010 entitled SYSTEMS AND METHODS FOR MALWARE DETECTION AND SCANNING pending the entire contents of which is incorporated herein by reference in its entirety.

The present disclosure generally relates to systems and methods for improved malware detection and scanning and more particularly to systems and methods for improved malware detection and scanning using virtual machines.

The growth of computer networking has brought with it an explosion in the number of malicious software attacks commonly referred to as malware attacks. These malware attacks may include viruses worms trojan horses spyware rootkits denial of service attacks DDOS and other malicious programs. Malware is often installed on computers running browsers while communicating with malicious web sites that exploit browser vulnerabilities. That is flaws either in the browser or automatically launched external programs and extensions can allow a malicious web page to install malware automatically when a user visits the malicious web page such that the user may not be aware of the installation.

Often multiple malware exploits or tasks are implemented in tandem causing a computer to download store and then execute a malware executable also referred to as a binary module. In many cases a successful exploit results in the automatic installation of a malware binary module often called a drive by download. The installed malware may enable a malware attacker to gain remote control over the compromised computer system and in some cases enable the malware attacker to steal sensitive information send out spam or install more malicious executable modules over time.

Malware propagation wastes valuable resources such as system user time system administrator resources network bandwidth disk space and CPU cycles. Malware can also corrupt data files such that the originals may not be recoverable. Additionally malware can cause the compromised computer to transmit confidential data e.g. banking information passwords etc. to the malware attacker.

In one exemplary embodiment the present disclosure is directed to a method for malware scanning and detection in a computing system the method comprising launching in a computing device of the computing system a virtual machine launching in the virtual machine of the computing device an internet browser requesting by the internet browser data from a web page and performing analysis on the web page using one or more analysis tools wherein performing analysis includes performing monitoring and recording of system application programming interface API calls creating software objects associated with the web page performing antivirus scanning of the software objects de obfuscating JavaScript associated with the software objects and correlating data associated with the performed analysis to determine if the web page is a malicious web page.

In another exemplary embodiment the present disclosure is directed to a computing system for malware scanning and detection the system comprising at least one memory to store data and instructions and at least one processor configured to access the at least one memory and when executing the instructions to launch in a computing apparatus of the computing system a virtual machine launch in the virtual machine an internet browser request by the internet browser data from a web page and perform analysis on the determined web page using one or more analysis tools wherein when the at least one processor is configured to perform the analysis the at least one processor is further configured to perform monitoring and recording of system application programming interface API calls create software objects associated with the web page perform antivirus scanning of the software objects de obfuscate JavaScript associated with the software objects and correlate data associated with the performed analysis to determine if the web page is a malicious web page.

In another exemplary embodiment the present disclosure is directed to a method for malware scanning and detection in a computing system the method comprising performing using at least one computing device of the computing system monitoring and recording of system application programming interface API calls creating using the at least one computing device software objects associated with the web page performing using the at least one computing device antivirus scanning of the software objects de obfuscating using the at least one computing device JavaScript associated with the software objects and correlating using the at least one computing device data associated with the performed analysis to determine if the web page is a malicious web page.

In another exemplary embodiment the present disclosure is directed to a computing system for malware scanning and detection the system comprising at least one memory to store data and instructions and at least one processor configured to access the at least one memory and when executing the instructions to perform monitoring and recording of system application programming interface API calls create software objects associated with the web page perform antivirus scanning of the software objects dc obfuscate JavaScript associated with the software objects and correlate data associated with the performed analysis to determine if the web page is a malicious web page.

The prevalence of malware has led to the development of malware detection software. The developed malware detection software may be installed on a user s computer to detect malware when a user performs a search on a supported search engine. In such a case the malware detection software may consult one or more lists of web sites known to promulgate malware e.g. a blacklist to advise the user as to whether the web pages referenced in the search results may contain malware. These lists may be created through the use of malware tools that crawl the Internet or World Wide Web identifying malware infected web pages. Using a combination of malware detection algorithms and tools both static and dynamic analytical tools malware detection can be performed.

Honeypots are one tool that may be used to preemptively detect and prevent malware infections. Generally a honeypot is a computing device configured to detect and or analyze attempts at unauthorized use of computing systems. In some embodiments a honeypot is designed to be exploited in as many ways possible and to fool malicious webservers into thinking the honeypot is a real user visiting a web page. By seeking to be exploited as often as possible honepots allow malicious web pages to be identified and campaigns that span plural web pages across plural domains to be tracked. Typically a honeypot is configured to operate with an internet browser and or operating system known to be vulnerable to malware attacks or have software flaws. Using a combination of diversified IP addresses and honeypots malware detection can be performed more effectively.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the disclosure as claimed.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings and the following description to refer to the same or like parts. While several exemplary embodiments and features are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the disclosure. For example substitutions additions or modifications may be made to the components illustrated in the drawings and the exemplary methods described herein may be modified by substituting reordering or adding steps to the disclosed methods. Accordingly the following detailed description does not limit the disclosure.

Computing devices may each be a computing device configured to receive malware scan requests perform malware scanning processing and analysis and report data related to the malware scan requests. For example each of computing devices may be configured to perform honeypotting analysis and crawl functions. Computing devices may be a server client mainframe desktop laptop network computer workstation personal digital assistant PDA tablet PC telephony device and the like. In one embodiment computing device may be a computer configured to receive and process malware scan requests using a virtual machine. Computing devices may be configured to communicate with one or more web pages via network .

Web pages may each be generally understood to be a document or information resource that is suitable for access via the Internet or World Wide Web . For example web pages may be retrieved from a computer such as computing devices . Typically web pages are accessed through an internet browser and displayed on a monitor such as a monitor associated with a laptop or desktop computer or a display such as the display of a mobile device. Often the information in web pages is in Hypertext Markup Language HTML Extended HTML XTML or Extensible Markup Language XML format and include navigation links to other web pages i.e. hypertext links. Web pages may also include other resources such as for example style sheets scripts images objects and the like. Web pages are typically transferred using Hypertext Transfer Protocol HTTP .

Network may be any appropriate network that allows communication between or among one or more computing systems such as for example computing system and or computing devices such as for example computing devices . Network may include for example the Internet a local area network a wide area network a WiFi network a workstation peer to peer network a direct link network a wireless network or any other suitable communication network. Connection with network may be wired wireless or any combination thereof. In one exemplary embodiment network may allow communication between computing devices and one or more web pages .

As used in computing device may also be referred to as a thick spoke and may be configured to be an autonomous computing device operable to perform honeypot analysis and crawl functions. Also as used in proxy may be referred to as a thin spoke and may be a computing device functioning as the proxy of a thick spoke to aid in IP diversification. Generally IP diversification may be achieved the use of a diverse range of IP addresses to perform web crawling.

As shown in malware controller may be any type of computing device many of which are known in the art. Malware controller may be configured to receive malware scan requests and send the malware scan requests to one or more hubs for further processing. Malware controller may also be configured to analyze data to autonomously identify malware scan requests and send the malware scan requests to one or more hubs for further processing. Malware scan requests may include one or more parameters such as for example target uniform resource identifiers URIs uniform resource locators URLs and or uniform resource names URNs types and or number of browsers to use when visiting the targeted URIs URLs and or URNs a priority of the malware scan request how many links e.g. hypertext links to extract from the targeted URIs URLs and or URNs and visit number of pages of the targeted URN URLs and or URNs to visit specific hostnames for which links can be extracted from the targeted URIs URLs and or URNs and visited rate limiting parameters etc. The one or more target URIs URLs and or URNs may for example be used to identify web pages upon which malware scanning is to be performed by computing system .

As illustrated by malware controller may be in communication with hub . In addition malware controller may also be in communication with another hub i.e. hub as illustrated by the dashed line from malware controller to hub . That is malware controller may be configured to send instructions including malware scan requests and data to hub and to receive data including results of malware scan requests from hub . However in the event hub should become inoperable or there is a loss of communication between malware controller and hub malware controller may also communicate with hub and be configured to immediately begin sending instructions and data to hub and begin receiving data from hub . In such an embodiment hub may be considered to be a backup hub that is on hot standby. Although malware controller is illustrated in as connected only to hubs and malware controller may be connected to and or in communication with any number of hubs .

Hub may be a computing device configured to perform data management load management and work delegation to one or more computing devices . As illustrated in hub may be in communication with one or more computing devices including computing devices computing devices computing devices computing devices and computing devices . Thus hub the active hub in the example of may be configured to perform load management for computing devices and and delegate malware scan requests received from malware controller to one or more computing devices and based on load management determinations. Although hub is illustrated in as connected only to computing devices and hub may be connected to and or in communication with any number of computing devices such that the number of computing devices may be scalable in both an increasing and decreasing manner.

Proxies may be any computing device configured to serve as an internet proxy. In the embodiment illustrated by computing devices may be configured to use one or more proxies to make traffic appear to originate from a different source based on an IP address associated with proxy . In some embodiments computing devices and proxies may be within the same netblock 24 of IP addresses i.e. the last eight bits . In other embodiments computing devices and proxies may be in different netblock of IP addresses. In still other embodiments computing devices and proxies may be geographically separated.

Further details of the hub and spoke computing system of can be found in co pending U.S. patent application Ser. No. 12 982 540 filed Dec. 30 2010 entitled SYSTEMS AND METHODS FOR MALWARE DETECTION AND SCANNING pending the entire contents of which is incorporated herein by reference in its entirety.

In one implementation database may be a software database program configured to store data associated with computing device such as for example a MySQL database. MySQL is a relational database management system RDBMS that may be configured to run as a server on computing device thereby providing multi user access to a number of other databases. In one implementation memories and or may store software components and and CPU be used to execute these software components.

In certain embodiments worker may be configured to operate one or more virtual machines VMs . A VM may be a software implementation of a computer such that the VM may be configured to execute programs. In some embodiments the VM may be a system that provides a platform to support operation of a complete operating system OS and may be configured to support execution of a plurality of programs and processes such as for example a browser one or more analysis tools etc. In one implementation worker may include a single controller VM CVM which may include a Honeypot Manager HP Manager and one or more honeypot VMs HPVMs such as for example HPVM HPVM and HPVM each of which may include a Honeypot Agent HP Agent . The HP Manager and HP Agents may communicate with one another with the HP Manager sending instructions to the HP Agents.

Referring to HPVMs of each HPVM may include one or more browsers and or other applications that may be considered vulnerable to malware infection. The HP Agent may interact with the HP Manager receiving commands from the HP Manager. These commands may be used to initiate the one or more browsers instructing the browsers to visit a web page . The one or more browsers may be software programs configured to retrieve present and traverse e.g. crawl information resources available on the Internet. Typically an information resource may be identified by a URI a URL and or a URN and may include a web page an image a video or other types of content. In some embodiments browsers may be used to access information provided by web servers in private networks and or files in file systems. Browsers may include for example MICROSOFT INTERNET EXPLORER GOOGLE CHROME FIREFOX APPLE SAFARI etc. In embodiments disclosed herein the browsers operating in HPVMs may function as web crawlers systematically browsing the Internet in a methodical automated manner. Using the browsers one or more HPVMs may visit the same or different URIs URLs and or URNs at once and in parallel inside a single worker .

In addition each HPVM may also contain custom software that performs behavioral logging. In some embodiments the behavioral logging system may perform system monitoring such that all system activity is recorded and analyzed to determine if any abnormal application programming interface API calls are made. The behavioral logging system may also look for patterns of API calls known to be made by malicious content that may be rendered by the browser. For example the behavioral logging system may monitor API calls on HPVMs including the specific calls necessary to write files to disk and execute programs on HPVMs . In some embodiments any API call on an HPVM may be determined to have been made by malware or related malware delivery code embedded in web pages . The behavioral logging system may send the API calls log to CVM which may in turn store the monitored system activity in database of computing device .

HP Manager of CVM may be configured to communicate with the HP Agent daemon running on each HPVM to provide instructions to HPVMs and communicate with virtualization software in each HPVM to control the starting stopping and reverting of HPVMs . For example CVM may determine the number of HPVMs that are operational in worker and provide instructions to each of HPVMs . Through its role as a router CVM may also be configured to determine a remote proxy system such as proxies and of through which traffic may be relayed for each HPVM .

CVM may also be configured to execute software that communicates with database to determine the targeted URIs URLs and or URNs to visit as well as one or more parameters to be used when visiting the targeted URIs URLs and or URNs. In one exemplary embodiment the one or more parameters may be included in a malware scan request received by computing device and stored in database . For example the one or more parameters may include a type and version of browser a type and version of operating system OS etc. In addition the one or more parameters may be based on for example workload management and distribution criteria and or rate limiting criteria. Workload management and distribution criteria may include consideration of bandwidth utilization and costs which may be affected by factors such as for example time of day the number of IP addresses in a netblock etc.

Rate limiting may be understood as limiting the number of concurrent honeypots visiting web pages within a domain and or a netblock. Rate limiting may be performed based on one or more parameters and these one or more parameters may be independently configurable for each domain and or netblock. The one or more parameters may include for example a number of honeypots that are permitted to concurrently visit a given domain and or netblock. The number of honeypots may be set arbitrarily by a system manager and or at the request of the domain owner and or netblock owner. In one exemplary implementation the number of honeypots may be set to avoid overloading relatively smaller webserver hosts while being able to effectively hasten the scanning speed for relatively larger webserver hosts. The determination of webserver host size e.g. smaller larger etc. may be defined manually through an automated process of netblock lookups that are correlated to a table of known large hosts such as GODADDY BLUEHOST etc. or any combination thereof.

In some embodiments CVM may also be configured to function as a router for all honeypot packets. That is all data sent between HPVMs and a remote webserver such as for example hub of may pass through CVM . In addition CVM may be configured to execute custom software that sorts and captures live network packets to and from the HPVMs saves them into packet capture pcap files and stores the packet capture file location in database of computing device . That is network traffic and control traffic may be sorted from one another as they are transmitted from HPVMs to CVM such that there is a clear record of all data transmitted between HPVMs and one or more remote servers. This sorted data may then be analyzed by malware analyzer .

Further CVM may fetch the log of clickable links associated with the URI URL and or URN visited by a browser operating in HPVMs as well as the log of system API calls made by the browser using the HP Agent and may perform analysis on the system API call log using lists such as for example white lists and or black lists of known system API calls made by the browser. Additionally the CVM may be configured to record the location of the pcap file and the clickable links log in a database such as database and indicate that the corresponding malware scan request is ready for analysis by malware analyzer .

Malware analyzer may be a single self contained computing device. In some embodiments malware analyzer may be a standalone computing device such as computing device . In other embodiments malware analyzer may be a VM and may be configured to operate on the same computing device as CVM and HPVMs . Malware analyzer may be configured to receive data and instructions from CVM and may perform malware analysis on the received data in accordance with the instructions. Malware analyzer may store the results of its analysis in database . In one implementation the results may be stored in database using a received malware scan request as a key or index to the data stored in database .

As shown in upon receiving instructions from CVM HPVM may modify one or more system parameters step . Modifying the one or more system parameters may include for example deleting the existing browser cache files stored by HPVM . In addition modifying system parameters may include installing session cookies and modifying user agent strings used by the browser of HPVM .

HPVM may then initiate the behavioral logging system step . As discussed above in connection with the behavioral logging system may perform system monitoring such that all system activity is recorded and analyzed to determine if any abnormal API calls are made. In addition the behavioral logging system may identify patterns of API calls known to be made by malicious content.

Next HPVM may initiate the browser and instruct the browser to visit the targeted web page step . The HP Agent of HPVM may start any browser installed on HPVM . In some embodiments the browser type and version may be included in the malware scan request and may be sent from CVM to HPVM . The type and version of browser operating in HPVM may be determined based on any number of factors including commercial popularity and use known vulnerabilities etc. HPVM may use a browser with or without software patching. That is in some embodiments HPVM may use a browser that has not been updated with software designed to fix known security vulnerabilities or other flaws whereas in other embodiments HPVM may use a browser that has been updated with one or more software components. Visiting a targeted web page may include retrieving data from the identified URI URL or URN associated with web page .

HPVM may then extract links from the browser s DOM step . In some embodiments HPVM may extract links associated with scripts and the like using the browser s exposed API. The extracted links may be compiled to create a set of clickable links.

After HPVM has completed its visit to the targeted web page HPVM may kill the processes operating in HPVM step . That is HPVM may cause the browser and all so called helper programs operating in HPVM to be explicitly ended. At this time the behavioral logging system may also be shut down.

HPVM may extract the recorded system API calls log step . HPVM may transmit the extracted system API calls log to CVM which may in turn transmit the system API calls log to malware analyzer . After the system API calls log is transmitted to CVM the API calls log file may be deleted from HPVM and the information and data collected from the visited web page may be sent to malware analyzer via CVM for further analysis. In some embodiments CVM may store the data retrieved by HPVM as well as the results of any analysis performed by CVM or HPVM on database of computing device . In some embodiments computing device may transmit the stored data and or results to hub which may in turn transmit the data and or results to malware controller .

Injector may be a software component configured to poll database for malware scan requests such as tasks to analyze. In addition injector may be configured to transfer the mined links log which is created by the behavior logging system and the pcap file to the correct positions on the disk.

Ejector may be a software component configured to complete the analysis of malware scan requests such as tasks . For example ejector may store the results of the any malware analysis performed by malware analyzer in a database such as database . In addition ejector may examine the mined links log and create one or more new tasks based on one or more parameters defined in the task being analyzed. That is ejector may initiate one or more new tasks based on one or more URIs URLs and or URNs identified in the task being analyzed.

Ejector may also compare mined links URIs URLs and or URNs against one or more lists. In some embodiments ejector may compare any and even every URI URL and or URN found in web page against one or more lists. The lists may include for example whitelists AV blacklists and or malware blacklists. The AV and malware blacklists may be commercial blacklists proprietary blacklists or any combination thereof. The AV and malware blacklists may serve as access controls by identifying entities that are denied entry to a specific list or a defined range of users programs or network addresses.

In one example implementation ejector may compare the mined links against blacklists to determine if any of the mined links are links known to be malicious. Comparing the mined links against blacklists may include for example looking for the existence of any URIs URLs and or URNs in the blacklist that belongs to the domain of the current task. The outcome of this comparison may be for example a prioritized list of URIs URLs and or URNs upon which malware analysis is to be performed placing those URIs URLs and or URNs that are determined to be malicious based on the comparison against the one or more lists at a higher priority on the prioritized list.

Tasks may each be associated with a malware scan request such as for example malware scan requests received from hub of . In some embodiments the malware scan request may include the URI URI or URN of a web page that is to be analyzed. Tasks may also be associated with tasks received from ejector such as for example the URIs URLs and or URNs in the prioritized list created by ejector .

Upon receiving a task malware analyzer may initiate malware analysis. For example malware analyzer may initiate TCP reassembly SSL decryption . TCP reassembly SSL decryption may be used to capture pcap files and perform TCP stream reassembly. In addition TCP reassembly SSL decryption may create software objects upon which other analysis tools such as for example JavaScript execution emulation antivirus scanning etc. can seamlessly operate. TCP reassembly SSL decryption may also allow for SSL protected Hypertext Transfer Protocol HTTP traffic to be transparently reconstructed into software objects. Software objects may include for example images javascripts flash movies cascading style sheets AJAX messages etc. TCP reassembly SSL decryption may store the software objects in database of computing device .

Each of analysis tools may be a software program and may be configured to perform malware scanning and analysis of web pages . Analysis tools may include for example proprietary and or commercial tools to dynamically and statically analyze Javascript e.g. JsUnpack etc. . In some embodiments malware analyzer may initiate JavaScript de obfuscation. In one example implementation de obfuscation may be performed using a JavaScript execution emulation tool. The JavaScript execution emulation tool may be a software tool that processes pcap files collecting the TCP streams and extracting the HTTP traffic. Malware analyzer may store the results of the de obfuscation analysis in database of computing device . After de obfuscation objects may subsequently be subject to AV scanning URL comparison and IDS analysis.

In addition analysis tools may include proprietary and or commercial antivirus AV scanning tools e.g. AD AWARE BITDEFENDER MCAFEE VIRUSSCAN NORTON ANTIVIRUS etc. to perform AV scanning of one or more objects. In some embodiments all software objects reconstructed from the network traffic are scanned with multiple AV software products. AV scanning may be used to detect computer viruses worms trojan horses adware spyware etc. that may be embedded within the software objects associated with web page . Malware analyzer may store the results of the AV scanning in database of computing device .

Analysis tools may also include proprietary and or commercial tools to scan network traffic objects e.g. Matchbook which is a proprietary tool etc. to identify matching patterns. Matchbook is an intra object pattern matching system configured to identify malicious campaigns specific exploit kits and other patterns. Typically Matchbook is configured to operate on a collection of the individual objects requested by the browser when visiting a web page . In some embodiments Matchbook may be configured to create a pattern associated with the visited web page and compare the created pattern against other patterns associated with other web pages . When the created pattern matches the pattern of another web page that has been previously determined to be malicious Matchbook may identify the visited web page as malicious as well. In other embodiments Matchbook may be configured to compare characteristics of a visited web page against a list of conditions or rules. When the characteristics match all of the conditions or rules on the list Matchbook may identify the visited web page as malicious. In other implementations when the characteristics of a visited web page match a predetermined number of the conditions or rules on the list or the characteristics are within a predetermined threshold or range Matchbook may identify the visited web page as malicious. Malware analyzer may store the results of the Matchbook analysis in database of computing device .

In addition analysis tools may include proprietary and or commercial tools to perform intrusion detection system IDS analysis to scan raw network traffic e.g. Snort which is a proprietary tool etc. . In one exemplary embodiment IDS analysis may include review of raw network traffic between two systems to identify potential malware such as for example obfuscated executable code in the traffic and potential cross site scripting attacks. IDS analysis may also include performing network protocol analysis for anomaly detection. Malware analyzer may store the results of the IDS analysis in database of computing device .

Further analysis tools may include an incident classification tool that is configured to search for and identify patterns in the results of all other analysis tools results for the purpose of classifying a potential malware attack and or adding false positives to one or more whitelists. Analysis tools may include an HTTP object relationship mapping module for mapping the hierarchical relationships between the objects the browser requested based on HTML tag type or redirect type HTTP 30 redirects .

Additionally analysis tools may include proprietary and or commercial tools to perform document object model DOM tree emulation. DOM is a language independent convention used to represent and interact with software objects in HTML XHTML and XML documents. In DOM documents have a logical structure which can be referred to as a tree. DOM tree extraction may include for example parsing an HTML XHTML or XML document to obtain the logical structure of the objects within the document. The DOM tree emulator may be configured to parse and execute software objects requested by the browser of an HPVM and build the DOM separate and apart from the requesting browser of the HPVM . The emulated DOM tree may be maintained while executing one or more JavaScripts flash movies java applets etc. The output of the DOM tree emulator may serve as an input to one or more other analysis tools such as for example a JavaScript execution emulation tool etc. The DOM tree emulator may store the emulated DOM tree in database of computing device .

Analysis tools may also include proprietary and or commercial tools to perform document object model DOM tree extraction. In some embodiments the DOM tree extractor may be a plug in configured to operate on top of or in connection with a browser operating in HPVM such that DOM tree extraction may be performed by worker of and controlled via the HP Manager and HP Agent relationship in worker . The DOM tree extractor may be configured to provide a snapshot of the DOM tree at any given point in time. In one example implementation after loading a URL in a browser operating in HPVM malware analyzer may wait for a given number of seconds for any javascripts to run and then send a request for an updated DOM tree to worker . The DOM tree extractor may be configured to provide a snapshot of the DOM tree at any given point in time. The output of the DOM tree extractor may serve as an input to one or more other analysis tools such as for example a JavaScript execution emulation tool etc. The DOM tree extractor may store the extracted DOM tree in database of computing device .

AutoAnalyst may be a software tool configured to correlate the data obtained from one or more other analysis tools and apply heuristic analysis to the correlated data. Using the results of AutoAnalyst a web page may be determined to be malicious or not. More specifically one or more URIs URLs or URNs associated with web page may be determined to be malicious. Malware analyzer may store the results of the AutoAnalyst analysis in database of computing device . In some embodiments computing device may send the results of the AutoAnalyst analysis to hub which may in turn send the results of the AutoAnalyst analysis to malware controller .

Although not illustrated malware analyzer may also include a software component that monitors rule or configuration files for changes. If any of these rule or configuration files is modified this component may instruct malware analyzer to reload the rules or configuration file of the indicated analysis tools . In some implementations these files may be updated without needing to restart malware analyzer .

As discussed above proxy may be configured to operate as a proxy for one or more computing devices . Thus the steps discussed above that are performed by computing device may be routed through proxy allowing proxy to serve as an intermediary. In some embodiments routing through proxy by computing system may be instructed by malware controller hub or any combination thereof.

In the disclosed embodiments web servers attempting to infect computing devices with malware can be identified through IP diversification. This can be achieved by using VMs operating on computing devices physically located at an IP address as well as through the use of proxies.

It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the disclosure being indicated by the following claims and their full scope of equivalents.

