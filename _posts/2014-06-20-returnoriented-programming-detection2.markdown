---

title: Return-oriented programming detection
abstract: According to one embodiment, a threat detection system is integrated with at least a dynamic analysis engine. The dynamic analysis engine is configured to automatically detect a function call by an application, responsive to detecting the function call, analyze contents located at one or more addresses located within a portion of memory allocated for the application, and, based on the analysis, determine whether one or more objects included in received network traffic is associated with a return-oriented programming (ROP) exploit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594912&OS=09594912&RS=09594912
owner: FireEye, Inc.
number: 09594912
owner_city: Milpitas
owner_country: US
publication_date: 20140620
---
This application claims the benefit of priority on U.S. Provisional Application No. 62 009 128 filed Jun. 6 2014 the entire contents of which are incorporated by reference herein.

Embodiments of the disclosure relate to the field of cyber security. More specifically one embodiment of the disclosure relates to a system apparatus and method for detecting a return oriented programming ROP exploit based at least in part on instruction sequences stored at valid addresses located within a portion of memory allocated for an instance of an application the application attempting to execute one or more objects contained within received network traffic.

Over the last decade malicious software has become a pervasive problem for Internet users as many networked resources include vulnerabilities that are subject to attack. For instance over the past few years more and more vulnerabilities are being discovered in software that is loaded onto network devices such as vulnerabilities within operating systems for example. While some vulnerabilities continue to be addressed through software patches prior to the release of such software patches network devices will continue to be targeted for attack by exploits namely malicious computer code that attempts to take advantage of a vulnerability in computer software by acquiring sensitive information or adversely influencing or attacking normal operations of the network device or the entire enterprise network.

In particular a malware writing technique known as ROP has become fairly widespread recently. ROP is an exploit that allows a writer of malware to chain together sequences of instructions through return instructions thereby accomplishing one or more tasks via the execution of the chain of sequences of instructions. ROP techniques were developed as a way to circumvent data execution prevention DEP techniques which have been recently implemented in many operating systems to thwart unauthorized activities including malicious attacks.

A DEP system prevents the execution of portions of memory allocated by an application marked as non executable. For instance areas of allocated memory that contain data as opposed to executable code may be marked as non executable. In particular the stack and virtual heap of memory allocated by an application are typically marked as non executable by default. Therefore malware writers that previously inserted shellcode into the stack or virtual heap and executed an instruction to direct the execution flow to the inserted shellcode are not able to execute the inserted shellcode. A DEP system typically prevents malware writers from executing the inserted shellcode by causing the application to terminate.

In order to circumvent the protections established by a DEP system malware writers turned to return oriented programming Malware writers may accomplish tasks they would have inserted into the stack and or virtual heap using shellcode by executing sequences of instructions already appearing in executable code such as a dynamically loaded library DLL loaded by the application. Using the ROP technique malware writers search the areas of the allocated memory marked as executable such as DLLs for sequences of instructions that chained together accomplish any desired tasks. The sequences of instructions are chained together through the use of return instructions following the sequence of instructions. For example the return instruction following sequence 1 will point to sequence 2. Therefore merely performing a search of the stack or virtual heap for shellcode may not be sufficient to detect such exploits.

Various embodiments of the disclosure determine whether an object of network content or other digital content is attempting to utilize a particular type of programming technique return oriented programming ROP to circumvent any malware detection or protection procedures employed by the network device including data execution prevention DEP systems. This determination entails an analysis of an application s allocated memory and its contents to ascertain whether the contents correspond to a ROP exploit and the object should be classified as suspicious or even malware.

Specifically in one embodiment this determination explores the contents stored at addresses surrounding within a predetermined address range of a predetermined location select address value within the stack at a particular point in time. The contents stored on the stack within a particular distance from the predetermined location are analyzed to determine whether each is stored at a valid address in memory allocated to one of certain software modules e.g. of the application being executed . If an address within the predetermined address range is not a valid address in memory allocated to one of the modules its contents are disregarded for purposes of ROP detection. However if an address within the predetermined address range is a valid address in memory allocated to one of the modules the contents located at that address and in some embodiments the next valid address or addresses in the stack are further analyzed to determine if the address or addresses contain a gadget i.e. computer code with less than a predefined number of instructions that are chained together followed by a return instruction . If they do contain one or more gadgets a ROP exploit may have been uncovered. In some embodiments depending on factors such as the number of detected gadgets the object may be classified as suspicious that is associated with a probable ROP exploit or malware or as malicious that is associated with a high probability that the object is malware. In some embodiments a correlation engine may associate the object with a score weight or threat level corresponding to a probability that the object is associated with a ROP exploit and may also classify the object as suspicious if the score exceeds a threshold or even malicious if the score exceeds a higher threshold. In some embodiments if a ROP exploit is detected the object is always classified as malware.

Embodiments of the invention may be employed by or take the form of a network device or apparatus implementing a threat detection and prevention TDP system where the network device has a dynamic analysis engine for monitoring and analyzing behavior of objects during processing in a virtual runtime environment. In some embodiments the TDP system may be implemented or executed by a server or client device or other system called an endpoint connectable to a network. In other embodiments the TDP system may be a dedicated cyber security appliance or general purpose computer system. The TDP system may include an optional static analysis engine as well as the dynamic analysis engine. According to one embodiment of the disclosure the static analysis engine operates as a filter that analyzes information associated with characteristics of one or more objects extracted from monitored network traffic in efforts to determine if the characteristics are anomalous and thus indicative of an exploit. If so the object s are labeled suspicious . The dynamic analysis engine may include virtual execution logic to automatically process and analyze without user assistance content within object s of the received network traffic. Furthermore the dynamic analysis engine may include monitoring logic to automatically instantiate and execute an application to execute or otherwise process an object within received network traffic and analyze the memory allocation for the application and patterns of instructions stored therein in order to detect a heap spray attack and or an ROP exploit in accordance with any of the techniques and embodiments described herein.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term object generally refers to a collection of data e.g. digital values which may include instructions commands statements and other data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables the object to be classified for purposes of analysis. During analysis for example the object may exhibit a set of expected characteristics and during processing a set of expected behaviors. The object may also exhibit a set of unexpected characteristics and a set of unexpected behaviors that may evidence an exploit and potentially allow the object to be classified as an exploit.

Examples of objects may include one or more flows or a self contained element within a flow itself. A flow generally refers to related packets that are received transmitted or exchanged within a communication session. For convenience a packet is broadly referred to as a series of bits or bytes of data having a prescribed format which may include packets frames or cells and within each header payload etc.

As an illustrative example an object may include a set of flows such as 1 a sequence of transmissions in accordance with a particular communication protocol e.g. User Datagram Protocol UDP Transmission Control Protocol TCP or Hypertext Transfer Protocol HTTP etc. or 2 inter process communications e.g. Remote Procedure Call RPC or analogous processes etc. . Similar as another illustrative example the object may be a self contained element where different types of such objects may include an executable file non executable file a document for example a Microsoft Office document a dynamically linked library DLL a Portable Document Format PDF file a JavaScript file Zip file a Flash file an electronic mail email downloaded web page an instant messaging element in accordance with Session Initiation Protocol SIP or another messaging protocol or the like.

An exploit may be construed broadly as information e.g. executable code data command s etc. that attempts to take advantage of a vulnerability. Typically a vulnerability is a coding error or artifact of software e.g. computer program that allows an attacker to alter legitimate control flow during processing of the software computer program by a network device and thus causes the network device to experience undesirable or unexpected behaviors. The undesired or unexpected behaviors may include a communication based anomaly or an execution based anomaly which for example could 1 alter the functionality of an network device executing application software in a malicious manner 2 alter the functionality of the network device executing that application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context. To illustrate a computer program may be considered as a state machine where all valid states and transitions between states are managed and defined by the program in which case an exploit may be viewed as seeking to alter one or more of the states or transitions from those defined by the program.

Malware may be construed broadly as computer code that executes an exploit to take advantage of a vulnerability for example to harm or co opt operation of a network device or misappropriate modify or delete data. Conventionally malware is often said to be designed with malicious intent. An object may constitute or contain malware.

The term transmission medium is a physical or logical communication path between two or more network devices e.g. any devices with data processing and network connectivity such as for example a security appliance a server a mainframe a computer such as a desktop or laptop netbook tablet firewall smart phone router switch bridge etc. . For instance the communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In certain instances the term detected is used herein to represent that there is a prescribed level of confidence or probability in the presence of an exploit or in particular a ROP exploit within an object under analysis. For instance the virtual execution logic may detect the presence of a ROP exploit by monitoring or observing unexpected or anomalous behaviors or activities and in response determining that the object includes a ROP exploit.

The term network device should be construed as any electronic device with the capability of connecting to a network. Such a network may be a public network such as the Internet or a private network such as a wireless data telecommunication network wide area network a type of local area network LAN or a combination of networks. Examples of a network device may include but are not limited or restricted to a laptop a mobile phone a tablet a computer etc.

The term gadget may be construed as a sequence of computer instructions not including a return instruction hereinafter referred to as instructions followed by a return instruction where the sequence of instructions prior to the return instruction is less than a predefined threshold. A gadget may also consist solely of a return instruction. As an illustrative example a gadget may be defined as any instruction sequence having less than ten instructions followed by a return instruction. Therefore any instruction sequence consisting of more than one but less than a predetermined amount of instructions followed by a return instruction will be considered a gadget.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware. Also the terms compare or comparison generally mean determining if a match e.g. a certain level of correlation is achieved between two items where one of the items may include a particular signature pattern.

The term signature designates an indicator of a set of characteristics and or behaviors exhibited by one or more exploits that may not be unique to those exploit s . Thus a match of the signature may indicate to some level of probability often well less than 100 that an object constitutes an exploit. In some contexts those of skill in the art have used the term signature as a unique identifier or fingerprint for example of a specific virus or virus family or other exploit which is generated for instance as a hash of its machine code and that is a special sub case for purposes of this disclosure.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

The invention may be utilized for detection verification and or prioritization of malicious content such as exploits in particular ROP exploits. As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of an operational flow for ROP exploit detection by a network device e.g. a TDP system is shown. Herein some or all of the incoming objects associated with monitored network traffic are received by virtual execution logic which is part of a dynamic analysis engine see either directly or via an optional static analysis engine . According to one embodiment of the disclosure when deployed in the network device the static analysis engine is configured as a capture and filter device that receives the incoming objects and conducts heuristics e.g. rules check exploit signature checks and or vulnerability signature checks on some or all of the objects as described below.

The virtual execution logic conducts an in depth analysis of at least one object of the incoming objects by instantiating a computer application to virtually process the object and analyze the contents within a portion of the stack of memory allocated by the application. Specifically the virtual execution logic determines whether the contents at each address of the stack represents a valid address located within a portion of memory allocated to a module of the application such as a dynamically loaded library DLL or other module loaded by the application. If the address value represents a valid address located within a portion of memory allocated to the module a portion of the virtual execution logic may inspect the instruction sequence for a gadget the instruction sequence located at that address and in valid addresses following that address.

Upon conducting at least an analysis of the addresses stored within a portion of the stack of an application used to execute at least one object of the incoming objects the dynamic analysis engine provides the results of its analysis referred to herein as VM based results including information regarding any uncovered gadgets to reporting logic for storage in database and subsequent access. If implemented as part of the network device the static analysis engine may also provide results of its analysis referred to herein as static based results in some embodiments to reporting logic for storage in database and subsequent access.

Thereafter at least portions of the static based results and the VM based results for the incoming objects may be combined by the reporting logic . The reporting logic may issue an alert or report e.g. an email message text message display screen image etc. to security administrators to for example communicate the urgency in handling an uncovered ROP exploit or other exploit within the object of the incoming objects .

According to one embodiment of the disclosure the communicative coupling between the static analysis engine and the dynamic analysis engine is provided in a serial configuration where the incoming object s or a copy thereof may be processed in the virtual execution logic after analysis by the static analysis engine . However the static analysis engine and the dynamic analysis engine may be provided in a parallel configuration where the incoming object s or copy thereof may be processed in the virtual execution logic concurrently with analysis of objects by the static analysis engine .

Referring to an exemplary block diagram of a ROP exploit detection environment deploying a plurality of threat detection and prevention TDP systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. The ROP exploit detection environment comprises a server device an optional firewall a client device and a TDP system communicatively coupled to the network via a network interface . The TDP system is further communicatively coupled to the management system and one or more TDP systems via the network . In general management system is adapted to manage TDP systems . For instance management system is responsible for automatically updating a list of function calls to be observed by a portion of the virtual execution logic and trigger the ROP exploit detection within some or all of TDP systems .

Herein according to the embodiment illustrated in a first TDP system is a network device that is adapted to analyze information associated with network traffic routed over a communication network between at least one server device and at least one client device . The communication network may include a public network such as the Internet in which case an optional firewall represented by dashed lines may be interposed prior to accessing client device . Alternatively the communication network may be a private network such as a wireless data telecommunication network wide area network a type of local area network LAN or a combination of networks.

As shown the first TDP system may be communicatively coupled with the communication network via a network interface . In general the network interface operates as a data capturing device sometimes referred to as a tap or network tap that is configured to receive data propagating to from the client device and provide at least some of this data to the first TDP system . Alternatively as shown in the first TDP system may be positioned behind the firewall and in line with client device .

According to one embodiment of the disclosure the network interface is capable of receiving and routing objects associated with network traffic to the first TDP system . The network interface may provide the entire object or certain content within the object for example one or more files that are part of a set of flows packet payloads or the like. In some embodiments although not shown network interface may be contained within the first TDP system .

It is contemplated that for any embodiments where the first TDP system is implemented as a dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes a network interface card and related logic not shown for connecting to the communication network to non disruptively tap network traffic propagating through firewall and provide either a duplicate copy of at least a portion of the network traffic or at least a portion the network traffic itself to the dynamic analysis engine and the optional static analysis engine if included within the TDP system . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other networked network device which in some embodiments may be equipped with Switched Port Analyzer SPAN ports or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to duplicate files from virtual networks.

As further shown in the first TDP system comprises the optional static analysis engine a scheduler a storage device the dynamic analysis engine a classification engine and the reporting logic .

In some embodiments as shown in the static analysis engine may include one or more software modules that when executed by one or more processors performs static scanning on a particular object namely heuristics exploit signature checks and or vulnerability signature checks for example. The static analysis engine and the dynamic analysis engine may be one or more software modules executed by the same processor or different processors where these different processors may be located within the same processor package e.g. different processor cores and or located at remote or even geographically remote locations that are communicatively coupled e.g. by a dedicated communication link or a network.

More specifically as shown static analysis engine may be configured with heuristics logic exploit matching logic and or vulnerability matching logic . Heuristics logic is adapted for analysis of certain portions of an object under analysis to determine whether any portion corresponds to either i a statically determined communication protocol anomaly e.g. HTTP TCP etc. or other deviation from a predetermined rule or policy ii a suspicious identifier such as either a particular Uniform Resource Locator URL that has previously been determined as being associated with known exploits or a particular source or destination IP or MAC address that has previously been determined as being associated with known exploits iii a particular exploit pattern or iv a particular shellcode pattern. When deployed the exploit matching logic may be adapted to perform exploit signature checks which may involve a comparison of an object under analysis against one or more pre stored exploit signatures e.g. pre configured and predetermined attack patterns from signatures database . Additionally or in the alternative the static analysis engine may be configured with vulnerability matching logic that is adapted to perform vulnerability signature checks namely detect identifiers within the object that correspond to an exploit directed to a known vulnerability in a computer application for instance a process of uncovering deviations in messaging practices set forth in applicable communication protocols e.g. HTTP TCP etc. .

The static analysis engine may route suspicious objects to the virtual execution logic within dynamic analysis engine and filter other non suspicious objects from further analysis. In one embodiment if the object is not suspected of being an exploit the static analysis engine may simply denote that the object is non malicious. The dynamic analysis engine is configured to provide an in depth analysis of objects included in the received network traffic and or suspicious object s from the static analysis engine . The analysis may include inspecting instruction sequences stored at particular addresses located within a portion of the memory allocated by application executed by one or more objects.

More specifically if the optional static scanning is conducted upon its completion the static analysis engine may provide a suspicious object to the dynamic analysis engine for in depth dynamic analysis using virtual machines VMs M 1 . For instance the dynamic analysis engine may simulate transmission and or receipt by a destination device comprising the virtual machine.

According to one embodiment one or more VMs within the virtual execution environment may be configured with one or more of the software profiles corresponding to the software images stored within storage device . Alternatively the VMs may be configured according to a prevalent software configuration software configuration used by a network device within a particular enterprise network e.g. client device or an environment that is associated with the object to be processed including software such as a web browser application PDF reader application or the like. However for a known vulnerability which occurs after a successful match during a vulnerability signature check for example the VMs may be more narrowly configured to software profiles associated with vulnerable software. For example a particular version of an application may be used by the VMs .

The scheduler may be adapted to configure the multiple VMs for concurrent e.g. overlapping or simultaneous virtual execution of a variety of different versions of the software such as various operating systems in efforts to detect whether an object included within the received network traffic is attempting to utilize a ROP exploit. Of course the VM configuration described above may be handled by logic other than the scheduler . For instance although not shown the static analysis engine and or dynamic analysis engine may include configuration logic to handle VM configuration as well.

The dynamic analysis engine is adapted to execute one or more VMs to detect an attempt to utilize a ROP exploit by simulating the execution of an object under analysis within a run time environment as expected by the type of object. The dynamic analysis engine analyzes the received network traffic and determines which application is suitable for executing an object of the received network traffic within one or more VMs . . . and or . The monitoring logic instantiates an instance of the application within the virtual execution environment to open execute the object. The monitoring logic has a ROP detection module as seen in that operates in association with the instantiated application in the VM s to monitor behaviors e.g. activities of the running application as it processes the object. The ROP detection module analyzes addresses stored on a portion of the allocated memory in particular a portion of the stack allocated to the application and determines whether a threshold number of gadgets have been chained together to conclude that the object contains or is associated with a ROP exploit. Alternatively a weight may be attached to each instruction sequence and the monitoring logic may determine whether a ROP exploit is present based on a combined total of the weights given to the instruction sequences at the addresses within the portion of the stack.

The score determination logic which will be discussed in further detail below may also be implemented within the virtual execution logic to generate a score that represents a probability or level of confidence that the object under analysis is associated with a malicious attack. For instance the score may be based at least in part on the VM based results and in some embodiments on a combination of the static based results and VM based results.

The classification engine may be configured to receive the static based results e.g. results from static analysis metadata associated with the incoming network traffic etc. and or the VM based results . According to one embodiment of the disclosure the classification engine comprises prioritization logic and score determination logic . The prioritization logic may be configured to apply weighting to results provided from dynamic analysis engine and or static analysis engine . Thereafter the classification engine may route the classification results comprising the weighting and or prioritization applied to the static based results and or the VM based results to the reporting logic . The classification results may among others classify the object as malware classify the object as a member of a family of malware and or exploits describe the malware and or exploits and provide the metadata associated with any object s within which the malware and or exploits were detected. The alert generation logic of the reporting logic may generate an alert for the client device and or route the alert to the management system via the network for further analysis by a network administrator. In addition the reporting logic may store the classification results including the static based results and the VM based results in the database for future reference. Finally a signature for the malware or exploit may be generated and provided to one or more other systems to enable them to detect or classify objects matching the signature as malware in a more efficient manner.

Referring to an exemplary block diagram of a monitoring logic and a ROP detection module to analyze the contents of a portion of the memory allocated for an application within a VM is shown. In the embodiment as shown the virtual execution logic comprises the monitoring logic a score determination logic and virtual execution environment including one or more VMs such as VM . In the illustration the monitoring logic opens an instance of an application for example a browser such as Internet Explorer through an open process operation .

The monitoring logic observes the application as it is allocated memory including a virtual heap and a stack within the VM . The monitoring logic is equipped with a ROP detection module e.g. located within the virtual environment which operates in conjunction with the application instance i.e. process to obtain information and perform various tasks for the monitoring logic such as among others detecting activities initiated by the application and obtaining information required in detecting shellcode and or a ROP exploit to be discussed below . An operating system may also be present within the VM . The application and the ROP detection module may communicate with the operating system . For example the ROP detection module may observe function calls made by the application and or querying the operating system to determine what memory has been allocated to the application . Furthermore the ROP detection module may query the application directly to determine what memory has been allocated to the application .

In particular a portion of the monitoring logic observes i.e. performs an operation referred to as hooking or intercepting function calls initiated by the application . For example if the VM is executing a Microsoft operating system the ROP detection module may observe function calls such as application programming interface API calls. In a second example if the VM is executing an Apple operating system such as OS X the ROP detection module may observe function calls such as system calls. The observing of a function call by the ROP detection module may trigger a ROP exploit detection process as described below. The portion of the monitoring logic performing functionalities described above and or below may be referred to ROP exploit detection logic. 

Referring to a flowchart illustrating an exemplary method for detecting a ROP exploit is shown. In block after the monitoring logic has instantiated an instance of application and the instance is executing in the VM the ROP detection module observes a function call made by the application .

In block the ROP detection module takes a snapshot of a portion of the stack surrounding the location of the current position of the stack pointer the portion of the stack of which the snapshot was taken will be referred to as snapshot as is seen in at the point in time the function call is observed. The snapshot captures the current content on the stack at addresses surrounding the stack pointer. The snapshot is captured so that the contents may be preserved for analysis otherwise for example the contents might have been over written and thus made not available. The range addresses e.g. a number of addresses included in the snapshot may be predetermined number and may be set or modified by for example a configuration file that is uploaded to the TDP system by the management system . The snapshot may capture contents from a number of addresses prior to and a number of addresses following the current position of the stack pointer which may be numerically the same or different.

Referring to in block the ROP detection module analyzes the addresses of all contents stored within the snapshot to determine whether the address values represent valid addresses that is addresses of memory locations allocated to the application . The ROP detection module will compare the address represented by each address value in the snapshot against a list of allocated memory for the application obtained by querying the application or in some embodiments the operating system as illustrated in for metadata regarding the allocation.

In block of the ROP detection module determines whether a ROP exploit is present in the contents based on the analysis of instruction sequences within the snapshot . In some embodiments for each valid address the ROP detection module may analyze the contents of that address and as appropriate of one or more next address values for locations so long as they too have valid addresses. The ROP detection module will examine the contents at that address or those addresses for an instruction sequence that represents a gadget. Thereafter an alert may be generated by the ROP detection module notifying the monitoring logic of the presence of a ROP exploit.

Referring now to an exemplary block diagram of a portion of the stack allocated by application of which a snapshot has been taken is shown. Among the contents included in the snapshot shows the contents as an illustrative example. The contents and are seen to represent memory addresses and will be compared to a list addresses allocated to application as identified by metadata obtainable from the application . In contrast the contents and represent addresses that are not valid for the application and will be disregarded for purposes of analysis by the ROP detection module . The ROP detection module inspects the contents of valid addresses for gadgets. For illustrative purposes four gadgets are illustrated in by the groupings of the instructions .

Referring to a flowchart illustrating a more detailed in depth exemplary method for detecting a ROP exploit in shown. As primarily shown in in block the ROP detection module begins to perform function call observing hooking on the application e.g. from within the VM of . In block the ROP detection module observes a function call made by the application and takes a snapshot of the stack . In block the ROP detection module analyzes the contents within the snapshot . In block the ROP detection module determines whether a first content in the snapshot represents a valid address of a location allocated to the application . If the content does not represent a valid address block at block the ROP detection module checks whether the content being analyzed is the last content within the snapshot block . If the content currently being analyzed is the last content within the snapshot yes at block the ROP detection module disregards the function call made by the application and returns to await a next function call if any block . However if the content being analyzed is not the last content within the snapshot no at block the ROP detection module moves to the next content block and begins to analyze the next content as discussed above.

If the content being analyzed does represent a valid address for the application yes at block the ROP detection module inspects the instruction sequence located at the address block . At block the ROP detection module inspects the sequence of instructions at valid addresses within the stack to determine whether the sequence of instructions is a gadget. The inspection of the sequence of instructions entails at least counting the number of instructions prior to a return instruction. If the number of instructions prior to a return instruction is below a first predetermined threshold the sequence of instructions is considered a gadget.

If the instruction sequence is not determined to be a gadget no at block the ROP detection module returns to block and determines whether the content being analyzed is the last content within the snapshot . If the instruction sequence is determined to be a gadget yes at block the ROP detection module may assign a weight to the instruction sequence based on the contents of the instruction sequence block . For example an instruction sequence comprised of more than one but less than nine instructions followed by a return instruction may be given a first weight whereas an instruction sequence comprising only a return instruction may be given a second lower weight. The assigned weights may be based on experiential knowledge acquired through analysis of and in some embodiments machine learning from known malicious and non malicious objects. Thereafter in block the ROP detection module determines whether the combined total weight of all previously inspected instructions identified as gadgets exceeds a predetermined threshold weight. If the combined total weight does not exceed a predetermined threshold weight no at block the ROP detection module returns to block and checks whether the content being analyzed in the last content within the snapshot . However if the combined total weight does exceed a predetermined threshold weight yes at block the ROP detection module reports the presence of a ROP exploit block .

In an alternative embodiment the ROP detection module may utilize a gadget counter instead of assigning weights to each identified gadget. In such an embodiment when the ROP detection module identifies an instruction sequence as a gadget the ROP detection module increments a gadget counter. If the gadget counter exceeds a predefined threshold defining the number of gadgets necessary to conclude a ROP exploit is present the ROP detection module may report the presence of a ROP exploit. However if the gadget counter does not exceed the threshold defining the number of gadgets necessary to conclude a ROP exploit is present the ROP detection module returns to block and determines whether the content being analyzed in the last content within the snapshot .

Although the ROP detection module may perform ROP exploit detection logic as described above when a function call executed by the application is observed the ROP exploit detection logic may be triggered in some embodiments as a result of the ROP detection module performing a stack discrepancy check. A stack discrepancy check involves analyzing a Thread Information Block TIB . The TIB is a data structure that contains information regarding a currently running thread. The contents of the TIB include among other things an address representing the base of the stack of the application from which the thread was started and an address representing the limit of the stack. The base and stack addresses represent the range of the stack. During a stack discrepancy check the ROP detection module determines whether the current stack pointer is pointing to an address within the range represented by the base and stack addresses extracted from the TIB. If the current stack pointer is pointing to an address located within the range no stack discrepancy is reported. However if the current stack pointer is found to be pointing to a location outside of the range a stack discrepancy is reported.

Therefore in one embodiment of the disclosure a stack discrepancy check may be performed by the ROP detection module and if a stack discrepancy is reported for a given application running for example within the VM the ROP exploit detection logic may be triggered.

Referring back to the score determination logic within the dynamic analysis engine may be configured to compute a score based on analysis of monitored behavior during execution of the application within the one or more VMs . . . and or . According to one embodiment of the disclosure the score determination logic has one or more software modules that are used to determine a probability or level of confidence that the object contains a ROP exploit. As discussed above the score determination logic may assign a score based on one or more of i the static based results and or ii VM based results which may include among other things an alert of a ROP exploit or lack thereof and or the individual weights assigned to each gadget identified within a snapshot .

The scores may be given equal weighting or the weighting for one the static based results may differ from that given to the VM based results due to the accuracy of a set of results in detecting the presence of a ROP exploit and the likelihood of the detection resulting in a false positive.

Referring now to an exemplary block diagram of logic associated with the TDP system of is shown. The TDP system comprises one or more processors that are coupled to the communication interface logic via a first transmission medium . Communication interface logic enables communication with other TDP systems and management system of . According to one embodiment of the disclosure the communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other network devices.

The processor s is further coupled to the persistent storage via the transmission medium . According to one embodiment of the disclosure the persistent storage may include i the static analysis engine including the signatures database the vulnerability matching logic the exploit matching logic and the heuristics logic ii the dynamic analysis engine including the virtual execution logic the monitoring logic and the score determination logic and iv the reporting logic . Of course when implemented as hardware one or more of these logic units could be implemented separately from each other.

The static analysis engine if included comprises one or more software modules that conduct a first static analysis on one or more incoming objects. As described above this analysis may involve performing at least exploit signature checks and vulnerability signature checks on each incoming object to determine whether characteristics of any of these objects are indicative of an exploit and in particular a ROP exploit. Upon detection that one or more suspicious objects have characteristics of an exploit the static analysis engine provides the suspicious object s to the virtual execution logic .

The virtual execution environment comprises one or more software modules that are used for performing an in depth dynamic and real time analysis of one or more objects included in the received network traffic using one or more VMs. More specifically the virtual execution environment is adapted to run one or more of the VM s which each virtually processes the content associated with the one or more objects within a computer application in order to determine the presence of one or more exploits and in particular a ROP exploit. Furthermore the monitoring logic monitors in real time during run time and may also log at least the instruction sequences located at valid addresses allocated to the application when the valid addresses correspond to contents within the snapshot . The monitoring logic analyzes contents within the snapshot of the stack and inspects the instruction sequence s located at one or more of the addresses to identify one or more gadgets.

Thereafter according to the observed behavior of the virtually processed content the monitoring logic may determine that the content is associated with one or more exploits and in particular one or more ROP exploits where the severity of the observed anomalous behavior and or the likelihood of the anomalous behavior resulting from an exploit is evaluated and reflected in a score assigned by the score determination logic . Processor s may invoke the reporting logic which produces an alert for conveying information regarding the detected ROP exploit by the TDP system .

According to an alternative embodiment of the disclosure a network device may be configured to implement at least a monitoring logic which may be communicatively coupled with a ROP exploit detection logic. In some embodiments the ROP exploit detection logic may be co located with the monitoring logic within the network device and in other embodiments may be located remotely with respect to the device. In other words a network device may be equipped with integrated or embedded the monitoring logic which performs its functions within the network device and communicates its results e.g. over a dedicated communication link or network to the ROP exploit detection logic.

Referring to a network device may be configured with a ROP exploit detection logic. In the network device is represented by as an illustrative example a tablet . The tablet includes a display screen an antenna and a ROP exploit detection logic . The ROP exploit detection logic includes a monitoring logic which may be equipped with a ROP detection module for monitoring operations and other behavior of an application from within the tablet .

In one embodiment the ROP exploit detection logic may be implemented as a software service within the tablet . In such an embodiment the ROP detection module performs function call observing hooking . When a function call is observed the ROP detection module analyzes the actions taken by the tablet as a result of the function call or system call to determine whether the object that made the call contains or is associated with a ROP exploit. In one embodiment the ROP exploit detection logic may operate as a daemon such that the ROP exploit detection logic runs as a background process on the tablet . In yet another embodiment the ROP exploit detection logic may be implemented as a software application on the tablet .

The ROP detection module may capture and analyze the contents of a snapshot of the memory allocated for the application instantiated as a result of the function call. The ROP exploit detection logic may analyze as reported by the ROP detection module information such as i the instruction sequences located at addresses included in the snapshot ii the number of gadgets i.e. instruction sequences containing certain characteristics such as less than a predetermined number of instructions prior to a return instruction and or iii a weight of each gadget assigned by the ROP detection module during the execution of the application in the VM .

One or more alerts generated by either or both the ROP detection module and or the ROP exploit detection logic may be displayed to a user on the display screen . For example when the combined total weight for all identified gadgets exceeds a predetermined threshold an alert may be displayed on the display screen . Such alerts may present the user with the option to remediate the detected ROP exploit locally i.e. on the tablet or the option to store the information associated with the detected ROP exploit for remediation by the appropriate network administrator. One example of remediation that may occur locally is a system restore of the tablet to system defaults. Furthermore the information associated with the detected ROP exploit may be transmitted via the antenna to the appropriate network administrator.

In addition to the generation of an alert the ROP exploit detection logic may prevent the application from executing on the tablet outside of the confines of the VM . For instance upon determination of the presence of a ROP exploit associated with application the ROP exploit detection logic may prevent the tablet from executing an actual instance of the application outside of the virtual environment.

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

