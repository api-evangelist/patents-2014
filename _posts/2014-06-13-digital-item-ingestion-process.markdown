---

title: Digital item ingestion process
abstract: Disclosed are various embodiments for an ingestion process modifying digital items. A computing system receives an uploaded digital item configured to communicate with a testing server application when executed. The ingestion process reconfigures the digital item to communicate with a production server application when executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170795&OS=09170795&RS=09170795
owner: Amazon Technologies, Inc.
number: 09170795
owner_city: Seattle
owner_country: US
publication_date: 20140613
---
This application is a continuation of and claims priority to U.S. application Ser. No. 13 542 956 titled DIGITAL ITEM INGESTION PROCESS filed Jul. 6 2012 which is incorporated herein by reference in its entirety.

Many applications have functionality to complete transactions over a network. Problems arise when a developer must test correct functionality of these applications prior to making them commercially available.

Disclosed are various embodiments facilitating the modification of digital items through an ingestion process. Many digital items contain functionality to complete a transaction with a server application. Often this requires the digital item to communicate with one server application during testing of the item and another server application after the digital item is publicly distributed. As a non limiting example a game application may allow a user to purchase additional in game content by completing a financial transaction from within the application. During testing the game should contact a testing server application configured to only simulate a financial transaction. When the game is placed on a publicly available distribution system the game should contact a server application which will consummate the financial transactions so that a user is charged for the in game content. A digital item can be created such that it initiates these transactions with either the testing server application or the public server application based on predetermined conditions. Through an ingestion process a digital item can be modified to meet a predetermined condition such that it contacts the production server application without the developer having to alter the digital item.

With reference to shown is a networked environment according to various embodiments. The networked environment includes at least one developer client device at least one client device a network a testing computing device a production computing device a distribution computing device and potentially other devices. The network comprises for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The developer client device and client device are representative of a plurality of devices that may be coupled to the network . The developer client device and client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone set top box music players web pads tablet computer systems game consoles or other devices with like capability.

Various applications and or other functionality may be executed in the developer client device and client device according to various embodiments. Also various data is stored in data store that is accessible to the developer client device . Various data is stored in data store that is accessible to the client device . The data stores and may be representative of a plurality of data stores as can be appreciated. The data stored in the data stores and for example is associated with the operation of the various applications and or functional entities described below.

The developer client device may be configured to execute various applications such as a development application a deployment application and or other applications. A development application may be executed in a developer client device to facilitate the creation of a digital item . Such development applications may comprise software development kits SDK integrated development environments IDE text editors hexadecimal editors hex editor word processors video editors audio editors or productivity suites. An instance of digital item may be saved in data store . A deployment application may be executed in the development client device to facilitate the upload of an instance of a digital item to a distribution computing device and may comprise a browser to access and render network pages served up by a process executing on the distribution computing device a terminal which executes input commands a dedicated executable application or another application as may be appreciated.

A digital item may comprise an executable item a media item or another type of digital item. Executable items may refer to applications binaries or any other file containing executable logic as may be appreciated. Media items may comprise music files video files documents eBooks or any other data file which requires an execution application to render such as to display or play audio visual or text content to a user. An execution application may refer to applications containing executable logic to decode music text or video data including video players audio players eBook readers or any other application which facilitates a user s interaction with a media version of digital item as may be appreciated.

The client device may be configured to execute various applications such as a purchase application and or other applications. A purchase application may be executed in a client device to facilitate the download of an instance of a digital item from a distribution computing device and may comprise a browser to access and render network pages served up by a process executing on the distribution computing device a dedicated executable application or other application as may be appreciated. Purchase application will also facilitate any financial transactions prerequisite to downloading an ingested instance of a digital item referred to here as digital item which may then be saved in data store . The client device may also execute an instance of execution application referred to as execution application to render media item versions of digital item

The testing computing device and production computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices and may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices and together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices and may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience each of the computing devices or referred to herein in the singular. Even though the computing devices or are referred to in the singular it is understood that a plurality of computing devices or may be employed in the various arrangements as described above.

The components executed on the testing computing device for example include a testing server application and other applications services processes systems engines or functionality not discussed in detail herein. The testing server application is executed to simulate consummation of transactions in relation to the testing of digital item

The components executed on the production computing device for example include a production server application and other applications services processes systems engines or functionality not discussed in detail herein. The production server application is executed to consummate transactions relating to an execution on a client device of an instance of a digital item as will be described.

The distribution computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of distribution computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of distribution computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such distribution computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the distribution computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of distribution computing devices may be employed in the various arrangements as described above.

The components executed on a distribution computing device for example include a digital item distribution service and other applications services processes systems engines or functionality not discussed in detail herein. The digital item distribution service is executed to facilitate through the use of an ingestion process the upload of digital items from a deployment application over a network . The ingested instance of digital item referred to here as digital item may be saved in the data store . The digital item distribution service also uses a delivery process to facilitate the download of the ingested instance of digital item over a network to a client device executing a purchase application . To these ends the digital item distribution service may communicate with developer client devices and client devices over various protocols such as for example hypertext transfer protocol HTTP file transfer protocol FTP HTTP Secure HTTPS simple object access protocol SOAP representational state transfer REST user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . In various embodiments the digital item distribution service may support the use of anycast services and or peer to peer P2P protocols such as for example BitTorrent for data communications. Additionally the digital item distribution service may monitor the progress of scheduled uploads or downloads to ensure completion of the transfers.

The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store includes for example ingested instances of digital items and potentially other data.

Next a general description of the operation of the various components of the networked environment is provided. To begin a digital item is created on a developer client device using one or more development applications . The digital item contains logic which initiates transactions with either a testing server application before ingestion or a production server application after ingestion. For example in some embodiments this may comprise a game which contains logic for a player to unlock additional functionality in exchange for money. In other embodiments this may comprise a video media item which contains logic to permit access to additional video content. In addition the digital item may interact with the testing server application and production server application in other contexts. This logic sends a transaction request to either the testing server application or production server application . A transaction request may comprise data indicating which functionality is to be unlocked and other data sufficient for the testing server application to simulate a consummation of a transaction. Such transaction requests may include credit card information or other user identification information.

The testing server application in response to a transaction request simulates the completion or failure of a transaction and sends a plurality of transaction responses to the digital item indicating the simulated outcome. In some embodiments the testing computing device comprises one or more computing devices with which the developer client device communicates over a network . In other embodiments the testing computing device may be the same system as the developer client device and the testing server application is one of many applications executing on the developer client device .

In embodiments in which the testing server application is executed on the developer client device whether the testing server application simulates a successful or unsuccessful transaction may depend on input into a user interface. For example in one embodiment the digital item may request a transaction be completed by communicating a transaction request to the testing server application . The testing server application displays a user interface soliciting input on whether to simulate a successful transaction or an unsuccessful transaction. Such input may also indicate a type of transaction to be performed. Based on the input to the user interface the testing server application generates a transaction response which is then communicated to the digital item

A production server application in response to a transaction request attempts to consummate the requested transaction. Based on the success of the attempt to consummate the transaction the production server application communicates a transaction response to the ingested instance of digital item which sent the original transaction request . The transaction responses indicate whether the transaction was successful such as when a credit card transaction is accepted or unsuccessful such as when a credit card is declined. In other examples the transaction request may initiate a transaction in which funds are withdrawn from a prepaid account. In a successful transaction the transaction response indicates that the account contained sufficient funds and the necessary amount has been withdrawn from the account. An unsuccessful transaction response indicates the account lacked sufficient funds. In some embodiments the production server application is executed on a production computing device . In other embodiments it is executed as one of several applications executed on a distribution computing device .

The digital item contains logic to ensure transaction requests are communicated to the testing server application before ingestion and the production server application after ingestion. Such logic may be stored in an application program interface a library or another component. In some embodiments determining whether to send transaction requests to a testing server application or a production server application is performed by logic which checks for the presence of digital rights management. In other embodiments the digital item contains logic which executes a method defined in a library of the digital item . In this case the library of digital item defines methods which communicate transaction requests to the testing server application . In another embodiment the digital item sends transaction requests to a network address defined in a file component of the digital item. Prior to ingestion this network address points to the testing server application .

A deployment application executed on the developer client device facilitates the upload of the digital item over a network to the distribution computing device . The distribution computing device executes a digital item distribution service comprising an ingestion process that facilitates the upload of the digital item . The ingestion process also modifies the uploaded instance of digital item to an ingested version of the digital item . The ingested digital item has been modified such that transaction requests are communicated to a production server application .

In the case where digital item sends transaction requests to the testing server application in the absence of digital rights management the ingestion process applies digital rights management to the digital item . This ingested instance of digital item sends transaction requests to the production server application based on logic which detects the presence of the digital rights management. In another embodiment where the transaction requests of the digital item are sent using logic defined in a library component the ingestion process replaces the library component of digital item . In this ingested instance of digital item the library component defines logic in which transaction requests are sent to the production server application .

In another embodiment the digital item sends transaction requests to a testing server application pointed to by a network address stored in a file component. The ingestion process automatically modifies the file component such that the network address of the file component now points to a production server application . Other modifications to the instance of digital item may be used by the ingestion process as appreciated such that the ingested instance communicates its transaction requests to the production server application . Ingested instances of the digital item are saved to data store .

A client device may access the digital item distribution service through a purchase application . In one embodiment the purchase application is a browser rendering network pages generated by the digital item distribution service . In another embodiment the purchase application is a dedicated executable application such as for example an app store or other executable applications. The digital item distribution service generates a list of ingested digital items available for purchase by the purchase application . The list of digital items may be based on a variety of criteria comprising search terms popularity of digital items user preferences and previous purchase history. The purchase application renders a user interface expressing the list of digital items available for purchase from the digital item distribution service . Based on input from the user interface indicating a digital item to purchase a delivery process facilitates a download of a purchased instance of the digital item over the network to a client device .

According to one embodiment an ingested instance of digital item purchased from the digital item distribution service will have been modified by the ingestion process . When executed on a client device the digital item will communicate transaction requests to a production server application as described above.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the ingestion process according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the ingestion process as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the distribution computing device according to one or more embodiments.

The operation performed in is triggered by the upload of a digital item to the digital item distribution service by a developer client device . As described above this version of the digital item is configured such that it sends transaction requests to a testing server application . The ingestion process modifies the digital item . This ingested instance of the digital item will communicate its transaction requests to a production server application . The ingested instances of the digital item are then saved to a data store . Client devices which connect to the digital item distribution service can then download ingested instances of the digital item stored in the data store .

Beginning with box a digital item is uploaded to a digital item distribution service through a network . In some embodiments this is accomplished through a deployment application executed on a developer client device facilitating the upload of the digital item . In box the ingestion process determines if the uploaded digital item embodies a first predefined condition. A digital item digital item embodies the first predefined condition when it is configured in such a way that transaction requests send by the digital item are sent to a testing server application . In one embodiment the first predefined condition is met when there is no digital rights management present on the digital item

In another embodiment determining if the digital item embodies the first predefined condition comprises examining a library of the digital item . For example this determination may comprise directly examining the methods or logic defined within the library of the digital item to see if the defined methods or logic when executed send transaction requests to a testing server application . This determination may also comprise examining a unique identifier associated with the library component such as a checksum another hashed sum or some other unique identifier. The unique identifier is then compared to known values indicating whether or not the digital item embodies the first predefined condition.

In another embodiment determining of the digital item is configured to communicate with a testing server application may comprise examining the network address stored in a file accessible to the digital item . In one embodiment this may comprise comparing the network address stored in the file to a list of addresses known to point to testing server applications. In other embodiments this may comprise looking for certain substrings or keywords within the network address.

In box the ingestion process proceeds based on whether the digital item embodies the first predefined condition as determined in box . In box if the digital item embodied the first predefined condition the ingestion process then modifies the digital item such that the ingested instance of the digital item embodies the second predefined condition. A digital item digital item embodies the second predefined condition when it is configured in such a way that transaction requests send by the digital item are sent to a production server application .

In some embodiments the ingested instance of the digital item will send its transaction requests to a destination determined by the presence of digital rights management. In these instances the ingestion process applies digital rights management to the uploaded digital item to produce an ingested instance of the digital item

In another embodiment the ingested instance of the digital item will send its transaction requests by executing logic or methods defined within a library. In this embodiment the ingestion process is configured to replace an existing library of the uploaded digital item with a different library. The library of the ingested instance of the digital item defines logic or methods that execute a function sending transaction requests to a production server application .

In another embodiment the ingested instance of the digital item will send its transaction requests to a destination pointed to by a network address stored in a file. In this embodiment the ingestion process is configured to modify the network address stored within the file to point to a production server application .

If the uploaded instance of the digital item did not embody the first predefined condition see box ingestion is completed without modification and the operation proceeds to box . Finally in box the ingested instance of the digital item is saved to data store where it is accessible to the digital item distribution service .

Moving on to and shown is one example of a user interface interacting with the testing server application according to various embodiments. In this embodiment the testing server application is executed on the developer client device . Item depicts a user interface generated by a digital item executed on the developer client device . In this example the digital item comprises a game for which various enhancements can be purchased from within the game. An enhancement list lists the enhancements that are available for purchase and their corresponding prices. A button accompanies each entry into the enhancement list that initiates a financial transaction to purchase corresponding enhancement.

When a button is clicked by the user the digital item sends transaction requests to the testing server application . Moving on to testing server application then encodes for rendering a user interface soliciting input from the user. The user interface is then send to the client device for display. User interface contains response options . When a user selects a response option the testing server application simulates a consummation of the transaction based on the input to the user interface . The testing server application then sends a corresponding transaction response to the digital item

Referring next to shown is a flowchart that provides one example of the operation of a portion of the testing server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of testing server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the testing computing device according to one or more embodiments.

The operation of is triggered in some embodiments in which the testing server application is executed on the developer client device . A digital item is executed on the developer client device . In the case of a media item this execution is facilitated by an execution application . In the case of an executable item the necessary executable logic is contained within the item and an execution application is not needed. When the digital item initiates a transaction it sends a transaction request to the testing server application . The testing server application then generates a user interface allowing the user to control the transaction response send to the digital item

Beginning with box a transaction request is communicated from a digital item to the testing server application . This transaction request is used to initiate a transaction with the testing server application . As stated above the transaction may comprise a financial transaction a download of media content or some other transaction. In box upon receiving the transaction request the testing server application renders a user interface indicating a list of possible responses to the request.

The list of possible choices varies based on the transaction which the digital item attempts to initiate. For example in response to a transaction request beginning a financial transaction paid for using a credit card the testing server application may render a user interface with a list of choices indicating an authorized credit card a declined credit card a network timeout or other choices. In another example in response to a transaction request beginning a financial transaction paid for using a pre paid account the testing server application may render a user interface with a list of choices indicating a successful use of funds insufficient funds or other choices. In a transaction for downloading media content the user interface may list choices indicating an allowed download a denied download based on user restrictions temporary unavailability or other choices.

The testing server application does not send a transaction response to the digital item until the user interface receives input. Accordingly in boxes and the testing server application waits until a response is selected within the user interface. In box after an input is selected the testing server application simulates consummation of the transaction based on the input to the user interface. For example in financial transactions which are paid for using a simulated account the account is debited an appropriate amount. In other embodiments the testing server application may communicate a confirmation message to the user via email text message or other communications medium. Finally box shows the testing server application sending a transaction response based on the input to the user interface.

With reference to shown is a schematic block diagram of the developer client device according to an embodiment of the present disclosure. The developer client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the developer client device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are a development application a deployment application a testing server application and potentially other applications. Also stored in the memory may be a data store storing instances of a digital item and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the client device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are a purchase application an instance of an execution application and potentially other applications. Also stored in the memory may be a data store storing instances of a digital item and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the distribution computing device according to an embodiment of the present disclosure. The distribution computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the distribution computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor is a digital item distribution service comprising an ingestion process and a delivery process and potentially other applications. Also stored in the memory may be a data store storing ingested instances of digital items and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memories and and are executable by the processors and as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memories and and are executable by the processors and . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors and . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and and run by the processors and source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memories and and executed by the processors and or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memories and to be executed by the processors and etc. An executable program may be stored in any portion or component of the memories and including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memories and are defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memories and may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processors and may represent multiple processors and and the memories and may represent multiple memories and that operate in parallel processing circuits respectively. In such a case the local interfaces and may be an appropriate network that facilitates communication between any two of the multiple processors and between any processors and and any of the memories and or between any two of the memories and etc. The local interfaces and may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processors and may be of electrical or of some other available construction.

Although the ingestion process testing server application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the appstore test client. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processors and in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the testing server application the digital item distribution service and the ingestion process that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processors and in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

