---

title: Conditional component breakpoint setting system and method
abstract: A method, computer program product, and computer system for setting, at a computing device, a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components, wherein the breakpoint is set automatically. While executing the debugger on the component, it is determined whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component, the program executed by the debugger stops. If the breakpoint is reached from inside of the component, the program executed by the debugger continues.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507691&OS=09507691&RS=09507691
owner: International Business Machines Corporation
number: 09507691
owner_city: Armonk
owner_country: US
publication_date: 20140110
---
When writing code for e.g. an application a debugging application may be used to determine any errors that may exist in the application that may cause the application not to execute properly. Debugger applications may use multiple types of breakpoints to aid in the debugging process.

In one implementation a method performed by one or more computing devices may include but is not limited to setting at a computing device a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components wherein the breakpoint may be set automatically. While executing the debugger on the component it may be determined whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component the program executed by the debugger may stop. If the breakpoint is reached from inside of the component the program executed by the debugger may continue.

One or more of the following features may be included. It may be determined that the debugger has left the component and in response the program executed by the debugger may stop. The plurality of breakpoints may be at least one of enabled and disabled. Individual breakpoints of the plurality of breakpoints may be at least one of enabled and disabled. The breakpoint may be marked as a breakpoint of the component to distinguish from a normal breakpoint. The component may include a set of source code. Determining whether the breakpoint is reached from outside of the component may include checking a call stack.

In another implementation a computing system includes a processor and a memory configured to perform operations that may include but are not limited to setting a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components wherein the breakpoint may be set automatically. While executing the debugger on the component it may be determined whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component the program executed by the debugger may stop. If the breakpoint is reached from inside of the component the program executed by the debugger may continue.

One or more of the following features may be included. It may be determined that the debugger has left the component and in response the program executed by the debugger may stop. The plurality of breakpoints may be at least one of enabled and disabled. Individual breakpoints of the plurality of breakpoints may be at least one of enabled and disabled. The breakpoint may be marked as a breakpoint of the component to distinguish from a normal breakpoint. The component may include a set of source code. Determining whether the breakpoint is reached from outside of the component may include checking a call stack.

In another implementation a computer program product resides on a computer readable storage medium that has a plurality of instructions stored on it. When executed by a processor the instructions cause the processor to perform operations that may include but are not limited to setting a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components wherein the breakpoint may be set automatically. While executing the debugger on the component it may be determined whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component the program executed by the debugger may stop. If the breakpoint is reached from inside of the component the program executed by the debugger may continue.

One or more of the following features may be included. It may be determined that the debugger has left the component and in response the program executed by the debugger may stop. The plurality of breakpoints may be at least one of enabled and disabled. Individual breakpoints of the plurality of breakpoints may be at least one of enabled and disabled. The breakpoint may be marked as a breakpoint of the component to distinguish from a normal breakpoint. The component may include a set of source code. Determining whether the breakpoint is reached from outside of the component may include checking a call stack.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description the drawings and the claims.

As will be appreciated by one skilled in the art the present disclosure may be embodied as a method system or computer program product. Accordingly the present disclosure may take the form of an entirely hardware implementation an entirely software implementation including firmware resident software micro code etc. or an implementation combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present disclosure may take the form of a computer program product on a computer usable storage medium having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. The computer usable or computer readable storage medium including a storage device associated with a computing device or client electronic device may be for example but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable medium may include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a media such as those supporting the internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be a suitable medium upon which the program is stored scanned compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with the instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. The computer readable program code may be transmitted using any appropriate medium including but not limited to the internet wireline optical fiber cable RF etc. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer program code for carrying out operations of the present disclosure may be written in an object oriented programming language such as Java Smalltalk C or the like. Java and all Java based trademarks and logos are trademarks or registered trademarks of Oracle and or its affiliates. However the computer program code for carrying out operations of the present disclosure may also be written in conventional procedural programming languages such as the C programming language PASCAL or similar programming languages as well as in scripting languages such as Javascript or PERL. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the internet using an Internet Service Provider .

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of apparatus systems methods and computer program products according to various implementations of the present disclosure. It will be understood that each block in the flowchart and or block diagrams and combinations of blocks in the flowchart and or block diagrams may represent a module segment or portion of code which comprises one or more executable computer program instructions for implementing the specified logical function s act s . These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the computer program instructions which may execute via the processor of the computer or other programmable data processing apparatus create the ability to implement one or more of the functions acts specified in the flowchart and or block diagram block or blocks or combinations thereof. It should be noted that in some alternative implementations the functions noted in the block s may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks or combinations thereof.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed not necessarily in a particular order on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts not necessarily in a particular order specified in the flowchart and or block diagram block or blocks or combinations thereof.

Referring to there is shown breakpoint process that may reside on and may be executed by a computer e.g. computer which may be connected to a network e.g. network e.g. the internet or a local area network . Examples of computer and or one or more of the client electronic devices noted below may include but are not limited to a personal computer s a laptop computer s mobile computing device s a server computer a series of server computers a mainframe computer s or a computing cloud s . Computer may execute an operating system for example but not limited to Microsoft Windows Mac OS X Red Hat Linux or a custom operating system. Microsoft and Windows are registered trademarks of Microsoft Corporation in the United States other countries or both Mac and OS X are registered trademarks of Apple Inc. in the United States other countries or both Red Hat is a registered trademark of Red Hat Corporation in the United States other countries or both and Linux is a registered trademark of Linus Torvalds in the United States other countries or both .

As will be discussed below in greater detail breakpoint process may set at a computing device a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components wherein the breakpoint may be set automatically. While executing the debugger on the component it may be determined whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component the program executed by the debugger may stop. If the breakpoint is reached from inside of the component the program executed by the debugger may continue.

The instruction sets and subroutines of breakpoint process which may be stored on storage device coupled to computer may be executed by one or more processors not shown and one or more memory architectures not shown included within computer . Storage device may include but is not limited to a hard disk drive a flash drive a tape drive an optical drive a RAID array a random access memory RAM and a read only memory ROM .

Network may be connected to one or more secondary networks e.g. network examples of which may include but are not limited to a local area network a wide area network or an intranet for example.

Computer may include a data store such as a database e.g. relational database object oriented database triplestore database etc. and may be located within any suitable memory location such as storage device coupled to computer . Any data described throughout the present disclosure may be stored in the data store. In some implementations computer may utilize a database management system such as but not limited to My Structured Query Language MySQL DB2 etc. in order to provide multi user access to one or more databases such as the above noted relational database. The data store may also be a custom database such as for example a flat file database or an XML database. Any other form s of a data storage structure and or organization may also be used. Breakpoint process may be a component of the data store a stand alone application that interfaces with the above noted data store and or an applet application that is accessed via client applications . The above noted data store may be in whole or in part distributed in a cloud computing topology. In this way computer and storage device may refer to multiple devices which may also be distributed throughout the network.

Computer may execute a debugging application e.g. debugging application examples of which may include but are not limited to e.g. a static code analyzer application an interactive debugging application a control flow application an integration testing application a file logging application a monitoring e.g. application system etc. application a memory dump application a profiling application a statistical process control application or other application that allows for the finding and reduction of the number of bugs or defects in a computer program application and or a piece of electronic hardware. Breakpoint process and or debugging application may be accessed via client applications . Breakpoint process may be a stand alone application or may be an applet application script extension that may interact with and or be executed within debugging application a component of debugging application and or one or more of client applications . Debugging application may be a stand alone application or may be an applet application script extension that may interact with and or be executed within breakpoint process a component of breakpoint process and or one or more of client applications . One or more of client applications may be a stand alone application or may be an applet application script extension that may interact with and or be executed within and or be a component of breakpoint process and or debugging application . Examples of client applications may include but are not limited to e.g. a static code analyzer application an interactive debugging application a control flow application an integration testing application a file logging application a monitoring e.g. application system etc. application a memory dump application a profiling application a statistical process control application or other application that allows for the finding and reduction of the number of bugs or defects in a computer program application and or a piece of electronic hardware a standard and or mobile web browser an email client application a textual and or a graphical user interface a customized web browser a plugin an Application Programming Interface API or a custom application. The instruction sets and subroutines of client applications which may be stored on storage devices coupled to client electronic devices may be executed by one or more processors not shown and one or more memory architectures not shown incorporated into client electronic devices .

Storage devices may include but are not limited to hard disk drives flash drives tape drives optical drives RAID arrays random access memories RAM and read only memories ROM . Examples of client electronic devices and or computer may include but are not limited to a personal computer e.g. client electronic device a laptop computer e.g. client electronic device a smart data enabled cellular phone e.g. client electronic device a notebook computer e.g. client electronic device a tablet not shown a server not shown a television not shown a smart television not shown a media e.g. video photo etc. capturing device not shown and a dedicated network device not shown . Client electronic devices may each execute an operating system examples of which may include but are not limited to Android Apple iOS Mac OS X Red Hat Linux or a custom operating system.

One or more of client applications may be configured to effectuate some or all of the functionality of breakpoint process and vice versa . Accordingly breakpoint process may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or breakpoint process .

One or more of client applications may be configured to effectuate some or all of the functionality of debugging application and vice versa . Accordingly debugging application may be a purely server side application a purely client side application or a hybrid server side client side application that is cooperatively executed by one or more of client applications and or debugging application . As one or more of client applications breakpoint process and debugging application taken singly or in any combination may effectuate some or all of the same functionality any description of effectuating such functionality via one or more of client applications breakpoint process debugging application or combination thereof and any described interaction s between one or more of client applications breakpoint process debugging application or combination thereof to effectuate such functionality should be taken as an example only and not to limit the scope of the disclosure.

Users may access computer and breakpoint process e.g. using one or more of client electronic devices directly through network or through secondary network . Further computer may be connected to network through secondary network as illustrated with phantom link line . Breakpoint process may include one or more user interfaces such as browsers and textual or graphical user interfaces through which users may access breakpoint process .

The various client electronic devices may be directly or indirectly coupled to network or network . For example client electronic device is shown directly coupled to network via a hardwired network connection. Further client electronic device is shown directly coupled to network via a hardwired network connection. Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and wireless access point i.e. WAP which is shown directly coupled to network . WAP may be for example an IEEE 802.11a 802.11b 802.11g Wi Fi and or Bluetooth device that is capable of establishing wireless communication channel between client electronic device and WAP . Client electronic device is shown wirelessly coupled to network via wireless communication channel established between client electronic device and cellular network bridge which is shown directly coupled to network .

Some or all of the IEEE 802.11x specifications may use Ethernet protocol and carrier sense multiple access with collision avoidance i.e. CSMA CA for path sharing. The various 802.11x specifications may use phase shift keying i.e. PSK modulation or complementary code keying i.e. CCK modulation for example. Bluetooth is a telecommunications industry specification that allows e.g. mobile phones computers smart phones and other electronic devices to be interconnected using a short range wireless connection. Other forms of interconnection e.g. Near Field Communication NFC may also be used.

Referring also to there is shown a diagrammatic view of client electronic device . While client electronic device is shown in this figure this is for illustrative purposes only and is not intended to be a limitation of this disclosure as other configurations are possible. For example any computing device capable of executing in whole or in part breakpoint process may be substituted for client electronic device within examples of which may include but are not limited to computer and or client electronic devices .

Client electronic device may include a processor and or microprocessor e.g. microprocessor configured to e.g. process data and execute the above noted code instruction sets and subroutines. Microprocessor may be coupled via a storage adaptor not shown to the above noted storage device s e.g. storage device . An I O controller e.g. I O controller may be configured to couple microprocessor with various devices such as keyboard pointing selecting device e.g. mouse custom device e.g. device USB ports not shown and printer ports not shown . A display adaptor e.g. display adaptor may be configured to couple display e.g. CRT or LCD monitor s with microprocessor while network controller adaptor e.g. an Ethernet adaptor may be configured to couple microprocessor to the above noted network e.g. the Internet or a local area network .

As discussed above and referring also to breakpoint process may set a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components wherein the breakpoint may be set automatically. While executing the debugger on the component breakpoint process may determine whether the breakpoint is reached from outside of the component by a program. If the breakpoint is reached from outside of the component breakpoint process may stop the program executed by the debugger. If the breakpoint is reached from inside of the component breakpoint process may continue the program executed by the debugger.

When debugging e.g. a program application example types of breakpoints used by e.g. debugging application may include but are not limited to a line breakpoint a conditional breakpoint a function breakpoint etc. Such example breakpoints may not be as useful for debugging issues cross components e.g. at least for granularity reasons such as the following example scenarios where the user may need to guess where the most likely place to set a breakpoint is and may try one by one 

Scenario 1 One cross component issue is reported. For example the issue is reported for component A. But owner of component A said that this issue is caused by downstream component B. Owner of component B starts to investigate this issue by debugging and owner of component B wants the debugger to stop the program being executed whenever the program runs into component B and leaves component B.

Scenario 2 The user may not know where to set a break point to debug a product issue. For example one product issue may be reported. The product may be complex and the developer who is working on this issue may not be very familiar with the product. The developer may have little to no idea where s he should set the break point to start to debug this issue.

Scenario 3 The product may consist of many components. For example assume a user is learning a product by debugging it. It may be useful if the user can see clearly when the debugger moves from one component to another.

However rather than e.g. having the user guess where the most likely place to set a breakpoint is and try each one by one in some implementations breakpoint process may allow a breakpoint to be set at the component level. For instance in some implementations breakpoint process may automatically set a breakpoint of a plurality of breakpoints for use by a debugger at an entry point of a plurality of entry points for a component of a plurality of components. For example and referring at least to an example component to be debugged with e.g. four entry points A B C and D may be identified by breakpoint process and or debugging application . A component entry point may be where an external program e.g. via debugging application may call into component . In some implementations entry points may be identified by e.g. impact analysis static analysis e.g. to check methods of how the components are called by the external program finding exported symbols in a shared library and or inspecting an abstract syntax tree to find program elements e.g. public methods exported functions API definitions etc. .

A breakpoint for component may generally be described as including e.g. one or more line breakpoints at the entry points of component . For example and referring at least to component is shown with line breakpoint of component entry point . In the example breakpoint process may set for component the breakpoint e.g. line breakpoint for entry point set another breakpoint for entry point set another breakpoint for entry point and set another breakpoint for entry point . As will be discussed in greater detail below when the debugger enters component via crossing the line breakpoint boundary and when the particular breakpoint and or component is enabled the program executed by the debugger may stop. As will also be discussed in greater detail below when the line breakpoint moves to another line breakpoint from within the same component the new line breakpoint may not stop and may continue debugging the program. While four entry points are shown it will be appreciated that more or less entry points may be used without departing from the scope of this disclosure.

In some implementations component may include a set of source code. For instance the set of source code e.g. packages extension points a list of source codes etc. may implement a function associated with the application being debugged by debugging application that a developer may be interested in.

In some implementations a user e.g. user may define select component . For example breakpoint process and or debugging application may include a user interface not shown which may enable user to use one or more definitions of component to identify the candidate source code. This may include e.g. at least a portion of all the source files of a particular directory at least a portion of all the files that may be linked together into a shared library a set of shared libraries etc. In some implementations user may be enabled to use one or more definitions of component to identify the candidate source code which may be done at the package and or class level and or other construct as may be appropriate for the programming language being used. In some implementations user may be enabled to use one or more definitions of component to identify the candidate source code which may include user identifying a section of source code in one file or several files and calling that component for the current debugging session.

While executing the debugger on the program breakpoint process may determine whether breakpoint is reached from outside of component by a program. For instance and referring at least to assume for example purposes only that during the debugging process external program E makes a call into component and reaches line breakpoint for component entry point A and the program executed by the debugger stops at component entry point A i.e. line breakpoint is hit or reached. In the example the line breakpoint is set at Statement F next to E. This breakpoint may be the component exit breakpoint .

In some implementations as noted above determining whether the breakpoint is reached from outside of the component by a program may include breakpoint process checking a call stack. As noted above this may be accomplished by e.g. breakpoint process performing a run time check on the call stack to identify the call made by external program E into component .

In some implementations breakpoint process may mark the breakpoint e.g. line breakpoint as a breakpoint of the component to distinguish from a normal breakpoint. For instance as noted above there may be numerous types of breakpoints and to determine whether the breakpoint that is reached is from outside of the component by a program breakpoint process may mark the breakpoint as a breakpoint as a breakpoint of the component to distinguish from a normal breakpoint by e.g. adding a property e.g. flag for the entry line breakpoints to distinguish them from other types of line breakpoints e.g. normal breakpoints .

In some implementations if the breakpoint is reached from outside of the component breakpoint process may stop the program executed by the debugger. For instance and referring still at least to external program E makes a call into component and reaches line breakpoint for component entry point A i.e. line breakpoint is hit or reached. As line breakpoint for component entry point A has been reached from outside of component e.g. via external program E line breakpoint may be triggered by the call and breakpoint process may stop the program executed by the debugger. That is in the example breakpoint process may stop the debugger when returning to code outside of component . In some implementations breakpoint process via the debugger may automatically set a step out breakpoint when a component entry point breakpoint is taken. A step out breakpoint may be similar to a step over breakpoint. For step over the debugger may set a breakpoint on the statement after the one about to be executed. For step out the debugger may set a breakpoint after the current component e.g. function which may be on the next statement to be executed after the function returns. That may be in the calling function from outside the component on the statement immediately after the call to the current function inside the component. The debugger may implement a step out breakpoint by e.g. checking the call stack looking at frame where frame is for the current function to determine where the call originated. Once the program executed by the debugger has stopped user may via breakpoint process start to debug from that point.

In some implementations if the breakpoint is reached from inside of the component breakpoint process may continue the program executed by the debugger. For instance and referring at least to assume for example purposes only that a call is made from entry point A and reaches line breakpoint for component entry point C i.e. line breakpoint is hit or reached. As line breakpoint for component entry point C has been reached from a call within component e.g. via a within component call made from entry point A which is within component line breakpoint may not be triggered by the call and breakpoint process may continue the program executed by the debugger. That is in the example the program executed by the debugger may be stopped at any component breakpoint within component only when the call comes from outside component otherwise the program executed by the debugger may continue . As noted above this may be determined at run time by checking the call stack to see whether the caller is outside of component .

In some implementations breakpoint process may determine that the debugger has left the component and in response breakpoint process may stop the program executed by the debugger. For example and referring at least to breakpoint process may determine that component e.g. via breakpoint process returns to statement F which in the example is next to external program E . In the example breakpoint process may determine that the debugger has left component and in response stop the program executed by the debugger at statement F e.g. indicating the debugger is out of component .

In some implementations breakpoint process may at least one of enable and disable individual breakpoints of the plurality of breakpoints. For example and referring at least to an example user interface associated with breakpoint process and or debugging application is shown. In the example user interface e.g. via breakpoint process may enable user to select individual breakpoints within component to enable e.g. be included as one of the breakpoints and or to disable e.g. be excluded as one of the breakpoints.

For instance object may be a component breakpoint for selected components to debug where the breakpoints above may be normal breakpoints. Assume that user selects object to enable component entry point A . Just as discussed in the above example when external program E makes a call into component and reaches line breakpoint for component entry point A i.e. line breakpoint is hit or reached. As line breakpoint for component entry point A has been reached from outside of component e.g. via external program E line breakpoint may be triggered by the call and breakpoint process may stop the program executed by the debugger. However now assume that user deselects or does not initially select object to disable component entry point A . In the example even though line breakpoint for component entry point A has been reached from outside of component e.g. via external program E line breakpoint may not be triggered by the call and breakpoint process may continue the program executed by the debugger since component entry point A is disabled . It will be appreciated that any of the above noted component entry points in including component entry point not shown may be enabled and or disabled individually and or simultaneously.

In some implementations breakpoint process may at least one of enable and disable the plurality of breakpoints. For instance similarly as noted above user interface e.g. via breakpoint process may enable user to select all of the plurality of breakpoints within component to enable e.g. be included as a component and or to disable e.g. be excluded as a component.

For instance and referring at least to assume that user selects object to enable all the above noted component entry points including component entry point not shown thereby enabling component as whole. Just as discussed in the above example when external program E makes a call into component and reaches line breakpoint for component entry point A i.e. line breakpoint is hit or reached. As line breakpoint for component entry point A has been reached from outside of component e.g. via external program E line breakpoint may be triggered by the call and breakpoint process may stop the program executed by the debugger. However now assume that user deselects or does not initially select object to disable all component entry points thereby disabling component as whole. In the example even though line breakpoint for component entry point A has been reached from outside of component e.g. via external program E line breakpoint may not be triggered by the call and breakpoint process may continue the program executed by the debugger since component entry point A is from component and component is disabled . It will be appreciated that one or more components may be enabled and or disabled individually and or simultaneously.

The terminology used herein is for the purpose of describing particular implementations only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps not necessarily in a particular order operations elements and or components but do not preclude the presence or addition of one or more other features integers steps not necessarily in a particular order operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications variations and any combinations thereof will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The implementation s were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various implementation s with various modifications and or any combinations of implementation s as are suited to the particular use contemplated.

Having thus described the disclosure of the present application in detail and by reference to implementation s thereof it will be apparent that modifications variations and any combinations of implementation s including any modifications variations and combinations thereof are possible without departing from the scope of the disclosure defined in the appended claims.

