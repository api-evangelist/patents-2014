---

title: Generating customized graphical user interfaces for mobile processing devices
abstract: Systems and techniques for producing graphical user interfaces on handheld mobile devices include generating a markup language code defining a graphical user interface component for display on the handheld mobile device and rendering the generated markup language code to produce the graphical user interface component. In some cases, the graphical user interface component includes at least one adaptable attribute based on a selection made by a user. In other cases, a graphical user interface component is generated using static markup language code or a combination of static and dynamically generated markup language code. Graphical user interface components defined by markup language codes can be displayed in an overall graphical user interface along with components that are native to the device and/or that are defined by an application development platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619446&OS=09619446&RS=09619446
owner: Google Inc.
number: 09619446
owner_city: Mountain View
owner_country: US
publication_date: 20140219
---
This application is a continuation of U.S. application Ser. No. 11 243 916 filed Oct. 5 2005 the contents of which is incorporated by reference.

This description relates to user interfaces and more particularly to generating customized graphical user interfaces for mobile processing devices.

Handheld mobile devices such as cellular telephones and personal digital assistants PDAs are becoming increasingly powerful both in terms of processing power and the ability to provide access to data. The usefulness of these enhancements is often limited however by an inability of mobile devices to display data effectively due to the small size of the display the limited bandwidth available for wirelessly delivering data and the limited memory resources relative to laptop and desktop computers.

There are beginning to be some applications that are specifically designed for handheld mobile devices. Many such applications are based on application development platforms also specifically designed for mobile devices such as Java 2 Platform Micro Edition J2ME and Binary Runtime Environment for Wireless BREW . Some applications that are designed for retrieving data from a remote location to a handheld mobile device are browsers that correspond to conventional browser applications in that they enable users to enter uniform resource locators URLs to retrieve information from any Internet web site. Other applications enable data to be retrieved by launching a separate browser application in response for example to selecting a hyperlink in a user interface. In addition specialized limited functionality applications are available that provide a mechanism to access data from dedicated application service providers.

In one general aspect a graphical user interface is produced by generating a markup language code defining a graphical user interface component for display on a handheld mobile device. The graphical user interface component including one or more adaptable attributes based on a selection made by a user. The generated markup language code is rendered to produce the graphical user interface component.

Implementations can include one or more of the following features. The selection is made through an interaction with an application running on the handheld mobile device and the graphical user interface component is displayed on the handheld mobile device using the application. A static markup language code is retrieved from a file associated with the application. The static markup language code is rendered to produce another graphical user interface component or the static markup language code is combined with the generated markup language code to produce a combined markup language code and the graphical user interface component is generated by rendering the combined markup language code. The article of claim wherein the adaptable attributes can include a size a color a shape a format and a text. A graphical user interface component defined by an application development platform is further displayed on the handheld mobile device. The graphical user interface component is associated with a functionality of the application. A file stored on the handheld mobile device and associated with the application can store markup language code for use in generating a graphical user interface component. The markup language code is generated by a programming language code that includes instructions for generating the markup language code based on a state of at least one variable.

In another general aspect a predefined user interface component is displayed in a graphical user interface for an application. The predefined user interface component is defined by an application development platform for a mobile device. A markup language user interface component is also displayed in the graphical user interface for the application.

Implementations can include one or more of the following features. The predefined user interface component defined by the application development platform comprises a mobile information device profile MIDP user interface component. User input is received based on a user interaction with the predefined user interface component and or the markup language user interface component. The markup language user interface component is generated using an application programming interface for rendering the markup language user interface component.

In another general aspect an application is provided for a handheld mobile device. The application includes instructions for generating a markup language code defining a first graphical user interface component for display on the handheld mobile device. A library containing a second graphical user interface component for display on the handheld mobile device is also provided. The second graphical user interface component is defined using a markup language and the library is accessible by the application using an application programming interface.

Implementations can include one or more of the following features. The instructions generate different markup language codes in response to different user selections. The library is associated with the application and is stored on the handheld mobile device. The library is located remotely and is accessed using a wireless interface. A graphical user interface including the first graphical user interface component and the second graphical user interface component is generated on the handheld mobile device using a markup language renderer. The application or the library includes markup language fragments used by the instructions in combination with markup language code segments produced by the instructions to generate the markup language code. The application communicates with a remote server using a wireless interface. Mobile information device profile MIDP user interface components are also provided for use by the application.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

The mobile device operates to conduct wireless communications using a cellular satellite or other radio communication link with other devices or servers over a network . The network can include for example a public land mobile network a public switched telephone network a local area network a wide area network and or any other type of telecommunication network. In some implementations the mobile device sends requests for data and performs other operations in accordance with instructions from the application . Thus the application is network aware in that it connects to servers or other remote devices to store and or retrieve data. In other implementations the mobile device performs processing operations in accordance with instructions from the application using locally stored data or data received from a user of the mobile device without relying upon data retrieved from a remote location.

The application generates graphical user interfaces e.g. pages or views for presenting information to a user and or for collecting information from a user. In some implementations the graphical user interfaces may include some of the features typically found on web pages that are used for retrieving data. For example if the application is a search application the graphical user interface displayed by the application can include one or more data entry fields for a user to define a search query or other search parameters similar to a typical search engine website. For displaying search results the graphical user interface displayed by the application can include a listing of search results one or more data entry fields for a user to refine a search query or start a new search and or other features such as links to other pages of the search results. If the application is an electronic mail application the graphical user interface displayed by the application can include different mailboxes such as an inbox a mailbox for sent messages and a mailbox for deleted messages. For each mailbox the application can display a list or partial list of messages. Any other type of graphical user interface appropriate for the functionality of the particular application can also be generated and displayed.

Conventional applications for mobile devices rely upon a limited set of graphical user interface widgets or components for user interaction. For purposes of the following description a widget is generally a component of a graphical user interface that displays information or that provides a way for a user to interact with a mobile device an operating system and or an application. Widgets can include icons pull down menus buttons selection boxes progress indicators on off checkmarks scroll bars windows window edges e.g. that let users resize the window toggle buttons forms help pages or windows tables formatted lists and other components for displaying information or for soliciting accepting and or responding to user actions.

In general software development for mobile devices is constrained by the wide variety of mobile device operating systems and hardware and by the limited resources of mobile devices including for example limited memory processing power and speed network bandwidth and latency screen size and color depth. As a result development of applications that use a graphical user interface to interact with a user is relatively difficult particularly if there is a desire to make an application have a consistent look on a wide range of devices.

Many mobile devices include Java 2 Platform Micro Edition J2ME or Binary Runtime Environment for Wireless BREW which provide an application development platform that runs in between an application and a mobile device s operating system. J2ME includes Mobile Information Device Profile MIDP which is defined using JAVA code and provides a limited graphical user interface toolkit. The MIDP graphical user interface toolkit is relatively simplistic and allows for very minimal interaction with a user. MIDP widgets generally lack adaptability and the ability to customize their appearance and or other characteristics because they are designed to have common functionality across multiple different devices and are constrained by the need to meet a common denominator. In addition a limited set of MIDP widgets does not always offer a software developer a sufficient set of tools from which to implement desired functionality.

To complement or replace the capabilities of J2ME or BREW and or the native operating system the mobile device includes hypertext markup language HTML widgets in addition to the native widgets and any available MIDP widgets. Accordingly an application can use a combination of these different types of widgets. Thus an application written in JAVA code can access some widgets e.g. MIDP widgets using a JAVA application program interface and can access HTML widgets by rendering HTML code to generate display components to query a user of the application to enter data values and or to generate other graphical user interface components. In some implementations widgets can be defined by other types of markup language code instead of or in addition to using HTML.

The content appearance and layout of an HTML widget is defined using HTML text. As shown in the mobile device includes a library containing a set of application program interfaces that support the display of HTML constructs e.g. widgets and or pages on the mobile device . In some implementations the library is included as part of or as a utility for an application . Accordingly the library can be unique to a particular application . In other implementations the library can be stored on the mobile device for sharing among multiple applications . As another option the library can be located remotely and can be accessed through the network .

The library allows a programmer to include a uniform resource locator URL in an application and when a call is made to the URL an application program interface in the library enables elements and or data to be rendered on the mobile device using information stored locally in the storage device of the mobile device . The library also allows HTML constructs to be dynamically created directly from the programming language for the application .

The application program interfaces can be structured in a variety of ways. For example an application can include a call to an application program interface that interprets a string literal defining an HTML tag e.g. or to generate particular HTML components e.g. insert a table add a table row or insert a bulleted list . As another example an application can include an application program interface that enables structured HTML components to be created using more descriptive tags e.g. addTable addRow or createBulletedList . Using the application program interfaces application programmers can create graphical user interfaces that are customized specifically for the application and or situation e.g. using widgets that are capable of displaying text and that provide a more intuitive experience for end users.

An HTML text file that defines an HTML widget can come from one or more sources. One possible source is a predefined HTML file that is included with the application and locally stored in the storage device e.g. in the library as part of the application or in a distinct database . The predefined HTML file can then be loaded by the application code for use in producing the HTML widget. A predefined HTML file can be used for example for widgets having content that does not change or does not need to change frequently such as help screens or menus.

The HTML text file that defines an HTML widget can also be dynamically generated e.g. at runtime by the application code. Thus the application code can include instructions for producing an HTML text file that can then be rendered to produce the HTML widget. By dynamically creating the HTML text file the graphical user interface that is produced and displayed can be adapted or tailored based on user settings selections profile data responses preferences or other input. For example a graphical user interface may include fewer options and or detail for a beginner user than for an advanced user. In addition the graphical user interface can be customized based on different user selections or activities. In some cases the HTML text file can be generated from a mixture of predefined HTML text and dynamically generated HTML text. For example predefined HTML files can include fragments of HTML text that can be incorporated into dynamically generated HTML content to produce the HTML text file that defines an HTML widget.

The HTML widgets are generated by rendering HTML text using a markup language rendering engine built into the application or included in the mobile device . In some implementations the markup language rendering engine is integrated into and included as part of the application in a single executable software application e.g. the markup language rendering engine is compiled together with other modules of the application . In other implementations the markup language rendering engine can be shared among different applications by being a separate module stored in the mobile device . The markup language rendering engine can operate in accordance with hypertext markup language HTML extensible hypertext markup language XHTML wireless markup language WML compact hypertext markup language CHTML and or any other markup language.

Unlike conventional applications that render markup language code which typically launch a separate default browser application to render markup language text the application does not necessarily use an inter application program call to launch or otherwise access the functionalities of a separate browser application. As a result the application can avoid the potential for an unsatisfactory user experience that can result from the delays generally inherent in activating a separate browser application to perform rendering. In some implementations data rendered by the markup language rendering engine and or presented on a display can be formatted in a customized or partially customized manner e.g. determining where to cut off lines of text determining a size and or resolution of images and determining a number of lines in a snippet based on one or more characteristics of the mobile device e.g. font metrics screen width amount of memory available and screen height .

Among other things the described techniques enable software developers for handheld mobile devices to create applications that have a uniform look and feel across a wide variety of devices. In addition the use of HTML widgets helps increase portability of applications by limiting the conditional code needed to write portable applications.

Some of the HTML widgets such as the progress window can be defined by a static HTML file stored on the mobile device . Other HTML widgets such as the drop down menu that includes text suggestions can be defined by an HTML file dynamically generated by instructions included in the search application software. Still other HTML widgets such as the pop up options menu can be defined by an HTML file that is partially dynamically generated and partially generated using HTML fragments. For instance the listed options can be dynamically generated based on user preferences relating to most used options or experience level while the appearance and or structure of the pop up menu can be defined by static HTML fragments. Accordingly the search application software can generate an HTML file by incorporating HTML fragments stored on a storage device of the mobile device into appropriate locations of dynamically generated HTML text and or by dynamically inserting HTML text into placeholder locations e.g. blanks in a static HTML file.

A markup language code is dynamically generated in accordance with the user selection . The markup language code defines a graphical user interface widget for display on a handheld mobile device. For example the markup language code is generated by a software application loaded onto the mobile device. The markup language code is generated such that when the markup language code is rendered it produces a graphical user interface widget. The graphical user interface widget can have one or more adaptable attributes based on the selection made by the user. Thus the selections made by the user can result in generating different markup language codes each of which corresponds to a different appearance set of functions complexity or set of other features of the graphical user interface widget.

The attributes that impact the features of the graphical user interface can relate for example to an amount of information displayed a type or content of displayed information or a number and or type of available options and can include such features as size color shape format and text. Thus depending on the user selection or selections each attribute can have a different value or state. Depending on the value or state the application generates different markup language text. For example in a tax return application if the user selects a more simplistic option the application may generate a markup language code for displaying a series of data entry fields for entering information on a 1040EZ federal tax return form while if the user selects a more advanced option the application may generate a markup language code for displaying a series of data entry fields for entering information on a standard federal tax return form and on one or more associated schedules.

The markup language code is rendered to produce the desired graphical user interface widget . The markup language code can be rendered by a markup language code rendering engine included in the application or otherwise stored on the mobile device. The rendered graphical user interface widget is displayed by the application on a display screen of the mobile device . In some cases the application can also cause the mobile device to display on the display screen one or more graphical user interface components defined by an application development platform such as JAVA J2ME or BREW. Thus both rendered graphical user interface widgets and graphical user interface components can be used by the application e.g. to receive user input based on a user interaction with the widgets or components and optionally displayed on the same display screen.

A graphical user interface that includes at least one component dynamically generated by the instructions and at least one component included in the library is generated by rendering markup language code defining the components. In some cases the dynamically generated components and the components included in the library can each define distinct widgets. Thus a renderer separately renders the markup language code for a statically defined widget and the markup language code for a dynamically generated widget. In other cases the components included in the library can include markup language code fragments that can be dynamically incorporated into other dynamically generated markup language code to produce a combined markup language code that defines a single graphical user interface widget. Thus the application contains instructions for dynamically generating markup language code and combining markup language code fragments from the library to produce the combined markup language code which is rendered by the renderer to produce the desired widget.

The systems and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structural means disclosed in this specification and structural equivalents thereof or in combinations of them. The techniques can be implemented as one or more computer program products i.e. one or more computer programs tangibly embodied in a machine readable storage device for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program also known as a program software software application or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file. A program can be stored in a portion of a file that holds other programs or data in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform the described functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally the processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user aspects of the described techniques can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The techniques can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. For example operations of the logic flows depicted in can be performed in a different order than that shown and or can be performed iteratively. Accordingly other implementations are within the scope of the following claims.

