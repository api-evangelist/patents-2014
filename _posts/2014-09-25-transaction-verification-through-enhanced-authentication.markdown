---

title: Transaction verification through enhanced authentication
abstract: In some examples, the additional authentication challenge may be encrypted using a key associated with the second computer system before issuance the additional authentication challenge. For example, the key may be a public key corresponding to a private key stored in a highly secure area on the second computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09363267&OS=09363267&RS=09363267
owner: eBay, Inc.
number: 09363267
owner_city: San Jose
owner_country: US
publication_date: 20140925
---
The present invention generally relates to computer system security and more particularly to verification of computer initiated transactional requests using enhanced authentication.

An application programming interface API generally refers to a set of one or more functions procedures components and services provided by a software library or a computer system. Web APIs allow clients to consume API services offered by another computer system over the internet. However web APIs can be vulnerable to various types of cyber attacks.

For example a takeover of a client computer system can provide an attacker with credentials and unlimited access to web APIs accessible from a compromised client. In addition a man in the middle attacker may intercept and use web API authentication credentials to access private information credit card accounts bank accounts or other secure data by impersonating a client.

Highly restrictive security measures may offer increased web API security. However such measures can disrupt the flow of legitimate traffic and transactions. Accordingly improved methods of authentication can provide better protection against takeover man in the middle and other types of cyber attacks while flexibly accepting routine changes occurring on a computer system or network without disrupting legitimate activity.

Systems methods and computer program products for verifying transactions using enhanced authentication are disclosed.

In an example a client computer system seeks to use an application programming interface API provided by a server computer system. The server receives a key from the client for encrypting one or more additional authentication challenges to be issued to the client beyond a first level of authentication.

In an example a client may provide the key to the server at a time of initial account registration and setup at a subsequent time as part of an account or registration update when the account associated with the client exceeds a transaction volume threshold when the account or sales of the account associated with the client exceeds a monetary value threshold when it is determined that data handled by the account associated with the client is classified as sensitive based on a request from the server or at any other time or based on any other criteria.

In an example the client sends a request to use a server provided API. The client also provides one or more authentication credentials to allow the server to authenticate the client s API request based on a first level of authentication.

In an example the server authenticates the API request analyzes information associated with the client e.g. identity location behavior etc. and detects that one or more attributes of the client have changed. In response the server generates an additional authentication challenge to further authenticate the API request received from the client. In one example the server encrypts the additional authentication challenge using the key received from the client and sends the encrypted additional authentication challenge to the client.

In an example the client receives the encrypted additional authentication challenge. In one example the key for decrypting the encrypted additional authentication challenge is stored in a highly secure area owned by an administrator or other privileged account of the client computer system. The client escalates the encrypted additional authentication challenge to the privileged account having access to the decryption key in the highly secure area. The privileged account then returns the decrypted additional authentication challenge for further processing.

In an example the server receives a response to the encrypted additional authentication challenge from the client. The server then analyzes the response determines whether a result of the additional authentication challenge was successful or unsuccessful and processes the API request received from the client based on the result.

Accordingly aspects of the present disclosure provide improved security of application programming interfaces APIs to protect against server takeovers and man in the middle attacks while allowing administrative and other legitimate changes to be made without incident.

Data store is persistent storage that is capable of storing various types of data such as text audio video and image content. In some examples data store might be a network attached file server while in other examples data store might be some other type of persistent storage such as an object oriented database a relational database and so forth.

Client machines A N may be personal computers PC laptops mobile phones tablet computers server computers wearable computing devices or any other computing devices. Client machines A N may run an operating system OS that manages hardware and software of the client machines A N. A browser not shown may run on the client machines e.g. on the OS of the client machines . The browser may be a web browser that can access content and services provided by a web server of server machine . Other types of computer programs and computer scripts also may run on client machines A N.

Client machines A N each may include a web server A N and a secure area A N used to store keys A N. Web servers A N may include web and or application servers configured to utilize one or more application programming interfaces APIs provided by server machine . An API generally refers to an interface provided for utilizing functionality of software components or other software based services available from a computer system or software library.

APIs may include any software based API such as operating system APIs programming language APIs web based APIs web services SOAP REST etc. public APIs private APIs proprietary APIs mobile APIs transactional APIs etc. In some examples use of APIs provided by server machine may be secured and or tied to user accounts of clients A N. Thus a client A may provide one or more authentication credentials e.g. a user name and or password to server machine to use an API exposed by server machine .

In an example client machines A N use an API provided by server machine to initiate and complete various types of transactions. For example client machines A N may use one or more server machine APIs to purchase goods sell goods transfer money make payments perform various financial transactions etc. Client machines A N may be associated with the same organization or may include computer systems that are operated by different organizations. For example client machines A N may be comprised of computer systems of unrelated organizations that each have contracted to utilize services provided from an API on server machine .

Clients A N each may include a corresponding secure area A N used to store a respective key A N and other secure data. A secure area A N generally refers to any area on a computer system that is separate and inaccessible to a web server application server computer program or process used to call server machine APIs. For example a secure area A may be a storage area owned by a root account an administrative user or another user. In some examples data access to a secure area A requires privilege escalation or assistance from a user or account authorized to access the secure area A e.g. root administrator etc. .

Keys A N generally refer to one or more pieces of information that determine the functional output of a cryptographic algorithm or cipher. For example a key A may be used to encrypt and or decrypt various types of data and may include symmetric keys asymmetric keys hash functions or any other data that may be used to encrypt or decrypt data. A key A may be associated with one or more computer systems of a client A. In an example a key A may be associated with a single client A computer system or associated with multiple clients A N.

Server machine may be a rackmount server a router computer a personal computer a portable digital assistant a mobile phone a laptop computer a tablet computer a camera a video camera a netbook a desktop computer a media center or any combination thereof. Server machine may include a web server and a transaction authentication system . In some examples web server and transaction authentication system may run on one or more different machines.

Web server may provide text audio and video images from data store to clients A N. Web server also may provide web based application services and business logic to clients A N. Clients A N may locate access and consume various forms of content and services from web server using applications such as a web browser web servers application servers computer programs etc. Web server also may receive text audio video and image content from clients A N that is saved in data store for purposes that may include preservation and distribution of content. Further web server may receive API requests from various clients A N.

In an example web server is coupled to one or more applications servers not shown that provide applications services and transactional APIs to clients A N. For example web server may provide clients A N with access to one or more application services which include but are not limited to banking electronic commerce e mail social networking etc. Such functionality also may be provided for example as one or more different web applications standalone applications systems plugins web browser extensions and application programming interfaces APIs . In some examples plugins and extensions may be referred to individually or collectively as add ons.

In an example some clients A N may include applications associated with a service provided by server . In one example one or more device types e.g. smart phones smart televisions tablet computers etc. may use applications to access content provided by server to issue commands to server and or to receive content from server without visiting or using web pages.

In an example functions performed by server and or web server also may be performed by the client machines A N in whole or in part. In addition the functionality attributed to a particular component may be performed by different or multiple components operating together. Server also may be accessed as a service provided to other systems or devices via appropriate application programming interfaces and thus is not limited to use with websites.

In an example transaction authentication system includes an API request receiver module an API security manager module and an API request processor module . In other examples functionality associated with API request receiver module API security manager module and API request processor module may be combined divided and organized in various arrangements.

In an example API request receiver module receives API requests sent to server machine by clients A N. For example API request receiver module may receive API requests sent from a client A to a web or application server running on server machine . API request receiver module also may receive one or more API credentials from a client A for example to authenticate use of a secure API by the client.

In an example API security manager module receives keys for performing additional authentication of server machine API requests. For example API security manager module may receive a respective key from each of one or more clients A N. In one example API security manager module receives a key from a client A associates the received key with the client A and stores the received key for encrypting one or more additional authentication challenges to be issued to the client A.

In an example a client A provides an encryption key to server machine at a time of initial account registration and setup at a subsequent time as part of an account or registration update when the account associated with the client A exceeds a transaction volume threshold when the account or sales of the account associated with the client A exceeds a monetary value threshold when it is determined that data handled by the account associated with the client A is classified as sensitive based on a request from the server or at any other time or based on any other criteria.

In an example API security manager module associates a client provided key with a specific client A or multiple clients A N during a registration process where one or more clients A N are configured to access a secure API provided by server machine . In one example API security manager module identifies and stores information about one or more clients A N associated with a client provided key. For example API security manager module may collect identifying information about each of one or more clients A N e.g. machine name IP address MAC address domain network information network paths etc. . Such information may include attributes unique to a client A and other general information known about the client e.g. typical transaction periods frequency amounts etc. . API security manager module may store such information for each of one or more clients A N in corresponding client profiles.

In an example API security manager compares identifying information known about a client A to new corresponding information gathered collected or received from a client A at another time. For example API security manager module may compare identifying information known about a client A to information associated with or gathered at the time an API interface request is received from the client A.

In an example API security manager module detects a change associated with the client A based on one or more of identification information associated with a client A network information associated with a client A usage of a server machine API by a client A transactional attributes of an API request received from a client A etc. For example API security manager module may generate one or more additional authentication challenges to issue to a client A in response to detecting one or more changes associated with identity and or behavior of the client A.

Additional authentication challenges generally refer to a second or extra level of authentication performed by API security manager module to further authenticate a client A beyond first level authentication. In some examples API security manager module may generate and issue one or more additional authentication challenges to a client A randomly in view of a detected change associated with a client A based on a client A request e.g. during client A registration or testing when a client A exhibits suspicious behavior deviating from an observed pattern of past client A behavior in addition to first level authentication to further authenticate a server machine API request received from a client A etc. In some examples a first level authentication challenge may ask a client A to provide one or more credentials such as a username password PIN passphrase etc.

In an example an additional authentication challenge may request that a client A solve one or more mathematical calculations answer one or more questions or perform one or more tasks. In one example API security manager module issues an additional authentication challenge to a client A requesting that the client A perform the task of obtaining a resource e.g. a file from a particular computer system or network location.

In an example API security manager module issues an additional authentication challenge involving one or more mathematical problems. For example API security manager module may ask a client A to solve a mathematical problem that is numeric an equation a puzzle or a mathematical problem described in words. In one example API security manager module asks a client A to provide a plurality of answers for a mathematical problem having at least two correct answers e.g. correct positive and negative answers etc. .

In an example API security manager module encrypts an additional authentication challenge generated for a client A with a key that has been associated with the client A. In one example API security manager module encrypts an additional authentication challenge with a client A associated key prior to issuing the additional authentication challenge to the client A. For example API security manager module may encrypt the additional authentication challenge using a key previously received from the client A during a registration process to utilize a server machine API.

In an example a client A provided key received by API security manager module may be used to perform one of symmetric or asymmetric encryption decryption between server machine and a client A. In one example a key A provided to API security manager module by a client A may be used both to encrypt and decrypt an additional authentication challenge. In another example a client may provide a key to API security manager module for encrypting an additional authentication challenge that the client A later decrypts using a corresponding but different key A. For example client A may provide API security manager module with a public key for encrypting data that client A decrypts using a private key A stored in a highly secure area A owned by an administrative user account.

In an example API security manager module issues an additional authentication challenge to a client A and waits for a response. In one example a client A receives an encrypted additional authentication challenge issued from API security manager module . For example a web server A application server or other computer program running on client A may receive an encrypted additional authentication challenge from API security manager module . The web server A application server or other computer program running on client A then may escalate the encrypted additional authentication challenge to a privileged user account or process having access to a secure area A holding a key A for decrypting the encrypted additional authentication challenge. The elevated user or process then may decrypt the additional authentication challenge and return the result to the calling web server A application server or other computer program of client A. Client A then may process the additional authentication challenge and return a corresponding response to API security manager module for evaluation.

In an example API security manager module waits for a period of time after issuing an additional authentication challenge to allow a client A to receive process and respond to the additional authentication challenge. In one example API security manager module allows a client A to respond to an issued additional authentication challenge before a timeout occurs based on a threshold. Further when API security manager module does not receive a response from a client A before a timeout occurs then a new additional authentication challenge may be issued an issued additional authentication challenge may be reissued or the issued authentication challenge may be deemed unsuccessful without further attempt.

In an example API security manager module receives a response to an issued additional authentication challenge from client A analyzes the response to the additional authentication challenge received from the client A and determines whether the response to the additional authentication challenge is correct or acceptable. In one example API security manager module then provides a result of the additional authentication challenge to API request processor module based on the determination. For example API security manager module may indicate whether the additional authentication challenge issued to a client A was successful or unsuccessful.

In an example API request processor module performs one or more activities based on a result of the additional authentication challenge. For example API request processor module may execute a server machine API request received from a client A based on a successful result of an additional authentication challenge. API request processor module also may deny a server machine API request from a client A when an incorrect response is received or no response is provided for an additional authentication challenge.

In an example API request processor module blocks one or more pending or subsequent server machine API requests from a client A associated with an unsuccessful additional authentication challenge. API request processor module also may block one or more pending or subsequent server machine API requests from clients A N related to another client associated with an unsuccessful additional authentication challenge. For example multiple clients A N associated with a user account or associated with a party that contracted to use a server machine API may be blocked under such circumstances.

In an example API request processor module sends a notification to a user associated with a client A account a server account or a contracted party when an unsuccessful additional authentication challenge occurs and or a security adjustment is made in response to an unsuccessful additional authentication challenge. For example API request processor module may notify an account holder by sending an e mail initiating a call sending a text message etc. In some examples API request processor module adjusts a risk model associated with one or more clients A N or accounts based on results of additional authentication challenges.

Method begins at block when an API request receiver module of a transaction authentication system receives one or more credentials to authenticate an application programming interface API request received from a second computer system based on a first level of authentication. In an example API request receiver module receives one or more credentials to authenticate a server machine API request from a client A. For example a client may be prompted or use an available API to provide one or more of a username password PIN passphrase etc. to satisfy a first level of authentication associated with a server machine API. In one example API request receiver module receives client A credentials with an API request from the client A. Such credentials may be provided by a client A for example once at the beginning of a session one or more times throughout a session or generally any number of times.

At block an API security manager module of a transaction authentication system issues an additional authentication challenge to the second computer system to further authenticate the application programming interface request. In an example API security manager module generates an additional authentication challenge to further authenticate a server machine API request from a client A beyond a standard first level of authentication. For example API security manager module may generate an additional authentication challenge that is issued to a client A requesting access to or use of a server machine API.

In an example API security manager module generates and issues an additional authentication challenge to a client A in response to detecting a change associated with the client A. For example API security manager module may detect an identity change a network change a behavioral change suspicious transactional behavior or another change associated with a client A. In response API security manager module may generate and issue one or more additional authentication challenges to the respective client A associated with the detected change.

In an example API security manager module receives a response to an additional authentication challenge from a client A. API security manager module then analyzes the response to the additional authentication challenge to determine whether the response is correct or incorrect. In some examples a client A provides an encrypted response to the additional authentication challenge for example using SSL to preserve data privacy and to protect the data from unauthorized interception. In one example API security manager module provides a result of the additional authentication challenge to API request processor module based on the determination. For example the result provided by API security manager module may indicate whether the additional authentication challenge was successful or unsuccessful.

At block an API request processor module of a transaction authentication system processes the application programming interface request received based on a result of the additional authentication challenge. In an example API request processor module of a server machine API executes a request received from a client A based on a successful additional authentication challenge result. In an example API request processor module denies a server machine API request from a client A based on an unsuccessful additional authentication challenge result.

In an example API request processor module blocks one or more pending and or subsequent server machine API requests from a client A based on an unsuccessful additional authentication challenge result. In one example API request processor module blocks one or more pending and or subsequent server machine API requests from a group of clients A N associated with one or more unsuccessful additional authentication challenges. For example a group of two or more clients A N associated with an account or party that contracted to use a server machine API may be blocked in response to an unsuccessful authentication challenge result for one client A.

In an example API request processor module notifies one or more of a user a client account holder or a server machine API owner in response to one or more unsuccessful additional authentication challenges e.g. a single unsuccessful result a number of consecutive unsuccessful results a proportion of unsuccessful results in a sampling of results that exceeds a predefined threshold etc. . For example API request processor module may send an e mail initiate a call send a text message etc. API request processor module also may adjust a risk model associated with one or more clients A N based on a result of an additional authentication challenge. For example a client A trust level may increase in response to a successful result and may decrease in response to an unsuccessful result.

Method begins at block when an API security manager module of a transaction authentication system receives a key for encrypting one or more additional authentication challenges to be issued to a second computer system. In an example API security manager module receives a key for encrypting additional authentication challenges to be issued to a client A. For example API security manager may receive the key from client A as part of a registration process where client A is configured to access server machine APIs. In one example API security manager receives a public key from a PGP key pair for encrypting additional authentication challenges to be issued to client A. The public key corresponds to a private key A stored in a secure area A of the client A and is used for decrypting additional authentication challenges by a privileged client A account having access to the secure area A.

At block an API request receiver module of a transaction authentication system receives an application programming interface request from the second computer system. In an example API request receiver module receives a server machine API request from a client A. For example a client A may send an API request to server machine to call an API providing banking electronic commerce e mail social networking or another service.

At block The API request receiver module receives one or more credentials to authenticate the application programming interface request based on a first level of authentication. In an example API request receiver module receives one or more first level authentication credentials from a client A seeking to access a server machine API. First level authentication credentials may include any combination of a username password PIN passphrase etc. In one example API request receiver module receives one or more first level authentication credentials with an API request. In another example API request receiver module receives first level authentication credentials in a client A communication separately from an API request.

At block API security manager module detects a change associated with the second computer system. In an example API security manager module collects and stores information about one or more clients A N. For example API security manager module may gather identifying or other information about each of one or more clients A N e.g. machine name IP address MAC address domain network information network paths etc. . Such information may include attributes unique to a client A and other general information known about a client A e.g. typical transaction periods frequency amounts etc. . In one example API security manager module stores such information for each of one or more clients A N in respective client profiles.

In an example API security manager compares information known about a client A to new corresponding information gathered collected or received from the client A at another time. For example API security manager module may compare identifying information known about a client A to information associated with an API interface request received from the client A. In one example API security manager module detects a change associated with the client A based on one or more of client A identification information client A network information usual client A behavior transactional attributes of an API request frequency of client A API requests etc.

At block API security manager module generates an additional authentication challenge to further authenticate the application programming interface request. In an example API security manager module generates an additional authentication challenge in response to detecting one or more changes associated with the identity or behavior of a client A.

In an example an additional authentication challenge generated by API security manager module may include one or more mathematical calculations one or more fact based predetermined or secret questions or one or more tasks. In one example API security manager module generates an additional authentication asking a client A to perform a task of obtaining a resource e.g. a file data from a location.

At block API security manager module issues the additional authentication challenge to the second computer system. In an example API security manager module issues an additional authentication challenge to a client A to further authenticate the identity of the client A beyond first level authentication. For example API security manager module may issue the additional authentication challenge to a client A in response to detecting a change associated with the client A. In some examples API security manager module identifies an identity change a network change a behavioral change suspicious transactional attributes or behavior or other observed difference associated with a client A.

In an example API security manager module later receives a response to the additional authentication challenge from a client A and analyzes the response to determine a result. API security manager module then may provide a result of the additional authentication challenge to API request processor module based on the determination. For example the result provided by API security manager module may indicate whether a client A provided a correct or an incorrect response to the additional authentication challenge.

At block an API request processor module processes the application programming interface request based on a result of the additional authentication challenge. In an API request processor module of a transaction authentication system processes an API request received from a client A based on a result of an additional authentication challenge. In an example API request processor module of a server machine API executes a server machine API request based on a successful result. In another example API request processor module denies a server machine API request based on an unsuccessful result.

In an example API request processor module notifies one or more users account holders or other parties when an additional authentication challenge is unsuccessful. For example API request processor module may provide notification by sending an e mail initiating a call sending a text message etc. In one example API request processor module adjusts a risk model associated with one or more clients A N based on a result of an additional authentication challenge. For example a client A trust level may increase in response to a successful result and may decrease in response to an unsuccessful result.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM double data rate DDR SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting computer readable storage media. The instructions may further be transmitted or received over a network via the network interface device .

In one example the instructions include instructions for one or more modules of a transaction authentication system e.g. transaction authentication system of and or a software library containing methods that call a transaction authentication system . While the computer readable storage medium machine readable storage medium is shown in an example to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present disclosure.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as computing comparing applying transmitting receiving processing or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain examples of the present disclosure also relate to an apparatus for performing the operations herein. This apparatus may be constructed for the intended purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other examples will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

