---

title: Cost-effective IAAS (infrastructure-as-a-service) cloud storage based on adaptive virtual disks (AVD)
abstract: There are provided a system, a method and a computer program product for operating a cloud computing storage system. The cloud computing storage system allocates and manages virtual disks. A virtual disk provides a logical data storage. The cloud computing storage system divides data stored in the virtual disks into chunks and allocates the chunks to physical data storage devices. The cloud computing storage system monitors I/O access patterns and user requests to change data storage capacities and throughputs of the virtual disks in real time. The cloud computing storage system dynamically reconfigures an allocation of the chunks to the physical data storage devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09442669&OS=09442669&RS=09442669
owner: International Business Machines Corporation
number: 09442669
owner_city: Armonk
owner_country: US
publication_date: 20140806
---
This disclosure relates to operating a cloud computing service system and particularly to managing virtual disks in a cloud computing service environment.

In a cloud computing environment a user does not need an infrastructure in order to use a computing resource s e.g. a data storage device s a computing system s etc. but rather relies on virtual resources. A virtual machine behaves like a physical machine simulating a behavior of the physical machine and hiding how the physical machine is leveraged in order to do so. Similarly a virtual disk behaves like a physical data storage device and can be freely attached and detached from a virtual machine in a manner similar to how a physical storage device is attached to physical machine. In a cloud computing environment a user pays for how long the user has used the virtual disk. A virtual disk throughput or bandwidth refers to the number of bytes per second that a user can read or write from or to the virtual disk. A virtual disk size or capacity refers to the total number of bytes that are allocated to the user and accessible both for reading and writing.

There are provided a system a method and a computer program product for operating a cloud computing storage system. The cloud computing storage system allocates and manages virtual disks. A virtual disk provides a logical data storage. The cloud computing storage system divides data stored in the virtual disks into chunks and allocates the chunks to physical data storage devices. The cloud computing storage system monitors I O access patterns and user requests to change data storage capacities and throughputs of the virtual disks in real time. The cloud computing storage system dynamically reconfigures an allocation of the chunks to the physical data storage devices.

The cloud computing storage system charges by using a cost model one or more users based on data storage capacities and throughput requirements of block devices provisioned as the virtual disks. The cost model determines a cost to use the cloud computing storage system for a user based on the data storage capacities of the virtual disks that are provided to or to be provided to the users the throughputs of the virtual disks that are provided to or to be provided to the users and an adjustment factor that converts the data storage capacities and the throughputs of the virtual disks which are provided to or to be provided to the users to a monetary value.

In one embodiment a use of an adaptive virtual disk is characterized according to at least three aspects as follows 

By using those aspects of the adaptive virtual disks the users may achieve satisfaction of I O performance of their applications without over paying for unused resources in the cloud computing storage system. At the same time by exposing adaptive virtual disks to their users the cloud provider can support more users at the same time and or use less physical resources to satisfy QoS constraints which increases profit and respectively reduces operational costs.

The cost model determines a cost to use the cloud storage system for one or more users based on but not limited to 1 data storage capacities of the adaptive virtual disks that are provided to or to be provided to the one or more users 2 throughputs of the adaptive virtual disks that are provided to or to be provided to the one or more users and 3 an adjustment factor that converts the data storage capacities and the throughputs of the adaptive virtual disks which are provided to or to be provided to the users to a monetary value. An example cost model includes but is not limited to 

Returning to the cloud computing storage system enables the users through the API to modify the data storage capacities and throughput requirements of the adaptive virtual disks dynamically in an online fashion while the virtual disks are attached to running virtual machine instances and in active use. illustrates a flowchart for operating the cloud computing storage system. At the adaptive virtual disk middleware allocates and manages the adaptive virtual disks for the users simultaneously based on I O requirements specified by the users. A virtual disk may include but is not limited to a block device abstraction accessible from the VM instance.

At the cloud computing storage system divides data stored in the virtual disks into chunks and allocates the chunks to physical data storage devices e.g. block devices shown in . At the cloud computing storage system monitors I O access patterns and user requests to change data storage capacities and throughputs of the virtual disks in real time. At the cloud computing storage system dynamically reconfigures an allocation of the chunks to the physical data storage devices. By reconfiguring the allocation of the chunks the cloud computing storage system optimizes the utilization of physical storage devices associated with the adaptive virtual disks by minimizing operational costs and maximizing a number of users supported simultaneously without violating quality of service constraints. The physical storage devices include but are not limited to the block device a solid state storage device a hard disk drive a non volatile data storage device a file system accessible in parallel a data repository a tape drive etc.

In one embodiment in order to optimize the physical storage devices the cloud computing storage system splits the adaptive virtual disks into chunks and distributes the chunks across a set of physical storage devices. A chunk is a contiguous sequence of bytes of predefined size that holds data written to the virtual disk at a specified offset. No two chunks can overlap. The union of all chunks results in the full content of the virtual disk. The adaptive virtual disk middleware shown in migrates the chunks between various local physical storage devices of various capacities and throughput capabilities as well as other remote adaptive virtual disk middleware via a communication link shown in in order to dynamically adapt to the modification of I O performance and capacity requirements as specified by the users.

In another embodiment in order to optimize the physical storage devices the adaptive virtual disk middleware consolidates the chunks on physical storage devices providing the least throughput and capacity in order to support as many users as possible and reduces operational costs without violating the I O performance and capacity requirements.

In one embodiment in order to allocate and manage the adaptive virtual disks at shown in the adaptive virtual disk middleware utilizes an allocation reorganization engine shown in . The allocation reorganization engine is responsible to manage the physical storage devices that are locally available on a corresponding physical computing node where one or more VM is running. The user grows or shrinks the capacity of adaptive virtual disks using the API . Growing or shrinking of the adaptive virtual disks causes more or less chunks to be stored in the physical storage devices. The user grows or shrinks the bandwidth of adaptive virtual disks using the API . Growing or shrinking of the bandwidth of the adaptive virtual disk may cause a migration of chunks to faster or slower physical storage devices to satisfy I O performance requirements. The adaptive virtual disk middleware uses the slowest and least amount of local data storage devices in order to deliver requested data storage capacities and bandwidths for all virtual disks per users needs and further in order to satisfy QoS requirements specified by SLA Service Legal Agreement . Dynamic striping i.e. distribution of chunks on different physical devices in order to increase the throughput of parallel accesses and consolidation of chunks i.e. gathering of chunks on a single physical device are used to achieve the optimization described above.

As shown in the cloud computing storage system further includes a monitoring prediction engine . The monitoring prediction engine monitors I O parameters e.g. number of IOPS Input and Output Operation Per Second size of data being transferred disk bandwidth data storage capacity needed for I O operations per a user etc. . The monitoring prediction engine predicts based on stored historical information associated with I O operation e.g. reading and or writing of data from or into the block device an I O operation to be occurred in a future pre determined time period e.g. I O operations to be occurred in a following day etc. . The prediction is constantly fed to the allocation reorganization engine in order to influence a decision of how to allocate new chunks and migrate already existing chunks.

The cloud computing storage system may utilize virtualization techniques in order to leverage a physical infrastructure e.g. a compute node etc. running the adaptive virtual disks. Such virtualization techniques are implemented by a hypervisor i.e. the software responsible to emulate virtual machines and devices on top of the physical infrastructure.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual disks virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and adaptive virtual disks.

In one embodiment the methods shown in may be implemented as hardware on a reconfigurable hardware e.g. FPGA Field Programmable Gate Array or CPLD Complex Programmable Logic Device by using a hardware description language Verilog VHDL Handel C or System C . In another embodiment the method shown in may be implemented on a semiconductor chip e.g. ASIC Application Specific Integrated Circuit by using a semi custom design methodology i.e. designing a semiconductor chip using standard cells and a hardware description language.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

While the invention has been particularly shown and described with respect to illustrative and preformed embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention which should be limited only by the scope of the appended claims.

