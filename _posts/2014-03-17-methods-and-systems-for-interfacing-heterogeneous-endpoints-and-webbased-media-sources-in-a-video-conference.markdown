---

title: Methods and systems for interfacing heterogeneous endpoints and web-based media sources in a video conference
abstract: Described herein are methods and systems for interfacing heterogeneous endpoints and web-based media sources in a video conference. Interfacing heterogeneous endpoints can be challenging due to audio/video (A/V) streams being encoded in a format that is proprietary to a media provider of the A/V stream (e.g., format that is proprietary to Skype). To address such a challenge, a client application from the media provider may be installed at a virtual machine, and may be used to decode A/V streams that are encoded in a format proprietary to the media provider. Further, to display content from a web-based media source (e.g., YouTube) in a video conference, a browser may be installed at a virtual machine, and may be used to virtually render a media signal from the web-based media source, such virtually rendered media signal subsequently being captured and presented in a video conference.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09300705&OS=09300705&RS=09300705
owner: Blue Jeans Network
number: 09300705
owner_city: Mountain View
owner_country: US
publication_date: 20140317
---
This application is a NON PROVISIONAL of claims priority to and incorporates by reference in its entirety U.S. Provisional Application Nos. 61 798 371 and 61 798 497 both filed on Mar. 15 2013 and U.S. Provisional Application Nos. 61 803 320 and 61 803 324 both filed on Mar. 19 2013. This application is also a CONTINUATION IN PART of U.S. patent application Ser. No. 13 105 684 filed on May 11 2011 entitled Systems and Methods for Real Time Multimedia Communication Across Multiple Standards and Proprietary Devices which is also incorporated herein by reference in its entirety.

The present invention relates to methods network devices and machine readable media for interfacing heterogeneous user endpoints of a video conference and also relates to methods network devices and machine readable media for incorporating web based media sources into the video conference.

Video conferencing between homogeneous user endpoints e.g. all Skype clients or all FaceTime clients is widely used. However video conferencing systems still do not easily permit heterogeneous user endpoints to communicate with one another e.g. a Skype client to communicate with a FaceTime client . Such technological challenge and other challenges are addressed herein.

In one approach to interfacing heterogeneous endpoints of a video conference with one another a client application from a media provider e.g. Skype may be installed at a virtual machine and may be used to decode an A V stream from one of the endpoints which is encoded in a format proprietary to the media provider. The decoded A V stream can then be composed with A V streams from other endpoints in order to form a composite A V stream. The composite A V stream may then be encoded into a format compatible with one of the endpoints.

In one embodiment of the invention only one client application is installed at each virtual machine since a client application s processing of A V streams can be computationally intensive. A result of such an implementation is that the number of virtual machines needed at any particular time may fluctuate over time in response to the number of endpoints particularly those endpoints which encode A V streams in a proprietary manner . To accommodate such fluctuation in computational resources a form of load prediction is employed as described below .

In one approach to interfacing a web based media source e.g. YouTube with a video conference a browser may be installed at a virtual machine and may be used to virtually render a media signal from the web based media source. Such virtually rendered media signal is subsequently captured and may then be composed with A V streams from endpoints in order to form a composite A V stream. The composite A V stream may then be encoded into a format compatible with one of the endpoints.

In one embodiment of the invention only one browser is installed at each virtual machine since a browser s processing of A V streams can be computationally intensive. A result of such an implementation is that the number of virtual machines needed at any particular time may fluctuate over time in response to the number of web based media sources interfaced with a video conference. To accommodate such fluctuation in computational resources load prediction once again may be employed. In another embodiment of the invention multiple browsers are launched as separate processes within a single server or single virtual machine in case of less computationally intensive processing tasks. In such a case the fluctuations in the number of video conferences may be handled by launching more or less processes within the single server or single virtual machine.

In the following detailed description of the preferred embodiments reference is made to the accompanying drawings that form a part hereof and in which are shown by way of illustration specific embodiments in which the invention may be practiced. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

The video conference system configured in accordance with some embodiments of the present invention may provide a user interface for presentation of the received data streams for a video conference. In some embodiments the video conference system may support the operation of a video conference such as a conference with a virtual media room or virtual meeting room VMR user interface wherein each VMR user interface may present data from a plurality of endpoints e.g. devices of participants in the video conference at one or more geographic locations. Examples of approaches to video conference systems that may be practiced in some embodiments are provided in U.S. patent application Ser. No. 13 105 691 entitled Systems and Methods for Scalable Composition of Media Streams for Real Time Multimedia Communication filed on May 11 2011 issued as U.S. Pat. No. 8 482 593 on Jul. 9 2013 U.S. patent application Ser. No. 13 105 684 entitled Systems and Methods for Real time Multimedia Communications Across Multiple Standards and Proprietary Devices filed on May 11 2011 U.S. patent application Ser. No. 13 919 576 entitled Systems and Methods for Scalable Composition of Media Streams for Real time Multimedia Communication filed on Jun. 17 2013 U.S. patent application Ser. No. 13 105 699 entitled Systems and Methods for Scalable Distributed Global Infrastructure for Real time Multimedia Communication filed on May 11 2011 issued as U.S. Pat. No. 8 514 263 on Aug. 20 2013 U.S. patent application Ser. No. 13 955 646 entitled Systems and Methods for Scalable Distributed Global Infrastructure for Real time Multimedia Communication filed on Jul. 31 2013 U.S. patent application Ser. No. 13 105 704 entitled Systems and Methods for Security and Privacy Controls for Videoconferencing filed on May 11 2011 U.S. patent application Ser. No. 13 105 716 entitled Systems and Methods for Shared Multimedia Experiences in Virtual Videoconference Rooms filed on May 11 2011 U.S. patent application Ser. No. 13 105 719 entitled Systems and Methods for Novel Interactions with Participants in Videoconference Meetings filed on May 11 2011 U.S. patent application Ser. No. 13 105 723 entitled Systems and Methods for Real time Virtual reality Immersive Multimedia Communications filed on May 11 2011 and U.S. patent application Ser. No. 13 251 913 entitled Systems and Methods for Error Resilient Scheme for Low Latency H.264 Video Coding filed on Oct. 3 2011 each incorporated herein by reference in its respective entirety.

The video conference system is described in more detail with reference to and as illustrated may support a variety of video conferencing feeds of audio video audio and video and or other media data streams from video conferencing participant endpoints to present a video conference. Endpoints may be any type of device including but not limited to laptops computers smartphones tablets phones audio and video conferencing system devices and or any other device capable of sending and receiving data streams over a network. Participants may use proprietary or standards based communication protocols with their devices and the video conference system may enable a multi party and or point to point e.g. between two endpoints video conference session among the plurality of participant endpoints.

As a non limiting example video data streams from proprietary video conference endpoints using proprietary communication protocols implemented for client applications include but are not limited to the following Microsoft Skype application Polycom video conference applications Microsoft Lync applications Google Talk applications web applications capable of real time communication and or any other application providing communication services. Video data streams from standards based video conference endpoints include but are not limited to H.323 and Session Initiation Protocol SIP . Additionally the video conference system may support data streams from a media gateway that converts digital media streams between disparate telecommunication networks such as from devices using public switched telephone networks PSTN SS7 and Next Generation Networks. Each video conference can be implemented and supported across an infrastructure of a globally distributed set of commodity servers acting as media processing nodes co located in Points of Presence POPs for Internet access wherein such a distributed architecture can support thousands of simultaneously active video conferences in a reservation less manner and that is transparent to the user participants. Each video conference provides users with a rich set of conferencing and collaboration interaction.

These interactions encompass the control of a video conference session its configuration the visual layout of the data streams from the conference participants customization of the user interface and adaptation of a video conference to integrate with and present data streams from different client applications e.g. chat whiteboards Microsoft Skype etc. . For a non limiting example one such use of the video conference system is to facilitate conferences between two disparate endpoints such as a client application for a proprietary system from a communication service provider e.g. a Skype client and an application for a standards based H.323 endpoint. Continuing with the example the Skype user may initiate a video conference with another user and have no knowledge of the other user s endpoint technology e.g. client application and the video conference system may host a video conference session and instantiate media processing components elements to translate data streams as needed transcode data streams as needed and create a composite of data streams received from the disparate endpoints.

A globally distributed infrastructure for the video conference system supports the sharing of the event e.g. the session among the participants at geographically distributed locations with the use of a plurality of MCUs Multipoint Control Units each configured to process the plurality of audio and or video streams from the plurality of video conference endpoints in real time. Those with skill in the art will recognize that a globally distributed infrastructure is not required to practice the invention. A geographically distributed architecture and or simply a distributed architecture may be implemented to practice the invention.

Compared to conventional video conference system approaches that require every participant to the video conference to follow the same communication standard or protocol and or use the same client application from a communication service provider a video conference supported by the globally distributed infrastructure with at least one MCU at a media server allows the participants of a video conference to participate in a multi party or point to point video conference session in device address scheme protocol and or communication service provider independent fashion. By conducting manipulation of the video and audio streams transparently in on a remote server e.g. a server of a POP that is accessible via one or more networks or networks of networks without end user involvement the proposed approach brings together video conference systems and applications of different devices different protocols of video conferencing and or different communication services from communication service providers as one integrated system. Communication service providers may include but are not limited to the following providers of Voice over Internet Protocol VoIP instant messaging services supporting voice and or data and or service provider with applications that allow for transport of information electronically.

In particular the video conference system provides the integration of services from different communication service providers e.g. Skype and Google Talk that support different addressing schemes for identifying users on devices. For example a participant user may login to a Skype client to join a video conference using a communication service identifier e.g. username Skype id and communicate with a participant user who logins to a Google Talk client using an email address. Ordinarily a communication service provider may require a user to identify each participant on the communication session with an identifier registered with the communication service e.g. communication service identifier email address username etc. so that the communication service provider may look up the address of the user endpoint to communicate and the communication service provider may not support integration with other communication services. The video conference system integrates with the communication service provider services system seamlessly for the user so that the user can login with any client application with an identifier registered with the communication service provider and participate in the video conference.

In some embodiments the endpoint for a participant using a client application is communicating with a corresponding client application for the communication service provider executing as a virtual client application on a server in the backend. A virtual client application is a client application that may be executed on a server of the video conference system to receive data streams from the client application executing on a participant endpoint device and the output or presentation of the data streams within the virtual client application may be captured and combined with other data streams to form a composite for the video conference. Examples of approaches to video conference systems that support different communication services are provided in U.S. patent application Ser. No. 13 105 684 entitled Systems and Methods for Real Time Multimedia Communication across multiple standards and proprietary devices filed on May 11 2011 incorporated herein by reference in its entirety.

Hosting the video conference on at least one media server accessible on a network e.g. Internet cloud allows for the participants to initiate a video conference with any device supporting any communication protocol and any client application from a communication service provider have the system communicate with the other participants at each of their selected endpoint devices and the other participants may accept the request to join the video conference from any endpoint device using any client application from any communication service provider that he she wishes. A video conference hosted on a server accessible over the Internet cloud enables any participant to be able to upload media content to a server i.e. a node of the global distributed infrastructure accessible over the Internet e.g. in the cloud and have it be retransmitted to other participants in formats of their choice transparently with or without modifications.

In the example of the globally distributed infrastructure that supports and enables the operations of the video conference has at least one or more of the following attributes 

In some embodiments globally distributed infrastructure may be implemented with clusters of x86 servers both locally on a LAN as well as across geographies serving as the media processing nodes for the MCUs to achieve near unlimited scaling. All of the media processing nodes of the clusters e.g. and may work together forming one giant MCU. In some embodiments such clustered design makes use of network layer multicast and a novel multi bit rate stream distribution scheme to achieve the unlimited scaling. The globally distributed infrastructure is able to achieve great scalability in terms of the number of participants per call geographic distribution of callers as well as distribution of calls across multiple POPs worldwide.

By way of a non limiting example globally distributed infrastructure has the media processing node MCUs distributed around the globe in POPs e.g. United States US Network POP US Core Media POP Asia Pacific APAC Media POP APAC Network POP and European Union EU Core Media POP at data centers e.g. third party data centers to process video conference feeds coming from video conference endpoints having different communication protocols and or using different client applications from communication service providers. Those with skill in the art will recognize that an implementation of the globally distributed infrastructure for the video conference system with the same number and or geographic locations for Core Media and or Network POPs of is not required and any number of Core Media POPs and Network POPs may be used to provide a content delivery network for a video conference system. In some embodiments each Core Media POP may have the processing power e.g. servers to handle the load for that geographical region where the POP is located. Users participants connecting to the video conference system may be directed to the closest Core Media POP e.g. the connector at a POP described in more detail with that can handle the processing for the conference so as to allow them to minimize their latency.

Once the participants are in communication with a POP of the globally distributed infrastructure their conference feeds of audio and video streams can be carried on a high performance network POPs e.g. US Network POP APAC Network POP between the POPs. Additionally in some embodiments Network POPs e.g. US Network POP APAC Network POP can be used for communication e.g. traffic with users in places where a Core Media POP does not exist. By way of example an endpoint can communicate with a Network POP in a more optimal location for communication than the nearest Core Media POP and the Network POP may send forward the traffic to a Core Media POP over a private dedicated network so as to avoid use of the open Internet. The globally distributed infrastructure enables media processing nodes to act as one single system.

In some embodiments the globally distributed infrastructure may have multiple other globally distributed private networks to connect to it including but not limited to deployments of video conferencing services such as Microsoft Lync that require federation i.e. cooperation among multiple organizational entities at edge nodes and translation and decoding of several communication and transport protocols.

Some components which include but are not limited to the following components user account management billing system NOC Network operation center systems for bootstrapping monitoring and node management may be run at one or more centralized but redundant management nodes in the Business Data Layer . Other components which include but are not limited to common application framework and platform e.g. Linux x86 CPUs GPUs package management clustering can be run on both the distributed nodes and the centralized management nodes.

Each of the protocol connector nodes in the Proxy Layer may receive audio video data streams utilizing proprietary or standards based communication protocols and may translate the received data into a common protocol e.g. Real Time Transport Protocol RTP . The received data in the common protocol may then be sent to media servers for transcoding and composition mixing by media servers of the Worker Layer such operation of the media servers used to form composite data streams for the endpoints. Translating when needed may include receiving the data packets of a data stream communicated using a first communication protocol and retransmitting the received data packets using a second communication protocol. While the communication protocol in which the data stream is communicated is changed the actual data packets may remain unchanged. In contrast transcoding when needed may include decoding data e.g. data packets in a received first communication protocol to an intermediate format and encoding the data into a common target format for a common target communication protocol. Other implementations may provide for transcoding to be performed at the proxy layer with a protocol connector node .

In some embodiments global infrastructure provides a high level mechanism for fault tolerant protocol handling to prevent improper input from causing instability and possible security breach via protocol connector or media servers . Media processing tasks by protocol connectors and or media servers such as processing of protocol control messages and compressing audio and video streams may be isolated in one or more separate independent unprivileged processes. More specifically 

In some embodiments media processing servers are designed to convert and compose several videoconference feeds of video and audio streams in real time to create and render one or more composite multimedia streams for each participant to the video conference e.g. VMR . Media processing servers may include as its components one or more of video compositor video transcoder distributed multicast video switch audio transcoder pre processor distributed multicast audio mixer and each component may be in communication with protocol connector and a distributed conference session controller. In the case of video the video streams from the participants are made available at the media processing server in three or more forms original compressed video uncompressed raw video and a lower resolution compressed thumbnail video.

By way of example a video compositor of a module executing on a media processing node subscribes to whichever video stream it needs based on the set of videos needed to compose and be rendered to the participants. The two or more compressed forms of the video streams listed above may be transcoded by video transcoder sent by distributed multicast video switch using a multicast address on the network so that other remote media processing nodes that want these video streams can subscribe to them as needed. This scheme allows the entire cluster of nodes locally and globally to share and or exchange the audio and video streams they need in the most efficient manner. These streams could be transmitted over the public Internet over a private network or over a provisioned overlay network with service level guarantees. Using this approach video compositor may show various composites including but limited to just the active speaker two people side by side if they are having a conversation and any other custom format as requested by a participant which may include transformations of the video into other representations as well. Continuing with the example a video transcoder of media processing server encodes and decodes composite video streams efficiently where characteristics of each individual stream can be extracted during decoding.

In some embodiments video compositor not only composes the raw video stream into a composite video stream but also builds up a composite metadata field in order to apply similar operations including both 2D and 3D operations outlined in the metadata field to the individual video streams of the composite video. As a non limiting example motion vectors need to be applied with the same transformation that video compositor may apply to each raw video stream including but not limited to scaling rotation translation shearing. This metadata could be used for other non real time multimedia services including but not limited to recorded streams and annotated streams for offline search and indexing.

In some embodiments application server e.g. a user experience engine renders multimedia content including but not limited to the composite audio video stream to each of the participants to the video conference for an enhanced User Experience UE for the participants. The UE provided by the application server to the participants may comprise one or more of the following areas 

Despite the fact that most conventional video conference systems cost tens of thousands of dollars they offer very limited freedom and flexibility to the call organizer or to any participants in terms of controlling the user experience during the call. The layouts come pre configured to a select few options and the settings that can be modified during a call are also limited.

In some embodiments application server provides moderator initiated in meeting session management and control over security and privacy settings during a particular video conference call wherein such management and control features include but are not limited to muting a particular speaker at the video conference controlling and or broadcasting layouts associated with one of the video conference endpoints to all or a subset of the participants and sharing additional materials selectively with a subset of the participants for a non limiting example in an HR vertical application where multiple interviewers are interviewing one candidate in a common call .

By offering the video conferencing service over the Internet cloud application server eliminates a lot of these limitations of the conventional video conference systems. For a non limiting example application server enables participant s associated different types of video conference endpoints to talk to each other over the Internet during the video conference. For a non limiting example participants from H.323 endpoints can to talk to participants from desktop clients such as Skype and both the moderator and the participants can choose from a wide variety of options. In addition by providing the ability to terminate the service in the cloud application server enables access to a much richer set of features for a conference call that a participant can use compared to a conventional passively bridged conference call. More specifically every participant can have control of one or more of 

 1 Which active participants to the session to view in his her video windows on the screen of his her video conference endpoint.

 2 Layout options for how the different participants should be shown on the screen of his her video conference endpoint.

 3 Layout options on where and how to view the secondary video channel screen sharing presentation sharing shared viewing of other content on the screen of his her video conference endpoint.

Using such in meeting controls a moderator can control security and privacy settings for the particular call in ways. The moderator of the call in addition to the aforementioned options has a richer suite of options to pick from through a web interface to manage and control the video conference which include but are not limited to 

In some embodiments application server enables private conferences by creating sub rooms in main VMR that any subset of the participants to the main VMR could join and have private chats. For a non limiting example participants can invite others for a quick audio video or text conversation while being on hold in the main VMR.

A shared experience of events among participants to a video conference often requires all participants to be physically present at the same place. Otherwise when it happens over the Internet the quality is often very poor and the steps needed to achieve this are quite challenging for the average person to pursue this as a viable technological option.

In some embodiments application server provides collaborative viewing of events through VMRs that can be booked and shared among the participants so that they are able to experience the joy of simultaneously participating in an event and sharing the experience together via a video conference. For a non limiting example the shared event can be a Super Bowl game that people want to enjoy with friends or a quick session to watch a few movie trailers together among a group of friends to decide which one to go watch in the theater.

In some embodiments application server utilizes the MCUs of the global infrastructure to offer an easy quick and high quality solution for event sharing. More specifically application server enables one initiating participant to invite a group of other participants for a shared video conference call via a web application. Once everyone joins in the VMR to share online videos and content an initiating participant may provide a uniform resource locator URL where the content is located and the content may be streamed into a VMR directly from the content source whether the content is local to the initiating participant device or located remotely and accessed over the Internet from a third party web site or content store. Participants may continue to have conversations with other participants while watching this content. Other features provided include but are not limited to altering the layout of the content in terms of where it is visible its audio level whether it should be muted or not whether it should be paused or removed temporarily are in the control of the person sharing the content similar to the management and control by a moderator to a video conference as discussed above. Such an approach provides a compelling and novel way to watch live events among groups of people whose locations are geographically distributed yet want to experience an event together. This enables a whole new set of applications around active remote participation in live professional events such as conferences and social events such as weddings.

In some embodiments application server enables multiple views and device independent control by the participants to the video conference. Here the video endpoints each have its own user interface and in the case of hardware video systems available in conference rooms the video conference endpoints may each have a remote control that is not very easy to use. In order to make the user experience of connecting to the VMR simple user experience engine minimizes the operations that one need to carry out using the endpoints native interface and moves all of those functions to a set of interfaces running on a device familiar to most users desktop PC laptop PC mobile phone or mobile tablet and thus makes the user experience to control the VMR mostly independent of the endpoint devices user interface capabilities. With such device independent control of the video conference application server provides flexibility ease of use richness of experience and feature expansion that it allows to make the experience far more personal and meaningful to participants.

In some embodiments application server may also allow a participant to participate in and or control a video conference using multiple devices video conference endpoints simultaneously. On one device such as the video conference room system the participant can receive audio and video streams. On another device such as a laptop or tablet the same participant can send receive presentation materials chat messages etc. and also use it to control the conference such as muting one or more of the participants changing the layout on the screens of the video conference endpoints with PIP for the presentation etc. The actions on the laptop are reflected on the video conference room system since both are connected to the same VMR hosting the video conference.

Joining a video conference from H.323 endpoints today often involve cumbersome steps which must be performed via a remote control for the endpoint device. In addition to logistical issues such as locating the remote in a room there are learning curve related issues such as finding the correct number to call from the directory entering a specified code for the call from the remote etc. In some embodiments an endpoint can be setup to always just dial one number when it is turned on or woken up from sleep. Once the call is established then a different user interface such as a web application or mobile device client application can be used to select which meeting to join.

In some embodiments application server provides a user experience with a user interface rendering to the participants welcome screen content that includes but is not limited to the following an interactive welcome handshake a splash screen interactions for entering room number related info and a welcome video etc. for video conferences. To join a call from a video conference endpoint all that the moderator needs to do is to call a personal VMR number he she subscribes to. The moderator can then setup details for the call including the rich media content that would form part of the welcome handshake with other participants which may then be setup as default options for all calls hosted by the moderator. Other participants call into the VMR and enter the room number specified for the conference call. On joining the VMR they first enjoy the rich media content setup as their welcome screen including content specific to the call such as an agenda names of the parties calling in company related statistics etc. Such content could also be more generic for non business applications including any flash content including videos music animations advertisements etc. Upon joining the call the display also may show a code that is specific to the participant on his her screen which can be applied to the content on the call for content sharing. The code can also be entered from a web application used for the call or can be provided through voice or visual commands that are recognized and processed by software in the internet cloud that are then translated into actionable events.

Each of the client devices and may be a smartphone tablet computing device desktop computer and or a video conference device. Client device may comprise input output I O devices communicatively coupled to client application . Client application may be a Skype client application from Microsoft Corp. of Redmond Wash. a WebEx client application from Cisco Systems Inc. of San Jose Calif. a FaceTime client application from Apple Inc. of Cupertino Calif. or a Blue Jeans application from Blue Jeans Network of Mountain View Calif. .

In some embodiments client application may process the audio and video A V signals received from the I O devices before transmitting an A V stream e.g. a time series of audio and video signals not necessarily transmitted in sequential order to network . The A V stream that is transmitted to network may be encoded into a format that is proprietary to a media provider i.e. format known only to the media provider of client application such as the respective formats for Skype WebEx and FaceTime communication. Alternatively the A V stream that is transmitted to network may be encoded into a format that is not proprietary to any media provider such as Real time Transport Protocol RTP encoding H.264 standards based video encoding and G.722 standards based audio encoding.

In some embodiments client application may receive an A V stream from network . If necessary client application may decode the received A V stream. A video signal audio signal may be extracted from the decoded A V stream and transmitted to monitor speaker respectively.

As depicted in client device may similarly comprise I O devices communicatively coupled with client application . The specific details of client device may be similar to those of client device and hence will not be repeated. Also depicted in client device may similarly comprise I O devices communicatively coupled with client application . The specific details of client device may be similar to those of client device and hence will not be repeated. Client applications and may be from one or more media providers such as Skype WebEx FaceTime and Blue Jeans Network. In the example of client applications and are from three separate media providers but this is not necessarily so.

As an illustrative example suppose client devices and are all used to facilitate a video conference. A V streams from each of client devices and may be received at server . Such A V streams may be first processed described in detail below if needed. The processed or unprocessed A V streams may be received by media mixer which composes two or more of the processed or unprocessed A V streams into a composite stream. The composite stream may then be encoded into a format that is compatible with the first endpoint more specifically client application a format that is compatible with the second endpoint more specifically client application and a format that is compatible with the third endpoint more specifically client application . Throughout the description each of the client devices may at times be referred to as a user endpoint of a video conference. The encoded A V streams may then be sent to its corresponding user endpoint.

It is noted that the location of media mixer in server is exemplary. In one embodiment of the invention media mixer may be located in a server separate from server . In yet another embodiment of the invention a media mixer may be present in each of the user endpoints. More specifically the processed or unprocessed version of the A V stream from client device the processed or unprocessed version of the A V stream from client device and the processed or unprocessed version of the A V stream from client device may all be sent to client device where a media mixer would combine the three A V streams into one composite A V stream which would then be rendered to the user of client device . A similar description would apply to the media mixers at client devices and .

The processing of the A V streams at server is now described. In one instance the A V stream that is received at server is already in a format that is compatible with media mixer . If so the A V stream may be directly transmitted to media mixer without any processing such as the case for the A V stream received from client device . For example in the instance where client application is a Blue Jeans application and media mixer is that from Blue Jeans Network the A V stream transmitted by client application could be directly provided to media mixer without any intermediate processing by components or

In another case the A V stream that is received at server is not in a format that is compatible with media mixer but there is an application software development kit SDK available at server that can be used to decode the A V stream. If so the A V stream may be first decoded and then converted e.g. encoded into a format that is compatible with media mixer . This scenario is illustrated in by the A V stream provided by client device which is received via application SDK e.g. application SDK may decode the A V stream and then encoded by converter before being transmitted to media mixer . In the reverse direction converter may receive an A V stream from media mixer and covert it into a format suitable for application SDK . Often application SDK and client application are provided by the same media provider and could be the same binary program one run by the user on their device e.g. one of client devices and and one run on a virtual machine of server . Application SDK and converter may be collectively viewed as transcoder . For example in the instance where a client application is a GTalk application and media mixer is that from Blue Jeans Network the A V stream generated by client application could be received via an application SDK provided by GTalk decoded and re encoded by a converter provided by Blue Jeans Network and then transmitted to media mixer .

In the last case the A V stream that is received at server is not in a format that is compatible with media mixer and no application SDK is available at server that can be used to decode the A V stream. In such a case the A V stream may be terminated in the cloud i.e. an endpoint for the A V stream may be created in server . This scenario is illustrated in by the A V stream provided by client device which is terminated in the cloud by client application . Client application virtually plays the received A V stream similar to how client application might play a received A V stream. The only difference is that the audio and video output signals of client application are not transmitted to an actual monitor and speaker but rather are captured by capture devices. Such arrangement is depicted in more detail in .

As depicted in the screen signal generated by client application may be captured i.e. may be temporarily stored by screen capture device which may act like a buffer . Similarly the speaker signal generated by client application may be captured i.e. may be temporarily stored by speaker capture device which may act like a buffer . The captured audio and video signals may then be provided to converter which encodes the received A V signals into a format that is compatible with media mixer . In the reverse direction converter may receive an A V stream from media mixer . Converter may extract a video signal from the A V stream and convert it into a format that can be received by the video camera input of client application . The video signal from converter may be provided to camera capture device which may act like a buffer . Likewise converter may extract an audio signal from the A V stream and convert it into a format that can be received by the microphone input of client application . The audio signal from converter may be provided to microphone capture device which may act like a buffer .

Upon studying in detail one will realize that client application is precisely a component that can function as converter . Client application is designed to communicate with media mixer without any conversion transcoding note connection from client application to media mixer without any conversion blocks therebetween . Further client application is designed to receive a video audio signal input and produce a video audio signal output which perfectly couples with the I O of client application . illustrates a specific embodiment of the system depicted in in which converter has been substituted with another instance of client application . By comparing one can conceptually understand that the functionality of client application and is essentially unchanged whether the I O is produced by actual I O devices and or another client application .

Returning to the remaining detail yet to be described is client application executing on virtual machine . As is known in the art a virtual machine is not an imaginary or conceptual machine but rather is an execution environment typically on a server that has access to one or more processors memory disk drives network interface cards and so on. See page 64 of Silberschatz et al. Operating System Concepts John Wiley Sons Inc. 2005 . While one or more virtual machines may be instantiated on a single server the processes of two different virtual machines typically do not interfere with one another i.e. one virtual machine will not write over the data of another virtual machine etc. In the present case client application may be executed on a virtual machine for example provided by Amazon Web Services AWS . Since client application is built as a user facing application that makes use of devices such as cameras speakers microphones displays on a user s device client application is generally built to run as the only copy of the client application on a machine. Hence each instance of client application is best run its own virtual machine.

It is noted that each of virtual machines and have been depicted as comprising a client application and a converter while this is not necessarily so. In another embodiment one or more of converters and may be located in virtual machine .

Returning to the discussion of deploying one or more virtual machines on a server the inventors have observed that there often is a significant degree of variability associated with the load at the one or more servers. At a low activity period e.g. over the weekends there might be the need for 100 virtual machines while at a peak activity period e.g. over the weekdays there might be the need for 1000 virtual machines. One solution might be to deploy a constant number of virtual machines the number exceeding the need at any peak activity period. While such an approach would function appropriately it would not be cost effective. Indeed it is costly to deploy a virtual machine e.g. every minute that a virtual machine is deployed might cost a dollar . Another solution might be to deploy virtual machines in response to a given need. While such approach would be cost effective it would not service user s request in a timely manner i.e. there is a noticeable time delay between the instant a command is received to deploy a virtual machine to the instant when a client application on the deployed virtual machine is ready to process an A V stream .

For an approach that is both cost effective and responsive to user need in a timely fashion the inventors realized that load prediction is necessary i.e. predicting future number of virtual machines that are needed from a historical record of the number of virtual machines that were deployed in the past . provides plot to more easily describe load prediction. Plot depicts curve in solid line of the historical data of the number of virtual machines over time i.e. time series of the past number of virtual machines . Plots also depicts curve in dashed line of a prediction of the future number of virtual machines over time i.e. time series of the future number of virtual machines . A future number of virtual machines may be estimated from a time series of the past number of virtual machines using well known techniques in the art such as the Kalman filter. Such estimation i.e. prediction can be performed on a daily weekly or monthly basis since patterns of usage generally repeat in cycles with similar time periods e.g. periods of a day a week or a month .

In accordance with certain embodiments of the invention a more efficient process is employed in which content from a web based media source is directly incorporated into a video conference without using desktop sharing or similar tools . depicts a system that employs such a process. System facilitates a video conference between the users of client devices and using substantially the same techniques described above in association with . In system the A V streams of client devices and are terminated in the cloud by client applications and and then converted by converters and into a format compatible with media mixer . As described above the A V streams do not necessarily need to be terminated in the cloud. Instead the A V streams of client devices in other instances could be directly provided to media mixer and in yet other instances could be provided to media mixer after a transcoding operation. Such details have been discussed above.

In contrast to the embodiments of media mixer of has the ability to receive an A V stream directly from web server . While one web server has been depicted for ease of illustration one or more Web servers may be present in system . Web server may be operated by Dropbox from San Francisco Calif. in which case the Web server may store documents images etc. in content database . Alternatively web server may be operated by YouTube from Google of Mountain View Calif. in which case the Web server may store videos in content database . Alternatively web server may be operated by Picasa also from Google of Mountain View Calif. in which case the Web server may store images in content database .

Browser is present in the cloud i.e. executes in server or more particularly may execute in virtual machine of server and may interface Web server with media mixer . Browser may virtually render a media signal from Web server . That is browser may render a media signal just as a browser on a client device typically renders a media signal except that the rendered form of the media signal is provided to capture devices instead of physical I O devices e.g. monitor speakers .

As depicted in browser may render a media signal into one or more of an audio stream which is then captured by audio capture device a video stream which is then captured by video capture device and an image which is then captured by image capture device . A video stream may comprise a video advertisement which may be inserted into the beginning and or middle of a free video conference as a revenue generating mechanism. An image may comprise a picture a document i.e. Word document Excel document PDF document etc. a webpage web style banner etc. While not depicted browser may further render a media signal into text which may allow an alert or other types of messages to be sent to users at the beginning middle or end of a video conference. One or more of the captured audio stream the captured video stream and the captured image may be transmitted to encoder which encodes such captured media into a format that is compatible with media mixer . The data received from encoder may be loosely referred to as an A V stream although in some instances there may be only an audio stream only a video stream only a single image etc. rather than both an audio and video stream. In contrast to virtual machines and virtual machine may only provide data to media mixer and not receive any data from media mixer .

As further depicted in browser may receive input from one or more client devices . For example client device may provide command in the form of dual tone multi frequency DTMF signals. Such DTMF signals may be transmitted from client device to browser by way of a signal path created via network virtual machine virtual machine and decoder . More particularly as depicted in DTMF signals or other signals may be received by decoder which decodes the DTMF signals into a form that is compatible with key stroke generator . Key stroke generator may then convert the decoded DTMF signals into key stroke input which is then provided to browser . Essentially decoder and key stroke generator may transform command signals from a touchtone device at client device to appear as keyboard input to browser .

In some embodiments browser and possibly encoder may execute on virtual machine . In the instance where there are multiple web based media sources there may be multiple browsers executing in the cloud one for each of the web based media sources. Like the client applications executing in the cloud each browser may execute in its own virtual machine or multiple browser applications can be run on a single server or single virtual machine in a headless manner i.e. with no user interface rendered in a visible manner . As the load in the server will likewise fluctuate with the number of browsers executing in the cloud the load prediction algorithm described in association with may likewise be applied to deploy a predicted number of virtual machines to accommodate a predicted need for browsers.

As a more specific embodiment of system of system of facilitates a video conference between a Skype user and a WebEx user and further facilitates documents from Dropbox i.e. Dropbox server to be incorporated into the video conference.

In one embodiment of the invention web server may host an interactive video response IVR system and or an interactive voice and video response IVVR system .

In the foregoing description certain flow diagrams have been shown and processes described in relation to those flow diagrams that provide a reference for discussion purposes. In an actual implementation of the methods of the present invention the steps can comprise event driven routines that can run in parallel and can be launched and executed other than as shown by the simple depiction in the flow diagrams. In short the particular order of the steps in the flow diagrams is illustrative of the invention but not limiting of the various permutations that can be achieved in a given embodiment. Accordingly it is the performance of the steps recited in the claims appended below which is pertinent and not the order of operation of the steps themselves.

Further the procedures described herein may involve the use of various computer systems and computer readable storage media having computer readable instructions stored thereon. provides an example of a computer system that is representative of any of the computer systems or electronic devices discussed herein. Note not all of the various computer systems may have all of the features of computer system . Computer systems such as computer system may be referred to by other names for example as endpoints hand held devices mobile devices smart phones multiprocessor systems microprocessor based electronic devices digital signal processor based devices networked computer systems minicomputers mainframe computers personal computers servers clients laptop computers tablet computers and the like. Such labels are not critical to the present invention.

Computer system includes a bus or other communication mechanism for communicating information and a processor coupled with the bus for processing information. Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to the bus for storing information and instructions to be executed by the processor. Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system may further include a read only memory ROM or other static storage device coupled to the bus for storing static information and instructions for the processor . A storage device which may be one or more of a hard disk flash memory based storage medium or other storage medium may be provided and coupled to the bus for storing information and instructions e.g. operating systems applications programs and the like .

Computer system may be coupled via the bus to a display such as a liquid crystal or light emitting diode display for displaying information to a user. An input device such as a keyboard including alphanumeric and other keys may be coupled to the bus for communicating information and command selections to the processor. In some embodiments the keyboard will be a software construct rendered via a touch screen display . Another type of user input device is cursor control device such as a mouse a trackball cursor direction keys and or any other input device for communicating direction information and command selections to processor and for controlling cursor movement on the display. Where a touch screen display is used cursor control functions may be implemented using finger based gestures directly on the display. Other user interface devices such as microphones speakers etc. are not shown in detail but may be involved with the receipt of user input and or presentation of output.

The processes referred to herein may be implemented by processor executing appropriate sequences of computer readable instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device and execution of the sequences of instructions contained in the main memory may cause the processor to perform the associated actions. In alternative embodiments hard wired circuitry or firmware controlled processing units e.g. field programmable gate arrays may be used in place of or in combination with processor and its associated computer software instructions to implement the invention. The computer readable instructions may be rendered in any computer language including without limitation C C C assembly language markup languages e.g. HTML SGML XML VoXML JavaScript and the like as well as object oriented environments such as the Common Object Request Broker Architecture CORBA Java and the like. In general the flow diagrams are intended to be illustrative of logical steps performed in a sequence to accomplish a given purpose which is the hallmark of any computer executable application. Unless specifically stated otherwise it should be appreciated that throughout the description of the present invention use of terms such as processing computing calculating determining displaying or the like refer to the action and processes of an appropriately programmed computer system such as computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within its registers and memories into other data similarly represented as physical quantities within its memories or registers or other such information storage transmission or display devices.

Computer system may also include a communication interface coupled to the bus . Communication interface may provide a two way data communication channel with a computer network such as a network which provides connectivity to and among the various servers and or client devices discussed above. For example communication interface may be a local area network LAN card wired and or wireless to provide a data communication connection to a compatible LAN which itself is communicatively coupled to the Internet through one or more Internet service provider networks. The precise details of such communication paths are not critical to the present invention. What is important is that computer system can send and receive messages and data through the communication interface and in that way communication with hosts and or client devices accessible via the Internet. Computer system may include additional capabilities and facilities such as a power unit which may comprise a battery a power port one or more antennae one or more data ports and one or more wireless communication modules. The various databases described herein are computer based record keeping systems. Stated differently these databases are each a combination of computer hardware and software that act together to allow for the storage and retrieval of information data . Accordingly they may resemble computer system and are often characterized by having storage mediums capable of accommodating significant amounts of information.

While the preferred embodiments have been shown and described it will be understood that there is no intent to limit the invention by such disclosure but rather is intended to cover all modifications and alternate constructions falling within the spirit and scope of the invention.

