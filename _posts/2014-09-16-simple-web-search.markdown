---

title: Simple web search
abstract: A system of one or more computing devices is utilized for, among other purposes, creating a template-driven search interface and conducting searches thereon. In an embodiment, the system comprises: a template repository; search templates in the template repository, the search templates comprising at least: field specification data that specify search interface fields for obtaining search input data, and query specification data that specify how to generate structured queries based on the search input data obtained for the one or more of the search interface fields; a search field generator that generates search fields indicated by the field specification data; a template loading module, coupled to the template repository, that identifies available search templates in the template repository; and a search interface generator, coupled to the search field generator and template loading module, that generates different search interfaces depending on which template is selected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262529&OS=09262529&RS=09262529
owner: PALANTIR TECHNOLOGIES, INC.
number: 09262529
owner_city: Palo Alto
owner_country: US
publication_date: 20140916
---
This application claims benefit under 35 U.S.C. 120 as a Continuation of U.S. application Ser. No. 14 077 159 filed Nov. 11 2013 the entire contents of which is hereby incorporated by reference as if fully set forth herein. The applicant s hereby rescind any disclaimer of claim scope in the parent application s or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent application s .

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

A search engine is a system of one or more computing devices or components thereof which searches one or more repositories of data for data structures that match search constraints indicated by search requests. One common type of search engine is a web search engine which conducts searches for data structures such as web pages and other web based documents based on keywords and or other constraints. However there are many other types of search engines and these search engines permit searches against a wide variety of repositories of data.

A search user interface or search interface as abbreviated herein is a point of interaction between an information seeker or user and one or more search engines. Via the search interface a user may submit a search request to a search engine. Via the search interface the user may further receive information concerning one or more data structures or search results that the search engine has identified as matching the search request. One common type of search interface is a web based search interface in which a search engine provides a web browser with a web page comprising controls via which a user may input search request parameters. Once the parameters have been entered the user s web browser typically sends the parameters to a search engine using a request in a Hyper Text Transfer Protocol HTTP or other suitable web based protocol. The search engine then returns the search results to the browser.

Creating search interfaces is a task conventionally left to skilled programmers. For example in the context of web based search interfaces creation of search interfaces conventionally requires familiarity with Hyper Text Markup Language HTML JavaScript and or other web based standards or tools. Search interface creation further requires knowledge of search Application Programming Interfaces APIs which typically vary from search engine to search engine.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

According to an embodiment a system of one or more computing devices is utilized for among other purposes creating a template driven search interface and conducting searches thereon. In an embodiment the one or more computing devices include or are coupled to a template repository search templates stored in the template repository each of the search templates comprising at least field specification data that specify search interface fields for obtaining search input data and query specification data that specify how to generate structured queries based on the search input data obtained for the one or more of the search interface fields a search field generator that is configured to generate search fields indicated by the field specification data a template loading module coupled to the template repository that is configured to identify one or more available search templates in the template repository and a search interface generator coupled to the search field generator and template loading module that is configured to generate a search interface comprising template selection controls that are configured to select available search templates that are identified by the template loading module. The template loading module is configured to receive template selection input via the template selection controls. The search interface generator is configured to update the search interface to include particular search fields generated by the search field generator for a particular search template selected by the template selection input. The search interface is configured to receive particular search input via the particular search fields and to cause generation of a particular structured query based on the particular search input and on particular query specification data in the particular search template.

In an embodiment the search interface generator is configured to generate search interface provisioning instructions which when executed by a client computing device cause the client computing device to implement the search interface. In an embodiment the search interface generator is further configured to send the search interface provisioning instructions to the client computing device. In an embodiment the search interface generator is further configured to generate particular query formulation logic based on the particular query specification data wherein the query formulation logic causes the generation of the particular structured query based on the particular search input and particular query specification data in the particular search template. The search interface generator is further configured to send the search interface provisioning instructions including the particular query formulation logic to the client computing device. In an embodiment the search interface provisioning instructions include instructions for generating interface controls by which the particular search input for the particular search fields is received.

In an embodiment the one or more computing devices comprises a plurality of search adapters that are configured to receive the structured queries to cause searches to be conducted against a plurality of data sources based on the structured queries and to return particular search results based on the searches. The search interface is configured to display the returned search results. In an embodiment at least a first search adapter of the plurality of search adapters is configured to translate the particular structured query into a first query to send the first query to a particular data source receive first search results responsive to the first query and to convert the first search results into a common format of the particular search results. In an embodiment the particular template comprises data source specification data. The search interface comprises data source selection controls generated based on the data source specification data. The search interface is configured to request performing one or more searches based on the particular structured query against one or more particular data sources specified by data source specification input received in association with the data source selection controls.

In an embodiment the search field generator is configured to analyze an ontology to identify properties of a data structure type specified in the field specification data and to generate at least a first search field based at least partly upon a particular property of the identified properties. In an embodiment the search field generator is configured to analyze an ontology to identify properties of a data structure type specified in the field specification data and generate an interface control for defining a search filter that compares an input value to at least a particular property of the data structure type. In an embodiment the query specification data specifies query clauses. The query clauses include at least search filter clauses and complex clauses. The search filter clauses include a first search filter clause that specifies how a first search field is compared to data structures when conducting a search. The complex clauses include a first complex clause that specifies a logical relationship between other query clauses.

According to an embodiment a computer implemented method comprises receiving a selection of a search template via one or more template selection controls that are configured to select from search templates for formulating searches responsive to the selection of the search template presenting search interface fields specified by field specification data within the search template receiving search input via two or more of the search interface fields the search input including first input via a first field and second input via a second field identifying based on query specification data within the search template a relationship between the first input and the second input based on the identified relationship generating a particular query clause that includes the first input the second input and a search directive that indicates the identified relationship between the first input and the second input based on the search input and the query specification data within the search template generating a structured query based on the search input the structured query including the particular query clause sending the structured query to one or more search modules and receiving search results responsive to the structured query.

In an embodiment the method further comprises determining to which of a plurality of search modules to send the structured query based on data source specification data in the search template. In an embodiment the method further comprises determining to which of a plurality of search modules to send the structured query based at least on third input of the search input the third input selecting one or more controls corresponding to the one or more search modules. In an embodiment the search directive is one of an and directive an or directive an adjacent directive or a within directive. In an embodiment the query specification data indicates a required value for a particular search filter included in the structured query. In an embodiment the query specification data specifies that the structured query is to include a search filter that causes the one or more search modules to execute a particular comparison operation between a particular input value for a particular field of the search interface fields and a particular data structure property of data structures that are searched. In an embodiment the field specification data associates a particular search interface field with a particular data structure type. The method further comprises accessing ontological data to identify properties of the particular data structure type and presenting adjacent to the particular search interface field controls for selecting a particular property to which corresponding input for the field is to be compared.

In an embodiment the one or more search modules are a plurality of search modules. Each of the plurality of search modules identifies search steps to perform with respect to one or more data sources based on the structured query. Each of the plurality of search modules generates sets of search results in a common format. The method further comprises aggregating the sets of search results as they are received from the plurality of search modules. In an embodiment the method further comprises a first search module of the one or more search modules translating the structured query into a first query to send to a first search engine and a second search module of the one or more search modules translating the structured query into a second query to send to a second search engine. The search results include first search results from the first search engine and second search results from the second search engine. In an embodiment the method further comprises the first search module converting first search results from the first search engine into a common format and the second search module converting second search results from the second search engine into the common format. The search results include the converted first search results and the converted second search results.

In an embodiment presenting search interface fields comprises sending search interface creation instructions to a search client. Identifying the relationship generating the particular query clause and generating the structured query comprise generating query formulation instructions based on the query specification data and sending the query formulation instructions to the search client.

Embodiments provide computing devices logic processes and or software organized in simplified frameworks that are useful for creating search interfaces and conducting searches. In some embodiments the frameworks provide streamlined syntaxes and grammars for defining one or more elements of a search interface and for formulating search requests based on inputs received in association with these elements. In some embodiments the frameworks simplify communications with search engines by providing an intermediary translation level between the search interfaces and the search engines thereby permitting communication with the search engines via a universal standard. In some embodiments the frameworks include extensible programmatic interfaces by which new search engine or search interface functions can be added to the system in a modular fashion. In many cases the frameworks reduce or eliminate the need for an intricate understating of complex coding languages or APIs when defining search interfaces thereby allowing less technical users and or administrators to design and deploy customized search interfaces.

System comprises a search server . Search server is not necessarily a search engine but rather mediates between search clients and one or more search adapters . In an embodiment search server comprises among other elements a template loading module search field generator search interface generator results aggregator and query relay component . These elements are described in subsequent sections.

In some embodiments search server may be a component of one or more server computing devices that are communicatively coupled to one or more client computers at which the search clients are implemented. For example search server may be a web server or an application thereof that communicates over an intranet and or wide area network with the client devices at which the search clients are deployed. In other embodiments search server and search clients are implemented at the same computing device. In some embodiments search server may further be deployed at the same computing device as some or all of search adapters and or data sources . In other embodiments search server is deployed at a different one or more computing devices than are search adapters and data sources .

Search server is coupled to one or more data repositories including a repository of templates . Search server comprises a template loading module that accesses and parses templates in repository . Repository and templates may be any suitable data structure for storing template data. For example repository may be a file system while templates may be files within the file system. As another example repository may be a database and templates may be data structures within the database. Each template may be configured to describe a different search interface that may be generated by search server . Thus for example an administrator may define new search interfaces by creating new templates . Templates may be formatted in any suitable coding or markup language. In an embodiment the templates are structured according to a schema that has a more simplified and or streamlined syntax than HTML or other common general purpose content presentation languages to permit creation of templates without requiring the creator to learn such languages.

Templates include field specification data. For example the field specification data may include an enumerated list of input fields. The field specification data may specify a control type for each field. For example the field specification data may specify that input for a particular field is to be collected using a specific type of graphical interface control such as a textbox text area checkbox pull down list and so forth. The field specification data may further indicate an order in which the controls are to be presented. The field specification data may further indicate input constraints for some or all of the identified search fields. These constraints may include an expected format or structure such as a string integer date range of numbers and so forth. These constraints may further or alternatively specify exactly which options a user may select from such as in a pull down list. The field specification data may further specify default input values search field identifiers and or descriptive labels.

Templates may comprise query specification data which specify how to generate a structured query based on the fields specified in the field specification data. For example the query specification data may specify logical relationships between certain search field inputs and or clauses based thereon. These logical operations may include conjunctive operations such as and adjacent to or within a certain proximity or disjunctive operations such as or. As another example the query specification data may specify how one or more search fields are to be compared to data structures when conducting a search. This may be done for instance by specifying comparison operations such as equals does not equal greater than lesser than and so forth to be performed between certain search field inputs and the values of certain properties of or metadata for the data structures to be searched. Or the query specification data may indicate that a search field represents keyword s to be searched across all data structure elements. In some embodiments the query specification data may be entirely separate from the field specification data. In other embodiments some or all of the query specification data may be intermingled with the field specification data. Since different templates may have different query specification data different types of search queries may result from two templates even if their field specification data is the same.

Templates may optionally include a data source specification. The data source specification identifies one or more of data sources against which a search may be conducted. In an embodiment certain data sources may be designated as required or optional.

Template loading module is configured to provide search field generator with the field specification data from a selected one of templates . Based at least partly on the field specification data search field generator identifies search fields that should be included within a search interface. The search field generator then generates these search fields. Generating the search fields may comprise for instance generating instructions and or data structures necessary for a search client to implement search field controls for collecting input for the search fields. For example for web based interfaces generating the search fields may comprise generating HTML and or JavaScript for displaying one or more field controls within a search form. Generating the search fields for web based interfaces may further comprise if necessary generating JavaScript functions for validating inputs in accordance to any specified constraints.

In an embodiment the field specification data does not directly specify certain search fields and or input constraints but rather indirectly identifies certain search fields and or input constraints by referencing metadata from an ontology . Ontology which is optional includes metadata that describes types of data structures to which some or all of data sources provide access. Search field generator is configured to utilize this metadata to identify and generate the certain search fields. In an embodiment for example the field specification data may specify that a separate search field be generated for each property of a referenced metadata element in ontology . Search field generator may automatically identify these properties based on ontology and generate search fields accordingly.

In an embodiment the field specification data may indicate that the input provided for a certain search field should be subject to constraints imposed on certain predefined metadata elements. For example the field specification data may reference a specific metadata element to indicate that input for the field be an age gender state or other predefined element of ontology . In an embodiment search field generator may even be configured to access a data source described by the ontology to determine exactly which specific values or data objects are already found in the data source for the referenced metadata element. The input may then be constrained to these specific values or data objects. The control for the certain search field may even prompt the user to select from the specific values via a pull down menu predictive text textbox or other suitable mechanism.

Search interface generator generates search interfaces based on templates and causes search clients to implement the generated search interfaces. Search interface generator is configured to generate a search interface for a selected template responsive to one or more types of user initiated instructions depending on the embodiment. For example in an embodiment search interface generator generates a search interface responsive to a user initiated HTTP or other web based request from a web browser at a client device. In another embodiment search interface generator generates a search interface responsive to a local API call from a search application executing on the same computing device as search server . The user initiated request may specify a search template or a default search template may be selected.

Generating a search interface comprises generating instructions and or data structures that a computing device may execute to implement the search interface. For example generating a search interface may comprise generating HTML JavaScript and or other suitable data structures or code that when interpreted by a web browser causes a client device to provide the search interface. As another example generating a search interface may comprise generating SOAP REST or other suitable code for instructing a client based application to provide the search interface. As another example generating a search interface may comprise generating lower level code that is directly executable by a computing device for implementing the search interface.

In an embodiment different versions of a search interface may be generated for different search clients based on the same template. For example in an embodiment there may be different versions of a search interface targeted to search clients at different web browsers. In an embodiment there may be different versions of a search interface targeted to any combination of one or more web browsers one or more smartphone applications or one or more desktop applications.

When generating a search interface search interface generator receives information included in or derived from a selected template from template loading module . This information includes at least the query specification data and if specified by the template the data source specification. Search interface generator further receives the search fields generated for the selected template from search field generator . Based on the query specification data and the data source specification search interface generator generates query formulator instructions that instruct search clients in constructing and submitting a structured query based on any input received via the search fields. For example the query formulator instructions may be JavaScript code or other suitable instructions for executing a query formulator as described in other sections.

Search interface generator may further generate other search interface elements such as a template selector or a presentation of search results as discussed in other sections. Once all of the search interface elements are generated search interface generator sends the search interface to a requesting application and or causes execution of the instructions for providing the search interface. The generated search interface may be for example an entire web page or screen window or the generated interface may be designated portions thereof such as a search form subsection within a web page.

System may comprise any number of search clients . A search client implements the search interfaces generated by search interface generator based on instructions and or data structures received from search interface generator . Search client may comprise for instance a generic web browser a browser plug in or module a dedicated search application or any other suitable tool for executing or interpreting the instructions and or data structures received from search interface generator . Different types of search clients may exist for different platforms or working environments.

Search client comprises a user search interface presentation component . In accordance with the instructions and or data structures received from search interface generator presentation component is configured to provide or cause the provision of a presentation of one or more textual and or graphical elements at one or more output components such as a computer monitor or touchscreen device. The presented textual or graphical elements include textual and or graphical controls such as text boxes check boxes buttons and or other graphical user interface components. Among other controls the textual and graphical controls include template selection controls and search field controls .

Template selection controls visually guide the user in providing inputs for selecting one of templates . For example the template selection controls may be a pull down list of each template in repository . Or the template selection controls may be a pull down list of each template in repository to which a user has access as indicated by user permission data associated with templates and or data sources . Input selecting a specific template triggers an instruction to the search interface generator to generate a new search interface based on the selected template which results in presentation component displaying a different set of textual and or graphical elements.

Search field controls visually guide the user in providing inputs for interfacing with the one or more search engines. The search field controls may include a different control for some or all of the search fields identified by search field generator . Certain fields may be hidden from the user. These hidden fields specify search filters that should always be applied when performing a search under a corresponding search template. For example an interface designer may wish for a certain search interface to be restricted to only certain types of data structures within a data source or to only data structures that have a certain property value.

The presented textual or graphical elements may further include a presentation of search results as described in other sections.

Search client further comprises an input processor . Input processor is configured to receive inputs for fields associated with the textual and or graphical controls presented by the presentation component . The inputs may be for example signals from one or more user operated input devices interpretations of these signals based on knowledge of how the textual or graphical controls are arranged and or derivations thereof. For example input processor may be configured to detect when a new template has been selected using template selection controls and relay corresponding instructions to template loading module .

As another example input processor may receive inputs that specify keywords filters or other search parameters in association with search field controls . Input processor is further configured to detect input instructing search client to submit a search. This input may be provided in association with a submit control of search field controls . Or certain interactions with designated search fields such as pressing an Enter key while a keyword box is selected may be interpreted as an instruction to submit a search. In an embodiment a new search is requested any time new input is provided via search field controls .

Input processor provides the values that were input for each of search fields to a query formulator that corresponds to the currently selected template . Query formulator is a set of one or more processes that generate a structured query based on the inputted values in accordance with the query formulator instructions received from search interface generator . Query formulator may comprise for instance HTML form processing logic JavaScript functions and or other suitable processing logic.

The structured query may take a variety of forms depending on the embodiment. For example in an embodiment the structured query may be a series of name value pairs embedded within an HTTP query string or a JSON object. In an embodiment the structured query may comprise groups of input values associated with search directives. The search directives specify relationships between the input values in a group.

In another embodiment structured query may be a hierarchical data structure comprised of clauses in which the hierarchical relationships of the clauses reflect logical relationships between the clauses. The clauses include search filter clauses and complex clauses. Search filter clauses are generally based upon data input in association with search field controls and or data associated with hidden search fields. While query formulator will often only produce one search filter clause per search field the query formulation instructions may in some cases cause query formulator to create two or more search filter clauses for a single search field. Search filter clauses may specify without limitation keyword input for a particular search field a name value pair resulting from input for a particular search field a comparison operation between the input data of a particular search field and one or more data structures designated by the query formulation instructions and so forth. Complex clauses comprise a search directive that specifies a conjunctive disjunctive or other logical relationship between two or more search filter clauses and or other complex clauses.

Search client is configured to send the structured query once constructed by query formulator to a query relay component of search server . The query relay component is configured to send the structured query in turn to one or more search adapters . In an embodiment the structured query is sent to at least some of the search adapters in parallel thus potentially resulting in returning search results from two or more search adapters at the same time. In an embodiment the structured query is sent serially to some or all of the search adapters in that the query relay component must wait for an indication that a first search adapter has concluded a search before sending the structured query to a second search adapter .

In an embodiment the one or more search adapters to which query relay component sends structured query is the set of all available search adapters . In other embodiments the one or more search adapters to which query relay component sends structured query are selected by data source specification data in a template and or selected by a user via controls in search client . One or more search adapters thus selected may be identified to query relay component in for example the structured query such as in a search filter clause or in separate data source specification data. Or query relay component may determine the selected one or more search adapters based on metadata associated with the structured query such as interface state data or session data. The selected one or more search adapters may be designated directly or by reference to a particular data source depending on the embodiment.

The one or more search adapters may further be implicit from one or more search parameters described in structured query . For example the query relay component may be configured to access ontology and determine that a certain data structure type specified in the search parameters is only available in a certain data source to which only a particular search adapter has access. Thus the structured query is only sent to the particular search adapter .

In an embodiment each of the search adapters is configured to understand a common query structure. The same single structured query may thus be sent to each search adapter thus avoiding the need for any given search interface to have multiple query formulators in the search client or search server .

System further comprises one or more search adapters . Each search adapter searches one or more data sources or causes the one or more data sources to be searched. In some embodiments search adapters function as substitutes for search engines directly conducting searches specified by structured query on data sources such as databases and or file repositories. Each search adapter directly generates a set of search results. This set of search results identifies data structures in the one or more data sources to which the search adapter provides access that match the parameters specified by structured query . The search adapter provides this set of search results to results aggregator of search server .

In other embodiments search adapters function as query translators. In these embodiments data sources are themselves search engines each exposing a potentially different search API. Thus search adapters reconstruct the structured query as a separate query for each different data source to which the search adapter provides access. Each separate query conforms to a potentially different syntax and grammar corresponding to the search API of the data source to which the query is targeted. Each search adapter receives one or more sets of search results from the one or more data sources to which the search adapter provides access. The search adapter converts these sets of search results into a universal search result format and then provides a converted set of search results to results aggregator of search server .

A search adapter may be configured to pre process a query and or post process search results using one or more rules. For example a search adapter may be configured to add additional filters or constraints to a structured query and or to a translated query. As another example search adapter may be configured to normalize or aggregate search results or properties thereof. As another example search adapter may be configured to remove duplicate search results or apply its own ranking and or sorting logic to the search results. In an embodiment different search adapters may provide access to the same data source but differ with respect to how the search adapters pre process a query or post process search results.

In an embodiment a search adapter iteratively identifies sets of search results. For example the search adapter may initially return a first set of results that were identified most quickly and then return additional sets of results as they are identified.

Results aggregator receives sets of search results from search adapters . Search results may comprise actual matching data structures from data sources and or metadata describing matching data structures. In an embodiment search adapters convert or generate each search result in each set using a common search result format. For example each search result may be a JSON object or other data structure that conforms to a common schema. As another example each search result may be a data object identifier. However the actual data structures represented by the search results may conform to one or many different formats depending on the search parameters.

Results aggregator may combine and or arrange the search results from the one or more sets using any of a variety of techniques. In an embodiment the search results are concatenated together into a single list as they are received. In another embodiment the search results are sorted according to any of a variety of techniques such as in numerical or alphabetical order based on a common property of the data structures that the results represent or based on relevance metadata provided by search adapters . Results aggregator may further post process the search results by for example removing duplicates normalizing metadata within the search results adding additional metadata and so forth.

In the depicted embodiment results aggregator provides the aggregated search results to the search interface generator . Search interface generator sends instructions and or data structures to search client that cause the search client to display presentations of the search results. The presentations of the search result may be arranged in any fashion and may include any suitable information representative of the data structures from data sources to which the search results correspond. For example the presentations of the search results may include without limitation one or more of titles names thumbnails maps addresses descriptions or links by which actual contents of the data structure may be viewed and or edited. In an embodiment the information presented in presentations of the search results is limited to information that was actually returned in the search results. In other embodiments search interface generator may retrieve additional information concerning certain data structures represented by certain search results directly from data sources . Search interface generator may use any of a variety of logic to determine how best to present a given search result. For example certain types of data structures may have predefined view templates that indicate how those structures are to be presented within a search interface.

In an embodiment the search results are presented as a scrollable list or tile grid. In an embodiment one or more alternate views of the search results may be available such as map views node based graphs charts of aggregated values from the search results or other suitable data visualizations. Search client may include controls for switching between views. Search interface generator may also or instead be configured to identify suitable data visualizations based on search result view data in templates and or an analysis of the data structures represented by the search results.

Depending on the embodiment search interface generator may wait to send instructions to update a search interface with new search results until after search results aggregator signals that all search results have been received. Or search interface generator may continually send instructions to update the search interface as results aggregator continues to receive search results from the search adapters . In an embodiment search interface generator need not instruct search client to update the entire interface but rather instructs the search client to update a search results section.

In an embodiment system optionally comprises a configuration component . Configuration component may be as simple as a set of one or more configuration files or the configuration component may be an actual software application. Configuration component allows users and or administrators to register the locations of one or more resources for example administrators may register locations of templates template repository search adapters and or data sources . Search server is configured to access configuration component when looking for these resources. Thus administrators may quickly add new functions to search server by registering new resources with configuration component .

System as shown in illustrates only one of many possible arrangements of components configured to perform the functions described herein. Other arrangements may include fewer or different components and the division of work between the components may vary depending on the arrangement.

For example in an embodiment results aggregator or search adapters may provide search results directly to the search client . In such embodiments search client may include or have received instructions that would cause search client to aggregate search results and or generate presentations of the search results using similar techniques to those described with respect to the results aggregator and search interface generator . The instructions may be general or specific to a certain search template. In an embodiment there is no aggregation of results and the results are instead displayed separately by data source . Such embodiments need not necessarily require search adapters to create search results in a common format. In an embodiment results aggregator may be responsible for converting search results to a common format.

In an embodiment query formulator may be deployed at the search server as opposed to the search client . The search client sends the input values directly to the search server . The search server determines which query formulator to execute based on session data indicating which search template is used by the search client from which the input values are received. In an embodiment there is no query relay and search client is configured to send structure query directly to each selected search adapter .

In an embodiment each of the processes described in connection with the functional blocks of may be implemented using one or more computer programs other software elements and or digital logic in any of a general purpose computer or a special purpose computer while performing data retrieval transformation and storage operations that involve interacting with and transforming the physical state of memory of the computer. In one embodiment flow is performed by a computer system comprising among other elements a search client and a search server such as search client and search server as described in the previous section. For purposes of illustrating a clear example the search server and search client may be described as separate and distinct components implemented by different computing devices in other embodiments the search server and search client may be components of a same application executing at the same computing device s .

Block comprises identifying a plurality of available search templates for example the search templates that have been described in the preceding sections. The identifying may comprise one or more of accessing configuration data that specifies template locations scanning for template files or other template structures parsing template structures to locate template identifiers checking user permission data with respect to the templates and or the data sources accessed by the templates and so forth. In an embodiment block may further comprise presenting controls to a user for selecting one of these identified search templates. However performing such a step is not necessary in other embodiments.

Block comprises receiving a selection of a particular search template from the plurality of search templates. The selection may be received via interface controls such as template selection controls or the selection may be received programmatically via application logic. Receiving the selection may comprise one or more of a search client directly receiving user input a search server receiving an HTTP or other suitable web request a search application receiving an API call or a search client server receiving any other suitable input.

Block comprises responsive to the selection of the particular search template presenting search interface fields specified by field specification data within the selected search template such as described in other sections. Block may be performed for instance by creating a web page comprising a search form that includes field controls corresponding to the search interface fields and then sending the web page to a web browser. As another example block may be performed by sending the field specification data to a standalone smartphone or desktop application that is configured to create graphical interface controls based thereon.

Block comprises receiving search input for the search interface fields. The search input may comprise user entered text and or other user selected values along with an indication of the search field s to which the input corresponds. Any suitable user input technique may be utilized in receiving the search input. Block may comprise for instance a search client receiving input directly from a keyboard mouse and or other suitable input device and interpreting the intent of that input based on the depicted search field controls. Block may further comprise in some embodiments a search server receiving a description of the search input from the search client.

Block comprises generating one or more query clauses based on the search input and further based on query specification data within the selected search template as described in other sections. Block may be performed for instance by a search client or a search server directly accessing the query specification data and using the query specification data to determine how to generate the query clauses. In an embodiment block is performed at a search client by a query formulation component that was generated by the search server based on the query specification data in the selected search template.

The query specification data may specify for instance to generate keyword clause s based on search input corresponding to one or more keyword fields. The query specification data may further specify for instance to create comparison clause s based on search input for one or more fields associated with specific data structure properties. In an embodiment the query specification data may specify to generate a clause that defines a relationship between a first input of the search input and a second input of the search input. The clause includes a search directive indicating the relationship. For example the search directive may indicate that a search result must satisfy all of at least one of or only one of the search parameters corresponding to the first input and the second input. Or the search directive may indicate that a search result must satisfy the search parameters within a certain context such as in adjacent or nearby terms within a same data structure property.

Block may further comprise creating complex query clauses based on other query clauses as described in other sections.

Block comprises generating a structured query based on the generated query clauses and the query specification data. The structured query may be any data structure capable of describing all of the clauses such as a JSON object.

Block comprises sending the structured query to one or more search modules such as the search adapters described in other sections and or search engines. The search modules may be co located with the search client and or search server or may be executed by one or more different computing devices. Block may comprise a search client or search server sending the structured query directly to the one or more search modules. In an embodiment block may further comprise a search client sending the structured query to a search server so that the search server may send the structured query to the one or more search modules. In an embodiment the same structured query is sent to a plurality of search modules. Block may optionally comprise identifying the one or more search modules based on the selected template and or based on data source selection input such as described in other sections.

Block comprises based on the structured query the one or more search modules identifying search steps to take with respect to one or more data sources. For a first type of search module block may comprise generating SQL statements query execution plans or other such steps that implement a process of directly searching a data repository for data structures that match the search parameters described in the structured query. For a second type of search module whose data source s are search engines as opposed to other data repositories block comprises translating the structured query into a data source specific query string or other message. The exact steps taken for a particular structured query may vary including for search modules of the same type depending on the data source to which a search module provides access. Both the first type of search module and the second type of search module may co exist within certain embodiments.

Block comprises the one or more search modules causing searches of the one or more data sources using the search steps. For the first type of search module block comprises actually executing the SQL statements query execution plan or other such steps. For the second type of search module block comprises sending the translated query to a search engine.

Block comprises the one or more search modules identifying or receiving search results for the searches. The search results are or describe data structures within the searched data sources that match the search parameters defined by the clauses of the structured query. The first type of search module identifies the search results directly while the second type of search module receives the search results from another search engine.

Block comprises the one or more search modules structuring the search results using a common format expected by the search server and or search client. Block may be optional for some or all search modules in that the search results received or identified by certain search modules may already be in the common format. In an embodiment a search interface is configured to understand all possible search results that could be created by the one or more search modules and thus block is not needed even if the search results for different search modules are structured differently. Block may also optionally comprise post processing of search results.

Block comprises the search server and or search client receiving the search results from the one or more search modules. For example block may comprise the one or more search modules sending sets of search result data objects to the search server and or the search client.

Block comprises presenting the search results at the search client. For example block may comprise a search server generating HTML JavaScript or other suitable instructions for presenting the search results. The search server sends these instructions to a web browser at the client which then presents the search results based thereon. As another example block may comprise the search client itself generating views of the search results returned by the one or more search adapters. For example the search client may be an application that includes search result presentation logic. In an embodiment block comprises aggregating the search results together. However in other embodiments search results may be presented in separate sections. In an embodiment block is performed at least partially concurrent to blocks in that searches may continue to run in the background as initial search results are published.

Search interface comprises a search form including a template selector search field area and data source selection area . Template selector names the current search template and allows users to select a new template from a list of templates by selecting the pull down menu control . Selecting a new template may result in changes to search field area and data source selection area depending on the search fields and or data sources specified by the new template.

Search field area comprises search field controls each of which corresponds to a different search field identified by the currently selected template. Each of controls includes a label to provide information to a user concerning the search field to which the respective control corresponds. A user may specify input for a search field by entering input via a corresponding search field control . Controls are text boxes. In some embodiments typing into these text boxes may bring up a list of suggestions derived from previous input associated with the template previous input associated with similar search fields in other templates and or existing data within the data structure properties with which the corresponding property is to be compared. A search server or search client may be configured to automatically track such data and generate such suggestions without the suggestions having been specified in the selected template.

Control may comprise a textbox that features a comparison operator selector . Comparison operator selector is a pull down menu that allows a user to select between comparison operators in order to specify how the inputted value of control is to be compared to the values of the data structure property to which the corresponding search field is to be compared. Control is a multi value selector. Users may select multiple values by typing the values directly and or using a pull down menu populated with a list of values. Each selected value will be depicted with a selected value indicator .

Data source selection area comprises data source filter controls . Each data source filter control corresponds to a different data source specified by the selected template as indicated by the labels in filter controls . A user may tap or click on a control to toggle between selecting the corresponding data source and unselecting the corresponding data source. In an embodiment a search is only submitted for selected data sources. In another embodiment a search is submitted for all data sources but only search results for selected data sources are shown.

Each control includes a status indicator that indicates by color or other suitable indication whether the corresponding control is currently selected. If a search has already been submitted status indicators may furthermore provide information about the data sources with respect to the search. For example status indicators may turn a different color or show a special graphical indicator while search results are being retrieved from a data source. Also as depicted status indicators may provide an indication of a number of search results returned from a corresponding data source and or an indication of the quality thereof.

Search form further comprises a clear control . User selection of clear control resets all controls and to their default input values. Search form further comprises a submit control . User selection of submit control indicates to search interface that the user has finished specifying search parameters and wishes to retrieve search results. Both controls are optional depending on the environment. For example in some embodiments selection of a data source selection control indicates to the search interface that the search should be sent to the corresponding data source. In other embodiments a search is sent any time the user provides input into search form . Thus for instance the user may perceive search interface as returning search results while the user is still typing in a text box .

Search interface further comprises a search result area . Search result area is a scrollable list of search results including search results and . Search result area is initially blank but then filled with views of search results after a search has been performed. Each search result is presented as a rectangular area within the scrollable list and may include summary information about the data structure corresponding to the search result such as a thumbnail name description and or other selected information. The exact information presented for each search result may vary depending on the type and or contents of the data structure to which a search result corresponds.

In some embodiments sets of search results are retrieved iteratively from each data source. For example a search adapter may be configured to return a first set of high quality or easy to locate search results before returning other search results. If necessary the search adapter may continue to search for additional results even after returning the first set. In an embodiment search result area is updated to include these additional results as found. In another embodiment the search interface must explicitly request that the search adapter continue searching and or return the additional results. Thus as depicted in search result area further includes a control for retrieving additional results. The process may be repeated for any number of iterations.

Search interface further includes an optional detail view area that displays more information about a selected search result . Depending on the embodiment the detail view area may include additional information from the data structure corresponding to search result including information not initially returned with the search results. For example clicking on may cause a search interface generator to perform one or more queries with respect to the corresponding data structure in order to populate a detail view template for the data structure.

In some embodiments search results and or detail view area may further include controls for performing actions with respect to a corresponding data structure such as viewing or editing the complete data structure printing the detail view generating a data visualization based on the corresponding data structure and so forth. Also multiple search results may be selected from search result area and one or more controls may allow for one or more actions with respect to these multiple search results. Search interface may further include additional views derived from the search results such as maps or graphs.

According to an embodiment a template is a data object such as a JSON object comprising a URI field specifying a private identifier for the template a name field specifying the name of the template as seen by a user an optional description field comprising additional information about the template multiple field objects an optional query object and an optional data source object. A field object in turn comprises a URI specifying a private identifier for the field an input type which specifies the type of input control used to collect input for the field object a name corresponding to the name displayed in the label for the input control an optional default value an optional data type and or an optional comparison operator. A data source object comprises a list of data sources and or search adapters targeted by the template.

A query object comprises one or more clause objects. Example clause object types include without limitation an AND clause for specifying a conjunction between two or more other clauses an OR clause for specifying a disjunction between two or more other clauses an ObjectType clause for specifying a type of object to filter the search upon a Keyword clause for specifying one or more keywords to filter the search upon or a Property clause for specifying comparison operations between an input value and a particular data structure property. Each of the ObjectType Keyword and Property clauses includes a data field that specifies either the URI of a field object from which to retrieve input or hard coded data for hidden search parameters.

TABLE 1 illustrates an example template for generating the search interface of in accordance with the above described embodiment

The above template specification is given by way of example. In other embodiments templates may be structured in any number of suitable manners.

According to an embodiment TABLE 2 illustrates an example structured query generated based on the above example template 

The above structured query definition is given by way of example. In other embodiments queries may be structured in any number of suitable manners.

The example search result is used in an embodiment where generating a presentation of the search result comprises looking up additional information about the data structure referenced by the search result. In other embodiments search results may be structured in any number of suitable manners. For example a search result may include all information necessary to generate a presentation for the search result such as a title description thumbnail link and so forth.

In embodiments new templates and or search adapters may be made available to a search server and search client via a registration process at the search server. For example each template and or search adapter may be contained in a separate file. In an embodiment the template and or search adapter may be registered by placing the file within a certain directory on the search server. In other embodiments the template and or search adapter may be registered by adding the location of the file to a path statement in a configuration file that specifies templates. The search server may access this configuration file or directory to identify which templates and or search adapters are available.

In an embodiment each search adapter implements the same API. For example each search adapter may be based on a coded object that inherits features and functions from a common coded object. In an embodiment each search adapter implements a common set of API function calls including some or all of a function call for retrieving identifier s of data source s to which the search adapters provide access a function call for receiving a structured query a function call for converting the structured query API into a string based query that conforms with the data source s a function for initiating a search a function for returning a complete set of search results or a function for returning an iterative set of search results.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis for example x and a second axis for example y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

One or more forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing one or more types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the one or more networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

