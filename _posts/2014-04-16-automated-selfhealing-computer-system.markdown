---

title: Automated self-healing computer system
abstract: A server. The server comprises a processor, a memory, and an application that receives an alert message corresponding to an error and a performance metric value in a messaging server, wherein the messaging server is one of a plurality of servers in a rotation that supports a front-end application in a system, identifies a course of action for repair, determines that the number of active servers in the rotation is above a predefined threshold number of active servers, removes the messaging server from the rotation, notifies a system administrator of the removal, the identified error, and the performance metric value, repairs the messaging server by implementing the identified course of action, validates the messaging server by running application programming interface (API) calls, places the repaired messaging server in the rotation, and notifies the system administrator of repair details and API call results.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367379&OS=09367379&RS=09367379
owner: Sprint Communications Company L.P.
number: 09367379
owner_city: Overland Park
owner_country: US
publication_date: 20140416
---
In a large scale computing system there may be hundreds of servers that perform ongoing business operations in an enterprise. These servers may receive requests from front end applications send transaction requests to back end servers or vice versa for processing by other servers and or computers. Transactions may be independent processing tasks assignments or functions.

In some circumstances these servers may undergo a variety of problems such as power outages memory leaks software crashes and other issues due to changes in load stress or failure. These problems may affect services provided at front end applications and may ultimately disrupt operations in the enterprise.

In an embodiment a server for an automated self healing computer system is disclosed. The system comprises a processor a memory and a self healing application stored in the memory that when executed by the processor is configured to receive an alert message corresponding to an at risk messaging server in a system wherein the at risk messaging server is one of a plurality of messaging servers in a server rotation that supports a front end application and wherein the alert message identifies an error and a corresponding performance metric value that meets or exceeds a predefined value for operation in the messaging server identify a course of action for repairing the messaging server based on the error and performance metric value determine if the number of active messaging servers in the server rotation is above a predefined threshold number wherein the predefined threshold number represents a minimum number of active messaging servers needed to support the one or more front end applications upon determining that the number of active messaging servers in the server rotation is above the predefined threshold number remove the messaging server from the server rotation send a notification message to a system administrator wherein the notification message reports the removal of the messaging server and identifies the error and the performance metric value repair the messaging server by implementing the identified course of action validate the repaired messaging server by running application programming interface API calls wherein the results from the API calls are obtained upon completion of validation place the repaired messaging server in the server rotation and send a second notification message to the system administrator wherein the second notification further comprises details of the repair and results from the API calls.

In an embodiment a method performed by a computer system for automated self healing is disclosed. The method comprises receiving at an application an alert message corresponding to an at risk messaging server in a computer system wherein the at risk messaging server is one of a plurality of messaging servers in a server rotation that supports a front end application in the system and wherein the alert message identifies an error and a corresponding performance metric value that meets or exceeds a predefined value for operation in the messaging server identifying a course of action for repairing the messaging server based on the error and performance metric value determining by the application if the number of active messaging servers in the server rotation is above a predefined threshold wherein the predefined threshold represents a minimum number of active messaging servers to support the one or more front end applications upon determining that the number of active messaging servers in the server rotation is above the predefined threshold removing the messaging server from the server rotation in the system repairing the messaging server by implementing the identified course of action validating the repaired messaging server by running application programming interface API calls at the one or more front end applications wherein the results from the API calls are obtained upon completion of validation placing the repaired messaging server in the server rotation in the system and sending a notification message to the system administrator wherein the notification further comprises details of the repair and results from the API calls.

In an embodiment a method of monitoring and implementing self healing in a system is disclosed. The method comprises monitoring transactions and performance metrics by an application for each of a plurality of messaging servers in a server rotation wherein the plurality of messaging servers are coupled to a front end application in a computer system determining if a value of any of the performance metrics for each messaging server meets or exceeds a predefined value wherein the predefined value indicates a value for messaging server operation upon determining that the value in a performance metric meets or exceeds the predefined value generating at the application an alert message associated with a messaging server that is at risk of failure in the system wherein the alert message identifies the performance metric value and an error in the at risk messaging server identifying a course of action for repairing the messaging server based on the performance metric value and the error determining if the number of active messaging servers in the server rotation is above a predefined threshold wherein the predefined threshold represents a minimum number of active messaging servers needed to support the one or more front end applications upon determining that the number of active messaging servers in the server rotation is above the predefined threshold removing the messaging server from the server rotation in the system notifying a system administrator of the removal of the messaging server wherein the notification comprises the performance metric value and error responsible for the removal repairing the messaging server by implementing the identified course of action validating the repaired messaging server by running application programming interface API calls at the one or more front end applications wherein the results from the API calls are obtained upon completion of validation and placing the repaired messaging server in the server rotation in the system.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

It may be difficult for technicians to manage performance and to conduct maintenance in a large scale computer system and or information technology system for example a system that may comprise hundreds of servers. Servers that experience problems may be maintained and restored to proper operation service technicians or information technology IT staff members who identify problems and come up with adequate solutions to return machines to proper operation. Service technicians or IT staff members may perform administrative tasks and run utilities to diagnose a problem or an issue experienced by a server. However due to the size of the system maintaining and managing performance for hundreds of servers without degradation of service to end users may be challenging. Therefore it may be beneficial for an enterprise to use a system to monitor and remedy issues in different applications or servers involved in the large scale system. Disclosed herein are systems apparatuses and methods for implementing an automated self healing computer system.

The present disclosure teaches a self healing application for resolving issues and problems experienced by messaging servers in a computer system. The computer system may comprise a plurality of messaging servers in a messaging layer that allows communication between a plurality of front end application servers and a plurality of back end application servers. The plurality of messaging servers may employ message queues to receive and deliver messages to intended recipients within the computer system.

There may be a server rotation of the plurality of messaging servers in the system wherein the messaging servers in a rotation may support one front end application in the computer system. Each front end application may be associated with a different rotation of messaging servers and or a different set of messaging servers. It is understood that a single front end application may execute on a plurality of front end application servers for example when the processing load for a front end application is heavy and better supported by executing on two or more front end application servers. The server rotation may be beneficial for load balancing in order to handle the load of messages received from and sent to various components in the computer system. The server rotation may be useful in isolating message handling for one front end application from message handling for a different front end application such that if the message handling for one front end application is experiencing a problem the message handling for the other front end applications may be performed normally. A server rotation may comprise two servers five servers ten servers or some other number of servers.

In an embodiment a messaging server in the system may fail due to changes in load stress failure or other issues. These causes may correspond to errors in the messaging server wherein specific errors may be identified by monitoring transactions and performance metric values within the plurality of messaging servers. Examples of errors that may occur in the messaging servers may be power outages memory leaks failed file validations and other issues. In an embodiment a memory leak may not be directly observed or monitored but instead may be inferred from progressively reducing spare memory capacity or progressively reducing spare heap memory capacity. Transactions may refer to independent processing tasks assignments or functions whereas performance metrics may comprise standards of measurement for operation in the messaging servers. Some examples of performance metrics may be response times memory capacity or throughput.

According to the disclosure automated self healing may be implemented by executing the self healing application wherein the self healing application may initially receive an alert message associated with an error in an at risk messaging server. The term at risk as used herein may refer to any messaging server with a corresponding performance metric value that has met or exceeded a predefined value for operation in the messaging server. There may be a plurality of performance metrics comprising criteria for server operation within the messaging servers wherein predefined values for the performance metrics and corresponding alerts may be set by a system administrator. In an embodiment performance metrics may comprise response times memory utilization CPU utilization number of network connections number of active threads and other performance metrics associated with server operation. The performance metric values may be tracked by a monitoring application in the computer system. The monitoring application and the self healing application may both be abstracted as executing within the messaging layer of the system wherein both of these applications may be employed to monitor and remedy issues respectively within the plurality of messaging servers.

The monitoring application may track performance metrics in the plurality of messaging servers and send one or more alert messages to the self healing application upon detecting an error in an at risk messaging server. As used herein the term error may be used to refer to a failure of processing or a failure to meet a promised level of message handling performance. Additionally the term error may be used to refer to a condition of a performance metric exceeding a predefined threshold value e.g. CPU utilization exceeding a predefined threshold value or used memory exceeding a predefined threshold value or a condition of a performance metric falling below a predefined threshold value e.g. CPU idle time falling below a predefined threshold value or remaining memory capacity falling below a predefined threshold value . It is understood that such an error condition can exist for example CPU utilization above 80 even when the subject messaging server is performing proper messaging handling.

After receiving an alert message regarding the at risk messaging server the self healing application may identify a course of action for repairing the messaging server based on the identified error and performance metric value. The course of action may refer to an action or a set of actions for repair that may have been predefined in the self healing application code or configured by the system administrator. Each error may be associated with a specific course of action whereas the course of action may be the same for multiple errors in the messaging server. In an embodiment if the identified error is a memory leak then the course of action may comprise rebooting the messaging server and or restarting a particular service on the messaging server in order to free up memory resources.

After the course of action has been identified the self healing application may determine if the number of active messaging servers in the server rotation is above a predefined threshold. As used herein active messaging servers may refer to messaging servers that are currently in service or being used in the server rotation. The number of active messaging servers in the server rotation may comprise the at risk messaging server. The predefined threshold may comprise a minimum number of active messaging servers needed to support a front end application. The minimum number of active messaging servers may represent the number of messaging servers needed to handle the load of messages received and sent to support the subject front end application.

If the number of active messaging servers in the server rotation is determined to be equal to or below the predefined threshold then removing the at risk messaging server from service may degrade performance in the system particularly at the front end. That is there may not be enough active messaging servers in the server rotation to handle the messaging load without degraded service to the front end application if the at risk messaging server is removed. Thus the self healing application may keep the at risk messaging server in the server rotation and send a message to the system administrator to report the identified error and performance metric value. The message may also notify the system administrator that the at risk messaging server is still in the server rotation since the number of active messaging servers in the server rotation is equal to or below the predefined threshold. However at a later time the system administrator or self healing application may determine that there are enough active messaging servers in the server rotation to allow for the removal and subsequent repair of the at risk messaging server. Alternatively if the number of active messaging servers in the server rotation is determined to be above the predefined threshold then the self healing application may remove the messaging server from the server rotation in the system. The self healing application may notify the system administrator of the identified error performance metric value and the subsequent removal of the messaging server.

In an embodiment when a messaging server is determined to be at risk but not qualified for removing from its server rotation due to a low number of active servers in the same server rotation the self healing application may begin polling the other servers in the same server rotation to determine as soon as possible when another server comes into service. When the self healing application determines that another server has rejoined the server rotation it may then take the at risk server out of the rotation to take corrective action. In an embodiment the self healing application may query the monitoring application for updated performance metrics on the at risk messaging server or may command the monitoring application to redetermine the performance metrics of the at risk messaging server before taking the server out of the rotation. If the performance metrics of the messaging server that had previously been determined to be at risk are improved sufficiently the self healing application may forgo the process of taking that messaging server out of the rotation. In an embodiment the self healing application may wait a predetermined time after the additional server comes into service before taking the at risk server out of the rotation for example to allow enough time for the monitoring application to collect one or more cycles of performance metrics from the additional server to confirm that it is likely to stay up and not flag under the increased load if the at risk server goes off line. In this situation the evaluation of the additional server the messaging server that had been out of the rotation for a repair and returned to the rotation recently may be based on a second predefined threshold that is more aggressive than normal based on the assumption that taking the at risk messaging server out of rotation would cause the recently recovered messaging server to decrease in performance.

Next the self healing application may initiate repair of the messaging server by implementing the identified course of action. In an embodiment the repair may comprise a reboot or a restart of the messaging server. Once the repair is complete the repaired messaging server may be validated by running application programming interface API calls. In an embodiment API calls may represent specific operations that front end applications may invoke to perform certain tasks such as querying data obtaining metadata or running utilities to perform administration tasks. The API calls may be executed at the one or more front end applications that are supported by the repaired messaging server. The results from the API calls may then be received by the self healing application at the messaging layer. After validation is complete the self healing application may place the repaired messaging server back in the server rotation in the messaging system and notify the system administrator. The notification may comprise details of the repair such as the course of action that was implemented as well as the results from the API calls.

The disclosed automated self healing system may be advantageous in that the system may accelerate repairs in messaging servers and mitigate risks to front end applications or systems. By automating self healing the disclosed system may allow at risk messaging servers to be taken out of server rotation and repaired after checking the number of active messaging servers in the rotation. It may be beneficial to check the number of active messaging servers in the rotation prior to removing at risk messaging servers from service in order to prevent performance degradation at the front end. After completing repair the resulting repaired messaging servers may then be validated by running front end API call wherein the repaired servers may be placed back in the server rotation in a timely manner. Conventional methods for repairing servers may entail a lag time which depends on how long it takes for a service technician to get to the repair. The service technician may be responsible for hundreds of servers in the system thus this manual method may take a longer period of time e.g. hours or days than the time needed to implement a repair with the self healing application. In an embodiment a failed or at risk messaging server may be taken out of the server rotation and repaired by the disclosed system in a time that is on the order of seconds or a few minutes e.g. 30 seconds 45 seconds 1 minute etc. . For perspective in some cases manual maintenance of the same issue may consume about 26 minutes.

Additionally the disclosed system may minimize risks at front end applications that may be affected by one or more failed messaging servers. There may be a plurality of end users that interact directly with the front end applications and request services. These requests may be forwarded to the plurality of back end servers by the plurality of messaging servers wherein the plurality of messaging servers deliver and receive messages to and from the front end applications and back end servers. If one or more messaging servers fail then the corresponding front end applications may also be impacted wherein services at the front end may not be available for the associated end users. Therefore by monitoring performance metric values checking server rotations and initiating and validating repairs in at risk messaging servers the present disclosure may provide a system that may be able to manage server performance and availability in the messaging layer. It is contemplated that the disclosed self healing computer system may in many cases detect correct verify or validate the correction and return to service a messaging server before any problem is observed by users of the front end applications.

The plurality of front end application servers and or front end applications may comprise software applications that receive user input process requests and provide services to a plurality of end users. The plurality of end users may comprise customers associated with an enterprise wherein the end users may interact directly with the plurality of front end application servers and or with the front end applications. The end users may also be employees or an enterprise such as customer care representatives or clerks at a retail store associated with a mobile communication service provider. In an embodiment the plurality of front end application servers and or front end applications may be accessed through a graphical user interface or a web browser. The plurality of end users may request services by using the front end application servers and or front end applications wherein the requests may be forwarded to the plurality of back end servers . Examples of requested services may be related to support services billing services or other customer care related services.

For example a customer care representative may input a query to a front end server about a payment history of a subscriber of a mobile communication service provider. The front end server may generate an account query transaction and send the transaction as a message to the messaging server . The messaging server may place the transaction message on a message queue associated with the back end server . The back end server may retrieve the transaction message from the message queue process the transaction by retrieving the requested information about the subscriber account from a back end account history data store and return a reply message to the messaging server . The messaging server may place the reply message on a message queue associated with the front end server . The front end server may retrieve the reply message from the message queue and present information about the subscriber account in a user interface of the customer care representative.

The plurality of back end servers may comprise computer systems that are coupled to one or more front end application servers wherein each back end server supports services for the one or more front end application servers . In an embodiment the back end servers may reside in remote locations and may receive service requests initiated by end users at the front end application servers wherein the service requests may be forwarded by the plurality of messaging servers . Alternatively the back end application servers may not be at remote locations but may be located in a corporate headquarters or other corporate office of an enterprise or business.

The plurality of messaging servers may be intermediate servers that mediate communication and interactions between the plurality of front end application servers and the plurality of back end servers promoting message flow e.g. transaction requests or query requests from the front end application servers to the back end servers and message flow e.g. replies to requests from the back end application servers to the front end application servers . A system administrator may configure message queuing software such as a queue manager in the plurality of messaging servers . The plurality of messaging servers may utilize any network protocol or format to implement a message queue system to deliver and receive alert messages and notifications to and from different components in the system e.g. front end application servers back end servers server and server . For example messages may be placed in a queue and stored until the recipient retrieves them. The messaging servers may queue received messages and deliver them when the addressed front end application or back end server is ready to receive the subject message.

In an embodiment the plurality of messaging servers may be referred to as middleware messaging layer servers and or middle servers. The messaging servers and any other servers and or hosts that promote message flow between the front end application servers and the back end servers may be referred to as a messaging layer . The plurality of messaging servers may comprise message queue manager servers or other messaging platforms. In some contexts the messaging platforms may be said to provide the messaging layer or a message transport layer. In some contexts the messaging platforms may be referred to as messaging middleware.

In an embodiment a messaging server may be an IBM Message Queue MQ server or a HyperText Transfer Protocol HTTP server. The plurality of messaging servers may queue messages and also transform messages to varying network protocols or formats corresponding to different components in the system . In an embodiment one or more message brokers may be implemented using the plurality of messaging servers to transform messages from one format to another and route messages between components. In another embodiment there may also be a web services device employed in the messaging layer of the system . The web services device may run web services in connection with the plurality of messaging servers and the plurality of front end application servers .

In the system an end user may make a data request by using one of the plurality of front end application servers wherein the data request may be for retrieving specific account information from the back end servers . This request and other messages from the front end application server may be transported by a rotation of messaging servers wherein there may be a predefined number of messaging servers supporting each front end application. For example there may 3 messaging servers supporting a first front end application there may be 5 messaging servers supporting a second front end application or there may be another predefined number of messaging servers supporting front end applications. The predefined number of messaging servers supporting each front end application may be selected by the system administrator for example based on the message flow rate associated with each front end application.

A server rotation may be useful for load balancing among the plurality of messaging servers . For example there may be increases in the load of messages received and sent in the system over periods of time. If a certain messaging server is unable to deliver a data request or message there may be a number of messaging servers remaining in the rotation of messaging servers that support the front end application . Thus another messaging server may be selected to send the data request or message to a back end server wherein the back end server may fulfill the request and use the selected messaging server to relay the obtained data back to the front end application . Therefore peak messaging loads may be handled by multiple messaging servers in the rotation in order to reduce the time delay of sending messages to and receiving responses at components in the system . The server rotation of the plurality of messaging servers may help provide services to front end application servers even in the event of server failure.

Although the server rotation may be beneficial in maintaining the availability of messaging servers for the front end application servers recurring issues or problems with the plurality of messaging servers may continue to occur. In an embodiment the plurality of messaging servers may experience a variety of issues or errors over periods of time. These issues may range from power supply failures to memory leaks and may entail multiple repairs by the system administrator or service technicians. Over time these repairs may be challenging to keep up with especially in a large scale system with hundreds of messaging servers . Additionally degraded service may be experienced by front end applications and or front end application servers before a problem is identified diagnosed and manual repairs completed. Therefore it may be advantageous to monitor transactions and performance metrics of the messaging servers in order to identify errors conduct repairs and prevent a disruption of services for the end users.

To meet these needs the server and the server may further comprise a monitoring application and a self healing application respectively. Alternatively in an embodiment the monitoring application and the self healing application may be executed on a single server and or computer system. The monitoring application may be employed to monitor the health and performance of the messaging servers for the support of front end application servers . The monitoring application may track performance metrics detect problems and report findings to the self healing application wherein the self healing application may take action based on the reported findings. In an embodiment the monitoring application may be referred to as a monitoring tool or an application performance management tool.

The monitoring application may track performance metrics and analyze the metrics to detect and or to infer problems in messaging servers in order to prevent deterioration of performance at the front end application servers . This proactive monitoring may allow the enterprise to detect issues beforehand and improve the experiences of end users who may be utilizing the front end application servers . The system administrator may monitor transactions and set specific alerts and predefined values for performance metrics in the plurality of messaging servers . In an embodiment a transaction may refer to any operation or computing that is performed within the plurality of messaging servers such as independent processing tasks assignments or functions. In an embodiment performance metrics may be related to power management capacity reliability availability scalability and other criteria for server operation. Performance metrics may comprise counts durations rates percentages and other values associated with specific transactions that may be monitored.

The monitoring application may track the amount of physical memory employed in each messaging server such as the total memory cached memory and available memory in each messaging server . The monitoring application may track an amount or percentage of utilized memory. In an embodiment memory may be measured in a unit of bytes kilobytes KB megabytes MB or another similar unit. Additionally the monitoring application may measure a response time or duration for each transaction within the messaging server as well as a corresponding status of each process or transaction. The response time may refer to the time it takes for the messaging server to respond to a data request from the front end application server for example the time taken by the messaging server to enqueue the data request on a message queue. Alternatively the response time may refer to the time it takes for the messaging server to enqueue a response received from a back end server onto a message queue. In an embodiment the monitoring application may measure the number of transactions per second or another rate to determine throughput. In another embodiment throughput may be measured in a unit of kilobytes per second kbps megabytes per second mbps or another unit. By tracking performance metrics the monitoring application may be used to determine whether or not the messaging servers meet performance criteria for safe and successful server operation.

From this tracking specific alerts may be triggered based on predefined values set by the system administrator for monitoring transactions and performance metrics in the plurality of messaging servers . In an embodiment an alert may be triggered due to a specific performance metric value that meets or exceeds a predefined value or that falls below a predefined value as the case may be e.g. some thresholds are defined and monitored as not to exceed values while other thresholds are defined and monitored as not to fall below values . There may be one or more predefined values for various performance metrics that may trigger specific alert messages in the system . The predefined values may indicate levels or values for operation in the messaging servers .

In an embodiment there may be multiple predefined values that correspond to percentages of memory usage in the messaging servers . For example a first predefined value may be set to 80 to indicate that memory usage is high in a particular messaging server . Although this predefined value is high the messaging server may not be considered to be at a critical level since there is still 20 of memory capacity remaining. A second predefined value may be set to 95 in order to indicate that memory usage is at a critical level wherein the messaging server is at a higher risk for failure than the risk indicated by an 80 memory usage level. It is understood that other predefined values and other predefined thresholds are contemplated by the present disclosure.

Additionally specific alert messages may be triggered depending on which predefined values are met or exceeded for different performance metrics. For example if the memory usage in a particular messaging server is at 85 then a subsequent alert message may be generated indicating high memory usage since the usage in the messaging server has exceeded the first predefined value of 80 . Furthermore if the memory usage is at 95 then another alert message may be generated indicating critical memory usage since the usage in the messaging server meets the second predefined value of 95 . Therefore one or more alert messages may be triggered by different performance metric values meeting or exceeding the predefined values wherein each alert message indicates a specific error in the messaging server . In an embodiment an alert message may indicate that an error in a messaging server has occurred or that the error in the messaging server is about to occur.

There may be a variety of errors that may occur in the plurality of messaging servers . For example there may be multiple errors associated with the unavailability of Java service on the messaging servers . In an embodiment the messaging servers may employ different versions of Java. Errors may be detected in the messaging servers by monitoring performance metric values corresponding to running Java wherein specific alert messages may be sent from the monitoring application to the self healing application upon detection of each error. Some examples of specific Java errors may comprise errors related to Java instances out of memory errors unavailable threads framework or unavailable resources.

In another embodiment errors in the messaging server may be associated with a web services device that may be employed in the messaging layer of the system . For example a web services device may be an IBM DataPower device that runs web services in connection with the plurality of messaging servers and the plurality of front end application servers . The web services device may employ web service definition language WSDL documents which may comprise information regarding specific services requested from the front end application servers . A WSDL document may be involved in configuration and validation of a service request at the web service device associated with the messaging server in the messaging layer.

In an example the messaging server may experience a failed file validation error corresponding to an invalid or corrupt WSDL document. Without a valid WSDL document the web services devices may not be able to compile the WSDL document and load it into memory if the document is invalid or corrupt. Therefore an alert message may be triggered to notify the self healing application of this error. Another similar error may comprise a secure socket layer SSL proxy profile error wherein this error may be associated with a file or certificate issue which may prevent validation at the web services device.

Other errors that may occur in association with the web services device may comprise errors related to power supply failure exhaustion of execution resources running out of encrypted space or temporary space or running out of memory for a web service. Encrypted space may refer to internal persistent storage on the web services device whereas temporary space may refer to non persistent storage in which files will be lost upon rebooting or powering down the device. These errors related to running out of encrypted space temporary space or memory for a web service may result in an alert message which may inform the self healing application to free up storage in the web service device by rebooting the device.

In another embodiment errors in the messaging server may be associated with a message broker wherein the message broker may be employed to transform messages from one format to another and route messages between components in the system . Upon receiving an input message the message broker may run a message flow comprising a sequence of processing steps. Execution groups comprising specific groupings of message flows may be assigned to the message broker. Errors associated with the message broker may be related to a non working queue manager message broker statuses message flow statuses and execution group statuses.

The variety of the aforementioned errors and other issues in the messaging servers may be detected by monitoring performance metric values in each messaging server . Upon detection corresponding alert messages may be triggered to notify the self healing application of an at risk messaging server in need of repair. Alert messages may also be triggered due to particular behaviors or events that may be detected by tracking performance metric values and transactions through the monitoring application . In an embodiment an alert message may be sent from the monitoring application to the self healing application in server . Upon receiving the alert message regarding an at risk messaging server the self healing application may be employed to perform a repair in the at risk messaging server .

First the self healing application may identify a course of action for repairing the at risk messaging server based on the specific error and performance metric value indicated in the alert message. The course of action may refer to an action or a set of actions for repair that may have previously been identified and or configured by the system administrator. For each error that may occur there may be a corresponding course of action for repairing the error in the messaging server . In an embodiment the course of action may be the same for multiple errors in the messaging server . For a variety of different errors the course of action may be to reboot the messaging server or restart a particular service on the messaging server . For example if the error is related to running Java then the course of action identified by the self healing application may be to restart the Java virtual machine on the messaging server . If the error is related to the message broker associated with the messaging server then the course of action may be to restart the corresponding service on the messaging server . If the error is associated with running out of memory or a memory leak then the course of action may be to reboot the device in order to free up memory resources

In some instances the error in the messaging server may not be associated with a course of action for repair that may be implemented by the self healing application . In these instances the self healing application may determine that the error in the messaging server may be best addressed by a manual repair and may notify the system administrator accordingly. For example if there is a web services device error associated with the messaging server e.g. failed file validation error then the system administrator may be notified to in order to request manual repair of the messaging server by a service technician or IT member. In an embodiment the messaging server that is identified for manual repair may be removed from the server rotation automatically.

After receiving the alert message regarding an at risk messaging server and identifying the course of action for repair the self healing application may check the number of active messaging servers in the server rotation wherein active messaging servers may refer to messaging servers that are currently in service or being used in the server rotation for example a rotation associated with a front end application. The number of active messaging servers in the subject server rotation may comprise the at risk messaging server . The self healing application may determine if the number of active messaging servers in the server rotation is above a predefined threshold. The predefined threshold may represent a minimum number of active messaging servers needed to handle the load of messages received from and sent to the front end application . In an embodiment this predefined threshold may be less than the predefined number of messaging servers that are in the server rotation of messaging servers that support each front end application wherein the predefined number of messaging servers may be set by the system administrator.

For example there may be a predefined number of 10 messaging servers that support a front end application however the predefined threshold of the minimum number of active messaging servers able to handle the messaging load without degraded service to the front end application may be 5 messaging servers . Thus the self healing application may determine if the number of active messaging servers is greater than 5. If the number of active messaging servers is above the predefined threshold of 5 e.g. 8 active messaging servers then the self healing application may remove the at risk messaging server from the server rotation. Otherwise if the number of active messaging servers is equal to or less than the threshold of 5 then the self healing application may not remove the at risk messaging server from the server rotation since removal would result in an inadequate number of active messaging servers in the server rotation for handling messaging loads e.g. would result in degraded service to the front end application .

Upon determining that the number of active messaging servers is equal to or below the predefined threshold then the self healing application may notify the system administrator that the at risk messaging server has not been removed from the server rotation in the system due to the number of active messaging servers . The notification may also comprise the identified error and the corresponding performance metric value so that the system administrator may keep track of the potential risks associated with the at risk messaging server . The at risk messaging server may remain in the server rotation until the self healing application or the system administrator determines at a later time that there are enough active messaging servers in the server rotation to allow for the removal and subsequent repair of the at risk messaging server . That is if the number of active messaging servers in the server rotation is determined to be above the predefined threshold at a later time then the at risk messaging server may be removed in order to undergo repair by the self healing application .

In the event that the number of active messaging servers is determined to be above the predefined threshold then the self healing application may remove the at risk messaging server from the server rotation in the system and notify the system administrator of the removal. The notification may comprise the performance metric value and the identified error responsible for the server removal. After notifying the system administrator the self healing application may conduct the repair by implementing the previously identified course of action. In an embodiment the course of action may comprise rebooting the messaging server or restarting a particular service on the messaging server .

Once the course of action for repair has been implemented the self healing application may validate the repaired messaging server by running application program interface API calls at the front end application servers . In an embodiment API calls may represent specific operations that the front end application servers may invoke to perform certain tasks such as querying data obtaining metadata or running utilities to perform administration tasks. The API calls may comprise non destructive testing techniques which may be used to evaluate the system without causing damage. In an example an API call may employ the web services device in the messaging layer to fulfill a service request at a front end application . The self healing application may receive the results from the API calls through the messaging layer and subsequently validate the repaired messaging server based on the results. After validating the repair the self healing application may place the repaired messaging server back in the server rotation in the system and notify the system administrator of the completed repair along with repair details and results from the API calls.

Therefore by monitoring performance metric values and identifying errors in the messaging servers the self healing application may repair and validate messaging servers in an efficient manner. In an additional feature the self healing application may be able to keep track of identified errors and performance metric values in the plurality of messaging servers in order to detect systemic issues. For example the self healing application may receive multiple alert messages corresponding to a plurality of at risk messaging servers in a server rotation of 10 messaging servers in the system . There may be 5 messaging servers that may be removed from service one after another due to identified errors and corresponding performance metric values in each. This deficiency of 5 messaging servers in the server rotation may signify that there may be an underlying serious issue in the system that may be causing the messaging servers to continue to fail. An underlying serious issue may not be remedied by a repair with the self healing application . Thus the self healing application may take note of the identified errors and performance metric values in each at risk messaging server and may send this information to the system administrator. The system administrator may notify a service technician or IT member to examine the system to diagnose the underlying issues.

In some instances the identified error in the at risk messaging server may not correspond to a simple repair or a specific course of action. As previously mentioned the self healing application may determine that an error in the at risk messaging server may best be addressed by a manual repair and may notify the system administrator accordingly. However in other instances the error identified in an alert message may correspond to issues in the back end servers . In these cases the self healing application may take no action since the issues and or problems lie within the back end servers .

As an additional feature the self healing application may also be able to return an inactive messaging server to service if the number of active messaging servers in the server rotation drops below the predefined threshold. As used herein the term inactive may refer to messaging servers that are currently out of service or not being used in the server rotation. In an embodiment there may be 10 messaging servers in a server rotation that supports a front end application . The predefined threshold of the minimum number of active messaging servers needed to handle the messaging load may be 5 messaging servers . If the number of active messaging servers drops to 4 then the self healing application may bring one of the inactive messaging servers back into the server rotation to assist in handling the load of messages received from and sent to the front end application servers . This feature may allow the self healing application to handle dynamic changes in messaging loads in the server rotation and mitigate impact at the front end.

Referring now to and a method is disclosed. At block a computer system for automated self healing may receive at an application an alert message corresponding to an at risk messaging server in a system wherein the at risk messaging server is one of a plurality of messaging servers in a server rotation that supports one or more front end applications in the system and wherein the alert message identifies an error and a corresponding performance metric value that meets or exceeds a predefined value for operation in the messaging server. In an embodiment the self healing application in server may receive an alert message corresponding to an identified error and performance metric value that meets or exceeds a predefined value for operation in an at risk messaging server . The at risk messaging server may be one of the plurality of messaging servers in a server rotation that supports one or more front end application servers in the system . At block the application may identify a course of action for repairing the messaging server based on the error and performance metric value. In an embodiment the self healing application may identify the course of action for repairing the at risk messaging server .

At block the application may determine if the number of active messaging servers in the server rotation is above a predefined threshold wherein the predefined threshold represents a minimum number of active messaging servers needed to support the one or more front end applications. In an embodiment the self healing application may determine if the number of active messaging servers e.g. the messaging servers that are currently being used in the server rotation is above a predefined threshold. In an embodiment the predefined threshold may be set by the system administrator and may refer to the number of active messaging servers needed to support the load of messages received from and sent to the one or more front end application servers in the system . At block upon determining that the number of active messaging servers in the server rotation is above the predefined threshold the application may remove the messaging server from the server rotation in the system . In an embodiment the self healing application may remove the messaging server from the server rotation in the system after determining that there are a minimum number of active messaging servers in the server rotation. At block the application may send a notification message to a system administrator wherein the notification message reports the removal of the messaging server from the rotation and identifies the error and the performance metric value responsible for the removal. In an embodiment the self healing application may notify the system administrator of the removal of the messaging server and of the error and the performance metric value identified in the messaging server .

At block the application may repair the messaging server by implementing the identified course of action and at block the application may validate the repaired messaging server by running application programming interface API calls at the one or more front end applications wherein the results from the API calls are obtained. In an embodiment the self healing application may repair the messaging server by executing the identified course of action e.g. restarting a service or rebooting the server . In an embodiment the self healing application may run API calls at the one or more front end application servers that are supported by the repaired messaging server and obtain results from the API calls. At block the application may place the repaired messaging server back in the server rotation in the system upon completion of validation and at block the application may send a second notification message to the system administrator wherein the second notification further comprises details of the repair and results from the API calls. In an embodiment the self healing application may complete validation bring the repaired messaging server back into the server rotation in the system and notify the system administrator. The notification may comprise details of the repair such as the course of action that was implemented as well as the results from the API calls.

At block the application may identify a course of action for repairing the messaging server based on the performance metric value and the error. In an embodiment the self healing application may identify the course of action for repairing the at risk messaging server . At block the application may determine if the number of active messaging servers in the server rotation is above a predefined threshold wherein the predefined threshold represents a minimum number of active messaging servers needed to support the one or more front end applications. In an embodiment the self healing application may determine if the number of active messaging servers e.g. the messaging servers that are currently being used in the server rotation is above a predefined threshold. In an embodiment the predefined threshold may be set by the system administrator and may refer to the number of active messaging servers needed to support the load of messages received from and sent to the one or more front end application servers in the system .

At block upon determining that the number of active messaging servers in the server rotation is above the predefined threshold the application may remove the messaging server from the server rotation in the system. In an embodiment the self healing application may remove the messaging server from the server rotation in the system after determining that there are at least a predefined minimum number of active messaging servers in the server rotation. At block the application may notify a system administrator of the removal of the messaging server wherein the notification comprises the performance metric value and error responsible for the removal. In an embodiment the self healing application may notify the system administrator of the removal of the messaging server and of the performance metric value and the error identified in the messaging server . At block the application may repair the messaging server by implementing the identified course of action and at block the application may validate the repaired messaging server by running application programming interface API calls at the one or more front end applications wherein the results from the API calls are obtained. In an embodiment the self healing application may repair the messaging server by executing the identified course of action e.g. restarting a service or rebooting the server . In an embodiment the self healing application may run API calls at the one or more front end application servers that are supported by the repaired messaging server and obtain results from the API calls. At block the application may place the repaired messaging server back in the server rotation in the system upon completion of validation and at block the application may notify the system administrator of the repair details and results from the API calls. In an embodiment the self healing application may complete validation bring the repaired messaging server back into the server rotation in the system and notify the system administrator. The notification may comprise details of the repair such as the course of action that was implemented as well as the results from the API calls.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus such as a server comprising a self healing application having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the processor to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the processor might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using processor may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using processor for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The processor executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage ROM RAM or the network connectivity devices . While only one processor is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The processor may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the processor may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer is turned on and operational the dynamic RAM stores information that is written to it. Similarly the processor may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

