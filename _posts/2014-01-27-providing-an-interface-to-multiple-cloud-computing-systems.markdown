---

title: Providing an interface to multiple cloud computing systems
abstract: Discussion of content between users of social networks is described. A cloud computing system of a plurality of cloud computing systems is determined for processing a request in a first syntax from a client computer system. The request is translated from the first syntax to a second syntax of the cloud computing system and transmitted to the cloud computing system in the second syntax. The server computer system includes drivers to enable bi-directional translation of communications between the client computer system and the plurality of cloud computing systems, wherein the drivers provide bi-directional translation for at least one of the plurality of cloud computing systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270730&OS=09270730&RS=09270730
owner: Red Hat, Inc.
number: 09270730
owner_city: Raleigh
owner_country: US
publication_date: 20140127
---
This application is a continuation of U.S. patent application Ser. No. 12 828 787 filed Jul. 1 2010 the entirety of which is hereby incorporated herein by reference. This application is related to U.S. patent application Ser. No. 12 828 778 filed on Jul. 1 2010 now issued as U.S. Pat. No. 8 631 067 and U.S. patent application Ser. No. 12 828 795 filed on Jul. 1 2010.

Embodiments of the invention relate to the field of cloud computing systems and more particularly to providing a neutral interface to multiple disparate cloud system providers.

Cloud computing is an architecture in which customers do not own the physical infrastructure related to an application data storage center etc. Instead customers avoid the various expenses associated with operating computers maintaining a communications network maintaining software etc. by purchasing usage from a third party cloud system provider. Customers consume the resources of various third party cloud systems over a communications network as a service.

Cloud systems however may be implemented in various formats involve various communications protocols and have various other specific requirements for interacting with the cloud systems. Thus in order to interact with multiple cloud computing systems consumer applications need to be tailored to each specific cloud system provider s requirements. As a result a consumer will be less likely to switch cloud system providers when to make such a switch would require the consumer to update existing applications. Furthermore the consumer may also be required to update their applications in response to cloud computing systems updates such as when a formatting or communications protocol change occurs on a cloud system.

An architecture system and method for providing a neutral interface to multiple disparate cloud system providers is described. In one embodiment the method includes receiving a request from a client computer system for processing by a cloud computing system the request in a neutral format. The method may also include translating the request with the server computer system from the neutral format to a second format of the cloud computing system. Furthermore the method may include transmitting the request to the cloud computing system in the second format.

In one embodiment cloud interface system is responsible for providing a neutral communications interface between client systems and disparate cloud systems . In one embodiment cloud systems are server based systems that provide cloud computing services such as remote data storage business applications internet services security services content distribution etc. to client systems . However different cloud providers such as cloud system and cloud system N may communicate and provide their respective services via disparate interfaces or communications protocols. For example the cloud systems can be implemented using different computing platforms such as AMAZON EC2 RED HAT RHEV M VMWARE ESX etc.

In one embodiment cloud interface system is an intermediary for communications between client systems and cloud systems . In one embodiment cloud interface system abstracts vendor specific requirements such as communication protocol data formatting etc. to a neutral cloud interface system format. As discussed in greater detail below in one embodiment cloud interface system translates client system requests received in the neutral format to requests formatted for a specific target cloud system . In one embodiment cloud interface system further translates the responses of the cloud system to the neutral format for client system .

In one embodiment cloud based applications executed by client systems may access the services provided by disparate cloud systems via a single vendor neutral communications syntax of cloud interface system . In one embodiment client systems are therefore insulated from vendor specific communications protocols and messaging formats. As a result if client system switches between cloud systems and N client system needs only to direct their requests to a recipient cloud system via cloud interface system without reformatting the request issuing the request in a proprietary format etc. In one embodiment cloud interface system translates the requests and responses thereby insulating client systems from difficulties that may arise from switching cloud system providers updates to communications systems of cloud systems protocol changes that apply to cloud systems etc.

In one embodiment cloud interface system is one or more server computer systems communicably coupled with client system and one or more cloud systems . As will be discussed in greater detail below cloud interface system is an intermediary between client system and cloud systems and provides translation services to client systems . In one embodiment cloud interface system provides the translation services via cloud system specific drivers such as cloud system drivers . Thus in one embodiment client system issues requests to and receives responses from cloud interface system in a neutral format as discussed in greater detail below. Cloud interface system translates the requests to and responses from the vendor specific or proprietary cloud systems . Therefore in one embodiment client systems are insulated from the specific details associated with each cloud system provider.

In one embodiment client system connects to cloud interface system via hypertext transfer protocol HTTP . In one embodiment client system utilizes a representational state transfer REST communications protocol for communicating with cloud interface system . In one embodiment the REST communications protocol is a communications protocol where client system initiates requests in a neutral syntax to cloud interface system and cloud interface system processes the requests in order to return appropriate responses in the neutral syntax. In one embodiment cloud interface system translates the client system requests to a cloud system specific request and then receives a cloud system specific response. The cloud system specific response is then translated into the neutral syntax and returned to the client system. In one embodiment the neutral communications syntax is extensible markup language XML formatted communications.

In one embodiment the neutral communications syntax may be a non XML format such as JSON YAML images etc. In one embodiment the syntax used for communication is denoted by the client through either URL manipulation or through using standard HTTP Accept headers. A server may or may not support a specific format. In one embodiment the neutral abstract syntax may be realized as one or more concrete syntaxes XML JSON YAML etc which may or may not be textual. For example pictorial images may be utilized as a syntax.

In one embodiment an abstract model of resources such as images instances network interfaces storage partitions etc. Is defined. Through REST this abstract model is converted into a concrete response using any suitable language XML JSON YAML etc. or non textual representation JPEG images etc .

In one embodiment client system communicates with cloud interface framework via a neutral applications programming interface . In one embodiment the neutral applications programming interface implemented by cloud interface framework defines the interface between client system and cloud interface system . In one embodiment the neutral applications programming interface of cloud interface framework defines images and instances. In one embodiment an image is a prototype of a server computer system which defines attributes of the server computer system and acts as a template for creating instances on a server computer system. In one embodiment an instance is a concrete server computer system that is realized from the image. In one embodiment client system creates instances to connect with various specific server cloud systems via cloud interface system . In one embodiment instances are created from images in order to allocate resources i.e. virtual hardware with a predefined configuration i.e. an image . In other words an instance can be seen as how services of a cloud system provider are consumed. 

In one embodiment neutral applications programming interface of cloud interface framework further provides actions or methods that may be performed via the instances on cloud system servers. For example the actions may include start stop reboot etc. that correspond to actions to be performed on a cloud system .

In one embodiment the neutral applications programming interface of cloud interface framework provides an abstraction of the vendor specific implementations of cloud systems . In one embodiment a cloud system driver is responsible for translating and filtering communication between client system and a corresponding cloud system . In one embodiment cloud system drivers translate the terms and actions such as image instance start reboot etc. to cloud specific terms and actions. For example client system may refer to an image for a cloud system via the neutral applications programming interface of cloud interface framework . In one embodiment a driver would translate the neutral formatted application programming interface image to the corresponding element supported by a cloud system such as a template in RED HAT RHEV M or a vendor specific image in AMAZON EC2 .

In one embodiment cloud system drivers enables bi directional communication between the services offered by cloud system and client system without the need for client system to change the programming of a client application or the formatting for communicating messages based on cloud system requirements. Rather cloud system drivers provide the vendor specific interface to cloud systems while client system communicates with cloud system drivers via the neutral communication syntax such as a standardized XML communications format of the neutral applications programming interface of the cloud interface framework .

In one embodiment a cloud system driver is a plug in application that plugs into cloud interface framework . In one embodiment each cloud system driver is a single class that includes method calls. In one embodiment a cloud system driver receives client system requests from the cloud interface framework . In one embodiment a cloud system driver translates the client system request to a method call which is executed on a corresponding cloud system . When the cloud system responds cloud system driver translates the response into the neutral syntax and the response is provided to the client system .

In one embodiment client system connects to cloud systems via a single instance connection with cloud interface framework . Thus when client system desires to connect to two cloud systems such as cloud system and N client system creates two instances. Then client system requests to different cloud systems would be directed to specific instances for the respective cloud systems.

In another embodiment cloud interface framework may multiplex communication between a single connection with client and multiple cloud systems . Thus client system would set up a single connection with cloud interface system and cloud interface framework would be responsible for routing client system requests and responses between appropriate cloud system drivers .

Referring to the process begins by receiving a client computer system request in a neutral format to be processed by a cloud computing system processing block . In one embodiment the request is a request for a service provided by a cloud computing system. Such requests depend on the services offered by the cloud computing systems subject to the request. For example the request may be a storage request security operation request electronic business system request etc. In one embodiment the request is an HTTP request received by processing logic utilizing a REST communications protocol.

In one embodiment a standard message formatting protocol may be utilized such as extensible markup language XML . Other protocols for formatting messages such as hypertext markup language HTML standard generalized markup language SGML JavaScript Object Notation JSON YAML etc. may also be utilized by processing logic. In another embodiment processing logic may utilize a proprietary message formatting and communication scheme for receiving cloud computing system requests in the neutral format.

Processing logic translates the request from the neutral format to a second format of the cloud computing system processing block . In one embodiment the cloud computing system may be one of a number of different cloud computing system platforms which provide different interfaces communicate using different message formatting support different protocols etc. For example the cloud computing system may be one of AMAZON EC2 RED HAT RHEV M VMWARE ESX or any other cloud computing system. In one embodiment the second format is a format supported by the cloud computing system.

Processing logic then receives a response from the cloud computing system in the second format of the cloud computing system processing block . The response is then translated from the second format to the neutral format processing block . In one embodiment as discussed above cloud computing system specific drivers act as a translation service for mediating messages between a client computer system and a specific cloud computing system without requiring the client computer system to implement a specific protocol of the cloud computing system and vice versa.

Processing logic then transmits the response in the neutral format to the client system processing block . In one embodiment the response is also transmitted via the HTTP connection utilizing the REST protocol.

In one embodiment the translation to and from a neutral format to a proprietary or specific format supported by a cloud computing system simplifies application development for client computer systems. That is the specifics of communicating with different cloud computing system is abstracted to a common communication protocol and format. The translation performed by the processing logic discussed above mediates the communication between the client computer system and the different cloud computer systems. Thus the client computer system could change cloud computer systems without changing client application code except for changing which cloud computer system to issue requests to. As a result a client computer system could easily switch between cloud computing system providers without changing or upgrading a client computer system application.

Referring to the process begins by defining a neutral format for cloud computing system requests and responses that is to be utilized by client computer systems processing block . In one embodiment the neutral format defines an application programming interface between a client computer system and a cloud interface system. In one embodiment the application programming interface defines nouns and verbs that abstract typical cloud computing system parameters and functions such as images and instances. As discussed above an image is a prototype of a server computer system and defines attributes of the server computer system. Furthermore an instance is a concrete server computer system that is realized from the image. Verbs abstract actions or methods that may be performed on different cloud computing system such as start stop reboot etc. In one embodiment as discussed above a translator such as a cloud system driver is responsible for translating between the abstract nouns and verbs to cloud system specific commands.

Processing logic provides an application programming interface API to a client computer system with the neutral format processing block . In one embodiment the neutral format of the API exposes the translation services of a cloud interface system such as cloud interface system of to software applications of client computer systems. Furthermore the neutral format for communicating with a cloud interface system simplifies communication with disparate cloud computing systems since the translation services of the cloud interface system handles conversion of messages for specific cloud computing system APIs upgrades to an API of a cloud system etc.

A request is then received from a client computer system specifying one of a plurality of cloud computer systems for client communication processing block . In one embodiment a client computer system specifies an entry point in the request. In one embodiment the entry point may be a universal resource locator that resolves at a server computer system that provides a cloud interface system. In one embodiment the entry point provides entry points to other collections for the neutral format such as images and instances discussed above as well as flavors and realms among other collections.

In one embodiment a flavor represents a configuration of resources upon which a machine may be deployed. In one embodiment a flavor defines aspects such as local disk storage available RAM architecture number and speed of central processing units available etc. In one embodiment a realm represents a boundary containing resources and a precise definition of a realm may be left to the cloud provider. In some cases a realm may represent different data centers different continents or different pools of resources within a single data center.

Processing logic then receives client computer system requests for the cloud computing system and provides responses to the client computer system utilizing the neutral format of the API processing block . In one embodiment the requests and responses are handled by processing logic as discussed above in .

Referring to the process begins by receiving a client computer system request in a neutral format for a cloud computing service processing block . Processing logic determines a cloud computing system from among a plurality of cloud computing systems to process the request processing block . In one embodiment a client computer system request may specify a destination cloud computing system for the request. For example where a client computing system has access to an AMAZON EC2 based cloud computing system and a RED HAT RHEV M based cloud computing system a client request for a service may specify the request is to be directed to the RED HAT RHEV M based cloud computing system. In one embodiment processing logic may determine the destination cloud computing system based on data within the request or the request itself.

Processing logic then routes the client computer system request to a cloud system driver processing block . Processing logic utilizes the cloud system driver to translate communication to and from the neutral format utilized by a client computer system and a second format of a cloud system driver processing block . As discussed above a cloud system driver is bi directional communication converter. That is a cloud system driver translates client computer system requests from a neutral format of an API of a cloud interface framework to a cloud computing system specific message. For example cloud system driver may translate a XML request to a JSON formatted request supported by a cloud computing system. As another example cloud system driver may translate a single neutral command to N vendor specific commands. In one embodiment the message is a method call to be processed by the cloud computing system and the response is return by a cloud computing system of the method call.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processing device implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. the cloud interface system embodying any one or more of the methodologies or functions described herein. The cloud interface system may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The cloud interface system may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving translating transmitting defining providing determining routing utilizing or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

