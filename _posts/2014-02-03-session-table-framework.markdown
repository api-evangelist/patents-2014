---

title: Session table framework
abstract: In accordance with embodiments disclosed herein, there are provided methods, systems, and apparatuses for implementing a session table framework including, for example, receiving a request at a host organization from a client device, in which such a request specifies an application available via the host organization; generating a user session unique to the client device in a memory of the host organization; creating a user session data table within the user session; processing the request via the application specified by the request on behalf of the client device; updating the user session data table based on the processing of the request; and transmitting a response to the client device responsive to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09456038&OS=09456038&RS=09456038
owner: salesforce.com, inc.
number: 09456038
owner_city: San Francisco
owner_country: US
publication_date: 20140203
---
This U.S. divisional patent application is related to and claims priority to U.S. patent application Ser. No. 13 208 206 entitled SESSION TABLE FRAMEWORK filed Aug. 11 2011 the entire contents of which are incorporated herein by reference and is further related to and claims priority to U.S. Provisional Patent Application No. 61 435 667 entitled SESSION TABLE FRAMEWORK filed Jan. 24 2011 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Embodiments relate generally to the field of computing and more particularly to a session table framework including methods systems and apparatuses for implementing a session table framework in an on demand service environment.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also correspond to disclosed embodiments.

Developing comprehensive software applications from scratch is expensive in terms of both development time and also in terms of capital expenditure spent on developers programmers and the like so as to create a software application capable of meeting design objectives.

Packaged software applications are sometimes available which meet many of the specified design objectives for a given project and thus it may be advantageous to purchase license or otherwise acquire a packaged software application e.g. from a third party provider and incorporate the packaged software application into an existing computing environment rather than developing the necessary functionality from scratch.

Incorporating a packaged software application into a complex computing environment typically requires some level of customization for example customizations to fully integrate related business processes and data elements which are not fully managed within the scope of an out of the box or packaged software application. Customization may further be desirable to provide additional security additional functionality or other enhancements which are not provided by the packaged software application.

The problem of incorporating a packaged application into a complex computing environment is exacerbated where it is not feasible to modify the underlying source code of the packaged application due to for example licensing restrictions unavailability of the source code and so forth.

The present state of the art may therefore benefit from a session table framework including methods systems and apparatuses for implementing a session table framework in an on demand service environment as described herein.

In accordance with one embodiment there is described a method in a host organization the method including receiving a request at the host organization from a client device the request specifying an application available via the host organization in which the application includes a stateless application which maintains no state specific information regarding the client device between interactions with the client device generating via an application extender a user session unique to the client device in a memory of the host organization creating via the application extender a user session data table within the user session of the memory to maintain the state specific information regarding the client device between a plurality of interactions with the client device on behalf of the stateless application the user session data table defining one or more cells within the user session data table which are updateable or non updatable in which creating the user session data table includes creating the user session data table based on metadata associated with the application specified by the request and in which the metadata defines a structure for the user session data table based upon which the user session data table is created processing update data from the client device via the application specified by the request on behalf of the client device updating the user session data table based on the processing by validating the update data against the one or more cells within the user session data table according to which are updateable or non updatable and transmitting a response to the client device. Other related embodiments are described.

Described herein are systems devices and methods for a session table framework including methods systems and apparatuses for implementing a session table framework in an on demand service environment for example mechanisms include supporting client state information for and on behalf of stateless applications.

In a particular embodiment such mechanisms include receiving a request at a host organization from a client device in which such a request specifies an application available via the host organization generating a user session unique to the client device in a memory of the host organization creating a user session data table within the user session processing the request via the application specified by the request on behalf of the client device updating the user session data table based on the processing of the request and transmitting a response to the client device responsive to the request.

In the following description numerous specific details are set forth such as examples of specific systems languages components etc. in order to provide a thorough understanding of the various embodiments. It will be apparent however to one skilled in the art that these specific details need not be employed to practice the embodiments disclosed herein. In other instances well known materials or methods have not been described in detail in order to avoid unnecessarily obscuring the disclosed embodiments.

In addition to various hardware components depicted in the figures and described herein embodiments further include various operations which are described below. The operations described in accordance with such embodiments may be performed by hardware components or may be embodied in machine executable instructions which may be used to cause a general purpose or special purpose processor programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Embodiments also relate to an apparatus for performing the operations disclosed herein. This apparatus may be specially constructed for the required purposes or it may be a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition embodiments are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the embodiments as described herein.

Embodiments may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosed embodiments. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. a machine e.g. computer readable transmission medium electrical optical acoustical etc.

Any of the disclosed embodiments may be used alone or together with one another in any combination. Although various embodiments may have been partially motivated by deficiencies with conventional techniques and approaches some of which are described or alluded to within the specification the embodiments need not necessarily address or solve any of these deficiencies but rather may address only some of the deficiencies address none of the deficiencies or be directed toward different deficiencies and problems where are not directly discussed.

In one embodiment the host organization receives a request from a client device A B or C in which the request specifies an application available via the host organization . In such an embodiment an application extender of the host organization generates a user session which is unique to the client device A C in a memory of the host organization . The application extender further creates a user session data table within the user session of the memory and processes the request via the application specified by the request on behalf of the client device A C. In such an embodiment the application extender updates the user session data table based on the processing of the request and transmits a response to the client device A C responsive to the request .

Any number of user sessions may be created for the one or more client devices A C such that any client device submitting a request to the host organization may have a user session which is unique to that particular client device and thus dedicated to information specific to the respective client device A C. Creating each of the user sessions may include dynamically allocating space within the memory for the creation of the user session . In some embodiments the user sessions are implemented as HttpSessions in which a user session data table is a memory resident data table within the memory of an application server supporting the corresponding user s HttpSession. The user session may therefore serve as a communication path over which to pass new user data from a client device s A C browser to relevant parts of functional processing within the host organization . Moreover use of flexible metadata to control both creating the user session data tables and also to maintain the records within them permits an application server s existing data maintenance capabilities to be leveraged.

Web server may be responsible for receiving requests from various customer organizations A C via network and provide a web based interface to an end user client machine originating such requests for example a client device A C at or operating within one of customer organizations A C.

In one embodiment the host organization receives a request from a client device e.g. from one of A B or C . In such an embodiment an application is specified via the request for example as the destination or as the desired resource or processing facility for such the request .

Various types of applications may be hosted or made available by host organization on behalf of client devices A C and extendable via application extender . For example in one embodiment application is a legacy application executing within the host organization the legacy application having source code which is unavailable for modification or unsupported for modification. For example the legacy application may include useful processing capabilities yet nevertheless lack support by the original programmers or any technical team or organization capable of adequately modifying and updating the legacy application to reflect evolving business requirements.

In one embodiment application specified by the request is a third party application for which source code is proprietary and unavailable for modification or for which the source code is restricted from modification due to licensing terms for the application. For example either the source code simply is not available as it is kept secret from the host organization or the source code is not available for modification because the host organization lacks the rights permissions and privileges to modify the source code for the application .

In one embodiment application specified by the request is a stateless application which maintains no state specific information regarding the client device e.g. one of A C between a plurality of interactions between the application and the client device. In such an embodiment a user session data table implemented via the application extender stores data uniquely associated with the client device A C between the plurality of interactions with the client device on behalf of the stateless application. For example the client device A C may interact with the application several times and thus it may be beneficial if the application maintained information associated with the client device A C and its prior interactions in between the several interactions. However where application fails to implement such functionality the application extender may provide support for maintaining such state information between interactions.

The stateless application were it to operate without the session table framework described herein maintains only generic information between user clicks and user interactions even where such interactions are associated with the same client device e.g. one of A C . Therefore all required data and information to support user choices selections and updates have to be transmitted to the client device and then the client device by necessity has to transmit all information including its own choices selections and updates back to the stateless application again if it were to operate without the session table framework described herein. Such interactions are not only inefficient due to transmitting all information back and forth but additionally such a model presents a security risk by allowing corrupted data or maliciously altered data to be entered into the return data sent back to such a stateless application. For example although only certain fields may be intended as user modifiable fields e.g. quantity corrupted or maliciously altered data may feasibly allow modification of a field intended as read only display only e.g. unit price and that altered data may then be returned to the stateless application which may accept the data as valid e.g. a validly changed quantity of product at a maliciously altered unit price .

So as to overcome the above security flaw with a stateless model and to provide other enhancements the session table framework described herein stores some data which is specific to a particular user or client device A C thus maintaining the data across multiple interactions with such a user or client device A C. For example in one embodiment the user session data table within the user session of the memory stores data information between a plurality of interactions with the client device A C on behalf of the stateless application . For example the multiple interactions may include receipt of the original request from the client device A C return of the renderable UI from the host organization to the client device A C and further receipt of a second request having updated data or other relevant data from the same client device A C in the context of the same user session created for the particular client device. Therefore maintaining state information on behalf of the stateless application for interactions with the client device A C is a desirable improvement.

In an alternative embodiment application specified by the request supports a first data set on behalf of the client device A C however the application lacks support for a second data set. In such an embodiment application extender implements support for the second data set on behalf of the client device A C as an extension or enhancement to the application . In such an embodiment the second data set is different than and complementary to the first data set which is supported by the application .

In one embodiment application specified by the request includes a proprietary black box application supporting an enumerated set of inputs and yielding an enumerated set of outputs responsive to the enumerated set of inputs. In such an embodiment the implementing logic of the proprietary black box application which yields the enumerated set of outputs is not available for modification. Thus in accordance with such an embodiment application extender applies further processing to the enumerated set of outputs yielded from the proprietary black box application. For example where the source code or underlying logic for the proprietary black box cannot be modified to support further processing which is necessary in support of business objectives the application extender supports the capture of a known set of outputs from the proprietary black box and apply or facilitate the application of additional processing to the output before such output is returned to a client device A C. In one embodiment the further processing is applied before updating values in a user session data table maintained by the application extender on behalf of the client device A C as an extension to the application .

The application extender operates upon metadata associated with the application as will be described in additional detail below. In accordance with one embodiment metadata A specifies a generic set of columns or data fields for use with the application specified by the request . For example metadata A may define a structure for a table to be created within a user session created on behalf of a client device A C. Metadata A may further represent or specify conditions wherein a certain subset of the generic set of columns or data fields for application is relevant to be used by a particular request such as request . Metadata A may additionally or alternatively define a mapping between locations and or cells within such a table and data to be populated into the table. Metadata A may additionally or alternatively define data persistence mapping for data within such a table and one or more locations where data may be persisted such as within a database.

In accordance with one embodiment the metadata further defines a mapping between one or more cells in the user session data table and a corresponding one or more locations in the multi tenant database system of the host organization . In such an embodiment the host organization further synchronizes data within the one or more cells in the user session data table with the corresponding one or more locations in the multi tenant database system of the host organization based on the mapping to persist the data in the one or more cells beyond the existence of the user session for the client device e.g. one of A C corresponding to the respective user session .

In one embodiment receiving the request includes receiving the request at the host organization having the multi tenant database system operating therein in which the request is one of a plurality of requests received from a plurality of customer organizations A C. For example each of the various requests may include requests for application processing database transaction requests search requests status requests and so forth originating from the customer organizations A C each being a subscriber of on demand services provided by the host organization . In one embodiment each customer organization is an entity selected from the group consisting of a separate and distinct remote organization an organizational group within the host organization a business partner of the host organization or a customer organization that subscribes to cloud computing services provided by the host organization.

In one embodiment the multi tenant database system includes elements of hardware and software that are shared by a plurality of separate and distinct customer organizations each of the separate and distinct customer organizations being remotely located from the host organization having the multi tenant database system operating therein.

In one embodiment the hardware software and logic elements of the multi tenant database system include at least a non relational data store and a relational data store which operate in accordance with the hardware software and logic elements that implement the database functionality and code execution environment within the host organization .

In one embodiment the host organization populates data into the user session data table within a user session A based on metadata associated with the application specified by the request . Metadata associated with the application may be retrieved or derived from various sources. For example in one embodiment metadata associated with the application and populated into the user session data table is based on metadata from a repository separate from the application which is specified by the request . In such an embodiment the repository has previously stored the metadata for later retrieval. In an alternative embodiment the metadata is solicited or queried from the application by referencing an Application Programming Interface API of the application to request the metadata . For example queryable objects with publicly disclosed or publicly facing get methods e.g. methods disclosed and accessible to separate programs external to application may be utilized to interface with the application and discover or interrogate what metadata is associated with the application .

In one embodiment metadata is derived from the received request by systematically parsing a plurality of quantifiable data elements data fields columns and or name value pairs from the received request. For example where a request is sent for processing by the specified application that request will have information about the purpose and nature of the incoming request which may be intercepted and extracted from the request for use in building or supplementing metadata associated with the application . For example enumerated and expected inputs to the application may be embedded within such a request and available for extraction via the application extender .

In one embodiment the metadata is retrieved or at least partially retrieved by probing the application specified by the request to yield application information to parse for quantifiable data elements data fields columns and or name value pairs from output from the application responsive to the probe.

Additional detail is shown for application extender which provides one or more program extensions to the application . For example application extender is depicted as including a table creation program extension a table population program extension a UI rendering program extension and a data persistence program extension . The sub elements of application extender operate upon metadata A including the metadata for session table structure B the metadata for input data mapping C the metadata for user interface controls D and the metadata for persistence E.

Depicted here is the host organization receiving a request from client device A responsive to which host organization is expected to yield a response to the requesting client device A responsive to the request . In accordance with the disclosed embodiments both the client device A and the application operate agnostic to existence of the application extender . Stated differently the client device A and the application need not be aware that application extender acts as an intermediary to the requests and responses though each may have such awareness. Nevertheless it is not necessary for the client device A or the application to implement any special or additional processing. Instead the hosted application is extended by the application extender in a manner that may be completely transparent to each of the client device A and the application thus permitting backward compatibility with existing client devices A C and permitting enhanced capabilities for applications which may not otherwise support alteration update or enhancements.

With reference to where an incoming request is a first interaction the table creation program extension will generate a user session A unique to the client device A in a memory of the host organization based on the metadata associated with the application which is specified by the request .

In one embodiment the metadata B defines a structure for the user session data table . In such an embodiment creating the user session data table within the user session A of the memory constitutes creating the user session table based on the structure defined within the metadata B of the metadata . For example the session table structure defined by metadata B may specify one or more columns one or more rows and or a plurality of locations or cells such as cells A B C and D within the user session data table .

In one embodiment a table creation program extension operates to create the user session data table within the user session A of the memory based on the metadata associated with the application .

In accordance with one embodiment the metadata C defines a mapping between a plurality of data elements and a plurality of corresponding target locations within the structure defined by the metadata B e.g. the structure defined by metadata B used to create user session data table . In such an embodiment populating data into the user session data table constitutes storing each of the plurality of data elements into one or more rows or one or more cells A D of the user session data table based on the mapping defined by the metadata C. User session B and user session C are additionally depicted each corresponding to and unique to a different user than the user associated with user session A.

In one embodiment each of the plurality of data elements are provided within the metadata or are retrievable from a source location separate from the metadata as specified by the metadata C. For example the metadata specifying the mapping for input data C may specify the retrieval of data elements from within the metadata and such data is therefore populated into the one or more rows or one or more cells A D of the user session data table based on the input data mapping C. Other data elements may be located separately such as within a file store or within a database and therefore such data elements are retrieved based on the input data mapping metadata C and populated into the one or more rows or one or more cells A D of the user session data table . In some embodiments at least a portion of the plurality of data elements are sourced or extracted from the request as specified by the metadata .

Thus in accordance with one embodiment populating the data into the user session data table further includes retrieving each of the plurality of data elements from the metadata or from the source location such as within database specified by the metadata C and storing each of the plurality of data elements retrieved into the one or more rows or cells A D of the user session data table .

In such a way the application extender operates on behalf of one or more hosted application s e.g. by systematically processing metadata associated with each particular application without specific dependency to any particular application so long as appropriate metadata associated with the one or more applications may be derived or retrieved as described above.

In one embodiment a table population program extension operates to populate data into the user session data table by storing each of the plurality of data elements into the one or more rows of the user session data table based on the mapping defined by the metadata C.

In one embodiment the metadata A further defines one or more data elements necessary to support a plurality of business rules embedded within the metadata such as business rules introduced as enhancements or extensions to the existing capabilities of the application being extended. In such an embodiment creating the user session data table further includes creating one or more data elements necessary to support each of the plurality of business rules defined by the metadata . In such an embodiment the metadata C defines a mapping between the one or more data elements necessary to support each of the plurality of business rules defined by the metadata A and a plurality of corresponding locations within the structure defined by the metadata such as the locations or cells A D within user session data table .

In accordance with one embodiment the application extender processing the request via the application specified by the request on behalf of the client device A C includes the application extender performing one of the following operations a submitting the received request in an unmodified form to the application on behalf of the client device A C and receiving output from the application responsive to the submitted request. For example where the request received at the host organization is in a state appropriate for processing by the specified application the originally received request may be simply submitted to the application as depicted at . The application will responsively generate output or a reply as depicted at element and that output or reply is then captured intercepted or received by the application extender for further processing and operations.

In one embodiment processing the request via the application specified by the request on behalf of the client device A C includes the application extender performing b generating an intermediate request based on the received request submitting the intermediate request to the application on behalf of the client device as depicted at and capturing output from the application responsive to the submitted intermediate request as depicted by element . For example it may be necessary to modify the request presented to the application such that the output is directed to the application extender or such that input presented to the application is transformed into a state or format which is compatible with the application where the originally received request fails to format the request appropriately. In one embodiment an intermediate request which is generated subsequent to a second request from a client device A e.g. as shown at element of depicting a second request utilizes data previously stored in the user session data table in addition to data from within the second request received. For example a second request from the client device may be incomplete but may be supplemented by the application extender based on previously captured data stored in the user session data table .

In one embodiment processing the request via the application specified by the request on behalf of the client device A C includes the application extender performing c submitting a plurality of Application Programming Interface API requests as shown at element to the application on behalf of the client device A C to fulfill operations solicited by the request received from the client device A C and capturing output from the application responsive to the plurality of API requests as depicted at element . For example where the application provides a programmatic interface for triggering or requesting processing such an interface may be utilized to present or submit API requests which in the aggregate fulfill the work which is dictated by the originally received request .

Having the output yielded from the application the application extender then updates the user session data table appropriately. For example in accordance with one embodiment updating the user session data table based on the processing of the request includes one or more of the following operations a modifying one or more cells in the user session data table based on output received from the application in which the one or more cells being modified are based on a portion of the output represented by or corresponding to a change to existing data cells of the user session data table b adding one or more columns to the user session data table based on the output received from the application in which the one or more columns being added are based on a portion of the output corresponding to one or more fields previously unrepresented by the user session data table e.g. new data elements or new data fields represented in the output trigger the insertion of new columns and c adding one or more rows to the user session data table based on the output received from the application in which the one or more rows being added are based on a portion of the output corresponding to one or more elements previously unrepresented data one or more existing columns within the user session data table e.g. the columns are already present but output from the application triggers the insertion of new rows .

In accordance with the disclosed embodiments the response which is sent back to the client device A C is a reflection of the updates which are written into the user session data table based on the output from the application . In such a way subsequent processing appropriate formatting necessary synchronization and designated persistence mapping may be fulfilled responsive to receiving the output from the application . Additionally having the update data written to and reflected by the user session data table facilitates subsequent requests e.g. second request from from the same client device A C and directed to the same specified application as much of the state information will already be known and changes reflected in the second request may be appropriately validated against permissibly modifiable fields as described in additional detail below.

In accordance with one embodiment metadata E defines data persistence between one or more cells A D or locations in the user session data table and a corresponding one or more data persistence locations in a database of the host organization . Alternatively the data persistence may be defined with the input data mapping defined by metadata C. Metadata E defining data persistence mappings may additionally or alternatively specify that one or more cells A D or locations in the user session data table are to be persisted in a multi tenant database system e.g. element at or an alternate file store.

In one embodiment based on data persistence defined by metadata E the host organization synchronizes data within the one or more cells A D or locations in the user session data table with the corresponding one or more data persistence locations in the database system of the host organization based on the mapping or based on the data persistence defined by metadata E to persist the data in the one or more cells beyond the existence of the generated user session A unique to the client device A in the memory of the host organization on behalf of the client device A.

In one embodiment a data persistence program extension operates to synchronize data within the one or more cells A D or locations in the user session data table with the corresponding one or more data persistence locations e.g. as specified by metadata E . In such an embodiment the data persistence program extension further operates to synchronize updated data within the one or more cells A D or locations in the user session data table with the corresponding one or more data persistence locations e.g. within database when the one or more cells A D or locations in the user session data table are updated responsive to update data received within a second request received from the client device A. For example where a client device A C engages in multiple interactions with the application new data modified updated or changed data or deleted data determinable from the second request or subsequent request after a first request is synchronized back to the user session data table previously established for that client device A C. Such synchronization or updating may be fulfilled via table population program extension with respect to updating the user session data table and fulfilled via the data persistence program extension with respect to persisting data e.g. as specified by persistence mappings in the metadata to separate file stores and databases on behalf of the client device A C for data which requires persistent storage beyond the existence of a user session A C for the client device A C.

In accordance with one embodiment transmitting the response to the client device A C responsive to the request includes generating a renderable User Interface UI based on the updated user session data table and transmitting the renderable UI to the client device A C for display responsive to receiving the request .

In one embodiment the metadata D further defines a plurality of controls each control specifying display logic for one or more of the plurality of data elements as specified by the mapping defined within the metadata C of the metadata . For example the controls associate particular data elements with one or more display elements e.g. text boxes labels lists check boxes etc. . In one embodiment generating the renderable UI is based on the metadata D of the metadata and based further on the data in the user session data table . For example in one embodiment generating the renderable UI includes incorporating each of the plurality of controls defined by the metadata into the renderable UI incorporating for each of the plurality of controls the display logic specified by each control into the renderable UI and incorporating each of the plurality of data elements into the renderable UI based on the display logic specified by each control wherein each of the plurality of data elements are retrieved from the user session data table . For example once the user session data table is populated based on the input data mapping metadata C such data elements may then be taken from the user session data table rather than having to retrieve them from other locations. As depicted data elements are incorporated into the renderable UI within cells A B C and D for example as retrieved from and corresponding to cells A D. In accordance with one embodiment a UI rendering program extension operates to generate the renderable UI .

The controls and their display logic may be utilized to define and incorporate into the renderable UI UI events and UI elements such as custom check boxes and check box chains e.g. related or forced selection force exclusion of one or more check boxes based on the activation of another UI locks custom links URLs pointers etc. custom display types custom UI entry types and so forth. Controls and their UI elements may be incorporated into a renderable UI transmitted to the client device A C and integrated with transactional data and other data systems and functionality provided within the host organization s on demand services and cloud computing infrastructure.

In one embodiment subsequent to the host organization transmitting the renderable UI to the client device e.g. one of A C the client device displays the renderable UI via a display device communicatively interfaced with the client device e.g. A in which displaying the renderable UI includes rendering display elements at the client device A corresponding to the plurality of controls incorporated into the renderable UI transmitted to the client device A by the host organization .

In one embodiment each of the plurality of controls incorporated into the renderable UI define at least one event selected from the group of events which includes a read event specifying a source location from which to read data to be displayed via the renderable UI e.g. data may be sourced from within the multi tenant database system from another database from a location in memory from a file store an so forth . The group of events further includes a display only event specifying that data displayed is not updateable by the client device via the renderable UI e.g. identifying non writeable non modifiable and non updatable cells such as one of cells A D within the renderable UI and an input text event designating input received from a rendered field at the client device A C as update data for a UI entry field e.g. an updateable modifiable or writable cell among cells A D and further designating a target location in the user session data table in which to store the update data e.g. designating one of cells A D as an updateable cell .

In accordance with one embodiment transmitting the renderable UI to the client device A for display includes transmitting a single web page having dynamic presentation logic therein to the client device A for rendering via a web browser in which the single web page includes presentation logic to render the plurality of controls and logic to receive update data from the client device A via the single web page for submission to the host organization from the client device A within a second request .

In one embodiment the dynamic presentation logic of the single web page updates a rendering of the plurality of controls at the client device A responsive to receiving the update data from the client device A when the update data received affects one or more dynamically calculable fields rendered by the presentation logic of the single web page. For example code may be utilized within the dynamic presentation logic and or the single web page to define one or more relationships between various displayed elements such code may be introduced into the dynamic presentation logic and or the single web page based on the metadata A. For example the metadata D for user interface controls may provide the source for such dynamic presentation logic in accordance with some embodiments responsive to which the UI Rendering Program extension invokes javascript or similar programming constructs dynamically based on the metadata D. In one embodiment a control e.g. one control is embedded into the single web page in which the lone control is responsible for controlling multiple behaviors to display multiple sets of data.

In some embodiments when received update data affects a displayed element the dynamic presentation logic calculates and then appropriately displays the calculated value via the single web page rather than initiating an exchange with the host organization . A simple example of a calculable field is that of for example an extended price which may be defined simply as unit price multiplied by a quantity. In such an example the extended price may be a display only field e.g. not a UI entry field as there is not likely a need to manually calculate and enter the extended price into a computer implemented UI. Instead if either unit price or quantity were to be updated by client device A the received update data may be utilized by the dynamic presentation logic to calculate and re render or update the rendering of the appropriate control based on the dynamic presentation logic and a defined relationship between the fields. Eventually the update data e.g. either quantity or unit price or both in this example is returned to the host organization with the second request and written into the user session data table as appropriate. Dynamic presentation logic may be implemented via for example php perl asp jsp javascript rails and other such appropriate web technologies capable of implementing dynamic presentation logic.

In one embodiment the dynamic presentation logic of the single web page implements a plurality of tabs for individual display at the client device A in which each of the plurality of tabs is to display a first subset of the plurality of controls and to hide from display a remaining subset of the plurality of controls . Only one tab need be displayed at a time via client device A yet all the tabs and the relevant controls having the appropriate display logic may be embedded within defined by the dynamic presentation logic of the single web page in which the single web page is included with or corresponds to the renderable UI transmitted to the client device A from the host organization . In such an embodiment each tab operates in the context of the other tabs. Thus while dozens or hundreds of discrete elements may be selectable via the first tab only those selected elements from the first tab will cause the second tab to present display render UI entry fields e.g. via the controls for contextually appropriate elements on the second tab. Alternatively refreshable pages may be utilized in place of tabs in which subsequent pages refresh in accordance with the dynamic presentation logic of the single web page without initiating interaction with the host organization .

In one embodiment the host organization further receives the second request from the client device A having update data A therein and the host organization further a validates the update data A against the one or more cells within the user session data table which are updateable e.g. updateable cell B within cells A D may be designated as an updateable cell by the client device A and b updates the one or more cells within the user session data table which are updateable e.g. updateable cell B within cells A D with the update data A from the client device A C based on the validation. For example pursuant to successful validation the update data A may be written into updateable cell B. Alternatively should the validation fail e.g. cell B is not designated by the metadata e.g. such as by the metadata for input data mapping C as being modifiable updateable or writeable based on user supplied data an error message may responsively be generated and the write update modification will fail. In such a way the user device is prevented from successfully presenting corrupted or maliciously altered data into the user session data table .

In an alternative embodiment validation may additionally include comparing the update data A provided against various validation masks. For example the update data A may be compared against an allowable range against a minimum or maximum threshold against a data type e.g. character only digit only date only min length max length one of an enumerated set etc. . Where a validation mask is utilized non compliance with such a validation mask may additionally trigger an error message and a write or update failure regardless of whether or not the cell e.g. one of A D is designated as being updateable.

When a second request is received by the host organization the application will again process its metadata . However the application extender will process any update data A by updating the user session data table based on the properly updated and validated information submitted by the client device A C. In such an embodiment the client device A C need not submit all data back to the host organization which was included in a renderable UI sent to the client by the host organization but rather only updated information or modified information need be submitted back to the host organization within a second request . In some embodiments the client device A C may additionally identify a user session such as user session A for client device A.

Update data A received may be reflected within the user session data table via the application extender conducting further processing of the second request . For example further processing my be conducted via the table creation program extension which may introduce additional columns or data fields if necessary or further processing my be conducted with the table population program extension which may populate or update data within the user session data table based on the update data A. Application extender then repeats the first processing operation in view of the update data A associated with the second request via the application . For example refer again to at elements and in which the application extender facilitates processing of the request or second request via the application on behalf of the requesting client device A C.

The application extender and its constituent program extensions may then process any output or response received from application similar to that which is depicted at for the responsively generated output . In this example such processing is on behalf of a client device which is already being interacted with such as A.

By processing the metadata associated with application and whatever application output is yielded by the application and reflected in the updated user session data table the application extender remains completely dynamic such that it does not hardcode or maintain specific table structures specific input data mappings specific data persistence mappings specific controls and so forth. Instead the application extender and its sub components may instead dynamically process any metadata A between each of several interactions with a same client device e.g. A and between each of several interactions with different client devices A C thus providing a flexible framework for implementing a session table framework which provides for example enhanced security and also state information between interactions with a particular client despite the application operating as a stateless implementation.

In one embodiment a non transitory computer readable storage medium having instructions stored thereon supports execution of the instructions via a system such as a system within host organization . In such an embodiment when the instructions are executed by a the system having a processor and memory therein the instructions cause the system to perform a method perform operations or implement computer executable instructions which include receiving a request from a client device A C in which the request specifies an application available via the host organization generating a user session e.g. one of A C which is unique to the client device A C in a memory of the host organization creating a user session data table within the user session A C of the memory processing the request via the application specified by the request on behalf of the client device A C updating the user session data table based on the processing of the request and transmitting a response to the client device A C responsive to the request .

In one embodiment system includes a memory and a processor or processors . For example memory may store instructions to be executed and processor s may execute such instructions. System includes bus to transfer transactions and data within system among a plurality of peripheral devices communicably interfaced with bus . System further includes web server and or request interface for example to receive data requests return responses and otherwise interface with remote clients such as client devices located within customer organizations A C. Web server and or request interface may operate as a request interface to receive requests second requests and or other transactions and service requests on behalf of the host organization in which the system operates. Some transactions received at web server may be transaction requests to be transacted against a multi tenant database system communicably interfaced with the host organization in which the system operates.

System is further depicted as having a hosted application capable of performing processing at the request of an application extender e.g. such as application extender logic module or application extender and indirectly on behalf of a requesting client device A C. File repository provides storage as necessary for the system for example to store metadata on behalf of an application extender and to store other data which may be sourced into a user session data table and so forth. Global caching layer provides caching services to communicably interfaced devices and systems and in particular provides caching of status information and defined rules defined controls and transactional data retrievable based on or in support of defined business rules and or controls etc. in accordance with the fulfillment of requests received from client devices of the customer organizations.

Distinct within system is an application extender agent or an application extender logic module which includes Table creation module table population module UI Generator module data persistence module and data validator module . Any or all of the components of application extender logic module may be hardware based such that each is enabled by the hardware of system in conjunction with the system s processor s and memory to carry out the described capabilities. In accordance with one embodiment table creation module provides a mechanism to create a user session when necessary unique to a client device sending a request to the host organization and further to generate a user session data table within the user session based on a table structure defined by metadata. Table population module operates to retrieve and also populate data into the user session data table based on an input data mapping defined by metadata. UI Generator module operates to incorporate controls into a renderable UI based on metadata and also data elements necessary in support of the controls based on the metadata where the data elements are incorporated from the user session data table. Data persistence module operates to implement data persistence into a communicably interfaced database such as a multi tenant database system or regular database based on a mapping defined within the metadata e.g. providing synchronization between a data element or cell stored within memory and a location within a database system . Data validator module operates to validate update data received e.g. via a second request responsive to a transmitted renderable UI . Validation may include verifying that update data corresponds to an updateable field or cell within the user session data table or verifying that update data complies with a validation mask corresponding to the target location for the update data.

In one embodiment a system is to operate within a host organization in which the system includes a processor to execute instructions a request interface to receive a request at the host organization from a client device in which the request specifies the application e.g. specifies application a memory to store a user session unique to the client device on behalf of the client device a table creation program extension module of an application extender to generate a user session data table within the user session of the memory based on metadata associated with the application specified by the request in which the metadata specifies a generic set of columns or data fields for use with the application specified by the request a table population program extension module of the application extender to populate data into the user session data table based on the metadata associated with the application specified by the request and a User Interface UI rendering program extension module of the application extender to generate a renderable User Interface UI based on the metadata associated with the application specified by the request and based further on the data in the user session data table. In such an embodiment the application extender of the system is to process the request via the application specified by the request on behalf of the client device and to further cause the table population program extension module to update the user session data table based on output received from the application .

In one embodiment such a system further includes a web server in which the web server implements the request interface to receive request at the host organization in which the system operates from a client device and in which the web server is to further transmit the renderable UI to the client device for display responsive to the request having been received at the request interface of the web server .

In one embodiment the system further includes a data persistence module or program extension module which is to synchronize data within one or more cells of the user session data table with a corresponding one or more data persistence locations in a database. In such an embodiment the data persistence module or program extension module is further to synchronize updated data within the one or more cells in the user session data table with the corresponding one or more data persistence locations when the one or more cells in the user session data table are updated responsive to update data received within a second request received from the client device.

Method begins with processing logic for receiving a request at the host organization from a client device block .

At block processing logic generates a user session unique to the client device in a memory of the host organization and at block processing logic creates a user session data table within the user session of the memory.

At block processing logic populates data into the user session data table based on metadata associated with the application specified by the request.

At block processing logic processes the request via the application specified by the request on behalf of the client device. For example an application extender submits the request or a modified intermediate request to a hosted application for processing.

At block processing logic updates the user session data table based on the processing of the request.

At block processing logic generates and transmits a renderable User Interface UI based on the updated user session data table to the client device for display.

At block processing logic receives a second request from the client device responsive to the response transmitted to the client device and at block processing logic validates the update data against one or more cells within the user session data table which are updateable by the client device and updating the user session data table based on the validation. For example validation may include verification that update data corresponds to a cell in the user session data table which is designated as updateable by the client device verification that the update data is written into a designated UI entry field or verification that update data complies with a data validation mask.

At block processing logic processes the second request via the application using the update data in the user session data table.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and a persistent database and or a multi tenant database implementation which communicate with each other via a bus . Main memory includes a hosted application which performs processing at the request of an application extender logic module and indirectly at the request of a client device. Main memory further includes a persistence module which implements synchronization and data persistence operations between data elements within a memory of the computer system and a communicatively interfaced database based on mapping defined by metadata. Main memory and its sub elements e.g. and are operable in conjunction with processing logic and processor to perform the methodologies discussed herein.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality which is discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. . The computer system may further include an application extender agent or the application extender logic module to perform operations including retrieving metadata and facilitating the processing of requests submitted by client devices specifying the hosted application in accordance with the described embodiments.

The secondary memory may include a non transitory machine readable or computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card .

While the subject matter disclosed herein has been described by way of example and in terms of the specific embodiments it is to be understood that the claimed embodiments are not limited to the explicitly enumerated embodiments disclosed. To the contrary the disclosure is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosed subject matter is therefore to be determined in reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

