---

title: Secure local server for synchronized online content management system
abstract: Systems, methods, and non-transitory computer-readable storage media for securely accessing locally stored synchronized content using a local web server. A client application on a client device may receive from a web browser on the client device a request to access a local content stored on a client device. The client application may be configured to synchronize the local content with a remote content stored in an online content management system. The client application may issue a challenge for the web browser. The client application or the online content management system may then receive a response to the challenge. If the response is a valid response to the challenge, the web browser may be allowed to access the local content via the client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09516107&OS=09516107&RS=09516107
owner: DROPBOX, INC.
number: 09516107
owner_city: San Francisco
owner_country: US
publication_date: 20140826
---
This claims the benefit of priority to U.S. provisional application No. 62 008 428 filed on Jun. 5 2014 which is expressly incorporated by reference herein in its entirety.

The present technology pertains to online content management systems and more specifically pertains to securely accessing synchronized data using a local web server.

An online synchronized content management system such as Dropbox from Dropbox Inc. of San Francisco Calif. allows its users to store and synchronize data on a cloud based storage and across multiple client devices. Thus a user may upload a personal folder to the content management system and then share the folder on multiple user devices by having duplicate copies of the folder on each of the devices. The instances of the shared folder though may be residing on different devices can be kept synchronized. In other words through the process of synchronization the contents of the shared folder on the server and the multiple client devices can be kept identical. Even the slightest modification made by the user to one of the instances of the folder can automatically be replicated in other instances of the folder in a matter of seconds.

Contents stored in an online content management system can be accessed using either a native client application or a web interface. For example a user may be able to access files stored in an online content management system using both a client application provided by the service that is installed on the user s device and through a web browser. A user of the web browser can use the web browser to surf the Internet. During or after surfing the user can decide to use the web browser to access one or more of her content items e.g. files stored at the online content management system. Since the browser is already open and in use the user may find it more convenient to use the browser to access the online data than it would be to switch to a dedicated content navigation application such as Windows Explorer on Windows operating systems or Finder on Mac operating systems to access local data which is kept synchronized with the remote data in the online content management system. Moreover the user experience associated with accessing online data using the web browser can vary depending on the speed and or reliability of the network connection e.g. Internet speed and or availability .

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for a local web server operable with a native client application a web browser and a synchronized online content management system. A client application corresponding to an online content management system can communicate with or include a local web server. The local web server can be used to access and or interact with data stored locally on a client device through a navigation application such as a web browser. To ensure secure communication between the web browser and the client application the client application and web browser can complete a challenge response protocol.

As part of the challenge response protocol the client application possibly through the local web server can receive from the web browser a request to access a local content stored on the client device. The client application may be configured to synchronize the local content with a remote content stored in the online content management system. The client application may issue a challenge for the web browser. The response to the challenge may then be received. If the response is a valid response to the challenge then the web browser may be allowed to access the local content via the client application.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for accessing and interacting with local data synchronized with an online content management system using a web browser. The user s client device can be configured to include a local web server. The local server can work in conjunction with the client application or be part of the client application to access and or interact with the locally stored data which is synchronized with the online data at the content management system. For example the client application can include a Secure Socket Layer SSL certificate and a private key for a particular uniform resource locator URL e.g. ocms localhost.com and can run a hypertext transfer protocol secure HTTPS web server bound to a loopback address e.g. 127.0.0.1 . Then the URL can point to the loopback address. Via the local server a navigation application such as a web browser can access and interact with the locally stored data instead of the online data. Since the data is local network availability and or Internet speed will not impact performance. However this approach may have a number of security issues even when using HTTPS and SSL certificates.

First because the SSL certificate is distributed with the client application anyone with access to the client device can also access the certificate. Second malicious attackers can redirect the ocms localhost.com URL to a non loopback Internet Protocol IP address in the network outside the client device by for instance fraudulently impersonating a domain name server DNS . Attackers can thus trick legitimate browsers into communicating to the wrong address. Additionally since such redirection can occur before during or after data synchronization performing an initial verification may not be sufficient on its own. Third local code running on the client device can masquerade as the client application. Fourth malicious code locally running on the client device can masquerade as a browser application and attempt to communicate with the client application. Fifth an attacker can perform a man in the middle attack by intercepting communication between the client application and the browser application. Sixth an attacker can configure other websites to trigger a request to the client application. Additional security issues may also exist.

To address these security issues the presently disclosed technology can include a challenge response protocol to establish a secure communication channel between the web browser and the native client application. In other words the client application may issue a challenge such as random bits of data such that only a legitimate web browser may be able to respond with the valid response to the challenge. By verifying the response to the challenge the client application may be able to establish a trusting relationship with the web browser. The disclosed technology can enable the user of a client device to use a web browser to securely access data stored locally. The client device can include a client side application corresponding to an online content management system. The client side application can communicate with the online content management system to synchronize data stored locally on the client device with data stored on the online content management system. A local web server can be implemented on the client device to work in conjunction with the client side application such that the local web server can access the data stored locally. The client device can run a web browser that communicates with the local web server. A user of the client device can use the web browser to connect to the local web server to access the synced data stored locally on the client side.

Advantages of accessing the data stored locally using the web browser via the local web server may include performance improvements offline access to the data and use of native client applications to interact with the data. The online content management system can include a challenge response protocol that can be carried out by the client side application and the web browser to ensure that the web browser and the client side application can securely send sensitive data and take privileged actions on the data.

With respect to implementing various embodiments of the disclosed technology an exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Online synchronized content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . The client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as digital data documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders or other mechanisms of grouping content items together with different behaviors such as collections playlists albums etc. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Authenticator module may also generate store and verify a cryptographic nonce so that a client application and a web browser running on a client device may authenticate each other and establish a secure connection based on a trusted relationship. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

Content management system can be configured to maintain a content directory identifying the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. The content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. Multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. The content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

Sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

With reference now to and and show exemplary possible system embodiments. For example content management system client devices and or service providers as shown in may each be implemented as exemplary system of or exemplary system of . The more appropriate embodiment will be apparent to those of ordinary skill in the art when practicing the present technology. Persons of ordinary skill in the art will also readily appreciate that other system embodiments are possible.

To enable user interaction with computing device input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. Output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with computing device . Communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

Storage device can include software modules for controlling processor . Other hardware or software modules are contemplated. The storage device can be connected to system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

Client application can be configured to communicate with online content management system that is running on one or more servers . Client application can communicate with content management system over a network such as the Internet. Client application can communicate with content management system to synchronize data stored locally i.e. local data local contents local files etc. on client device with data i.e. online data remote contents etc. stored at content management system . For example particular pieces or portions of data stored locally on client can be synchronized with respective pieces or portions of data stored at content management system . Accordingly content items e.g. files and or other information can be stored and synchronized at both content management system and client device . The synchronization between the data stored locally on client and the data stored at content management system can occur at one or more specified times such as at a specified time on a daily basis or at a time specified by a synchronization policy e.g. whenever a threshold percentage of data has been modified .

Online content management system can store data associated with users or other entities. For example online content management system can be configured to include accounts for multiple users each respective user account storing data for a respective user e.g. User A . User A s account with online content management system can include data such as content item X e.g. file X content item Y content item Z and so forth.

User A can run client side application that is compatible with online content management system . Client application can be configured to communicate with content management system . Via communication client application can synchronize local data associated with User A s local account and data stored under User A s account at content management system . For example local content items e.g. files X Y and Z can be synchronized respectively with content item X content item Y and content item Z stored at content management system . User A s local account can be a directory on client device . Content items files and or other data placed in the directory for User A s local account on client can be synchronized with data included in User A s account on content management system .

As shown in client application can interact with data stored locally e.g. content item X content item Y content item Z etc. under User A s account . Local web server can also interact with the data stored locally such as by interacting with the local data via client application .

Browser can access local web server to interact with the data stored locally e.g. content item X content item Y content item Z etc. . Browser can function as a navigational tool to view read browse or otherwise interact with the local data e.g. content item X content item Y content item Z etc. . As shown in through communication browser can access local web server to interact with the local data.

Accessing data e.g. at content management system via connection can serve as a backup or alternative to accessing the local data e.g. via local web server and connection . Accessing the locally stored data synchronized with the data at content management system via local web server can offer several advantages over using the connection e.g. Internet connection to access the data at content management system . These advantages can include but are not limited to improved performance offline access to data and the ability to utilize native applications for interacting with certain data.

As discussed above one advantage of accessing synchronized local data via local web server is improved performance. Improved performance can include faster interaction and or operation with the local data. For example the speed of opening content item can be significantly increased when content item is opened from browser via local web server and client application as compared to opening content item synchronized with content item from browser via web connection . Content item as well as synchronized content item can be an image file. Locally opening a full resolution version of image content item via local web server can be significantly faster than opening image content item from online content management system . Local connections e.g. can have significantly less latency issues than other network connections e.g. .

In another example improved performance can include generating previews for data. Content items and can be image files. As such thumbnails can be generated for image files and . The generating and displaying of the previews e.g. thumbnails can be performed more efficiently on client device as compared to generating previews at online content management system and then transmitting the previews from content management system to client for display. The generating of the thumbnails for local data can be performed using computing resources of client computing device .

As discussed above another advantage of accessing local data is that a user can still have access to the data when there is no network connection e.g. to content management system . In other words accessing data e.g. stored at content management system can only occur when client can connect to content management system . An advantage of accessing local data is that the data can still be accessed when the Internet is unavailable or disabled e.g. . In one example a user can board an airplane that does not provide wireless Internet connectivity. During the flight the user can decide to read a document e.g. on client on content management system . Using browser to access local web server the user can read the document e.g. on client even though there is no Internet available during the flight.

In another example the user can be listening to a music file that is synchronized on client as file and on content management system as file . If the user plays file on content management system via browser and if the connection between browser and content management system is lost then the playing of file can be interrupted. In contrast if the user plays local file on browser via local web server then the playing of file can continue even if there is no connection e.g. to content management system .

In exemplary system embodiment local web server and client application are implemented on client device such that local web server and or client application can communicate with the operating system of client . It follows that browser can access local web server and or client application to communicate with the operating system of client . Local web server and or client application can ask the operating system which applications are native to a particular piece of data. As such another advantage of locally accessing synchronized data is that the data can be interacted with and or manipulated using native applications or applications that are configured to be operated with the data.

In one example browser can navigate to image file via local web server . From browser an instruction can be sent via local web server to select which native application to use to open image e.g. an option to Open With . . . with respect to file . The instruction can correspond for example to a right click of a mouse with respect to an icon representing file . Image editor can be included among those native applications installed on client . A command initiated from browser can cause image editor i.e. native application application configured particularly for file or for a file type associated with file to open file . Opening image file using image editor can provide a richer or otherwise better experience than compared to opening image at content management system with a simpler web image viewer application.

A domain name for online content management system can be created such as https www.ocms localhost.com . In order for local web server to accept HTTPS connections there must be a public key certificate for local web server . The certificate must be signed by a trusted certificate authority in order for browser to accept the certificate without warning. Certificate authority can certify or verify that the certificate holder e.g. domain is indeed the operator of the web server e.g. local web server that presents the certificate.

In local web server can be set up with SSL certificate which can be prepared for example by an administrator of content management system . SSL certificate can be verifiable with certificate authority . In one example in order to access local web server browser can go to domain https www.ocms localhost.com which can also be prepared or set up by an administrator of content management system . Domain name https www.ocms localhost.com can be configured to resolve to the loopback IP address e.g. 127.0.0.1 which points back to client device and more specifically to local web server . Browser can verify with certificate authority that SSL certificate of local web server is valid. Then HTTPS connection can be established such that browser can access local web server via domain name https www.ocms localhost.com .

An entry for domain name can be stored in local domain name service DNS . This can allow browser to resolve domain name to the loopback IP address such as 127.0.0.1 even when there is no Internet connection. In one example the entry for domain name can be configured to have a long time to live TTL to further ensure or increase the likelihood that browser will be able to resolve domain name to the loopback IP address.

In some cases web browser can establish a connection with client application using a connection other than WebSockets such as utilizing a proxy via an online content management system server e.g. www.ocms.com or using doubly encrypted HTTPS traffic. For example both web browser and client application can send challenge data to www.ocms.com. The challenge data can then be used as a secure identifier for the connection and www.ocms.com can relay any messages. In another example the protocol can include a lightweight replay protected authenticated encryption channel on top of HTTPS using the challenge data as a session key. Then web browser can send encrypted messages directly to client application .

After web browser establishes a connection with client application client application can create local temporary file that may include a nonce or other challenge data. A nonce can be a randomly generated number or bit string that is used only once in a cryptographic communication. Client application can store local file in storage on the client device where it is accessible only to the authenticated local user and or locally run applications. Additionally client application can generate a URL associated with local file . After creating local file and the URL to local file client application can respond to web browser with the URL.

In some cases client application can split the challenge data into multiple parts such as through a secret sharing algorithm. In this case client application can embed a part of the challenge data in the generated URL and client application can generate one or more local files containing the remaining parts. Additionally the local files can contain web browser executable instructions such as JavaScript instructions. Client application can generate the URL such that when web browser executes the URL web browser may be directed to local file . Web browser application can then execute the instructions contained in the local file in order to re create the challenge data. For example the file can contain JavaScript instructions that recombine the parts. Web browser may then use the re created challenge data as part of its response data.

Prior to or after creating local file client application can perform one or more security verifications or sanity tests such as ensuring that the connection from web browser is associated with the correct local user the URL associated with local web server e.g. https www.ocms localhost.com resolves to an appropriate loopback address such as 127.0.0.1 no unauthorized processes are running on the client device and the processes are listening only on appropriate ports the web browser is one of the white listed i.e. pre approved browsers the web browser is running under the same operating system user account as the client application the origin header of the request is from the online content management system etc.

Other security measures can be implemented. For example in a dual account environment where the client application may handle more than one content management user account at a given time on a single client device after a web browser requests to the desktop client application for data access for user account A the client application can check whether it is running as the user account A. The client application can spawn separate processes for different user accounts e.g. the first process handles user account A and the second process handles user account B . The client application may determine whether at least one of the multiple processes is currently running under the user account A. In other words if a client process is currently running as user account A then the client application may proceed as normal. Likewise the client application may check whether there is a paired account linked which may run as a separate process and determine whether that other process is running as user account A. If the other process is running as user account A then the client application may proceed as normal. However if neither of the client processes is running as user account A then the client application can close the connection with the web browser and deny the web browser access to the local content.

Web browser can receive the URL from client application and use the URL to read local file . For example JavaScript instructions on www.ocms.com can validate the URL and load the location of local file . Web browser can then call the JavaScript postMessage method to transfer the challenge data from local file to web browser .

In some cases web browser can load local file into HTML iframe . iframe can call the JavaScript postMessage method to send the challenge data to the opening frame. The opening frame can then forward the challenge data to client application and then immediately close. iframe can be an invisible iframe. Alternatively web browser can read in local file into a pop up window. The pop up window can call the JavaScript postMessage method to send the challenge data to client application and then immediately close.

Once client application receives response data from web browser i.e. the challenge data retrieved from local file by web browser client application can determine whether the response data is valid i.e. the response data corresponds to the challenge data . If client application determines that the response data is valid client application can certify that the challenge response protocol has been satisfied for the established connection. Future communication between web browser and client application over the established connection can be considered secure. That is both sides of the communication channel are communicating with an authorized endpoint. Therefore web browser and client application can send sensitive data and take privileged actions on the data.

As described above a user can have an account with the content management system. In some cases to access the account the user can provide user credentials. For example when the user navigates to the exemplary URL for the online content management system www.ocms.com using a web browser the user may be presented with a login page where the user enters a username and password. Likewise the user may be required to provide user credentials so that a native client application can access the user s account on the content management system.

In some cases the user may not be simultaneously logged into both the native client application and www.ocms.com. However to access local content using the web browser it may be necessary for the user to be logged into both. When the user is logged into either the client application or to the online content management system via a web browser e.g. www.ocms.com the known login credentials can be used to authenticate the user on the other. For example if the user is logged in on the client application the login credentials from the client application can be used to authenticate the user on www.ocms.com. This can occur prior to during or after completing the challenge response protocol.

When a communication channel e.g. WebSocket is established between web browser and client application client application and web browser can engage in challenge response protocol by using online content management system as a proxy. In order to verify that communication between client application and web browser is secure client application may first send a signal to online content management system to request an issuance of challenge data. The challenge data can be a randomly generated string of data such as a cryptographic nonce. In response to the request online content management system can generate such challenge data e.g. nonce and send the challenge data back to client application . In the alternative instead of requesting to online content management system to issue the challenge data client application itself can generate the challenge data and notify online content management system of the challenge data that has been generated. Either way online content management system can store the challenge data generated by either online content management system or client application in storage so that it can be retrieved later for comparison with the response data provided by web browser as will be discussed below.

Once the challenge data is generated and online content management system obtains a copy of the challenge data client application possibly via local web server can send the challenge data to web browser . After web browser receives the challenge data it creates response data based on the challenge data. In some cases the response data created by web browser may be identical to the challenge data. In other cases the response data may include additional information. Web browser can now forward the response to online content management system for verification.

Online content management system may receive the response data from web browser and verify its validity by comparing it with the challenge data that online content management system has previously stored i.e. either by generating the challenge data or receiving the challenge data from client application . For example if the challenge data was a nonce then online content management system can determine whether the previously generated nonce value matches the nonce value received from web browser . If it is determined by online content management system that the response data is the valid response to the challenge data then online content management system can notify web browser and or client application that the challenge response protocol is satisfied thereby assuring that the connection between web browser and local web server and by extension client application is secure. If online content management system determines that the response data does not correspond to the challenge data it can similarly notify the negative result to web browser and or client application .

Although the exemplary challenge response protocol illustrated above depicts client application as issuing the challenge to web browser one of ordinary skill in the art will understand that other embodiments where the challenge is issued by web browser to client application are also possible. For example web browser may initiate the validation process by requesting to online content management system to generate the challenge data such as a nonce. Alternatively web browser itself may create the challenge data and transmit the challenge data to online content management system for safekeeping. Web browser may then issue the challenge to client application which forwards the received data to online content management system as the response data for verification. Subsequently online content management system can compare the previously generated challenge data with the response data received from client application to determine whether the connection between client application and web browser is a secure one. Online content management system can transmit the result to client application and or web browser .

Having disclosed some basic system components and concepts the disclosure now turns to the example method embodiments shown in . For the sake of clarity the methods are described in terms of system as shown in configured to practice the method. Alternatively the methods can be practiced by client device service provider or online content management system as shown in system as shown in or client application local web server or web browser as shown in . The steps outlined herein are exemplary and can be implemented in any combination thereof in any order including combinations that exclude add or modify certain steps.

System may issue by the client application a challenge for the web browser . Issuing the challenge may entail creating challenge data on the client device and receiving the response may be accomplished by receiving by the client application response data created by the web browser based on the challenge data. The challenge data and or the response data can be a cryptographic nonce. The challenge data may be created by the client application and stored at a location on the client device that is accessible only to applications that are running locally on the client device in order to prevent unauthorized users or devices from storing creating and storing counterfeit challenge data. Issuing the challenge can be also done by creating and storing a file on the client device. The file may contain the challenge data and instructions for creating the response data based on the challenge data. Issuing the challenge may also include transmitting by the client application to the web browser a location identifier that identifies a location of the challenge data on the client device. Data traffic between the client application and the web browser can be doubly encrypted. Issuing the challenge can also be accomplished by receiving the challenge data from the online content management system and forwarding the challenge data to the web browser.

System may receive a response to the challenge . The response data may have been transmitted by the web browser to the client application via a JavaScript postMessage method a hypertext markup language iframe and or a pop up window. Receiving the response may include receiving from the online content management system a validation of the response data that had been created by the web browser based on the challenge data and sent by the web browser to the online content management system. System may determine whether the response is a valid response to the challenge . When the response is a valid response to the challenge system may allow the web browser to access the local content via the client application . Otherwise system may deny access to the web browser .

System may transmit by the web browser a response to the challenge . Transmitting the response can include creating response data by the web browser based on the challenge data and transmitting the response data by the web browser to the client application. Alternatively transmitting the response can include creating by the web browser response data based on the challenge data and transmitting the response data to the online content management system.

System may determine whether the response is a valid response to the challenge . Upon receiving verification that the response is a valid response to the challenge system may access the local content by the web browser via the client device . The verification may be received from the online content management system when the online content management system determines that the response data is a valid response to the challenge data. If system determines that the response is not a valid response then system may deny the web browser access to the local content .

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

The computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims. Thus the claims are not intended to be limited to the aspects shown herein but are to be accorded the full scope consistent with the language claims wherein reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. 

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A phrase such as a configuration may refer to one or more configurations and vice versa.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. Moreover claim language reciting at least one of a set indicates that one member of the set or multiple members of the set satisfy the claim.

