---

title: Business transaction context for call graph
abstract: An application which utilizes a single thread is monitored and context for the individual requests and business transactions operating on that platform are provided. A wrapper is placed is around an object that calls a request. The wrapper renames a request object. Request objects are renamed with a unique name when they are called. When a call stack is sampled, the sampler will retrieve the unique name. Performance data associated with the unique name may be correlated to a business transaction and particular request as metrics are subsequently analyzed. For subsequent reporting, such as call graph reporting, the report or call graph will have requests in the context of a particular business transaction and a particular request instance. This provides more context in reporting of an business application request for frameworks that utilize as single request for multiple threads.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563485&OS=09563485&RS=09563485
owner: AppDynamics, Inc.
number: 09563485
owner_city: San Francisco
owner_country: US
publication_date: 20141031
---
The World Wide Web has expanded to provide web services faster to consumers. Web services may be provided by a web application which uses one or more services to handle a transaction. The applications may be distributed over several machines making the topology of the machines that provides the service more difficult to track and monitor.

Application monitoring based on threads is relatively straightforward when one request is carried out by a single thread. Some web based applications are based on frameworks that run on only one thread at a time one thread processes many requests. These frameworks are more difficult to monitor and provide context for individual requests and transactions. Additionally if the framework allows requests to operate asynchronously a single threaded framework may not provide useful information when it is monitored. A single request called over and over may not be differentiated from other instances of the same request executed within the thread.

In such a system the application logic is decomposed into one or more functions. One or more of these function is registered with the framework such that when a request is received by the framework the framework will call one or more of the registered functions. An application using the framework may utilize services such as other networked services databases caches etc on the same computer or other computers. When an application utilizes one of these services the application may provide one or more of its functions to an API application programming interface for the service. When the framework detects completion progress or failure of the operation utilizing the service the framework will call one or more of the functions supplied to the API.

It would be useful to be able to monitor a framework that runs on only one thread and provide context for the requests within that thread.

The present technology monitors an application which utilizes a single thread and is able to provide context for the individual requests and business transactions operating on that framework.

A wrapper function is a function object that references another function the wrapped function and when called 1 does zero or more operations 2 Calls the wrapped function 3 Does zero or more operations. A function is said to be wrapped when one or more references to that function have been replaced by a wrapper function that references the original function. Each wrapper function may be given unique set of attributes. These attributes can include but are not limited to name file name and line number. When a call graph is created by a the framework certain nodes in the callgraph may be correlated with specific wrapper functions because the attributes of the wrapper function are in the call graph.

A wrapper is placed around a function that is called when a request is received. The wrapper is specific to the particular incoming request to the framework. The mapping between the attributes of the wrapper and the specific incoming request may be remembered stored in memory disk etc. . Performance data associated with the unique name may be correlated to a business transaction and particular request as metrics are subsequently analyzed. For subsequent reporting such as call graph reporting the report or call graph will have requests in the context of a particular business transaction and a particular request instance. This provides more context in reporting of a business application request for frameworks that utilize as single request for multiple threads such as the NodeJS built on Chrome s JavaScript runtime.

An embodiment may include a method for monitoring an application may modify an object with a callback wrapper by agent stored in memory. Sampled call stack data may be received by the agent. The sampled call stack data may include a unique identification for each request in a business transaction. The sampled call stack data may be reported to a remote server. The remote server reporting data associated with each request instance of a business transaction based on the sampled call stack data.

An embodiment may include a system for monitoring a business transaction. The system may include a processor a memory and one or more modules stored in memory and executable by the processor. When executed the one or more modules may modify an object with a callback wrapper by agent stored in memory receive sampled call stack data by the agent the sampled call stack data including a unique identification for each request in a business transaction and report the sampled call stack data to a remote server the remote server reporting data associated with each request instance of a business transaction based on the sampled call stack data.

The present technology monitors an application which utilizes a single thread and is able to provide context for the individual requests and business transactions operating on that framework.

A wrapper function is a function object that references another function the wrapped function and when called 1 does zero or more operations 2 Calls the wrapped function 3 Does zero or more operations. A function is said to be wrapped when one or more references to that function have been replaced by a wrapper function that references the original function. Each wrapper function may be given unique set of attributes. These attributes can include but are not limited to name file name and line number. When a call graph is created by a the framework certain nodes in the callgraph may be correlated with specific wrapper functions because the attributes of the wrapper function are in the call graph.

A wrapper is placed around a function that is called when a request is received. The wrapper is specific to the particular incoming request to the framework. The mapping between the attributes of the wrapper and the specific incoming request may be remembered stored in memory disk etc. . Performance data associated with the unique name may be correlated to a business transaction and particular request as metrics are subsequently analyzed. For subsequent reporting such as call graph reporting the report or call graph will have requests in the context of a particular business transaction and a particular request instance. This provides more context in reporting of a business application request for frameworks that utilize as single request for multiple threads such as the NodeJS built on Chrome s JavaScript runtime.

One platform on which business services are provided over a network is node.js. Node.js is a software platform for scalable server side and networking applications. Node.js applications are written in Java script and can be run with the node.js runtime on Windows a Macintosh operating system and Linux with no changes. Node.js applications maximize throughput and efficiency using non blocking input output interfaces and asynchronous events and run on single threaded processes. Unlike Java node.js may process workflows using a single thread. Therefore node.js applications cannot be monitored at the level of typical Java applications which a processor may associate with different threads. The present technology provides more context in reporting of an business application request on platforms that utilize as single request for multiple threads such as the NodeJS

Client may include any device through which a user may initiate a request over network to servers . Client device may include network browser and be implemented as a computing device such as for example a laptop desktop workstation or some other computing device. Network browser may be a client application for sending requests and queries to an application server such as application server as well as viewing content provided by an application server. Client device may include hardware and or software configured to access a web service provided by network server .

Mobile device may be implemented as a portable device such as for example a mobile phone smart phone tablet computer or other portable device. Mobile device may include network browser which may include a client application for viewing content provided by an application server such as application server via network server over network

Network may be used to receive and process communications including requests and responses between client mobile device and network server . In some embodiments network may also exist between other machines of such as for example between application servers and between application servers and data store as well as other machines. Network may include any public or private network for communicating data such as for example a local area network a wide area network the internet an intranet a wireless network a cellular network or a combination of these networks.

Network server may receive and process requests received from client and mobile device over network . Network server may be implemented by the same machine or a different machine as application server . In some embodiments a network server may be an actual device or a logical device that processes requests and forwards requests or generates new requests to application server to be serviced and returned to client or mobile device .

Application server may communicate with network server application servers and datastore and may include one or more applications . Application server may be implemented on the same machine or a different machine as network server .

Application server may include one or more node.js applications. The node.js application may be written in Java script and run on a Windows Apple operating system OS or a Linux OS. Application server may also include monitoring components which identify application functions and trace application functions which execute as part of the execution flow in the node.js platform. More detail for application server is discussed below with respect to the block diagram of .

Application servers and may communicate with each other application server data store network server and tracer . Each of application servers and may include one or more node.js applications and monitoring components similar to application server . Application servers may process distributed business transactions that involve node.js applications on one or more of servers .

Tracer may be used to trace application functions of node.js applications. Tracer application may receive information from monitoring components installed on an application of application server and . Tracer may receive event information and transaction identifiers from application monitoring components stitch the information and transaction identifiers together to determine virtual threads and runtime data for each virtual thread contextual information and report that data to a user. The data may be reported in any of several typical reporting methods including alerts email messages SMS messages and via a web based interface viewable by client device .

Data store may receive requests from application servers process the request and transmit a response to the requesting server.

A sampler may retrieve stack data associated with a callback wrapper at step . The sampler may capture all data handled for the single thread. For example with respect to a nodeJS platform the sampler may be a V8 sampler. In this case the sampler may be turned on and off and will return all sampled data from a call stack upon being turned off. The sample data may be reported to a controller at step . The reported data may then be associated with requests of a particular business transaction at step .

When a request is received at step the request may include a business transaction identifier. Hence as soon as the request is received the business transaction it is associated with is known. The agent that modifies an object with a callback wrapper may correlate the business transaction information to a unique identifier used to name the callback wrapper. The unique callback wrapper will show up in the sample data as it was the name provided to the call stack when that particular request is executing. The correlation between the business transaction and request to the unique identifier provided to the callback wrapper may be done locally at the agent or remotely at a controller.

A call graph may be provided with business transaction information and request information as context for individual request instances at step . Other requests may be reported as well in addition to call graphs such as for example lists of business application transactions snapshots of application performance and other reports.

Once the object is created an agent may replace the listen method within the created server in the detected object at step . The agent may then place hooks in the listen method to replace the callback at step . The agent may then retrieve a callback wrapper from a pool of wrappers at step . Each wrapper in the pool of wrappers may have a unique name. The callback object may be wrapped with a callback wrapper at step . As a result a callback wrapper wraps the detected object and the detected object will have the unique name of the callback wrapper. Rather than executing request instances which have the same name different instances of the same request but in different business transactions will have a name that is associated with a global unique identifier the name of the callback wrapper retrieved from the pool of wrappers.

When the object is executed the name associated with the callback wrapper will be placed on a call stack when the object is executed. The agent may correlate the retrieved callback wrapper retrieved from the pool of wrappers with the business transaction detected in the request and the particular request being executed. Therefore when the agent later receives sampled call stack information the agent may detect the unique callback wrapper name and associate it with a business transaction and corresponding request.

The computing system of includes one or more processors and memory . Main memory stores in part instructions and data for execution by processor . Main memory can store the executable code when in operation. The system of further includes a mass storage device portable storage medium drive s output devices user input devices a graphics display and peripheral devices .

The components shown in are depicted as being connected via a single bus . However the components may be connected through one or more data transport means. For example processor unit and main memory may be connected via a local microprocessor bus and the mass storage device peripheral device s portable storage device and display system may be connected via one or more input output I O buses.

Mass storage device which may be implemented with a magnetic disk drive or an optical disk drive is a non volatile storage device for storing data and instructions for use by processor unit . Mass storage device can store the system software for implementing embodiments of the present invention for purposes of loading that software into main memory .

Portable storage device operates in conjunction with a portable non volatile storage medium such as a floppy disk compact disk or Digital video disc to input and output data and code to and from the computer system of . The system software for implementing embodiments of the present invention may be stored on such a portable medium and input to the computer system via the portable storage device .

Input devices provide a portion of a user interface. Input devices may include an alpha numeric keypad such as a keyboard for inputting alpha numeric and other information or a pointing device such as a mouse a trackball stylus or cursor direction keys. Additionally the system as shown in includes output devices . Examples of suitable output devices include speakers printers network interfaces and monitors.

Display system may include an LED liquid crystal display LCD or other suitable display device. Display system receives textual and graphical information and processes the information for output to the display device.

Peripherals may include any type of computer support device to add additional functionality to the computer system. For example peripheral device s may include a modem or a router.

The components contained in the computer system of are those typically found in computer systems that may be suitable for use with embodiments of the present invention and are intended to represent a broad category of such computer components that are well known in the art. Thus the computer system of can be a personal computer hand held computing device telephone mobile computing device workstation server minicomputer mainframe computer or any other computing device. The computer can also include different bus configurations networked platforms multi processor platforms etc. Various operating systems can be used including Unix Linux Windows Macintosh OS Palm OS and other suitable operating systems.

When implementing a mobile device such as smart phone or tablet computer the computer system of may include one or more antennas radios and other circuitry for communicating over wireless signals such as for example communication using Wi Fi cellular or other wireless signals.

The foregoing detailed description of the technology herein has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the technology to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. The described embodiments were chosen in order to best explain the principles of the technology and its practical application to thereby enable others skilled in the art to best utilize the technology in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the technology be defined by the claims appended hereto.

