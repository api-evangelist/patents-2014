---

title: Delivery of authentication information to a RESTful service using token validation scheme
abstract: Information useful for authenticating an entity is sent over a back channel during the authentication of an entity to a RESTful service. The delivery of the entity-related information is triggered by the validation of a service ticket received by the authentication component of the RESTful service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09300653&OS=09300653&RS=09300653
owner: JERICHO SYSTEMS CORPORATION
number: 09300653
owner_city: Dallas
owner_country: US
publication_date: 20140421
---
This application claims priority to U.S. provisional application 61 691 248 filed Aug. 20 2012 entitled Methods and Apparatuses for Authentication and Authorization Field of the Invention. 

This invention was made with Government support under FA8750 12 C 0038 awarded by Air Force Research Laboratory. The Government has certain rights in the invention.

The specification relates the authentication of entities which can be persons or non persons to RESTful services and retrieval of entity related information which comprise attributes.

Authentication comprises the verification of the identity of a user process or device often as a prerequisite to allowing access to resources in an information system. see NIST IR 7298 Revision 1 Glossary of Key Information Security Terms. Authorization comprises access privileges granted to a user program or process or the act of granting those privileges.

Representational State Transfer REST is a communications style that allows a client machine for example a computer running a Web browser to communicate to a server for example a computer running a service. Client server communication is stateless between requests meaning each REST interaction typically contains the information for a component to understand the message. REST is considered a lightweight protocol suitable for distributed hypermedia systems. In the REST style a data object is uniquely named using a Uniform Resource Identifier URI . The REST style uses operations such as GET PUT POST HEAD and DELETE. The REST style is loosely coupled does not require a message header human readable and stateless between requests. Other characteristics of REST are described in chapter 5 of the doctoral dissertation of Roy Fielding Architectural Styles and the Design of Network based Software Architectures University of California Irvine. REST was initially described for use with Hypertext Transfer Protocol HTTP but is not limited to that protocol. Because REST works well for distributed collaborative hypermedia information systems it has become a popular approach for supporting the World Wide Web WWW .

REST Web services are resources accessed by users through for example a Web browser. RESTful Web services allow simpler application development and are ideal for interaction with Web browsers via JavaScript or AJAX. REST has become the predominant Web service design favored by mainstream Web service providers such as Facebook Google and Yahoo. Information passed in a REST request is described as front channel exchange.

Security Assertion Markup Language SAML is an XML based standard ratified by the Organization for the Advancement of Structured Information Standards OASIS that defines the syntax and semantics of SAML assertions and tokens as well as protocols used to request and transmit those assertions between systems. SAML assertions can be used for exchanging authentication and authorization data from a trusted provider to a relying party. A SAML assertion comprises a package of information that supplies zero or more statements made by a SAML authority. see OASIS Security Assertion Markup Language SAML v2.0 March 2005 The integrity of assertions can be protected by cryptographic techniques such as encryption of the assertion encryption of a part of a SOAP message use of SOAP message security use of a SAML token or other enveloping technique. SAML profiles describe how SAML tokens or SAML assertions can be passed by value or by reference.

SOAP originally named for the term Simple Object Access Protocol and ratified by the World Wide Web Consortium W3C is a protocol for exchanging structured information. SOAP is frequently used as the messaging framework in the implementation of Web Services in computer networks. SOAP messages are XML encoded and are considered heavyweight comprising an envelope with a header and body therein.

OpenID OpenID Foundation Corp. Portland Oreg. is an authentication profile that provides a standardized way of authenticating a user for example of a web browser using credentials provided by an OpenID provider. Websites must be specifically configured to accept OpenID credentials for example by using an authentication component that recognizes the authentication protocol. Central Authentication Service CAS can be used to implement authentication protocols. Users register at an OpenID provider and are provided with an identifier typically a Uniform Resource Locator URL . During authentication for example to a web site the user provides the OpenID identifier to the relying party. The relying party redirects the browser to the OpenID provider which authenticates the user and confirms the identity of the user for the relying party.

The invention described herein comprises the exchange of entity information which may include attributes that can be used during the authentication and or authorization of an entity to a RESTful web service. Entity information that can be used in authentication to the RESTful service is not passed in the request to the RESTful service i.e. front channel exchange. Described herein is a methodology of using a secure back channel delivery of entity information using for example a SAML assertion SAML token or similar token.

The invention comprises secure authentication and or authorization of users communicating over REST for example using a web browser. An example supports the secure authentication and authorization of requests made to a RESTful service from a user through an agent for example a browser. A RESTful service can be configured to augment the user request for a service made using a REST architectural style and provide secure authentication and optionally authorization capabilities.

In general front channel refers to passing the SAML assertion or token along with the message requesting a service. In general back channel comprises a direct communication between two system entities without redirecting messages through another system entity for example an HTTP client e.g. user agent . In general a back channel exchange passes at least some of the entity related information which may be attributes separately from the message requesting a service. Attributes define classify or annotate the datum to which they are assigned. For example a user of a RESTful service could hold an attribute clearance assigned to the value top secret. An example implementation uses OpenID Authentication 2.0 protocol and CAS. CAS is available from Jasig an incorporated non profit 501 c 3 organization.

In this document RESTful refers to a communications style comprising one or more REST characteristics described above. For example a communications style comprising data objects that are uniquely named using a Uniform Resource Identifier URI and are exchanged in human readable form. Another example being a communications style that is loosely coupled does not require a message header human readable and stateless between requests. Another example being a communications style that comprises uses operations such as GET PUT POST HEAD and DELETE and is sent in a human readable message format.

A RESTful service can be configured to optionally invoke an authentication component that intercepts the request as shown the example in . An authentication component comprises software configured to verify the identity of an entity which can be for example a user process or device. An authentication component of a RESTful service can be implemented using various architectural patterns such as a filter. There are many ways to authenticate an entity for example the redirection of requester agent for example a client or a browser by authentication component at the RESTful service. HTTP redirection from authentication component allows the user s browser or similar mechanism to interact directly with component operable to receive the user s selection of their identity provider. Component could for example be implemented using CAS.

After receiving the choice of OpenID Provider Relying Party redirects the user agent to the selected OpenID Provider . Component could for example be implemented using CAS. This second redirection permits acceptance of user input for example user input used to authenticate the user to the OpenID Provider component and retrieval of entity related information which can include attributes useful to the authentication of an entity by the authentication component. Attributes may be retrieved from an attribute store .

The successful authentication of the user to the OpenID Provider component and back channel retrieval of entity related information affects the decision made by the authentication component to permit or deny access to the RESTful service .

A RESTful service can be further configured to optionally invoke an authorization component that intercepts the authenticated request as shown in the example in . There are many ways to accomplish the authorization step but the step can be referred to as an enforcement point. An enforcement point which can be a Policy Enforcement Point PEP may further rely on a Policy Decision Point PDP . A decision that the authenticated user is authorized by the PDP infrastructure will permit the user to access the RESTful service .

Relying Party can be implemented to support the OpenID profile using CAS but custom code or other implementations or profiles are acceptable if they provide a back channel process for validation of authentication tokens as described below. The back channel is required so that the user agent does not receive the entity related information destined for the authentication component of the RESTful service.

The user selects an OpenID Provider or equivalent authorization provider. An example of an OpenID Provider using the OpenID architectural style is shown in . Other architectural styles and implementations are possible. The selected authorization provider accepts input that can be used to validate that the user is who he or she claims to be. Authenticating entities can also be non human for example software applications such as Internet robots or spiders.

Proof of user identity can be based for example on knowledge of a password passphrase one time password cryptographic device or shared secret. Other examples include stronger credentials such as tokens smart cards or devices that provide greater assurance of an identity for example through possession of a device tablet personal digital assistant cell phone net book smartphone laptop or other mobile device .

Devices can be augmented to provide strong authentication or multifactor authentication such as the addition of a smart card or fingerprint reader to mobile devices. Examples include cases that add card readers and or fingerprint readers to cell phones RIM BlackBerry Smart Card Reader PRD 09695 001 tablets S.I.C. Biometrics iFMID 500xs and laptops Dell Latitude D430 laptop with Integrated Smart Card Reader and UPEK finger print reader . Alternately smart card readers and fingerprint readers can be external to a device such as attached through use of a USB port such as S.I.C. Biometrics iFMID 300 370 Stanley Global Model SGT111. Smart card reader and fingerprint reader functionality can be added through other means such as Bluetooth examples include baiMobile 3000MP or TopLink Pacific SmartBlue.

Greater trust can be placed in credentials that have been cryptographically signed by a trusted entity. Such signatures may use a manifest created from a hash of the contents of a credential which is then encrypted using an asymmetric key thus demonstrating possession of a key held by the trusted entity asserting the identity of the bearer. Other mechanisms of proof are possible such as the demonstration that the signer is in possession of a shared secret.

Examples of smart cards that can encode digital certificates used for authentication include the U.S. Department of Defense DoD Common Access Card CAC or Personal Identity Verification PIV card. Examples of card readers include contact card readers and contactless card readers. Other authentication mechanisms are possible such as voice recognition fingerprint recognition palm recognition or other biometric mechanisms. Additional mechanisms may be incorporated such as use of knowledge based authentication digital fingerprints learning algorithms anomaly detection and behavior analysis.

Receipt of authentication information which may be two factor authentication information enables OpenID Provider to search and collect entity related information. Entity related information which may include attribute information may be stored in any data store including LDAP or equivalent for example a database management system DBMS . Retrieval of additional information may use the Security Assertion Markup Language SAML to bind the data returned with information asserting both the sender s identity and the integrity of the returned message. One example of such a component could be a SAML attribute responder SAR . Other implementations are possible for example use of a secure channel to a relational database object database XML database or LDAP. RESTful service and associated components Relying Party OpenID provider SAR and LDAP may or may not be on the same computer system server or node. One example deployment is shown in through the use of dashed lines and numbers denoting separate nodes but other deployments are possible.

The result of user authentication to the OpenID Provider component along with any collected entity related information is provided to the authentication component associated with the RESTful service. Authentication associated information for example service tickets can be passed between components using the user s browser for example passing a service ticket using a cookie associated with the user s browser or added to or associated with a redirection URL. Redirection of the user s agent back to the authentication component associated with the RESTful service allows the retrieval of the service ticket or equivalent from a secure cookie appended information in the URL string or other mechanisms. For example in addition to or in place of one or more cookies authentication information can be associated with the user or user agent using plugins proxy cache information or one or more local shared objects LSOs . Authentication of the user may be followed with authorization component . Authorization component can comprise a PEP that communicates to a networked authorization infrastructure that includes a PDP . An alternative example would combine the PDP with the PEP. The authorization infrastructure is useful to determine if the authenticated requester should be allowed access based on the identity of the requester or attributes known about the requester. Front channel information passed in RESTful request may be used in authorization for example IP address geographic location information or agent specific information. Agent specific information available can include agent or browser type agent or browser version language and encoding among others passed in the request which could be an HTTP request. Back channel entity related information collected during authentication as well as front channel information passed with the request and information independently known at the RESTful service can be used during authorization.

Entity related information available from the authentication infrastructure can be made available during exchange of information between components of the RESTful service such as authentication component and authorization component and Relying Party or associated authentication infrastructure . This exchange of information can be done for example during validation of service tickets or similar tokens. This back channel exchange of data is a different communication exchange from the request to the RESTful service i.e. the front channel exchange by the user agent . Additional information such as attributes concerning the environment type of request requested object or information known by the RESTful service may also be used by the authorization mechanism. Authentication of the user to the RESTful service can be accomplished through the use of a software token associated with a communication exchange. Entity related information in tokens can be passed through a back channel for example using a SAML token JSON Web Token JWT or some other token. Tokens permit the use of digital signatures that can be used to identify the source of the token. Tokens also allow the use of XML Signature and XML Encryption for message level security. SAML tokens comprise the definition found in the OASIS WS Security SAML Token Profile standard February 2006 . Secure JSON web tokens may be substituted. Secure JSON web tokens may use JSON Web Signature JWS JSON Web Encryption JWE JSON Web Algorithms JWA JSON Web Key JWK and Simple Web Discovery SWD . SAML assertions comprise the definitions found in the OASIS Security Assertion Markup Language SAML v2.0 March 2005 . SAML assertions can be protected encoded encrypted and verified using other techniques suitable to serve in secure exchanges described herein.

An assertion SAML token SAML assertion or some other token for example from SAR or some other data source can be passed directly or wrapped in another token to the RESTful service with embedded information demonstrating the provenance of the token and additional attributes. Requests to a RESTful service can reuse tokens or assertions in the authentication decision making process if consistent with the security policy of the RESTful service authorization components or attribute source. For example use of the token may require that the RESTful service trusts the issuer of the token the expiration time of the token has not elapsed and the token has not been tampered with etc. Tokens can be created once the user has been authenticated for example to OpenID Provider and included or associated with future request in order to accelerate subsequent authentication of the user to the RESTful service. The validation of the token may require the exchange of information from the RESTful service to the issuer or its agent of the token i.e. over a back channel . Tokens used for authentication can be found in various authentication profiles for example OpenID SAML OAuth and Kerberos. An additional example is illustrated in using the OpenID authentication profile. The use of the CAS as an implementation option supports the creation of tokens called Ticket Granting Tickets TGT and Service Tickets ST . Validation of STs can support the exchange of additional back channel information added to augment attribute information that can be used by an authorization component. An example of the authentication process is diagrammed in . Not all of the steps described are required and some may be unnecessary in certain deployments such as machine to machine access to a RESTful service. The user makes a request at to the RESTful service whose components are represented in the diagram using graphical elements with horizontal background lines . The authentication component receives the request and optionally processes the request. The user s agent for example a browser is redirected to the Replying Party whose functions are represented in the diagram using graphical elements with a solid white background . Replying Party determines if a TGT or ticket granting cookie issued by the Replying Party is identifiable in the user agent s cache . If no ticket is identified the user can authenticate and is asked for an OpenID identifier . The user may choose from a list of OpenID providers or given the opportunity to register for an OpenID provider . If the OpenID identity is retrieved preparations required in the OpenID profile are performed in and . If the OpenID provider does not exist at a retry at or failure message at occurs. If the OpenID provider does exist at a file at is used to connect or if no file exists user input is requested at . If successful at a fetch request is formulated at and the user s agent for example a browser is redirected at to the OpenID provider of choice whose components are represented in the diagram using graphical elements with slanted background lines and . The OpenID provider challenges the user that can include requiring multifactor authentication such as a smart card for example a CAC NIST IR or PIV FIPS PUB . The proffered credentials are validated at and if valid OpenID authentication continues . Any failures result in an error message to the user through the Relying Party. Information in the user s credentials or information known to the OpenID provider can be used to search and identify additional attributes. Entity related information may be returned from a data store for example SAR represented by the graphic element with reverse slanted lines . Entity related information retrieved at and TGT if needed and ST are generated at . A string identifying the TGT can be stored in a tightly scoped cookie which could be called the ticket granting cookie in the user agent s cache by the OpenID Provider. The ST or a reference to the ST may be appended to the redirect URL or stored in the user cache for use by the Relying Party. The Relying Party component validates the ST at and receives entity related information that can use a protected SAML assertion or SAML token from the OpenID Provider. The Relying Party relying upon the authentication by the OpenID Provider issues a ST specific to the user request for access to the RESTful service . The Relying Party creates a TGT to accelerate identification of the user in future requests by the requester. The user s agent is redirected to the RESTful service and uses the ST to authenticate. During the validation of the ST that can be over a secure communications channel such as the Secure Sockets Layer SSL or Transport Layer Security TLS protocols the RESTful service receives the entity related information that can be in a secure token such as a protected SAML assertion or SAML token. More specifically secure exchange of entity related information can use SSL . or TLS . for transport level security and XML Signature and XML Encryption for message level security. Additional ways of representing content secured with digital signatures or message authentication codes include JSON Web Signature JWS JSON Web Encryption JWE JSON Web Algorithms JWA JSON Web Key JWK and Simple Web Discovery SWD .

If information in the cache of the user s agent for example a browser cache allows identification of a TGT by the Relying Party the TGT can be immediately validated . Identification of a valid TGT allows the Relying Party to rely on the previous authentication by the OpenID Provider which can be further restricted based on configuration and the elapsed time. The Relying Party can issue an ST specific to the instant request and will return entity related information that can be in a secure token to the RESTful service during the ST validation step . The entity related information from the data store are not returned directly to the user. An example of the process flow discussed above is shown in . Each column represents the actions performed by the actors introduced in . The user through their agent for example a browser or similar computer program makes a request at to a RESTful service . Redirection at is made to Relying Party which optionally receives the choice of OpenID provider from the user and executes preparations in and as needed to communicate with the selected OpenID Provider at then redirects user agent to OpenID Provider .

The authentication profile used as an example in can be implemented using the CAS architecture. Any similar authentication profile with an implementation architecture that requires the validation of the authentication object would be suitable. In CAS for example the TGT can be identified using information in a secure cookie in the agent cache containing a string identifying the ticket granting ticket. The TGT issuer can use the string to identify the TGT in its database to determine if authentication is required. If the user agent possesses a valid TGT the issuer will issue an ST for use by the user agent for a specific service without additional authentication. An ST is an opaque string recommended to be 256 characters in length that may be passed in the redirect URL to the RESTful service. The issuer receives the ST from the RESTful service and checks its internal database to determine validity. Although the OpenID authentication profile is used in the figure other authorization profiles and implementation architectures may be substituted as long as the validation of the token used in authentication to the service is validated through communication with the issuer.

OpenID Provider accepts authentication credentials which can be multi factor and can include X.509 attributes stored on for example a smart card. An example of data exchanged between user through their agent and OpenID Provider is shown in Table 2.

OpenID Provider receives credentials providing X.509 attributes which may be similar to the information in Table 2 however other types and representations of authentication credentials are permissible. The credentials are checked at and requested attributes are identified using for example the Attribute Exchange AE OpenID 2.0 protocol. Attributes may be retrieved from various data sources for example request at to SAR which may return requested attributes for example by creating or passing a protected SAML assertion or a SAML token returned at . At this point OpenID Provider prepares an ST in response to request . If using a CAS implementation of the authorization infrastructure a TGT may also be generated to accelerate future communication with Relying Party . Other mechanisms may be substituted as long as Relying Party can receive attributes that can be in a secure token.

At OpenID Provider sends the ST to Relying Party in response to request a SAML assertion SAML token attribute information or other information may be included in this exchange. Processing by the Relying Party at triggers the ST validation request that can be over a secure channel such as SLS or TLS. The secure channel used in the instant specification supports a SOAP exchange using one or more SAML assertions over TLS but other tokens and secured channels are possible. The validation request response at also allows the entity related information retrieved by the OpenID Provider possibly from multiple data sources to be sent. Entity related information could be for example attributes describing the user based on PKI X.509 attributes retrieved from the smart card inserted into the card reader described above. Entity related information may have been passed from SAR for example over SOAP using a SAML assertion passed at . Entity related information may be gathered and included for example attributes specifically requested using the Attribute Exchange AE OpenID 2.0 protocol. Attributes can be retrieved from multiple data sources for example DBMS databases database gateways hardware devices sensors computational units and combinations thereof.

Examples of PKI X.509 attributes include the subject s name subject s public key subject s e mail address and issuer of the attributes. Subjects can be persons applications or systems. Attributes may identify privileges the subject may have to execute operations on a system such as create read update and delete operations. As a result of the communication between the relying party and OpenID provider a token which may be a SAML token JWT or some other means for protecting an assertion containing additional attributes can be kept at Relying Party for subsequent authentication requests by user for this or other services which could include RESTful services. The amount of time the assertion can be relied upon can be specific to the implementation and configuration of Relying Party and OpenID Provider . Entity related information that change frequently may require a SAML assertion that carries within it a shorter expiration date or time. In the example implementation shown in Relying Party creates a ST specific to the initial user request at for the RESTful service . Redirection of the user from Relying Party back to the RESTful service at allows the authentication component or similar RESTful service component to read ST at . The authentication component then requests validation of the ticket at from Relying Party which validates at and returns validation information encapsulated for example in a protected SAML assertion SAML token or some other assertion. Entity related information that may be useful to the RESTful service is passed in validation exchange . Entity related information can be sent at to an authorization component to determine access of the authenticated user in the authorization at . In response to the authorization request access is permitted or denied at which determines the content sent to the user at . Entity related information described above are not passed directly to the user agent.

The PDP evaluates the request from the PEP at for example using XML based techniques such as a rules engine. Examples of rules engines include XACML Drools and EnterSpace Decisioning Service ESDS Jericho Systems Corporation . After evaluation PDP issues an authorization decision at that can be based in part on the entity related information passed to the RESTful Service during the validation of the ST used to authenticate the user to the RESTful service. The user can be denied or allowed access to the RESTful service .

A PDP may respond to multiple PEPs or it may respond to a single PEP or it may use a fail over to another PDP or it may be embedded with a PEP or other architectural relationships or combinations thereof. The PDP infrastructure can be centrally managed. Access control rules or policies may be pushed to PDPs or pulled by PDPs. Use of rules or policies allows advanced authorization techniques such as Role based Access Control RBAC Attribute Based Access Control ABAC Risk Adaptable Access Control RAdAC and other approaches. Rules or policies may be stored at a Policy Administration Point PAP .

The system coupled with retrieved entity related information allows fine grain control for example to access data resources or operations that are sensitive that could put health and safety in jeopardy or that could result in financial liability. Examples related to special sensitivity include military data trade secret data business records medical data operations on databases to name a few. Examples related to health and safety include health records access to electronic medical equipment police equipment fire equipment operations on military databases to name a few. Examples related to financial liability include financial records stock trading records access to electronic financial computer resources government records to name a few. Authorization as described herein could be used for access to physical spaces such as a request to open a door from a browser or other application on a mobile device involving a RESTful web service and many other related scenarios.

An example of interactions between the system described and the user are shown in . As shown in the example requests to the RESTful service may be made using a web browser by entering the URL of the desired RESTful service . Although the Mozilla Firefox browser is shown any browser can be used. A partial list of common browsers includes Internet Explorer Microsoft Corporation Chrome Google Corporation Safari Apple Inc. Opera Opera Software ASA and Netscape Navigator AOL Corporation . RESTful interfaces can also be accessed directly by an application without the need for a browser. Examples of applications that may interact with RESTful services include electronic health record applications financial trading applications remote voting applications and military tactical applications. These and similar applications could be stationary or mobile for example hosted on eReaders tablets personal digital assistants cell phones net books smartphones laptops and other devices. URL specifies secure communication over the HTTPS protocol but the unsecured HTTP protocol can be used as shown in . Alternative protocols to HTTP can be used such as SPDY or Stream Control Transmission Protocol SCTP .

As shown in the example GUI shows an example of how OpenID providers can be selected from a list using a drop down menu . A partial list of alternatives to a drop down menu include radio buttons check boxes scrollable lists auto completing auto suggesting text field multi layered tree or allowing the user to type in the OpenID provider.

Authentication of the user by the OpenID provider results in attributes being returned to the Replying Party that may be sent to a RESTful service for uses such as authorization. Approaches to the number and type of attributes include returning all attributes limiting attributes by configuration limiting attributes by security clearance of the receiver or allowing the user to select the attributes returned for example. As shown in the example GUI shows how users can specify attributes such as employee number from an interface. Retrieval of specific attributes can be supported by the use of the Attribute Exchange AE protocol in OpenID 2.0. Table 3 shows an example of data specifying attributes exchanged between the Replying Party and the OpenID Provider. Replying Party example in Table 3 was implemented using CAS other implementations are equally suitable.

The selected OpenID provider requires the user to offer proof of their identity during the authentication challenge. As shown in Instructions can be displayed on the user agent because it has been redirected to the OpenID provider. Multi factor authentication can be used for example requiring the user insert a smart card into a card reader and entering their Personal Identification Number PIN .

One example of the use of tokens allows Single Sign On SSO capability as shown in . User s agent for example browser accesses through to RESTful service named REST WS in the figure. An authorization component or equivalent at the RESTful service uses a mechanism such as a browser redirect at to direct the user s agent at to Relying Party . Redirection allows the user to select their choice of OpenID provider that serves as the authenticating component. When authorization request is made to OpenID Provider redirection of the user agent occurs at allowing the challenge of the user for identifying information. The user provides authenticating information that can vary in strength from simple authentication using passwords to multifactor authentication for example using hardware tokens or smart cards with embedded PKI certificates. Multifactor authentication can be used especially when the higher strength credentials can be used to identify the attributes of the user in a trusted attribute store. One example of a higher strength credential is a PKI certificate issued by a trusted certificate authority. Hardware based or software based components meeting Federal Information Processing Standard FIPS 140 2 certified cryptography modules may be used to support PKI functionality. Examples of vendor FIPS 140 2 certified cryptography modules available include BlackBerry Research In Motion Ltd. Astro Motorola Solutions Inc. OpenSSL Cryptographic Module Red Hat Inc. NetScreen Juniper Networks Inc. and Catalyst Cisco Systems Inc. .

In addition to their use in authenticating a user PKI identifiers such as an X.509 user identifier can be used to locate entity related information. Such entity related information may be directly addressable by the OpenID Provider or retrieved at from one or more data stores such as a Relational database management system RDBMS or LDAP . Entity related information can be encapsulated in a tamper evident envelope such as SAML assertion possibly using SAR . OpenID Provider will create and make available tokens ST and TGT sent at . The TGT is used to accelerate subsequent authentication between Relying Party and OpenID Provider . The ST issued by the OpenID Provider is used to establish authenticated communication between Relying Party and OpenID Provider . In the OpenID example architecture Relying Party communicates with OpenID Provider to validate the ST. This validation back channel reply at can include entity related information in an assertion that can be a SAML assertion . Other data exchange approaches between Relying Party and OpenID Provider can be substituted.

After successful user authentication Relying Party issues a TGT identifier to the user agent s cache can be in a secure web cookie and makes an ST available specific for REST WS authentication for example by appending the ST to the redirection URL. REST WS communicates with Relying Party for ST validation. This validation back channel reply at can include the entity related information in a protected SAML assertion or SAML token . The entity related information can be used for any purpose by REST WS but is especially useful for determining if the user is authorized to access data or protected functionality available through the RESTful service.

Subsequent request to a suitably configured RESTful service at named REST WS demonstrates SSO capability. REST WS requests user authentication at and redirects the user agent to Relying Party that was used previously to authenticate the user to REST WS . Relying Party identifies the TGT using information in the user agent s cache left during the previous authentication. Relying Party relies on the TGT it created for authentication if it is still valid instead of challenging the user for authentication credentials.

Relying Party creates an ST that may be passed by appending it to the URL redirection string that will be used between agent and REST WS . Upon receipt of the ST by REST WS an ST validation request will be sent to Relying Party . Validation at allows entity related information to be passed in a protected SAML assertion or SAML token or some other token. SAML assertion or token may be identical to SAML assertion or token or it may be reissued depending on several factors. Factors may include the expiration of the SAML assertion or related certificates the dynamic or static nature of the attributes the nature of the RESTful service external factors such as national threat level time of day current weather geographic location or configuration settings such as level of assurance or user clearance requirements. Expiration of the assertion or other change in circumstance or external factors may trigger a RESTful service to terminate further communications until the user authenticates to the identity provider again which could be an OpenID provider and retrieves through the exchange of new ST newly retrieved additional attributes that can be passed in a protected assertion SAML assertion or SAML token.

REST WS can use the entity related information in the assertion for example as part of authorization decisions involving the identified user. It can be seen from the discussion that use of a TGT token from Relying Party can simplify authentication to multiple RESTful services. Further validation of the ST issued to each RESTful service for the authenticated user allows the transfer of entity related information that can be used for the determination of authorization to functions and data through each RESTful service. This approach can be used from any device that supports a browser or other agent or application such as eReaders tablets personal digital assistants cell phones net books smartphones laptops and other mobile devices.

One possible approach can provide an SSO solution for a secured Web site allowing a user to login once and be able to access multiple RESTful Web services using for example an Asynchronous JavaScript and XML AJAX framework or RESTful client. In one example the AJAX technique is used allowing computer programs for example web applications to send data to and retrieve data from one or more servers asynchronously in the background without requiring constant re authentication of the user. Ajax can use the XMLHttpRequest object which can be implemented in ActiveX or JavaScript XML or JSON and presentation languages such as HTML XHTML and CSS. Examples of available Ajax frameworks include ASP.NET AJAX jQuery MooTools and YUI Library as representative examples. An example summarizing the discussion above is shown in . User triggers the authentication step by accessing a secured website which may use Ajax or similar technology operable to invoke the authentication process shown in the figure. Access to the website can be through a RESTful architectural style as was shown in but any request triggering the authentication scheme is possible. For example use of SOAP SOAP RPC over HTTP or non HTTP requests to for example a custom API to a service connected over a network. In addition other authentication profiles or combinations thereof can be used for the initial request such as OAuth Shibboleth Information Card Janrain Forgerock or OpenAM. Using OpenID as the authentication protocol shows an example of access to Secured Website triggering redirection of User at to Relying Party for user authentication. Secured Website may also act as a proxy serving as the agent for the user. The OpenID Identifier a URL or XRI is retrieved at . The OpenID string is processed normalized at to create a conformant identifier. Relying Party marshals any information for initiating requests at possibly using HTML Based discovery Yadis or XRI resolution protocols. Relying Party and selected OpenID Provider optionally exchange a shared secret at for secure communications. An attribute claim is optionally prepared at using the OpenID attribute exchange AE extension to request specific attributes. The OpenID Authorization request is made at either directly or through redirection. User is redirected to OpenID Provider . User submits credentials at that can be based on multi factor authentication. Examples of multi factor authentication include for example may be at least two of the factors fingerprint knowledge based voice palm physical token hardware device mobile device smart card and PIN. The user is authenticated at for example by validating the credentials for example cryptographically or by accessing data sources. Alternately a TGT previously issued by the OpenID Provider could be used to authenticate removing the need for the user to reenter their authentication credentials.

Requested or preconfigured entity related information is identified at and missing attributes are retrieved from data sources. For example a request for attributes using SAML could be requested at resulting in an attributes look up at by SAR . Attributes returned from many data sources are possible and some attributes may be returned in one or more assertions SAML assertions or possibly in a tamper evident SAML token at .

Relying Party receives a TGT if it did not have one and a ST at for use with OpenID Provider . ST may be linked to User allowing Relying Party to retrieve separate STs for separate users on separate requests. Relying Party optionally processes ST at and requests validation of the ST at allowing OpenID Provider to return entity related information with validation message at . OpenID Provider and Relying Party can also exchange an assertion SAML assertion or token at . Entity related information may have been from data sources accessed for example by SAR returned in an assertion protected SAML assertion or tamper evident token such as SAML token . Upon verification at Relying Party issues a TGT if one does not exist and makes available an ST specific to the interaction at Secure Website at . Secure Website requests validation at triggering validation by Relying Party at . The validation message may include entity related information from Relying Party at . Additional attributes may be identical to attributes retrieved or known by OpenID Provider or attributes may be processed augmented replaced removed or added to by intermediaries for example Relying Party . Entity related information may be used by Secure Website or passed to other components sites or environments possibly on different computer systems servers or nodes that can use a tamper evident token.

The authentication described above relies upon User submitting authentication credentials at . Alternatively Secure Website could supply credentials that can be PKI credentials at . Request for attributes at would then be based on attributes known about the by Secure Website instead of a user of the secure website. Consequently authentication and authorization at RESTful Services may be based on attributes associated with Secure Website . The identity of the user of the site could be kept secret from calls to RESTful services or disclosed. Further Secure Website could associate an identification object to each user. RESTful Services could use the user identifier to track activity sessions and other information on a Secure Website. This allows use of Secure Website authentication credentials instead of user credentials providing proxy functionality and enhancing the privacy of the user interacting with a RESTful service. Returning to authentication based on User credentials behavior of User on Secured Website may trigger a request to RESTful Service for example triggering a call to determine the current national security threat level at . RESTful Service redirects to Relying Party which may identify User based on the TGT issued previously. Relying Party may then issue an ST without requiring presentation of credentials by User specific to User for access to the RESTful Service which could be a RESTful gateway interfacing to other services. RESTful Service communicates with Relying Party for authentication at . Relying Party returns ticket at to authenticate User on Secured Website . Validation of the ST at allows Relying Party at to send entity related information to RESTful Service that can be in an assertion protected SAML assertion or a tamper evident token such as a SAML token. Other profiles and protocols could be used in place of the OpenID ticket validation to exchange information from the Relying Party to RESTful Service . Tickets may be passed directly or indirectly i.e. through the use of a browser or other agent . An example of a ST issued by Relying Party and used to authenticate to RESTful Service is shown in Table 4.

The example in Table 4 shows the granting of service ticket specifically for User by Relying Party for RESTful service . The SAML assertion in the example has been excised for brevity. In this example implementation the ST shown in Table 4 remains at the Relying Party and the ST reference ST 1 NGdGiAdZT7xbIE2LYGPp cas is passed during the redirect at . Other implementations are possible. The authentication component at the RESTful service is specially configured to accept and act on the ST reference.

Once authentication information and entity related information is received RESTful Service may request authorization at from a PDP or decisioning service that can be ESDS . The request is evaluated at and a response returned at . RESTful Service responds to request at . In this way the TGT issued by Relying Party allows other requests triggered by the behavior of User on Secured Website to be serviced by other RESTful services without requiring entering the user credentials i.e. inserting a smart card and typing a PIN. This approach described above provides additional benefit with client side implementations such as Ajax. The degree of security of the client or secured website can be in question based on the source of the request examples include requests from a non local IP network range requests from outside a Virtual Local Area Network VLAN a request from a different physical location for example outside of a Sensitive Compartmented Information Facility SCIF a guarded area or commercial building requests from outside of a cloud implementation or requests between differing security levels for example a client side implementation calling services requiring a specific security clearance . In these cases SSO can be established using a relying party known to be secure without requiring authentication information from the requestor which might not have adequate security.

Further RESTful Service receives attributes from a trusted source for example SAR that can be identified using a high assurance token for example a cryptographically signed token assertion protected SAML assertion or SAML token. Exchanged tokens may use for example SSL 3.0 or TLS 1.0 for transport level security and XML Signature and XML Encryption for message level security. Additional ways of representing content secured with digital signatures or message authentication codes include JSON Web Signature JWS JSON Web Encryption JWE JSON Web Algorithms JWA JSON Web Key JWK and Simple Web Discovery SWD .

One example of the use of a SAR implementation is shown in . SAR retrieves attributes from one or more data sources and can return them in a tamper evident envelope such as an attribute statement in a signed SOAP message. One implementation of SAR checks if the requester is authorized to make the request for attributes and or checks if the requester is authorized to receive each returned attribute from the request.

Client which could be an OpenID Provider requests attributes. The request could be for a specific set of attributes or all attributes known about a specific entity. An X.509 identifier such as a Distinguished Name DN issued by a known certification authority known to the SAR or SAR data sources could identify the entity. An example of a shared knowledge environment would be a Privilege Management Infrastructure PMI . HTTP Interface accepts requests from Client . The HTTP Interface which may be omitted provides an interface capable to negotiate a secure channel such as TLS or SSL and may be a web service. In this way Client may mutually authenticate with the HTTP interface as part of a TLS or SSL 3.0 handshake that can use an X.509 v3 certificate and send a SOAP bound SAML attribute query request to the SAML Responder . The client certificate may be used to identify the DN that will be used to bind to the data source. SAML Responder communicates using Data Source Connectors to one or more data sources for example LDAP SQL or others . Data source connectors may be operable to select the data store based on the type of attributes requested. SAML Responder creates a cryptographically signed SAML attribute assertion containing the retrieved attributes which can be sent by HTTP Interface as to Client . Use of a signed tamper evident assertion which may be a protected SAML assertion or a security token provides higher assurance of the origin and integrity of the attributes however use of the SAML assertion may be omitted or replaced with some other protocol or mechanism.

A detailed example of data exchange with the SAR is shown in . Client which may be an OpenID Provider requests attributes that can use a SAML Attribute Query Request at . HTTP Interface forwards the request at to SAML Responder . If a secure token is used in the request such as protected SAML assertion or SAML token it is validated for example using PKI validation and CRL checking on the SAML client X.509 certificate at . Additional methods for validating certificates could be used such as the Online Certificate Status Protocol OCSP . SAML Responder securely connects if it is not already at to one or more data sources represented as Data Source which could be a DBMS or gateway to other data sources. A request for attributes is sent at to Data Source which returns data at . SAML Responder builds a SAML assertion including data from data source and cryptographically signs at . The assertion which may be tokenized is forwarded at to HTTP Interface for return to Client at . The SAR optionally includes a component that restricts what attributes can be requested by the client. For example a requestor without a security clearance asking for all attributes pertaining to a user would not be allowed to query databases requiring a security clearance. Other examples include information on or associated with the certificate used by the client which made be an OpenID provider for example attributes the signing authority or information retrieved based on identifiers on the certificate. In addition attributes that are retrieved from the data sources are evaluated to determine if the requester is authorized to receive them. For example a clinician requesting all medical records on a patient at another hospital might be authorized to search medical databases but not authorized to receive certain data the patient had requested to be kept private. Other examples include information on or associated with the certificate used by the client which made be an OpenID provider for example attributes the signing authority or information retrieved based on identifiers on the certificate. One or both rule engines may be controlled or owned by different entities and or operating in different environments possibly on a different computer systems servers or nodes. Policy stores may be local or remote or a combination thereof.

Benefits of the system described above are magnified when integrated into an overarching PKI infrastructure which can span multiple security domains. Smart card based authentication using PKI uses standard formats such as X.509 for encoding digital certificates or attribute certificates. Semantic interoperability can be achieved for example by using similar X.509 directory hierarchies between trusted certificate authorities. Thus X.509 identifiers such as DN or e mail component can be used to identify related attributes in a trusted data store. For example the use of X.509 in an LDAP compliant data store provides attributes related to the entity with the DN as well as the organizational unit that the name is hierarchically associated with. That is the distinguished name from a digital certificate on a smart card could identify a corresponding DN in an LDAP compliant data source. Attributes or roles associated with the entity s organization in the LDAP compliant data source could for illustration include attribute values such as logistics NATO employee and auditor. This entity related information can be formulated into a tamper evident SAML assertion signed by a trusted entity such as the SAR. When a RESTful service validates a ST issued by the component labeled the Relying Party the entity related information from the X.509 directory can be included for use by the service.

For example a request to access shipping information through a RESTful service might require an organizational attribute logistics during the authorization of the authenticated user. During the validation of the proffered ST the signed SAML assertion encoding the LDAP attributes is returned using the back channel. The attribute values in the SAML assertion can be traced to the trusted LDAP and its use of the signed digital certificate read from the smart card during the multifactor authorization step. Therefore the possession of the required logistics attribute value by the user is assured to the level of trust of the underlying infrastructure . The authorization process can identify the request by the user as appropriate at least in part on possession of the returned entity related information without requiring further interaction with the entity. Other attribute role and privilege information could be used.

CAC attributes useful for authentication and authorization are found in NIST IR 6887 Appendix D DoD Common Access Card CAC Data Model. Appendix D is hereby incorporated herein by reference. Department of Defense directory attributes useful for authentication and authorization are found in DoD Enterprise Directory Services Capability Contact Attributes Specification Jul. 14 2009 which is incorporated herein by reference.

The authentication and authorization techniques described herein do not have to be executed at the first use of a RESTful service. Authentication and authorization may be achieved differently but behavior of the user activity of the user external events time related events or other conditions may require stronger authentication of the user. This requirement to raise the assurance level of a session could employ the authentication and authorization techniques described herein for example by requiring the user to provide a smart card to continue communications to a RESTful service based on changing conditions such as a request to access restricted data. The components and related infrastructure described above can be implemented in many ways. Users can communicate as described with any of several available web browsers for example Firefox Google Chrome Internet Explorer Opera or Safari. Mobile devices may use operating systems for example Android Google Inc. BlackBerry OS Research In Motion Ltd. iOS Apple Inc. Symbian OS Nokia Inc. Windows Phone Microsoft Inc. and Brew Qualcomm . Communication may use the Hypertext Transfer Protocol HTTP that can be over TLS or SSL also known as the Hypertext Transfer Protocol Secure HTTPS protocol. Users may also use non browser custom applications that support redirection over the HTTPS or the HTTP protocols. Additionally alternative protocols to HTTP or HTTPS can be used such as SPDY or SCTP. Requests for RESTful services can be made from mobile devices such as phone laptops personal digital assistants or similar devices.

RESTful services or web sites may be made available over computer networks using general purpose computer servers and common operating systems. Examples of operating systems include Unix FreeBSD Linux Solaris Novell NetWare Mac OS X Microsoft Windows OS 2 TPF and eComStation. RESTful services web sites authentication components and authorization components discussed herein can be executed in application server environments servlet containers or custom system software. Many computing platforms are available such as the Java Platform Enterprise Edition J2EE that can support application server environments. Examples include GlassFish Oracle Corp. WebSphere IBM Corp. JBoss Red Hat and Apache Geronimo Apache Software Foundation . Many servlet containers are available such as Jetty Eclipse Foundation Apache Tomcat Apache Software Foundation and Tiny Java Web Server TJWS . Other computing platforms and applications are available and can be substituted.

RESTful service is comprised of server which can be multiple servers part of a server farm virtual servers or cloud services. Server is depicted as having processor and available memory operable to execute computer executable instructions associated with application . Multiple processors can be used. Although a single memory is shown for server a wide variety of types and combinations of memory may be employed such as random access memory RAM virtual memory solid state memory removable medium memory rotating media memory and other types of computer readable media. Application is depicted as having authentication component and authorization component . PEP is a software component integrated into or called from authorization component .

Authentication Services is depicted as a collection of servers configured to provide specific capabilities. Although each capability is shown on a separate server two servers or one server could be used. Alternatively multiple servers could be used for one or more of the capabilities comprising the authentication services. One or more servers may be under the control or ownership of one or more different organizations examples include credit bureaus insurance agencies healthcare providers state or national government agencies political organizations commercial organizations etc.

Server comprises processor which could be implemented with multiple processors. Processor and available memory are specifically configured and operable to execute computer executable instructions associated with relying party application . As part of the execution of relying party application ST and TGT ticket information and SAML certificates can be supported by memory . Although a single memory is shown for the server a wide variety of types and combinations of memory may be employed such as random access memory RAM virtual memory solid state memory removable medium memory rotating media memory and other types of computer readable media. This is also true for memory and memory discussed below. Server comprises processor which could be implemented with multiple processors. Processor and available memory are specifically configured and operable to execute computer executable instructions associated with OpenID provider application . As part of the execution of OpenID provider application ST and TGT ticket information and SAML certificates can be supported by memory .

Both server and server are able to communicate to network allowing communication with client . Server can use network to communicate to authentication component . Server can use network but that is not required as long as server can communicate to both server and data stores. depicts multiple data stores indicated by the ellipsis connecting data store A and data store Z however multiple data stores are not required. Data stores are not required to be in the same physical space as each other or server . Data stores may be under the control or ownership of one or more different organizations examples include credit bureaus insurance agencies healthcare providers state or national government agencies political organizations commercial organizations etc. However data stores must be able to communicate with server .

Server comprises processor which could be implemented with multiple processors. Processor and available memory are specifically configured and operable to execute computer executable instructions associated with HTML interface SAR application PEP and PDP PEP is a software component integrated into or called from SAR application . PEP communicates with PDP which can be embedded on the same server as shown or on another server as depicted for example in PDP on server used by PEP .

Server comprises processor which could be implemented with multiple processors. Processor and available memory are specifically configured and operable to execute computer executable instructions associated PDP . As depicted server communicates to server through network . However PDP could instead be on server similar to PEP and PDP on server .

As described above in a different implementation SAR application would not be used and data sources depicted as exemplary data stores A and Z could be accessed from server . Other implementations are possible. The concepts herein can be used in many applications and does not depend on the use of any specific credential or token.

