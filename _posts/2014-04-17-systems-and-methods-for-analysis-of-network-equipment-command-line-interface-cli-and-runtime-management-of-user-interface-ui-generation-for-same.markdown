---

title: Systems and methods for analysis of network equipment command line interface (CLI) and runtime management of user interface (UI) generation for same
abstract: Systems and methods are disclosed that may be implemented for network management system (NMS) configuration management support for network devices using a learning and natural language processing application to capture the usage and behavior of the Command Line Interface (CLI) of a network device with the aid of a CLI knowledge model, which in one example may be ontology-based.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043252&OS=09043252&RS=09043252
owner: Dell Products LP
number: 09043252
owner_city: Round Rock
owner_country: US
publication_date: 20140417
---
This application is a continuation of pending U.S. patent application Ser. No. 13 238 807 filed on Sep. 21 2011 and entitled Systems And Methods For Analysis Of Network Equipment Command Line Interface CLI And Runtime Management Of User Interface UI Generation For Same the entire disclosure of the foregoing application being incorporated herein by reference.

This invention relates generally to network equipment and more particularly to analysis of command line interface CLI and management of user interface UI for the same.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Information handling systems are often networked together into networking systems that include a variety of different information handling system types performing different functions within the network. Recently there has been a rapid growth in network equipment types as well as types of networking systems. New network architectures services equipment and features are added modified in the market place at a rapid pace. Thus networking systems are tasked with providing an increased diversity of services using a growing breadth of network architectures devices components and features from different vendors.

A block diagram of a conventional networking system is illustrated in . The deployed networking system of is composed of multiple network devices from different vendors. These network devices include servers switch stack storage arrays routers gateways remote wireless controllers access points switches wireless controllers and access points . Also shown are virtual machines operating systems and software applications that may be executing on servers . A network management system NMS may be provided as shown to assist with network management and service provisioning. NMS is a combination of hardware and software components configured to maintain and administer a networking system and is typically implemented on an information handling system configured as a server or administrator computer that communicates with the various network devices through network router devices switch stack and switches as shown. One example of such a NMS is a Dell OpenManage Network Manager available from Dell Products L.P. of Round Rock Tex.

NMS systems are challenged with maintaining parity with new network equipment and equipment firmware software. NMS configuration management functionality can lag months and years behind the network devices available in the market. Moreover a NMS cannot know all the possible ways a user wants to configure a device. Additionally an increased amount of security maintenance is required for operators granting configuration access on a device by device basis.

Integrating device support into a NMS is tedious time consuming and expensive. In addition to maintenance of parity each new device operation system or command line interface CLI command structure typically requires NMS development to start from zero. A development team typically must study the behavior of the devices with regard to factors such as the following 1 Available application programming interfaces APIs such as SNMP CLI and Web APIs 2 Timing and sequence of management messages from NMS to from device including command count per message time delay between messages and different command and parameter values and 3 device responses between commands such as success responses error responses error codes and interrupts. For all the variances in devices and firmware NMS development teams are required to perform analysis design and test. Device behavior changes timings sequences are not documented in a machine readable format.

Additionally existing protocols have limited impact on integration. SNMP is an active standard that enables machine to machine communication using a protocol. Existing SNMP protocols are a cumbersome path to use for network configuration. SNMP is a protocol designed for computer to computer interface but was not designed for user interface Graphical Command Line or Web . Not all device configuration options are supported by SNMP. Furthermore use of SNMP does not match natural configuration flow of device interfaces for example. SNMP MIBs Management Information Base come from different standards that evolved overtime for diverse market applications.

Furthermore CLI API conversion is non standard and not portable. A majority of network operators and others use CLI to configure devices and CLI is the protocol of choice for human to machine interface. Thus CLI is the natural forum of communication designed for the network device and CLI is commonly used by network administrators to manage and configure devices. CLI is also used CLI for scripting and automation and is also typically available on network devices for free. Network equipment vendors typically enable management of a new feature in CLI first before any other management interface. Therefore CLI is usually the first interface to implement new features for a product while SNMP MIBs on the other hand do not implement every CLI command.

However CLI command behaviors timings sequences are not documented in a machine readable format. Each vendor has its own CLI structure syntax and operation modes. Moreover a given vendor s CLI can vary between products. Finally CLI can vary between firmware versions of the same product. License keys installed on a device can also change the CLI. Industry standard CLI definitions to be implemented are not available today and not envisioned for the future. Thus CLI can be considered a unique management interface experience associated with a given vendor s equipment.

Disclosed herein are systems and methods that may be implemented for NMS configuration management support for network devices using a learning and natural language processing application to capture the usage and behavior of the Command Line Interface CLI of a network device with the aid of a CLI knowledge model. In one embodiment the disclosed systems and methods may be implemented to create and employ an ontology based CLI knowledge model to generate management user interfaces UI at runtime. In one exemplary embodiment the disclosed systems and methods may employ a CLI knowledge model that is incrementally developed using hierarchical language e.g. XML or HTML format or database and ultimately results in producing an ontology based CLI knowledge model. In one exemplary embodiment an ontology based CLI knowledge model may be employed to integrate or link a NMS across a network e.g. such as the Internet corporate Intranet etc. to external sources e.g. network resources such as web content management systems e.g. such as Wikis Blogs code repositories such as SourceForge etc. shopping portals or services e.g. Amazon warranty services e.g. Dell semantic web applications e.g. GoodRelations Twine mapping websites e.g. Google Maps test and design tools e.g. Silktest Microsoft Visual Studio auto generated CLI manuals etc.

As used herein ontology may be defined as a semantic framework that formally represents and organizes systems concepts schemas and relationship among them within the target domain s of knowledge. Ontologies rely on lower level database schemas to store data and an ontology based CLI knowledge model may encapsulate the semantic framework database schema and CLI data knowledge collected from a given network device.

In one exemplary embodiment networking system operators may employ the disclosed systems and methods to increase and optimize the operating expense savings associated with NMS usage by providing the networking system operators with the ability to configure multiple network devices at once from a common e.g. single NMS configuration screen or other display type. The disclosed systems and methods may also be implemented in one exemplary embodiment to handle the increased amount of security permissions maintenance that is required for networking system operators who must grant configuration access on a network device by network device basis e.g. by tracking the identity of entities or persons causing changes in configuration of particular network devices as well as the types of particular changes being made on these particular network devices.

The disclosed systems and methods may be implemented to build a knowledge base for natural language text processing of CLIs. Advantages of the disclosed systems and methods may be realized over conventional NMS systems and methods without requiring modifications to existing switch equipment. These advantages include but are not limited to operational expense savings for the operator of a networking system ability to quickly add support for new network devices from different manufacturers to an existing NMS reduction in NMS development time potentially from months to days reduction in switch test development time provision of at a glance views that are closely aligned with a user s network operations and services.

In one respect disclosed herein is an information handling system including one or more processing devices configured to execute a network management system NMS that includes an ontology based command line interface CLI knowledge model where the one or more processors of the information handling system are configured to be communicatively coupled across a network to one or more network devices of a networking system and where the one or more processing devices are configured to execute the NMS to maintain and administer the networking system using the ontology based CLI knowledge model.

In another respect disclosed herein is a method of managing a networking system including providing an information handling system the information handling system including one or more processing devices communicatively coupled across a network to one or more network devices of the networking system and using the one or more processors to execute a network management system NMS that includes an ontology based command line interface CLI knowledge model to maintain and administer the networking system using the ontology based CLI knowledge model.

As shown in information handling system of this exemplary embodiment includes at least one central processing unit CPU which may each be an Intel Pentium series processor an Advanced Micro Devices AMD processor or one of many other processors or other types of suitable processing devices. System memory device e.g. random access memory RAM is coupled as shown to CPU via memory controller chip MCH that facilitates memory operations. Also coupled to CPU is network interface card NIC to enable communication with various multiple network devices which together may form a networking system managed in a manner as further described herein by an NMS that is executing on CPU .

Still referring to an input output hub IOH is coupled as shown to processor e.g. together with an I O controller hub processor chip to facilitate input output functions for the information handling system. One or more storage devices such as media drives e.g. hard disk drives NVRAM Flash or other suitable media drive devices or any other suitable form of storage may be coupled to IOH and its processor chip to provide permanent storage for the information handling system. One or more input devices e.g. keyboard mouse touchpad etc. and a display device e.g. LCD display together with its corresponding display controller may be coupled to IOH and its processor chip to enable the user to interact with the information handling system and the NMS executing thereon. A service processor e.g. such as baseboard management controller BMC running system BIOS may also be coupled to IOH and its processor chip as shown. Service processor may be for example running real time OS or embedded Linux and also performing tasks independent of the host and BIOS such as cooling fan control etc.

It will be understood that the particular combination of information handling system components of is exemplary only and that a NMS including an ontology based CLI knowledge model may be implemented to manage a networking system using any other suitable combination of additional fewer or alternative information handling system components e.g. including one or more processing devices . In this regard it will be understood that a CLI may be for example any CLI implemented by a given network device and that uses text based information exchange e.g. text HTML XML or other human readable text based formats between the device and NMS .

It will be understood that the particular combination of network devices and network architecture illustrated in is exemplary only and that a NMS may be implemented with other combinations of fewer additional and or different network devices. Furthermore it will be understood that the tasks of ontology build module and ontology implementation module may be implemented using any other suitable combination of hardware and or software components e.g. on a single information handling system or on multiple respective information handling systems

Still referring to methodology of the steps of ontology build module may be implemented to initiate the knowledge model for the CLI of new network devices and to update the CLI knowledge model for changes in CLI of existing network devices . The steps of ontology implementation module may independently operate to implement NMS e.g. ontology implementation module may operate asynchronously with ontology build module such that ontology build module continuously updates the CLI knowledge model and feeds the updated results to ontology implementation module which continues to execute. It will be understood that in one exemplary embodiment steps of methodology may be performed in sequence to analyze the CLI of each network device .

As shown in ontology build module begins for a given network device with seed learning step where build parameter information is input into or otherwise provided to build module e.g. by operator input to information handling system and or input to information handling system from a database. Such build parameter information includes information on how to communicate with the respective network device . Other build parameter information includes information on how to walk the CLI for the given device such as CLI rules CLI timing CLI syntax etc. Build parameter information may also include objectives which are also input into ontology build module in step about what and how much CLI information to collect as well as a description of the CLI knowledge model to create.

In step the following exemplary types of information may be used for seed learning device network address e.g. IP Address Link Layer MAC Address communication protocol e.g. telnet ssh used to collect CLI information from the device device protocol information e.g. encryption certificate and protocol device authentication e.g. usernames passwords used by the NMS to login into device starting and stopping points in CLI control keys available and purpose for using in CLI e.g. control K session timeout where NMS is has a set limit for device to respond retry count were NMS attempts to connect login or communicate with device after session has timed out location of knowledge model to be updated existing knowledge model for same device or other device e.g. networking device or operating system such as UNIX or LINUX that enables the learning collection algorithm to enhance previously collected knowledge or to more efficiently collect additional knowledge from the device CLI macros installed on the device or added by device users how to activate and exit different command modes supported by CLI user administrator super global device configuration device interface configuration general configuration show command line syntax e.g. input format output format number text and argument format end of line error message format environment variables or CLI commands to setup and configure the session and special characters e.g. and their use for example as wildcard character or file path.

Still referring to step of the CLI for a given device may be walked by sequentially and orderly stepping through the CLI commands keywords arguments parameters switches variables and macros from a specified starting point to a specified ending point or until a CLI command list has been exhausted. The output of such a walk shows the CLI output displayed in sequential order as the walk process is going through the command list. Timing is the amount of time it takes for a device to respond over network to a CLI stimulus from ontology build and ontology implement .

Ontology build module proceeds next to step where learning and knowledge building tasks for CLI command structure and device behavior are performed. Such tasks include for example walking the CLI by interrogating each given network device over network to learn from the given device what CLI characteristics including capabilities and other CLI characteristics it possesses. Examples of CLI capabilities include but are not limited to device configuration user administration firmware software bootcode management scripting macros file management display help for commands and device inventory and license management diagnostics e.g. ping trace route . Examples of other CLI characteristics include continuation of command CLI mode change text based response error response interrupts e.g. CLI message syslog message device interrupt operating system interrupt or similar end of line user custom CLI variables piping commands special key sequences etc. In one exemplary embodiment this task of walking a CLI may be optionally extended and implemented by various network devices on a network . In such an embodiment each device may dump its CLI command structure into a human or machine readable format e.g. the CLI dumps all possible configuration show or help commands for the given device and such that the output shows all command levels parameters and sequences. NMS may also use and walk the CLI dump feature from the device to integrate with runtime UI generation as described further herein in relation to . When so implemented this embodiment may be employed to enable faster integration of a device into the NMS but is not required by the NMS for the purpose of this disclosure.

Next in step of the CLI data from the CLI response is classified e.g. as a new command continuation of a command CLI mode change error response an interrupt such as CLI message syslog message or similar end of line etc. After the classification step the resulting classified CLI data is analyzed in step as well as current location in CLI command structure e.g. the sequence of commands required to reach current location from initial CLI login prompt current state of network device or devices e.g. is the device operational and responding to ontology build over network with device login connection session established in state and operational values reported by device interfaces device running configuration device startup configuration . Based on this analysis the next set of possible steps or commands is determined in step . For example analysis has determined that there is more argument parameter syntax and help message information to collect for command or analysis may determine that all the commands information have been collected for the configuration mode. In step command options are reviewed against objectives for analyzing the given network device and based on this review a decision is made regarding the next steps to take for the given network device and in what sequence. Examples of such next steps and sequence include exiting current CLI mode sending a CLI command with an additional argument exiting cli learning . Finally in step a next set of commands is created to issue to the given network device . Examples of such next set of commands include command keywords arguments parameters switches command help commands h h help or help help command e.g. help control keys logout login exiting current CLI mode.

Returning now to the CLI knowledge model is created in step by structuring and storing the CLI data in a knowledge model in any suitable form such as SQL XML HTML NetConf Yang etc. Such CLI knowledge model data may be stored for example on media drive s and or main memory of information handling system . In one exemplary embodiment the CLI data may be stored using one or more of the following ontology related standards ISO 13584 15926 Industrial automation systems and integration ISO15944 Business Operation View including Accounting and economic ontology ISO 24800 Registration identification and management of schema and ontology ISO 19132 Geographical Information Location based services Reference model ISO 11179 Metadata Registries standard ISO 19763 Meta Model Framework Standard ISO 20944 Metadata Registry Interoperability and Bindings ISO 19763 Meta Model for interoperability and for ontology registration ISO 13250 Topic Maps ISO 18048 Topic Map Query Language TMQL ISO 19756 Topic Maps Constraint Language ISO 18629 Process Specific Language ISO 19115 Geospatial Meta Standards ISO 24707 Common Logic Standard ISO 21127 Cultural Heritage Information Ontology OMG Ontology Definition Meta Model Standard W3C Semantic Web Services Framework includes Semantic Web Services Language and Semantic Web Services Ontology and may be optionally integrated with content management systems such as Microsoft SharePoint Drupal 7 and IBM Web Content Manager and may be optionally integrated with Semantic Web Applications such as Twine GoodRelations IGLOO Freebase Evri.

Next in step ontology build module terminates by reviewing CLI knowledge model data of step for completeness and accuracy e.g. by reviewing if CLI response output data has been collected for all CLI commands initiated in step and then found in steps and or by reviewing if the CLI response data is in the expected format defined at the time of seed learning . Based on this review the CLI knowledge model data may be tuned by making any required adjustments e.g. such as how to parse CLI response output data how to check the state of the device s etc. . Need for such tuning may be determined for example based on a review of the knowledge model data by one or more human users to ensure that CLI data has been properly captured based on execution of the captured device commands of the CLI data and monitoring how they execute etc. Feedback may be obtained from observing parameters such as where CLI response output data collection failed current device s state last known configuration mode observing last known log of CLI capturing CLI usage etc. Improvements e.g. such as enhancing the parsing of the text based CLI response output data may accordingly be made to the prior steps of methodology or as a part of ontology building .

Next methodology proceeds to ontology implementation steps . These steps may be done for example during the runtime of the NMS or the NMS may be brought down. In deployment step command options e.g. such as configuration commands help commands and show commands may be reviewed versus NMS functional objectives e.g. such as read device configuration and write device configuration for the network device analyzed in the preceding steps of ontology build module . Based on this review the following types of actions may be taken analyzing the model for data integrity and correctness and loading knowledge model into NMS . In this regard deployment step may include performance of the tasks of loading the CLI knowledge model into the NMS data storage e.g. on media drive s and or main memory of information handling system and then using NMS to analyze interpret and bind the knowledge model to one or more NMS functions e.g. configuration firmware download upload user interface performance management fault management topology accounting etc. 

In deployment step the next steps for the analyzed network device may also be determined together with the sequence of these steps. In this regard types of steps e.g. such as loading verifying and parsing the model may be determined based on device type manufacture device functional role in the network etc. The sequence of such steps may be determined based on whether the NMS is actively managing the target device that is implemented by the knowledge model or if the user chooses to limit the scope of the knowledge model to be loaded in the NMS . In one embodiment at any time during operation of NMS use of the knowledge model steps through can repeated starting at any step to update refine or improve the knowledge model.

Finally in step a graphical user interface GUI is created at runtime based on the CLI knowledge model created by the previous steps of methodology and presented on display device . One example of such a created configuration management runtime GUI is illustrated in . Using such a runtime GUI user input may be collected from a user e.g. with input output devices . The runtime GUI may then use the data of the built and implemented CLI knowledge model to issue commands to the CLI of the network devices across network and to receive and process CLI responses from the network devices from across network . Examples of such issued commands include access list alpha permit ip and ip ospf network and examples of corresponding Reponses include 192.168.77.171 0.0.0.0 any   broadcast Set the OSPF network type to Broadcast . The NMS may utilize two or more revisions of a knowledge model for the device of the same model because each device may be running the different firmware software operating system revisions which may result in different device CLIs.

Referring now to configuration management runtime GUI created in step of may include dual user interface segments or windows and . Write interface window includes a configuration tree and input interface for writing information to a given network device in this case a particular selected network device having an IP address of 192.168.12.52 on network . Read back interface window includes a configuration tree and input interface for reading CLI response information back from the same given network device that is written to by interface window . GUI allows a user of information handling system to input and write CLI queries to a network device using write interface window having a given IP address and to receive available CLI commands on read back for that same device.

In one exemplary embodiment NMS may be implemented as follows employing configuration management runtime GUI . First NMS loads the CLI knowledge model e.g. a CLI knowledge model as created stored and optionally updated using methodology of by selecting a starting point in the CLI knowledge model for collecting data from a given network device selected by a user e.g. by entering the IP address of the particular network device . Next NMS presents the user or operator of information handling system with a tree hierarchy view of the CLI command structure of the selected network device . This tree is obtained by walking the CLI as previously described for that particular network device . The user may click to expand the tree node which causes NMS to update the tree based on CLI knowledge model information. Next the user may select and click on a particular CLI command tree node of tree hierarchy to view device data related to that particular selected CLI command. NMS responds to this selection by dynamically generating GUI screen for that particular selected CLI command by using the CLI knowledge model to determine what fields and data to display. Screen rendering may be done by the NMS independent of the CLI knowledge model.

Screen may present a user with one or more options for configuration of one or more network device s . For example as shown in the exemplary embodiment of GUI screen presents a user with the options of configuring one device only with selected parameter values configuring a group of multiple devices with the same parameter values or of creating a group operation to configure one or more devices in the future. This enables scheduling of configuration and or the ability to schedule other devices at a future date with the exact same configuration. GUI screen also includes text boxes for entry of CLI change information by the user.

Still referring to the CLI command box of GUI screen displays what specific CLI command s will be sent to the selected network device and the contents of the CLI command box of GUI may be edited by the user or operator to apply CLI command changes to the device e.g. by accepting text entered by the user into the text boxes. Using this interactive CLI command box display methodology promotes user or operator trust by displaying what the NMS is doing and by allowing the user or operator to present CLI commands to each network device separately. Additionally the CLI command box may be implemented as described to allow the user or operator to interactively learn how to use the CLI for network device s . Moreover this display methodology allows a user or operator to interactively write their own CLI command scripts. The data entered and displayed by GUI screen and particularly by CLI command box of GUI may be stored in a database e.g. on media drive s for future configuration audits.

After accepting user or operator input into CLI command box of GUI screen NMS uses the CLI knowledge model to generate CLI commands associated with the user selection s that were made using the CLI command box and the NMS writes and sends corresponding commands to the given network device across network . Then NMS reads and parses the response s across network from the given network device using the CLI knowledge model and based thereon dynamically constructs a runtime UI based on a definition file that maps UI components to the CLI knowledge model output. In this embodiment of transforming CLI structure into a UI tree results in easier transition between the NMS and the CLI of the given device . This alignment may be implemented to enable common configuration training for users covering both the CLI of the network device and the NMS .

A CLI knowledge model and runtime UI may be optionally extended in one exemplary embodiment to provide custom discrete interactions between CLI and icons and custom NMS chassis views and custom NMS topology symbols may be generated. In this regard illustrates examples of customized UI views and for a given network device e.g. such as a network switch of that may be optionally created and or modified using NMS in one exemplary embodiment for display e.g. on display device of . In the example shown in customized chassis view and customized network topology map view represent dashboard views of the given network device and each are shown in including icons for link aggregation LAG trunks although this is only an illustrative example. In this example one or more CLIs may be created using NMS to update the LAG icons and LAG icons may be updated while chassis view or network topology view is open. Moreover icon layout may be exported or imported from a graphics program e.g. such as Microsoft Visio to add new icons modify layouts and or incorporate layouts into specifications.

In one exemplary embodiment UI views may be implemented using color schemes to indicate current status with a given color of a given icon representing the current status of a network characteristic represented by that given icon and a change in color of the given icon representing a change in status of the network characteristic represented by that given icon. For example Spanning Tree icon of UI may be colored green to indicate no loops detected ACL icon of UI may be colored red to indicate a security issue has been detected Primary LAG icons of UIs and may be colored green to show status is normal Backup LAG icons of UIs and may be colored blue to indicate provisioned but not in use iSCSI Storage Port icon of UI may be colored green to indicate that the port configuration is correct and VM Host Port icon of UI may be colored yellow to indicate that the traffic is exceeding thresholds. It will be understood that these particular described icons and icon colors are exemplary only.

Ontology embodies a view of the world with respect to a domain or set of domains. illustrates domain ontology based CLI knowledge model relationship as it may be implemented according to one exemplary embodiment of the disclosed systems and methods. In this regard it will be understood that such an ontology relationship is a representation of knowledge as a set of concepts within a domain and also describes the relationships between those concepts and domains. In this regard an ontology relationship may represent concepts such as entities ideas events processes and activities along with their respective properties definitions and relations according to domain category system.

As shown ontology based CLI knowledge model relationship includes multiple domain categories that include CLI structure network management device configuration device e.g. corresponding to network devices sales and social networking . Each of these domain categories includes multiple concepts therein that are interlinked with other concepts in the same and or different domain category of ontology based CLI knowledge model relationship in the manner shown. In one embodiment the NMS may use the network of relationships in to track what concepts are interlinked to navigate and explore the relationships as a network of links in the knowledge model. The NMS may use the knowledge model to understand how changes to one concept impact or require use of other concepts and domains.

CLI knowledge model relationship of may be referred to as a conceptual model topic map or domain ontology. As shown at the center of the ontology based CLI knowledge model relationship of this embodiment is CommandThing that represents a central concept domain and focal point that allows the NMS to communicate across network with the devices of category . CommandThing also provides a central concept domain and focal point to allow the NMS to identify and connect a user s across network e.g. Intranet or any other suitable network communicatively coupled to information handling system to one or more of the following devices or resources websites and web servers to network devices of category shopping sales category and CLI information such as CLI structure category network management category and device configuration category that is available from subject matter experts e.g. via social networking category . CommandThing may also represent a central concept domain and focal point for the NMS to communicate with network device support services e.g. via device category and shopping category that are available for sale in shopping category . It will be understood that the particular illustrated domain categories and concepts are exemplary only and that additional fewer or alternative domains concepts topics and or categories may be included in an ontology based CLI knowledge model relationship. Thus an ontology based CLI knowledge model may link a NMS to one or more devices and or network resources such as web content management systems semantic web applications shopping portals or services warranty services test and design tools auto generated CLI manuals or a combination thereof.

Ontology based CLI knowledge model relationship may be employed to create and or modify components of configuration management runtime GUI e.g. based on user selection of particular topics in either configuration tree of write interface window and or configuration tree of read interface window . For example in one exemplary embodiment a user selection or entry in interface windows or of a configure command phrase or show command phrase i.e. CommandThing results in configuration change to a device or viewing of device configuration respectively.

In one example embodiment the NMS may use the CLI knowledge model to display device parts from category books from category and DVDs from category available from Amazon and recommended by co workers or equipment vendors related to a given device being view by the user. The user may find outside assistance related to a CLI command e.g. access control list related to the given device by using the NMS to link to Semantic Web Applications of category Wikis from category Blogs from category or code repositories from category where example user scripts may be found. A user may also use the CLI knowledge model to locate contracting services from category warranty services from category and or support services from category for the given device being managed by the NMS . The NMS may use the CLI knowledge model to collect GPS location information from the device to place an icon for the given device on a mapping website from category .

For purposes of this disclosure an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an information handling system may be a personal computer a PDA a consumer electronic device a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the information handling system may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components.

It will be understood that one or more of the tasks functions or methodologies described herein e.g. including those performed by NMS and methodologies and may be may be implemented by a computer program of instructions e.g. computer readable code such as firmware code or software code embodied in a non transitory tangible computer readable medium e.g. optical disk magnetic disk non volatile memory device etc. in which the computer program comprising instructions are configured when executed e.g. executed on a processing device of an information handling system such as CPU controller microcontroller processor microprocessor FPGA ASIC or other suitable processing device to perform the one or more steps of NMS and methodologies and etc. A computer program of instructions may be stored in or on the non transitory computer readable medium residing on or accessible by an information handling system for instructing the information handling system to execute the computer program of instructions. The computer program of instructions may include an ordered listing of executable instructions for implementing logical functions in the information handling system. The executable instructions may comprise a plurality of code segments operable to instruct the information handling system to perform the methodology disclosed herein. It will also be understood that one or more steps of the present methodology may be employed in one or more code segments of the computer program. For example a code segment executed by the information handling system may include one or more steps of the disclosed methodology.

While the invention may be adaptable to various modifications and alternative forms specific embodiments have been shown by way of example and described herein. However it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims. Moreover the different aspects of the disclosed systems and methods may be utilized in various combinations and or independently. Thus the invention is not limited to only those combinations shown herein but rather may include other combinations.

