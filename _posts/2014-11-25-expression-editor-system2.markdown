---

title: Expression editor system
abstract: An expression editor system allows a user to build an expression specifying an action that may occur during execution of a target application. The expression editor system includes an expression editor tool used to create, manage, and store action point definitions that include an action point identifier that specifies an action point located in target application program code. The expression editor system determines from the action point definition a dataset that is in-context at the action point in the application program code, obtains data field selections from the dataset that is in-context at the action point in the application program code, graphically builds an expression, and an outcome that executes depending the expression, links the outcome and the expression to form an action point rule for the action point, and saves the action point rule in the database for execution when the application program code reaches the action point.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582253&OS=09582253&RS=09582253
owner: Accenture Global Services Limited
number: 09582253
owner_city: Dublin
owner_country: IE
publication_date: 20141125
---
This is a Continuation application of U.S. patent application Ser. No. 13 174 210 filed on Jun. 30 2011 which claims the benefit of priority to U.S. Provisional Patent Application Ser. No. 61 470 255 filed Mar. 31 2011. Each of the above stated applications is hereby incorporated by reference in its entirety.

This disclosure relates to a system that implements an application development tool. More specifically this disclosure relates an expression editor system that implements an expression editor tool that allows a user to build a rule that specifies an action programmed to occur during execution of a target application.

Explosive growth in digital processing technology has led to the ubiquitous presence of applications of every kind running on an immense spectrum of devices. Unfortunately organizations do not have the application tools to effectively manage and or leverage existing or newly developed applications. Current application development and management tools do not allow users to modify or create different outcomes for target application without expensive software development efforts. An expression editor tool allows a user to build a rule that specifies an action that may occur during execution of a target application.

Application development and maintenance professionals spend considerable time and effort to analyze a target application before modifying the logic of the target application to produce a different action or outcome. In addition available tools do not provide an easy way to confirm the context in which an action may occur and the variables available in the context during execution of the target application so that a proper new action or outcome may be implemented efficiently.

An expression editor system is a computer system for building an expression that specifies an action that may occur during execution of a target application. The expression editor system includes a computer memory operable to store an expression editor tool and a database operable to store an action point definition that includes an action point identifier that specifies an action point located in application program code. The expression editor system includes a processor in communication with the memory and the database and operable to read the action point definition from the database and determine from the action point definition a dataset that is in context at the action point in the application program code. The processor is further operable to execute from the computer memory the expression editor tool which when executed is operable to obtain data field selections from the dataset that is in context at the action point in the application program code. The expression editor tool is operable to graphically build an expression including the data field selections graphically build an outcome that executes depending on the evaluation of the expression link the outcome and the expression to form an action point rule for the action point and save the action point rule in the database for execution when the application program code reaches the action point.

Other systems methods features and advantages may be or may become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the following claims.

An expression editor system is a computer system for building an expression that specifies an action that may occur during execution of a target application. The expression editor system includes a computer memory operable to store an expression editor tool a database operable to store an action point definition that includes an action point identifier that specifies an action point located in application program code and a processor in communication with the memory and the database. The processor of the expression editor system is operable to read the action point definition from the database and determine from the action point definition a dataset that is in context at the action point in the application program code. The processor is further operable to execute from the computer memory the expression editor tool which when executed is operable to obtain data field selections from the dataset that is in context at the action point in the application program code. The expression editor tool is operable to graphically build an expression including the data field selections graphically build an outcome that executes depending on the evaluation of the expression link the outcome and the expression to form an action point rule for the action point and save the action point rule in the database for execution when the application program code reaches the action point.

The expression editor tool allows a user to build a rule that specifies an action programmed to occur during execution of a target application. The expression editor tool is implemented using a computer system i.e. the expression editor system that includes a computer memory operable to store the expression editor tool and a database operable to store an action point definition that includes an action point identifier that specifies an action point located in application program code of the target application. The expression editor system includes a processor in communication with the memory and the database. The processor is operable to read the action point definition from the database determine from the action point definition a dataset that is in context at the action point in the application program code and execute the expression editor tool. The expression editor tool is operable to display an expression definition interface that includes data source selectors for obtaining selected data fields from among the dataset and an operator selector for obtaining a selected logical operator to connect the selected data fields. The expression editor tool is operable to construct a new expression from the selected data fields and the selected logical operator display an outcome selection interface that includes an outcome selector for obtaining a selected outcome for the new expression create a rule that includes the new expression and the selected outcome and store the rule in the database linked to the action point definition.

The expression editor tool allows a user also referred to as a configurator to build an expression in the context of an action point. The expression editor uses a set of navigable pages and a scoped search overlay e.g. searchable fields designed to allow the configurator to view and edit expressions and calculations. Expressions and calculations can be re used and expressions and calculations may be viewed or edited in the context of a specific action point. An action point is a point in the logic of an application where an event occurs. An application developer inserts action points and definitions of action points into a data model along with definitional metadata for a target application that the developer intends to create or modify expressions for by using the expression editor. The developer may include an action point call in the target application code similar to a function call that specifies the action point unique identifier. Additionally although the expressions and calculations are displayed the same to the configurator expressions and calculations are created to either run on a server or on a browser based on the related action point. An expression may be a named set of one to many conditions which evaluate to true or false. The configurator uses the expressions to drive application behaviors for example showing and hiding custom data fields on a page creating events or other outcomes. The configurator may assign the output of the expression as the output of the action point.

For a particular action point a set of data is in context and defined in the database. Given a particular context only certain fields of an application may be useable at certain action points and the expression editor may constrain the user to a meaningful set of variables and guide the user logically through user enterable fields so that the user may define or modify expressions for a target application. Expressions are created using the expression editor. The expression is always in the context of a particular action point . An action point is a point in an application where one or more expressions are evaluated. Each action point has a set of data in context which can be requested and then set up through a database. When an expression is created the data that is in context for the action point is available. Logical operators defined in the expression depend on the field value selected. For example if the field is of business data type number then the available operators are greater than less than greater or equal to less than or equal to equal and not equal. For the remaining business data types the available operators are equal and not equal. An expression may be expressed as . Using the expression editor two or more of expressions may be combined into a combined expression . A user may define expressions by selecting different data sources such as another expression or function. The expression editor defines functions as another form of evaluating data such as count numbered of items in a list does the list contains and get sum of items in the list. When the user selects a function the user then selects the list to evaluate and the selection replaces the value of in the structure of the expression .

Action points determine the variables that are available for use in an expression. An action point is a point in the application programming logic where an event occurs e.g. where one or more expressions may be evaluated . Examples of action points include configuring how and or when a web page appears how Graphical User Interface GUI elements appear or some other action. Action points are points in the logic of the application where rules are evaluated. The rules may relate to anything for example the selection of a GUI element. Because action points are tightly coupled to the application action points may not be created in the console of the expression editor in some implementations.

During coding the developer may specify an action point that is invoked for example by the click of a button on a particular user interface screen. The action point is specified by a unique identifier which is a primary key for the action point in the database. Each unique identifier identifies a link between a point in the programming logic code and an action point. For example the user may want to invoke action point validation action point that is linked to a corresponding unique action point identifier and action point record with the action point description validation action point in the database along with corresponding metadata e.g. name description data in context as well as other information about the action point . An action point call appears in the code similar to a function call that specifies the action point unique identifier.

The database definition of an action point is referred to as an extension point in the action point expression framework AEF database. In order to define the data available to the user the expression editor provides an extension point input table e.g. EXTPT INPT that allows the user to define an extension point a data item for each of the application fields and data objects linked to the action point expression . The EXTPT INPT table associates action points to data items. The data item column of the EXTPT INPT table is a reference to a data item table. The data item table stores data about all the data objects and fields in the application of interest. While the expression editor provides separate tables for associating data items to fields the data item table stores all the raw unassociated data objects and fields.

In order to link an expression to an action point a rule is defined for the action point. A rule defines one or more outcomes that may happen when an expression valuates to true or false. For example possible outcomes resulting from applying a rule include hiding a field sending an email invoking another action point showing an error message or populating a field.

The expression editor provides an edit existing rule rule details page that includes a summary of the expression incorporating the rule and the outcomes for the expression. The expression editor may present the rule summary to the user as read only. The rule summary shows a combination of the expression and the outcomes for the expression when the rule valuates to true. The expression section shows the expression and when a user selects the expression e.g. a hyperlink of the expression name the expression editor navigates the user to the select existing page and presents the expression to the user to edit.

The outcomes may evaluate to true or false Boolean . A page action point may include an outcome one per page executed when the corresponding application page is loaded. A show hide enable and disable action point may be called before a page is displayed in order to configure the page and the action point may have four possible outcome types including show hide enable and disable a page. A business service action point located in the application code may retrieve a result of a calculation display an error message invoke another action point populate a field send email or perform a page navigation.

The expression editor provides an Add Outcome page for a user to define outcomes for action points. Outcome types may be presented in a drop down selectable menu based on the type of action point e.g. page vs. business . The expression editor populates the configuration section of the action point page for an action point based on the outcome type corresponding to the action point.

The expression editor uses an EXPRSN table to store expressions and all the information about the expression while the actual expression may be stored in the T EXPRSN STMNT field as the actual syntax of the expression. The expression editor uses local tables to store information exposed to the user in the configuration console based on a local ID e.g. English US French FR so that the expression editor displays the names of action points according to the local ID.

A calculation is a special case of an expression in which the conditions evaluate to a numeric value. The configurator normally uses calculations within the context of an expression to simplify the creation of a complex expression. For example a calculation such as Total Financials for Line might add up specific field values related to financials for a line. The calculations may contain other calculations but may not contain expressions. The configurator uses the output of a calculation in an expression. In some implementations the configurator assigns the output of a calculation as the output of an action point.

The complexity of an expression can range from very simple e.g. If Field A 0 to very complex. The complexity of an expression can include calculations numerous expressions and conditions. In some cases setting the order of the evaluation is important. The expression editor is designed to allow the configurator to support the full range of these requirements. The expression editor includes four pages that the user may navigate through in a wizard like fashion or move around in the order that the pages are selected. The expression editor does not have to utilize all of the pages unless otherwise required by the user.

The fields expressions calculations and functions which are made available to a configurator in the edit or addition of an expression are limited to those fields that are considered available in context for that action point.

For a server side action point data may be considered in context from three sources. The first source of context is the definition of the action point in the console database and includes zero to many data items. Second a data item or field may be considered in context because the data item or field was added to context by the configurator through the use of actions and outcomes. Finally the context includes custom fields for which the context data from the two previous sources includes the key to the logical table. The context information is stored in the DATAITEM TBL.

The context of a page browser side action point includes all of the standard fields associated with the page through the PAGE CLS CTRL table and all of the custom fields associated to display groups through the DSPLY GRP DATAITEM table. Date type fields may be unavailable to use in an expression created in the context of a page action point even if the date is in context. Similarly in one implementation no calculations may be used in expressions for page action points.

To support more complicated expressions the expression editor allows the configurator to build an expression list as the configurator traverses through the expression pages. The expression list displays as a portlet on the right for the select existing expressions page define calculations page and Single Expression page. When the configurator has completed the expression list the configurator uses the Combine Expressions page to name the expression list order items on the expression list and save the expression list to the database. The configurator may also modify the order of the expression list and control the order of operation by using the Combine Expressions page. As mentioned previously the configuration items made available to the configurator are based on the action point context.

The expression editor includes four pages including the select existing page the define calculations page the define single expressions page and the combine expressions page. The select existing page includes a scoped search of existing expressions allowing the user to select one or more for inclusion. For all action points except page type the select existing page includes a scoped search of calculations allowing the user to navigate to the define calculations page to modify an existing calculation. The define calculations page allows the user to create new calculations and load the calculations into the expression editor in order to edit an existing calculation. The define calculations page does not apply to page type browser action points. The define single expressions page allows the user to create a new single expression. The expression may be named and saved as a re usable expression or simply included in the expression list. The define single expressions page contains an area for defining the left side of an expression a combo box to select the logical operator and another area for defining the right side of an expression. The define single expressions page also contains an optional section to allow the configurator to name of the expression. A single expression contains one and only one logical operator. The right and left side of the expression can be made up of only one item and thus does not include arithmetic operations. The configurator may include a calculation in the expression for the purpose of including arithmetic operations. Also the define single expressions page may be used to edit unnamed expressions of an expression the configurator is creating. The combine expressions page applies only to expressions made up of more than one expression combined with logical operators. In order to control the order of operation and remove selected expressions the combine expressions page allows the user to modify the properties of the expressions of a combination of expressions and the order of the expressions and group or ungroup the expressions. The configurator may use links to allow the user to navigate to expressions to edit. Once the configurator completes the edits of an expression the expression editor persists the expression to the database.

For the expression editor pages wherever a calculation or expression is displayed the calculation or expression is shown with the expression display name. The expression editor may use hover text to display the calculation or expression detail including detail at the field level. For example the expression list may display Is Claim Workers Comp which is an expression display name. The hover text for that item might be Claim. Claim Loss State Nevada . In another example a calculation may be displayed on the grid as Calculation 1 on one line and Calculation 2 on a second line of the grid. The expression editor pages may display identically for browser side and server side expressions and calculations except that functions may not be available for browser side expressions or calculations. The expression editor may indicate to the configurator when functions are a valid data source based on context information.

When the configurator navigates to an expression editor page to edit an existing expression and more than one row is displayed in the expression list the expression editor loads with the name selected list page. The expression editor loads the single expression page and prompts the user with a dirty flag warning message if appropriate when only one line is displayed in the expression list.

The expression is one of the two unique configuration items in which multiple versions of the same item may be stored in the database simultaneously. The EXPRSN LCL table stores multiple versions of the same item using a primary key D BEG in the EXPRSN LCL table. The EXPRSN LCL table stores the actual expression or calculation. Modifications to the data elements related to an expression or calculation i.e. expression metadata stored in the EXPRSN table may not be versioned. 

When the configurator modifies a calculation or expression the configurator may modify the effective date field in order to create a new version of the item. The effective date may not be modified to before the current date or after the expiration date . If the effective date is modified the previous version of the expression or calculation expires. The date used by the expression editor is set to one day less than the effective date of the new item so that the expression editor prevents overlaps between the versions .

The configurator may modify an expression calculation the description and or display name of an expression or calculation. If the configurator does not modify the effective date of the modification the expression editor overlays the previous values of the expression calculation description and or display name with the new modified values and the expression editor may not make the previous values accessible.

In another example the configurator may capture the previous values for an expression calculation display name and description and modify the effective date and because the effective date value is part of the primary key of the EXPRSN LCL table the expression editor creates a new database record for the newly entered data and causes the existing row database record for the expression to expire. Thus the database stores the previous expression calculation display name and description values reusing the same N EXPRSN ID with a different effective date value.

The expression editor allows the configurator to create multiple versions of an expression and or a calculation in the future. For example the configurator may create a database record in the EXPRSN LCL table using dates Mar. 1 2010 to Jun. 1 2010 and another record using Jun. 2 2010 to max date as long as the effective dates otherwise follow other stated business rules.

The expression editor includes rules to determine when to display a dirty flag warning. The dirty flag warning is a status indicator that indicates to the configurator that the expression editor has pending changes unpersisted that have not been persisted to the database and the user may be about to perform an operation that may cause those unpersisted changes to be lost. The rules to determine when to display a dirty flag warning may be more complicated for the expression editor to perform. For example because the four pages of the expression editor may function as an application wizard standard architecture tools may be inadequate to assist in making the dirty flag warning determination. The expression editor may include programming logic coded to work in coordination with various database architecture tools that manage the commit and rollback functions i.e. functions that identify persisted and unpersisted data so that the expression editor may properly determine when to set the status of a page to dirty and issue a dirty flag warning.

The expression editor uses the term dirty to identify a new expression that has not been added to database yet when one of the following conditions is met 1 an item is added to the selected list and 2 the page the user is on is dirty. The expression editor uses the term dirty to identify an existing expression when one of the following conditions is met 1 the combine expressions page is dirty and 2 the page the user on is dirty. The expression editor prompts the user with the dirty warning message when the user clicks on and or selects the cancel button links to another expression from the combine expressions page any bread crumb secondary navigation on left or primary navigation on top and one of the following conditions is met A adding a new expression which has not been persisted to the database and the page is dirty as defined below or any items e.g. expressions have been added to the selected list or B editing an existing expression and the page is dirty as defined below an item has been added or removed from the selected list or a modification has to the existing expression.

In one implementation if both a single page is dirty and the expression editor is in a dirty state then clearing the page level dirty flag may also clear the expression editor dirty flag. For example if the user is on the define calculations page of the expression editor and the define calculations page is dirty and the expression editor is also dirty because the user added 2 more expressions to the list then if the user clicks the breadcrumb the user is presented with a dirty flag. If the user clicks okay both page level changes and expression editor changes may be discarded and or lost.

An expression editor page may be defined as dirty when a user is on the select existing expression page and a search result item has been checked but the Add To List has not been clicked selected or when the user is on the define calculations page and at least one field on the define calculations page has been modified e.g. including adding or removing items through the overlay . The Drag and Drop reordering feature of the expression editor may not create a dirty flag because drag and drop reordering is persisted separately to the database on the drop. The Define Single Expression page may be defined as dirty when at least one field on the page has been modified through user interaction. The combine expressions page may be defined as dirty when any expression has been added or removed from the selected list on the page or when at least one field on the page has been modified through user interaction. Selecting the complete button does not create a dirty warning message.

Selecting the select existing button of the expression editor may cause a dirty flag to be created if an expression is selected and the expression editor does not list any other expressions in the selected list the expression editor returns the listed expression to the calling page. If one or more expressions are selected and or at least one other expression exists in the Selected List the expression editor validates that the Combine Expressions data is complete. The expression editor otherwise provides errors and or saves the data as appropriate. If the expression editor determines that the data is valid the expression editor returns the expression to the calling page. If the expression editor determines that the Define Calculation page is dirty the expression editor validates and saves the data on the page. If no expressions are in the expression list the expression editor provides a warning indicating that no expression has been selected. If the expression editor shows an expression in the Selected List the expression editor returns that expression to the calling page. If the more than one expression is in the Selected List the expression editor validates that the Combined Expressions data is complete. The expression editor otherwise provides errors and or saves the data as appropriate. If the expression editor determines that the expression data is valid the expression editor returns that expression to the calling page. If the expression editor determines that the Define Single Expression page is dirty the expression editor validates and saves the data on the page. If the expression editor shows no other expressions in the Selected List the expression editor returns that expression to the calling page. If the expression editor shows at least one other expression in the Selected List the expression editor adds the expression to the Selected List and validates that the Combined Expressions data is complete. The expression editor otherwise provides errors and or saves the data as appropriate. If the expression is valid the expression editor returns that expression to the calling page. If the expression is dirty the expression editor validates whether the data is complete and provides errors and or saves the data as appropriate. If the expression is valid the expression editor returns that expression to the calling page. Selecting the Continue is configurable to either create or never create a dirty warning message. Selecting the Select Existing adds any selected expressions check box is checked to the Selected List. If the Define Calculation page is dirty the expression editor validates and saves that calculation. If the Define Single Expression page is dirty the expression editor validates and saves that calculation and adds the expression to the Expression list if the expression has not already been added. Any of the 4 links to the expression editor pages If the user clicks on the same page the user is already on except for Combine Expressions the expression editor may provide a dirty flag if that page is dirty as defined. If the user selects clicks okay the expression editor functions as follows for each page The Select Existing Define Calculation page may load as if for first time not populated . The Define Single Expression may load with the page not populated even if the first time loaded was editing a specific expression. Selecting the combine expressions page may not give a dirty flag and the combine expressions page may load with all the fields unchanged. The data in the page may always be persisted. If the user clicks on a different page except for Combine Expressions the expression editor provides a dirty flag if that page is dirty as defined on the left for each page. The expression editor includes four pages including the select existing page the define calculations page the define single expressions page and the combine expressions page that may cause dirty flag issues to arise during the user interactions for which the expression editor may use various techniques to address.

The expression editor allows the user to navigate between user selectable pages to create a new expression and select and modify an existing expression. The combine expressions link is enabled when more than one selected expressions in the expression list. The expression editor user interface includes cancel button continue button and complete button function the same on each page unless otherwise indicated by the expression editor . The complete button validates that the configuration of an expression is complete. If the expression configuration is complete the expression editor persists any un persisted data and returns to the calling page with the expression. If an expression includes more than one item in the selected expression list then the user may use the combine expressions page to populate the expression property fields before the new expression is added to the repository of existing expressions. If a user clicks the complete button without first naming the expression then the expression editor may prompt the user with the following error message Please provide a name for the expression. Similarly if the user clicks the complete button when no item is listed in the expression list the expression editor may prompt the user with the following error message Please either select at least one expression or click Cancel. If only one expression is displayed in the selected expression list and the expression is a named expression then the expression editor returns the expression to the calling page. The continue button navigates to the next enabled page within the expression editor and cause the expression editor to persist un persisted data. The cancel button causes the expression editor to navigate back to the page that called the expression editor and causes the expression editor to not persist un persisted data but does not cause the expression editor to roll back data that has already been saved. The expression list portal displays the named expressions and snippets i.e. non named single expressions that have been selected for inclusion in the expression. The expression list portal also displays the logical operator associated with each expression. The expression list may be read only and not include links to other expressions. A separate database table may be used in the configuration console database to support the functionality of expression list portal. The separate database table may include all expressions and calculations which can be processed by the expression editor console.

The add to list button when selected causes the expression editor to add selected expressions from the search results to the expression list. The add to list button may not cause the expression editor to save data to the database or navigate to another page. The AND logical operator is the default logical operator between selected expressions. A user may select one or more expressions to add to the list. If the user clicks the add to list button and has not selected at least one item the expression editor may prompt the user with the following error message You have not selected an expression to add to the selected list. The expression editor allows a user to remove an item from the selected list by navigating to the combine expressions page.

The scoped search provided by the expression editor allows the user to search for existing expressions for which the fields are in context. The expression editor displays Expressions as the default value for the I m looking for combo box. The contains text box allows the user to enter the name or part of the expression name. The common only checkbox allows the user to search for expressions marked as common. When the user does not check common only checkbox the expression editor retrieves search results that include both common and non common expressions. When the search results identify expressions that include the text as entered in the contains text box then the expression editor displays the expressions in the search results. The expression editor may not display a named expression in the search results that a user is currently editing. The expression editor limits the number of characters displayed in the expression column to a configurable number but the expression editor displays the entire expression when the user uses a pointing device to hover over the expression of interest under the expression column. The search results may not be dynamic so that when the user changes the search criteria the user clicks the search button in order to execute a search based on the new criteria. If the expression editor does not identify expressions that match the criteria the expression editor may prompt the user with the following message No Expressions match the criteria . The user may invoke a series of searches in order to select multiple expressions. The expression editor uses uniform error messages across the application related to searches such as the length of the field. When the expression editor loads in the context of a page e.g. browser type action point the expression editor may limit the search results to expressions where EXPRSN.B CLNT EXPRSN is true.

The Group button nests the selected items still in single lines into the same line on the grid in the same order. May use grids within a grid to capture groupings. When lines are grouped the grid may modify so that only one check box displays next to the top line which is grouped. Lines do not have to be next to each other to be grouped but when lines are grouped the lines may be in the same order as displayed on the grid before being grouped. The group may appear in the same place as the top item grouped. For example if the configurator clicked items 1 and 4 and clicked the Group button the grid would reload with 3 check boxes and the top checkbox may have a line with two lines nested in it.

The Ungroup button may remove the first left parenthesis in the expression and the right parenthesis that corresponds to the first left parenthesis. From a grid perspective the expression editor may un nest what is combined into one checkbox and split what is combined into one checkbox into separate checkboxes. The Ungroup button may not completely ungroup all items. A user may receive an error message if the user clicks an item that is not grouped. the expression editor allows the user to check multiple checkboxes at the same time and click Ungroup button.

The Calculation Preview section shows the calculation indicating order of operation through parenthesis and is view only. The expression editor may enclose grouped items in parenthesis. If items have been grouped multiple times the items may appear as grid lines within another gridline in the Expression grid and may have multiple parentheses in the section. The define calculation page display may be refreshed whenever any change is made in the Calculation grid above through the use of the Add Remove Group or Ungroup buttons. The Where Used portal may display all expressions in the database which use the specific calculation which is being edited. The Where Used portal may also show all calculations which utilize the loaded calculation. If the user is creating a new calculation the portal may be blank. The Calculation Versions section default display is always closed and the section displays the versions including any future versions and the version the page is showing of the calculation along with the effective and expiration dates. Editable versions except the version the page is showing may display in the list as a link. If a calculation includes the use of other calculations the calculation may display in the grid with the names of those items. However when the user hovers over the calculation in the grid the expression editor may display the calculation in complete detail down to the field level. When a new calculation is added the define calculations page defaults to application classification and component classification of the action point . If the configurator edits an existing calculation the expression editor displays search results from the database.

5 The Group button nests the selected items still in single lines into the same line on the grid in the same order. May use grids within a grid to capture groupings. When lines are grouped the grid may modify so that only one radio button displays next to the top line which is grouped. Lines do not have to be next to each other to be grouped but when the lines are grouped the lines may be in the same order as displayed on the grid before the lines were grouped. The group may appear in the same place as the top item grouped. For example if the configurator clicked items 1 and 4 and clicked the Group button the grid would reload with 3 check boxes and the top checkbox may have a line with two lines nested therein.

6 The Ungroup button may remove the first left parenthesis in the expression and the right parenthesis that corresponds to the first left parenthesis. From a grid perspective selecting the ungroup button may un nest what is combined into one checkbox and split them into separate checkboxes. Selecting the Ungroup button may not completely ungroup all items. A user may receive an error message if clicks an item that is not grouped. The user may check multiple checkboxes at the same time and click ungroup button.

The Expression Preview shows the expression indicating order of operation through parenthesis and is view only. Grouped may be enclosed in parenthesis. If items have been grouped multiple times the items grouped multiple times may appear as grid lines within another gridline in the Expression grid and may have multiple parentheses shown in the section. The Expression Preview may be refreshed whenever any change is made in the Expression grid above through the user of the Remove Group or Ungroup buttons.

The Expression Versions section default display may always be closed. The Expression Versions section displays all versions including any future versions and the version the page is showing of the expression along with the effective and expiration dates. Editable versions except the version the page is showing may display in the list as a link. If an expression includes the use of other calculations or expressions the expression may display in the grid with the names of those items. However when the user hovers over the calculation in the grid the expression editor may display the expression in complete detail down to the field level.

An action point is configured to run on the server and or the browser. A page may always have one and only one page or browser action point related to the page. The page action point may execute when there is a change event related to one of the fields on the page which has the rules value set to true which applies to custom and standard fields. Server action points are mainly characterized by the output none Boolean one value or many values. For those action points which have an output the data type of that output is an important piece of information. The configuration effort includes populating the appropriate output for an action point and the application code processes the output. Another type of action point is Event. A server action point may not have an output although the server action point is created specifically to run as an event.

When a developer executes a server side action point in the code the user may make certain data available to the logic engine to use when running the action point. The available data is referred to as context and is an important part of the developer supported definition of an action point. Data may also be added to context by the configurator through the use of actions and outcomes. Additionally the expression editor console determines the extended data available in context based on the data included in the extension point definition and added through actions and outcomes.

The expression editor may use various pages related to creating and managing action points that include the select existing page the define calculations page the define single expressions page and the combine expressions page. The Action Point component makes use of several scoped searches displayed as overlays. The action point page displays action point properties including input fields and the output definition. The fields may be populated by the developer and may not be modified through the configuration console. The action point page also displays actions and rules which have been added through configuration to the action point. The user can re order existing rules and actions from the action point page. Also links exist to navigate to the appropriate pages to add new rules or actions and modify existing.

The Rule Page captures rule data such as name the expression and the selected outcomes. The configurator may use the scoped search to select an existing expression or the configurator can navigate to the expression editor to add a new expression. The user may order the outcomes from the Rule Page. Also links exist to navigate to the Action Outcome Page to add new outcomes and modify existing outcomes.

The Action Outcome page displays both actions and outcomes as described previously. The configurator may map any inputs to data items from context and may map output data as well. The architecture is shipped with a set of architecture activities in the code and the configuration database.

The expression editor allows the creation or modification of expressions and calculations. A calculation is a set of one to many conditions that evaluate to anything other than true or false. Calculations are used as part of an expression an action or outcome to return the evaluation value of the calculations. The expression editor allows the configurator to select an existing expression or calculation or create a new one. The expressions and calculations may range in complexity from a simple snippet involving two fields or a complex grouped set of conditions and expressions.

Table 1 illustrates example Rule Summary logic that may include the expression display followed by a list of outcomes and an alternative outcome e.g. a negate rule .

Tables 2 and 3 illustrate an example EXTPT table and other Information Related to Action Points. Context Data is data available for use by the configurator in an action point. Server Side Action Points include particular available contexts including standard data objects and or elements defined by the EXTPT INPT table for server side action points and added to context by developer when the action point is called added to by the use of activities outcomes in which C OUPT DATATYP has not been populated and data type matches and for custom data objects extended data may be determined based on which logical tables are associated. The data type may be used to determine extended tables for group type data items. Browser Side Action Points also include particular available contexts including context for fixed data defined by the FQN value in the PAGE CLS CTRL for that action point s page where B CNTXT DATA is true and context for extended data defined by the FQN of the extended data included in each of the display groups on the page. Context may not be added for Browser Side Action Points to by using actions or outcomes because get data type actions and outcomes may not be available from browser side action points.

The Action Outcome page allows the user to configure the processing that may occur in the action point. The action point causes the architecture to execute a specific piece of code which may be described as an activity although the expression editor console may not display the terminology. Activities available to the configurator include those which are part of the architecture or the application. Data describing the input and output criteria of the activity is stored in the expression editor console database but may not be used in the actual execution of the activity items. Additional activities may be made available to the configurator by configuring code from an alternative using application. The configuration architecture has a set of activities that is available for use by the configurator. The action outcome page is designed specifically to support these architecture activities. Although there is some metadata included to describe each architecture activity the action page may not load from the data. Instead the page may be coded to support those items which have been made available by the architecture. An outcome is defined as an activity which is configured to run as the result of the evaluation of an expression. An outcome is considered part of a rule which includes an expression and outcomes . An action is defined as an activity which is configured to run in the action point and is not dependent on the evaluation of an expression. The action outcome page always loads as part of a specific action point. Both outcomes and actions are stored in the EXTPT ACTN table. Outcomes also have data in the EXTPT ACTN ACTY table. The database defines 5 different types of action outcomes which are described in the Activity Type Info tab. The definitions of the action outcomes describe functionality offered by the architecture and reflect the database design. The console may abstract the information to create one activity list which may be offered to the user. Behind the scenes the console logic may utilize the APIs to appropriately persist the configuration settings to the database. The Activity List tab includes the activity list. Additionally there is a wireframe to illustrate how the action outcome page may load for each of these selections. The fields made available to a configurator in the configuration of input fields are limited to those which are considered available in context for that action point. There expression editor employs six architecture variables that are available for use as input for configuration both server side and page action points including Business Function ArchBusinessFunction Client IP Address ArchClientIPAddress Current Date and Time ArchCurrentDateTime Locale ID ArchLocaleld Locale ID ArchUILocaleld and User Name ArchUserName . One or more of the six architecture variables of the expression editor may be exposed to the configurator. For a server side action point data may be considered in context from three sources. The first source is the definition of the action point in the expression editor console database and may include zero to many data items. Second a data item or field may be considered in context because the data item or field was added to context by the configurator through the use of actions and outcomes. Finally all of the custom fields for which the context data for the action point includes the key to the logical table. The correlation between the data items and the logical tables for which the data items contain the key is in the DATAITEM TBL table. a variable data type may be utilized to determine which logical tables are supported by that data item. . The context of a page browser side action point includes standard fields associated to the page through the PAGE CLS CTRL table and all of the custom fields associated to display groups through the DSPLY GRP DATAITEM table. Several of the available action outcomes return a value. If the data type of the action outcomes value matches the action point data type the data type may be automatically assigned to the action point output and the assignment may function based on the action point definition. If the action point output is one item EXECONE the value may override any previous value to which the action point output may have been set. If the action point output is many items EXECMANY the expression editor may append the action outcome output to the list. Note that the output cannot be assigned to any of the architecture variables. In some cases the configurator may need to temporarily capture the output of an action outcome. For example if the output is needed as the input to another action outcome. The functionality is available for some of the action outcomes as indicated in the wireframes. If an output field is assigned the output of that action outcome may not be passed automatically to the output of the action point even if the data type matches. Instead the data item to which the action outcome output has been assigned may be considered as part of the context of the action point. The expression editor console may keep knowledge of the context and display the context to the configurator. However the expression editor may not track whether the configurator uses the data in a step which precedes the step which added data item. For example if the data is added to context in the second action in the action point but the first action in the action point is edited later to use the data the configurator may not receive an error or warning depending on a configurable option to disable providing a warning. The configurator may create a variable for use as output of activities and actions. Fields made available to the configurator for configuration may be limited to those in context as defined above and may also be limited by the data type of the field. The pages of the expression editor may be coded in a three column metaphor.

Tables 5 and 6 shows an example of combo boxes and values for a Field Group selection as the data source the next combo box may display data objects that contain the data item specified in the T PRIM KEYS TBL field and a data item combo box may be displayed. For example the Claim table may have been associated as the N TBL for a specific event that has the C ENTY TYP display value of Claim. The T PRIM KEYS TBL may show ClaimID as the data item representing that key. Entities may be related to tables with multiple fields in primary key of the tables and the expression editor may expose extended data to the user.

Table 7 below shows examples of Select Value Rules that apply to Business Service Action Points including EXECONE EXECMANY and EXECBOOL referred to in Table 7 as Single Item Multiple Items and True False . Table 7 shows information related to data sources available for Select Value action or outcome and Arch data that may be created. The select value rules may insert a row in the EXTPT ACTN ACTY table populate C EXTPT ACTN ACTY TYP with the key value and otherwise populate with ACTYINST. The select value rules may be actions or outcomes and some of the select value rules may only be an outcome. Tabs follow to illustrate the Data Sources available based on conditions above. Some action points may have multiple data sources available based on the characteristics of the action points and or the data sources available as described above.

Table 8 shows example action points available for server side action points. EXTPT ACTN ACTY.C EXTPT ACTN ACTY TYP is ACTYINST. If no output data item is selected and a action point data type matches the action point data type may be assigned to the action point output. If the action point type is a single item the expression editor may cover over the previous value if any exists. If the action point type is list of items the output may continue to append any action outcome outputs which have the appropriate datatype.

Table 10 illustrates a table that stores definitions of different types of Action Activities that may be configured. EXTPT ACTN ACTY table includes C EXTPT ACTN ACTY TYP Field. Allows the user to select a specific activity to configure select a value to return or STOP. RTN s may append the RTN output to the EXTPT output if the extension point type is list of items.

Table 11 shows an example of the EXTPT ACTN ACTY table and related field population based on value of C EXTPT ACTN ACTY TYP Field.

The expression editor system is a computer system for building or managing existing expressions action points rules and outcomes . An expression e.g. a new expressions and an existing expressions specifies an action e.g. a new action and an existing action that may occur during execution of a target application . A rule e.g. is the combination of an expression e.g. and outcomes e.g. of the rule. The expression editor system includes a computer memory e.g. operable to store an expression editor tool at least one database operable to store an action point definition e.g. that includes an action point identifier that specifies an action point located in a target application program segment of code and a processor in communication with the memory and the database . The processor of the expression editor system is operable to read the action point definition e.g. from the database and determine from the action point definition e.g. a dataset that is in context at the action point in the application program code . The processor is further operable to execute from the computer memory the expression editor tool which when executed is operable to obtain data field selections from the dataset that is in context at the action point in the application program code. The expression editor tool includes four pages including the select existing page the define calculations page the define single expressions page and the combine expressions page that may cause dirty flag issues to arise during the user interactions for which the expression editor tool may use various techniques to address. The scoped search provided by the expression editor allows the user to search for existing expressions for which the fields are in context. The expression editor tool is operable to graphically build an expression e.g. including the data field selections graphically build an outcome that executes depending on the evaluation of the expression link the outcome e.g. and the expression to form an action point rule e.g. for the action point e.g. and save the action point rule in the database for execution when the application program code reaches the action point .

The logic and processing described above may include additional or different logic and may be implemented in many different ways. A processor may be implemented as a controller microprocessor microcontroller application specific integrated circuit ASIC discrete logic or a combination of other types of circuits or logic. Similarly memories may be DRAM SRAM Flash or other types of memory. Parameters e.g. conditions and thresholds and other data structures may be separately stored and managed may be incorporated into a single memory or database or may be logically and physically organized in many different ways. Programs and instructions may be parts of a single program separate programs implemented in libraries such as Dynamic Link Libraries DLLs or distributed across several memories and processors.

While various embodiments of the invention have been described it may be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the invention. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

