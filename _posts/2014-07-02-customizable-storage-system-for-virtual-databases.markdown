---

title: Customizable storage system for virtual databases
abstract: A database storage system provides replication capability that allows data from a source database and application specific data from a source application to be replicated respectively to a target database storage system and a target application, thereby creating a virtual database and a virtual application. The database storage system generates a plurality of snapshots of the virtual database at a corresponding plurality of time points and a plurality of snapshots of the virtual application at the corresponding plurality of time points. The database storage system associates the plurality of snapshots of the virtual database with the plurality of snapshots of the virtual application at the corresponding plurality of time points so as to generate a historical time-sequence of concurrent modifications to both the virtual database and the virtual application at the one or more development environments, thereby allowing concurrent read/write and rollback, of data and applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436556&OS=09436556&RS=09436556
owner: Delphix Corp.
number: 09436556
owner_city: Menlo Park
owner_country: US
publication_date: 20140702
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 844 375 filed Jul. 9 2013 which is incorporated by reference in its entirety.

This invention relates generally to databases and in particular to storage efficient systems for managing databases.

Databases store data that is critical to an organization and thus form an important part of an organization s information technology infrastructure. Vendors often support various features for maintaining databases for example backup restore replication disaster recovery and so on. These features allow users to manage data stored in the database. For example if there is failure of a database a user can recover the data present in a previous consistent state of the database.

However users of databases often use large amount of data that is associated with the database but is not stored within the database. For example users of databases often use applications based on databases that are associated with large amount of data stored outside the database. Data of applications using database includes executable files configuration information documents processed by the application images other media files and so on. This data is stored outside the database and is not managed by the features of the database. For example a user may recover a prior consistent state of a database after a disaster recovery but the user may not able to restore the corresponding state of the data associated with the application using the database. Accordingly techniques for maintaining data are often inadequate as far as management of data associated with the database that is not stored within the database.

Embodiments create virtual application environments for a point in time associated with a source application environment. An application environment comprises an application configured to access a database along with the database. The application includes executable files of the application and data used by the application that is stored outside the database for example documents images and the like. A database storage system receives point in time copies of the source application environment by receiving point in time copies of the source application and point in time copies of the source database. The database storage system stores data blocks for the point in time copies of the source application such that at least some of the stored data blocks are associated with multiple point in time copies of the source application. The storage system also stores data blocks for point in time copies of the source database such that at least some of the stored data blocks are associated with multiple point in time copies of the source database. The storage system receives a request to create a virtual application environment that matches a state of the source application environment corresponding to a target point in time. The storage system identifies a point in time copy of the source application obtained before the target point in time and creates a virtual application comprising a set of files linked to data blocks associated with the identified point in time copy. The storage system also identifies a point in time copy of the source database obtained before the target point in time and creates a virtual database comprising a set of files linked to data blocks associated with the identified point in time copy. The storage system mounts the sets of files on one or more target servers. The storage system modifies the configuration of the virtual application to access the virtual database. The virtual application configured to access the virtual database is provided as the virtual application environment.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Virtual database systems provide a storage and performance efficient solution to performing functions such as replicating storing historical changes to rewinding and refreshing virtual databases. Users of virtual databases frequently develop and use application data and application files to interface with these virtual databases. However provisioning solutions such as those described above for efficiently replicating structured databases do not conventionally extend to applications that interface with the structured databases. As a result there is a need for analogous functionality to provision applications so as to efficiently replicate store historical changes to and rewind back in time the application along with the structured databases.

Accordingly embodiments provide storage efficient provisioning capability and functionality analogous to VDBs for application specific data. This allows users for example developers to access virtual copies of the application specific data in a storage and performance efficient manner. Furthermore this capability of efficiently provisioning application data allows users to access saved historical changes to the application specific data over time thereby allowing users to efficiently rewind the application specific data synchronously with the virtual database.

In certain embodiments of the invention one or more virtual databases are created based on the state of a production database or a virtual database at a particular point in time. The virtual databases can then be individually accessed and modified as desired. A database comprises data stored in a computer for use by computer implemented applications. A database server is a computer program that can interact with the database and provides database services for example access to the data stored in the database. Embodiments create a virtual database using storage level snapshots of production databases or clones of production databases instead of a live production database. Virtual database systems are described in U.S. patent application Ser. No. 12 603 541 filed on Oct. 21 2009 now issued as U.S. Pat. No. 8 150 808 which is incorporated by reference herein in its entirety.

In one embodiment information from the production database is copied to a storage system at various times such as periodically. This enables reconstruction of the database files associated with the production database for these different points in time. The information may be managed in the storage system in an efficient manner so that copies of information are made only if necessary. For example if a portion of the database is unchanged from a version that was previously copied that unchanged portion need not be copied. A virtual database created for a point in time is stored as a set of files that contain the information of the database as available at that point in time. Each file includes a set of data blocks and the data structures for referring to the data blocks.

A virtual database may be created on a database server by creating the database files for the production database corresponding to the state of the production database at a previous point in time as required for the database server. The files corresponding to the virtual database are made available to the database server using a file sharing mechanism which links the virtual database to the appropriate data blocks stored on the storage system. The process of making the virtual database available to a database server is called provisioning the virtual database. Multiple VDBs can be provisioned based on the state of the production database at the same point in time. On the other hand different VDBs can be based on different point in time state of the same production database or different production databases. VDBs may also be based on other VDBs.

The database server on which a virtual database has been provisioned can read from and write to the files stored on the storage system. A database block may be shared between different files each file associated with a different VDB. In particular a database block is shared if the corresponding virtual database systems are only reading the information in the database block and not writing to the database block. In one embodiment the virtual database manager makes copies of the database blocks only if necessary. For example a particular database block may be shared by multiple VDBs that read from the same database block. But if one of virtual database systems attempts to write to the database block a separate copy of the database block is made because the writing operation causes that database block to be different for the VDB corresponding to that virtual database systems than it is for the other VDBs.

In response to a request from the administrator system or based on a predefined schedule the database storage system may send a request for data to a production database system . The production database system responds by sending information stored in the production database as a stream of data . The database storage system receives the data sent by the production database system and stores the data. The database storage system stores the information efficiently for example by keeping versions of database blocks that have changed and reusing database blocks that have not changed.

To create a virtual database the database storage system creates files that represent the information corresponding to the production database system at a given point in time. The database storage system exposes the corresponding files to a virtual database system using a file sharing system . The virtual database system runs a database server that can operate with the files exposed by the database storage system . Hence a virtual copy of the production database is created for the virtual database system for a given point in time in a storage efficient manner.

VDBs can be used in various workflow scenarios. illustrates an example workflow scenario showing remote provisioning of virtual databases according to an embodiment. There are two sites that store database storage systems. The local site comprises the source database storage system and the remote site comprises the target database storage system . There may be one or more source database systems that include data stores . The source database system includes data store and the source database system includes the data store . The changes to the data stores of the source database systems are periodically received by the source storage database system and stored in the source data store . A database system may create virtual databases in the source database storage system and read write to the VDB.

Information describing changes to data in the source database storage system is transmitted to the target storage database system . These comprise the changed data blocks since the last time the data was transmitted from the source database storage system is transmitted to the target storage database system . The changes to the data in the source database storage system may be transmitted periodically or based on a predetermined schedule. A database system creates virtual databases in the target database storage system . The database system is allowed to read write to the VDB.

The database storage system retrieves information available in the production database systems and stores it. The information retrieved includes database blocks comprising data stored in the database transaction log information metadata information related to the database information related to users of the database and the like. The information retrieved may also include configuration files associated with the databases. For example databases may use vendor specific configuration files to specify various configuration parameters including initialization parameters associated with the databases. The database storage system also retrieves and stores application data from the production database system .

The data stored in the storage system data store can be exposed to a virtual database system allowing the virtual database system to treat the data as a copy of the production database stored in the production database system . The database storage system includes a point in time copy manager a transaction log manager a VDB timeflow manager an interface manager a VDB rollback manager a storage allocation manager a file sharing manager a virtual database manager an application snapshot manager an application rollback manager a storage system data store and an application timeflow manager . In alternative configurations different and or additional modules can be included in the database storage system .

The point in time copy manager interacts with the production database system by sending a request to the vendor interface module to retrieve information representing a point in time copy also referred to as a PIT copy of a database stored in the production DB data store . The point in time copy manager stores the data obtained from the production database system in the storage system data store . The data retrieved by the point in time copy manager corresponds to database blocks or pages of the database being copied from the production DB data store . After a first PIT copy request to retrieve information production DB data store a subsequent PIT copy request may need to retrieve only the data that changed in the database since the previous request.

The transaction log manager sends request to the production database system for retrieving portions of the transaction logs stored in the production database system . In some embodiments the request from the transaction log manager is sent to the vendor interface module . The data obtained by the transaction log manager from the vendor interface module is stored in the storage system data store . In one embodiment a request for transaction logs retrieves only the changes in the transaction logs in the production database system since a previous request for the transaction logs was processed. The database blocks retrieved by a point in time copy manager combined with the transaction logs retrieved by the transaction log manager can be used to reconstruct a copy of a database in the production system corresponding to times in the past in between the times as which point in time copies are made.

The storage allocation manager provides the functionality of saving data retrieved from the production database system . For example the point in time copy manager may call APIs of storage allocation manager to save blocks of data retrieved from the production database system . The storage allocation manager keeps track of the various versions of each block of data that may be obtained from the production database system . For a given time point the storage allocation manager can be requested to provide the latest version of a block of data obtained before the given time point. The storage allocation manager can also be used for making copies of blocks of data. Inn an embodiment if a block of data is copied for read only purposes the storage allocation manager allocates only sufficient storage to keep a pointer of reference to the exiting block of data. However if an attempt to write to the copied block of data is made the storage allocation manager allocates sufficient storage to make an actual copy of the block of data to avoid updating the original block of data.

The file sharing manager allows files stored in the storage system data store to be shared across computers that may be connected with the database storage system over the network. The file sharing manager uses the file sharing system for sharing files. An example of a system for sharing files is a network file system NFS . Sharing a file stored in the storage system data store using the file sharing manager allows a remote computer for example the virtual database systems to access the data in the shared file. A remote system may be able to read and write from to the file shared by the storage system data store .

The virtual database manager receives requests for creation of a virtual database for a virtual database system . The request for creation of a virtual database may be sent by a database administrator using the administration system and identifies a production database system a virtual database system and includes a past point in time corresponding to which a virtual database needs to be created. The virtual database manager creates the necessary files corresponding to the virtual database being created and shares the files with the virtual database system . The database administrator for a virtual database system may be different from a database administrator for the production database system .

A VDB timeflow manager maintains the storage update and retrieval of information associated with one or more timeflows corresponding to the virtual database. Such timeflow information includes information associated with a continuous series of changes made to the VDB across time including one or more time points along a VDB timeflow sequence change numbers and transaction logs associated with updates or modifications to the VDB files along the timeflow snapshots of the files at a subset of the time points along the timeflow and the like.

A VDB rollback manager receives user requests to rewind or rollback a VDB to a user specified point along a timeflow. The VDB rollback manager interfaces with the VDB timeflow manager to access timeflow information corresponding to the virtual database so as to retrieve a representation of the virtual database at the user specified point in time and to create of a new timeflow originating at the user specified point.

An application timeflow manager maintains storage update and retrieval of information associated with one or more timeflows corresponding to the virtual application. Such information may include one or more time points along the one or more application timeflows a continuous series of updates or modifications to the application files along the timeflow snapshots of the application files at a subset of the time points along the one or more application timeflow and the like.

An application rollback manager receives user requests to rewind or rollback application specific data to a user specified point along an application timeflow. The application rollback manager interfaces with the application timeflow manager to access timeflow information corresponding to the virtual application so as to retrieve a representation of the virtual application at the user specified point in time and to create a new timeflow originating at the user specified point.

A virtual database system includes a database server . The database server is similar in functionality to the database server and is a computer program that provides database services and application programming interfaces APIs for managing data stored on a data store . The data managed by the database server may be stored on the storage system data store that is shared by the database storage system using a file sharing system . In alternative configurations different and or additional modules can be included in a virtual database system .

Assuming the PIT copy is the last PIT copy made for the configuration shown in the VDB file structures are created for time point T2. When the structure are created the blocks V11 V12 . . . V25 may be implemented as pointers to the actual database block that stores the data. For example V11 represents the information in block F1 and since the block F1 was never updated during copies made at time Ti and T2 V11 points at F11. V12 represents the information in block F2 and since F2 was updated at time T1 V12 points at the block F22. Similarly V13 corresponds to block F3 that was updated at time T2 and points at the block F33.

As shown in a production environment includes a database storage system corresponding to production database system including a production database and a production application that interfaces with the production database system to retrieve and store data. The production database system stores data blocks corresponding to multiple point in time copies of a source database e.g. production database . The production application includes application specific data executable files configuration files and the like. The application specific data is stored outside the production database for example documents images audio files video files and other data processed by the application.

The data from production database system is provisioned to one or more target database storage systems e.g. target database storage systems such as development database system at one or more corresponding development environments e.g. development environment . In some embodiments as shown in virtual databases e.g. VDB are provisioned using the target or development database storage system e.g. development database system for use by developers and clients to access or read the data as well as to make modifications and updates to the data at the respective development environments. Furthermore changes made to the source database storage system e.g. production database system are propagated to the development database storage system e.g. development database system .

To enable provisioning of the data from production database system to the development database system the database storage system retrieves data associated with production database and stores the data in data store in a storage efficient and performance efficient manner for example by keeping versions of database blocks that have changed between consecutive data retrieval operations and reusing database blocks that have not. Database storage system creates files that represent the information corresponding to the production database system at a given point in time e.g. as explained further with reference to and below . Database storage system then exposes the corresponding files to the virtual database system e.g. VDB using a file sharing system e.g. Network File Sharing System NFS as illustrated in

Along similar lines upon receiving user parameters e.g. a source path port number user name password and the like for retrieval of application specific data the database storage system retrieves application data associated with production application and stores the application specific data in application store . Database storage system creates application files or application specific data that represent the information corresponding to the production application at a given point in time e.g. as explained further with reference to below . Database storage system then exposes the corresponding application specific data to development application also using a file sharing system e.g. Network File Sharing System NFS as illustrated in . In an embodiment the development application may execute on an application server that is separate from the development database system . Accordingly the virtual database is provisioned to a target database server and the virtual application is provisioned to a target application server. In another embodiment the virtual database and the virtual application are treated as a virtual application environment that is treated as a single entity that is provisioned to one or more target servers. Each virtual application environment comprises at least a virtual application and a virtual database such that the virtual application is configured to access the virtual database. The virtual application may receive requests for processing. The virtual application stores data in the virtual database and reads writes to the virtual database for processing requests received by the virtual application.

The database storage system receives different point in time copies of a source application environment comprising a source application configured to access a source database. The database storage system receives different point in time copies of the source application. The database storage system also receives different point in time copies of the source database. In some embodiments database storage system captures snapshots of source database blocks e.g. located at production database by synchronizing with the production database e.g. also referred to as dSource located on the source database system. Analogously in some embodiments database storage system captures snapshots of application data e.g. production application by synchronizing with application binaries e.g. also referred to as appSource located on the source system. In an embodiment the synchronization with a source of data source database or application data comprises receiving an initial copy of the data and subsequently receiving changed blocks of data from the source of data at different points in time for example periodically. The changed blocks of data are stored in the database storage system in a storage efficient manner such that a snapshot of the complete source of data can be reconstructed by using data blocks from different points in time for example by pointing at data blocks obtained at various points in time. Accordingly the database storage system stores data blocks for a plurality of different point in time copies of the source application wherein at least some of the stored database blocks are associated with multiple point in time copies of the source application. Similarly the database storage system stores data blocks for a plurality of different point in time copies of the source database wherein at least some of the stored data blocks are associated with multiple point in time copies of the source database.

Database storage system includes toolkit s to provide a set of scripts or executables which are run by the database storage system on the development environment or target environment at certain hook points during the manipulation of virtualized data e.g. to perform an initial load an empty NFS or iSCSI share is exported to a host server and then a customer s script or executable code is run on the host server which would enable copying of the relevant data into the share . Additionally database storage system receives and persists application specific data from hook script s and passes the application specific data along to other hook scripts if relevant. Toolkits define the user input required by operations like initial load and provision e.g. to locate the source data for an initial load .

As shown in in some embodiments the data from production database system is concurrently replicated across multiple remote database storage systems e.g. multiple target database storage systems such as development database system development database system and the like at multiple corresponding development environments e.g. development environment development environment and the like .

As such multiple virtual databases e.g. Virtual Database Virtual Database and the like and multiple development applications e.g. development application development application and the like are concurrently provisioned using the target or development database storage system e.g. development database system development database system and the like for concurrent use by developers and clients at different development environments to access or read the data as well as to make modifications and updates to the data at the respective development environments.

Accordingly a first production database system e.g. production database system stores data blocks corresponding to multiple point in time copies of a first source database e.g. production database A storing a first type of data and a second production database system e.g. production database system stores data blocks corresponding to multiple point in time copies of a first source database e.g. production database A storing a second type of data. In some embodiments the first type of data is structured data e.g. data that is organized based on a fixed schema or predefined structure and the second type of data is unstructured data e.g. data comprising files or data records that are not organized based on a fixed structure or schema . illustrates a system that makes storage efficient copies of information from the first and the second production database systems for replication and provisioning of the first and second type of data across the same or different development environments as described above with reference to

Shown in is a time progression along a time line alternatively referred to herein as a timeflow of changes in a source database e.g. production database as explained with reference to or production database shown in and corresponding changes in the VDB snapshots captured at one or more time points along the timeflow. As explained above with reference to changes or updates in specific blocks of the source database result in changes in the corresponding VDB files that point to those specific blocks of the source database. Conversely VDB files that correspond to or point to blocks of the source database that are not updated or modified are themselves not modified or updated.

Accordingly as shown in the timeflow in a VDB snapshot e.g. VDB snapshot is captured at time T. At time Tor immediately prior to time T e.g. subsequent to the capture of a snapshot immediately prior to snapshot the highlighted source database blocks e.g. in the illustration of source database blocks are updated or modified. Consequently VDB files corresponding to the modified source database blocks are updated or modified as shown in VDB Snapshot captured at time Ttherefore reflects the VDB file changes corresponding to source database changes that occurred after capture of a snapshot immediately prior to VDB Snapshot .

Subsequently as shown in the timeflow in VDB Snapshot is captured at time T. source database blocks that are updated or modified between time Tand time Tare as highlighted e.g. in the illustration of source database blocks VDB files corresponding to the modified source database blocks are correspondingly updated or modified and reflected in VDB Snapshot captured at time T.

The modifications to the VDB that occur between time Tand time Tare reflected in the transaction logs between time Tand time T. As explained above with reference to the transaction logs can be used to reconstruct a copy of the source database corresponding to time points between the times at which snapshots are captured e.g. in this example between time Tand time T .

Furthermore along the timeflow shown in VDB snapshot is captured at time T. Source database blocks that are updated or modified between time Tand time Tare as highlighted e.g. in the illustration of source database blocks VDB files corresponding to the modified source database blocks are updated or modified and reflected in VDB snapshot captured at time T. The modifications to the VDB that occur between time Tand time Tare reflected in the transaction logs between time Tand time T which can be used to reconstruct a copy of the source database corresponding to time points between time Tand time T.

As a result historical changes updates or modifications to source database blocks e.g. database blocks in a production database can be monitored and saved across time in a storage and performance efficient manner and these changes replicated across remote target e.g. development environments.

Further illustrates a process of capturing snapshots of a virtual database and a virtual application at various points in time along a timeflow corresponding to changes in a source database e.g. a production database and a source application e.g. a production application according to some embodiments.

Embodiments e.g. as described in and store point in time copies or snapshots of virtual databases associated with source or production databases and provide database users the flexibility to provision replicate refresh rewind and fast forward the virtual databases in a storage and performance efficient manner.

However as described with reference to most database systems e.g. production database systems include applications e.g. including executable files configuration files and other application specific data that interface with the databases e.g. the production databases . Database users and developers at one or more development environments frequently access application data from the production environment create a local copy of the application data at the development environments and modify or update the application data to conform to their needs. Examples of application data include documents images video and audio data binary data and so on. After making a series of updates and changes to the application data the developers at the one or more development environments check in the modified application data back into the production environment. Embodiments capture snapshots of the application data over time in a storage and time efficient manner e.g. analogous to the approach described above with reference to and for taking snapshots of production data .

Embodiments provide efficient mechanisms for capturing and saving storage and time efficient snapshots of the source application and the source database so as to allow developers to provision replicate rewind and refresh the virtual application data in a manner similar to the process described with reference to virtual databases above. In an embodiment the database storage system stops the processes of virtual application and the virtual database before performing a rewind or refresh operation. After the rewind or refresh operation is performed on the virtual application and the virtual database the database storage system restarts the processes of the virtual application and the virtual database. A rewind operation modifies the data block of the virtual application environment including the data blocks of the virtual application and the virtual database to point to data blocks associated with a different point in time for example a previous point in time. The refresh operation modifies the data block of the virtual application environment including the data blocks of the virtual application and the virtual database to point to data blocks associated with recent point in time for example the latest point in time copies of the virtual application and the virtual database.

Accordingly the database storage system retrieves source application specific data e.g. from the production environment production application as shown in and block changes to the application specific data. For example as shown in application data at time T application data at time T and application data at time Tcorrespond to source application specific data retrieved by the database storage system from the production environment the highlighted blocks in the application specific data at each point in time along the application timeflow reflect changes to the application specific data relative to the immediately previous version of the application specific data.

Database storage system saves and maintains over multiple time points along the application timeflow storage efficient application data snapshots e.g. application snapshot at time T application snapshot at time T and application snapshot at time T associated with and indicative of changes and updates to the source application specific data.

As a result historical changes updates or modifications to source application data e.g. application data in a production application can be monitored and saved across time in a storage and performance efficient manner and these changes replicated across remote target e.g. development environments.

Further illustrates a process of capturing snapshots of a virtual database and a virtual application based on inputs received from hook scripts running on the production environment according to some embodiments.

As shown in a virtual database e.g. VDB undergoes modifications or updates based on updates to its source database as explained with reference to at points in time along a timeflow e.g. VDB Timeflow associated with the virtual database. As described with reference to snapshots of the virtual database and changes to the virtual database files corresponding to changes in the associated source database are captured and stored at time points e.g. T T and T along the VDB timeflow. In some embodiments snapshots associated with the virtual database corresponding to changes in the source database and information corresponding to the timeflow are stored in a virtual database container e.g. VDB Container shown in .

In addition to the VDB snapshots and VDB Timeflow stored in the VDB Container on the development environment database storage system e.g. application store shown in captures and stores snapshots of the application data or application specific data such as application snapshot application snapshot and the like corresponding to changes in the associated source application at a subset of time points e.g. T T T T and the like along the application timeflow. In some embodiments snapshots associated with the virtual application e.g. corresponding to changes in the development application and information corresponding to the timeflow are stored in an application container e.g. application container shown in .

The snapshots of the application specific data may correspond to changes in the associated source application and or the development application such as modifications made to the development application . The database storage system synchronizes the copies of the application specific data at the application store with changes being made to the application by users at the development environment e.g. development environment shown in using a time of initiation of a provisioning operation e.g. by provisioning the application data from the closest available snapshot to a time at which a VDB was provisioned .

As shown in database storage system saves transaction logs to track changes to the VDB between consecutive snapshots. However in some embodiments transaction logs are not stored to capture changes to the application specific data. As a result snapshots of application specific data at the development environment are captured on the development end at a higher frequency e.g. at average intervals of 30 seconds 1 minute 5 minutes 1 hour and the like than a rate at which snapshots of the VDB are captured e.g. as illustrated in . However in other cases the application snapshots may be captured at a lower frequency if the application data is changed at a lower frequency compared to the frequency at which data in the source database is updated. In general the application snapshots and the database snapshots may be captured at different frequencies.

Respective snapshots of the VDB and the application specific data taken at the same point in time e.g. at time T T or T are optionally synchronized by the database storage system e.g. based on a time of provisioning such as by provisioning the application data at a time that most closely matches the time at which the VDB was provisioned so as to be able to replicate a copy of both the application and the VDB at the same point in time. This would permit the user to synchronously or concurrently rollback or rewind both the VDB and the application specific data to a common previous point in time as described further with reference to below .

It should be noted that in some embodiments the process or approach of synchronizing of application data snapshots and VDB snapshots taken on the production environment as opposed to the development environment is different.

In some embodiments snapshots taken on the production environments are expensive and therefore infrequent. As a result one or more forms of user input is used to perform the synchronization e.g. to match the infrequent snapshots of the application data with VDBs which can be provisioned from with greater frequency . For example a customer employs an internal policy to only push application changes to production on Friday evenings and then take a snapshot of the new application data. As a result if the customer provisioned a VDB the following week they would know based on their internal policy to provision the corresponding application data from the application data snapshot taken the previous Friday.

On the other hand application snapshots taken at the development environments may be taken at a low frequency. As a result the application data that most closely matches the time the VDB is being provisioned from is provisioned.

In some embodiments as shown in a virtual database undergoes modifications or updates based on updates to its source database at points in time along a timeflow associated with the virtual database e.g. VDB timeflow . Snapshots of the virtual database and changes to the virtual database corresponding to changes in the associated source database are captured and stored at a subset of time points e.g. T T and T along VDB timeflow . In some embodiments snapshots associated with the virtual database corresponding to changes in the source database and information corresponding to the VDB timeflow are stored in a virtual database container e.g. VDB Container shown in .

Similarly application specific data undergoes modifications or updates on the development environment based on updates to the development application at points in time along a timeflow associated with the application specific data e.g. application timeflow . Snapshots of the virtual application and changes to the virtual application e.g. corresponding to changes in the associated source application for instance in the development environment are captured and stored at a subset of time points e.g. T T T T and the like along application timeflow . In some embodiments snapshots associated with the virtual application corresponding to changes in the source application and information corresponding to the application timeflow are stored in a container e.g. application container shown in .

Responsive to a user request to concurrently or synchronously rollback or rewind the VDB and the virtual application to a user specified prior time point e.g. rollback point T corresponding to time T as shown in database storage system clones the application snapshot e.g. application snapshot and the VDB snapshots VDB Snapshot captured at the user specified time point.

Database storage system then creates a new timeflow for the application e.g. app timeflow and the VDB e.g. VDB timeflow within the same respective application and VDB containers and provisions the same application and VDB respectively from the new application and VDB timeflows originating at the user specified prior time point e.g. rollback point T corresponding to time T .

Toward this end in some embodiments the database storage system temporarily shuts down the VDB e.g. suspends user access to the VDB creates new VDB and application timeflows within the same VDB and application containers e.g. VDB Timeflow within VDB container and app timeflow within the application container points the destination storage to the new timeflows and brings up the same original VDB provisioned from the new VDB timeflow e.g. from VDB Timeflow .

Database storage system then tracks changes to the VDB and the application specific data at the development environment e.g. by capturing and maintaining VDB and application snapshots and VDB transaction log files between VDB snapshots along the new VDB and application timeflows respectively.

As shown in responsive to a user request to concurrently rollback or rewind the virtual database and the virtual application to a prior user specified time point e.g. rollback time T at which a snapshot of the application specific data exists e.g. application snapshot but a snapshot of the virtual database does not database storage system retrieves or accesses the nearest prior VDB snapshot e.g. VDB snapshot at time T and clones the VDB at snapshot applies transaction log files between Tand the requested rollback point Tto create a representation of the VDB files at the rollback point T.

Database storage system then creates a new VDB timeflow e.g. VDB Timeflow originating at T. Since the application snapshots are captured at the development environment at a higher frequency e.g. at average intervals of approximately 30 seconds 1 minute 5 minutes 1 hour and the like an application snapshot at the requested rollback point or in close temporal proximity to the requested rollback point e.g. application data snapshot matched to the time the VDB is being provisioned from exists along the application timeflow application snapshot exists at the requested rollback point Talong application timeflow and database storage system clones the application at the application snapshot at the requested rollback point and creates a new application timeflow e.g. application timeflow originating at the rollback point.

Database storage system identifies a source database e.g. production database system and retrieves point in time copies of data from the source database. Database storage system identifies a source application e.g. production application associated with the source database and retrieves point in time copies of data from the source application.

Database storage system generates a plurality of snapshots of the virtual database at a corresponding plurality of time points e.g. VDB snapshot at time T VDB snapshot at time T VDB snapshot at time T as shown in . The snapshots store data obtained from the source database in a storage efficient manner such that some of the stored data blocks are associated with multiple point in time copies of the source database.

Database storage system generates a plurality of snapshots of the virtual application at a plurality of time points e.g. application snapshot at time T application snapshot at time T application snapshot at time T as shown in based on one or more inputs received from the one or more development environments e.g. a user initiating a provision operation . The snapshots store data obtained from the source database in a storage efficient manner such that some of the stored data blocks are associated with multiple point in time copies of the source database.

In an embodiment database storage system associates the plurality of snapshots of the source database with the plurality of snapshots of the source application at the corresponding plurality of time points e.g. as explained with reference to . In other embodiments a snapshot of the source database gets associated with a snapshot of the source application upon request to generate a virtual application environment.

The database storage system receives a request to create a virtual application environment for a target point in time such that the virtual application environment matches a state of the source application environment corresponding to the target point in time. The database storage system identifies a point in time copy of the source application obtained before the target point in time. The database storage system also identifies a point in time copy of the source database obtained before the target point in time. The database storage system creates a virtual database and a virtual application based on the identified point in time copies and modifies the configuration of the virtual application to use the virtual database. The combination of the virtual application and the virtual database is provided as the virtual application environment. In some embodiments identifying the point in time copy of the source application comprises selecting the latest point in time copy of the source application obtained before the target point in time and identifying the point in time copy of the source database comprises selecting the latest point in time copy of the source database obtained before the target point in time.

In an embodiment and the virtual application comprises a set of files linked to data blocks associated with the identified point in time copy of the source application. Similarly the virtual database comprising a set of files linked to data blocks associated with the identified point in time copy of the source database. The database storage system mounts the set of files of the virtual application and the set of files of the virtual database on one or more target servers. The database storage system provides access to the sets of files to the target servers. In some embodiment the set of files of the virtual application may be mounted on one target server and the set of files of the virtual database may be mounted on another target server. In other embodiments both the set of files of the virtual application and the set of files of the virtual database may be mounted on the same target server.

In some embodiments modifying the configuration of the virtual application to access the virtual database comprises executing a script configured to update the configuration of the virtual application to refer to the virtual database instead of the source database. The database storage system may execute scripts that start one or more processes of the virtual application. The database storage system may receive subsequent requests to create other virtual application environments for the source application and source database for example other virtual databases for the same target point in time or for different target points in time. The virtual databases may share the data blocks of the virtual database with other virtual databases. Similarly the virtual application may share the data blocks of the virtual application with other virtual applications.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to these signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for creating virtual application environments from point in time copies of production databases and production applications stored in a storage manager. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

