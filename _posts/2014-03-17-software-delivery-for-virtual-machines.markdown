---

title: Software delivery for virtual machines
abstract: One embodiment entails delivering a software payload to guest software in a virtual machine so that the software payload is part of a file system accessible by the guest software, wherein the delivery is such that the software payload is part of a file system accessible by the guest software. The delivering utilizes a virtual device of the virtual machine, but does not involve either a virtual network interface card (NIC) or any virtual host bus adapter (VHBA) of the virtual machine. The delivering further includes establishing a data path from the software payload to the virtual machine and a guest agent of the virtual machine. During processing of the software payload, status from the guest agent is monitored. After reception of the status indicating completion of the processing of the software payload, the data path is deactivated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448783&OS=09448783&RS=09448783
owner: VMware, Inc.
number: 09448783
owner_city: Palo Alto
owner_country: US
publication_date: 20140317
---
This application claims the benefit of U.S. patent application Ser. No. 12 060 134 filed on Mar. 31 2008 granted as U.S. Pat. No. 8 677 351 which claimed priority from U.S. Provisional Application No. 60 920 857 filed Mar. 29 2007.

A common and perhaps the most common method for delivering software updates for example new software patches to existing software data files antivirus signatures and the like to guest software of virtual machines is to treat the virtual machines as physical machines and to use traditional software delivery techniques. These methods usually fall into two broad categories agentless and agent based methods.

In an agentless method a central update server has access to a repository containing software update payloads. In addition the central update server has knowledge of client computers on a network it manages. This knowledge is derived through manual user registration automatic discovery or a combination of both. The central update server periodically checks which client computers need which updates if any. Whenever a client computer is in need of an update the central update server attempts to connect to a guest operating system OS running on the client computer. If the connection succeeds the central update server requests the guest OS to authorize it to carry out operations necessary to deploy the payload onto the client computer. The operations generally include at least 1 copying the payload from the repository over the network into a temporary area in the client computer s disk and 2 unpacking applying and or executing the contents of the copied payload.

One disadvantage associated with the agentless method is unpredictability. For example the central update server may not be able to connect to unreachable client computers for example those that are off the network or on a different network and client computers that have accounts and passwords unknown to the central update server or client computers that have restricted incoming traffic through use of a firewall.

The agent based method attempts to alleviate these issues arising in the agentless method by installing a specific agent on each client computer that needs to be managed. The central update server communicates with the agent which then communicates with the local guest OS to coordinate the payload deployment process. The presence of the agent can result in better predictability because it establishes a pre authorized channel between the central update server and the client computer. Also by regularly obtaining status from agents the central update server can detect and try to resolve any network or authorization problems before the next deployment operation.

Agents however introduce a new management problem because they must themselves be deployed installed and updated. It is also common for multiple software applications to provide their own update infrastructure resulting in a proliferation of agents which compounds the problem. Moreover there can be increased cost and complexity in deploying and managing additional agents on each virtual machine.

Note that when client computers are virtual machines more points of potential failure are introduced. For example a virtual infrastructure administrator needs to ensure that managed client computers are configured to attach to a virtual network that is accessible from the central update server. For example a popular use of virtual machines is in test and development in such configurations virtual machines are commonly placed on isolated virtual networks that may not be accessible to the central update server. Even if a virtual machine s network is properly configured the virtual machine s virtual NIC network interface card must also be set to a connected state to communicate on the network.

Also note that delivering software updates to guest software of virtual machines using a traditional server to client method can adversely affect network performance when multiple copies of the same software updates are sent to individual client computers. Specifically it does not scale well to large numbers of client computers.

In accordance with one embodiment a software payload is delivered to guest software in a virtual machine so that the software payload is part of a file system accessible by the guest software wherein delivery is to the guest software such that the software payload is part of a file system accessible by the guest software. The delivering utilizes a virtual device of the virtual machine but does not involve either a virtual network interface card NIC or any virtual host bus adapter VHBA of the virtual machine. The delivering further includes establishing a data path from the software payload to the virtual machine and a guest agent of the virtual machine. While the software payload is processed within the virtual machine status from the guest agent is monitored wherein the status relates to the processing of the software payload. After reception of the status indicating completion of the processing of the software payload the data path is deactivated.

It should be appreciated that one or more embodiments of the present invention can be used with both hosted and non hosted virtual machines VMs with partially virtualized systems regardless of the degree of virtualization and with VMs with any number of physical and or logical virtualized processors. The Appendix discusses virtualization technology. Moreover one or more embodiments of the present invention may be implemented wholly or partially in hardware for example and without limitation in processor architectures intended to provide hardware support for VMs. Additionally one or more embodiments of the present invention may also be implemented directly in a computer s primary operating system OS both where the OS is designed to support virtual machines and where it is not.

One or more embodiments of the present invention are directed toward methods and systems for software delivery to virtual machines. In accordance with one or more such embodiments a virtual machine infrastructure is used to enable reliable communication with a guest operating system which virtual infrastructure generally includes a management network that interconnects a a management server for example a VMware VirtualCenter software product available from VMware Inc. of Palo Alto Calif. b virtual machine hosts for example a VMware ESX server software product available from VMware Inc. of Palo Alto Calif. provides a virtual machine host and c a guest agent running in virtual machines e.g. a VMware Tools software product available from VMware Inc. of Palo Alto Calif. provides a guest agent . In addition in accordance with one or more embodiments of the present invention the guest agent is extended to participate in the software update process and a host to guest agent link is provided over a communications channel that is referred to herein as backdoor. Advantageously by extending the guest agent to participate in the software update process the high availability and reliability of the management network is leveraged to minimize or eliminate a risk of network configuration and authentication problems. In further addition in accordance with one or more such embodiments at least one or more of three methods for delivery of a software update payload are supported a a backdoor method b a hot add method and c a hot insert method which is a variation of the hot add method. Specifically in accordance with one or more such embodiments the backdoor method uses a virtual machine host to guest agent link implemented over a communications channel called a backdoor channel or backdoor where the backdoor channel is used to send the software update payload to the guest operating system. As will be set forth in more detail below depending on virtual machine and host computer configuration the backdoor method involves up to two copy operations in the worst case and none zero in the best case . In accordance with one or more such embodiments the hot add method entails placing a software update payload on a formatted virtual disk VD and dynamically connecting the virtual disk to a virtual machine so that a guest OS and a guest agent in the VM can access the software update payload directly. Lastly in accordance with one or more embodiments the hot insert method is a variation of the hot add method wherein a virtual CD for example a CD ROM or virtual DVD for example a DVD ROM disc containing the software update payload is virtually inserted into the virtual machine s virtual CD drive for example a CD ROM drive or virtual DVD drive for example virtual DVD ROM drive . The hot add and hot insert methods usually involve zero copy operations.

A virtual machine such as VM running on host computer can be equipped with several virtual devices such as for example and without limitation a one or more virtual host bus adapters for example VHBAs and to provide access to disks b one or more virtual CPUs not shown c one or more virtual network interface cards for example VNIC to provide access to networks and d one or more specialized communications devices such as for example and without limitation backdoor BD that enables software in VM to interact directly with a virtual machine monitor for example underlying VMM .

When VM shown in is active i.e. powered on it is allocated virtual random access memory VRAM . In addition a boot sequence loads software the guest or guest software from one or more disks of VM where such software includes for example and without limitation guest operating system GOS and virtual infrastructure specific components such as guest agent GA . Note that guest agent is typically a collection of software for example and without limitation drivers daemons services libraries scripts or any combination thereof that can affect the performance manageability and or ease of use of VM within virtual machine infrastructure . For example the guest software can include a host guest file system HGFS component HGFS that enables host computer and GA to share files. Note for example and without limitation that HGFS can be a network file system that enables accessing of files on remote servers using BD instead of a guest network stack.

In accordance with one or more embodiments of the present invention GA and HGFS can communicate with components of virtual machine infrastructure outside VM through BD . Further the communication method can depend on VMM software . In particular and in accordance with one or more such embodiments BD enables two components to communicate through an input output I O port that can be viewed as a software communication pipe. In addition and in accordance with one or more further such embodiments two components may use shared memory to communicate. However it should be understood that embodiments of the present invention are not limited by these examples. In accordance with one or more such embodiments the software communication pipe embodied using BD can be used to exchange control messages or data or both and in both directions. For example and without limitation host computer and GA can notify each other of the presence of a message and or data in the software communication pipe using any one of a number of methods that are well known to those of ordinary skill in the art including but not limited to traps interrupts and polling.

In accordance with one or more embodiments a VM configuration usually stored as a data file can specify disks that are visible to the VM for example VM through the host bus adapters for example HBAs and . In accordance with one or more such embodiments a VMM for example VMM controls a mapping between disks visible to the VM and actual objects that provide storage for them. In particular and in accordance with one or more such embodiments a VM s disks can be mapped in a number of different ways. For example and without limitation a VM disk can be mapped to a virtual disk file in a private disk file system that can be directly attached to the host computer. For example in accordance with one or more embodiments virtual disk VD stored in file system FS for example FS is an ext3 file system on disk can be directly attached to host computer through HBA . Additionally for example and in accordance with one or more embodiments a VM disk can be mapped to a virtual disk file on a shared file system that can be accessed by multiple hosts. It should be appreciated that the file system can be a distributed disk file system such as for example and without limitation a Virtual Machine File System VMFS available from VMware Inc. that resides on a shared disk. Note that in accordance with one or more embodiments of the present invention the file system can be virtual disk VD on VMFS on disk which is attached through storage area network SAN to HBA or virtual disk on VMFS on iSCSI disk which is attached through local area network LAN for example an IP network to NIC . In addition in accordance with one or more embodiments of the present invention the file system can also be a network file system exported by a network attached storage NAS filer for example virtual disk stored on network file system NFS belonging to filer which is attached through local area network LAN to NIC . In further addition and in accordance with one or more embodiments of the present invention a VM disk can be mapped to an entire physical disk for example SAN disk or iSCSI disk . Note that this type of mapping can sometimes be called raw because a virtual machine can access the raw storage of a physical disk.

As shown in in accordance with one or more embodiments of the present invention virtual machine infrastructure can include without limitation server computer that can be coupled to both host computers and . Note that virtual machine infrastructure can include more or less components than those shown in . As further shown in server computer can include without limitation update server VI server OS NIC and HBAs and wherein OS is coupled to NIC and HBAs and . It should be understood that server computer can include more or less components than those shown in . In accordance with one or more embodiments of the present invention server computer is coupled to physical disk via HBA and disk can include file system FS and FS in turn includes repository which includes payload . In further addition and in accordance with one or more embodiments of the present invention server computer is coupled to LAN via NIC and server computer is coupled to SAN via HBA . As further shown in NAS is coupled to LAN and NAS includes NFS wherein NFS includes VD repository and VD . Still further as is also shown in repository includes payload and VD includes file system and repository FS Rep. wherein FS Rep. includes payload . As still further shown in iSCSI disks and are each coupled to LAN . Further as shown in iSCSI disk includes VMFS wherein VMFS includes VD repository and VD . Still further as is also shown in repository includes payload and VD includes file system and repository FS Rep. wherein FS Rep. includes payload . As still further shown in iSCSI disk includes file system and repository FS Rep. wherein FS Rep. includes payload . Note that SAN disks and are each coupled to SAN . Further as is also shown in SAN disk includes file system and repository FS Rep. wherein FS Rep. includes payload . As still further shown in SAN disk includes VMFS and VMFS includes VD repository and VD . Finally as shown in repository includes payload and VD includes file system and repository FS Rep. wherein FS Rep. includes payload .

As shown in virtual machine infrastructure includes host computer which includes VMs and cache host agent HA VMM NICs and and HBAs and . In particular as shown in VMM is coupled to each of VMs HA NIC and HBAs and . As further shown in VM includes GA HGFS BD GOS VHBA and VNIC . Note that a GA and HGFS can each be coupled to BD b BD can be coupled to VMM c GOS can be coupled to VNIC d VNIC can be coupled to VMM e VHBA can be coupled to VMM f NIC can be coupled to LAN and HA g NIC can be coupled to LAN h HBA can be coupled to disk and i HBA can be coupled to SAN . As further shown in disk includes FS and FS includes VD .

As shown in virtual machine infrastructure can include host computer which includes VMs and HA VMM NICs and and HBAs and . In particular as shown in VMM is coupled to each of VMs HA NIC and HBAs and . As further shown in VM includes GA HGFS BD GOS VHBA and VNIC . Note that a GA and HGFS can each be coupled to BD b BD can be coupled to VMM c GOS can be coupled to VNIC d VNIC can be coupled to VMM e VHBA can be coupled to VMM f NIC can be coupled to LAN and HA g NIC can be coupled LAN and h HBA can be coupled to SAN .

In accordance with one or embodiments of the present invention a configuration of a VM specifies connections between its virtual NICs and IP networks real or virtual. For example as shown in virtual machine infrastructure comprises VMs and connected to LAN . In accordance with one or more embodiments of the present invention LAN is isolated from LAN which is used for virtual infrastructure management and storage devices. In accordance with one or more embodiments of the present invention it is also possible for virtual machines and physical elements to share a single network for example an IP network .

As further shown in from the perspective of virtual machines and and in accordance with one or more embodiments of the present invention VM includes three disks which are mapped to VD files and respectively. Typically from the perspective of VM VDs and appear to be direct attached. In addition and in accordance with one or more embodiments of the present invention VM includes three disks one mapped to VD while the other two are mapped to raw physical devices for example SAN disk and iSCSI disk . As shown in VMs and are connected via LAN and can thus communicate with each other.

As shown in virtual machine infrastructure includes VMs and VDs and SAN disk iSCSI disk and LAN . However one should understand that virtual machine infrastructure can include more or less components than those shown in . In addition as shown in VM includes GA HGFS GOS BD VHBA and VNIC . Further as shown in a GA and HGFS can be coupled to BD b GOS can be coupled to VHBA and VNIC and c VHBA can be coupled to VDs and . In addition as shown in VM includes GA HGFS GOS BD VHBA and VNIC . Further as shown in a GA and HGFS can be coupled to BD b GOS can be coupled to VHBA and VNIC and c VHBA can be coupled to VD SAN disk and iSCSI . Lastly VM can be coupled to VM and in particular VNICs and can each be coupled to LAN .

As shown in in accordance with one or more embodiments of the present invention to consolidate and simplify management of hosts and their virtual machines virtual machine infrastructure includes virtual infrastructure server program VIS that communicates with a host computer over LAN . In accordance with one or more embodiments of the present invention server can communicate with a VMM of a host computer for example VMM of host computer directly or through a proxy called a host agent for example HA . In accordance with one or more such embodiments of the present invention virtual infrastructure management network can include links among the HA for example HA the VMM for example VMM and the guest agent for example GA . As such this enables VIS to manage and control host computers and virtual machines and to a certain extent guest software running inside virtual machines. Note that in accordance with one or more such embodiments of the present invention the guest agent may be integrated into the VMM.

In accordance with one or more embodiments of the present invention a set of extensions to virtual machine infrastructure can provide a mechanism for update server shown in to deploy a specified payload to a specified virtual machine for example VM and the like . Note that update server can run on any computer in virtual machine infrastructure . The design of update servers is well understood by those of ordinary skill in the art. For example shows an exemplary configuration where update server can operate on the same computer i.e. computer that runs virtual infrastructure VI server .

In accordance with one or more embodiments of the present invention update servers for example update server can include responsibilities of for example and without limitation a detecting which virtual machines need software updates b determining updates needed by out of date virtual machines and c obtaining software updates for example and without limitation by downloading them from the Internet .

In accordance with one or more embodiments of the present invention a repository is provided for update server to use to store and manage software updates. In accordance with one or more such embodiments the repository can be a folder of a file system. It should be understood that the file system may reside on any one of a number of storage devices depending on deployment method. In accordance with one or more embodiments of the present invention a choice of repository location can depend on a payload delivery method. However after a repository location is chosen a virtual infrastructure VI administrator can configure update server and VIS to use that repository location to store software updates or any other software to be installed . Note that term payload herein can denote the total content that update server wishes to deploy to a virtual machine for example VM for an update operation. The payload comprises for example and without limitation software updates for example patches data files software installers and the like and optionally an installation program or script . The installation program or script is designed to run inside a virtual machine for example VM and its purpose is to apply and or execute the software updates and optionally to send commands to the guest operating system for example GOS for example and without limitation to reboot if necessary. The payload can be for example and without limitation a collection of files or a self executing extracting container for the files for example an executable .exe file or a zip file .

In accordance with one or more embodiments of the present invention a service can be provided whose interface can be expressed as an exemplary procedure that looks like for example and without limitation 

wherein the payload specification specifies updates and or scripts to be deployed and the location of the repository that contains them. In accordance with one or more such embodiments of the present invention the software updates can be identified by the names of their files but are not limited to such. Note that in accordance with one or more embodiments of the present invention an identifier of the repository location can be a string that identifies a file system containing the repository and a path of the repository within that file system. It should be understood that such a string can be implemented in a wide variety of ways. For example and without limitation the following string indicates that the payload resides on a file system local to the server c repository name payload name the following string indicates that the payload resides on a CIFS filer fileserver name repository name payload name the following string indicates that the payload resides on an NFS filer fileserver name repository name payload name and the following string indicates that the payload resides on a VMware VMFS distributed datastore datastore name repository name payload name.

Note that the VM specification of the above exemplary DeployUpdates procedure can identify the virtual machine for example VM on which to deploy the payload. Note also that the format of the VM identifier can depend on the virtual machine infrastructure environment in which it is utilized. For example in accordance with one or more embodiments of the present invention the identifier could be a globally unique identifier for the virtual machine it could also be composed of a host name and the name of a configuration file on the host that represents that virtual machine.

Further note that the optional credentials of the above described exemplary DeployUpdates procedure can optionally specify a username and password to authorize the software deployment operation. Further those credentials can be validated by authentication and authorization providers of the computing environment.

In accordance with one or more embodiments of the present invention virtual machine infrastructure and its management network control the update process so that authentication and authorization can be handled by VIS . Advantageously such a single point of access control can ensure that once an update request is authorized the update process will be able to proceed without risk of being blocked by any guest OS specific security policies. In an embodiment where a virtual infrastructure VI administrator configured multiple isolated networks i.e. one for VI management for example LAN and one or more for general VM communication for example LAN the one used for VI management is typically more likely to be better maintained secured and thus less prone to outages. Since most virtual machines for example VM are configured with a guest agent for example GA and a backdoor for example BD control messages can be sent to and from guest software with high reliability because the control messages can bypass the VM s virtual NIC network stack and guest OS security policies including firewalls .

In accordance with one or more embodiments of the present invention referring to update server can send a DeployUpdates request described above to an update controller not shown . In accordance with one or more such embodiments of the present invention the update controller can be a software component that causes various operations of an update process to be carried out. In accordance with one or more such embodiments of the present invention the update controller can be embodied as a standalone program that can interact with VIS through an application programming interface API to carry out the operations of the update process. Alternatively the update controller can be integrated into VIS . In accordance with such an embodiment update server can send the request to VIS directly.

Referring to it should be appreciated that utilizing a VM identifier enables VIS to find the host computer for example host computer the host agent for example HA the virtual machine monitor for example VMM and the guest agent for example GA for that virtual machine for example VM . Note that this information retrieval can be performed using information that VIS stores in its internal database but is not limited to such.

Then in accordance with one or more embodiments of the present invention VIS can then send a message to the guest agent for example instructing it to prepare for an update or install operation. Note that the actual delivery of the message can be processed by a combination of the host agent for example HA the VMM for example VMM and the backdoor device for example BD . It should be understood that the message can be implemented in any one of a number of ways that are well known to those of ordinary skill in the art. For example in accordance with one or more such embodiments of the present invention the message can include but is not limited to the following information how the payload will be delivered to the VM the location of the payload in the guest s file name space and or information and instructions on how to process the payload. As for the location of the payload depending on the payload delivery method this location may be specified by VIS or negotiated between the guest agent for example GA and VIS the VMM for example VMM or the HA for example HA . The information and instructions on how to process the payload can be implemented in any one of a number of ways. For example and without limitation exemplary information and instructions can include the payload is a compressed archive decompress it unpack it and execute a program or script contained in the archive to initiate the update installation process. It should be understood that this information can be specified explicitly in the message or implicit for example pre negotiated between VIS and the guest agent for example GA in accordance with any one of a number of methods that are well known to those of ordinary skill in the art.

Referring to VIS can then deliver the payload to the VM using one of the methods described herein. Note that the delivery operation may involve participation of the guest agent for example GA . A successful delivery can result in the payload being visible to the guest software for example including the guest OS for example GOS the guest agent for example GA and guest applications. As such this means the payload can appear as one or more files in the guest s file system name space.

Then the guest agent for example GA can process the payload for example by using pre negotiated or explicitly specified instructions. Such processing can be specific to the payload type the updates that it contains and or the type of guest OS and may include one or more of the following operations uncompressing and unpacking the payload if it is an archive of files copying files for example virus signature files to specific folders of the guest launching executable program files for example patches rebooting the guest OS and cleaning up deleting files.

Referring to the guest agent for example GA may communicate status updates to VIS during the update process. When the process finishes the guest agent for example GA can return a final status to VIS indicating whether or not the overall operation failed or succeeded. This status may optionally include a log of operations that were executed.

After payload processing ends VIS may perform some clean up work to undo any side effects of the payload delivery operation for example and without limitation deleting temporary copies of the payload . Finally VIS can return a status to the update server for example update server to indicate whether or not the overall update operation was successful.

In accordance with one or more embodiments one purpose of the payload delivery operation is to make the payload appear in the guest software s file name space so that it can be processed by the guest agent for example GA . This can mean making the payload or a copy of it appear on a file system accessible by the guest OS for example GOS .

In accordance with one or more embodiments of the present invention any data path is avoided that involves a general network stack for example a TCP IP stack of a VM. Advantageously this avoids problems related to unreliable VM networks and authentication authorization issues caused by guest OS security policies. In this regard note that in accordance with one or more embodiments of the present invention the backdoor device for example BD or the virtual HBA for example VHBA may be used to deliver the payload to the guest. It should be understood that the specific method utilized for delivery can be determined by but is not limited to virtual machine infrastructure capabilities host computer configuration and administrator preferences.

In accordance with one or more embodiments the efficiency of a chosen method for delivery can be measured by the number of additional copies of the payload that are created and ultimately deleted during deployment. For example the backdoor method as its name implies relies on a backdoor device for example BD to transmit the payload to the guest. Depending on the configuration of the virtual machine infrastructure for example virtual machine infrastructure the number of copy operations involved in transmitting the payload can range from 2 to 0. The following discussion uses an example that assumes the target guest runs on VM which is hosted by host computer shown in .

Backdoor Method For a 2 copy configuration of virtual machine infrastructure repository is stored in private file system FS on disk that can be coupled to server computer which hosts VIS . In this example assume that the guest is not equipped with an HGFS component or if it is equipped with one the HGFS component has been disabled by a virtual infrastructure administrator for example possibly because of security concerns . Since payload in repository shown in is not directly visible to host computer VIS copies payload over network to cache on host computer VIS interacts with host agent HA to authorize the data transfer. Cache can be a folder on a file system directly accessible by host computer and is most naturally managed by either HA or VMM . It should be understood that space for cache can be managed using any one of a number of well known cache management methods including but not limited to no management at all for example let cache grow in size until it is manually trimmed by a human administrator limit the size and when full delete the oldest payload s or limit the size and when full delete the least recently used payload s . It should be appreciated that HA may employ an optimization that could save a copy operation. For example in accordance with one or more embodiments HA can check if cache already contains a copy of payload that VIS intends to transfer. Note that this optimization can be valuable where the same payload is delivered to multiple VMs on the same host computer for example host computer . The check can be performed using any one of a number of methods that are well known to those of ordinary skill in the art such as but not limited to a check based on payload name s or a check based on a hash a.k.a. digest of the payload contents using an algorithm such as MD5. Once cache holds a copy of payload VIS instructs HA VMM to transfer the contents of payload into the guest through BD . This results in a second copy of payload . In accordance with one or more embodiments of the present invention VMM can negotiate with GA where in the guest s file system space the second copy of the payload will be placed. For example and without limitation GA select a folder that guest OS normally uses to store temporary files. It should be appreciated that this file system can reside on one of the VM s disks but is not limited to such.

For a 1 copy configuration of virtual machine infrastructure the need for a cache and one copy operation can be eliminated when the repository resides on a file system that is simultaneously visible to update server VIS and the target host computer for example host computer . illustrates several such exemplary configurations. For example in one embodiment repository can reside on network file system NFS to which it had been exported by NAS filer over network . In another embodiment repository can reside on distributed Virtual Machine File System VMFS on iSCSI disk which is coupled to network . In still another embodiment repository can reside on distributed Virtual Machine File System VMFS on SAN disk which is coupled to storage area network SAN .

It should be understood that in any of the embodiments mentioned above HA VMM can now copy the original payload for example payload or directly from the repository for example repository or into the guest.

For a 0 copy configuration of virtual machine infrastructure if an HGFS file sharing component is present and enabled in the guest VIS can instruct HA and or VMM to configure it to create a virtual file system within the guest and map that virtual file system directly to a specific file system folder visible to host computer this folder is the repository itself. As such software in the guest can now see the payload directly and GA can load the payload into memory and process it immediately without creating additional copies of it. Note that opening and reading the payload can result in I O operations that can be transmitted over BD and forwarded to the repository s file system .

It should be appreciated that when a deployment operation through the backdoor for example BD is completed any temporary copy of the payload for example payload present in the guest s file system space can be deleted. If a payload cache for example cache is used various embodiments of the invention can leave the payload copy in the cache. In this manner this copy may get reused for example if another VM on the same host computer needs the same payload and can be eventually purged by the cache s own management algorithm.

Note that unless the HGFS component is present and enabled in the guest the backdoor method involves at least one copy operation. When the payload is very large for example Windows service packs which can be hundreds of megabytes in size this copy operation can negatively impact performance and it also adversely uses up a significant amount of storage space.

In accordance with one or more embodiments of the present invention a hot add method can provide zero copy performance. The hot add method does not use the backdoor for example BD for data movement instead it is only used for control operations. For example in accordance with the hot add method the repository is placed on a file system residing on a disk and then the disk is dynamically attached i.e. hot added to the target virtual machine by connecting the disk to one of the VM s virtual HBAs. In accordance with one or more such embodiments the connected disk appears like any local disk to the guest OS for example GOS . As such this enables the guest OS for example GOS to mount the disk s file systems into the guest s file name space thereby making their contents accessible to all guest programs including the guest agent for example GA . When guest software accesses files on the added disk any resulting I O operation is processed through the virtual HBA device for example VHBA onto which the disk was attached and ultimately the resulting I O operation can be handled by the VMM for example VMM . Since a VMM for example VMM can attach a variety of disk types to a VM the repository can be placed on any one of such disks. For example in one embodiment the disk can be a virtual disk file such as payload in repository where the root folder of a file system on virtual disk VD file resides on network file system and is accessible to the host computer through LAN . In another embodiment the disk can be a virtual disk file such as payload in repository where the root folder of a file system on virtual disk file resides on distributed Virtual Machine File System which resides on SAN disk and is accessible to the host computer through storage area network SAN . In still another embodiment the disk can be a virtual disk file such as payload in repository where the root folder of a file system on virtual disk file resides on distributed Virtual Machine File System which resides on iSCSI disk and is accessible to the host computer through LAN . In accordance with one or more embodiments the disk can also be a physical disk attached to the VM in a raw mapping mode such as when repository of is the root folder of a file system on SAN disk which is accessible to the host computer through storage area network . In accordance with another embodiment the disk can be a physical disk attached to the VM in a raw mapping mode such as when repository is the root folder of a file system on iSCSI disk which is accessible to the host computer through LAN .

Note that the hot add method introduces issues that are resolved in accordance with one or more embodiments of the present invention that are described below. In the hot add method the guest has direct access to the repository which is on a file system shared with update server update server writes payloads to the repository and the guest reads and deploys the payloads. While this is happening it is generally not safe to hot add the same disk to another guest because the guest OSs of the two VMs would not know about each other and their file system drivers could accidentally corrupt the disk contents. Some file systems generally called distributed disk file systems such as VMware s VMFS allow this type of sharing but the guest OSs of the VMs being updated may not have drivers for such file systems. One perhaps suboptimal solution is not to share and allow only one VM to access the repository disk at a time. In other words hot add the disk to a first VM wait for the software update operation to complete hot remove the disk from the first VM and then hot add it to a second VM that needs updating and so forth. This may result in low performance. Another solution is to share but ensure that each guest VM accesses the file system of the repository disk in read only mode. Various embodiments of the present invention can provide several solutions to the sharing problem. For example if the guest OS for example GOS supports a read only file system mounting mode the guest agent for example GA instructs the guest OS to mount the repository disk s file system in such a mode. However not all operating systems support this mode for example the NTFS driver of Windows 2000 insists on mounting file systems in read write mode. Another solution in accordance with one or more embodiments of the present invention is to allow the VM to access a logical copy of the disk. This takes advantage of a redo log also called disk snapshot technology of most existing virtual infrastructure products to create a lightweight clone of the repository disk. Note that such a clone can be created quickly and can take up very little space. The clone is backed by a redo log also known as differencing disk in some virtual infrastructure products it is a temporary file that can reside on any file system accessible to the host computer. The format and implementation of redo logs is well known to those of ordinary skill in the art. It is understood that a redo log implicitly depends on its parent disk in this case the repository disk.

When a payload residing on a repository disk is to be deployed to N virtual machines in accordance with one or more embodiments of the present invention the virtual machine infrastructure can create N separate lightweight clones of the disk. Each clone is then hot added into its corresponding VM.

Virtual machine infrastructure shown in includes physical server VMs and SAN or iSCSI disk primary virtual disk primary virtual disk and redo logs and . As shown in physical server includes update server OS NIC or HBA and other devices . Specifically in accordance with one or more such embodiments update server is coupled to OS which in turn is coupled to NIC or HBA which in turn is coupled to SAN or iSCSI disk . In addition as further shown in VM includes GA OS virtual HBA and other devices . Specifically in accordance with one or more such embodiments GA is coupled to OS which in turn is coupled to virtual HBA which in turn is coupled to primary virtual disk and redo log . Redo logs and are each coupled to SAN or iSCSI disk . In addition as further shown in VM includes GA OS virtual HBA and other devices . Specifically in accordance with one or more such embodiments GA is coupled to OS which in turn is coupled to virtual HBA which in turn is coupled to primary virtual disk and redo log . It should be understood that further embodiments of virtual machine infrastructure can include more or less components than those shown in .

In accordance with one or more embodiments of the present invention these issues are addressed as follows. To handle the new hardware found problem the guest agent for example GA or can trick the guest OS for example GOS or into thinking that it has seen the new disk device before and therefore does not need to register it again. The guest agent can do this by creating specific entries in the guest OS s device configuration database before the disk is attached. For example on Windows XP those entries can be stored in the registry database in the following locations HKLM System CurrentControlSet Class and HKLM System CurrentControlSet Enum SCSI or IDE.

Note that correctly formatting the entries may involve knowledge of the disk s properties such as bus number vendor ID and device ID. VIS can communicate this information to the guest agent for example GA as part of an initial setup message. VIS can also wait for an acknowledgment from the guest agent before hot adding the disk to the VM. This can ensure that the entries are entered before the disk is added.

To solve the eager mount and drive letter scanning problem the guest agent for example GA or can create configuration entries in the guest OS for example GOS or instructing it to disable automatic drive letter creation for any file systems originating from the disk about to be hot added. For example on Windows XP those entries can be stored in the registry database in the following location HKLM System MountedDevices.

It should be understood that correctly formatting those entries may involve knowledge of some properties of the disk and its file systems for example disk signature and file system offset within the disk . Once again VIS can send this information to the guest agent as part of a setup message. Once the disk is added the guest agent can explicitly mount the file system onto a hidden folder instead of a drive letter. This allows the guest agent to access the payload without interference from other software running in the guest.

When the guest agent finishes processing the payload it dismounts the repository file system from the guest s file name space. It then returns a status to the VMM e.g. HA e.g. and VIS through the backdoor for example BD . The virtual machine infrastructure can then disconnect the lightweight clone disk from the VM and then can delete the clone e.g. delete the redo log file .

The hot add method in accordance with one or more embodiments of the present invention can be implemented on virtual machines equipped with a virtual HBA capable of accepting additional disk devices while the virtual machine is powered on. Some virtual machine products may not support such virtual HBA devices for example the number of disks attached to a virtual HBA is fixed at VM configuration time and cannot be changed once the VM powers on.

Note that one or more embodiments of the hot insert method can provide most of the benefits of the hot add method while having the additional advantage of using a virtual device typically available in contemporary virtual machines a virtual CD ROM or DVD ROM drive. The following discussion of various embodiments uses a virtual CD by way of example but is equally applicable to a DVD.

When a payload is ready to be deployed from a repository in accordance with one or more embodiments of the present invention the update controller for example it is assumed to be embedded within VIS dynamically creates an image file representing a virtual CD. VIS formats the image with a well known CD file system such as ISO 9660 and copies the payload from the repository into the CD file system during formatting.

The image is placed on a file system accessible to the host computers that host the target virtual machine s . In one embodiment for each VM to be updated from the target 1 VIS instructs the HA for example HA and or VMM for example VMM of the applicable host computer to virtually insert the virtual CD into the VM s virtual CD ROM drive. 2 VIS sends the update message to the VM s guest agent for example GA . The message contains information indicating that the payload is being delivered through the CD drive. 3 The guest agent for example GA locates the CD drive s mount point within the guest OS s file system name space and then opens and processes the payload as necessary. 4 Once the update operation finishes the guest agent for example GA returns a status code to VIS through the VMM for example VMM and or the HA for example HA . 5 VIS virtually ejects the virtual CD from the VM s virtual CD ROM drive. It should be appreciated that when the virtual CD image file is no longer needed VIS can delete it.

Note that the hot insert method is not affected by the file sharing problem associated with the hot add method described herein because virtual CD DVD file systems can be read only by definition. Therefore no guest operating system for example GOS or VM for example VM can modify the contents of the file system. It is therefore possible for multiple VMs for example VMs and to access the same CD DVD image at the same time without the need to create a lightweight clone of the image for each VM.

To provide some optimization update server if integrated with VIS can use the virtual CD or DVD itself as the repository. As such when a new payload is to be added to the repository update server can update the CD DVD image file to contain the new payload. This optimization can save one data transfer operation. It can also imply that the virtual CD or DVD is permanent and does not get deleted after an update operation.

In accordance with method an image file that represents a virtual CD ROM drive or virtual DVD ROM drive for a virtual machine is created which includes a software payload. Then the drive is coupled to the virtual machine. Then the software payload is delivered to guest software on the virtual machine so that the software payload is part of a file system accessible by the guest software. Note that delivering the software payload this way avoids a data path involving a network stack of the virtual machine. Then the software payload can be processed within the virtual machine.

At step of an image file is created that represents a virtual CD ROM drive or virtual DVD ROM drive for a virtual machine wherein the virtual CD ROM drive or virtual DVD ROM drive includes a software payload for example payload payload and the like . Note that step can be implemented in a wide variety of ways. For example step can be implemented in any manner similar to that described herein but is not limited to such.

At step of the drive is coupled to the virtual machine. It is understood that step can be implemented in a wide variety of ways. For example step can be implemented in any manner similar to that described herein but is not limited to such.

At step of the software payload is delivered to guest software on the virtual machine so that the software payload is part of a file system accessible by the guest software. It is appreciated that step can be implemented in a wide variety of ways. For example step can be implemented in any manner similar to that described herein but is not limited to such.

At step the software payload is processed within the virtual machine. Note that step can be implemented in a wide variety of ways. For example step can be implemented in any manner similar to that described herein but is not limited to such. At the completion of step method can be exited.

Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present detailed description discussions utilizing terms such as delivering utilizing processing creating determining coupling attaching formatting generating accessing or the like refer to the actions and processes of a computer system virtual machine or similar electronic computing device. The computer system virtual machine or similar electronic computing device manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices. The invention is also well suited to the use of other computer systems such as for example optical computers or virtual machines.

The foregoing descriptions of various specific embodiments in accordance with the invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed and obviously many modifications and variations are possible in light of the above teaching. The invention can be construed according to the Claims and their equivalents.

As is well known in the field of computer science a virtual machine VM is an abstraction a virtualization of an actual physical computer system. shows one possible arrangement of computer system that implements virtualization. A virtual machine VM or guest is installed on a host platform or simply host which includes system hardware that is hardware platform and one or more layers or co resident components comprising system level software such as an operating system or similar kernel or a virtual machine monitor or hypervisor see below or some combination of these. The system hardware typically includes one or more processors memory some form of mass storage and various other devices .

Each VM including VM and additional n number of VMs will typically have both virtual system hardware and guest system software . The virtual system hardware typically includes at least one virtual CPU virtual memory at least one virtual disk and one or more virtual devices . Note that a disk virtual or physical is also a device but is usually considered separately because of the important role of the disk. All of the virtual hardware components of the VM may be implemented in software using known techniques to emulate the corresponding physical components. The guest system software includes guest operating system OS and drivers as needed for the various virtual devices .

Note that a single VM may be configured with more than one virtualized processor illustrates multiple virtual processors . . . VCPU0 VCPU1 . . . VCPUm within VM . For example symmetric multi processor SMP systems exist wherein a hardware platform wherein multiple processors are connected to a shared main memory and shared I O devices VMs may configured as SMP VMs. In addition multi processor systems exist in a so called multi core architecture wherein more than one physical CPU is fabricated on a single chip and having its own set of functional units such as a floating point unit and an arithmetic logic unit ALU and where threads can be executed independently multi core processors typically share limited resources such as some cache VMs may be configured as multi core systems. In addition simultaneous execution of multiple threads in which more than one logical CPU operates simultaneously on a single chip but in which the logical CPUs flexibly share one or more resources such as caches buffers functional units etc. One or more embodiments of the present invention may be used regardless of the type physical and or logical or number of processors included in a VM.

As is well known virtualization software interfaces between guest software within a VM and various hardware components and devices in the underlying hardware platform. The virtualization software may include one or more software components and or layers possibly including one or more of the software components known in the field of virtual machine technology as virtual machine monitors VMMs hypervisors or virtualization kernels. Because virtualization terminology has evolved over time and has not yet become fully standardized these terms do not always provide clear distinctions between the software layers and components to which they refer. For example the term hypervisor is often used to describe both a VMM and a kernel together either as separate but cooperating components or with one or more VMMs incorporated wholly or partially into the kernel itself however the term hypervisor is sometimes used instead to mean some variant of a VMM alone which interfaces with some other software layer s or component s to support virtualization. Moreover in some systems some virtualization code is included in at least one superior VM to facilitate the operations of other VMs. Furthermore specific software support for VMs may be included in the host OS itself. Unless otherwise indicated one or more embodiments of the present invention may be used in virtualized computer systems having any type or configuration of virtualization software.

Various virtualized hardware components in VM such as the virtual CPU s virtual memory virtual disk and virtual device s are shown as being part of VM for the sake of conceptual simplicity. In accordance with or more embodiments of the present invention one or more of these virtualized hardware components are implemented as software emulations included in VMM .

Different systems may implement virtualization to different degrees virtualization generally relates to a spectrum of definitions rather than to a bright line and often reflects a design choice with respect to a trade off between speed and efficiency on the one hand and isolation and universality on the other hand. For example full virtualization is sometimes used to denote a system in which no software components of any form are included in the guest other than those that would be found in a non virtualized computer thus the guest OS could be an off the shelf commercially available OS with no components included specifically to support use in a virtualized environment.

In contrast another concept which has yet to achieve a universally accepted definition is that of para virtualization. As the name implies a para virtualized system is not fully virtualized but rather the guest is configured in some way to provide certain features that facilitate virtualization. For example the guest in some para virtualized systems is designed to avoid hard to virtualize operations and configurations such as by avoiding certain privileged instructions certain memory address ranges etc. As another example many para virtualized systems include an interface within the guest that enables explicit calls to other components of the virtualization software.

For some para virtualization implies that the guest OS in particular its kernel is specifically designed to support such an interface. According to this view having for example an off the shelf version of Microsoft Windows XP as the guest OS would not be consistent with the notion of para virtualization. Others define para virtualization more broadly to include any guest OS with any code that is specifically intended to provide information directly to any other component of the virtualization software. According to this view loading a module such as a driver designed to communicate with other virtualization components renders the system para virtualized even if the guest OS as such is an off the shelf commercially available OS not specifically designed to support a virtualized computer system. Unless otherwise indicated or apparent this invention is not restricted to use in systems with any particular degree of virtualization and is not to be limited to any particular notion of full or partial para virtualization.

In addition to the sometimes fuzzy distinction between full and partial para virtualization two arrangements of intermediate system level software layer s are in general use a hosted configuration which is shown in and a non hosted configuration which is shown in . In a hosted virtualized computer system an existing general purpose operating system forms a host OS that is used to perform certain input output I O operations alongside and sometimes at the request of the VMM. As shown in host OS which usually includes drivers and supports applications of its own and VMM are both able to directly access at least some of the same hardware resources with conflicts being avoided by a context switching mechanism. The Workstation product of VMware Inc. of Palo Alto Calif. is an example of a hosted virtualized computer system which is also explained in U.S. Pat. No. 6 496 847 Bugnion et al. System and Method for Virtualizing Computer Systems 17 Dec. 2002 .

In addition to device emulators also illustrates some of the other components that are also often included in the VMM of a hosted virtualization system many of these components are found in the VMM of a non hosted system as well. For example interrupt exception handlers int expt may be included to help context switching and direct execution engine and binary translator with associated translation cache may be included to provide execution speed while still preventing the VM from directly executing certain privileged instructions.

As illustrated in in many cases it may be beneficial to deploy VMMs on top of a software layer kernel constructed specifically to provide efficient support for the VMs. This configuration is frequently referred to as being non hosted. Compared with a system in which VMMs run directly on the hardware platform use of a kernel offers greater modularity and facilitates provision of services for example resource management that extend across multiple virtual machines. Compared with a hosted deployment a kernel may offer greater performance because it can be co developed with the VMM and be optimized for the characteristics of a workload consisting primarily of VMs VMMs. Kernel also handles any other applications running on it that can be separately scheduled as well as a console operating system that in some architectures is used to boot the system and facilitate certain user interactions with the virtualization software.

Note that kernel is not the same as the kernel that will be within the guest OS . Note also that kernel is part of the host platform of the VM VMM as defined above even though the configuration shown in is commonly termed non hosted moreover the kernel may be both part of the host and part of the virtualization software or hypervisor. The difference in terminology is one of perspective and definitions that are still evolving in the art of virtualization.

