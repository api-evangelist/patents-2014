---

title: Method and system for hiding sensitive data in log files
abstract: An approach for hiding sensitive data in log files is provided. The approach uses a background program embedded within an operating system. The background program intercepts a write operation of an application and, in response to determining that the write operation is for a log file, gets content of the write operation. The background program checks a knowledge base that comprises information for the sensitive data and identifies the sensitive data in the content of the write operation. The background program masks the sensitive data in the content of the write operation, in response to determining that the content of the write operation has the sensitive data to be masked. In the log file, the background program writes modified content in which the sensitive data is masked.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589146&OS=09589146&RS=09589146
owner: International Business Machines Corporation
number: 09589146
owner_city: Armonk
owner_country: US
publication_date: 20140422
---
The present invention relates generally to data privacy and more particularly to hiding sensitive data in log files for write operations of applications.

Privacy concerns exist wherever identifiable personal information is collected and stored in digital forms. Data privacy issues can arise in information from a wide range of sources. The challenge in data privacy is to share data while protecting identifiable personal information. When an external organization for software support is involved in solving problems of software one of the most common issues with data privacy is to clean up all confidential or sensitive information from software log files before sending to the external organization for solving the problems of software. Currently the way of handling this issue is manually or through scripting go inside the log files to find all possible sensitive data for example user names passwords IP addresses and etc. and mask the sensitive data with other strings.

In one aspect a computer implemented method for hiding sensitive data in log files is provided. The method is implemented by a background program embedded within an operating system. The method comprises intercepting a write operation of an application getting content of the write operation in response to determining that the write operation is for a log file checking a knowledge base which comprises information for the sensitive data identifying the sensitive data in the content of the write operation masking the sensitive data in the content of the write operation in response to determining that the content of the write operation has the sensitive data to be masked and writing in the log file modified content in which the sensitive data is masked.

In another aspect a computer program product for hiding sensitive data in log files is provided. The computer program product comprises a computer readable storage medium having program code embodied therewith. The computer code is executable to intercept a write operation of an application. The computer code is executable to get content of the write operation in response to determining that the write operation is for a log file. The computer code is executable to check a knowledge base comprising information for the sensitive data. The computer code is executable to identify the sensitive data in the content of the write operation. The computer code is executable to mask the sensitive data in the content of the write operation in response to determining that the content of the write operation has the sensitive data to be masked. The computer code is executable to write in the log file modified content in which the sensitive data is masked.

In yet another aspect a computer system for hiding sensitive data in log files is provided. The computer system comprises one or more processors one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more computer readable tangible storage devices for execution by at least one of the one or more processors. The program instructions are executable to intercept a write operation of an application get content of the write operation in response to determining that the write operation is for a log file check a knowledge base comprising information for the sensitive data identify the sensitive data in the content of the write operation mask the sensitive data in the content of the write operation in response to determining that the content of the write operation has the sensitive data to be masked and write in the log file modified content in which the sensitive data is masked.

Embodiments of the present invention disclose a solution to resolve an issue of data privacy. The solution creates a software module that will intercept all log writing requests verifies whether a current log file line contains sensitive information by checking a knowledge base which is customizable and stores information on all sensitive data related to a specific customer application. The main advantages over the current existing solutions are as follows. 1 Since the software module is fully integrated with operating system it does not require a change to each application. 2 The sensitive information is masked at runtime before writing them on the disk and thus the solution eliminates security exposures. 3 Performance is improved since the solution does not require any post processing to go through all log files and find the sensitive data.

At step log interceptor starts in background as a daemon of OS . At step log interceptor intercepts a write operation of an application one of application through application N N . Log interceptor is capable of detecting write operations of application through application N N. At this step log interceptor intercepts one or more write APIs Application Programming Interfaces of OS .

At decision block log interceptor determines whether the write operation is for a log file. In determining that the write operation is not for the log file NO branch of decision block at step log interceptor allows the one or more write APIs of OS to processes the write operation without writing the log file. After step log interceptor as a daemon of OS continues to run in the background it reiterates step for the next write operation. In determining that the write operation is for the log file YES branch of decision block at step log interceptor gets message content of the write operation.

At step log interceptor checks knowledge base . Knowledge base is customizable and stores some information that log interceptor uses for identifying the sensitive data. The information on knowledge base includes for example names of all log files that applications through N through N may write customer sensitive information e.g. IP addresses hostnames user names etc. and additional custom recognizable patterns validated by users.

At step log interceptor identifies the sensitive data in the message content. Log interceptor may include an embedded analytics engine to provide a confidence index that determines whether patterns or information in the message content are sensitive or not. Log interceptor is a component that increases accuracy of the determination of the embedded analytics engine.

At decision block log interceptor determines whether the message content of the write operation has the sensitive data to be masked. In determining that the message content of the write operation does not have the sensitive data to be masked NO branch of decision block log interceptor at step allows the one or more write APIs of OS to write on file system the message content without masking any data. After step log interceptor as a daemon of OS continues to run in the background it reiterates step for the next write operation. In determining that the message content of the write operation has the sensitive data to be masked YES branch of decision block log interceptor at step masks the sensitive data. Log interceptor manipulates the sensitive data by masking with some blanks or special strings.

After step log interceptor at step updates knowledge base . Log interceptor stores on knowledge base information of masking the sensitive data in the current write operation thus log interceptor acts as a self learning system. Updating knowledge base can be done real time or the message about updating can be marked as to be reviewed by a user. The user is able to determine whether the information of masking the sensitive data in the current write operation is used to update knowledge base .

At step log interceptor writes modified message content in the log file on file system . In the modified message the sensitive data has been masked at step . After step log interceptor as a daemon of OS continues to run in the background it reiterates step for the next write operation.

Referring to the hardware of computer device includes processor s memory tangible storage device s network interface s and I O input output interface s . In communications among the above mentioned components of computing device are denoted by numeral . Memory includes ROM s Read Only Memory RAM s Random Access Memory and cache s .

Operating system and log interceptor reside on one or more computer readable tangible storage device s . In accordance with one embodiment of the present invention applications through N through N reside on at least one of one or more computer readable tangible storage device s . In other embodiments one or more of applications through N through N may reside on at least one other computer device which is connected through a network to a computer device hosting operating system and log interceptor . In accordance with one embodiment of the present invention knowledge base resides on at least one of one or more computer readable tangible storage device s . In other embodiments knowledge base may reside on at least one other computer device which is connected through a network to a computer device hosting operating system and log interceptor . In accordance with one embodiment of the present invention file system resides on at least one of one or more computer readable tangible storage device s . In other embodiments file system may reside on at least one other computer device which is connected through a network to a computer device hosting operating system and log interceptor .

Computing device further includes I O interface s . I O interface s allows for input and output of data with external device s that may be connected to computing device . Computing device further includes network interface s for communications between computing device and a computer network.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network LAN a wide area network WAN and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

