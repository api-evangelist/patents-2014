---

title: Method for intercepting input/output requests and responses
abstract: A method and system for intercepting I/O requests and responses in a proprietary operating environment or hypervisor-virtualization utilizing open source software or general public license device drivers. The processing includes at the added functionality module comprises at least one of encrypting, de-duplicating, compressing and caching.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218304&OS=09218304&RS=09218304
owner: SAMSUNG ELECTRONICS CO., LTD.
number: 09218304
owner_city: 
owner_country: KR
publication_date: 20140914
---
The Present Application is a continuation application of U.S. patent application Ser. No. 13 489 428 filed on Jun. 5 2012 now U.S. Pat. No. 8 839 275 B1 issued Sep. 16 2014 which claims priority to U.S. Provisional Patent Application No. 61 493 975 filed on Jun. 6 2011 and U.S. Provisional Patent Application No. 61 494 884 filed on Jun. 8 2011 all of which are hereby incorporated by reference in their entireties.

The present invention generally relates to a method for intercepting input output requests and responses in a proprietary operating environment or virtualization hypervisor utilizing open source or GNU Public License device drivers.

Proprietary operating environments and virtualization hypervisors may not provide mechanisms to intercept input output I O requests for the purposes of adding functionality to or processing of the data in the I O stream. It is highly advantageous for proprietary operating environments and virtualization hypervisors to utilize open source or Gnu Public License GPL device drivers.

The producers of proprietary operating systems execution environments and virtualization hypervisors often are reluctant to allow other companies to modify or add functionality within their core intellectual property and do not provide published supported mechanisms to do so. It is desirable for independent software and hardware companies to add unique value to the I O streams of these closed proprietary environments in a manner that is minimally intrusive such that it introduces minimal chance for destabilization of the proprietary system introduces minimal change to the closed proprietary environment and does not rely upon unpublished proprietary or likely to change mechanisms.

There are two primary prior art approaches that are commonly used to provide additional functionality to the I O stream of a proprietary operating system. The first approach commonly used is development of specific device drivers for the proprietary system. In the case of common functionality that is to be added across all devices all device drivers must be developed modified to provide the desired functionality. This may be practical if the proprietary environment provides a driver development API or utilizes open source or GPL device drivers and there is a fixed small set of drivers affected. The second approach commonly used is reverse engineering and or patching of the proprietary environment or device drivers. This approach is highly undesirable for technical and in some cases legal reasons. This approach is very prone to fail with new releases version patches updates to the proprietary environment.

Computing environments often are very heterogeneous and contain hardware from many different manufacturers. This presents a considerable development and support burden for the developers and system administrators of operating systems execution environments and hypervisor virtualization. The utilization of open source and GPL device drivers allows the producers of proprietary operating systems execution environments and virtualization hypervisors to avoid developing their own device drivers to support many types of hardware which their products will run on or are connect to.

In order to utilize open source or GPL device drivers the proprietary environment is forced to freely provide source code of any modifications they make to the device drivers. The proprietary environment must also not statically link in the device drivers otherwise they would be required to provide source code to their entire system and finally must introduce a compatibility library that provides an interface between the proprietary system and the open source GPL drivers that supplies all the supporting functionality required by the open source GPL device drivers. Since this compatibility library contains portions of open source GPL source code necessary to provide the required supporting functionality it too must by dynamically linked and the source code for the compatibility library must be freely published.

Hypervisor is a hardware virtualization technique that allows a computer to host multiple operating systems by providing a guest operating system with a virtual operating platform.

GNU General Public License is a license for an open source operating system based on UNIX which requires that derived works be distributed under the same license terms.

Kernel is a component of an operating system that connects a computer s software applications to the computer s hardware.

Application Programming Interface API is a collection of computer software code usually a set of class definitions that can perform a set of related complex tasks but has a limited set of controls that may be manipulated by other software code entities. The set of controls is deliberately limited for the sake of clarity and ease of use so that programmers do not have to work with the detail contained within the given API itself.

Device driver is a software program that allows a hardware device to interact with software installed on the hardware device.

Virtualization allows a person to operate multiple virtual machines computers on a single physical machine computer .

Compatibility library is a software program that provides an interface between computer programs and in particular an interface that provides an interface between a proprietary environment and an open source or GNU GPL device driver that provides the supporting functionality for the device driver.

The Present Invention is preferably a method to intercept all I O requests and responses of proprietary environments or hypervisors that utilize open source or GNU Public License GPL device drivers. This mechanism allows additional functionality to be added to the I O processing of a closed proprietary system.

The Present Invention is preferably a method for making a modification to the published source code of a required compatibility library to allow all I O requests and responses to be intercepted and optionally processed by an independently developed dynamically linked module. Since the additional functionality is contained in a dynamically linked module it may be open source GPL or proprietary to an independent software producer.

The primary purpose of the present invention is to allow additional functionality to be added to the I O processing of closed proprietary operating environments and hypervisor virtualization if they utilize open source or GPL device drivers. Examples of such additional functionality include but are not limited to encryption de duplication compression and caching.

One aspect of the present invention is a method for intercepting I O requests and responses in a proprietary operating environment or virtualization hypervisor utilizing open source software or GPL device drivers. The method includes identifying an I O stream between a proprietary environment and a device driver wherein the I O stream is an I O request or an I O response and wherein the device driver is an open source software device driver or a GPL device driver. The method also includes intercepting the I O stream at a point of a compatibility library wherein the point is selected from a point at which a context is established for calling the device driver and a point at which an I O completion from the device driver is forwarded to the compatibility library. The method also includes transmitting the I O stream to an added functionality module for processing. The method also includes processing the I O stream at the added functionality module to create a processed I O stream. The method also includes transmitting the processed I O stream to either the device driver or the proprietary operating environment.

The processing at the added functionality module preferably comprises at least one of encrypting de duplicating compressing and caching. The added functionality module is preferably dynamically linked to the point of the compatibility library. A function pointer is preferably utilized to dynamically link the added functionality module to the point of the compatibility library.

Another aspect of the present invention is a method for intercepting I O requests and responses in a hypervisor utilizing device drivers. The method includes identifying an I O stream between a hypervisor and a device driver wherein the I O stream is an I O request or an I O response. The method also includes intercepting the I O stream at a point of a compatibility library wherein the point is selected from a point at which a context is established for calling the device driver and a point at which an I O completion from the device driver is forwarded to the compatibility library. The method also includes transmitting the I O stream to an added functionality module for processing. The method also includes processing the I O stream at the added functionality module to create a processed I O stream. The method also includes transmitting the processed I O stream to either the device driver or the hypervisor.

Yet another aspect of the present invention is a method for intercepting I O requests and responses in a proprietary operating environment utilizing device drivers. The method includes identifying an I O stream between a proprietary environment and a device driver wherein the I O stream is an I O request or an I O response. The method also includes intercepting the I O stream at a point of a compatibility library wherein the point is selected from a point at which a context is established for calling the device driver and a point at which an I O completion from the device driver is forwarded to the compatibility library. The method also includes transmitting the I O stream to an added functionality module for processing. The method also includes processing the I O stream at the added functionality module to create a processed I O stream. The method also includes transmitting the processed I O stream to either the device driver or the proprietary operating environment.

Yet another aspect of the present invention is a method for intercepting I O requests in a proprietary operating environment utilizing device drivers. The method includes identifying an I O request between a proprietary environment and a device driver. The method also includes intercepting the I O request at a point of a compatibility library at which a context is established for calling the device driver. The method also includes transmitting the I O request to an added functionality module for processing. The method also processing the I O request at the added functionality module to create a processed I O request. The method also transmitting the processed I O request to the device driver.

Yet another aspect of the present invention is a method for intercepting I O requests and responses in a proprietary operating environment utilizing open source software device drivers. The method includes identifying an I O stream between a proprietary environment and an open source device driver wherein the I O stream is an I O request or an I O response. The method also includes intercepting the I O stream at a point of a compatibility library wherein the point is selected from a point at which a context is established for calling the open source device driver and a point at which an I O completion from the open source device driver is forwarded to the compatibility library. The method also includes transmitting the I O stream to an added functionality module for processing. The method also includes processing the I O stream at the added functionality module to create a processed I O stream. The method also includes transmitting the processed I O stream to either the open source device driver or the proprietary operating environment.

Yet another aspect of the present invention is a computer system for virtualization including a proprietary environment a compatibility library comprising at least one function pointer an added functionality module and at least one device driver. An I O stream between the proprietary environment and the at least one device driver is intercepted at the at least one function pointer of a compatibility library and transmitted to the added functionality module for additional processing.

Yet another aspect of the present invention is computer readable recording medium storing a computer program for a method for intercepting I O requests and responses in a proprietary operating environment or hypervisor utilizing open source or general public license device drivers. The method includes identifying an I O stream between a proprietary environment and an device driver wherein the I O stream is an I O request or an I O response and wherein the device driver is an open source software device driver or a GPL device driver. The method also includes intercepting the I O stream at a point of a compatibility library wherein the point is selected from a point at which a context is established for calling the device driver and a point at which an I O completion from the device driver is forwarded to the compatibility library. The method also includes transmitting the I O stream to an added functionality module for processing. The method also includes processing the I O stream at the added functionality module to create a processed I O stream. The method also includes transmitting the processed I O stream to either the device driver or the proprietary operating environment.

Having briefly described the present invention the above and further objects features and advantages thereof will be recognized by those skilled in the pertinent art from the following detailed description of the invention when taken in conjunction with the accompanying drawings.

As shown in a computing system includes a proprietary operating environment or hypervisor an open source software device driver compatibility library and multiple device drivers and . An I O stream is transmitted between the environment and compatibility library . Subsequent I O streams and are transmitted between the compatibility library and device drivers and

As shown in in a compatibility library function pointers intercept and transfer an I O stream to an added functionality module for additional processing. The additional processing is at least one of encrypting de duplicating compressing and caching. Those skilled in the pertinent art will recognize that other additional processing may be performed at the added functionality module without departing from the scope and spirit of the present invention. As shown in an I O request for pre processing is received from a proprietary environment at the compatibility library and an I O response for post processing is sent to a proprietary environment from the compatibility library . I O streams and are transmitted between the compatibility library and device drivers and

As shown in a method for intercepting and processing an I O request is generally designated . The method begins at block with an I O request within the proprietary environment . At block a device driver compatible calling context is established. At decision block an inquiry is made to determine if additional processing is enabled. If the response is YES then at block a call to a dynamically linked added functionality module for additional processing is made from the point of the compatibility library preferably utilizing a function pointer that provides indirection between the compatibility library and the added functionality module . At block additional processing is performed at the added functionality module . The additional processing is preferably at least one of encrypting de duplicating compressing and caching. At block an I O request is issued to the device driver . Returning to block if the response is NO then at block an I O request is issued to the device driver . At circle the device driver receives the I O request.

As shown in a method for intercepting and processing an I O response is generally designated . The method begins at circle with the device driver transmitting an I O request complete. At block a device driver initiating an I O request for completion routine in a compatible library based on the I O request for completion. At decision block an inquiry is made to determine if post processing is enabled. If the response is YES then at block a call to a dynamically linked added functionality module for post processing is made from the point of the compatibility library preferably utilizing a function pointer that provides indirection between the compatibility library and the added functionality module . At block post processing is performed at the added functionality module . The post processing is preferably at least one of encrypting de duplicating compressing and caching. At block an I O response is issued to the proprietary environment . Returning to block if the response is NO then at block an I O response is issued to the proprietary environment . At block the I O request and response completion message is received at the proprietary environment .

Inspection of the published compatibility library code will yield the locations at which all transformations from the proprietary environment to the published interface formats of the open source GPL device drivers have occurred and the context for calling the open source GPL device drivers has been established. A simple test added at this point can be made to see whether a call to a dynamically linked added functionality module should be made passing the same standardized arguments as would be passed to the open source GPL device driver. Use of a test at this point allows added functionality to be enabled or disabled easily but is not required. Likewise inspection of the published compatibility library will yield the point at which I O completion is forwarded to the proprietary environment. Once again a simple test may be added to optionally call a dynamically linked added functionality module for post processing of the I O request. The preferred mechanism for implementing such calls to a dynamically linked module is the use of function pointers that provide indirection between the compatibility library and the dynamically linked added functionality module.

The functions in the added functionality module are free to preprocess and post process all I O requests and responses and may optionally filter I O requests and responses by device type or device instance. Furthermore the added functionality module may satisfy an I O request without issuing the call to the open sources software GPL device driver.

By dynamically linking the added functionality module with the compatibility module intellectual property rights may be retained if desired by the independent software producer. By modifying only the published source of the compatibility library the independent software producer has no reliance cooperation or support by the proprietary software vendor.

The present invention allows for minimal invasiveness. The mechanism requires a minimum of two points to be intercepted in the compatibility library the point at which the context is established for calling the open source software drivers and the point at which the I O completion from the drivers is forwarded back to the compatibility library.

The present invention does not require modification to device drivers. Since all of the open source software and GPL device drivers must communicate with the proprietary system through the compatibility library with a common interface by intercepting the I O requests and responses at this interface the device drivers themselves do not have to be modified. As new hardware devices and associated device drivers are produced they are automatically supported by this mechanism.

The present invention has minimal susceptibility to new versions updates and patches of the proprietary environment. All modifications to the proprietary system occur within the compatibility library which must maintain a fixed interface with the open source software and GPL device drivers and must be dynamically linked. Only new versions updates or patches to the compatibility library itself affect this mechanism and such modifications events are easily detectable by simple checksums or digital signatures.

The present invention relies solely on source code that is required to be published. The preferred implementation requires no reverse engineering or patching of the proprietary system.

The present invention has the ability provide additional I O stream processing functionality in a proprietary environment utilizing open source or GPL device drivers without the need to modify the device drivers and without support from the proprietary environment s producer.

From the foregoing it is believed that those skilled in the pertinent art will recognize the meritorious advancement of this invention and will readily understand that while the present invention has been described in association with a preferred embodiment thereof and other embodiments illustrated in the accompanying drawings numerous changes modification and substitutions of equivalents may be made therein without departing from the spirit and scope of this invention which is intended to be unlimited by the foregoing except as may appear in the following appended claim. Therefore the embodiments of the invention in which an exclusive property or privilege is claimed are defined in the following appended claims.

