---

title: Software firewall control
abstract: A software firewall that may be configured using rules specified for types of network interfaces rather than individual network interfaces. The network types may be specified with type identifiers that have a readily understandable meaning to a user, facilitating ease of configuring the firewall. The network types could include, for example, wired, wireless and remote access. A rule specified based on a network type can be implemented for network interfaces of that network type. The implementation may be performed automatically and may be updated based on network location awareness information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09288185&OS=09288185&RS=09288185
owner: Microsoft Technology Licensing, LLC
number: 09288185
owner_city: Redmond
owner_country: US
publication_date: 20140627
---
This application is a Continuation of application Ser. No. 13 762 201 filed Feb. 7 2013 pending and allowed which is a Continuation of prior application Ser. No. 11 801 298 filed May 9 2007 patented which is incorporated herein by reference in its originally filed form.

Computers are widely used in both business and personal settings. Frequently the utility of a computer is greatly enhanced by its ability to send or access data over a network. Unfortunately expanding the functionality of a computer by connecting it with devices operated by other legitimate users also creates the risks that the computer will become connected to devices operated by third parties who either maliciously or inadvertently may send message over the network that cause damage to the computer to the computer or the data that it stores. Alternatively using the network a malicious third party may improperly gain access to information stored on the computer that was intended to be secret. In these scenarios rather than enabling desired functionality the network connection poses a security risk for a computer and its user.

To combat security risks posed by network connections firewalls are frequently used. A firewall may be a hardware or software component that filters network traffic so that communications with unauthorized third parties are blocked but legitimate network functions may be carried out. Frequently the filters applied by a firewall are specified by a set of rules defining characteristics of network messages that either should pass through the firewall or that should be blocked.

To facilitate configuring a firewall on a computer with multiple network interfaces a networked computer may accept firewall rules applicable to all network interfaces of an identified type. The network types may be identified with friendly names that relate to network characteristics readily understandable to a user. The networked computer may automatically gather information about its network interfaces to identify network interfaces corresponding to each type of network interface. The networked computer may then use this information to translate rules specified by network type into firewall filters applicable to each network interface.

In some embodiments a mapping between network type and specific network interfaces belonging to that type may be stored to simplify processing required as firewall rules change. The networked computer may contain components that detect changes in the network configuration. In response to such changes the networked computer may recompute the mapping between network type and network interfaces and reapply the mapping to previously defined rules.

To enhance the user experience for the user of the networked computer both the network type to network interface mapping and the mapping between rules and filters for specific network interfaces may be updated without express user interaction.

In one aspect the invention relates to a method of operating a computing device with at least one network interface and a firewall. The firewall executes at least one filter associated with a network interface to determine whether a network communication passes the firewall. In operation a rule identifying a type of network is received and translated into filters specified for network interfaces. As a result a user does not require administrator rights to make such updates and there is no need to expressly request an administrator to make updates. Likewise the use of pop ups to solicit user input is avoided.

In another aspect the invention relates to a computing device having a user interface through which user may provide input indicating a network type in conjunction with a firewall rule. The firewall rule is converted to at least one firewall filter for at least one network interface identified based on the selection of the network type.

In another aspect the invention relates to a computer readable medium with computer executable instructions that can be executed to receive a specification of a rule including a network type identifier and translate the rule into at least one filter specified for a network interface of the at least one network interface.

The inventors have appreciated that a user experience for a user of a networked computer may be greatly improved by simplifying a process by which firewall rules may be specified. The process may be simplified by allowing the user to specify rules in terms of network types. Friendly names may be used for the network types. For example a computer user is more likely to understand network types such as wireless Local Area Network or remote access than specific identifiers for network interfaces used by networks of these types. As other examples network types such as tunnels or non tunnels could be defined corresponding IPv4 IPv6 transitioning and encapsulation technologies. However the specific network types are not a limitation on the invention and any suitable types may be used. By accepting firewall rules specified in terms of these friendly network type identifiers a user may more readily and more accurately specify appropriate firewall rules.

The desirability of simplifying configuration of a firewall is illustrated by . provides an example of an environment in which a networked computer may be deployed. In this example networked computer A is shown connected to a local area network LAN . Other devices such as server are also connected to LAN . With this configuration networked computer A may exchange information with server .

LAN is shown connected to a broader network through router . In the embodiment illustrated network may be the Internet. As shown the networked computer is a laptop or other portable computing device. Accordingly from time to time networked computer A may be disconnected from LAN .

To provide network connectivity for a portable computing device even when not connected to a wired network such as LAN many laptops computers contain wireless network interfaces. Accordingly networked computer A may be moved to a position denoted B where it may connect to network through a wireless access point .

Though the environment illustrated in is greatly simplified it illustrates complexity that may be encountered by a computer user in configuring a firewall. LAN may be a relatively secure network with undesirable network traffic being filtered in router which may also contain a network firewall. Accordingly if networked computer A is configured with an interface to LAN a user of networked computer A may desire that all network traffic freely pass through that network interface without being filtered. However the same computer moved to location B and connected to network without an intervening device that filters traffic poses a security risk. Accordingly a user of network computer B may desire a higher level of filtering of messages passed through a network connection formed with access point .

As a further complexity not all messages passing through access point may pose a security risk for networked computer B. For example networked computer B may be configured with a virtual private network application or other application that provides secured communications over an insecure network . If such a remote access application is provided any network connection formed by that remote access application even if it transmits or receives messages through access point should not be filtered.

For the networked computer illustrated in to perform as desired different firewall filter rules may be required for each network interface supported by that computer. More lenient rules may be specified for a network interface to LAN . More restrictive firewall rules may be provided for a network interface that supports general communication. Less restrictive rules may be provided for a network interface for a secure remote access application that connects through wireless access point .

In some prior art systems different rules are provided for different operating scenarios by allowing a user to specify different rules for each network interface. However individual users frequently lack the detailed understanding of network interfaces to specify all of the rules necessary to configure a networked computer to perform as desired in each setting. In some instances users receive assistance from network administrators or other sources. But in other instances users operate their networked computers with their software firewalls configured improperly or experience frustration establishing appropriate rules.

The inventors have appreciated that if a user could set rules based on friendly network types such as LAN wireless or remote access the user could readily specify rules for typical operating scenarios without detailed special knowledge of networking. Further a computer that supports such friendly network types can readily present a user interface that may further simplify the process of configuring a firewall. Such a configuration process also can be completed without detailed user knowledge of IANA interface types or a need for a user to specify rules for all IANA types.

To support specification of firewall rules in terms of friendly network type identifiers a networked computer may support a mechanism for mapping friendly network type identifiers to specific network interfaces. To further enhance the user experience in some embodiments the networked computer may automatically update the mapping in response to changes in the network configuration of the networked computer. Thus an updated mapping may be applied to generate new firewall rules also without user involvement.

Such a mapping because it reduces the need for applications to update their rules whenever the network configuration changes also simplifies the development and operation applications. For example an application could provide firewall rules at install time. Thus there would be no need to update the rules in operation as the network configuration changes and the application could operate without administrative privileges needed to change firewall rules. Not requiring administrative privileges to operate an application provides a further security advantage because it reduces the chance of an attack using the application.

A networked computer with the capability for receiving and applying firewall rules specified based on friendly network types may be constructed in any suitable way. In some embodiments such a networked computer may be constructed using components as are known in the art with modifications in a firewall service to support receipt and processing of firewall rules specified based on friendly network type. illustrates the architecture of such a networked computer.

Regardless of the specific type of networks to which network computer is connected it may be configured with one or more software components stored in a suitable computer readable medium and adapted to process network traffic. Those components may process both incoming and outgoing network traffic and firewall filtering could apply to incoming traffic or outgoing traffic or both. The network traffic may be in any suitable form which is frequently dictated by the protocol used by the network over which the network traffic is communicated. Frequently network traffic will be in the form of TCP or UDP packets but the specific form of the network traffic is not a limitation on the invention and messages in suitable form may be processed according embodiments of the invention.

Network computer may contain one or more components as is known in the art for processing network traffic. Such components may include network stack . In the embodiment illustrated network traffic passes through network stack . Network stack may be a network stack as is known in the art. However any suitable network stack may be used.

Network stack receives outgoing messages from applications A B and C. Here three applications are shown for simplicity but networked computer may contain any number or type of applications.

Network stack interfaces with network adapters A B and C. Each of the network adapters A . . . C provides an interface for a specific network though more than one adapter may be provided to interface to the same network. Though three network adapters are illustrated in any number or type of network adapters may be used within networked computer . Each of the network adapters A . . . C may have operating characteristics to support a specific form of network communication and may be implemented as is known in the art or in any other suitable way.

To provide security network computer is configured with a software firewall. The software firewall also may contain components as are known in the art. However components of the software firewall may be implemented in any suitable way.

In the embodiment illustrated the software firewall contains a firewall filter enforcement component which may operate to filter network traffic using mechanisms as are known in the art. In the embodiment illustrated firewall filter enforcement component maintains a set of filters specifying for each network adapter A . . . C network traffic that should be passed or blocked. Firewall filter enforcement component interfaces with network stack to apply these filters to traffic passing through stack . As network stack processes network messages it interacts with firewall filter enforcement component to determine whether each message should be passed or blocked.

In the embodiment illustrated network stack and firewall filter enforcement component may be contained within the kernel of an operating system for network computer . The filters used by filter enforcement component may be provided from the user mode portions of the operating system. The filters may be derived from user input or may be derived from execution of scripts or other program elements or otherwise derived in any other suitable way. Regardless of how filters are derived the firewall filters may be provided to firewall filter enforcement component via a user mode component. In the embodiment illustrated base filtering engine provides those filters to firewall filter enforcement component . Base filtering engine may be a base filtering engine as in a conventional firewall. However base filtering engine may be implemented in any suitable way.

In the embodiment illustrated base filtering engine receives information defining firewall filters from firewall service . As in a firewall service in some known network computers firewall service may provide one or more interfaces through which firewall rules may be specified. In the embodiment illustrated user interface and application programming interface illustrate interfaces through which firewall rules may be specified.

To operate as desired firewall service may interface with a network location awareness component . Network location awareness component may provide information about the network interfaces maintained by network computer . Network location awareness component may be implemented using mechanisms as are known in the art and may output for each network interface information about the network that can be accessed through that interface. Additionally network location awareness component may monitor interfaces established or broken down and output an indication when the network configuration of networked computer changes. Such an indication may be used by firewall service as a trigger to update firewall filters or information used to implement firewall filtering that depends on the network configuration of network computer .

Additional information about network interfaces may be obtained through helper API . Helper API may be a component as is known in the art though any suitable implementation may be used. Helper API may be a component configured to interface with network adapters A . . . C installed in networked computer . Through the interface provided by helper API firewall service may obtain additional information about each network interface.

Firewall service may be implemented using technology for implementing a firewall service as is known in the art. However in the embodiment illustrated firewall service is configured to receive input specifying firewall rules based on network type instead of or in addition to rules that specify firewall filtering for individual network interfaces. The specific network types supported by firewall service is not critical to the invention. However as one example firewall service may support a set of network types that includes wireless LAN remote access or all. 

Firewall rules specified based on network types may otherwise define firewall operation as in prior art firewall rules though any suitable representation of a rule may be used. For example as in some prior art firewalls each rule may specify one or more protocols in which the rule is active. Likewise the rule may specify one or more profiles in which the rule is active Also the rule may specify an action to be performed by the firewall when the rule is triggered. For example a rule may specify either that message traffic should be blocked or allowed. Other portions of the rule may specify other operating characteristics of the firewall. For example a rule may specify a state for the rule such as enabled or disabled. Additionally rules may be assigned names or other identifiers that allow the rule to be accessed for editing after it is created. All of these characteristic may be specified using mechanisms as known in the art or in any other suitable way.

Regardless of the form in which network type rules are specified each of the rules may be translated into a format that may be processed by other firewall components. In the embodiment illustrated firewall components adapted to apply firewall rules specified based on network interfaces are used. Accordingly the rules specified based on a network type may be translated into one or more rules specifying firewall action based on network interfaces.

Firewall service may convert firewall rules specified for one or more network types to one or more rules applicable to interfaces of the specified network type. Once converted to rules for specific network interfaces the rules may be passed to base filtering engine where they may be processed as in known firewalls or in any other suitable way.

Any suitable mechanism may be used to detect a network change. In the embodiment illustrated in network computer includes network location awareness component that monitors network interfaces formed by computer . Network location awareness component may output an indication of a change in any network interface. In response to an indication of a network change subprocess is initiated to construct a mapping between network types that may be used to specify firewall rules and specific network interfaces maintained by computer .

Subprocess begins at loop start . Loop start is the start of a processing loop that is performed for each network adapter installed in computer . In some prior art networked computer the operating system maintains information about each installed network adapter in a format that may be accessed by other operating system services such as firewall service . However any suitable mechanism may be used to identify the installed network adapters in a computer in which the process of is performed.

Regardless of how the installed network adapters are identified processing proceeds to block . At block for the selected network adapter information is obtained about the network interface supported by that adapter. In the embodiment illustrated the information obtained includes an interface type and index. The information obtained at block may be in any suitable form. For example interface type information may be a parameter defined according to a known standard. As a specific example the Internet Assigned Numbers Authority IANA has developed a catalog of interface types. Most network adapters are classified according to one of these IANA types. Accordingly processing at block may obtain from a network adapter the IANA type of the interface supported by that network adapter.

The index obtained by processing at block is an example of information that may be used to identify a network interface supported by the network adapter. In the embodiment illustrated the information identifying the interface is in a form that allows communication between firewall filter enforcement component and network stack . In some prior art networked computers specific interfaces are identified by a Locally Unique Identifier LUID which may be assigned to each interface as it is formed. The LUIDs may be assigned sequentially randomly or in any other suitable form. In some embodiments the locally unique identifier may be a 64 bit number but the specific form of the LUID is not critical to the invention and any suitable form that uniquely identifies an interface within the networked computer may be used. Regardless of how the LUID is assigned it may serve as an index for identifying a specific interface and may also be obtained from a network adapter for the interface.

After information is obtained at block the process continues to decision block . At decision block the process branches depending on whether further network adapters remain for processing. If further network adapters remain subprocess loops back to loop start where the processing at block and decision block is repeated for the next network adapter.

Conversely when all installed network adapters have been processed processing proceeds to block . At block a mapping is constructed to map friendly network types to specific network indexes. Such a mapping is useful in translating rules specified based on network type to rules that are enforced for individual network interfaces.

The mapping created at block may be stored in a data structure or otherwise retained in any other suitable fashion for use in translating rules specified by network type into firewall filters. provides an example of a data structure storing such a mapping. In the embodiment of a data structure is shown stored in computer readable media . Computer readable media may be any suitable media associated with computer . Data structure may store information in any suitable form that is useful for performing a mapping between network type and specific network interfaces.

In the embodiment illustrated in data structure is organized with multiple rows. Here three rows A B and C are illustrated. In the embodiment of each row corresponds to one network type. Accordingly the embodiment of a data structure illustrated in corresponds to an embodiment in which three network types have been defined. In the specific example of those network types are wireless LAN remote access. However the invention is not limited to the specific network types illustrated or to three network types.

Regardless of the specific number or network types defined each row A B or C maps a network type to applicable network interfaces of that type. Taking row C as illustrative the row contains a field C storing a value identifying a network type. In field C stores a value remote access. 

Row C also includes a field C containing information defining network interfaces that are of the type specified by the value in field C. In the embodiment illustrated field C may store multiple values each identifying a network interface. In the embodiment illustrated network interfaces are identified by indexes which are stored in field C. In three network interface indexes LUID LUID and LUID are shown in field C.

In the example of row C shows a mapping between one network type remote access and three network interface indexes LUID LUID and LUID . However the number of network interface indexes associated with each network type is not a limitation on the invention. For example row A shows a mapping between one network type and two network interface indexes. Row B shows a mapping between one network type and one network interface index. However zero or more network interface indexes may be mapped to each network interface type with the specific number depending on the network configuration of computer .

In constructing a network type to index mapping at block information about the interface types that correspond to each network type may be employed in conjunction with information obtained at block about the interface types of network interfaces established on computer . This information may be processed in any suitable way to construct the data structure . However in the embodiment illustrated a schema is defined mapping IANA interface types to network types. With this schema a network type may be associated with each network interface. The LUID of the network interface may therefore be associated with a specific network type thereby creating a data structure in the form of data structure .

The specific structure and storage of schema is not critical to the invention. However in the embodiment of each network type is shown in a row such as row A B and C. Each row also contains information identifying the interface types associated with a network type. For example row C provides a mapping between a network type of remote access and three IANA interface types. The network type is identified in the value in field C. The IANA interface types are identified by values in field C. In the embodiment illustrated IANA interface types are IF TYPE PPP IF TYPE SLIP and IF TYPE ISDN. The inventors have appreciated that network interfaces having one of those IANA interface types is indicative of a network interface used to provide remote access such as through a Virtual Private Network VPN .

Other IANA interface types can be associated with other network types likely to be useful and recognizable to a user. For example row B indicates that interfaces having an IANA interface type of IF TYPE ETHERNET CSMACD or IF TYPE ISO88025 TOKENRING are characteristic of a local area network. Similarly row A indicates that a network interface with IANA interface type of IF TYPE IEEE80211 is characteristic of a wireless network. By forming a schema such as schema that maps IANA interface types to friendly network types a networked computer may be readily configured with firewall rules that define operation of the firewall for network types that are readily understood by a user.

Once a mapping as reflected in data structure is constructed the process of proceeds from block to block . At block the mapping captured in data structure may be used to generate one or more firewall filters based on firewall rules that have been specified based on friendly network types.

In the embodiment of firewall rules are stored in one or more policy stores of which three policy stores A B and C are illustrated. However any suitable number of policy stores may be used to hold firewall rules. In the embodiment illustrated different policy stores may be used to contain rules applicable in different operating contexts of computer . For example computer may be configured to operate as part of a managed domain. In such an embodiment one of the policy stores A . . . C may contain policy information such as firewall rules set by an administrator of the managed domain. Computer also may be capable of operation according to policies set by a user. Accordingly one of the policy stores A . . . C may store policy information including firewall rules set by a user. Another one of the policy stores A . . . C may contain policy information including firewall rules that is obtained dynamically and stored for use for a limited period of time.

Each policy store may contain policy information according to one or more profiles. Each profile may be applicable in a specific network environment in which network computer is connected. For example each policy store A B C may contain a domain network profile a private network profile and a public network profile. The domain network profile may contain policy information applicable when the networked computer is joined to a managed domain. The private network profile may contain policy information applicable when the networked computer is connected to a private network but is not domain joined. The public network profile may contain policy information applicable when the networked computer is connected to a public network such as directly to the Internet through an access point.

The policy stores A . . . C illustrated in provide one example of the organization of policy information applicable to configuring a firewall. Any number or type of policy stores may be employed and any one of the policy stores may be selected at any time in any suitable manner as a source for firewall rules. More generally firewall rules may be obtained from any suitable source.

Regardless of the number and type of policy stores and the number and types of profiles associated with each policy store policy stores A . . . C may provide a set of firewall rules in any given networking context. Some or all of the firewall rules in the policy stores A . . . C may be defined based on a network type to which they are applicable. At block these rules may be translated into network filters using the network type to index mapping constructed at block .

Processing at block may be performed in any suitable way. For example each of the applicable rules in policy stores A . . . C that is specified based on a network type may be translated into a set of rules with one rule for each network interface of the network type defined in the rule. By expanding one rule based on network type into one or more rules based on network interfaces the resulting rules may be in the form used in a prior art firewall. Once rules specified based on network type are translated into rules specified by network interface the rules may thereafter be translated to firewall filters using a mechanism as known in the art or in any other suitable way.

Accordingly once filters are generated at block they may be applied at block . Processing at block may be performed as in software firewalls as is known in the art such as by providing the filters to an enforcement component. However the specific mechanism by which firewall filters are applied is not a limitation on the invention and any suitable mechanism may be employed. Once the filters generated at block are applied at block the firewall within network computer may operate to selectively block or allow message traffic based on the applicable firewall rules in the applicable policy stores A . . . C.

A networked computer with a software firewall configured with filters derived according to the process of may continue to operate blocking or allowing network traffic selectively based on the firewall rules. The networked computer may continue to operate using these filters until an event occurs requiring a change in the filters. One event that may require a change in the filters is a change in one or more of the applicable rules.

Accordingly illustrates that in the event of a rule change the process branches from decision block to block . Processing at decision block may detect a rule change in any suitable way. For example a firewall service may receive one or more rules through user interface or programming interface . In response to receiving additional rules firewall service may control the process illustrated in to loop back to block .

Regardless of how a rule change is detected when the process loops back to block filters for the firewall may be regenerated using the changed rules. The filters generated with the changed rules may then be applied at block after which the firewall may continue to operate selectively blocking or allowing network traffic based on the changed rules. In this scenario processing at block may use the mapping previously created and stored at block . Reusing a previously stored mapping in scenarios in which the mapping has not changed may improve the overall performance of a networked computer.

Another event that may trigger a change in filters employed by a software firewall is a change in the network configuration of computer . For example computer may connect to an additional network. Such a change in the network configuration may be detected in any suitable way. In the embodiment illustrated network location awareness component monitors network connections and notifies firewall service upon detecting any change in network configuration of computer . However any suitable mechanism may be used to detect changes in configuration.

Regardless of how a change in network configuration is detected upon detection of such a change the process of loops back to loop start . Subprocess for constructing a network type to network interface mapping may then be repeated. Accordingly when subprocess is completed a new data structure in the form of data structure is created reflecting the changes in network configuration. The process of translating applicable rules from policy stores A . . . C into firewall filters may then be repeated at block . The generated filters may be applied at block and the firewall may continue operation selectively blocking or allowing message traffic based on the specified firewall rules as applicable based on the changed network configuration.

In the embodiment of changes in network configuration may result in a different set of firewall filters being used. Those filters may be derived from rules previously defined based on network type. Accordingly those filters may be generated without express user interaction even if the user did not program rules directly applicable to a new network interface. For example if a user programs a rule for all wireless networks when computer connects to a wireless network filters for that network interface may be automatically applied. In this way allowing a user to specify firewall rules based on network type simplifies both the initial specification of the rule and maintaining rules as the network configuration of a networked computer changes. Further specifying rules based on network types simplifies applications or other programs because it avoids the need for those programs to change rules based on changes in network configuration. It also avoids the need for providing those programs with administrator rights which further improves security of a networked computer.

The rules in policy stores A . . . C may be obtained in any suitable way. As one example a user may provide firewall rules through a user interface. As an example illustrates a graphical user interface through which a user may edit or define a firewall rule. The user interface illustrated in includes window that provides an input area through which a user may provide input specifying parameters of a firewall rule. Input area may contain one or more control objects that allow a user to easily select values for parameters defining the firewall rule. For example control objects are illustrated as radio buttons allowing a user to define an action that is performed by the firewall when the rule is applicable. In the example illustrated control objects allow a user to indicate whether the message traffic subject to the rule is blocked or allowed.

Input area may also include other control objects such as control objects which allow a user to specify whether the rule is enabled or disabled. Other control objects though not expressly shown in may allow a user to specify values for other parameters such as a protocol or profile in which the rule is applicable. Additionally window may contain fields or other objects through which a user may input other information defining the rule. For example window may provide a mechanism for a user to input a name or other identifying information for the rule.

Window may also contain control objects that allow a user to administer the rule. In the embodiment illustrated window includes toolbar . Toolbar may contain one or more tools such as tools that allow a user to create a new rule or save a rule that has been defined.

Window may also include a mechanism that enables a user to associate a network type with a rule being defined. In the embodiment illustrated input area includes a control object . Upon selection of control object by a user dialog box may be presented to the user. In the embodiment illustrated dialog box provides a mechanism through which a user may associate one or more network types with a rule.

Dialog box includes an input area through which a user may specify one or more network types applicable to the rule being defined in window . In the embodiment illustrated the user is presented with an enumerated list of network types in input area . In the example of the enumerated network types correspond to those contained in the network type to interface type mapping shown in . However the number and kinds of networks recognized by a networked computer and therefore the number and kinds of network types presented in input area is not a limitation on the invention and the enumerated list presented in input area may contain any number of entries. Further it is not a requirement that the number or kinds of networks identified be static. For example one or more interfaces could be provided to allow specification of network types and associated interface types. Such a feature could be supported for example with a tool that expands the data structure storing schema in response to input from a user a program or other suitable source.

Regardless of the number and kinds of networks depicted in input area a user may select one or more of the network types using control objects such as control objects A B or C. In the embodiment illustrated control objects A . . . C are check box control objects allowing a user to specify one or more network types applicable to a rule being defined.

Additionally dialog box contains radio button control object . Radio button control object allows a user to specify that a rule is applicable to all network types.

Other control objects in dialog box may allow a user to perform other actions associated with specifying a network type applicable to a rule. For example button when selected records the information input through dialog box . Conversely button cancels the input provided through dialog box and returns the user to window .

The graphical user interface of represents just one example of an interface through which a user may specify a firewall rule with an associated network type or types applicable for that rule. provides an example of an alternative interface here shown as a command line prompt.

The interface in includes a window containing an input area . A user may specify a rule by typing text into input area . Any suitable syntax may be used for entering rule information. In the embodiment illustrated in the rule is specified with a syntax that contains command key words indicating that the text input into input area defines a firewall rule. For example input area is shown with key words ADVFIREWALL FIREWALL ADD RULE. In addition the syntax allows one or more parameters to be associated with the command for adding a new rule. In the example of each parameter is preceded by a parameter type and the sign. As can be seen in the example of a syntax for defining a rule through a command line prompt may allow specification of one or more parameters of the rule one of which may be a network type. shows a parameter called interface type. That parameter is assigned a value of wireless indicating the rule defined in input area applies to all network interfaces identified as being wireless interfaces.

Firewall rules may also be provided in other ways. For example rather than entering text defining commands that configure firewall rules as shown in the same or similar text may be stored as part of a script that may be executed to configure firewall rules. The script may be associated with an application or otherwise provided on networked computer . Alternatively firewall rules may be downloaded to a policy store A . . . C as part of the download of policy information that sometimes occurs in a domain joined computer. Many computers contain services that access policy servers and periodically download policy information. Firewall rules may be downloaded in the same way that other policy information is downloaded. For example a policy client executing on networked computer may download firewall rules from a policy server directly to a policy store A . . . C. The firewall rules downloaded as part of group policy information may contain firewall rules specified based on network type or specified in any other suitable way.

While a graphical user interface such as is illustrated in may provide a useful way for specifying firewall rules for a less experienced computer user scripting may provide a desirable mechanism for specifying firewall rules to an experienced programmer. To facilitate programmatic specification of rules based on network type application programming interface may expose the ability to set or retrieve information about network types associated with specific rules. Commands may be exposed to application developers through a Public COM API to firewall service set as an interface INetFwRule InterfaceTypes HRESULT put InterfaceTypes BSTR interfaces HRESULT get InterfaceTypes BSTR interfaces 

The put InterfaceTypes method may accept a comma delimited string BSTR of friendly network interface types. The get InterfaceTypes method returns a comma delimited string BSTR of friendly network interface types. These types are specified as RemoteAccess Wireless LAN and All. 

Also a rule schema for firewall rules may differ from known schema to accommodate friendly types. For example a new schema parameter IFType that uses types as defined above could be included. The type ALL could be expressly included in a set of values that IFType may have. However in the embodiment illustrated the type ALL is represented by an absence of any other type value specified as a restriction. IFType may handle only one interface type per specification in the schema but can be specified multiple times. The specification of All interfaces may be accomplished by omitting the parameter completely from the schema. An example of a rule specified with this schema is as follows Action Block Active TRUE Dir In IFType Wireless IFType RemoteAccess Name Rule1 Desc new Edge FALSE

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

For example a specific set of IANA interface types was used to illustrate the invention. IANA similarly defines tunnel types with associated indices that may characterize network interfaces. Tunnel type may alternatively or additionally be used to create a mapping between friendly network types and IANA interface types.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

