---

title: Deploying updates to an application during periods of off-peak demand
abstract: Update preferences might be utilized to specify that an update to an application should not be applied until the demand for the application falls below a certain threshold. Demand for the application is monitored. The update to the application is applied when the actual demand for the application falls below the specified threshold. The threshold might be set such that updates are deployed during the off-peak periods of demand encountered during a regular demand cycle, such as a diurnal, monthly, or yearly cycle.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235401&OS=09235401&RS=09235401
owner: Amazon Technologies, Inc.
number: 09235401
owner_city: Seattle
owner_country: US
publication_date: 20141020
---
This application is a continuation of U.S. application Ser. No. 13 112 418 entitled DEPLOYING UPDATES TO AN APPLICATION DURING PERIODS OF OFF PEAK DEMAND filed May 20 2011 now U.S. Pat. No. 8 869 135 issued Oct. 21 2014 which is expressly incorporated herein by reference in its entirety.

A programmable execution service PES can provide computing resources for executing applications on a permanent or an as needed basis. The computing resources provided by a PES may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances instances . The instances may be configured to execute applications including World Wide Web Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like. The resources provided by a PES can typically be purchased and utilized according to various financial models.

In order to maintain and upgrade a distributed software application such as an application executing on a PES it is commonly necessary to apply software updates to the application. For instance it may be necessary to periodically apply software updates to various components of an application executing on a PES in order to implement security patches bug fixes or feature improvements. An update might install new software components patch existing software components remove software components from the application and or perform other tasks.

Updating an application executing on a PES a PES application can be a complex process for various reasons. One reason is that multiple software developers and or software development teams might concurrently develop updates to the PES application. A security development team might develop security updates for the application a maintenance development team might develop bug fix updates for the application and a new feature development team might develop new feature updates for the application. All of this type of development typically occurs in parallel thereby resulting in the possibility that multiple different updates might be available for an application at any given time.

Disparate business and operational requirements can also cause updating an application executing on a PES to be a complex process. For instance certain types of businesses and applications might require near 100 availability of an application thereby making it difficult if not impossible to take the application offline to perform an update. Other types of businesses and PES applications might not have such strict availability requirements. As another example it may be unacceptable for some businesses to incur costs for additional computing resources utilized to assist in performing an update to a PES application. Other businesses might be willing to incur a charge for additional computing resources used when performing an update if the update can be performed quickly and with a minimal possibility of an availability outage.

The following detailed description is directed to technologies for optimized updating of applications. Utilizing the technologies described herein updates can be deployed to an application such as an application executing on a PES in a way that is optimized for various economic temporal and operational factors identified by an owner or maintainer of the application. In this way the updates can be applied to the application in a manner that satisfies various business and technical requirements related to the operation of the application.

According to one aspect disclosed herein a PES platform is configured to provide instances of computing resources for executing an application. For example the PES platform might provide virtual machine instances instances for executing an application such as an e commerce application or another type of distributed application. Software components that implement the application are deployed to the virtual machine instances provided by the PES platform.

The PES platform is also provided with functionality for applying updates to the components of the application. As discussed above it may be necessary to periodically apply software updates to various components of the application to implement security patches bug fixes feature improvements or for other reasons. An update might install new software components patch existing software components remove software components from the application and or perform other tasks.

In order to deploy an update to the application update preferences are specified that define various factors for use in determining how and when an update is to be deployed. For instance economic factors may be specified that indicate the extent to which additional costs may be incurred during deployment of an update such as for instantiating new virtual machine instances. As an example some application owners might indicate that cost is no object during the deployment of updates. Other owners might indicate that no additional costs should be incurred during deployment of an update or that the additional costs be minimized. Other owners might indicate the conditions under which costs might be incurred such as when the price for computing resources falls below a certain point.

The update preferences might also include temporal factors that indicate the extent to which time is a factor in deploying an update. For instance some application owners might indicate that an update to an application should be deployed as quickly as possible. Other application owners might indicate that an update to an application can proceed more slowly. In other cases the update preferences might specify that application of the updates be delayed until demand for the application falls below a certain threshold.

The update preferences might also include operational factors relating to the operation of the application during the deployment of an update. For instance the operational factors might indicate the tolerance for a failure of the upgrade the tolerance for an outage of the application a level of confidence in the upgrade and other types of operational factors. As will be discussed in greater detail below the economic temporal and operational factors are utilized in creating an optimized plan for deploying an update to the application.

Once the update preferences have been specified a deployment component operating within the PES platform utilizes the preferences to create a deployment plan. The deployment plan specifies how and when the update or updates is to be applied to the application in view of the specified preferences. In one embodiment for example the deployment plan might specify instructions for deploying the update in a manner that optimizes the update process based upon the factors set forth in the update preferences. The deployment plan is then utilized to deploy the update to the application.

Update preferences might be utilized to specify that one or more updates to an application should not be applied until the demand for the application falls below a certain threshold. Demand for the application is monitored. The updates to the application are applied when the actual demand for the application falls below the specified threshold. The threshold might be set such that updates are deployed during the off peak periods of demand encountered during a regular demand cycle such as a diurnal monthly or yearly cycle. Additional details regarding the various processes described above for updating an application and others will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

The PES platform can provide computing resources for executing the application on a permanent or an as needed basis. The computing resources provided by the PES platform may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances instances . The instances may be configured to execute applications including World Wide Web Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and or one large processing resource as a database server for example.

The computing resources provided by the PES platform are enabled by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for deploying updates to an application will be described below with regard to .

The customers and other consumers of the PES platform may access the computing resources provided by the data centers over a wide area network WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote consumers may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The customer computing system is a computer utilized by a customer or other consumer of the PES platform . For instance the customer computing system may be a server computer a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e reader a game console a set top box or any other computing device capable of accessing the PES platform .

As will be described in greater detail below the customer computing system may be utilized to configure aspects of the computing resources provided by the PES platform . In this regard the PES platform might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on the customer computing system . Alternatively a stand alone application program executing on the customer computing system might access an application programming interface API exposed by the PES platform for performing the configuration operations. Other mechanisms for configuring the operation of the PES platform including deploying updates to an application might also be utilized.

According to embodiments disclosed herein the capacity of purchased computing resources provided by the PES platform can be scaled in response to demand. In this regard scaling refers to the process of instantiating which may also be referred to herein as launching or creating or terminating which may also be referred to herein as de scaling instances of computing resources in response to demand. In this manner the capacity of resources purchased by a customer of the PES platform can be scaled on demand.

Auto scaling is one mechanism for scaling computing resources in response to increases or lulls in demand for the resources. Auto scaling allows customers of the PES platform to configure the platform to scale their purchased computing resources according to conditions defined by the customer. For instance rules may be defined for scaling up capacity in a particular manner in response to the occurrence of specified conditions such as a spike in demand. Similarly rules might also be defined to scale down capacity in a particular manner in response to the occurrence of other conditions such as a lull in demand. As will also be described in greater detail below the auto scaling functionality provided by the PES platform might also be utilized to provide additional capacity to an application during deployment of an update. Details regarding this process will be provided below.

As will also be described in greater detail below the PES platform may also be configured with a deployment component to assist customers in the deployment of new instances of computing resources. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration might specify one or more applications or software components that should be installed in new instances provide scripts and or other types of code to be executed in new instances provide cache warming logic specifying how an application cache should be prepared and other types of information. The deployment component utilizes the customer provided configuration and cache warming logic to launch configure and prime new instances of computing resources.

The deployment component might also provide functionality for assisting customers with the deployment of updates to existing instances of computing resources. Through this mechanism a customer can indicate that an update or updates is to be applied to an application executing on the PES platform. In response thereto the deployment component is configured to apply the update to the application in an optimized fashion that satisfies any business or technical requirements of the customer. Additional details regarding a deployment component utilized by the PES platform will be described below with regard to .

In one embodiment the instances A N which may be referred to herein singularly as an instance or in the plural as the instances are virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. In the example of virtual machine instances each of the servers may be configured to execute an instance manager capable of executing the instances. The instance manager might be a hypervisor or another type of program configured to enable the execution of multiple instances on a single server for example. As discussed above each of the instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein might be utilized with instances of storage resources instances of data communications resources and with other types of resources. The embodiments disclosed herein might also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

The data center shown in also includes a server computer reserved for executing software components for managing the operation of the data center the server computers and the instances . In particular the server computer might execute a management component . As discussed above a customer of the PES platform might utilize the customer computing system to access the management component to configure various aspects of the operation of the PES platform and the instances purchased by the customer. For example the customer may purchase instances and make changes to the configuration of the instances. The customer might also specify settings regarding how the purchased instances are to be scaled in response to demand.

An auto scaling component scales the instances based upon rules defined by a customer of the PES platform . In one embodiment for instance the auto scaling component allows a customer to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated.

The auto scaling component may execute on a single server computer or in parallel across multiple server computers in the PES platform . In addition the auto scaling component may consist of a number of subcomponents executing on different server computers or other computing devices in the PES platform . The auto scaling component may be implemented as software hardware or any combination of the two. The auto scaling component may monitor available computing resources in the PES platform over an internal management network for example. As will be described in greater detail below the auto scaling component might also be utilized to scale and de scale instances during the deployment of an update to an application.

As discussed briefly above the data center is also configured with a deployment component to assist customers in the deployment of new instances of computing resources. The deployment component may receive a configuration from a customer that includes data describing how new instances should be configured. For example the configuration might specify one or more applications that should be installed in new instances provide scripts and or other types of code to be executed for configuring new instances provide cache warming logic specifying how an application cache should be prepared and other types of information.

The deployment component utilizes the customer provided configuration and cache warming logic to launch configure and prime new instances . The configuration cache warming logic and other information may be specified by a customer using the management component or by providing this information directly to the deployment component . Other mechanisms might also be utilized to configure the operation of the deployment component .

The deployment component also provides functionality for deploying updates to an application. In this regard the management component might be configured to allow a customer to declare that one or more updates are available for an application and to provide update preferences indicating various factors regarding when and how the update should be performed. The deployment component utilizes the update preferences to optimize the deployment of the updates to the instances in view of the various factors specified by the customer. Additional details regarding this process and other functionality provided by the deployment component will be provided below with regard to .

In the example data center shown in an appropriate LAN is utilized to interconnect the server computers A N and the server computer . The LAN is also connected to the WAN illustrated in . It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A N in each data center and between instances purchased by each customer of the PES platform . These network topologies and devices should be apparent to those skilled in the art.

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the management component the auto scaling component and the deployment component might be performed by other components or by a combination of these or other components. Additionally it should be appreciated that this functionality might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

The on demand instances which might also be referred to herein as regular instances are instances that are paid for and in active use by a customer. The on demand instances allow customers of the PES platform to pay for capacity per unit of time such as an instance hour without requiring a long term commitment. This frees the customer from the costs and complexities of planning purchasing and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.

The reserved instances are instances of a computing resource that are reserved for a customer in exchange for a payment. The reserved instances provide the customer the option to make a one time payment for each instance they want to reserve. In turn the customer may receive a significant discount on the hourly usage charge for the reserved instances as compared to the on demand instances . After the customer makes a one time payment for the reserved instances the reserved instances are reserved for the customer and the customer has no further obligation. The customer may choose to run the reserved instances for the discounted usage rate for the duration of a chosen term. If the customer does not use the reserved instances the customer will not pay usage charges on these instances.

The spot instances allow customers to bid on unused capacity in the PES platform . The customer can run the spot instances for as long as their bid exceeds a current market price referred to herein as the spot instance market price which may fluctuate based upon supply and demand. The spot instances may be terminated if a customer s maximum bid no longer exceeds the current spot instance market price.

In order to obtain the spot instances the customer places a request for the spot instances that specifies the desired number of spot instances and the maximum price the customer is willing to pay per instance hour. If the customer s maximum price bid exceeds the current spot instance market price for the spot instances the customer s request will be fulfilled and the customer s spot instances will run until either the customer chooses to terminate them or the market price increases above the customer s maximum price whichever is sooner . Various components operating within the PES platform may manage the market for the spot instances including setting the current spot instance market price for the spot instances .

The standby instances are spot instances that have been acquired on behalf of a customer and that are made ready for near immediate use by the customer in the manner described herein. The price charged for the standby instances is typically less than the price charged for the on demand instances since the standby instances may be terminated in the same manner as the spot instances . In one embodiment the standby instances are priced higher than the spot instances and the reserved instances but lower than the on demand instances . It should be appreciated however that the various pricing mechanisms described above for the on demand instances reserved instances spot instances and standby instances are merely illustrative and that other mechanisms may be utilized to set the pricing for the various instance types.

In one embodiment disclosed herein the management component is configured to provide functionality for allowing an owner or maintainer of an application to declare that an update or updates is available for the application. As discussed above the update might install new software components into the application may patch existing software components in the application may remove software components from the application and or perform other tasks for updating the components of the application.

In response to receiving an indication from an owner or maintainer of an application that an update is available for deployment the management component might generate an update request A. The update request A indicates that an update is ready for deployment to the application. The update request A might also provide other data such as data identifying the update and other information.

In one embodiment the update request A is placed into an update queue . The update queue is a queue utilized to store pending update requests A N for an application. Multiple individuals or groups might utilize the management component concurrently to queue update requests A N. In one example multiple software developers or software development teams concurrently develop updates to the application. For instance a security development team might develop security updates for the application a maintenance development team might develop bug fix updates for the application and a new feature development team might develop new feature updates for the application. Using the management component each of the teams can concurrently declare the availability of an update or updates to the application and the update requests A N for the updates will be placed in the update queue for deployment at an appropriate time and in an appropriate manner.

As illustrated in the management component might also be utilized to specify update preferences for each update . The update preferences define various factors for use by the deployment component in determining how and when an update is to be deployed. For instance economic factors A may be specified that indicate the extent to which additional costs may be incurred during deployment of an update such as for instantiating new virtual machine instances . As an example some application owners might indicate that cost is no object during the deployment of updates. Other owners might indicate that no additional costs should be incurred during deployment of an update or that the additional costs be minimized.

The update preferences might also include temporal factors B that indicate the extent to which time is a factor in deploying an update . For instance some application owners might indicate that an update to an application should be deployed as quickly as possible. Other application owners might indicate that an update to an application can proceed more slowly in order to minimize costs or other factors.

The update preferences might also include operational factors C relating to the operation of the application during the deployment of an update . For instance the operational factors C might indicate the tolerance for a failure of the upgrade the tolerance for an outage of the application a level of confidence in the upgrade the tolerance for reduced application performance and other types of operational factors. As will be discussed in greater detail below the economic factors A temporal factors B and operational factors C are utilized in creating an optimized plan for deploying the update to the application.

It should be appreciated that the update preferences might include other types of factors than those disclosed herein. It should also be appreciated that the update preferences might be specified generally or specifically. For instance an owner of an application might simply indicate that the cost of deploying an update should be minimized that the speed of deploying an update should be maximized or other types of general indications of business and operational requirements for deploying an update . In another example the owner of the application might indicate more specifically that new instances may or may not be created during deployment of an update that updates may be merged and other specific instructions regarding how the update is to be applied. The management component might provide an appropriate user interface for allowing the owner or maintainer of the application to define the update preferences . Additionally the update preferences may be included in an update request A provided separately to the deployment component or provided to the deployment component in another manner.

Once the update preferences have been specified for an update the deployment component utilizes the update preferences to create a deployment plan . The deployment plan specifies how and when the update and potentially other updates in the update queue is to be applied to the application in view of the specified update preferences . In one embodiment for example the deployment plan might specify instructions for deploying an update in a manner that optimizes the update process according to the factors set forth by the owner or maintainer of the application in the update preferences . The deployment plan is then utilized to deploy the update to the application. For instance the update might be deployed to the instances A G executing on the server computers A C of the customer fleet .

The deployment plan may contain various types and combinations of instructions for deploying an update or multiple updates depending upon the factors set forth in the update preferences for the update . For instance the deployment plan might specify whether new virtual machine instances may be created and utilized to deploy an update . If the update preferences indicate that no additional costs should be incurred during the deployment of an update then the deployment plan might indicate that no new virtual machine instances should be created during deployment. However if the update preferences indicate that it is acceptable to incur costs during the deployment of an update then new virtual machine instances might be created and utilized during the deployment of the update . Details regarding the use of additional virtual machine instances during the deployment of an update will be provided below.

The deployment plan might also specify whether multiple updates might be merged during deployment. Merging updates refers to a process of skipping intermediate updates to a component when a later update is deemed to be reliable. For instance three update requests might be queued for the application the first update request is for an update that upgrades a component in the application from version one to version two the second update upgrades the same component to version three and the third update upgrades the same component to version four. The third update might be installed on a limited number of instances to determine if it is reliable. If so other instances might be upgraded directly to version four thereby skipping the intermediate updates and allowing the deployment of the updates to proceed faster and at a lower cost than it might otherwise.

According to other embodiments the deployment plan might specify a number of distinct component version sets that may be executing on the instances utilized to implement an application at any given time. The deployment plan might also specify that the amount of time that a fleet utilizes more than one component version set be minimized. In order to illustrate the concept of component version sets the following notation will be utilized A.1 B.1 C.1 D.1 where capital letters refer to components and numerals refer to versions. In this example the component version set includes component A version 1 component B version 1 component C version 1 and component D version 1. Using this notation updates can be described as transitions from one component version set to another. For instance A.1 B.1 C.1 A.2 B.1 C.2 identifies an update that upgrades components A and C from version 1 to version 2.

The deployment plan might also indicate that updates should be applied to unused instances in a prioritized manner. If an instance has not received a request in some previous period of time priority may be given to any updates queued for deployment to the instance . Prioritized deployment to unused instances may result in quicker deployment of updates and result in a lower cost of deployment since it may be unnecessary to add new instances during deployment of an update to an unused instance .

The deployment plan might also indicate that deployment of updates to an application should occur during periods of off peak demand for the application. In one embodiment a demand cycle for the application is identified through monitoring demand for the application or in another fashion. The demand cycle might be based upon a diurnal cycle a monthly cycle a yearly cycle or another type of regular cycle. Once the demand cycle has been identified the updates to the application might be applied during periods of off peak demand thereby potentially reducing the cost of deployment of the updates . Additional details regarding this process are provided below with respect to .

The deployment plan might also indicate how and when unneeded instances may be de scaled during or following deployment of an update . For instance it may be necessary or desirable to de scale one or more instances in a customer fleet following the deployment of an update . The deployment plan might specify that instances should be de scaled according to the percentage of a paid for time period that has been utilized. In this manner the customer of the PES platform will receive full benefit of the paid for time period prior to termination of instances. The deployment plan might also specify that the instances are not to be terminated until the end of a paid for time period. Additional details regarding this process will be provided below with reference to .

The deployment plan may also specify the manner in which an update should be deployed to various types of instances within a customer fleet . For instance certain types of applications and customers might specify a number of required instances for an application and a number of desired instances for the application. The number of required instances specifies a minimum number of regular instances that are necessary for operation of the application. The number of desired instances specifies a number of optional instances that are to be utilized if certain conditions are met such as the price of the desired instances remains below a certain threshold. The deployment plan might specify that desired instances for an application may be utilized to facilitate the upgrade of the application and that the number of required instances for the application does not fall below the specified number. Additional details regarding this process will be provided below with regard to .

The deployment plan might also specify mechanisms to address various operational factors C set forth in the update preferences . For instance the update preferences might specify that a risk of a failed update or application unavailability be minimized. In this case the deployment plan might specify that new instances be deployed rather than patching existing instances . Alternatively or in addition thereto the deployment plan might specify that significant testing be performed on an update prior to applying the update to all of the instances in a fleet . This might be accomplished by applying an update to a subset of the instances in a fleet performing testing on the updated instances and deploying the update to the remainder of the instances if the testing is successful. If testing is not successful the update may not be deployed to the remainder of the fleet .

The deployment plan might also specify that instances be replaced after a specified number of patches have been applied to the instances . For instance a customer might specify that instances that have been patched in excess of 1000 times be replaced by new instances created using the most current version of the application. This process addresses the possibility that instances of an application might become unstable after a certain number of patches have been applied thereto.

The deployment plan might also specify that other mechanisms for minimizing the cost of an update deployment be utilized. For instance the deployment plan might indicate that network bandwidth or other computing resources be minimized during deployment. In this scenario the instances may be patched rather than utilizing a new image for the instances . If the cost of network bandwidth is not a concern new virtual machine images might be applied to the instances . Similarly the deployment plan might specify that new instances be created rather than deploying updates by applying patches when the network bandwidth utilized to install two or more patches is greater than the network bandwidth utilized to create a new instance at an up level version of the application.

It should be appreciated that the various features of the deployment plan described above are merely illustrative and that other factors and considerations for deploying updates in an optimized fashion might also be utilized to create the deployment plan . For instance factors might be considered when creating the deployment plan such as the current time of day instance hour pricing spot market rates level of testing required for an update level of confidence in an update the size of an update or updates expected and actual time to deploy an update importance of deploying an update quickly number of queued update requests current and anticipated load on the application current and anticipated future cost of deploying updates application performance anticipated time to complete an update or updates price of network bandwidth or other computing resources performance of individual instances or a fleet actual or anticipated time to deploy patches or create new instances other update requests in the update queue and other economic temporal and or operational factors. It should also be appreciated that the deployment component might also update and modify the deployment plan during the deployment of an update in order to take into account changing factors such as the time of day current spot instance pricing application performance and others.

As discussed above the deployment component attempts to deploy updates in a manner that is optimized for the business and technical considerations defined in the update preferences . In this regard the deployment component attempts to generate a deployment plan for deploying an update or updates optimally in view of the specified preferences . The deployment plan might specify that combinations of the mechanisms described above be utilized to deploy the update in an optimal fashion.

It should be appreciated however that generating a truly optimized deployment plan might not be possible in view of the specified update preferences . In these cases the deployment component attempts to satisfy the constraints set forth in the update preferences as well as possible. An owner or maintainer of the application might be notified if it is not possible to meet the specified constraints on the deployment of an update . For instance if the update preferences specify that an update is to be applied without incurring additional costs but this is not possible then the owner or maintainer of the application might be notified and requested to modify the update preferences or take other corrective action.

Turning now to additional details will be provided regarding one illustrative process disclosed herein for deploying updates to an application. It should be appreciated that the logical operations described herein with respect to and the other FIGURES are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the deployment component retrieves an update request from the update queue . As discussed above the management component may provide functionality for allowing a user to declare the availability of an update . In response thereto the management component enqueues an update request on the update queue for the update . The deployment component retrieves an update request from the update queue at operation . The routine then proceeds to operation .

At operation the deployment component receives the update preferences for the update request that was retrieved from the update queue . As discussed above the management component might provide functionality for defining update preferences for the update . As also discussed above the update preferences define various factors for use in determining how and when an update is to be deployed like economic factors A temporal factors B and or operational factors C. The update preferences might be contained in the update request or otherwise associated therewith. From operation the routine proceeds to operation .

At operation the deployment component generates a deployment plan for the update . As discussed above the deployment plan specifies how and when an update or updates is to be applied to the application in view of the specified update preferences . The deployment plan might specify instructions for deploying the update in a manner that attempts to optimize the update process based upon the factors set forth by the owner or maintainer of the application in the update preferences . From operation the routine proceeds to operation .

At operation the deployment plan is utilized to deploy the update to the application. As discussed above deployment of the update might be performed in many different ways depending upon the specified update preferences and other factors. For instance new instances might be purchased and utilized to provide additional computing capacity during deployment of an update updates might be merged the number of concurrent unique component sets might be restricted updates might be prioritized for unused instances and or deployment might be performed during off peak periods of a demand cycle. Other types of processes procedures and mechanisms might also be utilized to deploy an update or updates in a manner that is optimized for the specified update preferences . The routine might also be repeated to deploy multiple updates or might be performed in multiple concurrent instances in order to deploy multiple updates to multiple applications simultaneously. Once the update has been deployed the routine proceeds to operation where it ends.

In the example shown in the fleet includes three instances A C that have a component set A.1 installed thereupon. Additionally in this example an owner or maintainer of the fleet has declared an update for updating the entire fleet from A.1 to A.2. The owner or maintainer of the fleet has also specified update preferences indicating that additional instances may be purchased to deploy the update in an efficient manner while eliminating any downtime for the fleet . Consequently additional instances D F have been instantiated to provide additional capacity during the deployment of the update . These instances D F might be purchased from the spot market described above. The update is then applied to the new instances D F.

Once the update has been applied to the new instances D F the new instances D F are added to the fleet . The instances D F are then configured to begin handling a workload for the application. For example the instances D F might be added to a load balancer for the fleet . Once the new instances D F have been added to the fleet the down level instances A C may be removed from the fleet . In this manner all of the instances in the fleet have been upgraded from A.1 to A.2. The owner or maintainer of the fleet incurs an additional expense for the three additional instances utilized while the deployment of the update was being performed. The mechanism illustrated in might be utilized when the owner or maintainer of the fleet specifies that cost is not an object when upgrading the fleet or when the cost of new instances is very low.

In the example shown in the fleet includes three instances A C that have a component set B.1 installed thereupon. Additionally in this example an owner or maintainer of the fleet has declared an update for updating the entire fleet from B.1 to B.2. The owner or maintainer of the fleet has also specified update preferences indicating that additional instances may be purchased to deploy the update in an efficient manner while eliminating any downtime for the fleet . In this example however the owner or operator of the fleet has indicated that the number of purchased instances should be minimized. Consequently only a single instance D is purchased at time Tto provide additional capacity during the deployment of the update . The update is then applied to the new instance D.

Once the update has been applied to the new instance D the new instance D is added to the fleet . The new instance D is then configured to begin handling a workload for the application. For example the instance D might be added to a load balancer for the fleet . Once the new instance D has been added to the fleet one of the down level instances A C may be removed from the fleet .

At time T a new instance E is created and updated to B.2. The new instance E is then added to the fleet and one of the down level instances A C is removed from the fleet. Similarly at time T a new instance F is created and updated to B.2. The new instance F is then added to the fleet and one of the down level instances A C is removed from the fleet. In this manner the entire fleet has been upgraded from B.1 to B.2. The application of the update shown in proceeds more slowly than the example shown in however the costs are reduced as compared to the previous example. This type of deployment might be utilized when instance costs are high or when the deployment process occurs during a peak period of demand when costs and sensitivity to outages might be higher.

In the example shown in the fleet includes five instances A E that have a component set C.1 installed thereupon. Additionally in this example an owner or maintainer of the fleet has declared an update for updating the entire fleet from C.1 to C.2. The owner or maintainer of the fleet has also indicated that the fleet must maintain a minimum of three instances required instances and if possible would include five instances two desired instances . The desired instances D E might be standby instances purchased from a spot market. The owner or maintainer of the fleet has also specified update preferences indicating that additional instances may not be purchased to deploy the update . Consequently no new instances are purchased to assist in the deployment of the update in the example shown in .

In order to deploy the update without purchasing any new instances and while maintaining the specified number of required instances in the fleet the instances D and E are removed from the fleet e.g. by removing these instances from a load balancer and the update is applied to these instances at time T. The upgraded instances D and E are then placed back into to the fleet .

At time T the instances B and C are removed from the fleet and the update is applied to these instances. The fleet maintains the specified number of required instances during the application of the update . The upgraded instances B and C are then placed back into the fleet . At time T the instance A is removed from the fleet and the update is applied to this instance. The instance A is then placed back into the fleet . In this manner the entire fleet is upgraded from C.1 to C.2 without purchasing any new instances and while maintaining the specified number of required instances in the fleet .

The example shown in illustrates the concept of merging updates described briefly above. In this example a fleet includes three instances A C that have a component set A.1 B.1 installed thereupon. The owner or maintainer of the fleet has declared three updates A C to the fleet . Update requests A C corresponding to the updates A C have been placed in the update queue . The update A updates component A.1 to A.2 the update B updates component B.1 to B.2 and the update C updates component A.2 to A.3. The owner or maintainer of the fleet has also specified in the update preferences that no new instances should be acquired during deployment of the update and that updates to the fleet may be merged where possible.

In order to apply the updates A C to the fleet in the update A is first applied to the instance C at time T thereby updating the instance C from A.1 B.1 to A.2 B.1. At time T the update C is applied to the instance C thereby updating the instance C from A.2 B.1 to A.3 B.1. Following application of the update C to the instance C manual or automated testing may be performed on the updated instance C to ensure that application of the updates A and C were successful and that the instance C is stable. The testing of upgraded instances can improve confidence in an update thereby permitting intermediate updates to be skipped. More or less testing might be performing on updates depending upon the price of instances. If instances are less expensive then a greater amount of testing might be performed on updates and or various combinations of updates.

If the instance C is stable and operating correctly the updates A and C may be merged thereby causing the subsequent instance to be updated directly to A.3 and bypassing A.2. Consequently the updates B and C are applied to the instance A at time Twithout application of the update A to the instance A. Similarly the updates B and C are applied to the instance B at time Twithout application of the update A to the instance B. This results in the upgrading of the entire fleet to the component set A.3 B.2 in less time than it would have taken had the updates A and C not been merged. It should be appreciated that more than two updates might be merged in this manner in other embodiments thereby saving additional time and expense.

The example shown in illustrates one process for prioritizing deployment of updates to unused instances. In the example shown in a fleet includes three instances A C that have component set D.1 E.1 F.1 installed thereupon. Three update requests A C have been queued in the update queue . The first update request A is for updating component D.1 to D.2 the second request B is for updating component E.1 to E.2 and the third request C is for updating component F.1 to F.2.

In the example shown in the instances A and B are active handling requests for the application. The instance C however has not recently handled any requests and is therefore deemed to be currently unused. In this example the instance C is a candidate for prioritized deployment of the updates specified in the update queue . In particular the updates identified in the update queue might be applied to the instance C while the instance C remains unused thereby causing no noticeable loss of capacity for the fleet . If requests are received that are directed to the instance C the instance C might be returned to the fleet and any remaining upgrades might be applied to the instance C at a later time.

In one embodiment a demand cycle for the application is identified through monitoring demand for the application or in another fashion. The demand cycle might be based upon a diurnal cycle or another type of cycle. Once the demand cycle has been identified the updates to the application might be applied during periods of off peak demand thereby potentially reducing the cost of deployment of the updates . The routine shown in illustrates this process.

The routine begins at operation where demand for the application is monitored over a period of time and data is captured regarding the demand for the application. The routine then proceeds to operation where the demand cycle for the application if any is identified. For instance certain types of applications might have a demand cycle that coincides with the diurnal cycle. Other types of applications might have other types of demand cycles based upon various factors. The demand cycle might also be specified manually such as for instance by an owner or operator of the application specifying the number of instances required during various times of day.

A demand cycle includes periods of peak and off peak demand for the application. These periods of peak and off peak demand may be predictable based upon an understanding of the demand cycle. The periods of peak and off peak demand for the application are identified from the demand cycle at operation .

From operation the routine proceeds to operation where updates to the application are deployed during periods of off peak demand. Because demand for the application is lower during these periods it might be possible to deploy the updates without purchasing additional instances to assist with the deployment or purchasing fewer instances than would be required if the updates were deployed during a period of higher demand. This might reduce the cost of deploying an update . The routine proceeds from operation to operation where it ends.

The routine begins at operation where demand for the application is monitored in the manner described above. The routine then proceeds to operation where an update is received for the application also as described above. The routine then proceeds to operation where a demand threshold for determining when the update to the application should be applied is determined.

The threshold might be specified by an owner or operator of the application or might be computed based upon the actual demand for the application. The threshold might also be adjusted up or down based upon various factors. For instance the threshold might be adjusted based upon the amount or number of computing resources that need to be updated the number of new instances of computing resources needed to perform the update the pricing of computing resources and other factors.

Once the demand threshold has been computed at operation the routine proceeds to operation where the update to the application is applied when the actual demand for the application falls below the threshold computed at operation . The routine then proceeds to operation where it ends. It should be appreciated that the routine shown in might be utilized to implement the functionality shown in . For instance using the routine the threshold might be set such that updates are deployed during the off peak periods of demand encountered during a regular demand cycle such as a diurnal monthly or yearly cycle.

The routine begins at operation where a determination is made as to whether de scaling of one or more instances is required. As discussed above instances might need to be de scaled that have become unnecessary following a deployment of an update. Instances might also need to be de scaled as a result of decreased demand for the application. Other factors might also result in the need to de scale one or more instances . If de scaling is required the routine proceeds from operation to operation .

At operation the percentage of the paid for time period for each instance is determined. In this regard the PES platform maintains data indicating how much of each paid for time period has been used by each instance . The routine then proceeds from operation to operation .

At operation the instances that have utilized the greatest percentage of the paid for time period are identified. The routine then proceeds to operation where instances are de scaled that have utilized the greatest percentage of their paid for time period. For example if one of two instances is to be de scaled and one instance has used eight minutes of a paid for instance hour while the second instance has used 50 minutes of a paid for instance hour the second instance will be chosen for de scaling. From operation the routine proceeds to operation described above.

It should be appreciated that instances may not be terminated until the end of a paid for time period. In the example set forth just above the instance that has utilized 50 minutes of its paid for instance hour may not be terminated until the end of the paid for instance hour. In this manner the customer of the PES platform receives the full value of the paid for time period.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through the network . The chipset may include functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage medium to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the deployment component and or the other software components described above.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the routines and described with regard to and respectively.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for updating an application have been presented herein. It should be appreciated that although the embodiments disclosed herein have been described in the context of deploying updates to an application the various aspects described herein might also be utilized to deploy updates to other types of software such as operating systems. Some of the concepts and technologies described herein might also be applied to new installations of applications.

Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

