---

title: Data type visualization
abstract: A device, including one or more processors, may obtain program code, determine a group of variables based on the program code, execute the program code, determine values of the group of variables based on the executing of the program code, determine a dynamic range of a characteristic for each variable based on the values, generate a visualization that presents the dynamic range of the characteristic for the group of variables, and provide the visualization for display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09335979&OS=09335979&RS=09335979
owner: The MathWorks, Inc.
number: 09335979
owner_city: Natick
owner_country: US
publication_date: 20140915
---
The following detailed description of example implementations refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

In computer programming a variable may be used to represent a value that may change over time. A variable may be associated with a data type which may define characteristics of the possible values represented by the variable. For example the data type may identify a kind of value e.g. number integer string Boolean etc. and or a length e.g. word length how many digits the value may use for a variable. The data type assigned to a variable may affect how efficiently memory is allocated. For example if a variable is assigned 64 bits but the values represented by the variable do not exceed 32 bits throughout execution of program code also referred to herein as code in which the variable is used the extra bits may be better allocated elsewhere e.g. to other variables . The data type may identify a number of significant digits available to be used by a variable to represent a value and may identify a position of those significant digits e.g. with respect to a decimal point . The quantity and or position of significant digits used by a variable to represent values throughout execution of code may be based at least in part on a range of values represented by the variable. The range of values may include information such as representable range e.g. a difference between a maximum value and a minimum value dynamic range e.g. a ratio of an absolute value of a largest value and an absolute value of a smallest non zero value precision e.g. a number of significant digits used to represent values and other such information.

Techniques and applications for determining and presenting data type information for each variable e.g. a dynamic range for the variable may be difficult especially across multiple variables e.g. some or all variables in a function a file a project or other piece of code and for unnamed variables e.g. temporary variables or expressions . Implementations described herein may assist in presenting ranges for multiple variables included in a portion of code and may allow a user to specify sort group evaluate and otherwise manipulate a visualization of the ranges and the underlying code.

For example shows a graph of an example function showing example data assigned to a variable y according to an expression x. While the function y xis continuous this example shows a subset of values that are represented by each of the variables. shows a table with the values represented by the variable y in graph . Table shows each of the values for y as well as binary digits used to represent the values. Table also denotes most significant digits least significant digits and also counts all digits used to represent each of the values. While table shows binary digits e.g. bits other digits may also be used e.g. base hexadecimal etc. . While table shows counts for non zero significant digits in some embodiments significant digits that are zero may also be counted for example if a zero significant digit is between a most and least significant digit used in a value.

Referring back to each histogram may be a top view graph such as top view graph that shows information about significant digits used for values for each variable. A plurality of such graphs for different variables may be aggregated to generate a visualization.

The significant digits that are used for values of the variable may be shaded using different colors to represent different quantities of times that a significant digit was used by a variable to represent a value. As shown in example implementation the range may be represented as powers of two where each power of two may correspond to a significant digit in binary used to represent a value. Thus significant digits above 0 represent whole portions of a number while significant digits below zero represent fractional portions of a number.

For example a column in example implementation is highlighted by darkened vertical bars and an icon consisting of pointing finger. The highlighted column may show the range of an expression acc b j z k as highlighted in a code section of example implementation . The darkened portions of the column may show the portions of the range e.g. the most significant digits that are used by the expression acc b j z k to represent values of the expression. As shown the darkened portion is darker at the top corresponding to significant digits closer to 1 e.g. corresponding to 0 on the log 2 scale shown on the axis and gradually lightens further down the column which may indicate that values stored by the expression acc b j z k more often use higher order significant digits e.g. more significant fractional bits than lower order significant digits e.g. less significant fractional bits .

A visualization may include multiple histograms corresponding to different variables to allow the user may easily see the ranges of variables and expressions across large portions of code such as an entire project. The visualizations may be manipulated to display certain types of variables or expressions and or certain portions of the code. The visualizations may also be sorted to show variables with similar ranges. The visualizations may also include data type information allowing the user to determine overflows or underflows of values for assigned data types. The visualization may also provide inputs so that the user may modify the underlying code using the visualization. For example data types may be assigned or modified using the visualization. The visualization may also include links from each column to corresponding sections of code for each of the variables and expressions. Thus the user may be able to receive information about multiple variables and expressions across portions or entireties of code. The user may also be provided interfaces through which the code may be modified.

Client device may include one or more devices capable of receiving generating storing processing and or providing code and or information associated with code e.g. a visualization generated based on code . For example client device may include a computing device such as a desktop computer a laptop computer a tablet computer a mobile phone e.g. a smart phone a radiotelephone etc. or a similar device. Client device may provide visualizations and or representations of data. In some implementations client device may receive information from and or transmit information to server device .

Client device may host TCE . TCE may include any hardware based component or a combination of hardware and software based components that provides a computing environment that allows tasks to be performed e.g. by users related to disciplines such as but not limited to mathematics science engineering medicine and business. TCE may include a text based environment e.g. MATLAB software by The MathWorks Inc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Agilent VEE by Agilent Technologies Advanced Design System ADS by Agilent Technologies Agilent Ptolemy by Agilent Technologies etc. or another type of environment such as a hybrid environment that may include for example a text based environment and a graphically based environment.

TCE may include for example a user interface that provides visualizations of data such as dynamic ranges of variables and or expressions of code. A user interface may also provide a code editor which may be used to view and or edit code and may be used generate visualizations and or linked to visualizations.

Server device may include one or more devices capable of receiving generating storing processing and or providing code and or information associated with code. For example server device may include a computing device such as a server a desktop computer a laptop computer a tablet computer or a similar device. In some implementations server device may host TCE . In some implementations client device may be used to access one or more TCEs running on one or more server devices . For example multiple server devices may be used to execute code e.g. serially or in parallel and may provide respective results of executing the code to client device .

In some implementations client device and server device may be owned by different entities. For example an end user may own client device and a third party may own server device . In some implementations server device may include a device operating in a cloud computing environment. In this way front end applications e.g. a user interface may be separated from back end applications e.g. code execution .

Network may include one or more wired and or wireless networks. For example network may include a cellular network a public land mobile network PLMN a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network e.g. the Public Switched Telephone Network PSTN an ad hoc network an intranet the Internet a fiber optic based network a private network a cloud computing network and or a combination of these or other types of networks.

The number and arrangement of devices and networks shown in is provided as an example. In practice there may be additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than those shown in . Furthermore two or more devices shown in may be implemented within a single device or a single device shown in may be implemented as multiple distributed devices. Additionally or alternatively a set of devices e.g. one or more devices of environment may perform one or more functions described as being performed by another set of devices of environment .

Bus may include a component that permits communication among the components of device . Processor may include a processor e.g. a central processing unit CPU a graphics processing unit GPU an accelerated processing unit APU etc. a microprocessor and or any processing component e.g. a field programmable gate array FPGA an application specific integrated circuit ASIC etc. that interprets and or executes instructions and or that is designed to implement one or more computing tasks. In some implementations processor may include multiple processor cores for parallel computing. Memory may include a random access memory RAM a read only memory ROM and or another type of dynamic or static storage device e.g. a flash memory a magnetic memory an optical memory etc. that stores information and or instructions for use by processor .

Storage component may store information and or software related to the operation and use of device . For example storage component may include a hard disk e.g. a magnetic disk an optical disk a magneto optic disk a solid state disk etc. a compact disc CD a digital versatile disc DVD a floppy disk a cartridge a magnetic tape and or another type of computer readable medium along with a corresponding drive. In some implementations storage component may store TCE .

Input component may include a component that permits device to receive information such as via user input e.g. a touch screen display a keyboard a keypad a mouse a button a switch a microphone etc. . Additionally or alternatively input component may include a sensor for sensing information e.g. a global positioning system GPS component an accelerometer a gyroscope an actuator etc. . Output component may include a component that provides output information from device e.g. a display a speaker one or more light emitting diodes LEDs etc. .

Communication interface may include a transceiver like component e.g. a transceiver a separate receiver and transmitter etc. that enables device to communicate with other devices such as via a wired connection a wireless connection or a combination of wired and wireless connections. Communication interface may permit device to receive information from another device and or provide information to another device. For example communication interface may include an Ethernet interface an optical interface a coaxial interface an infrared interface a radio frequency RF interface a universal serial bus USB interface a Wi Fi interface a cellular network interface or the like.

Device may perform one or more processes described herein. Device may perform these processes in response to processor executing software instructions stored by a computer readable medium such as memory and or storage component . A computer readable medium is defined herein as a non transitory memory device. A memory device includes memory space within a single physical storage device or memory space spread across multiple physical storage devices.

Software instructions may be read into memory and or storage component from another computer readable medium or from another device via communication interface . When executed software instructions stored in memory and or storage component may cause processor to perform one or more processes described herein. Additionally or alternatively hardwired circuitry may be used in place of or in combination with software instructions to perform one or more processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

The number and arrangement of components shown in is provided as an example. In practice device may include additional components fewer components different components or differently arranged components than those shown in . Additionally or alternatively a set of components e.g. one or more components of device may perform one or more functions described as being performed by another set of components of device .

For example variable acc is shown as having an assigned data type of double a proposed signedness of signed a proposed word length of 16 a simulated minimum of 1.0045281391112986 and a simulated maximum of 1.035158756226056. In addition to simulated minimum and simulated maximum the dynamic range of variable acc may also be determined. For example during simulation a quantity for each of the most significant digits used by each of the values represented by acc may be totaled to determine the dynamic range of the significant digits.

Information associated with each variable may be used to generate a visualization such as the example implementation of . As shown in each column may represent a variable or an expression including one or more variables of code. Each column may include one or more shaded portions indicating a range of values represented by the variable. Each column may also include other indicators such as a range of an assigned data type of each variable an overflow indicator an underflow indicator and or other indicators of information associated with each variable.

For example column may represent variable acc from . As shown column has a first shaded portion a second shaded portion a third shaded portion and a fourth shaded portion each indicating ranges of values represented by variable acc during simulation of the code. A top of first shaded portion starts at which corresponds to 2 and a remainder of first shaded portion extends below 0 which may indicate that the values represented by acc are fractional values. For example significant digits below 0 represent values of 2 raised to a power of a negative number. As there are no shaded portions above 0 for column the values represented by acc in the example simulation may be numbers containing only fractional parts e.g. numbers between 1 and 1 exclusive .

In the example of first shaded portion is darker at the top and generally gets lighter at the bottom. This shading pattern may indicate that the values represented by acc more often use higher order significant digits than lower order significant digits. For example darker areas can indicate higher incidences of values as compared to lighter areas which can indicate fewer incidences of values. Second third and fourth shaded portions and may indicate various other significant digits used by values represented by acc . As the second third and fourth shaded portions are each below first shaded potion the lower shaded portions indicate use of less significant digits by the values represented by the variable. The gaps between the shaded portions may indicate more narrow ranges within the range of values represented by acc as some significant digits are not used by any of the values represented by acc .

In some implementations a range e.g. a representable range and or a dynamic range and or a precision of a data type assigned to a variable may be represented in the visualization. For example a dot or other indicator may show an upper and lower bound of a range of an assigned data type. An indicator may show the upper bound of a range of an assigned data type for each of the columns e.g. variables . Another indicator may show the lower bound of the range of the assigned data type for each of the columns. As shown indicator and indicator are similar in appearance. In other implementations indicator and indicator may have differences in appearance such as a different color shape size etc.

In some implementations overflow and or underflow information may be represented in the visualization. For example if a magnitude of values represented by a variable in a simulation exceeds an upper bound of a range of a data type assigned to the variable an overflow condition may occur. For example a variable may be unable to accurately represent a value if a variable is assigned too few bits for storing a value with a large magnitude. In such a case as in column the shaded portion in this case first shaded portion may exceed an upper bound indicator. In addition the visualization may include an overflow indicator such as an arrow at the top of first shaded portion .

Similarly an underflow condition may occur if a magnitude of a value represented by a variable is too small for a variable to accurately represent with a range of a data type assigned to the variable. Again referring to column third shaded portion and fourth shaded portion are positioned below a lower bound indicator for column . Thus an underflow condition may be occurring with variable acc as some of the values represented by acc require more bits than currently assigned by the data type to be accurately represented. The visualization may indicate the underflow condition with an underflow indicator such as an arrow extending below fourth shaded portion .

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to . For example indicators such as the upper and lower bound indicators and overflow and underflow indicators may be presented differently than shown in the examples. Further other indicators may be used to provide additional or different information associated with each variable such as a maximum value represented by a variable a machine epsilon value for a variable etc. In some implementations the indicators may be toggled on and off e.g. via a received input to show and hide some or all of the indicators. Alternatively or additionally the range of values for each variable may be presented differently. For example the range of values for each variable may be presented as a heat map or a color chart rather than a histogram. Further while the histograms use shading in other techniques for indicating range can be used such as borders fill patterns icons labels etc.

In some implementations variables and or expressions may be grouped so that each column represents more than one variable such as a function or other portion of code. In some implementations the visualization may allow a user to collapse and expand columns to represent different numbers of variables. Such collapsing and expanding of columns may be nested to provide a hierarchy of variables such as variables contained in a function which are in turn nested in a project file. Other such hierarchies and or relations may be used to group variables for visualization.

As shown in process may include obtaining code block and executing the code block . For example a user may write code using client device or client device may receive code to be analyzed e.g. from a file system a remote device etc. . Client device may execute the code such as by executing a set of test cases on the code in a testing environment or by executing the code multiple times in a simulation environment. In some embodiments the code may include different versions of a portion of code. Alternatively or additionally client device may execute the code in a production environment rather than in a testing environment.

In some embodiments client device may execute the code using data types different from the data types assigned to some or all of the variables. For example a particular variable may be assigned an integer data type. Client device may execute the code using a double precision data type for the particular variable. Using a different data type may provide additional information such as overflow and underflow information. For example executing the code using the integer data type for the particular variable may result in only integer values being stored in the particular variable even though non integer values may be assigned to the particular variable.

As further shown in process may include determining variables based on analysis of the code block . For example client device may determine variables in all or a portion of the code through a static analysis of the code e.g. by analyzing a syntax of the code or deriving ranges based on the syntax of the code. Alternatively or additionally variables may be determined during execution of the code. In some implementations client device may also determine expressions which may include one or more variables in the code.

In some embodiments client device may analyze the code using data types different from the data types assigned to some or all of the variables. Such a process may be similar to the process described above with regard to executing the code using different data types from those assigned to the variables.

As further shown in process may include determining values of variables based on execution and or analysis of the code block and determining a range of values for each variable block . For example client device may determine for each variable different values represented by the variable throughout an execution simulation of the code. Based on the values that are represented by the variable client device may determine a range of the values for the variable including information such as a representable range of the variable and a dynamic range of the variable. As described above the range of the values for the variable may be based on positions of significant digits used by the values such as most significant digits least significant digits and or all significant digits. The dynamic range may be determined by the highest order and lowest order significant digits used by the values represented by the variable. Client device may determine the ranges for variables and or expressions in a portion or entirety of the code. In some embodiments based on the values that are represented by the variable client device may determine additional or alternative characteristics of the variables. For example client device may determine a precision of the variables a slope and bias of the variables and other such characteristics of the variables.

As further shown in process may include counting a quantity of occurrences of each significant digit in the range that is used to represent the values block . For example client device may store a count for each significant digit used by a variable to store a value represented by each variable. As a value is represented by the variable client device may increment the count for the significant digits that is the most significant digit used by the value represented by the variable. In some embodiments client device may increment the count for each significant digit that is the least significant digit used by each value represented by the variable. In some embodiments client device may increment the count for the all the significant digits used by the values represented by the variable.

As further shown in process may include generating a visualization that displays the quantity of occurrences of each significant digit in the range for each variable block . For example as described above in client device may generate a visualization that includes histograms for each variable. The histograms may be shaded darker to show greater quantities of occurrences of significant digits from the values represented by the variable. Each variable may be presented in a separate column.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

A user may interact with the visualization to manipulate a display of data in the visualization. The user may provide input to cause TCE to sort and or manipulate the visualization to change the ordering of columns to include different subsets of variables etc. For example shows a visualization of variables sorted by dynamic range. Columns to the left of the visualization e.g. columns indicated by reference number represent variables that have a greater dynamic range of values than columns to the right of the visualization e.g. columns indicated by reference number . For example a leftmost column shows a shaded portion starting from right below 0 as well as a shaded portion below shaded portion . Each column to the right of leftmost column shows shaded portions that extend over a range that is less than that of leftmost column as shown using shaded regions with a smaller height.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to . For example the visualization may be sorted by data type or any other characteristic of the variables and or expressions. The visualization may also be sorted based on test cases used in executing the code. The visualization may also be sorted based on order of occurrence of the variables such as in the code and or during execution. The visualization may also be sorted based on analysis of the code such as excluding variables that have been proven error free. The visualization may also be sorted to include other operations and or functions such as mathematical functions or other data processing functions such as concatenation for string variables.

In some embodiments the manipulation and sorting may be implemented by providing interfaces on the visualization for user input. For example the user may be able to select through menu options or click on e.g. with a mouse axes or table keys of the visualization to sort the columns.

As shown in process may include providing a visualization that displays a quantity of occurrences of significant digits for representing values for each variable block . For example the visualization may include histograms such as example implementation described in . The visualization may be provided by generating the visualization from analyzing a portion or entirety of code and presenting the visualization for display via a user interface. In some implementations information may be received about the variables and or expressions rather than the portion or entirety of code. For example data structures including information associated with the variables and simulated values may be received and the visualization may be generated from the received data structures. In some implementations client device may receive the visualization and provide the visualization for presentation.

As further shown in process may include receiving an instruction to sort the visualization block . For example client device may sort the visualization based on similar characteristics. Characteristics may include features based on values represented by variables of the visualization such as a dynamic range of the values for the variables a representable range of the variables a precision of the variables a magnitude of values represented by the variables as described above and or other features. Characteristics may also include features based on the variables and or expressions such as a location in the code where the variable is found e.g. variables in a function a file a workspace etc. whether the expression includes a particular operation e.g. addition subtraction etc. data types assigned to the variables and or other features. Sorting may also include filtering for example showing a subset of the variables e.g. based on characteristics such as variables including an overflow etc. 

As further shown in process may include sorting variables based on the received instruction block . Sorting variables may include changing an order of histograms columns or other representations of the variables in the visualization. Sorting may also include selecting a subset of variables to display on the visualization. Client device may sort the visualization on more than one characteristic such as a primary sort order based on a first characteristic and then a secondary sort order based on a second characteristic. Client device may also sort the visualization by selecting a subset of variables based on a first characteristic e.g. magnitude data type dynamic range etc. and ordering the variables based on a second characteristic e.g. a characteristic other than the first characteristic .

As further shown in process may include updating and providing the visualization based on sorting the variables block . The visualization may also be updated to indicate the criteria used in sorting the variables and provide one or more interfaces for the user to further or differently sort or manipulate the visualization.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

Client device may provide an input mechanism that allows the user to modify the code by interacting with the visualization. For example the user may select and drag an indicator that identifies a most significant digit allowed by a data type to match or be closer to an indicator that identifies a most significant digit used by values represented by a variable. When the user modifies a location of indicator on the visualization client device may modify the underlying code to reflect the new location of indicator .

For example client device may modify a portion of the code to assign a different data type and or word length to the variable. In some implementations client device may provide an input mechanism for the user to modify some or all of indicators of most significant digits allowed. For example client device may provide a mechanism for the user to match indicators with indicators of most significant digit. used Additionally or alternatively client device may provide a mechanism for the user to set indicators a specified distance e.g. one bit a percentage of used bits halfway between a current most significant digit allowed and used a closest of predetermined set points etc. from indicators . In some implementations client device may provide similar interfaces for a least significant digit allowed and used for the variables as well as other characteristics of the variables.

As indicated above are provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include providing a visualization that displays a quantity of occurrences of significant digits of values for each variable block . For example the visualization may include histograms such as example implementation described in .

As further shown in process may include detecting an interaction with the visualization block . For example client device may provide an input mechanism that permits a user to interact with the visualization and client device may detect an interaction with the input mechanism. For example interactions may include selecting clicking with a mouse or pointer dragging moving etc. an indicator a column or another interface on the visualization. For example an interaction with the visualization may include selecting and dragging an upper bound indicator grouping multiple columns of the visualization etc.

As further shown in process may include receiving an instruction to assign or modify one or more characteristics of one or more variables block . For example the one or more instructions may be received based on the interaction with the visualization. For example a repositioning of a lower bound indicator may indicate an instruction to modify a characteristic of a variable such as modifying a data type and or increasing or decreasing a word size of a variable represented by a column including the repositioned lower bound indicator. As another example receiving an instruction may include receiving a selection of one or more representations of variables in the interface along with a selection of a menu option indicating an assignment or modification of a characteristic of the selected one or more variables.

As further shown in process may include assigning or modifying one or more characteristics of one or more variables based on the received instruction block . Client device may assign or modify one or more characteristics of the one or more variables for example by changing code that corresponds to the one or more variables. For example based on an instruction received to modify a data type of a variable client device may change one or more lines of code that initially assign a data type to the variable so that the variable is assigned the data type as indicated by the received instruction. In some implementations assigning or modifying one or more characteristics of one or more variables may include modifying tables and or other data structures associated with the one or more variables. For example data types and or other characteristics of the one or more variables may be stored in a table which may be modified based on the received instruction.

As further shown in process may include updating and providing the visualization based on the assigning or modifying block . Client device may update the visualization to reflect the assigned or modified one or more characteristics of the one or more variables and provided for display to the user.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

For example a column may represent an expression such as acc b j z k . A user may interact with column such as by selecting e.g. double clicking column . Based on the interaction with column a code window of the interface may display a code portion that includes the expression. As shown in example implementation client device may highlight code portion .

In some implementations client device may hide code window until the user interacts with a column to request a display of related underlying code. In some implementations client device may display multiple instances of the expression in different code portions. For example the user may interact with the column again in a similar or different manner to jump to a next occurrence of the expression. Alternatively or additionally the user may interact with an input mechanism so the user may jump to a next occurrence of the expression. Alternatively or additionally code window may show multiple code portions simultaneously for example by splitting code window into multiple partitions.

In some implementations the user may further interact with a column such as described above with reference to . Client device may update code window to reflect modifications to the code based on interactions by the user with the column. For example the user may assign or modify a data type by interacting with a corresponding column. Code window may update to display changes in code that reflect the assigning or modifying of the data type. In some implementations client device may highlight or otherwise accentuate the changes in the code to indicate where the changes have been made. In some implementations interactions by the user with the column may affect portions of code not currently shown in the code window . In some implementations client device may update other affected portions of code and indicate such changes have been made for example by providing an indicator that other portions of code may have been affected and or displaying the other portions of code.

In some implementations the user may change code directly in code window . Client device may update corresponding portions of the visualization to reflect the changes in the code. Client device may highlight or otherwise accentuate changes to corresponding portions of the visualization to indicate the changes.

As indicated above is provided merely as an example. Other examples are possible and may differ from what was described with regard to .

As shown in process may include providing a visualization that displays a quantity of occurrences of significant digits of values for each variable block . For example the visualization may include histograms such as example implementation described in .

As further shown in process may include detecting an interaction with the visualization block . Interactions with the visualization may include user input received on the visualization. For example interactions may include selecting clicking with a mouse or pointer double clicking dragging moving etc. of indicators columns or other input mechanisms on the visualization.

As further shown in process may include receiving one or more instructions to display a portion of code associated with a portion of the visualization block . The one or more instructions received may be based on the interaction with the visualization detected. The portion of code associated with the portion of the visualization may include an occurrence of a variable or expression represented by the portion of the visualization. In some implementations the portion of code may be otherwise associated with the portion of the visualization. For example an interaction with an overflow indicator on the visualization may instruct client device to display a portion of code where the overflow occurs.

As further shown in process may include displaying the portion of the code block . As described above the portion of code may be displayed in a code window. In some implementations client device may show the portion of code in a text box for example in response to a cursor hovering over a portion of the visualization. Alternatively or additionally other such displays may be implemented to display the portion of code associated with the portion of the visualization.

Although shows example blocks of process in some implementations process may include additional blocks fewer blocks different blocks or differently arranged blocks than those depicted in . Additionally or alternatively two or more of the blocks of process may be performed in parallel.

The foregoing disclosure provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above disclosure or may be acquired from practice of the implementations.

As used herein the term component is intended to be broadly construed as hardware firmware and or a combination of hardware and software.

Program code sometimes referred to herein as code is to be broadly interpreted to include text based code that may not require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog code Java code another type of hardware and or software based code that may be compiled and or synthesized etc. binary code that may be executed e.g. executable files that may be directly executed by an operating system bitstream files that may be used to configure an FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files Octave files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. source code e.g. readable by a human machine code e.g. readable by a machine graphical models or the like. In some implementations code may include different combinations of the above identified classes of code e.g. text based code binary code text files source code machine code etc. . Additionally or alternatively code may include code generated using a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that may be used to express problems and or solutions using mathematical notations. Additionally or alternatively code may be of any type such as a function a script an object etc.

Certain user interfaces have been described herein and or shown in the figures. A user interface may include a graphical user interface a non graphical user interface a text based user interface etc. A user interface may provide information for display. In some implementations a user may interact with the information such as by providing input via an input component of a device that provides the user interface for display. In some implementations a user interface may be configurable by a device and or a user e.g. a user may change the size of the user interface information provided via the user interface a position of information provided via the user interface etc. . Additionally or alternatively a user interface may be pre configured to a standard configuration a specific configuration based on a type of device on which the user interface is displayed and or a set of configurations based on capabilities and or specifications associated with a device on which the user interface is displayed.

TCE may provide a computing environment that may allow for example a user to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business biology finance etc. TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements A hello A int32 1 2 A 1.1 2.2 3.3 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE performs matrix and or vector computations that may be used for data analysis data visualization application development simulation modeling and or algorithm development. These matrix and or vector formulations may be used in many areas such as but not limited to statistics image processing signal processing control design life sciences modeling financial modeling discrete event analysis and or design and state based analysis and or design.

TCE provides mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . Embodiments of TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler in an exemplary embodiment.

Examples of TCEs and or TCE like applications that may be adapted to implement one or more embodiments of the invention may include but are not limited to applications that implement languages such as the MATLAB environment available from The MathWorks Inc. GNU Octave from the GNU Project Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Scilab from The French Institution for Research in Computer Science and Control INRIA .

A code generator can generate code from a model. In an embodiment the code generator may receive code in a first format and may transform the code from the first format into a second format. In an embodiment the code generator can generate source code assembly language code binary code interface information configuration information performance information etc. from at least a portion of a graphical model.

For example the code generator can generate C C SystemC Java etc. from the graphical model. Embodiments of the code generator can further generate Unified Modeling Language UML based representations and or extensions from some or all of a graphical model e.g. System Modeling Language SysML Extensible Markup Language XML Modeling and Analysis of Real Time and Embedded Systems MARTE Hardware Description Language HDL Automotive Open System Architecture AUTOSAR etc. .

It will be apparent that systems and or methods described herein may be implemented in different forms of hardware firmware or a combination of hardware and software. The actual specialized control hardware or software code used to implement these systems and or methods is not limiting of the implementations. Thus the operation and behavior of the systems and or methods were described herein without reference to specific software code it being understood that software and hardware can be designed to implement the systems and or methods based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of possible implementations. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one claim the disclosure of possible implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Furthermore as used herein the term set is intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Also as used herein the terms has have having or the like are intended to be open ended terms. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

