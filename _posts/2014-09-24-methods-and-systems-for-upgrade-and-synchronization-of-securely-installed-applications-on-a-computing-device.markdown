---

title: Methods and systems for upgrade and synchronization of securely installed applications on a computing device
abstract: Embodiments of the present disclosure provide for upgrades and synchronization of applications installed on a device, such as a mobile device. In one embodiment, a device may include applications purchased and downloaded via a content management system. The device maintains a list or database of applications that are authorized for each device. This list is also replicated in a remote cache that is maintained by an archive host. The device may then synchronize and upgrade these applications across multiple platforms, such as one or more computers that can be coupled to the device or the archive host. The archive host allows for files of the application be provided back to the device. Upon installation, the device can then confirm the authorization and identity of the newly installed application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378340&OS=09378340&RS=09378340
owner: Apple Inc.
number: 09378340
owner_city: Cupertino
owner_country: US
publication_date: 20140924
---
This application is a divisional of U.S. application Ser. No. 12 757 009 filed Apr. 8 2010 now U.S. Pat. No. 8 849 717 entitled Methods and Systems for Upgrade and Synchronization of Securely Installed Applications on a Computing Device which claims the benefit of U.S. Provisional Application No. 61 224 417 filed Jul. 9 2009 entitled Methods and Systems for Archiving and Restoring Securely Installed Applications on a Computing Device and U.S. Provisional Application No. 61 224 420 filed Jul. 9 2009 entitled Methods and Systems for Upgrade and Synchronization of Securely Installed Applications on a Computing Device the contents of which are incorporated herein by reference in their entirety for all purposes.

This application relates to the installation of software on a computing device. More particularly the application relates to the secure installation of software.

Computing devices especially mobile devices have advanced dramatically and now commonly allow for the installation of new applications to extend the functionality of the device. However this openness and variety of available applications brings security risks and management issues such as the risk of malware as has been seen in the world of personal computers. These risks can be especially important to enterprises that allow its employees or users to use their mobile computing devices for business or work purposes.

To deal with these risks many mobile device platforms have introduced various security architectures. Typically in these security architectures the mobile device platform is protected based on granting privileges to software usually based on code signing. The access control decision to assign privileges to software processes is based either on code signing or on explicit user approval or a combination thereof.

Unfortunately these security features and the large number of applications can make it difficult for a user or enterprise to maintain their mobile computing device in proper working order. For example if a certain piece of software becomes obsolete or has been upgraded it can be difficult to efficiently distribute the upgrade. Designing the user interaction for upgrade or synchronization of applications without hampering usability and security can be tedious. Accordingly it may be desirable to provide methods and systems that allow for the easy management and upgrade of securely installed software.

Embodiments of the present disclosure provide for upgrades and synchronization of applications installed on a device such as a mobile device. In one embodiment a device may include applications purchased and downloaded via a content management system. The device maintains a list or database of applications that are authorized for each device. This list is also replicated in a remote cache that is maintained by an archive host.

The device may then synchronize and upgrade these applications across multiple platforms such as one or more computers that can be coupled to the device or the archive host. The archive host can provide a package of files that may include the code or other data back to the device. The device may then confirm the authorization and identity of the newly installed application.

Alternatively when applications have been upgraded the device may update the list maintained by the device and or the archive host may update the remote application cache. Applications across multiple devices may be efficiently upgraded as a consequence. Accordingly the various embodiments allow applications to be installable multiple times while maintaining the security of the installation.

In some embodiments in order to perform upgrades and synchronization securely the device may partition its application storage into a plurality of partitions. The multiple partitions allow the device to isolate the different versions of the application files and if needed swap between versions of an application. Furthermore using partitions and dynamic containers software applications can be maintained very simply by relying on installation and uninstallation rather than more complex logic.

When installing an application in a partition an installer configures one or more secure containers for the software and installs the software exclusively in these containers. In some embodiments the installer randomly determines the identifiers for the containers. These identifiers remain unknown to the software to be installed. Thus an installation framework maintains the correspondence between an application its partitions and its container.

For example each software application may have a unique identifier. This unique identifier may be included in the installation request or also determined by the installer. The installer then determines a randomly assigned identifier such as a directory name for one or more containers on the device in which the application will be installed. The containers may be a specific area of storage in a partition on the device or a directory defined on the device. Data specific to the software application including code storage documents preferences and other libraries are stored and restricted to these dynamic containers.

After installation an installation framework performs a bind process to correlate the randomly assigned identifier with the unique identifier of the application. The installation framework also manages the execution of the application. For example when the application is launched the installation framework performs a search for that application s randomly assigned identifier and locates the application s container. The application is then allowed to execute within its container. During execution the software application may also be restricted in various ways by the installation framework to its dynamic containers. The installer may also work with a trusted operating system component such as the kernel to help enforce the container restrictions.

As noted the installer may use randomly assigned identifiers for the containers which are unknown to the software being installed. The random identifiers may be based on various functions such as a hash function and the like. In addition the random identifiers for the containers may be based on various unique attributes of the software. In some embodiments the installer stores this information only in a trusted cache for access by the installation framework.

Moreover if desired the use of random identifiers for containers may be used in conjunction with other security mechanisms. For example the operating system of the computing device may be configured to determine whether the code has been authorized by a trusted authority.

For example a trusted authority may authorize software for installation and or execution by digitally signing the software. As is known in the art a digital signature uses public key cryptography to ensure the integrity of data. If the code is authorized and verified as such it may be generally executed without any further system or user interaction if the code is not authorized its ability to be executed on the computing device may be restricted or even prevented.

In order to help explain the embodiments of these and other concepts are provided in this description. shows an example of a computing environment in which the embodiments may be implemented. and illustrate an exemplary mobile device. illustrates a conceptual block diagram of an environment on the computing device that supports secure installation of software. illustrates an exemplary process flow for upgrading and synchronizing securely installed applications. And illustrates an exemplary process for executing a securely installed application. These figures will now be further described below beginning with reference to .

For purposes of illustration the present disclosure provides as an example a mobile computing device that is capable of securely installing applications. The mobile computing device may obtain these applications from an online source such as Apple s iTunes App Store. However one skilled in the art will recognize that embodiments of the present invention are not limited to mobile devices.

Referring now to an example of an environment suitable for practicing various embodiments is provided. As shown system may comprise a source for the software and or program code to be installed a network a set of computing devices an archive host and an application cache . These entities and components will now be further described.

Source serves as the source of the software program code to be installed. For example source can be a website or service that is accessible to the computing devices . In some embodiments source is an application that runs on the computing device and makes source accessible via network .

For example the source may be a website or service which allows users of the computing devices to browse and download applications from an online content and media store. Such media stores may include stores such as Apple s iTunes Store App Catalog by Palm Inc. Android Market Windows Marketplace for Mobile by Microsoft the Ovi store by Nokia and BlackBerry App World by Research in Motion.

The applications on source may be available to purchase or free of charge depending on the application. The applications can be downloaded directly to the computing devices as will be further described.

Network provides a communication infrastructure between computing devices and source . Network may be any type of network such as a wide area network metropolitan area network or local area network. In addition network may comprise both wired and wireless networks.

In some embodiments network may be implemented on the Internet which is the well known global network of interconnected computers enabling users to share information. The components and protocols employed by network are well known to those skilled in the art.

Computing devices may be any computing device used by a user. Computing devices may be mobile computing devices such as mobile telephones mobile smart phones or some other type of mobile device. Computing devices may be configured to run an operating system that requires some or all of its software and code to have been securely installed. Thus if software is delivered or installed in an unauthorized state to computing devices the devices may be unable to fully execute the code instructions included in the software because they have not been properly installed.

Computing devices may be any number of different types of computing devices including desktop computers laptop computers handheld computers personal digital assistant PDA devices mobile telephone media play device and the like. For purposes of illustration various embodiments related to a mobile device are provided. However one skilled in the art will recognize that the embodiments can be applied to any type of computing device.

Archive host provides a storage location for program code and related data for applications installed on mobile devices . In particular archive host serves as a host that preserves and provides access to software that has been installed on mobile devices . For example when an application has been purchased from source and installed source may also archive a copy of the application to archive host . The archive copy may comprise all the files for an application such as program code data and other documents or may comprise a portion of the files such as only the data or documents. Archive host may be implemented on a server using well known components of hardware or software. In some embodiments the archive copies of applications are stored in the form of the well known .zip file format. Of course any type of file format for archives may be employed.

In some embodiments the archive copy may be packaged in installable form to allow for easy reinstallation or upgrade of the application. The contents of the package may be configured based on various criteria such as user configuration settings settings of archive host settings requested by source etc.

In some embodiments archive host may employ various security features such as secured logins authentication and encryption in order to protect its information. For example archive host may restrict access of a mobile device to information corresponding to its device identifier. As another example an entity may be allowed to access information for only those mobile devices to which it manages or to only those devices having software signed by that entity. Those skilled in the art will recognize that a variety of security policies and features may be employed to protect archive host .

Application cache maintains a list or database of applications that are authorized for each of mobile devices . For example application cache may comprise respective lists or mappings indicating various aspects of the configuration of a mobile device such as an identifier for mobile device applications installed version information devices that are related to mobile device and the like. In other words any type of information that indicates the state and configuration of software or firmware installed on a mobile device may be maintained in cache . Those skilled in the art will recognize that application cache may employ various lists data structures and databases to maintain this information.

In some implementations the mobile device includes a touch sensitive display . The touch sensitive display can be implemented with liquid crystal display LCD technology light emitting polymer display LPD technology or some other display technology. The touch sensitive display can be sensitive to haptic and or tactile contact with a user.

In some implementations the touch sensitive display can comprise a touch sensitive display . A touch sensitive display can for example process multiple simultaneous touch points including processing data related to the pressure degree and or position of each touch point. Such processing facilitates gestures and interactions with multiple fingers chording and other interactions. Other touch sensitive display technologies can also be used e.g. a display in which contact is made using a stylus or other pointing device. Some examples of multi touch sensitive display technology are described in U.S. Pat. Nos. 6 323 846 6 570 557 6 677 932 and 6 888 536 each of which is incorporated by reference herein in its entirety.

In some implementations the mobile device can display one or more graphical user interfaces on the touch sensitive display for providing the user access to various system objects and for conveying information to the user. In some implementations the graphical user interface can include one or more display objects . In the example shown the display objects are graphic representations of system objects. Some examples of system objects include device functions applications windows files alerts events or other identifiable system objects.

In some implementations the mobile device can implement multiple device functionalities such as a telephony device as indicated by a Phone object an e mail device as indicated by the Mail object a map devices as indicated by the Maps object a Wi Fi base station device not shown and a network video transmission and display device as indicated by the Web Video object . In some implementations particular display objects e.g. the Phone object the Mail object the Maps object and the Web Video object can be displayed in a menu bar . In some implementations device functionalities can be accessed from a top level graphical user interface such as the graphical user interface illustrated in . Touching one of the objects or can for example invoke a corresponding functionality.

In some implementations the mobile device can implement a network distribution functionality. For example the functionality can enable the user to take the mobile device and provide access to its associated network while traveling. In particular the mobile device can extend Internet access e.g. WiFi to other wireless devices in the vicinity. For example mobile device can be configured as a base station for one or more devices. As such mobile device can grant or deny network access to other wireless devices.

In some implementations upon invocation of a device functionality the graphical user interface of the mobile device changes or is augmented or replaced with another user interface or user interface elements to facilitate user access to particular functions associated with the corresponding device functionality. For example in response to a user touching the Phone object the graphical user interface of the touch sensitive display may present display objects related to various phone functions likewise touching of the Mail object may cause the graphical user interface to present display objects related to various e mail functions touching the Maps object may cause the graphical user interface to present display objects related to various maps functions and touching the Web Video object may cause the graphical user interface to present display objects related to various web video functions.

In some implementations the top level graphical user interface environment or state of can be restored by pressing a button located near the bottom of the mobile device . In some implementations each corresponding device functionality may have corresponding home display objects displayed on the touch sensitive display and the graphical user interface environment of can be restored by pressing the home display object.

In some implementations the top level graphical user interface can include additional display objects such as a short messaging service SMS object a Calendar object a Photos object a Camera object a Calculator object a Stocks object an Address Book object a Media object a Web object a Video object a Settings object and a Notes object not shown . Touching the SMS display object can for example invoke an SMS messaging environment and supporting functionality likewise each selection of a display object and can invoke a corresponding object environment and functionality.

Additional and or different display objects can also be displayed in the graphical user interface of . For example if the device is functioning as a base station for other devices one or more connection objects may appear in the graphical user interface to indicate the connection. In some implementations the display objects can be configured by a user e.g. a user may specify which display objects are displayed and or may download additional applications or other software that provides other functionalities and corresponding display objects.

In some implementations the mobile device can include one or more input output I O devices and or sensor devices. For example a speaker and a microphone can be included to facilitate voice enabled functionalities such as phone and voice mail functions. In some implementations an up down button for volume control of the speaker and the microphone can be included. The mobile device can also include an on off button for a ring indicator of incoming phone calls. In some implementations a loud speaker can be included to facilitate hands free voice functionalities such as speaker phone functions. An audio jack can also be included for use of headphones and or a microphone.

In some implementations a proximity sensor can be included to facilitate the detection of the user positioning the mobile device proximate to the user s ear and in response to disengage the touch sensitive display to prevent accidental function invocations. In some implementations the touch sensitive display can be turned off to conserve additional power when the mobile device is proximate to the user s ear.

Other sensors can also be used. For example in some implementations an ambient light sensor can be utilized to facilitate adjusting the brightness of the touch sensitive display . In some implementations an accelerometer can be utilized to detect movement of the mobile device as indicated by the directional arrow . Accordingly display objects and or media can be presented according to a detected orientation e.g. portrait or landscape. In some implementations the mobile device may include circuitry and sensors for supporting a location determining capability such as that provided by the global positioning system GPS or other positioning systems e.g. systems using Wi Fi access points television signals cellular grids Uniform Resource Locators URLs . In some implementations a positioning system e.g. a GPS receiver can be integrated into the mobile device or provided as a separate device that can be coupled to the mobile device through an interface e.g. port device to provide access to location based services.

In some implementations a port device e.g. a Universal Serial Bus USB port or a docking port or some other wired port connection can be included. The port device can for example be utilized to establish a wired connection to other computing devices such as other communication devices network access devices a personal computer a printer a display screen or other processing devices capable of receiving and or transmitting data. In some implementations the port device allows the mobile device to synchronize with a host device using one or more protocols such as for example the TCPIIP HTTP UDP and any other known protocol.

The mobile device can also include a camera lens and sensor . In some implementations the camera lens and sensor can be located on the back surface of the mobile device . The camera can capture still images and or video.

The mobile device can also include one or more wireless communication subsystems such as an 802.11b g communication device and or a Bluetooth communication device . Other communication protocols can also be supported including other 802.x communication protocols e.g. WiMax Wi Fi 3G code division multiple access CDMA global system for mobile communications GSM Enhanced Data GSM Environment EDGE etc.

In some implementations each of one or more system objects of device has a set of system object attributes associated with it and one of the attributes determines whether a display object for the system object will be rendered in the top level graphical user interface. This attribute can be set by the system automatically or by a user through certain programs or system functionalities as described below. shows an example of how the Notes object not shown in is added to and the Web Video object is removed from the top graphical user interface of device e.g. such as when the attributes of the Notes system object and the Web Video system object are modified .

Sensors devices and subsystems can be coupled to the peripherals interface to facilitate multiple functionalities. For example a motion sensor a light sensor and a proximity sensor can be coupled to the peripherals interface to facilitate the orientation lighting and proximity functions described with respect to . Other sensors can also be connected to the peripherals interface such as a positioning system e.g. GPS receiver a temperature sensor a biometric sensor or other sensing device to facilitate related functionalities.

A camera subsystem and an optical sensor e.g. a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor can be utilized to facilitate camera functions such as recording photographs and video clips.

Communication functions can be facilitated through one or more wireless communication subsystems which can include radio frequency receivers and transmitters and or optical e.g. infrared receivers and transmitters. The specific design and implementation of the communication subsystem can depend on the communication network s over which the mobile device is intended to operate. For example a mobile device can include communication subsystems designed to operate over a GSM network a GPRS network an EDGE network a Wi Fi or WiMax network and a Bluetooth network. In particular the wireless communication subsystems may include hosting protocols such that the mobile device may be configured as a base station for other wireless devices.

An audio subsystem can be coupled to a speaker and a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and telephony functions.

The I O subsystem can include a touch screen controller and or other input controller s . The touch screen controller can be coupled to a touch screen . The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen .

The other input controller s can be coupled to other input control devices such as one or more buttons rocker switches thumbwheel infrared port USB port and or a pointer device such as a stylus. The one or more buttons not shown can include an up down button for volume control of the speaker and or the microphone .

In one implementation a pressing of the button for a first duration may disengage a lock of the touch screen and a pressing of the button for a second duration that is longer than the first duration may turn power to the mobile device on or off. The user may be able to customize a functionality of one or more of the buttons. The touch screen can for example also be used to implement virtual or soft buttons and or a keyboard.

In some implementations the mobile device can present recorded audio and or video files such as MP3 AAC and MPEG files. In some implementations the mobile device can include the functionality of an MP3 player such as an iPod . The mobile device may therefore include a 32 pin connector that is compatible with the iPod . Other input output and control devices can also be used.

The memory interface can be coupled to memory . The memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks. The operating system may include instructions for handling basic system services and for performing hardware dependent tasks. In some implementations the operating system can be a kernel e.g. UNIX kernel .

The memory may also store communication instructions to facilitate communicating with one or more additional devices one or more computers and or one or more servers. The memory may include graphical user interface instructions to facilitate graphic user interface processing sensor processing instructions to facilitate sensor related processing and functions phone instructions to facilitate phone related processes and functions electronic messaging instructions to facilitate electronic messaging related processes and functions web browsing instructions to facilitate web browsing related processes and functions media processing instructions to facilitate media processing related processes and functions GPS Navigation instructions to facilitate GPS and navigation related processes and instructions camera instructions to facilitate camera related processes and functions and or other software instructions to facilitate other processes and functions e.g. access control management functions. The memory may also store other software instructions not shown such as web video instructions to facilitate web video related processes and functions and or web shopping instructions to facilitate web shopping related processes and functions. In some implementations the media processing instructions are divided into audio processing instructions and video processing instructions to facilitate audio processing related processes and functions and video processing related processes and functions respectively. An activation record and International Mobile Equipment Identity IMEI or similar hardware identifier can also be stored in memory .

Each of the above identified instructions and applications can correspond to a set of instructions for performing one or more functions described above. These instructions need not be implemented as separate software programs procedures or modules. The memory can include additional instructions or fewer instructions. Furthermore various functions of the mobile device may be implemented in hardware and or in software including in one or more signal processing and or application specific integrated circuits.

Installer is a program or process that installs files such as applications drivers or other software on computing device . In some embodiments installer is configured to read and analyze the contents of a software package to be installed such as a software package from source .

A software package from source may have a specific format and information that is used by installer . In particular a software package may include the software s full name a unique identifier for the software a description of its purpose version number vendor checksum and a list of dependencies necessary for the software to run properly. Upon installation installer may also store metadata about the software.

In addition the installer may be interfaced based on a predetermined application programming interface API . In one embodiment the API comprises functions to install an application uninstall an application archive an application and list installed applications. The API can also provide functions that instruct installer to verify application installation and access restrictions at run time. In some embodiments the API for the installer may provide primitives for these functions via a trusted portion of the operating system such as the kernel .

Operating system generally serves as an interface between hardware and the user. In particular operating system may be responsible for the management and coordination of activities and the sharing of the resources of the computing device . Operating system primarily acts as a host for applications and thus includes instructions that handle the details of the operation of the hardware of the computing device .

In addition operating system may offer a number of services to application programs and users. The applications running on computing device may access these services through APIs or system calls. For example by calling an API function an application can request a service from the operating system pass parameters and receive the results of the operation.

In some embodiments operating system may be like operating system shown in . Accordingly operating system may be an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks.

Kernel is the central trusted component of operating system . The functions of kernel responsibilities include managing the resources such as the resources shown in and . In particular kernel provides access to resources such as the memory processor s and I 0 subsystems of computing device . In general kernel may employ API system calls and inter process communications to perform its function.

Trusted cache is a temporary storage area where frequently accessed data such as randomly assigned identifiers for containers can be stored for rapid access. For example cache may be implemented in memory to of computing device . Furthermore trusted cache may be maintained in a trusted space of memory in order to secure its information. In some embodiments access to trusted cache may be limited to certain components such as kernel .

Installation framework is a library file that controls how applications are securely installed on the computing device and the management of the securely installed applications. In some embodiments the installation framework restricts where and how applications can be installed on the computing device . For example the installation framework may contain supporting programs libraries or references to other files.

Storage may be any data storage device such as a hard disk memory optical disk etc. for computing device . In some embodiments information is stored in storage based on a known file system and directory structure. Such file systems and directory structures are known to those skilled in the art.

As shown storage may comprise multiple partitions such as partitions and depicted in . Partitioning of storage allows for the protection and isolation of the files associated with the applications. For example a first version of the application may be stored in partition but a second version or upgrade of the application may then be stored in partition . This also allows for securely installed applications to continue to be installed in dynamic containers like containers which are self contained. Such dynamic containers are further described below.

One skilled in the art will recognize that device may comprise any number of partitions of various sizes and configurations. Furthermore the use of partitions in storage allows applications to be upgraded independently of the upgrade processes used elsewhere on device . For example applications securely installed on device may be upgraded without having to use the upgrade processes of operating system .

Within each partition the various embodiments may employ various file systems and directories. In some embodiments the file systems employ directories having randomly assigned identifiers or names which are dynamic containers for an application. In particular these random identifiers provide a level of indirection that helps allow the installation framework control the installation and execution of software within its container. The random identifiers are unknown to the application itself and known only to the installation framework . This mechanism provides the operating system a point of control that ensures the behavior of an application s installation and execution.

Containers refer to any collection of resources that are used store the program code of a software application and used by the application running on computing device such as disk space on storage and or memory space in memory . In some embodiments containers may comprise a directory that refers to a specific area of storage on the device . Data specific to the software application including code storage documents preferences and other libraries are stored and restricted to the containers .

In order to enhance security containers can employ randomly assigned identifiers such as random directory names that are unknown to the application. One advantage among others is that the application is prevented from becoming a security risk since the application does not directly control its resources or directory space. As noted the installer may use randomly assigned identifiers for the containers . The random identifiers may be based on various functions such as a hash function of information provided in the application s package some other type of cryptographic function and the like. In addition the random identifiers for the containers may be based on various unique attributes of the software. For example unique application identifiers in the form of com.domain.email may be used in determining the random identifier for the container . In some embodiments the installer stores this information only in trusted cache .

During execution a software application may also be restricted in various ways to its respective partition and containers . For example containers may comprise a set of resource limits imposed on programs by kernel such as 110 bandwidth caps disk quotas network access restrictions and as noted above a restricted directory namespace known only to the installation framework .

Second source may forward the request to archive host . Source may provide various types of information in the request such as one or more identifiers for the application the entity that signed the application etc.

Third archive host checks application cache to identify the software that is the subject of the request. For example archive host may check whether an application has an upgrade that is now available. As another example archive host may check whether an application has been previously authorized for the device and for multiple installations on other authorized devices of a user. This authorization may depend on authentication of the user and or other criteria.

Fourth archive host provides a package for the selected software to be installed on the computing device . As noted the package may include the software s full name a unique identifier for the software a description of its purpose version number vendor checksum and a list of dependencies necessary for the software to run properly. The package provided from archive host may comprise different types of files. For example the package may comprise all the files needed to install the application. However the package may comprise just data used by the application or documents used by the application. The contents of the package may vary depending on the application the nature of the request settings of archive host etc.

In the example shown in the requested application has a unique identifier of ABCD. Upon receiving this package operating system may execute installer as a running process to perform the installation of the requested software.

Fifth source provides the package to the computing device . In some embodiments source may perform additional activities related to the package. For example source may perform various integrity checks formatting and or add additional data or files to the package.

Sixth installer determines a destination partition e.g. partition and container for the application. For example as shown installer may select partition as the destination partition.

Seventh installer may randomly assign an identifier or name for a directory that is to be used as container for the application e.g. application ABCD. For example installer may perform various cryptographic functions to determine generate a random identifier for container . Such cryptographic functions are known to those skilled in the art. In some embodiments installer may employ a hashing function that is based on information from the package in order to determine generate the random identifier for container . In addition installer may utilize various arbitrary attributes of the software to determine the random identifier. In the example shown in installer has generated 1AFF2 as the random identifier for the container .

Eighth installer makes a call to installation framework . In response installation framework may record the random identifier and associate it with the application. In addition installation framework may determine various constraints such as I O limits storage space etc. for the requested application in container .

Ninth installer and or installation framework installs the program code etc. in its partition and container . In some embodiments each application is given one container . For example as shown installer may call installation framework and install compiled code in partition of storage .

Tenth the identifier for container is stored in trusted cache for later use by operating system kernel and or installation framework . For example installation framework may record an entry in trusted cache that correlates application ABCD with container identifier 1AFF2 for container and for partition in storage . Of course the operating system kernel or installation framework may utilize other bind processes to correlate the randomly assigned identifier with the application being installed.

In addition to the process described above when a request to upgrade or synchronize the software is received computing device can also check a digital signature of the software or software package to verify its authenticity and or authorization. If the software is verified as being signed by a trusted authority installer and or installation framework may also permit installation of the computing device as additional or alternative criteria for allowing installation.

First computing device receives a request to launch or execute an application that has been securely installed on computing device . For example a user of computing device may select an application installed on the computing device. In the example shown in application ABCD has been selected by the user using a peripheral such as a touch screen etc. This information may then be passed via peripherals interface to operating system .

Second operating system services this request. For example operating system may instruct kernel to execute the requested application e.g. application ABCD. Because this application has been securely installed the location of container is unknown or initially beyond the control of the application.

Accordingly third kernel makes a call to installation framework requesting the identifier for container for application ABCD. Fourth installation framework may then perform a search for the container for the requested application and then responds with the identifier for container e.g. 1AFF2. 

For example kernel may perform a comparison of this unique identifier with the information stored in trusted cache . For example kernel may perform a text comparison to determine whether the identifier matches an entry that is stored in trusted cache .

If the information does not match what is stored in trusted cache then operating system may deny the application and or prompt the user for a response. For example the operating system may provide a warning message that the application could not be found by installation framework .

If the information matches what is stored in trusted cache then fifth kernel continues its service of the application. In particular the application is allowed to execute on computing device within the constraints of its container .

In addition to the process described above when a request to execute the software is received computing device can also check a digital signature of the software to verify its authenticity and or authorization. If the software is verified as being signed by a trusted authority installation framework may use this verification as additional or alternative criteria for allowing execution.

It is pertinent to point out that the specific structures and sequences described above may be implemented performed with alternative structures and sequences. Therefore the teachings of the above description should not be construed as being limited to the specific structures and or sequences described above.

Those of skill may recognize that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

While the above detailed description has shown described and pointed out novel features of the invention as applied to various embodiments it may be understood that various omissions substitutions and changes in the form and details of a device or process illustrated may be made by those skilled in the art without departing from the spirit of the invention. As may be recognized the present invention may be embodied within a form that does not provide all of the features and benefits set forth herein as some features may be used or practiced separately from others. The scope of the invention is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

