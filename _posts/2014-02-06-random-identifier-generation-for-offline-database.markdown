---

title: Random identifier generation for offline database
abstract: Various embodiments of the present technology involve creating a secure unique identifier for a content item to be used in a synchronized content management system while off-line with the synchronized content management system. In some embodiments, securing the unique identifier involves generating a random key and applying a hash function to an input to generate a hash. The synchronized content management system can require a user to send both the secure identifier and the key to the content management system in order to register the content item with the content management system. Accordingly, a malicious user who only has access to the secure identifier cannot use it to identify the key. This prevents a malicious user who has obtained the secure identifier, but does not have access to the key from registering a malicious document using the original user's secure identifier.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509509&OS=09509509&RS=09509509
owner: Dropbox, Inc.
number: 09509509
owner_city: San Francisco
owner_country: US
publication_date: 20140206
---
The present technology pertains to assigning identifiers to content items and more specifically pertains to securely assigning identifiers associated with an online content management system to content items from a client computing device while the client computing device is not in communication with the online content management system.

Cloud storage providers allow users to store content items in an online user account that can be accessed from any computing device with a network connection. In order to identify these content items for retrieval a cloud storage provider such as a content management system may assign a unique identifier to each content item. In some instances the identifiers can be assigned by the client device when the client device is disconnected from or currently not in communication with the content management system. Such a situation can often arise when a user is traveling for example and there are no available networks e.g. cellular cable wireless etc. . When an identifier is assigned to a content item associated with a user account while the client device is not in communication with the content management system i.e. before the content item can synchronize with the content management system it is possible that a malicious user could obtain the identifier such as by predicting or intercepting this identifier and subsequently have this identifier assigned to a potentially harmful content item. Accordingly as people are increasingly relying on computing devices in a wider variety of ways it can be advantageous to adapt the ways in which identifiers are assigned to content items to protect users from malicious intrusions.

Additional features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the disclosure will become more fully apparent from the following description and appended claims or can be learned by the practice of the principles set forth herein.

The disclosed technology addresses the need in the art for creating a secure unique identifier for a content item to be used in a synchronized content management system while a client device is off line e.g. where there is no available network connection etc. or otherwise not in communication with the synchronized content management system for at least a period of time during and or after a user is attempting to save and or register the content item. In one instance a client side application associated with the content management system can generate a random secure identifier. For example the random secure identifier can be generated by first generating a random key and the secure identifier can be generated using the random key by applying a hash function to the random key to generate a hash. Accordingly upon reestablishing communication with the content management system the content item the random secure identifier and the random key can be sent to the content management system for registration.

In order to register the content item the content management system can in at least one embodiment use the random key to generate a new identifier which the content management system can subsequently use to compare to the second identifier. Upon the new identifier matching the secure identifier received by the client device the content management system registers the content item. Accordingly a malicious user with access to the random secure identifier cannot use the identifier to figure out the key. This therefore prevents a malicious user who has obtained the secure identifier but does not have access to the key from registering a malicious document using the original user s secure identifier.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the art will recognize that other components and configurations may be used without departing from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for assigning a secure unique identifier to a content item to be used in a synchronized content management system when a client device is off line or otherwise not in communication with the synchronized content management system. In some embodiments the secure unique identifier can be created by generating a random key and applying a hash function on an input provided in the random key to generate a hash. In order to register the content item the content management system can require a client device to send both the secure identifier and the key to the content management system. Accordingly a malicious user who only has access to the secure identifier cannot use it to identify the key. This prevents a malicious user who has obtained the secure identifier but does not have access to the key from registering a malicious content item using the original user s secure identifier.

Various other functions and advantages are described and suggested below as may be provided in accordance with the various embodiments.

For example user may store many content items of different types which can be organized into different folders. In this example user is in the process of uploading the picture they captured content item A to picture folder which contains other pictures. In order to upload content item A user can select upload icon which can enable user to select the picture content item A from a local photo album e.g. folder of computing device . In order to upload content item A computing device can connect with content management system using cellular network or through WiFi which in this example are both indicating full signal strength. As a result content item A will be uploaded to content management system once user selects upload icon and content item A from the local photo album.

Before content item A is uploaded however client side application may assign an identifier to content item A for identification and retrieval within content management system . Accordingly shows content item A being assigned identifier by computing device to produce content item B for illustration purposes. shows computing device in communication with content management system as a result of the indicated full signal strength discussed in through network . Once uploaded content management system can register and store content item B in database .

Since the identifiers are assigned by an application residing on the client computing device and there may be times when the computing device is unable to connect to a network there may be instances where an identifier is assigned to a content item but registration of the content item with the content management system is delayed until a network connection is established. When this delay occurs it may be possible for a malicious user to obtain the identifier e.g. predict the identifier intercept the identifier etc. reassign the identifier to the malicious user s content item and upload or synchronize the malicious user s content item with the content management system before the original content item. Accordingly the content management system may unknowingly register the malicious content item which can be problematic when the user subsequently attempts to access the content item or shares a link to the content item with other users that will instead point to the malicious user s content item. show this process in more detail.

Once again as shown in content item A is assigned identifier by computing device to produce content item B for illustration purposes before an attempt is made to upload register content item B with content management system . Accordingly shows computing device unsuccessfully attempting to communicate with content management system . As a result of being unable to connect with network database that does not contain content item B. Accordingly shows message notifying user that content item B will be uploaded when a connection with network is reestablished. It should be understood that message notifying user in this example is provided for illustration purposes. Accordingly a less intrusive indicator or message may be displayed to user or content item B could be uploaded automatically when a connection with network is reestablished without notifying user at all.

It is at this time i.e. when identifier has been assigned yet has not be registered with content management system that identifier is potentially vulnerable to being stolen. shows such an example where a malicious user has adversely obtained as illustrated by the lasso around computing device identifier . There are many ways a malicious user could obtain identifier before content item B is able to synchronize with content management system including stealing computing device and learning the identity of identifier predicting identifier intercepting a message e.g. email text message verbal etc. containing identifier and the like.

Once identifier is adversely obtained the malicious user may then assign identifier to a different potentially dangerous content item A to produce dangerous content item B using computing device . Accordingly if the malicious user via computing device is able to establish a connection with network before computing device then the malicious user can register identifier as shown in with dangerous content item B stored in database . In such an instance a malicious user could potentially upload a virus or other malicious software that could corrupt the user s devices and or corrupt the devices of other users who subsequently access the content item though for example a shared link sent through an invitation by user . Accordingly there is a need for a more secure identifier that is less susceptible to being intercepted or predicted by a malicious user or attacker is desirable in order to protect users from such potentially malicious intrusions.

The disclosed technology addresses this need by generating a secure identifier. The secure identifier is produced by first generating a random key and applying a hash function to the random key to generate a hash which can then be used as the secure identifier. Accordingly the random key can in one example include an input and an output of the one way hash function. This input and output are then sent to the content management system which runs its own version of the one way hash function to verify that the input provided in the random key matches the output also provided in the random key. In at least one embodiment the secure identifier can be generated in response to the computing device being unable to connect to a network or the secure identifier can be generated each time. Accordingly in order to register the secure identifier with the content management system the client computing device can in at least one embodiment send both the secure identifier and the random key. This prevents a malicious user who has obtained the secure identifier but does not have access to the key from registering a malicious content item using the original user s secure identifier.

Accordingly when computing device is able to connect to network either immediately or after establishing a connection which can occur after a period of being disconnected from content management system content item B secure identifier and random key are sent to content management system for registration and storage in database . When content management system receives content item B and random key content management system verifies that secure identifier came from the correct user as opposed to a malicious user by running its own implementation of the one way hash function on an input portion of random key to verify that an output portion of random key matches the output of its own implementation of the one way hash function. Upon identifying that output portion of random key matches the output of its own implementation of the one way hash function content management system registers and stores content item B. In order to illustrate content item B verification in the figures content item B becomes content item C after content management system identifies or determines that output portion of random key matches the output of its own implementation of the one way hash function.

Further the computing device could be a desktop client device that includes a client side application that communicates with a content management system of various embodiments to synchronize a copy of a content item stored locally on each computing device with copy of the content item stored with content management system. In this example the client side application could include a folder containing each of a user s content items that is synchronized with the content management system when a new content item is inserted into the folder or an existing content item is modified. Accordingly a secure identifier in accordance with various embodiments discussed herein can be automatically generated when a user inserts a content item into the folder.

Accordingly this output can be verified by the content management system or other server by running the same one way hash function on the input provided in the random key to verify the corresponding outputs of the hash function match. As a result a request to register the content item is sent from the client computing device . The request includes the content item the secure identifier and the random key e.g. input and output of hash function in order for the content management system to verify that the content item came from the intended user not an attacker or malicious user.

Accordingly shows an example server or content management system side process for registering a content item in accordance with at least one embodiment. In this example a request to register a content item including secure identifier and a random key is received from a client computing device . The content management system in order to verify the identity of the user sending the content item verifies the output provided in the random key by running a system side version copy implementation of the hash function with the input provided in the random key to generate a second identifier or output . In this example the second identifier or system side hash function output is compared to the client device side output . Accordingly in response to the system side hash function output matching the client device side output the content item is registered by the content management system.

An exemplary system configuration for enabling access to content of a compressed content item from a variety of computing devices is shown in wherein computing devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through computing devices . . . collectively 602 connected to network by direct and or indirect communication. Content management system can support connections from a variety of different computing devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Computing devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple computing devices .

A user can interact with content management system via a client side application installed on computing device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on computing device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple computing devices . For example computing device can upload content to content management system via network . The content can later be retrieved from content management system using the same computing device or some other computing device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as digital data documents text files audio files video files etc. from one or more computing devices authorized on the account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from computing devices so that computing devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on computing device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more computing devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple computing devices of varying type capabilities operating systems etc. For example computing device can include client software which synchronizes via a synchronization module at content management system content in computing device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes computing device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other computing devices associated with the user s account. For example multiple computing devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple computing devices .

Content management system can include a communications interface for interfacing with various computing devices and can interact with other content and or service providers . . . collectively 609 via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific computing devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple computing devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can include a content item management module for maintaining a content directory. The content directory can identify the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 6 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 6 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 6 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

