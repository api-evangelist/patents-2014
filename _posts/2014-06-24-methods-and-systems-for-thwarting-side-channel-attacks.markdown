---

title: Methods and systems for thwarting side channel attacks
abstract: A computing device may use machine learning techniques to determine the level, degree, and severity of its vulnerability to side channel attacks. The computing device may intelligently and selectively perform obfuscation operations (e.g., operations to raise the noise floor) to prevent side channel attacks based on the determined level, degree, or severity of its current vulnerability to such attacks. The computing device may also monitor the current level of natural obfuscation produced by the device, determining whether there is sufficient natural obfuscation to prevent a side channel attack during an ongoing critical activity, and perform the obfuscation operation during the ongoing critical activity and in response to determining that there is not sufficient natural obfuscation to adequately protect the computing device against side channel attacks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509707&OS=09509707&RS=09509707
owner: QUALCOMM Incorporated
number: 09509707
owner_city: San Diego
owner_country: US
publication_date: 20140624
---
This application is related to U.S. patent application Ser. No. 14 312 957 entitled Methods and Systems for Side Channel Analysis Detection and Protection which is filed concurrently herewith.

Cellular and wireless communication technologies have seen explosive growth over the past several years. Wireless service providers now offer a wide array of features and services that provide their users with unprecedented levels of access to information resources and communications. To keep pace with these enhancements consumer electronic devices e.g. cellular phones watches headphones remote controls etc. have become more powerful and complex than ever and now commonly include powerful processors large memories and other resources that allow for executing complex and powerful software applications on their devices. These devices also enable their users to download and execute a variety of software applications from application download services e.g. Apple App Store Windows Store Google play etc. or the Internet.

Due to these and other improvements an increasing number of mobile and wireless device users now use their devices to store sensitive information e.g. credit card information contacts etc. and or to accomplish tasks for which security is important. For example mobile device users frequently use their devices to purchase goods send and receive sensitive communications pay bills manage bank accounts and conduct other sensitive transactions. Due to these trends mobile devices are quickly becoming the next frontier for side channel attacks which are being increasingly used by thieves and hackers to steal confidential information from computing devices. Accordingly new and improved security solutions that better protect resource constrained computing devices such as mobile and wireless devices will be beneficial to consumers.

The various aspects include methods of protecting a computing device from side channel attacks. In an aspect the methods may include performing in a processor of the computing device a behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks determining whether obfuscation is required in response to determining that the computing device is vulnerable to side channel attacks and performing a obfuscation operation in response to determining that obfuscation is required. In an aspect performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks may include monitoring an activity of the computing device generating a behavior vector based on the monitored activity and applying the generated behavior vector to a classifier model to determine whether the monitored activity is a critical activity. In an aspect performing an obfuscation operation in response to determining that obfuscation is required may include performing an obfuscation operation in response to determining that the monitored activity is a critical activity.

In an aspect the methods may include determining whether the monitored activity is an ongoing critical activity. In an aspect performing an obfuscation operation in response to determining that obfuscation is required may include performing an obfuscation operation in response to determining that the monitored activity is an ongoing critical activity.

In an aspect determining whether obfuscation is required may include monitoring a current level of natural obfuscation produced by the computing device and determining whether there is sufficient natural obfuscation to prevent a side channel attack during the ongoing critical activity. In an aspect determining whether the monitored activity is a critical activity may include determining whether the monitored activity is labeled as a critical activity in the classifier model. In an aspect determining whether obfuscation is required may include applying a behavior vector to a measurable resources classifier model to determine a natural obfuscation level of the computing device. In an aspect performing an obfuscation operation in response to determining that obfuscation is required may include performing an obfuscation operation in response to determining that the determined natural obfuscation level is not high enough to prevent a side channel attack during a critical activity.

In an aspect performing an obfuscation operation in response to determining that obfuscation is required may include increasing a noise floor of the computing device in response to determining that obfuscation is required. In an aspect increasing the noise floor of the computing device may include activating a hardware component that generates noise signals. In an aspect increasing the noise floor of the computing device may include increasing the noise floor commensurate with measured levels of natural obfuscation in the computing device. In an aspect performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks may include performing the behavior analysis operation in parallel with a behavior operation to determine whether a behavior of the computing device is not benign.

Further aspects include a computing device having a processor configured with processor executable instructions to perform operations that include performing a behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks determining whether obfuscation is required in response to determining that the computing device is vulnerable to side channel attacks and performing a obfuscation operation in response to determining that obfuscation is required. In an aspect the processor may be configured with processor executable instructions to perform operations such that performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks includes monitoring an activity of the computing device generating a behavior vector based on the monitored activity and applying the generated behavior vector to a classifier model to determine whether the monitored activity is a critical activity and performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the monitored activity is a critical activity.

In an aspect the processor may be configured with processor executable instructions to perform operations further including determining whether the monitored activity is an ongoing critical activity. In an aspect the processor may be configured with processor executable instructions to perform operations such that performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the monitored activity is an ongoing critical activity. In an aspect the processor may be configured with processor executable instructions to perform operations such that determining whether obfuscation is required includes monitoring a current level of natural obfuscation produced by the computing device and determining whether there is sufficient natural obfuscation to prevent a side channel attack during the ongoing critical activity. In an aspect the processor may be configured with processor executable instructions to perform operations such that determining whether the monitored activity is a critical activity includes determining whether the monitored activity is labeled as a critical activity in the classifier model.

In an aspect the processor may be configured with processor executable instructions to perform operations such that determining whether obfuscation is required includes applying a behavior vector to a measurable resources classifier model to determine a natural obfuscation level of the computing device and performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the determined natural obfuscation level is not high enough to prevent a side channel attack during a critical activity.

In an aspect the processor may be configured with processor executable instructions to perform operations such that performing an obfuscation operation in response to determining that obfuscation is required includes increasing a noise floor of the computing device in response to determining that obfuscation is required. In an aspect the processor may be configured with processor executable instructions to perform operations such that increasing the noise floor of the computing device includes activating a hardware component that generates noise signals. In an aspect the processor may be configured with processor executable instructions to perform operations such that increasing the noise floor of the computing device includes increasing the noise floor commensurate with measured levels of natural obfuscation in the computing device.

In an aspect the processor may be configured with processor executable instructions to perform operations such that performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks includes performing the behavior analysis operation in parallel with a behavior operation to determine whether a behavior of the computing device is not benign.

Further aspects include a non transitory computer readable storage medium having stored thereon processor executable software instructions configured to cause a processor to perform operations for protecting a computing device from side channel attacks the operations including performing a behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks determining whether obfuscation is required in response to determining that the computing device is vulnerable to side channel attacks and performing a obfuscation operation in response to determining that obfuscation is required. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks includes monitoring an activity of the computing device generating a behavior vector based on the monitored activity and applying the generated behavior vector to a classifier model to determine whether the monitored activity is a critical activity and performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the monitored activity is a critical activity.

In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations that include determining whether the monitored activity is an ongoing critical activity. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the monitored activity is an ongoing critical activity.

In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that determining whether obfuscation is required includes monitoring a current level of natural obfuscation produced by the computing device and determining whether there is sufficient natural obfuscation to prevent a side channel attack during the ongoing critical activity. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that determining whether the monitored activity is a critical activity includes determining whether the monitored activity is labeled as a critical activity in the classifier model.

In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that determining whether obfuscation is required includes applying a behavior vector to a measurable resources classifier model to determine a natural obfuscation level of the computing device and performing an obfuscation operation in response to determining that obfuscation is required includes performing an obfuscation operation in response to determining that the determined natural obfuscation level is not high enough to prevent a side channel attack during a critical activity.

In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that performing an obfuscation operation in response to determining that obfuscation is required includes increasing a noise floor of the computing device in response to determining that obfuscation is required. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that increasing the noise floor of the computing device includes activating a hardware component that generates noise signals. In an aspect the stored processor executable software instructions may be configured to cause a processor to perform operations such that performing the behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks includes performing the behavior analysis operation in parallel with a behavior operation to determine whether a behavior of the computing device is not benign.

Further aspects include a computing device that includes means for performing a behavior analysis operation to determine whether the computing device is vulnerable to side channel attacks means for determining whether obfuscation is required in response to determining that the computing device is vulnerable to side channel attacks and means for performing a obfuscation operation in response to determining that obfuscation is required. In an aspect the computing device may include various means for performing functions corresponding to the method operations discussed above.

The various aspects will be described in detail with reference to the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. References made to particular examples and implementations are for illustrative purposes and are not intended to limit the scope of the invention or the claims.

In overview the various aspects include computing devices configured to use behavior analysis or machine learning techniques to intelligently and selectively perform obfuscation operations so as to prevent or defend against side channel attacks without causing the computing device to become excessively loud or hot and without causing a significant negative or user perceivable change in the responsiveness usability performance or power consumption characteristics of the computing device. As such the various aspects are especially well suited for use in consumer electronics and resource constrained computing systems such as mobile communication devices e.g. smartphones that have limited processing and battery resources and for which a pleasant user experience is very important.

The word exemplary is used herein to mean serving as an example instance or illustration. Any implementation described herein as exemplary is not necessarily to be construed as preferred or advantageous over other implementations.

The term performance degradation is used herein to refer to a wide variety of undesirable operations and characteristics of a computing device such as longer processing times slower real time responsiveness lower battery life loss of private data malicious economic activity e.g. sending unauthorized premium SMS message denial of service DoS poorly written or designed software applications malicious software malware viruses fragmented memory operations relating to commandeering the mobile device or utilizing the phone for spying or botnet activities etc. Also behaviors activities and conditions that degrade performance for any of these reasons are referred to herein as not benign or non benign. 

The terms wireless device mobile device and user equipment are used generically and interchangeably herein to refer to any one or all of cellular telephones smartphones personal or mobile multi media players personal data assistants PDA s laptop computers tablet computers smartbooks ultrabooks palm top computers wireless electronic mail receivers multimedia Internet enabled cellular telephones wireless gaming controllers and similar electronic devices which include a memory a programmable processor for which performance is important and operate under battery power such that power conservation methods are of benefit. While the various aspects are particularly useful for mobile devices which are resource constrained systems the aspects are generally useful in any computing device that includes a processor and executes software applications.

Increasingly hackers and thieves are using side channel attacks to steal confidential information from computing devices. A side channel attack may be any cyber attack that is based on information gained from the observable signal emissions e.g. sounds magnetic fields heat etc. of a computing device. For example computing devices often emit high pitch sounds due to vibrations in their electronic components e.g. during read and write operations . These sounds and other emissions are observable computer measurements that may be detected recorded analyzed and used by hackers to decode cryptographic keys stored in and or used by that computing device.

As an example of a side channel attack a first computing device attacker device that includes a microphone heat sensor or magnetometer may be placed in close proximity e.g. a few feet to a second computing device attacked device . The attacker device may then send a series of encrypted e mails to the attacked device and monitor record changes in the observable signal emissions e.g. sounds magnetic fields heat etc. of the attacked device as it receives and decrypts the emails. The attacker device may then analyze these changes to determine the precise operations performed by the attacked device when decrypting the emails and use this information to ascertain the cryptographic keys used by the attacked device for decrypting the emails. Using such improperly obtained cryptographic keys the attacker device could intercept communications to and from the attacked device and use the cryptographic key to decrypt the intercepted communications.

Various obfuscation techniques may be used to protect a computing device from these and other side channel attacks. For example one defense against side channel attacks is to ensure that the noise floor of the computing device i.e. sum of all the noise signals generated by the computing device is high enough so that an attacker device cannot readily identify and measure the sounds fields or signals generated by a specific activity in the device over time. This defense often prevents the attacker device from gaining useful information from the changes in observable signal emissions e.g. sounds magnetic fields heat etc. and or makes it more difficult for the attacker device to determine the precise operations performed by the attacked device. This in turn makes it more difficult for thieves and hackers to steal confidential information from the attacked device.

While such obfuscation techniques are generally effective in protecting computing devices from side channel attacks existing solutions that use such obfuscation techniques are inefficient and or not suitable for continuous use in resource constrained computing systems such as mobile devices. This is because in order to introduce sufficient obfuscation to adequately protect the device against side channel attacks the computing device may be required to perform a number of power and processor intensive operations that consume a significant amount of the device s battery and processing resources. Further due to the complexity and variety of modern computing devices it is often challenging for device designers to predict in advance the specific device activities that will be susceptible to side channel attacks. For all these reasons existing solutions often require that a computing device continuously or repeatedly perform the power and processor intensive obfuscation operations. This often causes these computing devices to become excessively loud hot or unresponsive.

The various aspects overcome these and other limitations of existing solutions by configuring computing devices to use behavior analysis or machine learning techniques to efficiently determine the level degree and severity of the computing device s vulnerability to side channel attacks and selectively perform obfuscation operations based on the determined level degree or severity of the vulnerability. Various aspects may also use behavior analysis or machine learning techniques to determine whether there is sufficient natural obfuscation in the system to defend against side channel attacks and to only perform the obfuscation operations in response to determining that there is not sufficient natural obfuscation in the system to prevent a side channel attack.

By using behavior analysis or machine learning techniques to selectively introduce obfuscation into the system the various aspects improve upon existing solutions for protecting against side channel attacks by reducing the total amount of noise sounds heat and radiation produced by the computing device. The various aspects also improve upon existing solutions by protecting the computing device against side channel attacks without consuming an excessive amount of the device s processing and battery resources when active countermeasures are unnecessary. As such the various aspects are well suited for use in resource constrained computing systems such as mobile computing devices.

In an aspect a computing device may be configured determine whether it is vulnerable to side channel attacks and or the level degree or severity of its vulnerability to side channel attacks based on the criticality or security importance of its current behaviors or activities. Additionally the computing device may be configured to monitor the activities of the computing device generate a behavior vector based on the monitored activities apply a model of critical activity to the generated behavior vector to determine whether a monitored activity is an ongoing critical activity that is vulnerable to side channel attacks. The system may then perform obfuscation operations to introduce additional obfuscation into the system during e.g. only during ongoing critical activities.

In an aspect the computing device may be configured to monitor the levels of natural obfuscation e.g. noise signals produced by measurable components of the computing device apply a model of the measurable components to the generated behavior vector to determine whether there is sufficient natural obfuscation to prevent a side channel attack during an ongoing critical activity and introduce additional or artificial obfuscation e.g. by raising the noise floor etc. in response to determining that there is not sufficient natural obfuscation to prevent a side channel attack from targeting the ongoing critical activity. Thus the computing device may be configured so that it only introduces additional or artificial obfuscation into the computing system during the performance of an ongoing critical activity and in response to determining that there is not sufficient natural obfuscation to protect the computing device from side channel attacks during the ongoing critical activity.

The computing device may be configured to perform a wide variety of obfuscation operations to protect the device from side channel attacks including operations for raising the noise floor of the computing device. These operations may include increasing the number volume and or strength of the noise signals emitted by the computing device such as by activating hardware components e.g. a fan co processor etc. or performing auxiliary operations that generate noise signals. A noise signal may be any observable signal emission e.g. sound magnetic field heat etc. other than that which is generated by an ongoing critical activity.

As discussed above the various aspects improve upon existing solutions by using behavior analysis or machine learning techniques to selectively introduce obfuscation into the device during critical activities. The use of behavior analysis or machine learning techniques is important because modern computing devices are highly configurable and complex systems and the factors that are most important for determining whether a particular activity is a critical activity may be different in each device. Further different combinations of device features factors may require an analysis in each device in order for that device to determine whether a particular activity is an ongoing critical activity. Yet the precise combination of features factors that require monitoring and analysis often can only be determined using information obtained from the specific computing device in which the activity is performed and at the time the activity is underway. For these and other reasons rules based solutions are not suitable for use in determining whether an ongoing activity is a critical activity that is vulnerable to side channel attacks or for determining whether there is sufficient natural obfuscation to prevent a side channel attack during an ongoing critical activity.

To overcome the limitations of rules based solutions in various aspects a computing device may be equipped with a comprehensive behavioral monitoring and analysis system that is configured to use machine learning techniques as opposed to a rules based approach to determine whether an activity is an ongoing critical activity whether there is sufficient natural obfuscation to prevent a side channel and whether the activity is not benign.

The behavioral monitoring and analysis system may include an observer process daemon module or sub system herein collectively referred to as a module configured to instrument or coordinate various application programming interfaces registers counters or other components herein collectively instrumented components at various levels of the computing device system. The observer module may continuously or near continuously monitor activities of the computing device by collecting behavior information from the instrumented components. The behavioral monitoring and analysis system may also include an analyzer module and the observer module may communicate e.g. via a memory write operation function call etc. the collected behavior information to the analyzer module. The analyzer module may be configured to perform real time behavior analysis operations which may include performing executing and or applying data algorithms classifiers or models herein collectively referred to as classifier models to the collected behavior information to determine whether a device behavior is an ongoing critical activity. The computing device may then use the results of this analysis to determine whether to perform obfuscation operations to introduce additional or artificial obfuscation into the system.

In some aspects the behavioral monitoring and analysis system may be configured to intelligently and efficiently identify prevent and or correct the conditions factors and or device behaviors that contribute to the computing device s degradation in performance and or power utilization levels over time. In these aspects the analyzer module may be further configured to perform real time behavior analysis operations to determine whether an activity or device behavior is not benign e.g. malicious poorly written performance degrading etc. . In some aspects the analyzer module may be configured to determine whether the activity is an ongoing critical activity and or whether there is sufficient natural obfuscation to prevent a side channel without performing a significant number of additional different operations that those preformed when determining whether that activity is not benign. As such the analyzer module may determine whether the computing device is currently vulnerable to side channel attacks and or the level degree or severity of its vulnerability to side channel attacks without causing a significant negative or user perceivable change in the responsiveness performance or power consumption characteristics of the computing device.

Some aspects may include network servers and computing devices configured to work in conjunction with one another to efficiently identify classify model prevent and or correct the conditions and or device behaviors that may degrade the performance and or power utilization levels of computing devices over time. As part of these operations the network servers and computing devices may work in conjunction with one another to determine the level degree or severity of the computing device s vulnerability to side channel attacks such by determining whether an activity is ongoing critical activity and the level of natural obfuscation present in the system.

In some aspects the network server may be configured to receive information on various conditions features behaviors and corrective actions from a central database e.g. the cloud and use this information to generate a full classifier model i.e. a data or behavior model that describes a large corpus of behavior information in a format or structure e.g. finite state machine etc. that can be quickly converted into one or more lean classifier models by the computing device. The network server may be configured to generate the full classifier model to include activity labels and or classifications that may be used by the computing device to determine whether a behavior software application process or operations is part of an ongoing critical activity. For example the network server may generate to full classifier model so that it includes information suitable for identifying software applications and or application types that are a high risk or susceptible to abuse such as financial applications point of sale applications biometric sensor applications applications that store sensitive data encryption decryption applications etc.

In some aspects the full classifier model may be a finite state machine description or representation of the large corpus of behavior information. In an aspect the finite state machine may include information that is suitable for expression as a plurality of nodes boosted decision trees or decision stumps that each test one or more features. For example the finite state machine may be an information structure that may be expressed as a family of boosted decision stumps that collectively identify describe test or evaluate all or many of the features and data points that are relevant to determining whether an activity is a critical activity the level of natural obfuscation and or whether a device behavior is not benign. The network server may then send the full classifier model i.e. information structure that includes the finite state machine and or family of boosted decision stumps etc. to the computing device.

The computing device may receive and use the full classifier model to generate device specific lean classifier models or a family of lean classifier models of varying levels of complexity or leanness . To accomplish this the computing device may prune or cull the robust family of boosted decision trees included in the full classifier model received from the network server to generate a lean classifier model that includes a reduced number of boosted decision nodes and or evaluates a limited number of test conditions or features that are specific to the computing device to a software application of the computing device and or to type or category of software application. The computing device may then use these locally generated classifier models to perform the real time behavior monitoring and analysis operations to determine whether an activity is a critical activity that is vulnerable to side channel attacks the level of natural obfuscation present in the system whether activity is not benign etc.

By generating full classifier models that describe or express a large corpus of information as a finite state machine decision nodes decision trees or other similar information structures that can be modified culled augmented or otherwise used to generate lean classifier models the various aspects allow the computing device to generate lean classifier models quickly efficiently and without accessing training data or further communicating with the network server the central database or the cloud network server. This significantly reduces the computing device s dependence on the network and improves the performance and power consumption characteristics of the device.

Further by generating the lean classifier models locally in the computing device to account for application or device specific features the various aspects allow the computing device to focus its operations on the features or factors that are most important for determining whether the device is vulnerable to a side channel attack and or whether it is necessary to perform obfuscation operations. This allows the computing device to both protect against side channel attacks and respond to undesirable behaviors without causing a significant negative or user perceivable change in the responsiveness performance or power consumption characteristics of the computing device.

The various aspects may be implemented in a number of different computing devices including single processor and multiprocessor systems and a system on chip SOC . is an architectural diagram illustrating an example system on chip SOC architecture that may be used in computing devices implementing the various aspects. The SOC may include a number of heterogeneous processors such as a digital signal processor DSP a modem processor a graphics processor and an application processor . The SOC may also include one or more coprocessors e.g. vector co processor connected to one or more of the heterogeneous processors .

Each processor may include one or more cores and each processor core may perform operations independent of the other processors cores. For example the SOC may include a processor that executes a first type of operating system e.g. FreeBSD LINUX OS X etc. and a processor that executes a second type of operating system e.g. Microsoft Windows 8 . Further each processor may be configured to perform various obfuscation operations including auxiliary operations that raise the noise floor of the SOC . The processors may also be measurable components that are configured to detect measure and report levels of natural obfuscation.

The SOC may also include analog circuitry and custom circuitry for managing sensor data analog to digital conversions wireless data transmissions and for performing other specialized operations such as processing encoded audio signals for games and movies. The SOC may further include system components and resources such as voltage regulators oscillators phase locked loops peripheral bridges data controllers memory controllers system controllers access ports timers and other similar components used to support the processors and clients running on a computing device. In the various aspects any or all of these components resources may be activated or controlled to introduce obfuscation into the SOC and or to detect measure and report levels of natural obfuscation when performing an operation.

The resources system components and custom circuitry may include circuitry to interface with peripheral devices such as cameras electronic displays wireless communication devices external memory chips etc. The processors may be interconnected to one or more memory elements system components and resources and custom circuitry via an interconnection bus module which may include an array of reconfigurable logic gates and or implement a bus architecture e.g. CoreConnect AMBA etc. . Communications may be provided by advanced interconnects such as high performance networks on chip NoCs .

The SOC may further include an input output module not illustrated for communicating with resources external to the SOC such as a clock and a voltage regulator . Resources external to the SOC e.g. clock voltage regulator may be shared by two or more of the internal SOC processors cores e.g. DSP modem processor graphics processor application processor etc. .

The SOC may also include hardware and or software components suitable for collecting sensor data from sensors including speakers user interface elements e.g. input buttons touch screen display etc. microphone arrays sensors for monitoring physical conditions e.g. location direction motion orientation vibration pressure etc. cameras compasses global positioning system GPS receivers communications circuitry e.g. Bluetooth WLAN WiFi etc. and other well known components e.g. accelerometer etc. of modern electronic devices. In various aspects any or all of the hardware and software components of the SOC may be configured activated or controlled to introduce obfuscation into the SOC and or to and or to detect measure and report levels of natural obfuscation.

Each of the modules may be implemented in software hardware or any combination thereof. In various aspects the modules may be implemented within parts of the operating system e.g. within the kernel in the kernel space in the user space etc. within separate programs or applications in specialized hardware buffers or processors or any combination thereof. In an aspect one or more of the modules may be implemented as software instructions executing on one or more processors of the computing device .

The behavior observer module may be configured to instrument application programming interfaces APIs at various levels modules of the device and monitor the activities conditions operations and events e.g. system events state changes etc. at the various levels modules over a period of time via the instrumented APIs. The behavior observer module may collect behavior information pertaining to the monitored activities conditions operations or events and store the collected information in a memory e.g. in a log file etc. . The behavior observer module may also be configured to generate a behavior vector based on the collected information and send e.g. via memory writes function calls etc. the behavior vector to the behavior analyzer module for analysis.

The behavior analyzer module may be configured to use the stored behavior information the generate behavior vectors and apply the generated or received behavior vectors to classifier modules to identify subsystems processes and or applications that are contributing to or are likely to contribute to the device s degradation over time and or which may otherwise cause problems on the device. As part of these operations the behavior analyzer module may also determine whether the computing device is vulnerable to side channel attacks. For example the behavior analyzer module may determine whether an activity is an ongoing critical activity and or whether there is sufficient natural obfuscation to protect the computing device from side channel attacks during the ongoing critical activity.

The behavior analyzer module may notify the actuator module that an activity or behavior is not benign that the activity behavior is an ongoing critical activity and or whether there is sufficient natural obfuscation in the system to prevent side channel attacks. In response the actuator module may perform various actions or operations to heal cure isolate or otherwise fix identified problems. For example the actuator module may be configured to terminate a software application or process when the result of applying the behavior vector to the machine learning classifier model e.g. by the analyzer module indicates that the software application or process is not benign.

In addition the behavior analyzer module and or actuator module may be configured to notify the obfuscation module that a monitored activity is an ongoing critical activity that is vulnerable to side channel attacks and or that there is not sufficient natural obfuscation in the system to prevent a side channel attack while the computing device performs the ongoing critical activity. The obfuscation module may be configured to perform a wide variety of obfuscation operations to protect the device from side channel attacks including operations for raising the noise floor of the computing device. For example the obfuscation module may activate various hardware components e.g. a fan co processor etc. or performing auxiliary operations that generate noise signals. The obfuscation module may also perform operations that increase the number volume and or strength of the noise signals emitted by the computing device . In an aspect the obfuscation module may be configured to perform obfuscation operations so as to only introduce additional obfuscation into the system during the performance of an ongoing critical activity. The obfuscation module may also be configured to perform the obfuscation operations so as to only introduce additional or artificial obfuscation when there is not sufficient natural obfuscation to protect the computing device from side channel attacks during the ongoing critical activity.

The behavior observer module may be configured to monitor the activities of the computing device and or the current levels of natural obfuscation e.g. noise produced by the measurable components of the computing device . In various aspects this may be accomplishing by monitoring various software and hardware components of the computing device and collecting information pertaining to the communications transactions events or operations of the monitored and measurable components that are associated with the activities of the computing device . Such activities include a software application s performance of an operation or task a software application s execution in a processing core of the computing device the execution of process the performance of a task or operation a device behavior the use of a hardware component etc.

In various aspects the behavior observer module may be configured to monitor the activities of the computing device by collecting information pertaining to library API calls in an application framework or run time libraries system call APIs file system and networking sub system operations device including sensor devices state changes and other similar events. In addition the behavior observer module may monitor file system activity which may include searching for filenames categories of file accesses personal info or normal data files creating or deleting files e.g. type exe zip etc. file read write seek operations changing file permissions etc.

The behavior observer module may also monitor the activities of the computing device by monitoring data network activity which may include types of connections protocols port numbers server client that the device is connected to the number of connections volume or frequency of communications etc. The behavior observer module may monitor phone network activity which may include monitoring the type and number of calls or messages e.g. SMS etc. sent out received or intercepted e.g. the number of premium calls placed .

The behavior observer module may also monitor the activities of the computing device by monitoring the system resource usage which may include monitoring the number of forks memory access operations number of files open etc. The behavior observer module may monitor the state of the computing device which may include monitoring various factors such as whether the display is on or off whether the device is locked or unlocked the amount of battery remaining the state of the camera etc. The behavior observer module may also monitor inter process communications IPC by for example monitoring intents to crucial services browser contracts provider etc. the degree of inter process communications pop up windows etc.

The behavior observer module may also monitor the activities of the computing device by monitoring driver statistics and or the status of one or more hardware components which may include cameras sensors electronic displays WiFi communication components data controllers memory controllers system controllers access ports timers peripheral devices wireless communication components external memory chips voltage regulators oscillators phase locked loops peripheral bridges and other similar components used to support the processors and clients running on the computing device .

The behavior observer module may also monitor the activities of the computing device by monitoring one or more hardware counters that denote the state or status of the computing device and or computing device subsystems. A hardware counter may include a special purpose register of the processors cores that is configured to store a count value or state of hardware related activities or events occurring in the computing device .

The behavior observer module may also monitor the activities of the computing device by monitoring the actions or operations of software applications software downloads from an application download server e.g. Apple App Store server computing device information used by software applications call information text messaging information e.g. SendSMS BlockSMS ReadSMS etc. media messaging information e.g. ReceiveMMS user account information location information camera information accelerometer information browser information content of browser based communications content of voice based communications short range radio communications e.g. Bluetooth WiFi etc. content of text based communications content of recorded audio files phonebook or contact information contacts lists etc.

The behavior observer module may also monitor the activities of the computing device by monitoring transmissions or communications of the computing device including communications that include voicemail VoiceMailComm device identifiers DevicelDComm user account information UserAccountComm calendar information CalendarComm location information LocationComm recorded audio information RecordAudioComm accelerometer information AccelerometerComm etc.

The behavior observer module may also monitor the activities of the computing device by monitoring the usage of and updates changes to compass information computing device settings battery life gyroscope information pressure sensors magnet sensors screen activity etc. The behavior observer module may monitor notifications communicated to and from a software application AppNotifications application updates etc. The behavior observer module may monitor conditions or events pertaining to a first software application requesting the downloading and or install of a second software application. The behavior observer module may monitor conditions or events pertaining to user verification such as the entry of a password etc.

The behavior observer module may also monitor the activities of the computing device by monitoring conditions or events at multiple levels of the computing device including the application level radio level and sensor level. Application level observations may include observing the user via facial recognition software observing social streams observing notes entered by the user observing events pertaining to the use of PassBook Google Wallet Paypal and other similar applications or services. Application level observations may also include observing events relating to the use of virtual private networks VPNs and events pertaining to synchronization voice searches voice control e.g. lock unlock a phone by saying one word language translators the offloading of data for computations video streaming camera usage without user activity microphone usage without user activity etc.

Radio level observations may include determining the presence existence or amount of any or more of user interaction with the computing device before establishing radio communication links or transmitting information dual multiple subscriber identification module SIM cards Internet radio mobile phone tethering offloading data for computations device state communications the use as a game controller or home controller vehicle communications computing device synchronization etc. Radio level observations may also include monitoring the use of radios WiFi WiMax Bluetooth etc. for positioning peer to peer p2p communications synchronization vehicle to vehicle communications and or machine to machine m2m . Radio level observations may further include monitoring network traffic usage statistics or profiles.

Sensor level observations may include monitoring a magnet sensor or other sensor to determine the usage and or external environment of the computing device . For example the computing device processor may be configured to determine whether the device is in a holster e.g. via a magnet sensor configured to sense a magnet within the holster or in the user s pocket e.g. via the amount of light detected by a camera or light sensor . Detecting that the computing device is in a holster may be relevant to recognizing suspicious behaviors for example because activities and functions related to active usage by a user e.g. taking photographs or videos sending messages conducting a voice call recording sounds etc. occurring while the computing device is holstered could be signs of nefarious processes executing on the device e.g. to track or spy on the user .

Other examples of sensor level observations related to usage or external environments may include detecting NFC signaling collecting information from a credit card scanner barcode scanner or mobile tag reader detecting the presence of a Universal Serial Bus USB power charging source detecting that a keyboard or auxiliary device has been coupled to the computing device detecting that the computing device has been coupled to another computing device e.g. via USB etc. determining whether an LED flash flashlight or light source has been modified or disabled e.g. maliciously disabling an emergency signaling app etc. detecting that a speaker or microphone has been turned on or powered detecting a charging or power event detecting that the computing device is being used as a game controller etc. Sensor level observations may also include collecting information from medical or healthcare sensors or from scanning the user s body collecting information from an external sensor plugged into the USB audio jack collecting information from a tactile or haptic sensor e.g. via a vibrator interface etc. collecting information pertaining to the thermal state of the computing device etc.

To reduce the number of factors monitored to a manageable level in an aspect the behavior observer module may be configured to perform coarse observations by monitoring observing an initial set of behaviors or factors that are a small subset of all factors that could contribute to the computing device s degradation. In an aspect the behavior observer module may receive the initial set of behaviors and or factors from a server and or a component in a cloud service or network. In an aspect the initial set of behaviors factors may be specified in machine learning classifier models.

Each classifier model may be a behavior model that includes data and or information structures e.g. feature vectors behavior vectors component lists etc. that may be used by a computing device processor to evaluate a specific feature or aspect of a computing device s behavior. Each classifier model may also include decision criteria for monitoring a number of features factors data points entries APIs states conditions behaviors applications processes operations components etc. herein collectively features in the computing device. The classifier models may be preinstalled on the computing device downloaded or received from a network server generated in the computing device or any combination thereof. The classifier models may be generated by using crowd sourcing solutions behavior modeling techniques machine learning algorithms etc.

Each classifier model may be categorized as a full classifier model or a lean classifier model. A full classifier model may be a robust data model that is generated as a function of a large training dataset which may include thousands of features and billions of entries. A lean classifier model may be a more focused data model that is generated from a reduced dataset that includes tests only the features entries that are most relevant for determining whether a particular activity is an ongoing critical activity and or whether a particular computing device behavior is not benign.

A locally generated lean classifier model is a lean classifier model that is generated in the computing device. An application specific classifier model is a classifier model that includes a focused data model that includes tests only the features entries that are most relevant for evaluating a particular software application. A device specific classifier model is a classifier model that includes a focused data model that includes tests only computing device specific features entries that are determined to be most relevant to classifying an activity or behavior in a specific computing device.

In the various aspects any or all of the classifier models discussed in this application e.g. full local device specific application specific etc. may include or may be a model of critical activity or a model of measurable components. A model of critical activity may be a classifier model that includes tests the features entries that are most relevant for determining whether an activity is a critical activity for which security is important and or is vulnerable to side channel attacks. A model of measurable components may be a classifier model that includes tests the features entries that are most relevant for determining whether there is sufficient natural obfuscation in the system to defend against a side channel attack. This model may encompass a variety of measurements and or include information suitable for determining obfuscation across multiple measurable components i.e. multiple sensors components etc. . Further this model is not required to include measure or use thresholds for every sensor that is evaluated.

With reference to the behavior analyzer module may be configured to notify the behavior observer module in response to determining that a monitored activity or behavior is suspicious. In response the behavior observer module may adjust the granularity of its observations i.e. the level of detail at which computing device features are monitored and or change the factors behaviors that are observed based on information received from the behavior analyzer module e.g. results of the real time analysis operations generate or collect new or additional behavior information and send the new additional information to the behavior analyzer module for further analysis classification. Such feedback communications between the behavior observer module and the behavior analyzer module enable the computing device to recursively increase the granularity of the observations i.e. make finer or more detailed observations or change the features behaviors that are observed until an activity is classified a source of a suspicious or performance degrading computing device behavior is identified until a processing or battery consumption threshold is reached or until the computing device processor determines that the source of the suspicious or performance degrading computing device behavior cannot be identified from further increases in observation granularity. Such feedback communications also enable the computing device to adjust or modify the classifier models locally in the computing device without consuming an excessive amount of the computing device s processing memory or energy resources.

In an aspect the behavior observer module and the behavior analyzer module may provide either individually or collectively real time behavior analysis of the computing system s behaviors to identify suspicious behavior from limited and coarse observations to dynamically determine behaviors to observe in greater detail and to dynamically determine the level of detail required for the observations. This allows the computing device to efficiently identify and prevent problems without requiring a large amount of processor memory or battery resources on the device.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by identifying a critical data resource that requires close monitoring identifying an intermediate resource associated with the critical data resource monitoring API calls made by a software application when accessing the critical data resource and the intermediate resource identifying computing device resources that are consumed or produced by the API calls identifying a pattern of API calls as being indicative of non benign activity by the software application generating a light weight behavior signature based on the identified pattern of API calls and the identified computing device resources using the light weight behavior signature to perform behavior analysis operations and determining whether the software application is benign or not benign based on the behavior analysis operations.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by identifying APIs that are used most frequently by software applications executing on the computing device storing information regarding usage of identified hot APIs in an API log in a memory of the computing device and performing behavior analysis operations based on the information stored in the API log to identify behaviors that are inconsistent with normal operation patterns. In an aspect the API log may be generated so that it is organized such that the values of generic fields that remain the same across invocations of an API are stored in a separate table as the values of specific fields that are specific to each invocation of the API. The API log may also be generated so that the values of the specific fields are stored in a table along with hash keys to the separate table that stores the values of the generic fields.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by receiving from a server a full classifier model that includes a finite state machine that is suitable for conversion or expression as a plurality of boosted decision stumps generating a lean classifier model in the computing device based on the full classifier and using the lean classifier model in the computing device to classify the activities or behaviors as being either benign or not benign i.e. malicious performance degrading etc. . In an aspect generating the lean classifier model based on the full classifier model may include determining a number of unique test conditions that should be evaluated to classify an activity or behavior without consuming an excessive amount of processing memory or energy resources of the computing device generating a list of test conditions by sequentially traversing the list of boosted decision stumps and inserting the test condition associated with each sequentially traversed boosted decision stump into the list of test conditions until the list of test conditions includes the determined number of unique test conditions and generating the lean classifier model to include only those boosted decision stumps that test one of a plurality of test conditions included in the generated list of test conditions.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by using device specific information such as capability and state information of the computing device to identify device specific test conditions in a plurality of test conditions that are relevant to classifying a behavior of the computing device generating a lean classifier model that includes only the identified computing device specific test conditions and using the generated lean classifier model in the computing device to classify the behavior of the computing device. In an aspect the lean classifier model may be generated to include only decision nodes that evaluate a computing device feature that is relevant to a current operating state or configuration of the computing device. In an aspect generating the lean classifier model may include determining a number of unique test conditions that should be evaluated to classify the behavior without consuming an excessive amount of computing device s resources e.g. processing memory or energy resources generating a list of test conditions by sequentially traversing the plurality of test conditions in the full classifier model inserting those test conditions that are relevant to classifying the behavior of the computing device into the list of test conditions until the list of test conditions includes the determined number of unique test conditions and generating the lean classifier model to include decision nodes included in the full classifier model that test one of the conditions included in the generated list of test conditions.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by monitoring an activity of a software application or process determining an operating system execution state of the software application process and determining whether the activity is a critical activity based the operating system execution state of the software application or process during which the activity was monitored. In an further aspect the behavior observer module and or the behavior analyzer module may determine whether the operating system execution state of the software application or process is relevant to the activity generate a shadow feature value that identifies the operating system execution state of the software application or process during which the activity was monitored generate a behavior vector that associates the activity with the shadow feature value identifying the operating system execution state and use the behavior vector to determine whether the activity is a critical activity and or not benign.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to monitor analyze and or classify activities or behaviors by monitoring an activity of a software application or process determining an application and operating system agnostic execution state of the software application process and determining whether the activity is a critical activity or not benign based on the activity and or the application and operating system agnostic execution state of the software application during which the activity was monitored. In an further aspect the behavior observer module and or the behavior analyzer module may determine whether the application and operating system agnostic execution state of the software application is relevant to the activity and generate a behavior vector that associates the activity with the application and operating system agnostic execution state and use the behavior vector to determine whether the activity is a critical activity and or not benign. The computing device may also use the application and operating system agnostic execution state to select a classifier model e.g. application specific classifier model and apply the behavior vector to the selected classifier model to determine whether the activity is a critical activity and or not benign.

In the various aspects the computing device may be configured to work in conjunction with a network server to intelligently and efficiently identify the features factors and data points that are most relevant to determining whether an activity is a critical activity and or not benign. For example the computing device may be configured to receive a full classifier model from the network server and use the received full classifier model to generate lean classifier models i.e. data behavior models that are specific for the features and functionalities of the computing device or the software applications of the computing device. The computing device may use the full classifier model to generate a family of lean classifier models of varying levels of complexity or leanness . The leanest family of lean classifier models i.e. the lean classifier model based on the fewest number of test conditions may be applied routinely until a behavior is encountered that the model cannot categorize as either benign or not benign and therefore is categorized by the model as suspicious at which time a more robust i.e. less lean lean classifier model may be applied in an attempt to categorize the behavior. The application of ever more robust lean classifier models within the family of generated lean classifier models may be applied until a definitive classification of the behavior is achieved. In this manner the observer and or analyzer modules can strike a balance between efficiency and accuracy by limiting the use of the most complete but resource intensive lean classifier models to those situations where a robust classifier model is needed to definitively classify a behavior.

In various aspects the computing device may be configured to generate one or more lean classifier models by converting a finite state machine representation expression into boosted decision stumps pruning or culling the full set of boosted decision stumps based on computing device specific states features behaviors conditions or configurations to include subset or subsets of boosted decision stumps included in the full classifier model and using the subset or subsets of boosted decision stumps to intelligently monitor analyze and or classify a computing device behavior.

Boosted decision stumps are one level decision trees that have exactly one node and thus one test question or test condition and a weight value and thus are well suited for use in a binary classification of data behaviors. That is applying a behavior vector to boosted decision stump results in a binary answer e.g. Yes or No . For example if the question condition tested by a boosted decision stump is is the frequency of Short Message Service SMS transmissions less than x per minute applying a value of 3 to the boosted decision stump will result in either a yes answer for less than 3 SMS transmissions or a no answer for 3 or more SMS transmissions .

Boosted decision stumps are efficient because they are very simple and primal and thus do not require significant processing resources . Boosted decision stumps are also very parallelizable and thus many stumps may be applied or tested in parallel at the same time e.g. by multiple cores or processors in the computing device .

In an aspect the computing device may be configured to generate a lean classifier model that includes a subset of classifier criteria included in the full classifier model and only those classifier criteria corresponding to the features relevant to the computing device configuration functionality and connected included hardware. The computing device may use this lean classifier model s to monitor only those features and functions present or relevant to the device. The computing device may then periodically modify or regenerate the lean classifier model s to include or remove various features and corresponding classifier criteria based on the computing device s current state and configuration.

As an example the behavior analyzer module may be configured to receive a large boosted decision stumps classifier model that includes decision stumps associated with a full feature set of behavior models e.g. classifiers and the behavior analyzer module may derive one or more lean classifier models from the large classifier models by selecting only features from the large classifier model s that are relevant the computing device s current configuration functionality operating state and or connected included hardware and including in the lean classifier model a subset of boosted decision stumps that correspond to the selected features. In this aspect the classifier criteria corresponding to features relevant to the computing device may be those boosted decision stumps included in the large classifier model that test at least one of the selected features. The behavior analyzer module may then periodically modify or regenerate the boosted decision stumps lean classifier model s to include or remove various features based on the computing device s current state and configuration so that the lean classifier model continues to include application specific or device specific feature boosted decision stumps.

In addition the computing device may also dynamically generate application specific classifier models that identify conditions or features that are relevant to a specific software application Google wallet and or to a specific type of software application e.g. games navigation financial news productivity etc. . In an aspect these classifier models may be generated to include a reduced and more focused subset of the decision nodes that are included in the full classifier model or of those included in lean classifier model generated from the received full classifier model.

In various aspects the computing device may be configured to generate application based classifier models for each software application in the system and or for each type of software application in the system. The computing device may also be configured to dynamically identify the software applications and or application types that are a high risk or susceptible to abuse e.g. financial applications point of sale applications biometric sensor applications etc. and generate application based classifier models for only the software applications and or application types that are identified as being high risk or susceptible to abuse. In various aspects the computing device may be configured to generate the application based classifier models dynamically reactively proactively and or every time a new application is installed or updated.

Each software application generally performs a number of tasks or activities on the computing device. The specific execution state in which certain tasks activities are performed in the computing device may be a strong indicator of whether a behavior or activity merits additional or closer scrutiny monitoring and or analysis to determine whether it is a critical activity that may be vulnerable to a side channel attack. As such in the various aspects the computing device may be configured to use information identifying the actual execution states in which certain tasks activities are performed to focus its behavioral monitoring and analysis operations and better determine whether an activity is a critical activity and or whether the activity is not benign.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to associate the activities tasks performed by a software application with the execution states in which those activities tasks were performed. For example the behavior observer module may be configured to generate a behavior vector that includes the behavior information collected from monitoring the instrumented components in a sub vector or data structure that lists the features activities or operations of the software for which the execution state is relevant e.g. location access SMS read operations sensor access etc. . In an aspect this sub vector data structure may be stored in association with a shadow feature value sub vector data structure that identifies the execution state in which each feature activity operation was observed. As an example the behavior observer module may generate a behavior vector that includes a location background data field whose value identifies the number or rate that the software application accessed location information when it was operating in a background state. This allows the behavior analyzer module to analyze this execution state information independent of and or in parallel with the other observed monitored activities of the computing device. Generating the behavior vector in this manner also allows the system to aggregate information e.g. frequency or rate over time.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to generate the behavior vectors to include information that may be input to a decision node in the machine learning classifier to generate an answer to a query regarding the monitored activity.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to generate the behavior vectors to include a concise definition of the observed monitored behaviors. The behavior vector may succinctly describe an observed behavior of the computing device software application or process in a value or vector data structure e.g. in the form of a string of numbers etc. . The behavior vector may also function as an identifier that enables the computing device system to quickly recognize identify and or analyze computing device behaviors.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to generate the behavior vectors to include a plurality or series of numbers each of which signifies or characterizes a feature activity or a behavior of the computing device . For example numbers included in the behavior vector may signify whether a camera of the computing device is in use e.g. as zero or one how much network traffic has been transmitted from or generated by the computing device e.g. 20 KB sec etc. how many internet messages have been communicated e.g. number of SMS messages etc. etc. In an aspect the behavior vector may encapsulate one or more behavior features. Each behavior feature may be an abstract number that represents all or a portion of an observed behavior or action. The behavior features may be agnostic to the hardware or software configuration of the computing device.

In various aspects the behavior observer module and or the behavior analyzer module may be configured to generate the behavior vectors to include execution information. The execution information may be included in the behavior vector as part of a behavior e.g. camera used 5 times in 3 second by a background process camera used 3 times in 3 second by a foreground process etc. or as part of an independent feature. In an aspect the execution state information may be included in the behavior vector as a shadow feature value sub vector or data structure. In an aspect the behavior vector may store the shadow feature value sub vector data structure in association with the features activities tasks for which the execution state is relevant.

In block the processing core may receive or generate a full classifier model that includes a large number of decision nodes . In various aspects the full classifier model may be or may include a model of measurable components a model of critical activity or a combination thereof. The decision nodes may collectively identify describe test or evaluate all or many of the features and data points that are relevant to determining whether an activity is an ongoing critical activity whether there is sufficient natural obfuscation to prevent a side channel attack during an ongoing critical activity and or whether a device behavior is not benign i.e. contributing to the degradation in performance or power consumption characteristics of the computing device over time . For example in block the processing core may generate a full classifier model that includes one hundred 100 decision nodes that test forty 40 unique conditions or features.

In an aspect the decision nodes may be decision stumps e.g. boosted decision stumps etc. . Each decision stump may be a one level decision tree that has exactly one node that tests one condition or feature. Because there is only one node in a decision stump applying a feature vector to a decision stump results in a binary answer e.g. yes or no malicious or benign etc. . For example if the condition tested by a decision stump is is the frequency of SMS transmissions less than x per min applying a value of 3 to the decision stump will result in either a yes answer for less than 3 SMS transmissions or a no answer for 3 or more SMS transmissions . This binary yes or no answer may then be used to classify the result as indicating that the behavior is either malicious non benign M or benign B . Since these stumps are very simple evaluations basically binary the processing to perform each stump is very simple and can be accomplished quickly and or in parallel with less processing overhead.

In an aspect each decision node may be associated a weight value that is indicative of how much knowledge is gained from answering the test question and or the likelihood that answering the test condition will enable the processing core to determine whether a device behavior is benign. The weight associated with a decision node may be computed based on information collected from previous observations or analysis of activities behaviors software applications or processes in the computing device . In an aspect the weight associated with each decision node may also be computed based on how many units of the corpus of data e.g. cloud corpus of data or behavior vectors are used to build the node. In an aspect the weight values may be generated based on the accuracy or performance information collected from the execution application of previous data behavior models or classifiers.

In block the processing core may generate a lean classifier model that includes a focused subset of the decision nodes included in the full classifier model . In various aspects the lean classifier model may be or may include a model of measurable components a model of critical activity or a combination thereof. As part of the operations for generating the lean classifier model in block the processing core may perform feature selection operations which may include generating an ordered or prioritized list of the decision nodes included in the full classifier model determining a number of unique test conditions that should be evaluated to classify a behavior without consuming an excessive amount of processing memory or energy resources of the computing device generating a list of test conditions by sequentially traversing the ordered prioritized list of decision nodes and inserting a test condition associated with each sequentially traversed decision node into the list of test conditions until the list of test conditions includes the determined number of unique test conditions and generating an information structure that preferentially or exclusively includes the decision nodes that test one of the test conditions included in the generated list of test conditions. In an aspect the processing core may generate a family classifier models so that each model in the family of classifier models evaluates a different number of unique test conditions and or includes a different number of decision nodes.

In block the processing core may trim cull or prune the decision nodes i.e. boosted decision stumps included in one of the lean classifier models to generate an application specific classifier model that preferentially or exclusively includes the decision nodes in the lean classifier model that test or evaluate conditions or features that are relevant to a specific software application i.e. Google wallet such as by dropping decision nodes that address API s or functions that are not called or invoked by the application as well as dropping decision nodes regarding device resources that are not accessed or modified by the application. In an aspect the processing core may generate the application specific classifier model by performing feature selection and culling operations.

In various aspects the processing core may identify decision nodes for inclusion in a application specific classifier model based on labeling information associated with a software application the results of performing static analysis operations on the application the results of performing install time analysis of the application by evaluating the operating system file and or access permissions of the software application by evaluating the API usage of the application etc. In an aspect the labeling information may identify an activity type of activity a software application or a type of software application as being or being associated with a critical activity that is vulnerable to side channel attacks. The processing core may also determine the category type or classification of each software application and or identify the decision nodes that are to be included in a application specific classifier model by reading an application store label associated with the software application by performing static analysis operations and or by comparing the software application to other similar software applications.

In an aspect in block the processing core may generate a plurality of application specific classifier models each of which evaluate a different software application. In various aspects the application specific classifier models may be or may include a model of measurable components a model of critical activity or a combination thereof. In an aspect the processing core may generate an application specific classifier model for every software application in the system and or so that every application running on the computing has its own active classifier. In an aspect in block the processing core may generate a family of application specific classifier models and each application specific classifier model in the family of application specific classifier models may evaluate a different combination or number of the features that are relevant to a single software application.

In block the processing core may generate a plurality of device specific classifier models each of which evaluate device specific features that are relevant to a current operating state type or configuration of the computing device . In various aspects the device specific classifier models may be or may include a model of measurable components a model of critical activity or a combination thereof. As part of the operations for generating the device specific classifier models in block the processing core may determine a number of unique test conditions that should be evaluated to classify an activity or behavior without consuming an excessive amount of processing memory or energy resources of the computing device generate a list of test conditions by sequentially traversing the plurality of test conditions in the lean classifier model and inserting those test conditions that are relevant to classifying the activity or behavior into the list of test conditions until the list of test conditions includes the determined number of unique test conditions and generating the device specific classifier models to include the decision nodes in the lean classifier model that test one of the conditions included in the generated list of test conditions.

In block the processing core may use one or any combination of the locally generated classifier models to perform real time behavior monitoring and analysis operations and predict whether a complex computing device behavior is not benign whether a current activity is a critical activity and or whether there is sufficient natural obfuscation to prevent a side channel attack. In an aspect the computing device may be configured to use or apply multiple classifier models in parallel. In an aspect the processing core may give preference or priority to the results generated from applying or using application based classifier models and device specific classifier models over the results generated from applying using the lean classifier model .

By dynamically generating the classifier models locally in the computing device to account for application and device specific features and or functionality the various aspects allow the computing device to focus its monitoring operations on a small number of features that are most important for determining whether to perform obfuscation operations. Further by using the real time behavior monitoring and analysis to apply classifier models that include the models of measurable components and critical activities the various aspects allow the computing device to intelligently determine whether to perform obfuscation operations without performing a significant number of additional operations. This improves the performance and power consumption characteristics of the computing device and allows the computing device to perform the real time behavior monitoring and analysis operations continuously or near continuously without consuming an excessive amount of its processing memory or energy resources.

In block the processing core may monitor activities of the computing device such as by performing any of the operations of the behavior observer module discussed above with reference to . In block the processing core may generate a behavior vector characterizing a monitored activity. In block the processing core may apply the generated behavior vector to a classifier model which may be or may include a model of critical activity. In determination block the processing core may determine whether the monitored activity is a critical activity. In an aspect the operations of applying the generated behavior vector to the classifier model and determining whether the monitored activity is a critical activity may be performed by the behavior analyzer module discussed above with reference to . In an aspect in blocks and the behavior analyzer module may perform any or all of the behavior analysis operations discussed in this application.

In response to determining that the monitored activity is not a critical activity i.e. determination block No the processing core may continue monitoring activities of the computing device in block . In response to determining that the monitored activity is a critical activity i.e. determination block Yes the processing core may determine whether the monitored activity is an ongoing activity and or likely to be performed in the near future in determination block .

In response to determining that the monitored activity is not an ongoing activity i.e. determination block No the processing core may continue monitoring activities of the computing device in block . In response to determining that the monitored activity is an ongoing activity i.e. determination block Yes in block the processing core may determine that the computing device is vulnerable to side channel attacks and or that obfuscation is required and perform any or all of obfuscation operations discussed in this application or known in the art.

In block of the processing core may monitor the levels of natural obfuscation that is or will be produced by measurable components of the computing device. In block the processing core may generate a behavior vector characterizing the natural obfuscation. In block the processing core may apply behavior vector to a classifier model which may be or may include a model of measurable components. In determination block the processing core may determine whether there is or will be enough natural obfuscation in the system to defend the computing device against a side channel attack during the performance of a critical activity. In response to determining that there is or will be enough natural obfuscation in the system to defend the computing device against a side channel attack i.e. determination block Yes the processing core may continue monitoring the natural obfuscation in block . In response to determining that there is not enough natural obfuscation i.e. determination block No the processing core perform obfuscation operations in block .

In block the processing core may monitor the current or predicted future activities of the computing device and the levels of natural obfuscation that is or will be produced by measurable components of the computing device during the activities. In block the processing core may generate behavior vectors characterizing a monitored activity and the natural obfuscation associated with that activity. In block the processing core may apply the behavior vectors to one or more classifier models which may include models of critical activity and models of critical components.

In determination block the processing core may determine whether the monitored activity is an ongoing critical activity. In response to determining that the monitored activity is not an ongoing critical activity i.e. determination block No the processing core may continue monitoring activities and or obfuscation levels in block . In response to determining that the monitored activity is an ongoing critical activity i.e. determination block Yes in determination block the processing core may determine whether there is sufficient obfuscation in the system to prevent a side channel attack during the performance of the critical activity. In response to determining that there is sufficient obfuscation in the system to prevent a side channel attack i.e. determination block Yes the processing core may continue monitoring activities and or obfuscation levels in block . In response to determining that there is not sufficient obfuscation in the system to prevent a side channel attack i.e. determination block No the processing core may perform obfuscation operations in block .

In block the processing core may perform observations to collect behavior information from various components that are instrumented at various levels of the mobile device system. In an aspect this may be accomplished via the behavior observer module discussed above with reference to .

In block the processing core may generate a behavior vector characterizing the observations the collected behavior information and or a mobile device behavior. In block the processing core may use a full classifier model received from a network server to generate a lean classifier model or a family of lean classifier models of varying levels of complexity or leanness . To accomplish this the processing core may cull a family of boosted decision stumps included in the full classifier model to generate lean classifier models that include a reduced number of boosted decision stumps and or evaluate a limited number of test conditions.

In block the processing core may select the leanest classifier in the family of lean classifier models i.e. the model based on the fewest number of different mobile device states features behaviors or conditions that has not yet been evaluated or applied by the mobile device. In an aspect this may be accomplished by the processing core selecting the first classifier model in an ordered list of classifier models.

In block the processing core may apply collected behavior information or behavior vectors to each boosted decision stump in the selected lean classifier model. Because boosted decision stumps are binary decisions and the lean classifier model is generated by selecting many binary decisions that are based on the same test condition the process of applying a behavior vector to the boosted decision stumps in the lean classifier model may be performed in a parallel operation. Alternatively the behavior vector applied in block may be truncated or filtered to just include the limited number of test condition parameters included in the lean classifier model thereby further reducing the computational effort in applying the model.

In block the processing core may compute or determine a weighted average of the results of applying the collected behavior information to each boosted decision stump in the lean classifier model. In block the processing core may compare the computed weighted average to a threshold value or values that indicate whether the observed behaviors are likely benign or not benign and or likely critical activities or not critical activities. In other words the thresholds applied in block to weighted average results may be used by the processing core to determine whether a firm classification of criticality or threat can be made using the applied lean classifier model.

In determination block the processing core may determine whether the results of this comparison and or the results generated by applying the selected lean classifier model are able to classify the activity as critical or not critical or classify a behavior as benign or not benign in other words suspicious . If the processing core determines that the results are unable to classify an activity as critical or non critical or that a behavior is suspicious i.e. determination block No the processing core may repeat the operations in blocks to select and apply a stronger i.e. less lean classifier model that evaluates more device states features behaviors or conditions until the behavior is classified as malicious or benign with a high degree of confidence. In other words in the operations in block and determination block the processing core may determine whether the results of applying a lean classifier may be used to classify with a high degree of confidence that an activity as critical or not critical and or that a behavior as either malicious or benign and if not repeat the analysis using a stronger lean classifier model.

If the processing core determines that the results enable the processing core to classify with a high degree of confidence that an activity as critical or not critical and or that a behavior as either malicious or benign i.e. determination block Yes in block the processing core may use the result of the comparison generated in block to classify an activity as either critical or non critical for purposes of assessing the need for obfuscation actions and or a behavior of the mobile device as benign or potentially malicious for purposes of taking corrective actions.

In an alternative aspect method the operations described above may be accomplished by sequentially selecting a boosted decision stump that is not already in the lean classifier model identifying all other boosted decision stumps that depend upon the same mobile device state feature behavior or condition as the selected decision stump and thus can be applied based upon one determination result including in the lean classifier model the selected and all identified other boosted decision stumps that that depend upon the same mobile device state feature behavior or condition and repeating the process for a number of times equal to the determined number of test conditions. Because all boosted decision stumps that depend on the same test condition as the selected boosted decision stump are added to the lean classifier model each time limiting the number of times this process is performed will limit the number of test conditions included in the lean classifier model.

As described above the operations of classifying activities as either non critical in which case obfuscation actions are unnecessary or critical in which case a determination of a need for obfuscation actions may be made used for countering side channel attacks may be accomplished using the same or similar behavior analysis processes for monitoring device behaviors to recognize non benign e.g. malicious or performance degrading for purposes of taking corrective actions. As discussed above with reference to method illustrates operations for identifying the potential for and taking defensive actions to protect against side channel attacks. illustrates an aspect method for performing dynamic and adaptive observations to identify and rectify non benign e.g. malicious or performance degrading behaviors.

Referring to method may be performed by a processing core in a computing device such as a mobile computing device. In block the processing core may perform coarse observations by monitoring observing a subset of a large number factors behaviors that could contribute to the computing device s degradation over time. In block the processing core may generate a behavior vector characterizing the coarse observations and or the computing device behavior based on the coarse observations. In block the processing core may identify subsystems processes and or applications associated with the coarse observations that may potentially contribute to the computing device s degradation. This may be achieved for example by comparing information received from multiple sources with contextual information received from sensors of the computing device. In block the processing core may perform behavioral analysis operations based on the coarse observations. In an aspect as part of blocks and the processing core may perform one or more of the operations discussed above with reference to .

In determination block the processing core may determine whether suspicious behaviors or potential problems can be identified and corrected based on the results of the behavioral analysis. When the processing core determines that the suspicious behaviors or potential problems can be identified and corrected based on the results of the behavioral analysis i.e. determination block Yes in block the processing core may initiate a operations to correct the behavior and return to block to perform additional coarse observations.

When the processing core determines that the suspicious behaviors or potential problems cannot be identified and or corrected based on the results of the behavioral analysis i.e. determination block No in determination block the processing core may determine whether there is a likelihood of a problem. In an aspect the processing core may determine that there is a likelihood of a problem by computing a probability of the computing device encountering potential problems and or engaging in suspicious behaviors and determining whether the computed probability is greater than a predetermined threshold. When the processing core determines that the computed probability is not greater than the predetermined threshold and or there is not a likelihood that suspicious behaviors or potential problems exist and or are detectable i.e. determination block No the processor may return to block to perform additional coarse observations.

When the processing core determines that there is a likelihood that suspicious behaviors or potential problems exist and or are detectable i.e. determination block Yes in block the processing core may perform deeper logging observations or final logging on the identified subsystems processes or applications. In block the processing core may perform finer deeper and more detailed observations on the identified subsystems processes or applications. In block the processing core may perform further and or deeper behavioral analysis based on the deeper and more detailed observations. In determination block the processing core may again determine whether the suspicious behaviors or potential problems can be identified and corrected based on the results of the deeper behavioral analysis. When the processing core determines that the suspicious behaviors or potential problems cannot be identified and corrected based on the results of the deeper behavioral analysis i.e. determination block No the processor may repeat the operations in blocks until the level of detail is fine enough to identify the problem or until it is determined that the problem cannot be identified with additional detail or that no problem exists.

In an aspect as part of blocks of method the processing core may perform real time behavior analysis of the system s behaviors to identify suspicious behaviors from limited and coarse observations to dynamically determine the behaviors to observe in greater detail and to dynamically determine the precise level of detail required for the observations. This enables the processing core to efficiently identify and prevent problems from occurring without requiring the use of a large amount of processor memory or battery resources on the device.

The various aspects may be implemented on a variety of computing devices an example of which is illustrated in . Specifically is a system block diagram of a mobile computing device in the form of a smartphone cell phone suitable for use with any of the aspects. The cell phone may include a processor coupled to internal memory a display and to a speaker . Additionally the cell phone may include an antenna for sending and receiving electromagnetic radiation that may be connected to a wireless data link and or cellular telephone transceiver coupled to the processor . Cell phones typically also include menu selection buttons or rocker switches for receiving user inputs.

A typical cell phone also includes a sound encoding decoding CODEC circuit that digitizes sound received from a microphone into data packets suitable for wireless transmission and decodes received sound data packets to generate analog signals that are provided to the speaker to generate sound. Also one or more of the processor wireless transceiver and CODEC may include a digital signal processor DSP circuit not shown separately . The cell phone may further include a ZigBee transceiver i.e. an IEEE 802.15.4 transceiver for low power short range communications between wireless devices or other similar communication circuitry e.g. circuitry implementing the Bluetooth or WiFi protocols etc. .

The aspects and network servers described above may also be implemented in variety of commercially available server devices such as the server illustrated in . Such a server typically includes a processor coupled to volatile memory and a large capacity nonvolatile memory such as a disk drive . The server may also include a floppy disc drive compact disc CD or DVD disc drive coupled to the processor . The server may also include network access ports coupled to the processor for establishing data connections with a network such as a local area network coupled to other communication system computers and servers.

The processors may be any programmable microprocessor microcomputer or multiple processor chip or chips that can be configured by software instructions applications to perform a variety of functions including the functions of the various aspects described below. In some mobile devices multiple processors may be provided such as one processor dedicated to wireless communication functions and one processor dedicated to running other applications. Typically software applications may be stored in the internal memory before they are accessed and loaded into the processor . The processor may include internal memory sufficient to store the application software instructions. In some servers the processor may include internal memory sufficient to store the application software instructions. In some receiver devices the secure memory may be in a separate memory chip coupled to the processor . The internal memory may be a volatile or nonvolatile memory such as flash memory or a mixture of both. For the purposes of this description a general reference to memory refers to all memory accessible by the processor including internal memory removable memory plugged into the device and memory within the processor itself.

The foregoing method descriptions and the process flow diagrams are provided merely as illustrative examples and are not intended to require or imply that the steps of the various aspects must be performed in the order presented. As will be appreciated by one of skill in the art the order of steps in the foregoing aspects may be performed in any order. Words such as thereafter then next etc. are not intended to limit the order of the steps these words are simply used to guide the reader through the description of the methods. Further any reference to claim elements in the singular for example using the articles a an or the is not to be construed as limiting the element to the singular.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the aspects disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The hardware used to implement the various illustrative logics logical blocks modules and circuits described in connection with the aspects disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Alternatively some steps or methods may be performed by circuitry that is specific to a given function.

In one or more exemplary aspects the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored as one or more instructions or code on a non transitory computer readable medium or non transitory processor readable medium. The steps of a method or algorithm disclosed herein may be embodied in a processor executable software module which may reside on a non transitory computer readable or processor readable storage medium. Non transitory computer readable or processor readable storage media may be any storage media that may be accessed by a computer or a processor. By way of example but not limitation such non transitory computer readable or processor readable media may include RAM ROM EEPROM FLASH memory CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that may be used to store desired program code in the form of instructions or data structures and that may be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above are also included within the scope of non transitory computer readable and processor readable media. Additionally the operations of a method or algorithm may reside as one or any combination or set of codes and or instructions on a non transitory processor readable medium and or computer readable medium which may be incorporated into a computer program product.

The preceding description of the disclosed aspects is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the aspects shown herein but is to be accorded the widest scope consistent with the following claims and the principles and novel features disclosed herein.

