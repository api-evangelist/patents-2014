---

title: Off-screen input capture for mobile device
abstract: A method includes capturing stylus input via a background task running on a mobile device, wherein the stylus input is from user interactions with the stylus separate from the mobile device, suppressing display of stylus input on a display screen of the mobile device while capturing stylus input via the background task, and storing the stylus input on a computer readable storage device accessible by the mobile device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304612&OS=09304612&RS=09304612
owner: Lenovo (Singapore) Pte. Ltd.
number: 09304612
owner_city: Singapore
owner_country: SG
publication_date: 20140307
---
Note taking applications on mobile devices and touch screen displays generally capture a stylus input interacting with sensors on the touch screen. A note taking application is in focus on the display in order to receive and process the input. The predominant method of note taking on mobile devices is comprised of a two part system. On screen stylus capture technology electro magnetic resonance and capacitive sensing provide the input channel to the operating system s input system. A purpose specific note taking application accepts the input events from the devices operating system and processes them into a stroke data format typically a proprietary format for editing searching text recognition manipulation and future recall.

A method includes capturing stylus input via a background task running on a mobile device wherein the stylus input is from user interactions with the stylus separate from the mobile device suppressing display of stylus input on a display screen of the mobile device while capturing stylus input via the background task and storing the stylus input on a computer readable storage device accessible by the mobile device.

A machine readable storage device has instructions for execution by a processor of the machine to perform capturing stylus input via a background task running on a mobile device wherein the stylus input is from user interactions with the stylus separate from the mobile device suppressing display of stylus input on a display screen of the mobile device while capturing stylus input via the background task and storing the stylus input on a computer readable storage device accessible by the mobile device.

A system includes a processor a touchscreen display coupled to the processor and a memory device coupled to the processor and having a program stored thereon for execution by the processor to capture stylus input via a background task running on the processor wherein the stylus input is from user interactions with the stylus separate from the mobile device suppress display of stylus input on the touchscreen display of the mobile device during capture of stylus input via the background task and store the stylus input on a computer readable storage device accessible by the mobile device.

In the following description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments which may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the present invention. The following description of example embodiments is therefore not to be taken in a limited sense and the scope of the present invention is defined by the appended claims.

The functions or algorithms described herein may be implemented in software or a combination of software and human implemented procedures in one embodiment. The software may consist of computer executable instructions stored on computer readable media such as memory or other type of hardware based storage devices either local or networked. Further such functions correspond to modules which are software hardware firmware or any combination thereof. Multiple functions may be performed in one or more modules as desired and the embodiments described are merely examples. The software may be executed on a digital signal processor ASIC microprocessor or other type of processor operating on a computer system such as a personal computer server or other computer system. The article a or an means one or more unless explicitly limited to a single one.

Off screen note taking capture is performed while a user interacts with a device s main screen displaying a different output. The captured notes may be stored in files allowing the user to replay the notes through a selected third party note application. Files may include various data structures such as pages or blocks which may be stored in various types of storage devices such as for example an in memory buffer or database. In one embodiment Android Jellybean and Nexus may be used as the software and hardware platforms.

The captured notes may be communicated via wired or wireless connections and between the stylus and mobile device in some embodiments and recorded as actual stylus movements by the user or may be rendered into a format compatible with a particular note taking device and stored on a storage device integrated into the mobile device or other storage device. In further embodiments the surface may capture and transmit the notes. By capturing raw stylus data in a background of the mobile device the touch screen of the mobile device may be used by the user to interact with a different application or mobile device function. The stylus data may be stored in memory on the mobile device or in a networked based storage device.

The stylus input may be suppressed from being displayed on the display . The term suppression is intended to mean that the stylus input is either not displayed at all during the note taking displayed in an area outside of a foreground task display area such as in a background task display area or may even be displayed in a foreground task display area in a portion of the display area that does not significantly interfere with user interaction with the foreground task.

In a further embodiment notes captured off screen may be replayed into a note taking application of the user s choice. The captured notes may be captured in a format native to the operating system and played back via an operating system input system such as HID input system on Windows or a motion event system on Android. Users may want to be able to view edit and save their notes into other formats in the future to be able to work with different applications. Playing back captured stylus movements into an application of choice allows the stylus movements to be rendered by a selected note taking application. Playing back at least partially rendered captured stylus movements into a native note taking application allows ease of editing in such note taking application without significant additional processing.

Capturing stylus or pen strokes and motions outside of applications provides the opportunity to define a universal format to be used in storing this information. Universal formats open the ability for this stored information to be used in many other applications now and in the future. Consider the scenario of a new note taking application being released providing features that your previously favorite note taking application does not support. Having your previous notes stored in an application agnostic format will allow for simple import into this new note taking application. Since most of the applications today rely on a proprietary format moving notes from one application to another is very difficult if even possible.

Given that off screen note taking will free up the display of the mobile device used to capture notes the user will be able to maximize the use of their device. Other activities can be pursued while taking notes such as video conferencing web browsing or watching a student lecture.

Another benefit of enabling off screen note taking is being able to capture notes while the mobile device is in a low power state. Most mobile devices enabled for note taking employ digitizers embedded into the device s display to capture pen strokes. In order to use these subsystems the device must be fully powered up with the display on. In one embodiment the off screen solution only powers on the wireless ultrasonic transceiver and low level operating system facilities to capture note data.

With off screen note taking the interaction and user experience is fundamentally different. When the user is writing off screen with a wireless enabled stylus it is not necessary for the strokes to appear on screen since the strokes are being made in the air or on some other physical medium a piece of paper notebook etc . The strokes made off screen are captured for computational processing in the future injecting into note taking applications . In one embodiment once the user has finished taking notes the set of strokes that make up the notes taken are then stored on the system in the form of input events created by the operating system. This set of events is all that is needed to re generate the input into note taking processing applications in the future. In some embodiments the strokes may correspond to a bit map for applications such as Paint while in other embodiments the strokes may correspond to lines and polygons such as for drawing applications which may be included in the term note taking application. In still further embodiments the strokes may be rendered into a proprietary format corresponding to a selected note taking application.

In some embodiments the stylus may include an ultrasonic pen that may be used along with a sensor to measure distance to the pen using sound distance measurements. Many other types of input device may be used as a stylus in further embodiments.

Sometime following note taking a user may want to recall the notes by processing them through a note taking application of their choice. Since the notes are stored in the operating systems motion or HID event format it is possible to replay these events back through the OS input system in order to have a note taking application process them.

Normally operating systems handle the stylus inputs and feed the applications with self defined type of events such as MotionEvent on Android. It usually requires that the applications have a view or window on display and those events will be delivered to the applications through the system. However in various embodiments a background service without a view window is used to monitor those events by modifying the system. The events can then be filtered stored by the background service to suit its needs.

The consideration of the stored data format is to capture all the information of the platform input event and to recreate the platform input event for later replay through the system. Since it relies on the platform input system for the replay all the apps for the platform should not have any issue handling the events.

Normally the off screen capture device digitizer ultrasonic is configured calibrated to have the capture area mapped to the display so the input event Xs and Ys will be the same as on screen to the applications. However there is information such as device ID tool type . . . which can be utilized by the capture service to filter out other inputs such as on screen touch.

Normally the operating systems have some system method for the software to simulate some hardware input events such as key press touch pen input etc. One way to replay the captured data would be a service to read the stored data and recreate the input events and send to the system as simulated hardware input events.

For off screen capture mode the on screen stylus input and visual indication pen cursor will mess up the on screen running applications so the stylus input may be surpassed from going to the normal system view window channel and hide the on screen stylus cursor. The end users may be provided a clear indication of the writing surface boundary and stylus movement a fix sized paper . . . also a visual indicator may be provided blinking LED etc for the ongoing capture to help users understand the surface boundary.

The captured stylus data s coordinates are for the full screen. However each application has its own unique display layout on the screen and most likely the area for accepting system pen input will not be the whole screen and the coordinates of that area is hard to figure out if not impossible. In one embodiment the application s intended input area is provided and translated scaled from the captured coordinates to the app display coordinates. In one embodiment the replay may be integrated with the application itself such that the application reads out the captured data and render the data onto its canvas directly.

In one embodiment a user may drag down a status bar to expose control buttons . Control buttons may be exposed in other ways including a separate application running on the mobile device in further embodiments. A user may press a Start Capture button to automatically start a new page for note taking. The control buttons may be hidden once a control is selected and exposed again by dragging down the status bar. Notes are then written on the off screen surface . Meanwhile the user may interact with functions appearing on the main screen such as Browser Email etc. When a new page is desired the user may drag the status bar and select a New Page button. Notes may then be taken on the new page using the off screen writing surface . Once the user decides that no more note taking is needed the user may drag down the status bar to press a Stop Capture button.

To replay notes previously taken into a selected application the user may User start a desired note application and proceed to a note view. Again using the status bar to expose functions related to off screen note taking several more functions may be selected including a Show Replay Files function. A user interface with a list of all the files 1 file correspondents to 1 page will be presented on screen . The user may then select a file to replay. This user interface will disappear and the note application will be on focus and the stored notes will be replayed on the note application resulting in the notes appearing on the screen . In various embodiments events may be batched to improve replay speed. For instance ACTION MOVE MotionEvents may be batched to one event before sending to the system. The coordinates of the MotionEvent are also translated from the screen coordinates to the targeted note application s on screen view coordinates. There may also be a modification on the Android framework to safeguard the impact of replaying the MotionEvents. The replayed MotionEvents will be sent to the view only if the targeted note app is on display.

A capture service defines ink capture and playback systems. It manages the state of ink capture and the playback system including states such as ready capturing and playing back. The capture service manages underlying framework input capture system to switch from normal input operations to file capture only such that stylus input during capture is sent to the file rather than to an entire system for display. In one embodiment the capture service is started at mobile device boot up and keeps running in the background. It hosts the state machine implementation and manipulates the inputs and controls other activities.

A control view also referred to as a notification view provides a visual state of capture service allowing the user the ability to change the state of the capture system between start stop playback and start stop capture. A file list viewer provides a view for browsing ink files for playback and deletion. The file list viewer communicates with the capture service to make requests for playback and manages all the file creation and interface with the underlying file system.

In one embodiment the control view provides the list of functions in a pull down menu from the status bar to display the start capture new page stop capture and show replay files buttons. Control view may be implemented through notification and may reside on the status bar in some embodiments.

The framework is shown in simplified form to highlight the components that interact with the software architecture . Included are an input manager with corresponding input manager service and native input manager service . A power manager module controls power states for the mobile device and instrumentation module provides support of devices coupled to mobile device .

Various modifications may be made to the underlying framework which in one embodiment is an Android framework. The modifications are done to capture stylus input in the background and replay captures input is acceptable performance. In one embodiment the capture service uses a JavaScript Object notation Json to stream input data to and from files so a Json library is also added to the framework. The input manager may be modified to define an interface for capture service to monitor inputs. The framework may be further modified to prevent stylus inputs from going to normal views when it is in off screen capture mode. A system property to indicate the mode may be used in different embodiments. The screen cursor may also be hidden when in off screen capture mode. In one embodiment an asynchronous method for sending MotionEvents to the system may be used to speed up the playback process. The framework may also be modified to only send the MotionEvents to views if a targeted application is on display.

From the read state the user may select to playback a selected recorded note taking session at causing the state to change to a play back state . When the playback is done at the state returns to the ready state .

Computer readable instructions stored on a computer readable medium are executable by the processing unit of the computer . A hard drive CD ROM and RAM are some examples of articles including a non transitory computer readable medium. For example a computer program capable of providing a generic technique to perform access control check for data access and or for doing an operation on one of the servers in a component object model COM based system may be included on a CD ROM and loaded from the CD ROM to a hard drive. The computer readable instructions allow computer to provide generic access controls in a COM based computer network system having multiple users and servers.

2. The method of example 1 wherein the computer readable storage device is a storage device integrated with the mobile device.

3. The method of any of examples 1 2 and further comprising replaying the stored stylus input into a note taking application running on the mobile device.

5. The method of example 4 wherein each file corresponds to a page and the stylus input corresponds to notes taken on the page.

6. The method of any of examples 1 5 wherein the stylus input is stored in a format native to an operating system of the mobile device and further comprising providing access to an application interface at the same time as stylus input is captured via the background task.

7. The method of any of examples 1 6 and further comprising partially rendering captured stylus input prior to storing the stylus input to facilitate editing of notes corresponding to the stylus input.

10. The method of any of examples 1 9 and further comprising displaying selectable function buttons on the mobile device display to facilitate selection of capture and replay functions wherein the function buttons are hidden following selection of a function.

11. A machine readable storage device having instructions for execution by a processor of the machine to perform 

12. The machine readable storage device of example 11 wherein the processor of the machine further performs replaying the stored stylus input into a note taking application running on the mobile device.

13. The machine readable storage device of example 12 wherein replaying the stored stylus input comprises 

14. The machine readable storage device of example 13 wherein each file corresponds to a page and the stylus input corresponds to notes taken on the page.

15. The machine readable storage device of any of examples 11 14 wherein the stylus input is stored in a format native to an operating system of the mobile device and further comprising providing access to an application interface at the same time as stylus input is captured via the background task.

17. The system of example 16 wherein the processor further replays the stored stylus input into a note taking application running on the mobile device.

18. The system of example 17 wherein when the processor replays the stored stylus input the processor 

19. The system of example 18 wherein each file corresponds to a page the stylus input corresponds to notes taken on the page and wherein the stylus input is stored in a format native to an operating system of the mobile device and further comprising providing access to an application interface at the same time as stylus input is captured via the background task.

20. The system of any of examples 16 19 wherein the stylus input is stored in the form of input events and wherein multiple input events are batched into one event.

Although a few embodiments have been described in detail above other modifications are possible. For example the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Other embodiments may be within the scope of the following claims.

