---

title: Secure execution and update of application module code
abstract: A dynamic root of trust can be injected in an application module on a client device using a backend server and can be continuously monitored to ensure authenticity, integrity and confidentiality at load time, run time and update time of the application module. The dynamic root of trust can be updated directly from the backend server and can be used to establish a time bound trust chain for the other software modules loaded and executed as part of the application module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09530009&OS=09530009&RS=09530009
owner: Visa International Service Association
number: 09530009
owner_city: San Francisco
owner_country: US
publication_date: 20140627
---
This application is a non provisional application of and claims the benefit of priority of U.S. Provisional Application No. 61 840 340 entitled Secure Container filed on Jun. 27 2013 which is herein incorporated by reference in its entirety for all purposes.

Client devices such as mobile phones are running more and more sensitive applications. The authenticity integrity and confidentiality in any application module running on a client device needs to be ensured. These security properties cannot be ensured by relying on the application module itself the client device s operating system kernel and platform or the client device s firmware hardware.

A dynamic root of trust can be injected updated in an application module on a client device using a backend service. The time bound root of trust can be continuously monitored to ensure that is it authentic has integrity and is confidential at the load time run time and or update time of the application module. The root of trust can be updated directly from the backend service and can be used to establish a dynamic trust chain for the other software modules loaded and executed as part of the application module e.g. software development kit . In certain implementations the dynamic root of trust is time bound wherein the trust chain is updated in response to an expiration of a timer e.g. watchdog timer . In other implementations the dynamic root of trust is updated in response to certain events or updates in the code itself.

In certain aspects the application module may include application module frontend services an application module kernel a root of trust and fixed function and non intelligent software modules. The backend service can perform updates using over the air methods based on elapsed times application module events e.g. watchdog timer expiration transaction initiation secure input provided by the user etc. patch cycle and measured and attested values of the software modules in the application module.

Embodiments of the invention can use a layered update mechanism. A layered update mechanism can be used to update different components of the application module with different frequencies. For example the update mechanism can allow for frequent updates of the root of trust frequent updates of the application module kernel less frequent updates of the application module frontend services and even less frequent updates of fixed function and non intelligent software modules. The application module layers can be updated with patches different types of tamper resistance and detection capabilities e.g. modified code and data encryption code obfuscation code morphing etc. and revoked key encryption keys KEKs in key stores. Embodiments of the invention may be used for mobile applications requiring security assurance in a client device web application servers etc.

One embodiment of the invention is directed to a method comprising a determining by a communication device that a first root of trust in the communication device needs to be updated the communication device comprising a memory storing a plurality of application module components b receiving by the communication device a second root of trust c after receiving the second root of trust determining by the communication device attestation values for the application module components in a trust chain verification process and d storing by the communication device the determined attestation values determined during the trust chain verification process.

Another embodiment of the invention is directed to a communication device comprising a processor and a computer readable medium coupled to the processor the computer readable medium comprising code executable by the processor to implement a method comprising a determining that a first root of trust in the communication device needs to be updated the communication device comprising a memory storing a plurality of application module components b receiving a second root of trust c after receiving the second root of trust determining attestation values for the application module components in a trust chain verification process and d storing the determined attestation values determined during the trust chain verification process.

One embodiment of the invention is directed to a monitoring by a remote server computer a first root of trust in a communication device the communication device comprising a memory storing a plurality of application module components b determining by the remote server computer that the first root of trust in the communication device needs to be updated c providing by the remote server computer a second root of trust to the communication device after determining that the first root of trust in the communication device needs to be updated d determining by the remote server computer attestation values for the application module components of the communication device in a trust chain verification process and e storing by the remote server computer the determined attestation values determined during the trust chain verification process.

Another embodiment of the invention is directed to a remote server computer comprising a processor and a computer readable medium coupled to the processor the computer readable medium comprising code executable by the processor to implement a method comprising a monitoring a first root of trust in a communication device the communication device comprising a memory storing a plurality of application module components b determining that the first root of trust in the communication device needs to be updated c providing a second root of trust to the communication device after determining that the first root of trust in the communication device needs to be updated d determining attestation values for the application module components of the communication device in a trust chain verification process and e storing the determined attestation values determined during the trust chain verification process.

Systems methods apparatuses and computer readable media are described for providing enhanced security for communication devices in particular mobile communication devices.

Authenticity integrity and confidentiality in a security application module running on a client device such as a mobile phone need to be ensured to the fullest extent. Most security systems and modules define and anchor their security solution based on a Root of Trust RoT . Typically a root of trust is a system element that is inherently trusted by design. Typical solutions rely on hardware means to build a root of trust for example using a ROM or a flash memory. However in many instances the operating system and other client applications may not be trusted. Additionally access to the hardware RoT may be through interfaces provided by the operating system. If the operating system is not trusted the software executing above the operating system such as the security application module has no assurance that it can trust the hardware RoT accessible through the operating system. Further in some instances a security application module can be cloned or otherwise tampered with. Thus update and execution of a hardened RoT that the security application module can trust even in instances where the underlying operating system may be in an indeterminate trust state is desirable.

Embodiments of the invention provide a software based root of trust. A root of trust can be confined to a specific domain and can define an origin of a trust chain. However since the software based root of trust can be vulnerable to attacks some embodiments of the invention provide a dynamic root of trust that can provide enhanced level of security. The dynamic nature of the root of trust and the trust chain built using the dynamic root of trust can ensure the authenticity integrity and confidentiality at load time run time and update time of the security application module.

Typically the root of trust is built upon a standalone system. Since in most instances a standalone system may not provide highest level of security embodiments of the invention further utilize a backend service to harden the security application modules on a client device through a layered approach. For example some embodiments of the invention allow building a root of trust and a trust chain among different layers of the security application module in association with the backend service. The backend service can also manage and monitor the run time load time and update time measurement attestation values of the security application module and the underlying client device. The backend service can also compare the attestation values of the security application module received from the client device with the attestation values determined by rebuilding the trust chain on the backend server to determine if the software and hardware of the client device has not been tampered with during the update and execution of the security application module.

Prior to discussing embodiments of the invention description of some terms may be helpful in understanding embodiments of the invention.

A root of trust may define an origin of a trust chain. In embodiments of the invention a root of trust is implemented in software that has heavy tamper resistance. For example in some embodiments a root of trust may be hardened and trusted functional code that executes other software layers. In some embodiments a root of trust is a root key e.g. a string of characters that may be used to encrypt keys associated with other software modules or act as the root for measurement of other software modules. In yet some embodiments the root of trust may be a combination of functional code and root key as described above. In embodiments of the invention a root of trust may be dynamic. For example the root of trust may be time bound i.e. the root of trust changes over time.

A communication device may include a client device that can communicate with a backend server. For example in some embodiments a communication device is a mobile device. Some examples of a mobile device include a mobile phone a PDA a laptop a tablet etc.

 Application module components may include one or more components of an application module. For example the application module may be a software development kit SDK for a mobile device. In some embodiments the application module components include an application module front end an application module kernel and an application module root of trust. Different application module components can have different tamper resistance. For example the application module front end can have low tamper resistance the application module kernel can have medium tamper resistance and the application module root of trust can have high tamper resistance.

 Attestation values may include values that indicate that a module is trustworthy. For example attestation values of a module can indicate that the module has not been tampered with. In one embodiment attestation values may be determined by performing measurements of the module. In another embodiment attestation values may be in the form of a certificate or a key associated with the module.

A measurement may refer to a process to determine attestation values of a module. In some embodiments measurement may include taking a fingerprint of the state of the module for example by taking a hash of the executable code of the module. For example a hash function such as SHA 1 may be used to calculate a hash of an application module or an application module component. In one embodiment measurement values may represent virtual form of platform configuration registers PCRs .

A trust chain verification process may include a process to verify a trust chain. In some embodiments a trust chain verification process starts from a root of trust. In some embodiments a root of trust can verify or attest a first software layer built upon the root of trust the first software layer can verify a second software layer built upon the first software layer and so on. For example a trust chain verification process may include exchange of certificates or keys between different software layers. In one embodiment a trust chain verification process may include determining attestation values for different layers in the trust chain and comparing with corresponding attestation values determined by a remote server computer.

A remote server computer may typically be a powerful computer or cluster of computers. For example the remote server computer can be a large mainframe a minicomputer cluster or a group of servers functioning as a unit. The remote server computer may be associated with an entity such as a payment processing network a wallet provider a merchant an authentication cloud an acquirer or an issuer.

A secure channel may be a networking channel between two entities such as a remote server computer and mobile device that may allow the two entities to communicate with each other through a secure channel without eves dropping by a third entity spoofing of the communication by a third entity or masquerading of the third entity as one of the two expected entities participating in the secure communication. Known techniques such as secure socket layer SSL protocols may be used in establishing a secure channel.

The system may include a mobile device that may be communicatively coupled to a wallet provider cloud server and an authentication cloud server via one or more communication networks not shown . For example the communication network may be a TCP IP based network cellular network or any other suitable network. The mobile device may also be connected to a mobile network operator and or an internet service provider data network. In some embodiments of the invention a secure channel e.g. SSL based channel is established for communication between the mobile device the wallet provider cloud server and the authentication cloud server .

A user may be an individual or a person who is able to operate the mobile device . The user may be able to download one or more applications on the mobile device . For example the user may be able to download a wallet application on the mobile device to register one or more payment accounts with the authentication cloud server using the mobile device to use the wallet application to make a payment for a transaction to enter a PIN or a password to authenticate for a transaction etc.

The mobile device may be a communication device that may be configured to communicate with the wallet provider cloud server and the authentication cloud server via one or more communication networks. The mobile device may be a mobile phone a tablet a notebook a PDA a laptop a netbook a key fob etc. The depiction of mobile device as shown in illustrates an example software stack implemented within the mobile device . For example the mobile device may include a wallet mobile application A an application module B a mobile OS operating system platform C a mobile OS operating system kernel D and mobile hardware E.

The wallet mobile application A may be an application that may be used to conduct financial transactions using the mobile device such as to make payments or to perform money transfer. In some embodiments the wallet mobile application A may be associated with one or more payment accounts e.g. credit or debit card account loyalty accounts etc. for the user .

The application module B may include an SDK software development kit such as a security SDK. In some embodiments of the invention the application module B may be provided by the authentication cloud server . In some embodiments execution and update of the application module B can be controlled through the backend service provided by the authentication cloud server . In some embodiments the wallet provider cloud server may download the application module B from the authentication cloud server and integrate with the wallet mobile application A. For example the application module may be accessed using the wallet mobile application A. In some embodiments the application module B may be used to ensure the security of the payment transactions driven by the wallet mobile application A using the mobile device . In some embodiments the application module B may include a version number a digital certificate a transport key a wallet identifier a wallet provider authentication cloud key a shared secret etc. In some embodiments the user may download the wallet mobile application A that is integrated with the application module B to the mobile device from the wallet provider cloud server .

The mobile OS platform C can provide an operating system platform to run other programs such as applications e.g. wallet mobile application A and application module B on the mobile device . An operating system may be a collection of software that manages computer hardware resources and provides common services for applications.

The mobile OS kernel D can provide the base OS functionality for the mobile device . The mobile OS kernel D may be configured to manage the mobile device s hardware and resources e.g. memory CPU I O device etc. and allow other programs e.g. applications to run and use these resources.

The mobile hardware E may include a communication interface e.g. WiFi 2G 3G 4G modem timer system memory storage memory e.g. flash multimedia card etc. video graphics display card audio touch screen keyboard GPS camera and other suitable hardware components.

The wallet provider cloud server may be configured to build the wallet mobile application A and to integrate the wallet mobile application A with the application module B.

The authentication cloud server may be a remote server computer that can provide backend service to the application module B to build a dynamic root of trust and trust chain. The authentication cloud server can inject and update the dynamic root of trust in the application module B on the mobile device . The authentication cloud server can monitor the root of trust associated with the application module B and push over the air updates or changes e.g. using a wireless network such as WiFi mobile broadband etc. to harden the application module B. For example the updates may be derived by elapsed time application module events e.g. watchdog timer expiration transaction initiation secure input provided by the user patch cycle measured and attested values of the software modules in the application module B . The authentication cloud server can manage and monitor the run time load time and update time measurement attestation values of the application module B and the underlying mobile device . The authentication cloud server can compare the attestation values of the application module B by rebuilding a trust chain and comparing with the respective attestation values. In some embodiments the authentication cloud server may be associated with a payment processing network such as VisaNet operated by Visa .

As illustrated in the figure a backend server may provide backend verification to a mobile device using a secure channel. The mobile device may be similar to the mobile device . The backend server may be similar to the authentication cloud server . The mobile device may include an application module that may be similar to the application module B. The application module may comprise various components or software layers for example an application module front end A an application module kernel B a time bound root of trust software C and a fixed function viewed software module D.

The application module front end A may provide frontend services for the application module that are built on top of the application module kernel B. For example the application module front end A may provide interface to the backend server for updates to the application module . In some embodiments the application module front end A can exhibit low tamper resistance and may require less frequent updates from the backend server . In some embodiments the application module front end A may provide services for interfacing with other applications such as providing an application programming interface API application module updates authentication and binding transaction and payment assurance etc.

The application module kernel B can provide another layer of abstraction. In some embodiments the application module kernel B may perform mapping and abstracting of the system resources in the underlying mobile OS platform C and expose it to the wallet mobile application A. In some embodiments the application module kernel B can exhibit medium tamper resistance and may require frequent updates from the backend server .

The time bound root of trust software C can exhibit most rigorous level of tamper resistance and may require very frequent updates from the backend server . The dynamic root of trust software C can establish a chain of trust for the other software modules loaded and executed as part of the application module . For example in some embodiments the dynamic root of trust software C can establish a trust chain by attesting the application module kernel B that can attest the application module front end A. In some embodiments when the dynamic root of trust software C is updated by the backend server the trust chain is rebuilt to incorporate the root of trust updates.

In some embodiments the fixed function viewed software module D may function as a virtual machine that can process the application module kernel B code and data. In some embodiments the fixed function viewed software module D may be based on a non native instruction set architecture and may include a system call emulator. For example the fixed function viewed software module D may include system calls interrupt routines input output routines and other low level activities. The fixed function viewed software module D may seldom require updates. In some embodiments of the invention the fixed function viewed software module D may not be part of the trust chain.

The backend server may include components comprising a backend infrastructure A a measuring and monitoring service B and an update service C.

The backend infrastructure A may include infrastructure to support the components of the backend server e.g. the measuring and monitoring service B and the update service C. For example the backend infrastructure A may include one or more of a processor memory database network interfaces etc.

The measuring and monitoring service B may monitor the attestation values associated with the root of trust and or the chain of trust for the application module . The measuring and monitoring service B may also perform measurements to determine attestation values for various software layers of the application module to determine if the attestation values match with the attestation values determined by the mobile device .

The update service C can update the root of trust software C based on certain timers or application events. For example in some embodiments of the invention updates can be driven by elapsed time occurrence of an application module event e.g. watch dog timer expiration transaction initiation secure input provided by the user etc. patch cycle measured and attested values of the software modules in the application module B etc. The update service C may provide patches different types of tamper resistance and detection capabilities e.g. modified code and data encryption code obfuscation code morphing etc. and revoked KEKs key encryption keys on key stores.

In step the application module B code is executed from the root of trust on the mobile device . For example the root of trust may be a first root of trust that may be part of the initialization routine of the application module B. Referring back to the application module kernel B can run the application module front end A on the dynamic root of trust software C.

In step the authentication cloud server can monitor a number of triggers to determine if the root of trust software on the mobile device may need an update. In some embodiments the triggers may be driven by occurrence of an application module event on the mobile device . For example if the user initiates a transaction or enters a secure input e.g. a PIN or a password using the mobile device the authenticity integrity and confidentiality in the application module B may need to be ensured e.g. validating that the PIN or the payment account information used for the transaction was not broken into or tampered with . The application module event may also include expiration of timers on the mobile device for example watchdog timers. In some embodiments the triggers may be driven by a specific time elapsed on the authentication cloud server . For example the root of trust may be time bound based on a timer that expires after a fixed or a variable time period. In some embodiments the triggers may be driven based on the patch cycle of the application module contents e.g. a patch or update may need to be applied to one or more software layers of the application module B. In some embodiments the triggers may be driven by the measured and attested values of various components in the application module B. For example if the attestation values of one or more software components in the application module B do not match with the corresponding attestation values determined by the authentication cloud server the root of trust and the trust chain may need to be updated on the mobile device .

In step if the authentication cloud server determines that the root of trust does not need an update the authentication cloud server may continue to monitor the triggers.

In step if the authentication cloud server determines that the root of trust needs an update then the authentication cloud server may send a second root of trust e.g. using over the air methods to the mobile device . For example the second root of trust may be an updated first root of trust or may be generated by the authentication cloud server .

In step an attestation value for the root of trust software C may be determined. In one embodiment the attestation value may be determined by measuring the root of trust software C for example by calculating a hash of the root of trust software C. In some embodiments of the invention update of the root of trust results in re measuring all the software layers built upon the root of trust software C for example the application module kernel B and the application module frontend A.

In step an attestation value for the application module kernel B may be determined. In one embodiment the attestation value may be determined by measuring the application module kernel B for example by calculating a hash of the application module kernel B. In some embodiments of the invention update of the application module kernel B results in re measuring the software layer built upon the application module kernel B e.g. the application module frontend A.

In step an attestation value for the application module front end A may be determined. In one embodiment the attestation value may be determined by measuring the application module front end A for example by calculating a hash of the application module front end A.

In step the attested values may be stored on the mobile device or elsewhere in other embodiments . In one embodiment the attested values for example attestation values determined in steps and may be stored in a data store on the mobile device .

In step the authentication cloud server may determine in parallel or at a later time an attestation value of the root of trust software C. In one embodiment the attestation value may be determined by measuring the root of trust software C for example by calculating a hash of the root of trust software C. In another embodiment the attestation value of the root of trust software C may already be stored in a memory coupled to the authentication cloud server .

In step the authentication cloud server may determine in parallel or at a later time an attestation value of the application module kernel B. In one embodiment the attestation value may be determined by measuring the application module kernel B for example by calculating a hash of the application module kernel B. In another embodiment the attestation value of the application module kernel B may already be stored in a memory coupled to the authentication cloud server .

In step authentication cloud server may determine in parallel or at a later time an attestation value of the application module front end A. In one embodiment the attestation value may be determined by measuring the application module front end A for example by calculating a hash of the application module front end A. In another embodiment the attestation value of the application module front end A may already be stored in a memory coupled to the authentication cloud server .

In step the attestation values determined in steps and may be stored in a memory coupled to the authentication cloud server . The authentication cloud server may query the mobile device for the attestation values determined by the mobile device . In some embodiments of the invention the authentication cloud server may query the mobile device for the attestation values at any point in time e.g. after step step step or another point in time.

In step the mobile device may provide the attestation values to the authentication cloud server in response to the query. In one embodiment the attestation values may be in the form of a certificate.

In step the authentication cloud server may compare the attestation values provided by the mobile device with the stored attestation values. In one embodiment the authentication cloud server may verify the certificate received from the mobile device 

In step if the attestation values match or the certificate is validated then the mobile device may be deemed secure. If the attestation values do not match or the certificate is not validated then the mobile device may be deemed insecure and the functions on the mobile device may be disabled e.g. the wallet mobile application A may be disabled.

The application module B may include an application module frontend services an application module kernel a tamper resistant system and a virtual machine platform . Note that in other embodiments the application module B may include more or less components than illustrated in .

The application module frontend services may be similar to the application module front end A as discussed with reference to . The application module frontend services may include an SDK update service module A. The SDK update service module A may allow secure and authentic update of the application module B. For example update of the application module B may be performed by the authentication cloud server and may be decoupled from the mobile device app store. In some embodiments the application module frontend services may provide attestation values of the software modules in response to the query from the authentication cloud server .

The application module kernel is similar to the application module kernel B as discussed with reference to . The application module kernel may include an attestation and measurement interface module A and timers B. The attestation and measurement interface module A may allow the application module frontend services to retrieve periodically or event triggered attestation or measurement values from the tamper resistant system . The attestation and measurement interface module A can also allow binding and measurement of various states of the application module B. In some embodiments the attestation values are sealed before providing to the authentication cloud server .

The timers B may include watchdog timers regular timers monotonic counters etc. Some of the timers may be synchronized with the authentication cloud server based on the heartbeat received from the authentication cloud server . In some embodiments expiration of the watchdog timer may trigger an update of the roof of trust and the trust chain.

The tamper resistant system may include a measurement logic A a root of trust B a data store C and a key store D. The measurement logic A may be used to measure the root of trust B e.g. by taking a hash. The data store C may store data at rest e.g. attestation values measured by the measurement logic A. The key store D may stores encryption key. The data store C and key store D may be protected using key encryption key KEK that may be managed by the tamper resistant system .

The virtual machine platform can provide a software based emulation of a machine. The virtual machine platform may be based on a non native instruction set architecture ISA and may function as a system call emulator. In some embodiments of the invention the virtual machine platform may be simplified as a fixed function viewed software module to help prevent tampering of the virtual machine code. The virtual machine platform may provide a computing platform to run the application module kernel .

The mobile hardware E may include a processor a system memory a timer communications a camera a touch screen input a graphics display and a storage. The processor may be configured to execute instructions or code in order to implement methods processes or operations. The system memory may include a computer readable medium that may comprise code executable by the processor for implementing methods using some embodiments of the invention.

The graphics display may allow a user to view text numbers multimedia and other information. The touch screen input may allow the user to interact with the mobile device using a touch screen. In some embodiments the user may use a keypad not shown instead of or in addition to the touch screen interface to enter data into the mobile device . The camera may enable the user to take pictures videos and scan bar codes. The communications may provide a communication interface with different communication networks such as WiFi 2G 3G 4G modem etc. The storage may include flash embedded multimedia card eMMC secure digital SD card etc.

The authentication cloud server may include a processor operatively coupled to a network interface a database a memory and a computer readable medium . The computer readable medium may comprise instructions or code executable by the processor . The computer readable medium may comprise a monitoring service module an update service module and a measuring service module .

The network interface may be configured to communicate with the mobile device the wallet provider cloud server and other entities not shown using one or more communications networks.

The database may be configured to store information associated with the mobile device and the consumer . For example the database may store payment account information associated with the wallet mobile application A e.g. account numbers expiration dates issuer information etc. user personal information e.g. name address phone number etc. 

The memory may be configured to store attestation values for different software components associated with different client devices such as the mobile device . The memory be a non volatile memory that can retain the information in the absence of power. The memory may also store the code for the application module B.

The monitoring service module can monitor the root of trust on the mobile device . For example as discussed with reference to the monitoring service module may monitor the triggers in step to determine if the root of trust B needs an update.

The update service module can update the root of trust B on the mobile device . For example as discussed with reference to if the root of trust B on the mobile device needs an update as determined by the monitoring service module the update service module can push updates to update the root of trust B. For example the update service module can regenerate a new root of trust and load it on the mobile device via a secure channel.

The measuring service module can determine the attestation values for different software components of the application module B. For example as discussed with reference to the measuring service module can determine the attestation values for the root of trust software the application module kernel and the application module frontend as discussed in steps and . Further the measuring service module can query the mobile device for the attestation values for different software components for example determined in steps and with reference to . The measuring service module can compare the respective attestation values e.g. in step to determine if the mobile device software and hardware was not tampered with.

In step the application module B may attempt to set up a secure channel with the authentication cloud server . For example the secure channel may be established using keys stored in the key store D. In one implementation the secure channel may be established using a secure network stack implemented within the secure application module. In another implementation the secure channel may be established using an authenticated network stack from the operating environment such as the operating system.

In step the authentication cloud server can request the current version of the application module B from the update service module A. The version number of the application module B may include a collective version identifier for all of the components of the application module B or may include separate version identifiers for each component of the application module B. In one implementation the version number may be optionally signed and or encrypted using a key stored by the application module B. In one implementation the authentication cloud server may request version identifiers for individually identifying each component of the application B or a combination of components. As described previously the request for the version number of the application module B may be in response to an expiration of a timer occurrence of an event or request for update of the software.

In step the update service module A can request the current version from the data store C in the application kernel along with the attested measured values. In step the application kernel can retrieve the current version from the data store C along with the attested measured values.

In step the application module B can send the current version of the application module B or modules thereof with the attested measured values to the authentication cloud server over the secure channel. In some implementations a timestamp value may also be included with the response. The timestamp value may include the time at which the measurement was performed and or the time at which the application module B sends the response to the authentication cloud server .

In step the authentication cloud server can determine if the application module B is out of date. In some implementations the determination step may be performed based on the version number of the application module B received from the mobile device . In some implementations the determination step may be performed by comparing the attestation measurement value provided by the application module B executing on the mobile device and the attestation measurement value calculated and stored locally by the authentication cloud server .

In step the authentication cloud server can force download of the up to date application module B. The authentication cloud server may force a download for a variety of reasons. For example the authentication cloud server may force an update if the code running as part of the application module B is out of date determined using the version number of the application module B or if the attestation measurement values do not match up with the values stored locally by the authentication cloud server . The authentication cloud server may interpret any deviation of the attestation measurement value received from the mobile device from the value stored locally at the authentication cloud server as a trigger for taking further action such as forcing an update.

In step new version of the application module B is received and stored by the SDK update service module A on the mobile device B.

In step the update service module A can request the application module kernel to verify the new version of the application module B. In step the application module kernel can request the tamper resistant system to verify the new version of the application module B. In step the tamper resistant system can verify the new version of the application module B using keys retrieved from the key store D. For example the tamper resistant system may authenticate the new version of the application module B using a public key associated with the authentication cloud server . In one implementation the public key associated with the authentication cloud server may be stored in the key store D.

In step after the new version of the application module B is verified a success message can be returned to the application kernel from the tamper resistant system .

In step the new version of the application module B can be committed to the storage managed by the mobile OS platform C. Committing the new version of the application module B to storage may refer to either replacing the old version or tagging the new version of the application module B such that on the next restart the new version of the application module B is loaded.

In step a success message can be returned to the update service A from the application module kernel . The success message indicates to the update service that the application module B was properly stored and upon the next restart the new version of the application module B will be loaded.

In step the update service A can restart the application module B and allow rebuilding the trust chain. On the restart of the application module B the system loads the new version of the application module B instead of the old version rebuilds the trust chain and updates the measurements in the data store C and or key store D. Rebuilding the trust chain may include similar steps previously described in from .

In step a mobile wallet application is launched. For example the user may launch the mobile wallet application A on the mobile device . In another example the mobile wallet application A may automatically launch in response to a payment transaction.

In step an application module is started. In some embodiments the application module B may be started from the mobile wallet application A for example the application module B may be integrated with the mobile wallet application A. In certain implementations the mobile wallet application A utilizes security functionality provided by the application module and cannot operate without the launch of the application module B. For example the application module may provide an API for the mobile wallet application A to invoke for performing certain security functions such as encryption.

In step the virtual machine platform is loaded. In some embodiments the virtual machine platform may be loaded as part of the initialization routine of the application module B. In one implementation the application module B may be executed within a container such as a virtual machine managed by a virtual machine monitor. The virtual machine platform may allow the application module B to execute in isolation with respect to other potentially malicious software running on the same system.

In step the code is executed from root of trust. In some embodiments the root of trust B may be loaded as part of the initialization routine of the application module B. In certain embodiments the code associated with the root of trust may be trusted over other components in the application module B.

In step A the root of trust is self verified. For example in one embodiment at the time of initialization the root of trust B may be verified by comparing the root of trust value or measurement associated with the root of trust with a value stored for the root of trust on the system. For example the initialization root of trust value may be stored in a secure element of the mobile device . In another embodiment the root of trust may be verified with an endorsement key stored in the key store D.

In step if self verification of the root of trust B fails an error message may be returned to the mobile wallet application module A. In some instances the application module B may not launch or launch with limited functionality in the event that the self verification processor does not succeed.

In step B if self verification of the root of trust B succeeds a secure channel may be established with the authentication cloud server . A secure channel may be established using a secure network stack operating from within the application module B. Example protocols such as SSL Secure Socket Layer may be used in establishing a secure channel. In one implementation if a secure channel cannot be established with the authentication cloud server an error message may be returned to the mobile wallet application module A. In some instances the application module B may not launch or launch with limited functionality in the event that the secure channel cannot be established.

In step C a request to the authentication cloud server is sent for updates to the root of trust B. In one embodiment the SDK update service module A may send the request to the authentication cloud server . Since the trust in the application module B and the transactions performed using the mobile wallet application A originate from the root of trust used by the application module B the application module confirms with the authentication cloud server that the mobile device is not executing an outdated root or trust.

In step D the authentication cloud server determines if an update of the root of trust exists. For example the root of trust may have been updated at the authentication cloud server from the time the application module B was reset or initialized. Updates to the root of trust stored at the authentication cloud server may be as a result of new code releases with bug fixes new code releases with new features or new code releases with security fixes.

In step E if an update to the root of trust exists the mobile device may pull the updated root of trust from the authentication cloud server . For example the SDK update service module A may pull the updated root of trust from the authentication cloud server and store it locally in memory on the mobile device .

In step F the updated root of trust is verified. In one embodiment the root of trust may be verified by using a key from the key store D. For example the mobile device may ensure that the root of trust is generated provided by the authentication cloud server by verifying the signature of the root of trust using a public key for the authentication cloud server stored in the key store D.

In step G if verification of the updated root of trust is successful the root of trust load routine is executed to load the verified root of trust in the root of trust B. In one implementation if the verification process fails an error message may be sent to the mobile wallet application A and the authentication cloud server .

In embodiments of the invention update of the root of trust B results in re establishment of the trust chain e.g. updating the software layers built upon the root of trust. As discussed with reference to update of the root of trust B results in update of the tamper resistant system .

In step H the tamper resistant system is loaded. In one embodiment the tamper resistant system is loaded as part of executing the root of trust load routine. The tamper resistant system may install mechanisms to protect the execution of the code executing inside the application module B.

In step I the tamper resistant system is verified. For example the tamper resistant system may be verified by comparing the measurements of the tramper resistant system with attested value of the tamper resistant system stored in a secure location. At this point since a secure channel exists in one implementation the tamper resistant system may be verified against values requested and received from the authentication cloud server . In another implementation the measurement of the tamper resistant system may be compared with a locally stored value.

In step if verification of the tamper resistant system fails an error message is returned to the mobile wallet application module A. In some instances the application module B may not launch or launch with limited functionality in the event that the tamper resistant verification process fails.

In step J if verification of the tamper resistant system succeeds a request to the authentication cloud server is sent for updates to the tamper resistant system . In one embodiment the secure channel between the mobile device and the authentication cloud server may be utilized for sending the request to the authentication cloud server for updates.

In step K it is determined if an update to the tamper resistant system exist. For example the tamper resistant system may have been updated due to the update of the code of the tamper resistance system since the application module B was last initialized.

In step L if an update exists the update for the tamper resistant system is pulled from the authentication cloud server . The updates are received by the mobile device using the secure channel between the mobile device and the authentication wallet server .

In step M the tamper resistant system is verified. In some embodiments the tamper resistant system may be verified by using a public key associated with the authentication cloud server from the key store D or a certificate.

In step N the application module kernel is loaded. In embodiments of the invention as part of rebuilding the trust chain update of the tamper resistant system results in updating the application module kernel as discussed with reference to .

In step O the application module kernel is verified. For example the application module kernel may be verified by comparing with attested value of the application module kernel stored in a secure location e.g. secure element . In another implementation the application module kernel may be verified against values requested and received from the authentication cloud server . In another implementation the measurement of the application module kernel may be compared with a locally stored value e.g. key store secure element etc. .

In step if verification of the application module kernel fails an error message is returned to the mobile wallet application module B. In some instances the application module B may not launch or launch with limited functionality in the event that the application module kernel verification process fails.

In step P if verification of the application module kernel succeeds a request to the authentication cloud server is sent for updates to the application module kernel . In one embodiment the secure channel between the mobile device and the authentication cloud server may be used for sending the request to the authentication cloud server for updates.

In step Q it is determined if an update to the application module kernel exist. For example the tamper resistant system may have been updated due to the update of the code of the application module kernel since the application module B was last initialized.

In step R if an update exists the update for the application module kernel is pulled from the authentication cloud server . The update for the application module kernel may be communicated over the secure channel.

In step S the application module kernel is verified. In some embodiments the application module kernel may be verified by using a public key associated with the authentication cloud server from the key store D or a certificate.

In step initialization routine for the application module kernel is executed. In some embodiments initialization routine for the application module kernel may include initialization of timers memories various interfaces and reestablishing the secure channel with the authentication cloud server . In embodiments of the invention as part of rebuilding the trust chain update of the application module kernel results in updating the frontend services as discussed with reference to .

In step the frontend services are loaded. In one embodiment the application module frontend services module is loaded within the application module B at the end of the application module initialization routine. As previously discussed the frontend services may provide an interface for other applications such as the mobile wallet application A for invoking security services provided by the application module B.

In step the application module frontend services module is verified. In another implementation the application module frontend services module may be verified against values requested and received from the authentication cloud server . In another implementation the measurement of the application module kernel may be compared with a locally stored value e.g. key store secure element etc. .

In step if verification of the application module frontend services module fails an error message is returned to the mobile wallet application module A. In some instances the application module B may not launch or launch with limited functionality in the event that the application module frontend services module verification process fails.

In step if verification of the application module frontend services module succeeds the application module frontend services module may be initialized. In one embodiment the secure channel between the authentication cloud server and the application module frontend services module may be established. Once the verification process successfully completes the application module B may be ready for providing security services to other applications such as the mobile wallet application A.

In step the process returns control to the mobile wallet application A. In turn the wallet mobile application A may complete its own installation and start processing transactions such as payment transactions.

Even though the above figures discuss building a trust chain for four components of the application module B embodiments of the invention are not limited by the specific functionality or number of components comprised by the application module B. For example in another implementation the application module B may have seven or any number of components without deviating from the scope of the invention. In such an implementation aspects of the invention may recursively iterate through each component and verify its integrity and authenticity check for updates with a remote server such as the authentication cloud server update the component and rebuild the trust chain if any updates changes are available and continue with the loading of the component.

Embodiments of the invention as described herein provide a method system and apparatus for securely updating and maintaining a secure application module. Most security systems and modules define and anchor their security solution based on a hardware root of trust. Typical solutions rely on hardware means to build an immutable root of trust for example using a ROM or a flash memory so that hackers cannot modify the root of trust and subvert the system. However in many instances the operating system and other client applications may not be trusted. Additionally access to the hardware root of trust may be through interfaces provided by the operating system. If the operating system is not trusted the software executing above the operating system such as the security application module has no assurance that it can trust the hardware root of trust accessible through the operating system. Furthermore in some instances the security module may be executing in a virtualized or isolated environment with inadequate visibility to the system hardware for the purposes of assuring security. Thus update and execution of a hardened root of trust that the security application module can trust even in instances where the underlying operating system may be in an indeterminate trust state is desirable.

Embodiments of the invention provide a robust root of trust using software means. In contrast to the hardware root of trust where the trust is established using the immutable nature of the root of trust e.g. fuses read only memory etc. embodiments of the invention establish trust by frequently revoking and re provisioning the root of trust within a specific domain such as the secure application module. The revoking and re provisioning of the root of trust is performed by a trusted backend server such as an authentication cloud server using a secure channel. This is advantageous since subverting such a dynamic application module by a hacker as described by embodiments of the invention where the root of trust is constantly being updated and monitored by a trusted backend server is very difficult. This dynamic nature of the root of trust within the software module may even be better than hardware root of trusts since most software modules do not have direct access to hardware resources. This is particularly advantageous for a security application module that aims at providing self contained security and cannot depend or trust the state of the executing environment such as the underlying operating system or other applications executing on the system.

Along with a dynamic root of trust embodiments of the invention also describe dynamically updating and monitoring by the backend server the trust chain in a self contained security application module. Embodiments of the invention describe building a trust chain at the time of loading the application module B. However in addition embodiments of the invention also describe dynamically monitoring and updating each component module layer of the application module. Such monitoring and updating of the various components of the application module B is advantageous since a hacker cannot easily find a vulnerable point of entry using any component of the application module B since the various components and the trust chain is updated periodically and based on events timers attacks code updates etc. monitored by the device and or the backend server.

Therefore embodiments of the invention are advantageous since the dynamic nature of the root of trust and the trust chain build using the dynamic root of trust can ensure the authenticity integrity and confidentiality at load time run time and update time of the security application module.

The various participants and elements described herein with reference to may operate one or more computer apparatuses to facilitate the functions described herein. Any of the elements in including any servers or databases may use any suitable number of subsystems to facilitate the functions described herein.

Examples of such subsystems or components are shown in . The subsystems shown in are interconnected via a system bus . Additional subsystems such as a printer keyboard fixed disk or other memory comprising computer readable media monitor which is coupled to display adapter and others are shown. Peripherals and input output I O devices which couple to I O controller which can be a processor or other suitable controller can be connected to the computer system by any number of means known in the art such as serial port . For example serial port or external interface can be used to connect the computer apparatus to a wide area network such as the Internet a mouse input device or a scanner. The interconnection via system bus allows the central processor to communicate with each subsystem and to control the execution of instructions from system memory or the fixed disk as well as the exchange of information between subsystems. The system memory and or the fixed disk may embody a computer readable medium.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium such as a random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a CD ROM. Any such computer readable medium may reside on or within a single computational apparatus and may be present on or within different computational apparatuses within a system or network.

The above description is illustrative and is not restrictive. Many variations of the invention will become apparent to those skilled in the art upon review of the disclosure. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the pending claims along with their full scope or equivalents.

One or more features from any embodiment may be combined with one or more features of any other embodiment without departing from the scope of the invention.

A recitation of a an or the is intended to mean one or more unless specifically indicated to the contrary.

It should be understood that the present invention as described above can be implemented in the form of control logic using computer software in a modular or integrated manner. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will know and appreciate other ways and or methods to implement the present invention using hardware and a combination of hardware and software.

