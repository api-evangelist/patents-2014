---

title: Methods and apparatus to scale application deployments in cloud computing environments using virtual machine pools
abstract: Methods and apparatus are disclosed to scale application deployments in cloud computing environments using virtual machine pools. An example method disclosed herein includes displaying a user-selectable control to specify whether the application is to be scaled in accordance with a scaling policy, based on selection of the user-selectable control, storing, in a blueprint of the application, an indication of whether the application is to be scaled in accordance with the scaling policy, based on the indication in the blueprint, preparing a virtual machine pool in the computing environment, the virtual machine pool including a virtual machine provisioned for use in a scaling operation, in response to a request to scale the application deployed in a deployment environment, determining whether configuration information satisfies a scaling requirement, and based on the determination, performing the scaling operation in accordance with the request to scale by transferring the virtual machine to the deployment environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424065&OS=09424065&RS=09424065
owner: VMware, Inc.
number: 09424065
owner_city: Palo Alto
owner_country: US
publication_date: 20140807
---
Benefit is claimed under 35 U.S.C. 119 a d to Foreign application Serial No. 3116 CHE 2014 filed in India entitled METHODS AND APPARATUS TO SCALE APPLICATION DEPLOYMENTS IN CLOUD COMPUTING ENVIRONMENTS USING VIRTUAL MACHINE POOLS filed on Jun. 26 2014 by VMware Inc. which is herein incorporated in its entirety by reference for all purposes.

This disclosure relates generally to virtualized computing environments and more particularly to methods and apparatus to scale application deployments in cloud computing environments using virtual machine pools.

 Infrastructure as a service sometimes referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a fully virtualized network and pooled computing platform sometimes referred to as a cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud or a private cloud computing platform that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables application developers to build deploy and manage the lifecycle of a virtual application e.g. a web application a networked application etc. at a greater scale and at a faster pace than before. To deploy an application a developer who understands the architecture of the application must coordinate with a system administrator who controls access to computing resources to determine which computing resources e.g. computing networking and or storage and or software services e.g. software packages should be provisioned to support execution of the application.

Numerous tools exist to create and deploy applications in cloud computing environments. For example application provisioning tools enable cloud computing designers to create and standardize application deployment topologies on infrastructure clouds. Some application provisioning tools include graphical user interfaces GUIs that enable designers to generate application deployment topologies called application blueprints. These application blueprints define the structure of an application enable the use of standardized application infrastructure components and or include installation dependencies and or default configurations for custom and packaged enterprise applications. Application blueprints specify logical deployment topologies that are portable across private IaaS clouds e.g. an enterprise cloud based on VMware vSphere Platform or any other suitable private cloud network and across public clouds e.g. Amazon Web Services AWS or any other suitable public cloud network . Cloud providers offer a cloud instance for deployment. The deployment environment provides an environment for the cloud provider.

Many applications are developed with a multi tier architecture in which functions such as presentation application processing and data management are logically separate components. For example an enterprise s custom banking application that has a multi tier architecture may use a cluster of application server nodes e.g. Moss Application Servers to execute in a scalable runtime environment a database node e.g. a relational database management system such as MySQL to store account data and a load balancer node to distribute network traffic for robustness. Deploying a multi tiered application in a cloud computing environment may involve a cloud computing platform provider e.g. VMware providing a deployment environment to provision virtual computing resources e.g. virtual machines VMs in which an enterprise e.g. an organization an agency a corporation etc. can deploy its application. When the application is deployed workloads e.g. schedules collections of one or more processes or tasks assigned to virtual computing resources may change over time. In situations when workloads decrease the enterprise may be paying for idle or underutilized virtual computing resources to which workloads are no longer assigned. In contrast when workloads increase the enterprise performance may decrease as a result of providing slower services to customers as the virtual computing resources are overloaded.

To more efficiently use resources in a virtual computing environment examples disclosed herein enable scaling in and scaling out processes. For example resources e.g. virtual machines networking resources storage resources etc. may be allocated e.g. scaled out for use by a virtual computing node when workloads increase at the computing node. In addition resources can be freed e.g. scaled in from the computing node when workloads decrease at that computing node. In this manner resources are not inefficiently sitting idle at a virtual computing node when for example the node has no need for those resources. Also the virtual computing node is allocated additional resources when needed to for example address increased workloads.

Examples disclosed herein include a scaling handler that scales a node e.g. a virtual machine or a cluster of virtual machines based on for example utilization of virtual computing resources. For example referencing the custom banking application example from above during periods of increased resource utilization e.g. peak tax season the scaling handler may scale out e.g. increase the number of application servers included in the first node to reduce the burden of increased workloads across the node. Unlike prior systems examples disclosed herein facilitate a scale out operation by for example provisioning e.g. allocating one or more virtual machine s of a first node in the deployment environment and updating other nodes that may be dependent on the first node to include a reference to the provisioned virtual machines. For example a load balancer may obtain configuration information from the newly provisioned virtual machines to allocate resources to them.

Typically provisioning virtual machines accounts for a disproportionate amount of time in scale out operations. For example in some common scale out systems provisioning a virtual machine can account for 35 percent of the overall time it takes to perform the scale out operation. Thus virtual machine provisioning is a performance bottleneck which may undesirably consume time and computing resources.

Examples disclosed herein include a pool manager to create a pool of virtual machines that are provisioned and may be readily fetched during a scale out operation. The pool of virtual machines may be provisioned during a first deployment of the application during a first scale out operation or may be created prior to deploying the application. Examples disclosed herein may customize the virtual machines in the pools based on client preferences. Once configured the virtual machines in the pools are placed in a suspended state until fetched during a scale out operation.

Examples disclosed herein include a policy handler to guide the scaling operation based on a virtual machine VM pool policy specified by a user e.g. an application developer an administrator etc. . For example a client may elect not to incorporate VM pools e.g. utilize prior systems performing scaling operations utilize one or more general VM pools or utilize one or more application level customized VM pools.

General VM pools are collections of one or more virtual machines that have been provisioned and configured to execute an operating system. For example while applying a VM pool policy the policy handler may cause the pool manager to create a first VM pool executing Microsoft Windows and a second VM pool executing a Linux operating system. Virtual machines from general VM pools may be fetched and configured to execute one or more application components of a deployed application.

Application level customized VM pools are collections of one or more virtual machines that have been provisioned and pre loaded with software to execute a specified program. For example a pool manager creating an application level customized VM pool may provision virtual machines configure the virtual machines to execute an operating system install and configure an application component and install an application. Examples disclosed herein create a separate customized VM pool for each application. Thus for example while applying another example VM pool policy the policy handler may cause the pool manager to create a first VM pool configured to execute a first application and a second VM pool configured to execute a second application.

To more efficiently perform a scaling operation examples disclosed herein fetch virtual machines from a corresponding VM pool during the scaling operation. Once a virtual machine is retrieved from the VM pool it may be started e.g. powered ON and installed with application artifacts e.g. property files application specific script files third party JARs and application source JARs . In this manner the overall time to perform a scale out operation can be reduced from minutes to seconds e.g. because the intensive provisioning process for the virtual machines has been partially or completely performed at an earlier time .

Examples disclosed herein create VM pools within a cloud provider interface and or within a network virtualization platform. For example a VM pool may be created in a network of storage arrays connected to and shared between groups of servers through storage area networks to be aggregation of storage resources and to provide increased flexibility in provisioning the storage resources to for example the virtual machines. For example the pool manager may create example general VM pools within deployment environments provided by a cloud computing platform provider and may create application level customized VM pools within a network of storage arrays.

As used herein a node is a virtual machine and or a cluster of virtual machines also referred to as a cluster node . A virtual machine is a software stack comprising one or more operating systems applications and or services. As used herein an application also referred to herein as a virtual application or an appliance is a logical deployment unit that defines the relationship between an operating system one or more application components and or services dependent on the operating system. An application may also define the relationship between application components that can be distributed across multiple virtual machines. As used herein an application component refers to services and or code components. Code components are application specific binaries scripts or processes etc. usually written by a developer and packaged into one or more files to provide logic e.g. relationship definitions for an application. In some examples code components may be a type or format of scripting and application code. Example types of code components include Java Archive JAR files Java Enterprise Archive EAR files Java web application archive WAR files Ruby Gem packages SQL scripts and other suitable modules of scripting logic. Services as used herein are scripted software that provide a software infrastructure for an application. Services may be reused in multiple applications. Example services include application servers e.g. Rails Apache Tomcat JBoss etc. database servers e.g. GemFire MySQL SQLFire MongoDB Postgress etc. monitoring services e.g. Hyperic SpringInsight etc. web servers e.g. Apache VMWare vFabric Enterprise Ready Server etc. messaging services e.g. RabbitMQ etc. middleware services etc. As used herein the term component generally refers to one or more of application components code components and or services.

In the illustrated example of the developer uses an example application director which may be implemented by one or more virtual machines to orchestrate deployment of the application into the deployment environment . In the illustrated example of the application director includes an example blueprint generator an example deployment plan generator an example deployment director and an example scaling handler .

In the illustrated example of the example blueprint generator generates an example application blueprint specifying a logical topology of the application which is to be deployed. The example blueprint maps the structure of the application as a collection of components nodes e.g. an example load balancer node an example application server appserver node and an example database node . Applications such as the application of are typically developed with a multi tier architecture in which functions such as presentation application processing and data management are logically separate components. For example the blueprint generator may generate a blueprint e.g. a topology map for an online store application specifying a web application executing on an application server e.g. an Apache Tomcat application server that uses a data store as a database e.g. a MongoDB . The example web application may be implemented by a Java web application archive e.g. a WAR file comprising dynamic web pages static web pages Java servlets Java classes and or other properties configuration information and or resource files included in the Java web application. In the illustrated example the blueprint is an abstract representation of the structure of the application including virtual machines and their corresponding application components operating systems dependencies and or configurations. In some examples the blueprint standardizes the structure of an application for repeated deployments in multiple and or diverse deployment environments. The application may alternatively describe the entire online store application including application server components and database components rather than just the web application itself.

In the illustrated example of the blueprint generator retrieves virtual computing resources from an example catalog to assemble the blueprint . For example the catalog may list virtual computing resources e.g. virtual machines networking resources storage resources etc. that may be provisioned from the cloud computing platform provider and corresponding application components e.g. software services scripts code components application specific packages etc. that may be installed on the provisioned virtual computing resources. The example catalog of the illustrated example is pre populated with available virtual computing resources and or application components. In some examples an administrator e.g. an information technology IT administrator a system administrator etc. customizes the catalog by adding and or modifying the available virtual computing resources and or application components listed in the catalog . For example the administrator may enter specifications configurations properties custom tasks etc. about each entry in the catalog . The example blueprint of the illustrated example includes an installation order for the application components during deployment. For example the blueprint may define dependencies between one or more of the application components. For example the developer may specify a dependency from an Apache service e.g. the example load balancer node to an application code package such as a web application e.g. the example appserver node . In some such examples the dependency may be that the load balancer may not be configured until installation of the web application is complete.

In the illustrated example of the deployment plan generator generates an example deployment plan based on the blueprint . The example deployment plan includes deployment settings e.g. state information such as virtual computing resource cluster sizes processing resources memory networking resources etc. and an execution plan identifying tasks having an order in which virtual computing resources are provisioned and application components are installed configured and started. The example deployment plan of the illustrated example is a process oriented view of the blueprint . For example the administrator may follow discrete steps included in the deployment plan to deploy the application . In some examples different deployment plans may be generated from a single blueprint to test prototypes e.g. new application versions to scale e.g. scale out or scale in deployments and or to deploy the application to different deployment environments e.g. testing environments staging environments production environments etc. .

In the illustrated example the deployment plan generator generates the deployment plan in response to user input e.g. from the developer to initiate a deployment process for the application in a specified deployment environment . In some examples the deployment plan generator allows the administrator to insert one or more custom tasks in the deployment plan . For example custom tasks may be scripts that when executed by a virtual machine perform operations that facilitate deployment of the application including for example monitoring tasks e mail and alert notification tasks operations that pre configure a virtual machine operations performed prior to provisioning a virtual machine and other scripting operations.

The example deployment director of orchestrates execution of the example deployment plan for the application in coordination with the example virtual machines included in the deployment. The example deployment director communicates with the cloud computing platform provider to provision and configure the example virtual machines in the deployment environment as specified by the deployment plan . In some examples the deployment director separates the deployment plan into local deployment plans for each virtual machine . In the illustrated example the deployment director maintains a central state of the deployment process that specifies the dependencies at deployment time between tasks to be performed across the virtual machines in a specified order. For example the deployment director may send a message to one or more of the virtual machines when deployment time dependencies in their respective local deployment plans are satisfied.

In some examples the deployment director monitors the status of the virtual machines and may perform a heartbeat procedure when a virtual machine is unresponsive e.g. due to host failure networking failure etc. . The example deployment director initiates a timeout interval for the virtual machines that defines a maximum amount of time before a virtual machine is deemed timed out and is checked for failure. When the timeout interval expires the example deployment director sends a heartbeat message to the timed out virtual machine. For example the heartbeat message may request that the timed out virtual machine respond with status and task updates e.g. within one minute of the heartbeat .

The example scaling handler of facilitates scaling of an application deployed in the deployment environment . The scaling handler of the illustrated example performs monitoring and modifying operations on the deployment e.g. scale in scale out update etc. . The example scaling handler monitors resource utilization e.g. computer processing in the deployment environment and initiates a scaling operation in response to obtained resource utilization information. For example the scaling handler may dynamically initiate a scale out operation when resource utilization of a workload increases and or initiate a scale in operation when resource utilization of the workload decreases.

In some other examples the scaling handler initiates a scaling operation e.g. scale in or scale out based on a schedule. For example the scaling handler may initiate a first scale out operation at 8 00 AM on weekdays to increase a number of web servers deployed in the deployment environment from for example three web servers to for example seven web servers and or initiate a second scale out operation at 9 00 PM on Sundays to return the number of web servers deployed in the deployment environment from two web servers e.g. where the deployment environment was previously scaled in to two web servers to three web servers. The example scaling handler may additionally or alternatively initiate a first scale in operation at 5 00 PM on weekdays to return the number of web servers deployed in the deployment environment from seven web servers to three web servers the scaling handler may initiate a second scale in operation to decrease the number of web servers deployed in the deployment environment from three web servers to two web servers etc. The scaling handler is described in further detail in conjunction with .

The example scaling handler includes an example policy handler to determine whether scaling operations performed on the nodes of the application are to be guided by e.g. performed in accordance with an example VM pool scaling policy . In the illustrated example the policy handler determines whether there is a VM pool scaling policy applicable to the deployed application . If no policy is available and or applicable to the deployed application the example scaling handler performs a scale out operation by provisioning new virtual machines in the deployment environment and configuring the virtual machines for use in the deployment environment .

If the example policy handler of determines that there is a VM pool scaling policy applicable and or available to the deployed application then the policy handler initiates generation of example VM pools . For example the policy handler may instruct an example pool manager to reserve an environment for the VM pools . In some examples the policy handler initiates generation of the VM pools before application deployments. For example the policy handler may obtain the blueprint generated by the example blueprint generator and after determining that a VM pool scaling policy is applicable and or available to application defined in the blueprint the policy handler may instruct the example pool manager to generate the VM pools . In some examples the policy handler initiates generation of the example VM pools during the first deployment of the application . In other examples the policy handler initiates generation of the example VM pools when a first scale out operation is to be performed on the application deployment or at another time.

In the illustrated example of the VM pool scaling policy is stored and or retrieved from the example catalog . The VM pool scaling policy defines the rules that apply to a sealing operation performed on a deployment of the example application . For example the VM pool scaling policy may provide information regarding how many VM pools are to be generated how many virtual machines are to be included in each VM pool how the virtual machines in the ones of the VM pools are to be configured e.g. configured to execute a specified operating system e.g. a general virtual machine configured to execute a specified application component e.g. an application level customized virtual machine etc. . In some examples the VM pool scaling policy includes rules for when and or whether a VM pool expansion may be performed. For example the VM pool scaling policy may specify that an initial VM pool is to include five application level customized virtual machines. In such an example if a scale out operation is to be performed that needs more than the five virtual machines available in the VM pool the policy handler may initiate a one time expansion of the VM pool to add five additional virtual machines that are general virtual machines. In this manner clients can determine whether they would prefer to save costs by using fewer virtual machines or improve performance efficiency by having more virtual machines available for scaling an application e.g. to quickly scale out an application using the multiple pre provisioned virtual machines in the VM pool .

In the illustrated example of the example scaling handler includes the example pool manager to manage VM pools generated in the cloud computing environment . For example the pool manager of generates the VM pools when initiated e.g. instructed by the example policy handler . When initiated the example pool manager of the illustrated example reserves one or more environments for hosting the VM pools . For example the pool manager may request one or more environments from the cloud computing platform provider . In some examples an example network virtualization platform e.g. a network of storage arrays connected to and shared between groups of servers through storage area networks thereby enabling aggregating storage resources and enabling increased flexibility in provisioning the storage resources to for example the virtual machines provides one or more environments in which the pool manager may generate VM pools .

In the illustrated example the example virtual machine pools are environments that host example virtual machines . In contrast to the virtual machines in the deployment environment the virtual machines deployed in the example VM pool are in a suspended state. That is the virtual machines are not powered ON. As a result while the example virtual machines of are provided networking details e.g. internet protocol IP addresses the virtual machines are inaccessible to the deployed application e.g. cannot be messaged e.g. pinged or accessed via a secure shell SSH server . In the illustrated example the pool manager maintains a record e.g. log of the suspended state virtual machines . For example the pool manager may store in a data structure such as a look up table IP addresses for the suspended state virtual machines the number of virtual machines available in the example VM pool the configurations of the example virtual machines e.g. guest operating system identifiers what if any component services and or application components are installed on the virtual machines etc. .

Although the scaling operations discussed above describe scale out operations scale in operations may also be guided by the VM pool scaling policy. For example as specified by the VM pool scaling policy if the includes VM pools e.g. the example VM pool rather than shutting down e.g. deleting selected ones of the virtual machines while performing the scale in operation the example scaling handler transitions the selected ones of the virtual machines into the suspended state. The example scaling handler may then return the suspended state virtual machines from the deployment environment to the VM pool . In some examples depending on the attributes of the VM pool scaling policy the scaling handler may shut down and or delete the selected ones of the virtual machines even if the VM pool scaling policy specifies the VM pool . For example if returning the selected ones of the virtual machines to the VM pool would exceed the maximum number of virtual machines permitted in the VM pool by the VM pool scaling policy the scaling handler may shut down and or delete the selected ones of the virtual machines to release the resources assigned to the selected ones of the virtual machines .

In the illustrated example of the deployment director provides a communication abstraction layer by which the application director may communicate with for example a heterogeneous mixture of cloud computing platform provider s and deployment environment s . In the illustrated example the deployment director provides the virtual machines with a series of tasks specific to e.g. customized for the respective virtual machines e.g. an example local deployment plan . The tasks may be scripts that are executed by the respective virtual machines to install configure and or start one or more components nodes e.g. the example load balancer node the example appserver node and or the example database node . For example a task may be a script that when executed by the virtual machines causes the respective virtual machines to retrieve and install particular software packages from an example central package repository e.g. a Git repository a package manager and or other application component resources .

In the illustrated example the deployment director coordinates with the virtual machines to execute the tasks in an order that observes installation dependencies between the virtual machines according to the deployment plan . For example in the deployment environment the example load balancer node is executed by the virtual machine the appserver node is executed by the virtual machine and the database node is executed by the virtual machine . The virtual machine of the illustrated example is configured based on the deployment plan to coordinate execution of tasks to deploy the load balancer node to run in the deployment environment . The virtual machine of the illustrated example is configured based on the deployment plan to coordinate execution of tasks to deploy the appserver node to run in the deployment environment . The virtual machine of the illustrated example is configured based on the deployment plan to coordinate execution of tasks to deploy the database node to run in the deployment environment . Although the load balancer node the appserver node and the database node are shown running on separate virtual machines in other examples one or more of the nodes may run on the same virtual machine . For example the load balancer node may run on the virtual machine while the appserver node and the database node may run on the same virtual machine

In the illustrated example of the cloud computing platform provider utilizes an infrastructure platform upon which the deployment environment may be executed. The infrastructure platform of the illustrated example includes example hardware resources such as example servers e.g. hardware servers networking hardware and one or more example storage array networks to provide an example virtualization environment. The example virtualization environment also referred to as a hypervisor or a virtual machine monitor facilitates execution of the virtual machines across the servers . As discussed in more detail below the virtual machines provide the virtual computing resources e.g. computing resources networking resources storage resources etc. that comprise the deployment environment . Example implementations of the virtualization environment include VMware ESX based hypervisor technologies provided by VMware Inc. the Xen Hypervisor provided by The Linux Foundation Hyper virtualization technologies Microsoft software etc.

In the illustrated example of the virtualization environment facilitates providing resources of the infrastructure platform to the deployment environment . The virtualization environment instantiates virtual machines according to a cloud template that defines a virtual machine having specified virtual computing resources. For example a cloud template may comprise metadata that describes the configuration of a virtual machine including computing resources networking resources storage resources etc. and other supporting libraries pre installed and or available for use to repeatedly create a virtual machine having the specified settings.

In the illustrated example of the virtual machines are hosted by e.g. executing within the virtualization environment on one or more of the example servers . For example the virtualization environment may provide resources for the example deployment environment within which one or more of the virtual machines may be concurrently instantiated and or executed. In some examples the visualization environment virtualizes resources equivalent to the example hardware resources . For example the virtualization environment may emulate hardware such as virtual hard drives virtual networking resources virtual processors virtual memory etc. for use by the virtual machines . In the illustrated example of the virtualization environment facilitates executing operating systems e.g. Microsoft Windows Linux Solaris x86 Netware FreeBSD etc. and the virtualization environment may include one or more guest operating systems to execute nodes .

The example virtual machines of the illustrated example include a pre installed bootstrap script that upon first boot retrieves an example deployment agent e.g. packaged as a JAR file from the example deployment director . Alternatively the deployment agent may be pre installed on the virtual machine . In the illustrated example of the deployment agent obtains a local deployment plan from the deployment director and executes the local deployment plan in coordination with the deployment director .

In the illustrated example of the example deployment agent is a process or daemon that communicates with the example deployment director . For example the deployment agent may communicate with the deployment director via an example addressing and discovery layer e.g. a common interface through which components of the example deployment environment can communicate and receive notifications to obtain the example local deployment plan . The example deployment agent of the illustrated example facilitates executing scripts representative of tasks included in the local deployment plan in coordination with the deployment director . For example executing scripts may include retrieving unpacking installing and or configuring application component packages. In the illustrated example the application component packages include a plurality of files similar to those in a WAR file organized into a tape archive file or a tar file and that may be retrieved via download from for example a Git repository a package manager and or other application component resources. In some examples the deployment agent may provide execution status to the deployment director for tasks that have been successfully executed on the virtual machine . In the illustrated example the deployment agent responds to a heartbeat message received from the deployment director .

As used herein the phrase in communication including variances thereof encompasses direct communication and or indirect communication through one or more intermediary components. Indirect communication does not require direct physical e.g. wired communication and or constant communication but rather additionally includes selective communication at periodic intervals scheduled intervals manual intervals aperiodic intervals and or one time events.

As described above depicts the example cloud computing environment in which a deployed application can be scaled e.g. scaled out or scaled in within the example deployment environment . The example scaling handler includes the example policy handler to determine whether VM pool scaling policies are to be applied to scaling operations in the deployment environment. If the example policy handler of determines that there is a VM pool scaling policy to be applied to the example deployment of the application then the example pool manager generates and manages VM pools from which the scaling handler may fetch virtual machines e.g. virtual machines in a suspended state rather than provisioning the virtual machines in the deployment environment . In some such instances the overall time to perform a virtual machine scale out operation may be reduced as new virtual machines do not need to be provisioned but rather a virtual machine with pre installed services and or software may be retrieved at the time of the scale out thereby improving efficiency in performing scaling operations.

In the illustrated example when the VM Pool Scaling Policy GUI control is not selected in the example blueprint generator GUI by a user the blueprint generator of detects the non selection of the VM Pool Scaling Policy GUI control and configures the blueprint of the application to indicate that scale out operations of the nodes are to be performed by provisioning the requested number of virtual machines in the deployment environment . In such instances the scaling handler instantiates the specified number of virtual machines in the deployment environment configures the instantiated virtual machines to execute the example guest operating system and one or more application components e.g. the load balancer node the appserver node the database node and then installs the application on the virtual machines .

In the illustrated example when the VM Pool Scaling Policy GUI control is selected in the example blueprint generator GUI by a user the blueprint generator of detects the selection e.g. via a flag or value set to true on yes one etc. of the VM Pool Scaling Policy GUI control and configures the blueprint of the application to indicate that scaling operations are to be guided by the VM pool scaling policy . For example during a scale out operation the scaling handler may perform a check to see if the resources in the VM pool can meet the requirements of the scale out operation. In such instances rather than performing the time consuming process of provisioning virtual machines in the deployment environment the suspended state virtual machines may be moved from the VM pool to the deployment environment and powered ON to be ready for additional configuration. For example the scaling handler may fetch suspended state virtual machines from the VM pool to the deployment environment when for example the VM pool includes at least the number of suspended state virtual machines requested for performing the scale out operation. If however the scaling handler determines that the resources available in the VM pool do not meet the requirements of the scale out operation the scaling handler may then provision the specified number of virtual machines in the deployment environment . Alternatively when the available resources do not meet the requirements the scaling handler may utilize the available suspended state virtual machines and provision additional virtual machines to satisfy the requirements.

In the illustrated example of the example policy handler handles scaling operations based on VM pool scaling policies available and or applicable to deployed applications . For example the policy handler may determine whether a user e.g. an administrator has set a VM pool scaling policy for applying to the application deployed in the deployment environment . In the illustrated example when the policy handler determines that the VM pool scaling policy applies to the deployed application the policy handler initiates generating the VM pools and enforces the VM pool scaling policy on the deployed application.

In the illustrated example when triggered the policy handler initiates generation of the VM pools . For example the policy handler may be triggered when the application blueprint is prepared. In some examples the policy handler is triggered to initiate generating the VM pools when the application is first deployed in the deployment environment . For example while the deployment director prepares the deployment environment the example policy handler may instruct the example pool manager to generate e.g. reserve request provide etc. the VM pools for use during scaling operations. In some examples the policy handler instructs the example pool manager to generate the VM pools when a first scale out operation request is received.

In the illustrated example the policy handler also enforces the VM pool scaling policy once the VM pools are generated. For example when the policy handler receives a request to perform a scale out operation the example policy handler determines whether the VM pools have the resources available for performing the scale out operation. For example if a scale out operation requests two additional virtual machines the example policy handler determines whether there is a VM pool with the adequate number of virtual machines e.g. two virtual machines to satisfy the scale out operation request.

In the illustrated example when the scale out operation request can be satisfied by the resources available to the scaling handler and abide by the rules specified by the VM pool scaling policy then the example policy handler sets an example VM Pool Scaling value to True. When the example VM Pool Scaling value is True the scaling handler is to perform the scale out operation by fetching the suspended state virtual machines from the VM pools . When the scale out operation request cannot be satisfied by the resources available to the scaling handler and or by abiding by the rules specified by the VM pool scaling policy and or there is no VM pool scaling policy provided for the deployed application the example policy handler sets the example VM Pool Scaling value to False. When the example VM Pool Scaling value is False then the scaling handler performs scaling operations by provisioning the example virtual machine in the deployment environment and configuring the virtual machines in the deployment environment . In the illustrated example the policy manager stores the VM Pool Scaling value in the example VM pool policy database .

In the illustrated example of the example pool manager manages the VM pools in the example cloud computing environment . For example the pool manager may generate the VM pools when requested e.g. instructed by the example policy manager by for example requesting environments from the example cloud computing platform provider and or the example network virtualization platform . In the illustrated example the pool manager maintains homogenous VM pools so that the virtual machines in the same ones of the VM pools are configured similarly.

For example the pool manager may manage a first VM pool having a first type of general virtual machines e.g. virtual machines configured to execute a Microsoft Windows operating system a second VM pool having a second type of general virtual machines e.g. virtual machines configured to execute a Linux operating system and a third VM pool having application level customized virtual machines e.g. virtual machines configured to execute the example appserver node . In this manner when a scaling operation requests additional virtual machines the pool manager may select virtual machines from the VM pools more suited for the scaling operation. For example if a scaling operation requires an example database node that executes on a Microsoft Windows operating system the example pool manager may identify the first VM pool as the best match and return as many virtual machines as requested and or available.

In the illustrated example of the example pool manager maintains a record of the VM pools in a data structure such as a lookup table. For example the example pool manager of stores an example VM pool attributes table in the VM pool policy database . The example VM pool attributes table may include information regarding the different types of VM pools available to the scaling handler during a scaling operation e.g. general virtual machines application level customized virtual machines etc. .

In the illustrated example of the example deployment monitor monitors deployment environments e.g. dependent environment of and determines whether to initiate a scaling operation and to what extent. For example the deployment monitor may monitor infrastructure resource consumption levels and requirements e.g. workload of the deployed application in the deployment environment . In some examples the deployment monitor may compare resource utilization by the workload of the application to utilization ranges. For example the deployment monitor may initiate a scale in operation when resource utilization by the workload is in a first range e.g. less than 25 utilization may initiate a scale out operation when resource utilization by the workload is in a second range e.g. greater than 75 utilization and may perform no scaling operation when resource utilization by the workload is in a third range e.g. greater than or equal to 25 utilization and less than or equal to 75 utilization . In some examples the deployment monitor may compare the workload to one or more thresholds and scale the number of virtual machines e.g. sub nodes executing the workload accordingly e.g. increase or decrease the cluster size of a node .

For example when the deployment monitor of the illustrated example determines that the resource utilization by the workload satisfies a first threshold the example deployment monitor initiates a scale out operation to add one or more virtual machines to the deployment environment. For example the example deployment monitor may initiate a first scale out operation to add e.g. provision and or fetch from the VM pool of one additional virtual machine when resource utilization by the workload exceeds 75 of available resources the example deployment monitor may initiate a second scale out operation to add e.g. provision and or fetch from the VM pool a second virtual machine when resource utilization by the workload exceeds 85 of available resources etc.

When the deployment monitor of the illustrated example determines that resource utilization by the workload satisfies a second threshold the example deployment monitor initiates a scale in operation to remove one or more virtual machines from the deployment environment. For example the deployment monitor may initiate a first scale in operation to remove e.g. de provision and or transition to the suspended state and return to the VM pool a first virtual machine when resource utilization by the workload is less than 25 of available resources the deployment monitor may initiate a second scale in operation to remove e.g. de provision and or transition to the suspended state and return to the VM pool a second virtual machine when resource utilization by the workload is less than 15 of available resources etc. In some examples the utilization records and or the resource utilization thresholds are stored in a data structure such as a lookup table. In some examples the utilization records and or the resource utilization thresholds may be changed by the developer the administrator and or any other person.

The deployment monitor of the illustrated example may initiate a scaling operation according to a schedule. For example the deployment monitor may initiate a scale out operation during work hours and may additionally or alternatively initiate a scale in operation during night time hours. In some examples the deployment monitor initiates a scaling operation based on for example a combination of resource utilization and timing intervals. For example the deployment monitor may initiate a scaling operation when the deployment monitor determines that resource utilization satisfies a third threshold for a time interval e.g. a minimum time interval . In some such examples combining resource utilization and timing intervals may be beneficial in reducing the number of false positives due to for example spikes and or surges in electricity or activity. For example the deployment monitor may initiate a scaling operation when resource utilization is greater than the first threshold for thirty seconds e.g. thirty continuous seconds at least thirty seconds during a sixty second running window etc. and thereby reducing the number of scale out operations initiated due to a temporary e.g. less than thirty seconds spike and or surge in electricity or activities.

The example scaling handler of includes the example scale out handler to execute scale out operations. For example the scale out handler may obtain a message from the example deployment monitor to initiate a scale out operation when for example the infrastructure resource consumption levels and requirements exceed a threshold.

In the illustrated example of the example scale out handler increases the number of virtual machines deployed in the deployment environment based on the VM Pool Scaling value obtained from the VM pool policy database . For example when the VM Pool Scaling value is true on yes one etc. e.g. the VM pool is able to provide the requested number of virtual machines the example scale out handler fetches the suspended state virtual machines from the VM pool and powers ON the fetched suspended state virtual machines thereby converting them to the virtual machines .

In contrast when the VM Pool Scaling value is false off no zero etc. e.g. the VM pool is unable to provide the requested number of virtual machines and or there is no VM pool scaling policy applicable to the deployment the example scale out handler instantiates the specified of virtual machines by allocating infrastructure resources for creating a virtual machine in the deployment environment . The example scale out handler of installs the guest operating system and the deployment agent on the instantiated ones of the virtual machines . The example scale out handler then restarts the instantiated ones of the virtual machines to clean up e.g. remove any components leftover from the provisioning of the instantiated ones of the virtual machines . In some examples when the VM Pool Scaling value is false off no zero etc. the example scale out handler uses a combination of suspended state virtual machines and instantiated virtual machines to perform the scale out operation. For example when the VM pool is unable to provide the requested number of virtual machines the scale out handler may provide the requested number of virtual machines by fetching a portion of the requested number of virtual machines from the VM pool and instantiating the remaining number of virtual machines in the deployment environment .

In the illustrated example of once the newly added ones of the virtual machines e.g. by fetching the suspended state virtual machines and or provisioning the virtual machines have been restarted and or powered ON the example scaling handler customizes the newly added ones of the virtual machines by downloading and or installing the component services to install the application component e.g. the appserver nodes on the newly added ones of the virtual machines . In some examples the suspended state virtual machines may already be customized by the pool manager by pre installing the component services and or nodes. The example scale out handler identifies one or more virtual machines and or nodes that the newly added ones of the virtual machines may depend on and or that may depend on the newly added ones of the virtual machines e.g. which if any of the virtual machines and or nodes from which the newly added ones of the virtual machines obtains information from and or provides information and updates the configurations and properties of the virtual machines to add references e.g. an IP address a hostname etc. to each other. In the illustrated example the scale in handler verifies that the scale out operation successfully completed by determining whether the newly added ones of the virtual machines are associated e.g. in communication with the other components of the deployed application may coordinate with the example deployment director to ensure the current set of virtual machines deployed in the deployment environment includes the newly added ones of the virtual machines etc.

In the illustrated example of the scaling handler includes the example scale in handler to execute scale in operations. For example the scale in handler may obtain a message from the example deployment monitor to initiate a scale in operation when for example the infrastructure resource consumption levels and requirements are less than a threshold. In the illustrated example the scale in handler performs the scale in operation by unconfiguring selected one or more of the virtual machines and removing the selected ones of the virtual machines from the deployment environment . The example scale in handler selects one or more of the virtual machines to remove from the deployment environment using algorithms such as last in first out LIFO first in first out FIFO randomizer and or enable a user e.g. the administrator to manually selected the ones of the virtual machines to remove.

In the illustrated example the scale in handler identifies one or more virtual machines and or nodes dependent on the selected ones of the virtual machines e.g. via the blueprint and or the deployment plan and disassociates the selected ones of the virtual machines and the identified dependent ones of the virtual machines and or nodes. For example the scale in handler may remove references to the selected ones of the virtual machines from the load balancer node and or performs a resource cleanup for the selected ones of the virtual machines by releasing application level and or infrastructure level resources used by the selected ones of the virtual machines .

In the illustrated example of the example scale in handler removes the selected ones of the virtual machines from the deployment environment based on the VM Pool Scaling value obtained from the VM pool policy database . For example when the VM Pool Scaling value indicates that the VM pool is able to receive the selected ones of the virtual machines e.g. the VM Pool Scaling value is true on yes one etc. the example scale in handler transitions the selected ones of the virtual machines to the suspended state and returns them to the VM pool . In contrast when the VM Pool Scaling value is indicative of the VM pool being unable to receive the selected ones of the virtual machines e.g. the VM Pool Scaling value is false off no zero etc. the example scale in handler removes the selected ones of the virtual machines from the deployment environment by initiating a shutdown sequence and deleting the selected ones of the virtual machines .

In some examples the scale in handler may return a first subset of the selected ones of the virtual machines to the VM pool and delete a second subset e.g. the selected ones of the virtual machines not included in the first subset of the selected ones of the virtual machines from the deployment environment . For example a scale in operation may require removing two virtual machines from the deployment environment while the VM pool is able to receive just one virtual machine. In such instances the scale in handler may return a first one of the two virtual machines to the VM pool while deleting the second one of the two virtual machines .

While an example manner of implementing the example scaling handler of is illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example application the example virtual machines the example application director the example blueprint generator the example deployment plan generator the example deployment director the example blueprint the example deployment plans the example load balancer node the example appserver node the example database node the example deployment agent the example local deployment plan the example infrastructure platform the example server the example storage array networks the example network virtualization platform and the example suspended state virtual machines may be implemented by hardware software firmware and or any combination of hardware software and or firmware. In addition any or all of the example policy handler the example pool manager the example deployment monitor the example scale out handler the example scale in handler and or more generally the example scaling handler of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example application the example virtual machines the example application director the example blueprint generator the example deployment plan generator the example deployment director the example blueprint the example deployment plans the example load balancer node the example appserver node the example database node the example deployment agent the example local deployment plan the example infrastructure platform the example server the example storage array networks the example policy handler the example pool manager the example network virtualization platform the example suspended state virtual machines the example deployment monitor the example scale out handler the example scale in handler and or the example scaling handler could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example application the example virtual machines the example application director the example blueprint generator the example deployment plan generator the example deployment director the example blueprint the example deployment plans the example load balancer node the example appserver node the example database node the example deployment agent the example local deployment plan the example infrastructure platform the example server the example storage array networks the example policy handler the example pool manager the example network virtualization platform the example suspended state virtual machines the example deployment monitor the example scale out handler and or the example scale in handler is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example scaling handler of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the scaling handler of are shown in . In this example the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program s may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program s is are described with reference to the flowcharts illustrated in many other methods of implementing the example scaling handler may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROW a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

The example program of begins at block at which the example blueprint generator displays the user selectable VM Pool Scaling Policy control in the example blueprint generator GUI . At block the example blueprint generator stores a VM Pool Scaling value in the example blueprint of As discussed above the value in the VM Pool Scaling value indicates whether the user selectable VM Pool Scaling Policy control has been selected e.g. the VM Pool Scaling value is True or has not been selected e.g. the VM Pool Scaling value is False to specify whether the VM pool scaling policy is to be applied to the nodes of the example application deployed in the deployment environment .

At block the example policy handler determines whether the VM Pool Scaling Policy control has been selected. For example the policy handler may retrieve the VM Pool Scaling value from the blueprint . If at block the example policy handler determines that the VM Pool Scaling Policy control has not been selected e.g. the VM Pool Scaling value is False then the example process of ends.

If at block the example policy handler determines that the VM Pool Scaling Policy control has been selected e.g. the VM Pool Scaling value is True then at block the policy handler determines whether the application has been deployed in the deployment environment . For example the policy handler may obtain a message from the example deployment director when the application is being deployed in the deployment environment . If at block the policy handler determines that the application has not been deployed control returns to block to determine whether the application has been deployed in the deployment environment .

If at block the example policy handler determines that the application has been deployed e.g. the policy handler obtains a message from the deployment director indicative of the deployment then at block the example policy handler initiates generation of the VM pool . For example the policy handler may send a message to the example pool manager to cause the pool manager to generate the VM pool . In the illustrated example the operation of block may be implemented using the process of . The example process of ends.

In the illustrated example deployment of the application in the deployment environment triggers the policy handler to initiate generation of the VM pool . However the policy handler may be triggered to initiate generation of the VM pool by other events. For example the policy handler may initiate generation of the VM pool when the policy handler determines that the VM Pool Scaling value is True. In other examples the policy handler may initiate generation of the VM pool when the deployment monitor initiates the first scaling operation of the nodes of the application .

The example program of prepares the example VM pool to enable more efficient scaling operations of the example nodes of the example application . The example program of may be used to implement block of . The example program of begins at block when the example pool manager generates one or more VM pools . For example the pool manager may receive a message from the example policy handler to cause the pool manager to generate one or more VM pools . The example pool manager may reserve and manage one or more environments provided by the example network virtualization platform and designate selected ones of the environments as the generated ones of the VM pools . In some examples the example pool manager may request the example cloud computing platform provider to provide one or more environments to the pool manager which allocates the provided pools as the generated ones of the VM pools .

At block the example pool manager instantiates the example virtual machines in the generated ones of the VM pools based on the example VM pool scaling policy . In the illustrated example the pool manager retrieves the VM pool scaling policy from the example catalog . However other repositories may additionally and or alternatively be used. The VM pool scaling policy may specify that the number of virtual machines instantiated in the generated ones of the VM pools be between a first threshold e.g. a minimum number of virtual machines and a second threshold e.g. a maximum number of virtual machines may specify how many VM pools to generate may specify how the virtual machines in the VM pool are to be configured etc.

At block the example pool manager configures the instantiated virtual machines in accordance with the VM pool scaling policy . For example the VM pool scaling policy may specify different pool types for the generated ones of the VM pools . In such instances the virtual machines are configured based on the specified pool type of the VM pool they were instantiated within. For example the VM pool scaling policy may specify that virtual machines instantiated within select ones of the VM pools be configured to be general virtual machines e.g. the pool manager may install the specified guest operating system and may download install and or configure the example deployment agent on the instantiated virtual machines and virtual machines instantiated within other ones of the VM pools be configured to be application level customized virtual machines e.g. the pool manager may install a specified guest operating system the deployment agent and install one or more application components nodes in the virtual machines based on the rules specified in the VM pool scaling policy .

At block the example pool manager transitions the virtual machines in the generated ones of the VM pools into a suspended state. For example the pool manager may disassociate the virtual machines in the generated ones of the VM pools from other network and or compute resources. For example while in the suspended state the virtual machines may not receive messages e.g. pings and or be accessed via secure shell server. At block the pool manager logs the attributes of the VIM pools for example in a data structure such as a lookup table. For example the pool manager may store configuration information of the virtual machines and the VM pools in the example VM pool attributes table . For example the pool manager may store a count of the suspended state virtual machines in the generated ones or more VM pools . The example pool manager may also log e.g. record IP addresses e.g. virtual IP addresses vIPs assigned to the different ones of the virtual machines . The example pool manager of the illustrated example stores the VM pool attributes in a data structure in the example VM pool policy database . . The example process of ends.

The example program of begins at block when the example scaling handler receives a request to scale a deployment. For example the deployment monitor may send a message to the example policy handler to scale out deployment of the application in the deployment environment .

At block the example policy handler obtains the VM Pool Scaling Policy control selection. For example the policy handler may determine whether the VM Pool Scaling Policy control was selected by a user or not selected by a user from the blueprint .

At block the example policy handler determines whether the VM Pool Scaling Policy control was selected. If at block the example policy handler determines that the VM Pool Scaling Policy control was not selected control proceeds to block to set the VM Pool. Scaling value to False in the VM pool policy database . If at block the example policy handler determines that the VM Pool Scaling Policy control was selected then at block the policy handler obtains the attributes of the VM pools . For example the policy handler may obtain the VM pool attributes table from the VIM pool policy database . At block the example policy handler determines whether the attributes of the VIM pools satisfy the requirements for performing the scaling operation. For example if a scale out operation requires two additional virtual machines then the policy handler determines whether two virtual machines are available in the VM pools . If at block the policy handler determines that the attributes of the VM pools satisfy the scaling requirements then at block the policy handler sets the VM Pool Scaling value to True in the VM pool policy database . For example when the VM Pool Scaling value is set to True then suspended state virtual machines may be fetched from one or more VM pools to perform the scale out operation.

If at block the example policy handler determines that the attributes of the VM pools do not satisfy the scaling requirements then at block the policy handler determines whether the VM pool scaling policy permits VM pool expansion. For example the VM pool scaling policy may indicate that VM pools are not to be expanded e.g. increased in size . If at block the policy handler determines that the VM pool scaling policy does not permit VM pool expansion control proceeds to block to set the VM Pool Scaling value to False in the VM pool policy database . That is the scale out operation cannot be performed with suspended state virtual machines due to for example the VM Pool Scaling Policy control not being selected block or not having adequate resources e.g. the virtual machines available within the one or more VM pools generated for use during scaling operations. If at block the policy handler determines that VM pool expansion is permitted then at block the policy handler instructs the example pool manager to update expand the VM pool size and control returns to block to obtain the attributes of the VM pools .

After the policy handler sets the VM Pool Scaling value to True at block or after the policy handler sets the VM Pool Scaling value to False at block then at block the policy handler initiates the scale out operation to increase the number of virtual machines in the application deployment. At block the scaling handler determines whether there is another scaling operation to perform. For example the policy handler may receive a message from the deployment monitor . If at block the scaling handler determines that there is another scaling operation to perform then control returns to block to receive the request to scale the application deployment. Otherwise if at block the scaling handler determines that there is not another scaling operation to perform the example process of ends.

The example program of performs a scale out operation using VM pools. The example program of may be used to implement block of . The example program of begins at block when the example scaling handler determines whether the VM Pool Scaling value is True. For example the example scale out handler may obtain the VM Pool Scaling value from the VM pool policy database . If at block the VM Pool Scaling value is True then at block the example scale out handler fetches the virtual machines from the VM pools available to the scale out handler . For example the scale out handler may request the specified number of suspended state virtual machines from the pool manager . At block the pool manager updates the VM pool attributes table to indicate which suspended state virtual machines were removed from the VM pools . Control then proceeds to block to configure the nodes e.g. the fetched suspended state virtual machines .

If at block the VM Pool Scaling value is False then at block the scale out handler provisions virtual machines in the deployment environment . At block the example scale out handler loads an agent bootstrap script. At block the example scale out handler executes the agent bootstrap script to retrieve the example deployment agent from the example deployment director .

At block the nodes at the provisioned virtual machines e.g. provisioned with the VM Pool Scaling value was False and or the fetched virtual machines are configured to execute application services such as application servers database servers monitoring services web servers messaging services middleware services etc. In some examples the fetched virtual machines may be pre installed with the application services when they were configured in their respective VM pool . At block the node is started e.g. starts and or restarts the application service . At block the application component is installed to execute on the node. For example a banking applications web application may be installed on an appserver node. At block the scale out handler updates the dependent nodes. For example the scale out handler may provide the load balancer node with the IP addresses of the newly added e.g. provisioned and or fetched virtual machines. The example process of then ends.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Bin ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

From the foregoing it will be appreciated that the above disclosed methods apparatus and articles of manufacture scale application deployments in cloud computing environments while using virtual machine pools and thereby improving the efficiency with which scaling operations are performed for applications deployed in a deployment environment. Disclosed examples determine whether a virtual machine pool scaling policy is applicable and available for applying to the application deployment and then enforcing the virtual machine pool scaling policy. Disclosed examples generate virtual machine pools including virtual machines in a suspended state and thereby reducing the amount of time needed to prepare a virtual machine in the deployment environment from provisioning downloading installing and configuring operating systems application services and or application components to powering ON the suspended state virtual machines.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

