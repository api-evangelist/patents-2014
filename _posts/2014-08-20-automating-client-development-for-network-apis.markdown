---

title: Automating client development for network APIs
abstract: System and method of automating client development for an application programming interface (API). An embodiment includes an apparatus capable of receiving information regarding a target application resource accessible by an API, and of generating a selected sequence of API calls based on weighted transitions in an API model representing resources needed for a client to perform interactions with the API. The apparatus is able to automatically generate a client program for interacting with the API according to a sequence of API calls. Additionally, methods are described for converting a model of an API into a directed, weighted graph, allowing determination of a selected sequence of API calls to access a target application resource. The API may be a Representational State Transfer API (REST API) implemented for a software defined network (SDN).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09398081&OS=09398081&RS=09398081
owner: Futurewei Technologies, Inc.
number: 09398081
owner_city: Plano
owner_country: US
publication_date: 20140820
---
The present disclosure relates generally to the field of communication networks and more specifically to the field of client development for network application programming interfaces APIs .

An application programming interface API permits programmatic access to an application and may be broadly described as a specification for how disparate entities frequently software applications are able to interact with each other. The interactions enabled by the API may include retrieval and update of application resources which are accomplished via program code. An interface may be provided for the API such that a user is able to interact with the API manually in order to access application resources or a client application may interact programmatically with the API. APIs are frequently used in the context of web service development.

When the Representational State Transfer REST architectural style is used to design API services on a network such an API may be referred to as a REST API. A REST API describes a particular way for connecting distributed services on a network and is constructed to follow a set of principles for web design. These design principles enable design of a robust reliable and scalable web application. The Hypertext Transfer Protocol 1.1 HTTP 1.1 is typically used in an implementation of a REST API. There are many examples of web services that use REST design principles and this architectural style is gaining popularity in cloud and software defined networking SDN applications in particular.

Conventionally developing a client to interact with an API e.g. a REST API involves many programming steps. A software developer typically begins with a set of published documents on the particular service e.g. a web service the software developer must manually read the documentation understand the architecture and interactions provided by the REST API for the service and then write programs to interact with the service. The resulting end product is specialized client code that interacts with one specific REST API in order to achieve a specific goal. This can be an arduous process and the client code often cannot be used to achieve a different goal and it may be difficult to upgrade following any changes to the REST API.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

An embodiment includes a system and method of automating client development for an application programming interface API . An embodiment includes an apparatus capable of receiving information regarding a target application resource accessible by an API and of generating a selected sequence of API calls based on weighted transitions in an API model representing resources needed for a client to perform interactions with the API. The apparatus is able to automatically generate a client program for interacting with the API according to a sequence of API calls. Additionally methods are described for converting a model of an API into a directed weighted graph allowing determination of a selected sequence of API calls to access a target application resource. The API may be a Representational State Transfer API REST API implemented for a software defined network SDN .

More specifically an aspect of the present disclosure provides an apparatus that includes a transceiver configured to receive a request including a target application resource accessible to an application programming interface API executable on the apparatus. The apparatus further includes a processor coupled to the transceiver and configured to access a description of the API and to generate an API model based on the description. The description includes application resource representations corresponding to application resources accessible to the API and application transitions describing directed connections amongst the application resource representations and corresponding to API calls defined by the API wherein the API model includes elements corresponding to the application resource representations and weights corresponding to the application transitions and associated with the API calls. The processor is configured to determine based on the weights a selected sequence of elements between a first and a second element of the elements. The first element corresponds to an initial application resource accessible to the API and the second element corresponds to the target application resource. The processor is configured to generate selected API calls based on a selection of the application resource representations and the application transitions corresponding to the selected sequence and to send the selected API calls to a client device.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

Reference will now be made in detail to the various embodiments of the present disclosure examples of which are illustrated in the accompanying drawings. While described in conjunction with these embodiments it will be understood that they are not intended to limit the disclosure to these embodiments. On the contrary the disclosure is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the disclosure as defined by the appended claims. Furthermore in the following detailed description of the present disclosure numerous specific details are set forth in order to provide a thorough understanding of the present disclosure. However it will be understood that the present disclosure may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the present disclosure.

Some portions of the detailed descriptions which follow are presented in terms of procedures steps logic blocks processing and other symbolic representations of operations on data bits that can be performed on computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. A procedure computer generated step logic block process etc. is here and generally conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present claimed subject matter discussions utilizing terms such as storing creating protecting receiving encrypting decrypting destroying or the like refer to the action and processes of a computer system or integrated circuit or similar electronic computing device including an embedded system that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present disclosure discussions utilizing terms such as processing or accessing or executing or storing or rendering or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories and other computer readable media into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices. When a component appears in several embodiments the use of the same reference numeral signifies that the component is the same component as illustrated in the original embodiment.

Embodiments of the present disclosure pertain to systems and methods of automating client application development for an API. In one aspect of the present disclosure client development for an API is automated by determining a sequence of API calls for example a sequence of hypertext links to be executed in order to access a target application resource made available to the client application by the API where the determination of the sequence of API calls is made according to a model of the API including weights associated with the interactions a client application may have with the API in order to access a resource. Herein an application resource may refer to a software component such as a document image service system device directory data store or a combination thereof. The resultant API call sequence details the particular order of specific application resource calls and interactions that a user agent of the API is able to make in order to access the target application resource in a selected manner. Herein a physical resource may refer to a computing storage and or network resource such as the size of messages sent and or received between a client application and the system on which the API is implemented computer memory required to perform an interaction a computer processor usage a disk storage usage a network bandwidth or a combination thereof.

The server is capable of receiving information regarding a target application resource to be accessed by an API and automatically generating a sequence of API calls e.g. client application requests and may be configured to provide various services and or run certain software applications such as that described below. The network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In some embodiments the network may comprise a software defined network SDN wherein the intelligence system the control plane that controls the data traffic is implemented as an software application program and decoupled from the underlying system forwarding the traffic to the selected destination the data plane . The network devices may include routers switches or any devices that act as routers or switches e.g. servers desktops mobile computing devices etc.

A communication interface may be used to provide connectivity between each client system and and the network . The client systems and are able to access information on the server using for example a Web browser or other client software. Such software is able to allow the client systems and to access data hosted by the server . Although depicts the use of a network such as the Internet for exchanging data the embodiments described herein are not limited to the Internet or any particular network based environment.

In an embodiment server acts as an SDN controller in the control layer of a virtual network such that an application layer device e.g. device or can access an SDN resource through hyperlink representations that are made available via a northbound REST API comprised by the server according to embodiments of the present disclosure. In an embodiment the processor of server comprises an SDN controller component configured to perform functions described herein such as exemplary processes and of respectively. Alternatively the processor is able to be operable to execute an SDN controller program stored in a storage media of the server and configured to perform functions described herein. In the illustrated example the logically centralized SDN controller server is employed to control the behaviors of underlying data forwarding elements e.g. switches and routers comprised by the virtual network through some southbound APIs via for example the OpenFlow protocol. On the other hand the SDN controller server also provides an abstraction of the network functions with the northbound API for client application programs e.g. a client application implemented in device to consume the network services and to configure the network dynamically. Any device in communication with server is able to utilize the northbound API comprised by server in order to consume network services and to configure the network dynamically.

A request for a target application resource e.g. in can be indicated by device or any connected device and sent to the SDN controller server for accessing a representation of a resource e.g. for operations on underlying network components. The SDN controller server is able to generate a selected sequence of API calls in order to access the indicated representation of the application resource e.g. via process in . The SDN controller server is able to provide this sequence to the device in order for the device to utilize the sequence of API calls in a client application interfacing with the API comprised by the SDN controller server . In such a manner the SDN controller server is able to enable automatic development of a client application on the device in that the device is able to provide the specified sequence of API calls to an integrated development environment comprised by the device in order to generate a client application for the SDN controller server API.

The API description specifies the client requests available to client entities using the API as well as the protocols for executing the client requests e.g. protocols for performing an interaction between a client entity and the API . The API description details the relationship of possible interactions between a client application and the API e.g. which other resources are accessible to a client application from a particular resource including how the resources of the underlying application made available via the API. In some embodiments the API description is embodied in a machine readable format e.g. XML JSON and other formats known to one skilled in the art . In some embodiments the API description is provided as for example a published document made available by the developer of the API. In an embodiment the process is able to generate the API description .

The API client development is able to generate the API client application which in an embodiment is a program enabling programmatic interactions with an API described by API description . In one embodiment a client is used to refer to any application adapted to make requests of the API. An indication is provided of a target application resource request e.g. from an API client developer or from a user agent . The target application resource request is able to be for example a request for a document a file and a HTTP message entity instance or variant.

The target application resource request and the API description along with physical resources information are used by API client development for API call sequence determination . The API model generation uses the API description to build a model of the API that includes elements representing the application resources accessible to the API along with transitions that represent the possible client interactions with the API and which specify the connection relationship amongst the elements. The transition weight determination utilizes the physical resources information in order to determine an associated weight for each transition in the API model. For example the physical resources information may be regarding a transmission delay between client and server in a client server network a latency the size of messages sent and or received between a client application and the system on which the API is implemented computer memory required to perform an interaction a computer processor usage a disk storage usage a network bandwidth measurement of any physical resource associated with the interactions permitted by the API model is consistent with the spirit and scope of the present disclosure.

The API call sequence determination utilizes the resultant transition weights from the transition weight determination in order to determine a sequence of API calls for the client application to optimally access the target application resource. This sequence of API calls can be utilized to generate the API client program . The API client program is used for performing client interactions with the API in order to access the target application resource in a selected manner.

The API model generation is able to generate models of several forms including a Petri Net a weighted graph a matrix a table and other forms suitable for describing an API model. In some embodiments the API model generated by API model generation is embodied in a machine readable format published by a server e.g. XML JSON and other formats known to one skilled in the art .

In some embodiments the API is implemented for a web service and the target application resource request represents a request for a resource representation e.g. XML JSON and other formats known to one skilled in the art . In some embodiments the API is implemented in a software defined network SDN as a northbound API and interfaces between an SDN controller and an application layer of the SDN. In an embodiment the target application resource request is the retrieval of data from a database where the database may be accessible via a local network LAN wide area network WAN a mobile network e.g. a cellular network or over the internet via HTTP methods POST GET PUT and DELETE.

In some embodiments multiple target application resources requests are provided and the API call sequence determination determines an interaction sequence to access each of the multiple target application resources. Other target application resource specifications are possible and are consistent with the spirit and scope of the present disclosure. The API call sequence determination is described in greater detail in the description of . Exemplary API call sequences are illustrated in and are described in greater detail below.

A method according to an embodiment of the present disclosure can be used to develop a client application for a REST API. A REST API uses a resource identifier to identify a particular resource involved in an interaction between the REST API and a client application interfacing with the REST API. The resource identifier may be a Uniform Resource Locator URL link or Uniform Resource Identifier URI . A client application utilizing a REST API performs actions on a resource e.g. the target application resource by exchanging representations with that resource and transferring its own state according to the received representation provided by the REST API. A representation typically has a sequence of bytes and representation metadata that describes those bytes. The entity responsible for generating a resource representation may be used to characterize the resource representation i.e. a client representation may refer to a representation that is generated by a client application and a server representation may refer to a representation that is generated by a server. Examples of a representation include a document a file and a HTTP message entity instance or variant.

A REST API can be described by using a REST Chart. Such a REST Chart includes a set of hypermedia representations and the transitions among them which is typical of a REST API that is driven by hypermedia. The REST Chart may utilize a colored Petri Net network model that has a topology whose token markings define the representational state space of user agents of the REST API i.e. the token markings are able to characterize every possible state of the REST API following permitted client application interactions. Each transition in the REST Chart specifies the possible interactions with the resource referenced by a hyperlink in a type representation. In particular a type representation becomes a Petri Net place that can have Petri Net tokens denoting resource representations of that type i.e. color . A transition has at least two input resource representations and may have several output resource representations response and faults one of the input resource representations to the transition contains the hyperlink to the target resource. The REST hypermedia constraint is enforced by Petri Net transition rules 1 a transition can be fired if and only if all its input resource representations have the right kind of tokens 2 After a transition fires its output resource representation will have the right kind of tokens.

When firing a transition to access an application resource a client application uses a client connector to interact with an API having an interface comprising input and output parameters. In each interaction the input and output parameters contain 1 control data e.g. HTTP verbs and status 2 optional metadata about the resource representation e.g. HTTP headers and 3 an optional resource representation. In addition a client application also needs to know the transfer protocol e.g. HTTP in order to call the right client connector. These data thus constitute the interaction instructions for firing the transitions in order to access application resources made available by the API.

A REST Chart describes the REST API . As described above the token markings of the REST Chart define the representational state space of client applications interacting with the REST API . In some embodiments the REST Chart is able to be generated from published documentation describing REST API . In some embodiments the REST Chart is embodied in a machine readable format published by a server e.g. XML JSON or other formats known to one skilled in the art .

A target application resource request indicates an application resource to be accessed by the REST API which is received along with the REST Chart by REST client development . The REST client development comprises REST API model generation a transition weight determination and an API call sequence determination each of which are may be a program logic and or functionality that is implemented in software and or hardware. The REST API model generation builds a model of the REST API that includes elements representing the application resources accessible to the REST API along with transitions that represent the possible client interactions with the REST API and which specify the connection relationship amongst the elements. The transition weight determination utilizes physical resources information provided to REST client development in order to determine an associated weight for each transition in the REST API model. For example the physical resources information may be regarding a transmission delay between client and server in a client server network a latency the size of messages sent and or received between a client application and the system on which the API is implemented computer memory required to perform an interaction a computer processor usage a disk storage usage a network bandwidth measurement of any physical resource associated with the interactions permitted by the API model is consistent with the spirit and scope of the present disclosure.

The API call sequence determination functions to determine an optimal sequence of API calls for a client application to make to the REST API in order to access the application resource specified by the target application resource request . The API call sequence determination utilizes the resultant transition weights from the transition weight determination in order to determine a sequence of API calls for the client application to optimally access the target application resource. This sequence of API calls can be utilized to generate the REST client . The REST client is used for performing client interactions with the REST API in order to access the target application resource in a selected manner.

In some embodiments the API call sequence is provided to an Integrated Development Environment IDE tool where the IDE tool is utilized by a developer . In some embodiments the IDE tool is able to generate the REST client application . Embodiments of the present disclosure contemplate that the REST client is able to be developed in a variety of languages e.g. Java C Python JavaScript etc .

The REST client application is generated to automatically perform interactions in the REST API implemented on the REST server . In some embodiments the REST client acts as a client in a client server network and automatically performs client actions to interact with the REST server in order to access the target application resource of the REST API . For example the REST client is able to select and traverse hyperlinks provided by the REST API in order to proceed from an initial state and to access the resource specified by target application resource request according to the API call sequence . The REST API is able to be implemented on any of several network types including a client server network a peer to peer network an SDN a cloud based network and other network types well known to one skilled in the art.

In the context of SDN controller northbound APIs REST APIs may include software components that provide network services such as connecting a plurality of virtual machines by an isolated virtual IP network. In some embodiments the network services can be performed by managing three types of entities a virtual network to which virtual machines attach by ports an IP address block subnet and a port that receives IP addresses when it joins the subnets. A resource representation may include an initial URI of a REST API as an entry URI for a client to access the REST API. The URI contained in the initial representation identifies the resources for accessing each of the three entities of the network service program. After accessing the entry URI a client application can then obtain the hyperlinks to access the three types of entities. The operations on these types of entities may include list search read create update and delete. In addition a network entity has two additional hyperlinks for accessing its belonging subnet and port entities.

The particular IDE for the IDE tool can be selected from those IDEs known to one skilled in the art e.g. Eclipse ActiveState Komodo NetBeans etc. to be suitable for the particular application. The IDE tool can be used by the developer to write and test code and thereby generate the REST client application capable of both decision making and performing interactions with the REST API . For example the REST client may perform a test by sending messages to a server in a client server network to ascertain if the REST client is functioning properly to access the target application resource where the target application resource is a webpage retrieval.

As described above in one of the steps for accessing the target application resource is providing a target application resource request and the API description to the API client development . The API client development comprises an API model generator which in an embodiment includes a process of generating a directed weighted graph that is based on the API description . describe generation of an exemplary directed weighted graph based on an API description which according to embodiments of the present disclosure is a model generated by API model generation . In general resources associated with a system or systems in a distributed network are represented as resource representations in an API model and interactions are represented as transitions. As an example an API model for a webpage application may have resource representations representing a login page an orders page a payment page and a confirmation page and a client selecting hypertext links on the webpage to navigate from one page to another may be modeled as transitions in the API model.

While the API description describes the relationship between application resources accessible to the API e.g. clicking link login on a home page will lead to a login page it does not provide on its face an optimal path for a client to navigate from an initial resource representation to a target resource representation. To determine an optimal path information is needed about the relative cost of performing the interactions a client application may make with the API. The directed weighted graph provides this information by retaining the interaction relationships specified for the API i.e. which resources are connected and what actions are necessary to access the resources and further incorporating a weight that represents a measure of a physical resource e.g. network bandwidth associated with the execution of an interaction. By associating a weight with each possible interaction between a client application and the API a comparison may be made of the physical resources required by the different paths that transition from the initial resource representation to the target resource representation wherein a target resource accessible to the API may be accessed and or modified.

At step a plurality of nodes is generated for the directed weighted graph where the plurality of nodes corresponds to the plurality of output resource representation types from step . In an embodiment the plurality of nodes represents resource representation types where a server in a client server network is responsible for providing information. At step a plurality of edges is generated corresponding to the interactions modeled in the Petri Net by transitions where each edge of the plurality of edges connects a pair of nodes from the plurality of nodes generated at step .

At step an associated weight for each edge in the plurality of edges is determined. In an embodiment associated weights are determined according to the measurement of a physical resource associated with interactions of a client and server in a client server network. For example the weight may be a transmission delay between client and server in a client server network a latency the size of messages sent and or received computer memory required to perform an interaction a computer processor usage a disk storage usage a network bandwidth measurement of any physical resource associated with the interactions permitted by the API is consistent with the spirit and scope of the present disclosure. In an embodiment the associated weights is represented by an adjacency matrix for the nodes in the directed weighted graph such that the cost of transitioning from one node to any of its adjacent nodes is defined according to the measurement of the physical resource or resources used to determine the associated weight.

The directed weighted graph is generated at step and comprises the plurality of nodes from step and the plurality of weighted edges from steps and wherein the permitted interactions of the model are described by pairs of nodes connected by weighted edges. The associated weights of the edges may be dynamic in that a measurement of a physical resource associated with an interaction in the model may change over time. Further a combination of attributes of physical resources may be combined and measured and the associated weight for the plurality of edges may be determined according to the combined attributes of the physical resources measured.

Given the API Petri Net model A and an initial API state of resource representation type two paths leading to resource representation type are available one path through transition and then transition the other path through transition and then transition . To determine an optimized path API Petri Net model A is converted into a directed weighted graph according to an embodiment of the present disclosure.

The directed weighted graph C enables a determination of the optimal manner to navigate from resource representation type to resource representation type in the API Petri Net model A of . This determination is able to be made by determining a shortest path between node and node in directed weighted graph C where the length of each path is determined according to the weights associated with the edges along the path. In order to apply weights to the edges an adjacency matrix is defined wherein an adjacency value is determined for each pair of connected nodes. The adjacency value represents a measurement of a physical resource attribute associated with the function of the API Petri Net model A. The measurement may be a delay between client and server in a client server network the size of messages sent and received computer memory required to perform an interaction a disk storage used a network bandwidth a network latency measurement of any physical resource associated with the interactions permitted by the API Petri Net model A is consistent with the spirit and scope of the present disclosure. Once an adjacency matrix is defined the weights w wof the edges are determined by the values corresponding to those node pairs in the adjacency matrix.

The final step in determining the optimal path from resource representation type to target application resource in the directed weighted graph C is to determine a selected path e.g. a shortest path meeting some specified criteria from resource representation type to resource representation type . For example a shortest path may be found using one of a number of algorithms well known to one skilled in the art including Dijkstra s algorithm A search algorithm Floyd Warshall algorithm Johnson s algorithm and Viterbi algorithm. The selected path found on directed weighted graph C is used to determine an optimal sequence of interactions represented by transitions in API Petri Net model A

As an example using a modification of Dijkstra s algorithm a shortest path is found between a source node resource representation type and a sink node resource representation type on directed weighted graph C the modification to Dijkstra s algorithm is in saving transitions associated with the edges between nodes along the shortest path rather than the nodes themselves as is typical in Dijkstra s algorithm . Saving the transitions associated with the edges of the shortest path enables a sequence of 3 tuples triples to be constructed where the 3 tuple defines a specified transition and the two specific resource representations that are necessary to be activated in order to fire that transition i.e. a specified triple may be for example resource representation type resource representation type and transition on API Petri Net model A . The transition and resource representation types of each triple in the sequence are found in API Petri Net model A. Therefore a shortest path found between a source resource representation type and sink resource representation type in directed weighted graph C corresponds to an optimal sequence of interactions transitions between an initial state resource representation type and a target application resource resource representation type in API Petri Net model A.

Advantageously this not only ensures a path is found between an initial state and a target application resource in the API it also ensures it is the shortest path according to an optimized resource from the initial state to the target application resource. The resultant client application has a reduced memory footprint for accessing that target application resource since only those API calls necessary to access the application resources identified by the API call sequence are needed i.e. the client need not store all of the possible API calls in memory . This results in an increase in the speed of operation for a client to perform interactions with the API. The shortest path determination is efficient with time complexity O P log P T where P denotes the number of resource representations and T the number of transitions in the API.

In some embodiments the optimal path is determined according to the edge weights associated with a measure of one physical resource. In some embodiments the edge weights are associated with a measure of a combination of physical resources. In some embodiments an optimal path for a first target application resource is determined according to edge weights associated with a measure of a first physical resource and an optimal path for a second target application resource is determined according to edge weights associated with a measure of a second physical resource. A combination of resources and multiple target application resources are consistent with the spirit and scope of the present disclosure.

An exemplary pseudo code implementation of generating an API call sequence from a directed weighted graph is as follows comment follows 

Process step describes generating a directed weighted graph from a description of an API describing the functions and interactions of the API. In an embodiment the description of the API is a Petri Net model and the functions and interactions of the API are modeled in the Petri Net by a plurality of resource representations and a plurality of transitions wherein a plurality of arcs connect certain of the resource representations with certain of the transitions such that the allowed interactions within the API are described according to the connected resource representations and transitions. For example the API may be modeled according to the API Petri Net model A of and the directed weighted graph may be generated according to exemplary process of .

Process describes determining a selected path between a first node and a second node on the directed weighted graph. The selected path may be for instance a shortest path which can be found using one of a number of algorithms well known to one skilled in the art including Dijkstra s algorithm A search algorithm Floyd Warshall algorithm Johnson s algorithm and Viterbi algorithm.

Process describes determining a sequence of API calls that corresponds with the selected path determined in step . The selected path found on the directed weighted graph in step is used to determine a substantially optimal sequence of interactions represented by transitions in the API model. The sequence of API calls is able to be codified according to the unique system elements that are necessary to perform each API call e.g. for a client server network by a 3 tuple as described in and in . Other elements to codify the sequence are possible as long as the necessary elements along with their manner of activation are specified for performing each given API call in the sequence of API calls.

Process describes generating an API call sequence for the API based on the sequence of API calls determined in step . The API call sequence is able to be provided in order to automatically develop a client application such that the client application may interact with the API in order to access the target application resource. The API call sequence is able to be encoded in a machine readable format e.g. XML RDF and JSON. Further the API call sequence is able to be provided to an integrated development environment in order for a client application to be developed automatically from the specified API call sequence in a variety of programming languages.

Three exemplary target application resources to be accessed by API are illustrated in target application resource labeled confirmation target application resource labeled notification and target application resource labeled order deleted. API call sequence corresponds to target application resource API call sequence corresponds to target application resource and API call sequence corresponds to target application resource . The API call sequences are generated according to embodiments of the present disclosure described above and in . In one aspect an API call sequence specifies a substantially optimized sequence of interactions for an API in order to access the target application resource represented by resource representations and transitions. An API call sequence is able to have many interactions where each interaction is defined by a unique 3 tuple representing resource representation types and a transition in an API. The 3 tuple is used to uniquely identify an interaction since it is possible for there to be many outgoing resource representation types corresponding to one transition. For conciseness a 3 tuple may be represented herein by brackets for example resource representation type transition resource representation type e.g. by or equivalently by the labels provided initial T coffee order .

The exemplary API call sequence is detailed as follows. The desired outcome of the exemplary API call sequence is for a client application to interact with the webpage in order to arrive at a confirmation page for an order. The API call sequence specifies the optimal sequence of resource representations and transitions for API to access the target application resource . API call sequence has a first interaction defined by 3 tuple or equivalently by the labels provided initial T coffee order . The next 3 tuple in the API call sequence is corresponding to order payment T payment .

Exemplary API call sequence is generated for the desired outcome of a client application making a subscription to receive a notification of an order status. API call sequence has a first interaction defined by 3 tuple or equivalently by the labels provided initial T coffee order . The next 3 tuple in the API call sequence is corresponding to order payment T payment . This leads the client to resource representation type confirmation. The next 3 tuple in API call sequence is corresponding to confirmation T subscription . This leads the client to resource representation type notification satisfying the goal of API call sequence .

Exemplary API call sequence is generated for a two part goal e.g. two target application resources the desired outcome of a client first making a confirmation of an order and subsequently deleting the order. API call sequence has a first interaction defined by 3 tuple or equivalently by the labels provided initial T coffee order . The next 3 tuple in the API call sequence is corresponding to order payment T payment . This leads the client to resource representation type satisfying the first target application resource confirmation. The next 3 tuple in API call sequence is corresponding to confirmation T delete  . This leads the client to resource representation type order deleted satisfying the second part of API call sequence .

The exemplary API call sequences and illustrated in are found according to embodiments of the present disclosure described above for example according to process of for converting the Petri Net model to a directed weighted graph an example of which is illustrated in . In some embodiments a change in a physical resource selected for weighting the paths of the directed weighted graph may lead to a different shortest path determined and thus to a different API call sequence to access the target application resource. Further different target application resources and combinations of target application resources are consistent with the spirit and scope of the present disclosure.

In the foregoing detailed description of embodiments of the present invention numerous specific details have been set forth in order to provide a thorough understanding of the present invention. However it will be recognized by one of ordinary skill in the art that the present invention is able to be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments of the present invention. Although a method is able to be depicted as a sequence of numbered steps for clarity the numbering does not necessarily dictate the order of the steps. It should be understood that some of the steps may be skipped performed in parallel or performed without the requirement of maintaining a strict order of sequence. The drawings showing embodiments of the invention are semi diagrammatic and not to scale and particularly some of the dimensions are for the clarity of presentation and are shown exaggerated in the drawing Figures. Similarly although the views in the drawings for the ease of description generally show similar orientations this depiction in the Figures is arbitrary for the most part.

Embodiments according to the present disclosure are thus described. While the present disclosure has been described in particular embodiments it is intended that the invention shall be limited only to the extent required by the appended claims and the rules and principles of applicable law.

