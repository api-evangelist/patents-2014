---

title: Sharing extension points to allow an application to share content via a sharing extension
abstract: A sharing extension point receives a request from a host application for sharing content, the sharing extension point being one of the extension points of an extension framework of an operating system, each corresponding to a common interface to extend a predefined functionality of one application to another application. In response, a sharing extension capable of providing content sharing services is launched. Data representing a share sheet created by the sharing extension is injected into a content viewer within the host application as a share sheet clone, where the share sheet clone has a reduced resolution image of the content displayed therein. In response to receiving a commit command for sharing, the actual content is retrieved from the host application and the retrieved content is transmitted to the sharing extension to enable the sharing extension to post the share sheet on a sharing platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563488&OS=09563488&RS=09563488
owner: Apple Inc.
number: 09563488
owner_city: Cupertino
owner_country: US
publication_date: 20140916
---
This application claims the benefit of U.S. provisional patent application Nos. 62 004 777 62 004 778 and 62 004 780 all filed May 29 2014. This application is also related to U.S. patent application Ser. Nos. 14 488 122 and 14 488 126 filed Sep. 16 2014. The disclosure of the above identified applications is incorporated by reference herein in its entirety.

Embodiments of the present invention relate generally to an operating system of a data processing system. More particularly embodiments of the invention relate to providing a sharing extension point for extending functionality of a sharing extension to another application for sharing content.

Security concerns for all types of processor based electronic devices and particularly for computing devices have become a significant concern. While some concerns may relate to detrimental actions which may be undertaken by defective code implemented by such devices the greater concerns relate to the ramifications of various types of attacks made upon such devices through malicious code including code conventionally known in the field by a number of names including viruses worms Trojan horses spyware adware and others. Such malicious code can have effects ranging from relatively benign such as displaying messages on a screen or taking control of limited functions of a device to highly destructive such as taking complete control of a device running processes transmitting and or deleting files etc. Virtually any type of imaginable action on a processor based device has been the subject of attacks by malicious code.

Many of these attacks are directed at computing devices such as workstations servers desktop computers notebook and handheld computers and other similar devices. Many of these computing devices can run one or more application programs which a user may operate to perform a set of desired functions. However such attacks are not limited to such computing devices. A broader group of various types of devices such as cell phones personal digital assistants PDA s music and video players network routers switches or bridges and other devices utilizing a microprocessor microcontroller or a digital signal processor to execute coded instructions have been the subjects of attacks by malicious code.

In one particular situation one application such as a browser application may have to invoke a plugin also referred to as an application extension which may be developed by a third party. Typically when an application invokes a plugin that is associated with the application also referred to as a host application the operating system launches the plugin within the same process address space of the application as shown in . Referring to when application invokes plugin application launch module of an application manager loads plugin within the same process address space of application . Since application and its plugin are running within the same address space plugin may be able to access resources that are accessible by application where the resources may be managed by resource manager . From the view point of resource manager application and plugin are the same process. That may cause application to be vulnerable if plugin turns out to be malware.

For example if plugin is a third party plugin developed for application and if application can access a local storage and a network plugin may exploit and attack the files stored in the local storage and the network. In addition even if plugin is not malware when plugin crashes it may bring down application or cause application to malfunction. Furthermore when plugin is terminated by launch module the termination of plugin may cause application unstable since they are in the same process address space .

A conventional system utilizes a customized universal resource locator URL scheme for inter process communications between two applications which suffers from discoverability limitations security concerns and a general lack of flexibility where bi directional communication is difficult and fragile. The URL schemes may cause an application to switch to the host application which may bump the user out of the initiating application and destroy any of the visual context and the associated workflow will be lost. It is very difficult to detect such a situation.

A number of methodologies have been used in an attempt to reduce or eliminate both the attacks and influence of malicious or defective code. Generally these methodologies include detection prevention and mitigation. Specifically these methodologies range from attempts to scan identify isolate and possibly delete malicious code before it is introduced to the system or before it does harm such as is the objective of anti virus software and the like to restricting or containing the actions which may be taken by processes affected by malicious or defective code. However there has been a lack of efficient ways for handling a plugin associated with an application that invokes another application in a secured manner.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to one aspect of the invention an application extension also referred to as a plugin or simply an extension and an application hosting the application extension are loaded and executed in separate process address spaces and treated like separate processes by an operating system. In one embodiment an application hosting an application extension is launched and executed in a first sandboxed environment and the application extension is launched and executed in a second sandboxed environment. The first sandboxed environment and the second sandboxed environment are configured based on a first security or sandbox profile and a second security or sandboxed profile respectively. The application and the application extension communicates with each other via an inter process communications IPC framework. The operating system enforces the security and manages resources of the application and the application extension individually or independently based on the first and second security profiles respectively.

According to one embodiment when the application extension generates content such as graphical user interface GUI content to be displayed to a user the content is injected into the application via the IPC framework and presented to the user without having the application to directly access the application extension via an application programming interface API which requires the application extension running within the same process address space. Specifically a remote view controller is embedded within each of the application and the application extension to inject the GUI content rendered by the application extension into the application. The remote view controllers running within or associated with the application and the application extension are configured to synchronize the user interaction with the GUI content between the application and the application extension.

According to another embodiment since the application and the application extension are running in their respective process address spaces the resources associated with the application and the application extension can be independently managed without causing significant interference to the other counterpart. For example an application extension can be shut down or terminated without affecting the operations of the application since the communications between the two are managed by the IPC framework. When one of the application and application extension needs to be upgraded or terminated according to one embodiment the other party can communicate with the operating system to determine whether a user is currently using the other party to determine whether it is safe to upgrade or terminate itself. For example when an upgrade request for upgrading an application is received the application or the upgrade manager may communicate with a central authority e.g. window server to determine whether the user is concurrently accessing a user interface of the application extension. The upgrade or termination of the application is performed only if it is determined that the user is not currently using the application extension otherwise the request is rejected.

According to another embodiment when an application extension has been installed by the operating system an option is provided to the user to activate enable or deactivate disable the application extension. For example an installed application extension of an installed application for an application control center e.g. a notification center of an operating system can be displayed within a user interface of the application control center as a hosting application. The user interface of the application control center may display an enable disable option e.g. a switch graphical representation such as an icon to allow the user to enable or disable the installed application extension. The application extension is accessible from the application control center e.g. to utilize functionalities of the associated installed application only if the application extension has been enabled otherwise the user has to use the installed application associated with the application extension. The application control center may be hooked with extensions of a variety of applications each extension being capable of being individually configured e.g. enabled or disabled . Thus the application control center serves as a centralized entry point to access the functionalities of various applications. As a result with the extensions hosted and enabled in the application control center a user does not have to launch and access the applications individually.

According another aspect of the invention an extension framework includes a set of extension interfaces referred to herein as extension points to allow a first application to invoke an extension of a second application to access a set of predefined functionalities associated with the second application which is extended by the extension. The set of extension points may include various commonly used or popular functionalities or services associated with the operating system. An extension point defines a set of predefined application programming interfaces APIs or communications protocols that allow a client either being the first application or the second application to access or provide a service from and to another client. A service provided by an extension point may be provided by a standard component of the operating system or a third party function provided by a third party vendor.

In one embodiment the extension framework operates as a connecting operator between two processes e.g. an extension and a host application . The extension framework provides the discovery aspect and extends the security domain. When a first application wishes to access a predefined functionality e.g. content sharing or photo filtering provided by another application the first application communicates with the corresponding extension point associated with that predefined functionality to inquire about who can provide such a service. The extension framework in turn searches and identifies a list of one or more extensions provided by other applications that have been registered with the extension framework to provide the requested service. The extension framework may return the list of the identified extensions to allow the first application to select one of the second applications in the list for the requested service. In response to a selection of one of the extensions which may be provided by or associated with a second application the extension framework launches the selected extension in a separate sandboxed environment and facilitates an inter process communications IPC mechanism or framework between the first application and the selected extension to allow the first application to access the functionalities of the selected extension via the IPC communications mechanism.

According to one embodiment an extension point acts as an interface for a software developer for an extension and provides a domain that the extension operates. Each extension point is associated with a predefined set of policies e.g. resource entitlements or restrictions and specifies what messages can be exchanged between the host application and the extension. All extensions designed for a particular extension point must comply with the specification set forth in the predefined policies of that particular extension point. All extensions when executed in an operating environment are entitled to or restricted by the same set of operating environment parameters defined by the associated extension point. When the extension of the second application is developed a developer can utilize an extension template associated that particular extension point as part of a software development kit SDK to generate executable images of both the second application referred to herein as a container application and the associated extension. The extension and the container application may be released in a bundle. The bundle includes the container application and its metadata describing the container application and the extension and its metadata describing the extension. However the container application and the extension can be launched in separate sandboxed environments and operated independently which may be configured based on their respective metadata and or the corresponding extension point although they may access or share a common library or framework.

According to another aspect of the invention some of the registered extensions may be provided as part of an operating system others may be provided by third parties and installed by an installer of the operating system. According to one embodiment an older version of an extension installed or registered earlier can be replaced or overridden by a newer version of the same extension provided by the same extension provider. The installation or registration framework authenticates the extension provider to ensure that only the authorized extension provider can replace or override an extension currently installed. In one embodiment only the authorized owner of a particular extension can replace its own installed extension.

When an extension is being installed based on the type of the extension e.g. identified by a uniform type identifier or UTI and an extension provider identifier ID the installer looks up in the extension registry to determine whether there is an earlier version of the same extension currently installed. If there is an earlier version that has been installed the installer replaces an extension key in the extension registry with a new extension key obtained from the new extension. An extension key represents a particular version of the extension. Subsequently when a request is received from a host application for invoking the extension the newer version of the extension will be identified and launched based on the new extension key.

In one embodiment one of the extension points provided by the extension framework is a sharing extension point designed to share content in a community or with another user. With a sharing extension point an application can invoke a sharing extension that extends a sharing functionality of a sharing application such as Twitter and Facebook to share content on a social website or with another program. As described above in order to invoke a sharing extension the sharing extension has to be installed or registered with the extension framework. Typically a sharing extension would have to register with the system indicating that the extension is capable of providing content sharing services for example by registering with a UTI associated with the pre agreed UTI for content sharing services.

When a host application such as a browser attempts to invoke a content sharing service for example in response to a share command received from a user the host application communicates with a sharing extension point of the extension framework by providing the proper UTI associated with the content sharing services. In response the extension framework searches for any installed or registered extensions that are capable of providing the requested services for example by matching the UTI of the content sharing services with the UTIs of the installed extensions. A list of sharing extensions having their UTIs matching the sharing UTI will be provided to the user to select one of them.

In one embodiment once a sharing extension has been selected either by a user or by the system automatically the host application transmits a data object representing a reduced resolution image e.g. thumbnail of the content to be shared to the sharing extension. The sharing extension creates a share sheet having the reduced resolution image of the content displayed therein. The sharing extension then injects a copy of the share sheet into the host application as a share sheet clone for example using a remote view bridge connection e.g. remote view controller or remote view bridge . The share sheet clone is displayed by the host application. In response to a commit command e.g. send command from the host application the sharing extension requests the full actual content associated with the thumbnail image from the host application. Thereafter a final share sheet having the actual content embedded therein is then posted on the sharing website.

Application manager may be a part of an operating system OS running and executed by the processing resources within system . An operating system is a collection of software that manages computer hardware resources and provides common services for computer programs. The operating system is an essential component of the system software in a computer system. Application programs usually require an operating system to function. Amongst many functionalities of an operating system scheduling is the method by which threads processes or data flows are given access to system resources e.g. processor time communications bandwidth . This is usually done to load balance and share system resources effectively or achieve a target quality of service. In addition to application manager an operating system may further include other core components such as a scheduler a device manager a kernel etc. In order not to unnecessarily obscure embodiments of the present invention these components are not shown herein. Note that application launch module and or resource manager may be executed as a separate component outside of application manager or integrated with another component of the operating system. The operating system of system may be any kind of operating systems such as for example iOS from Apple Android from Google Windows from Microsoft or other operating systems e.g. UNIX LINUX real time or embedded operating systems .

According to one embodiment each of applications may be executed within a respective dedicated or isolated operating environment such as a sandboxed environment and managed by application manager . For example application is launched and executed as a first process within a first sandboxed environment as a first process address space. Application extension is launched and executed as a second process within a second sandboxed environment as a second process address space. A process address space refers to a virtual address space or address space that is the set of ranges of virtual addresses that an operating system makes available to a process. The range of virtual addresses usually starts at a low address and can extend to the highest address allowed by the computer s instruction set architecture. This provides several benefits one of which is if each process is given a separate address space security through process isolation.

Application may be a browser application as a first application such as the Safari from Apple Inc. Internet Explorer from Microsoft or a Google Chrome from Google Inc. Application extension may be an plugin of a second application not shown such as an Adobe Acrobat from Adobe System or a content sharing application such as Facebook or Tweeter application. A plugin is specifically designed for the first application to access functionalities of the second application. The plugin and the second application may be developed by a third party and released to the market as a bundle. When the second application is installed in system an application installer not shown parses the metadata of the bundle and recognizes that application extension is designed for application . Application extension is then associated with or mapped to application for example in the registry of an operating system. As a result application extension may be installed and available to application to allow application to invoke application extension at runtime for example in response to a request received from application searching for a particular type of extension services e.g. content sharing services .

According to one embodiment application extension and application hosting application extension are loaded and executed in separate process address spaces and treated like separate processes by an operating system. In one embodiment application is launched and executed in a first sandboxed environment as a first sandboxed process and the application extension is launched and executed in a second sandboxed environment as a second sandboxed process. The first sandboxed environment and the second sandboxed environment are configured based on a first security profile and a second security profile as part of security profiles for some or all of applications installed in system respectively. Application and application extension communicates with each other via an inter process communications IPC framework not shown . The operating system enforces the security and manages resources of application and application extension individually or independently based on the first and second security profiles respectively.

A sandboxed process refers to a process that has been restricted within a restricted operating environment e.g. sandbox that limits the process to a set of predefined resources. Each sandboxed process may be associated with a set of dedicated system resources such as for example a dedicated memory space a dedicated storage area or a virtual machine etc. One of the purposes of sandboxing an application is to isolate the application from accessing other unnecessary or unrelated system resources of another application or a system component such that any damage caused by the application would not spill over to other areas of system .

To provide security an application may be contained by restricting its functionality to a subset of operations and only allowing operations that are necessary for the proper operation i.e. operation according to its intended functionality. One method to implement a limited set of policies for each application is to contain or sandbox the application. Sandboxing of an application or process can be achieved using operating system level protection to provide containment and to enforce security policies such as policies that restrict the ability of the application to take actions beyond those functions needed for it to provide its intended functionalities.

When an application has been sandboxed during execution the application is executed as a sandboxed process or thread within the system that is contained within a sandbox also referred to as an application container in which it cannot access certain system resources or another territory e.g. sandbox of another application subject to a security profile associated with the sandboxed application which is referred to as a sandboxed process or a sandboxed application.

A sandboxed process is the application or other program for which security containment will be implemented. In many cases a sandboxed process is a user application but it could be another program implemented on the computing device such as a daemon or a service. To increase security and provide an efficient mechanism portions of the security system are implemented or executed in a kernel space. In addition a monitor process module not shown is executed in a separate memory space from the sandboxed processes to further insulate them from each other. In particular a sandboxed process is restricted from accessing memory outside of its process space and is further prohibited from spawning a non sandboxed process. For example a security profile of a sandboxed process may include a rule or policy that denies the sandboxed process from using certain system calls which may be a mechanism that allows processes to alter each other s address spaces.

In some embodiments a policy may prevent a program from performing certain actions based on the state of an external accessory connected to the computing device e.g. if an accessory of a specific type or identity is connected is disconnected or is connected and is in or is not in a specific mode. For example an application may only be allowed to communicate over an externally accessible data bus if an accessory that meets certain criteria is connected to the data bus and is in a receptive mode. Further detailed information concerning sandboxing techniques can be found in U.S. patent application Ser. No. 11 462 680 filed Aug. 4 2006 now U.S. Pat. No. 8 272 048 which has been assigned to a common assignee of the present application and is incorporated by reference herein in its entirety.

Referring back to security profile specifies a first set of restricted resources that application can utilize during its operations within process address space . Similarly security profile specifies a second set of restricted resources that application extension can utilize during its operations within process address space . In this example the second set of resources may be fewer e.g. more restricted than the first set of resources. For example application may be able to access a network and a local storage of system while application extension may not be able to access the same network but it may be able to access the local storage of system .

According to one embodiment one or more entitlements are defined for each program or application that is to be deployed in a data processing system. The entitlements represent certain functions or resources that the program is entitled to access during its execution. The entitlements may be specified by a developer during development of the program or alternatively entitlements can be specified by an authorization entity such as authorization server or provisioning server which provisions or distributes the program. Such entitlements may be specified as an attribute or metadata attached to or embedded within the program and optionally signed by the authorization entity using a digital certificate.

Entitlements can then be used to generate a set of rules specifying certain actions or resources that a program can or cannot do or access during execution of the program. The set of rules are then dynamically compiled for example during an installation of the program into a security profile for the program. During the execution of the program the security profile is used to enforce the set of rules to restrict the program from performing any action or accessing any resource that the program is not entitled. This in effect forces or contains the program to operate in a restricted operating environment e.g. a sandbox or sandboxed environment . Resources refer to any kind of resources in a data processing system or electronic device such as for example memories inputs outputs IOs buses storage files network connections e.g. sockets ports or network addresses inter process communications channels e.g. UNIX domain sockets XPC MACH ports etc.

Restricting execution of a program within a restricted operating environment can reduce the changes of the program interfering or causing damages to other components or resources of an electronic device. For example a program may be developed by a third party and downloaded from a network. The program may include a malfunctioning component or routine e.g. programming bugs which may accidentally access to certain critical memory space that normally exclusively utilized by an operating system microprocessor bus or other components of the electronic device. Such actions may cause the electronic device to crash. Alternatively a program may be a malicious program that is developed to intentionally cause damage to an operating environment and or electronic device. For example a program with virus may be specifically developed to take control of the electronic device and or steal confidential information of a user that operates the electronic device. By restricting the execution of a program within a restricted operating environment such damage can be greatly reduced.

Referring back to in this example by executing application and application extension in separate process address spaces security of application and application extension can be independently enforced and managed. The malfunction of one entity e.g. application extension would not cause much damage of the other e.g. application . In addition resources associated with application and application extension can be efficiently managed. For example if application extension is no longer needed by application application extension can be individually terminated or unloaded and its resources can be released back to a resource pool for other usages without significantly affecting the operations of application .

According to one embodiment application and application extension communicates with each other via an inter process communications IPC framework not shown which may be brokered by corresponding extension point . Extension point may be one of various extension points that have been defined by the operating systems and agreed upon by the extension service providers. In order to allow application and extension to communicate with each other application and extension have to conform to a set of policies and or communications protocol s e.g. APIs that are specifically designed for extension point . Thus application and extension have to be compiled using an SDK or libraries specifically for extension point .

The operating system enforces the security and manages resources of application and application extension individually or independently based on the first and second security profiles respectively. Note that second application when executed may be launched in a separate sandboxed environment . When application accesses a functionality provided by extension there is no need to launch container application as they are treated as separate programs although extension and application may share the same library or framework during the execution.

Referring back to in this example by executing application and application extension in separate process address spaces security of application and application extension can be independently enforced and managed. The malfunction of one entity e.g. application extension would not cause much damage of the other e.g. application . In addition resources associated with application and application extension can be efficiently managed. For example if application extension is no longer needed by application application extension can be individually terminated or unloaded and its resources can be released back to a resource pool for other usages without significantly affecting the operations of application .

According to one embodiment when the application extension generates content such as graphical user interface GUI content to be displayed to a user the content is injected into the application via an IPC framework and presented to the user without having the application to directly access the application extension via an application programming interface API which requires the application extension running within the same process address space. Specifically a remote view controller is embedded within each of the application and the application extension to inject the GUI content rendered by the application extension into the application. The remote view controllers running within or associated with the application and the application extension are configured to synchronize the user interaction with the GUI content between the application and the application extension.

Extension points may be managed by extension manager where extension points may be collectively referred to as an extension interface an extension layer or an extension framework as part of system component of operating system . When extension as well as its corresponding container application not shown is installed installation module parses metadata of an application bundle containing extension and its container application. Based on the metadata associated with extension installation module recognizes that extension is specifically designed and developed for extension point . For example extension may be developed using a specific extension template and compiled with a specific set of libraries corresponding to extension point .

Installation module then installs extension in operating system and stores any information related to extension in launch database . For example a security profile e.g. configuration file of extension may be compiled and stored in launch database . The security profile may include information indicating that extension is capable of providing a service or services through extension point . The security profile may further include resource entitlements and or restrictions that may be subsequently utilized to configure a sandboxed environment when extension is launched. Other extensions may be installed in a similar way by installation module . In addition extension may also be registered in extension registry which may be used subsequently for searching extension services in response to a query for a particular type or class of extension services for example based on UTIs of the extensions being installed. Note that extension registry and launch database may be integrated into a single repository having a query application programming interface API .

Subsequently when a client in this example application inquires by communicating via extension about a service available for extension point also referred to as an extension service extension manager invokes launch module or discovery module not shown to discover any extensions installed in the system that are capable of providing the inquired service. In response launch module searches within launch database to identify and determine which of the installed extensions are capable of providing such a service. In one embodiment the inquiry may include information specifying certain specific resources that are required for the service. In response launch module searches and identifies those who can handle the specified resources. For example a host application may specify the data size that a service is required to handle. Thus the extension framework as shown in is able to match the capabilities of extensions with the specification of the requested services. Alternatively extension manager may query extension registry to identify a list of extensions e.g. based on UTIs that are capable of providing the requested extension service or services where launch database contains information e.g. sandbox configuration or profiles for configuring a sandboxed operating environment when launching an extension. An example of extension registry is shown in and described in details further below.

If there is only one extension installed capable of providing services for extension point launch module may automatically launch the identified extension. If there are multiple extensions that are capable of providing services for extension point launch module may present a list of the extensions to allow a user or client to select one of them for launching. If there are multiple versions of the same extension installed at least some of the versions may be presented to the user or alternatively the latest version may be presented. An earlier version of an extension may be replaced or overridden by an authenticated extension provider in extension registry such that the latest version of the extension is identified and utilized. Once the selected extension in this example extension has been launched extension manager invokes IPC service module to facilitate IPC communications between client and client via extension point . In one embodiment the communications between client and client are asynchronous message based communications such as the XPC framework available from Apple Inc.

In one embodiment extension points may include but are not limited to an extension point for the notification center of operating system an extension point for a third party keyboard an extension point for social media an extension point for services with a user interface UI an extension point for a file provider picker an extension point for photo editing and or filtering an extension point for translation and an extension point for a file content finder. Some of these extension points are referred to as action extension points. Such an action extension is designed to extend viewing and or editing functionality of another application within a host application. A user can initiate a service from a host application. The service will use the content provided by the user e.g. selected text image on rollover via a toolbar item a contextual menu etc . Examples of the action extensions include but are not limited to a service to translate selected content a service to view attributes of an image in a document or a service to apply a filter on an image etc. A filtering extension may be designed to specify a predicate or a simple instruction to let the system build a predicate which is matched against the shared data in order to list the relevant extensions.

In one embodiment each of extension points includes at least two sets of APIs one for host applications to invoke extension services and the other for extensions to provide extension services as shown in . Referring to since client and client are executed separate sandboxed environments they normally cannot directly communicate with each other. Rather client as a host application in this example communicates using a first set of APIs or protocols associated with extension point to access system resources such as extension manager launch module and IPC service module etc. Similarly client as an extension in this example communicates using a second set of APIs or protocols associated with extension point to access extension manager launch module and IPC service module . In order to access extension point client and client may be compiled and linked using an SDK that is associated with extension point during the software development.

According to one embodiment application and application extension communicate with each other via IPC framework . IPC framework defines a set of communications interfaces or protocols to allow the clients in this example application and application extension to asynchronously communicate with IPC framework where IPC framework is to facilitate the exchange of data or messages amongst the clients. IPC framework can be any kind of IPC frameworks such as for example XPC or MACH from Apple Inc. UNIX socket framework etc. IPC framework may be implemented as a set of IPC services amongst the parties. When application and application extension would like to communicate with each other they establish a connection to the IPC service for example by connecting to a pre agreed upon IPC service e.g. IPC service name and start sending and receiving data or messages via the connection. For example in order to develop application extension that is specifically used with application a developer may have to develop code that specifically connect to a specific IPC service name that is agreed upon with a developer who develops application such that both application and application extension can connect to the same IP service.

The lifetime of services involved with IPC framework may be managed by the operating system. A host application does not have to manually start or stop the IPC service rather it can simply connect to the service and the operating system can automatically launch the service if it is not running and terminate it when it is not needed. With the IPC framework an application can split itself into multiple services that each handle security sensitive component. These services can run with very limited permissions and will not able to do much damage if they are compromised. IPC framework can also allow an application to access certain system services provided by the operating system in a more secure manner and allow third party applications to share data with each other without compromising the security model of the operating system.

In one embodiment when application extension renders GUI content that is intended to be presented by application content controller running within application extension is configured to inject the GUI content into application to be presented content by communicating with the corresponding content controller . Content controllers may further communicate with each other to synchronize content changes and or user interaction with the displayed content. A content controller may be a remote view controller that allows a process or application to share a user interface with another process or application. The content controller copies content to content controller without requiring application extension running within the same address space of application . The remote view service may be implemented as an IPC service described above.

According to one embodiment an extension point acts as an interface for a software developer for an extension and provides a domain that the extension operates. Each extension point is associated with a predefined set of policies e.g. resource entitlements or restrictions and specifies what messages can be exchanged between the host application and the extension. All extensions designed for a particular extension point must comply with the specification set forth in the predefined policies of that particular extension point. All extensions when executed in an operating environment are entitled to or restricted by the same set of operating environment parameters defined by the associated extension point.

When the extension of the second application is developed as shown in a developer can utilize an extension template associated that particular extension point as part of a software development kit SDK to generate based on source code executable images of both a container application and the associated extension as well as their respective metadata . The extension and the container application may be released as bundle . The bundle includes the container application and its metadata describing the container application and the extension and its metadata describing the extension. However the container application and the extension can each be launched in a separate sandboxed environment and operated independently which may be configured based on their respective metadata and or the corresponding extension point although they may access or share a common library or framework. In some embodiments a container application may include multiple extensions in this example extensions and . Each of the extensions may further specify an extension provider ID e.g. extension provider ID and its version e.g. version identifier also referred to as an extension key . An extension provider ID is an identifier uniquely identifying an extension provider and certified by a predetermined authority e.g. an operating system provider . When a newer version of an extension is installed after the corresponding extension provider has been successfully authenticated a corresponding extension key in the extension registry e.g. extension registry of is replaced with a new extension key e.g. version such that the newer version of the extension is invoked instead of the older version.

An application bundle may be a directory that allows related resources such as software code to be grouped together. An application bundle may be identified by the .app extension e.g. application.app . An application bundle may include a number of directories and or subdirectories such as Contents Operating system which may contain the application s executable code identified for example by the .exe extension e.g. Application.exe however in other embodiments the executable file may have another extension or may not include an extension Resources which may contain resources of the application e.g. Image.png and XPC services which may contain application defined services. These services may be a set of computer implemented instructions designed to implement a specific function or perform a designated task. In one embodiment the application defined services are services which are available only to the application represented by the application bundle. In addition these application defined services may be tied to the lifetime of the application in that once the application is terminated the service is no longer available.

In one embodiment the executable code in an application bundle may link against one or more frameworks. Frameworks may include software libraries having reusable abstractions of software code wrapped in a well defined application programming interface API . The frameworks allow software developers to implement the standard structure of an application for a specific development environment e.g. the operating system running on the computing device . The frameworks linked against by an application may be represented by framework bundles. Some examples of commonly used frameworks may include a core audio framework and a core graphics framework. The executable files in an application may link against the frameworks by storing a framework name or other identifier of framework bundles in a designated location in the application bundle and or by calling an API provided by the associated framework.

The services included in the framework bundles may be made available to a number of different applications that are all linking against the same framework. In one embodiment there may be a single global instance of a particular service in a framework that is available to a certain number of different applications. In another embodiment there may be an individual instance of a particular service that is instantiated for each user of the system or an instance of the service for each application that is running in the system. In other embodiments each service may have a different designation as a global instance a per user instance or a per application instance where there may be services of each type present at the same time in the same or different framework s . In addition some other instance may be created at the discretion of the framework. For example one framework may have one instance for each browser tab or window that is opened. Each instance may be identifiable by a universal unique identifier UUID .

At the time an application is built the application designer may specify what services are defined specifically in the application as well as what frameworks the application will link against. The application designer may also have knowledge of what services are contained within those frameworks. Thus between the application defined services and the services in linked frameworks the application designer is able to grant access to all of the services that the application executable file needs or may be likely to access. In addition the application designer is able to specify which services the application executable file is allowed to access. Therefore unnecessary and unauthorized services are not made available to the application. This information in a form of metadata may eventually be compiled as a part of entitlements of a security profile associated with the application.

Referring back to for at least one of the extension points associated with an operating system an extension template e.g. template may be defined to allow a software developer to have a simple and user friendly user interface to construct source code e.g. source code for that particular extension point. For example an extension template may be associated with a set of predefined certain objects or classes that are typically required to access the associated extension point either from a point view of a host application or from a point of view of an extension. The extension template may further identify a set of libraries or frameworks that are specifically associated with the extension point. Thus when an SDK tool such as a compiler and or linker of SDK compiles source code the relevant libraries or frameworks such as libraries are utilized. As a result all extensions compiled for the same extension point will be compatible with the same set of APIs or protocols and entitled to the same resource entitlements or limited to the same restrictions of an operating environment during execution.

In one embodiment when an extension is developed a binary code or executable image of the extension may be encoded with a corresponding extension provider ID and an extension key associated with that particular version or release of the extension. In this example referring to an earlier version of extension includes encoded therein extension provider ID and extension key while a newer version of extension includes extension provider ID and extension key respectively. Extension provider IDs may be different if they are provided by different vendors otherwise extension provider IDs may be identical however their extension keys may be different dependent upon the corresponding versions or instances.

For the purpose of illustration it is assumed extensions are provided by the same extension provider where extension is an earlier version while extension is a newer version. When extension was installed by installation module a corresponding entry was created where field stores an extension class ID e.g. UTI associated with the type of extension services that extension provides in this example content sharing services. Field of entry stores provider ID and field of entry stores extension key . When host application attempts to invoke an extension that is associated with entry via the corresponding extension point extension manager may look up in registry to identify any of extensions that are capable of providing the type or class of extension services for example based on an extension ID provided by host application . In this example extension entry is identified by matching the extension ID provided by host application against extension IDs of registry . Based on provider ID and extension key extension will be identified and launched.

Subsequently when newer version extension is installed according to one embodiment installation module examines the metadata of extension in this example extension provider ID to ensure that extension is provided by a genuine extension provider that has been certified or authorized by a proper authority. Once the extension provider of extension has been authenticated installation module replaces extension key e.g. extension key of entry with newer extension key . As a result in response to a subsequent request for invoking the extension associated with entry newer version of extension will be identified and launched in this example instead of older version extension .

As described above examples of extensions include but are not limited to an extension point for the notification center of operating system an extension point for a third party keyboard an extension point for social media an extension point for services with a user interface UI an extension point for a file provider picker an extension point for photo editing and or filtering an extension point for translation and an extension point for a file content finder. Some of these extensions such as a translation extension point or a filtering extension point are referred to as action extension points. A filtering extension point can be used to invoke a filtering extension that performs data filtering operations such as photo filtering operations. According to one embodiment an action extension may include piece of executable code such as JavaScript or other scripts that can be invoked and downloaded from the extension and executed within the host application to help certain tasks of the host application.

In one embodiment when host application requests an action extension service for the purpose of illustration a translation extension service action extension point e.g. translation extension point identifies and launches extension to provide translation services. In addition host application can invoke data conversion code A to perform certain data conversion before content processing module performs the actual translation. In one embodiment host application in this example a browser application downloads data conversion code and executed within host application as data conversion code B.

Data conversion code B when executed is configured to parse content to identify which portion of content needs to be processed by content processing module . Data conversion code B is to package the identified content to a format compatible with extension point and sends the packaged data to extension to be processed by content processing module in this example a translation module to translate content. In response to the result of the content processing i.e. translated content data conversion code B is to reformat the translated content to be compatible with content and incorporates the translated content with content .

This embodiment can be applied to the situation which host application is a browser application displaying certain content as a hypertext markup language HTML page. The browser application can download the JavaScript i.e. data conversion code A and execute it as code B. The JavaScript can then process the HTML content to parse and understand the HTML page in order to identify the interested data to be translated. As a result content processing module does not have to understand the structure of the HTML page. Data conversion code operates as a helper agent for extension similar to an extension of another extension . Note that data conversion code B still has to communicate with extension via extension point . Data conversion code A is bundled within extension but it is downloaded and executed by host application as code B.

In response to the share command received via path according to one embodiment sharing extension creates share sheet having a thumbnail image of content presented therein that is extracted from the received data object. Share sheet is then injected into host application via path and displayed as share sheet clone having a thumbnail image representing content . The share sheet clone may be injected via a remote view bridge connection between the sharing extension and host application . Once the user views share sheet clone and commits to share the content presented by thumbnail a commit command is transmitted to sharing extension via path . In response to the commit command sharing extension transmits a request for actual content via path . Once sharing extension receives the actual content from host application via path it replaces the thumbnail image with the actual content and posts share sheet at content sharing website or platform via path . Note that sharing extension point can be used to extend sharing services to social communities e.g. Twitter Facebook LinkedIn etc. and or non social environments e.g. AirDrop email etc. .

According to another embodiment application extensions of certain applications can be used by a centralized application or a control center to access via the application extensions functionalities of the associated applications. That is the centralized application or control center serves as a centralized entry point to a variety of applications without requiring the user to individually launch the corresponding applications. In addition when an application extension has been installed by the operating system an option is provided to the user to activate enable or deactivate disable the application extension. For example an installed application extension of an installed application for an application control center e.g. a notification center of an operating system can be displayed within a user interface of the application control center as a hosting application. The user interface of the application control center may display an enable disable option e.g. a switch graphical representation such as an icon to allow the user to enable or disable the installed application extension. The application extension is accessible from the application control center e.g. to utilize functionalities of the associated installed application only if the application extension has been enabled otherwise the user has to use the installed application associated with the application extension.

In one embodiment at least some of the entry points in sections may be application extensions extended from the third party applications and some may be associated with the applications or services provided by the operating system. For example application may be a third party application e.g. application of while application may be a built in application or service provided by the operating system e.g. application of . From the GUI of application as shown in a user can access another application via its activated entry point. For example the user can click graphical representation of representing a plugin of another application to access functionalities of that particular application as shown in . As a result the user can access multiple applications from the notification center in this example. The user can also individually access those applications by launching the individual applications in a conventional manner.

Referring to in one embodiment system includes processor and peripheral interface also referred to herein as a chipset to couple various components to processor including memory and devices via a bus or an interconnect. Processor may represent a single processor or multiple processors with a single processor core or multiple processor cores included therein. Processor may represent one or more general purpose processors such as a microprocessor a central processing unit CPU or the like. More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP a network processor a graphics processor a network processor a communications processor a cryptographic processor a co processor an embedded processor or any other type of logic capable of processing instructions. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Peripheral interface may include memory control hub MCH and input output control hub ICH . Peripheral interface may include a memory controller not shown that communicates with a memory . Peripheral interface may also include a graphics interface that communicates with graphics subsystem which may include a display controller and or a display device. Peripheral interface may communicate with graphics device via an accelerated graphics port AGP a peripheral component interconnect PCI express bus or other types of interconnects.

An MCH is sometimes referred to as a Northbridge and an ICH is sometimes referred to as a Southbridge. As used herein the terms MCH ICH Northbridge and Southbridge are intended to be interpreted broadly to cover various chips who functions include passing interrupt signals toward a processor. In some embodiments the MCH may be integrated with processor . In such a configuration peripheral interface operates as an interface chip performing some functions of the MCH and ICH. Furthermore a graphics accelerator may be integrated within the MCH or processor .

Memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Memory may store information including sequences of instructions that are executed by processor or any other device. For example executable code and or data of a variety of operating systems device drivers firmware e.g. input output basic system or BIOS and or applications can be loaded in memory and executed by processor . An operating system can be any kind of operating systems such as for example Windows operating system from Microsoft Mac OS iOS from Apple Android from Google Linux Unix or other real time or embedded operating systems such as VxWorks.

Peripheral interface may provide an interface to IO devices such as devices including wireless transceiver s input device s audio IO device s and other IO devices . Wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver a WiMax transceiver a wireless cellular telephony transceiver a satellite transceiver e.g. a global positioning system GPS transceiver or a combination thereof. Input device s may include a mouse a touch pad a touch sensitive screen which may be integrated with display device a pointer device such as a stylus and or a keyboard e.g. physical keyboard or a virtual keyboard displayed as part of a touch sensitive screen . For example input device may include a touch screen controller coupled to a touch screen. The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen.

Audio IO may include a speaker and or a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and or telephony functions. Other optional devices may include a storage device e.g. a hard drive a flash memory device universal serial bus USB port s parallel port s serial port s a printer a network interface a bus bridge e.g. a PCI PCI bridge sensor s e.g. a motion sensor a light sensor a proximity sensor etc. or a combination thereof. Optional devices may further include an imaging processing subsystem e.g. a camera which may include an optical sensor such as a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor utilized to facilitate camera functions such as recording photographs and video clips.

Note that while illustrates various components of a data processing system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to embodiments of the present invention. It will also be appreciated that network computers handheld computers mobile phones and other data processing systems which have fewer components or perhaps more components may also be used with embodiments of the invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

