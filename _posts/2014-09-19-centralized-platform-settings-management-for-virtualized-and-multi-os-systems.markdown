---

title: Centralized platform settings management for virtualized and multi OS systems
abstract: A processing device may include a first processor executing an operating system including a configurable setting and an isolated execution environment including a second processor communicatively coupled to the first processor, and a secure store coupled to the second processor to store a setting profile containing a copy of the configurable setting, in which the second processor is to, subsequent to establishing a trust relationship between the isolated execution environment and the operating system, synchronize the configurable setting with the setting profile.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529997&OS=09529997&RS=09529997
owner: Intel IP Corporation
number: 09529997
owner_city: Santa Clara
owner_country: US
publication_date: 20140919
---
The embodiments of the disclosure relate generally to processing devices and more specifically relate to a centralized platform to manage settings for virtualized systems and systems running multi operating systems.

Computing devices e.g. desktop mobile computers tablet computers smart phones move towards supporting virtualized operating systems OS and or dual or multi boot OS modes where multiple operating systems may run on a same computing device. For example a computing device may be booted to run under Window or Linux . For such computing devices each of the supported operating systems may include settings that need to be configured with certain parameters in order to run hardware and or software resources including network interface security and file directories etc. The configurable settings of the operating systems may include Wireless Local Area Network WLAN profiles Wireless Wide Area Network WWAN settings network access certificates and active directory. An administrator may set all of these configuration settings for each of the operating systems that are supported by the computing device.

However to manually enter a same setting multiple times is a tedious task for the administrator and may create security issues if there are errors during the data entry.

Embodiments of the present disclosure may include a centralized platform manager e.g. in the form of an isolated execution environment to store one or more setting profiles for operating systems that are hosted on a host device. Each setting profile may include parameters for settings of one or more operating systems executing on the host device. An isolated execution environment is an execution environment that executes code independently and securely in isolation from the rest of applications running on the host device so that operating systems and or basic input output system BIOS executing on the host device are unaware of the presence of the isolated execution environment. In one embodiment an execution environment may include a secondary processor coupled to a temper resistant hardware module residing in a secured storage. The secondary processor may be coupled to a processing device such as a processing core that executes one or more operating systems. The isolated execution environment is to store process and protect sensitive data.

In one embodiment the isolated execution environment may include an offload engine i.e. an execution engine that does not carry the load of computation that may establish a trusted relationship with each of the operating systems of the host device. A trust relationship is a relationship that when established would allow parameter synchronization between two platforms without further verification of the right to access. Thus embodiments may allow the administrator to perform a one time process to establish the trusted relationship between an operating system and the isolated execution environment and thereafter the isolated execution environment may seamlessly synchronize the settings of the operating system with setting profiles stored in a setting store in the isolated execution environment so that the operating system may access to these settings. In one embodiment the isolated execution environment may establish the trust relationship with multiple operating systems so that the settings of each of the operating systems may be synchronized with a setting profile stored in a setting store of the isolated execution environment.

In one embodiment the host device may support the execution of multiple operating systems. For example the host device may through a virtual machine manager hypervisor support multiple virtual machines each of which may execute an operating system. In one embodiment the operating system of one of the virtual machines may be designated as the isolated execution environment. The designated operating system therefore may manage trust relationship with the rest of operating systems in a central location and manage the read write access to these setting profiles by the rest of the operating systems.

In this way embodiments of the present disclosure may allow users of the host device to have seamless credentials sharing among all operating systems executing on the host device. For example a user of the host device may be associated with a sharing WiFi profile among different operating systems. Once the network preference of the user is configured with respect to one operating system the need to enter the user s credentials for other operating systems may be saved.

In one embodiment the processing device A may further include a isolated execution environment which may include a second processor which is referred to as a secondary processor hereinafter and a secure store coupled to the secondary processor . The secondary processor may be coupled to the processors A B via an interconnect fabric . In one embodiment the interconnect fabric may include a bus and a network card not shown for transmitting instructions and data between processing devices A B and the isolated execution environment .

In one embodiment each of the operating systems A through A B through B may include a respective application programming interface API also referred to as an agent A through A B through B which operating systems A through A B through B may communicate via a network card according to a network stack or protocol with an isolated execution environment to receive setting parameters from setting profiles P through P stored in a setting store associated with the isolated execution environment . Further any update to the setting of the operating systems A through A B through B may through agents A through A B be transmitted and written to the setting profiles P through P stored in the setting store of the isolated execution environment .

In one embodiment an offload engine may be used as the isolated execution environment . The offload engine may include dedicated hardware such as the secondary processor software an execution environment implemented on the processing core and firmware to perform specific tasks in place of the processors contained in the processing devices A B. The offload engine may take processing loads off the processors A B. In one exemplary embodiment the offload engine may include a manageability or management engine ME which may be a firmware dedicated to manage tasks on behalf of the processor A. The manageability engine may be coupled to the processor A via the interconnect or via a network stack to the processor B. In another embodiment the offload engine may include a centralized security engine CSE that may in addition to manage security for the processing device A include a secure setting store to store setting profiles e.g. P through P for operating systems A through A B through B . In one embodiment when the host devices host one or more virtual machines the virtual machine manager or the hypervisor may be designated and configured as the isolated execution environment.

In one embodiment the isolated execution environment may first establish a trust relationship with operating systems A through A B through B . The trust relationship between operating systems A through A B through B and the isolated execution environment may be established using various suitable methods described in conjunction with .

In one embodiment subsequent to establishing the trust relationship with the operating system the secondary processor of the isolated execution environment may push the setting parameters stored in a setting profile to the operating system and pull updates to the settings from the operating system and save the updates to settings at the corresponding setting profile in the setting store of the isolated execution environment . For example a registered application with OS A may receive any update to settings of OA A by pushing updates to setting profile P stored in the setting store from the isolated execution environment or may write any update to settings of OA A by pulling from the setting store . In this way the registered application may be synched with the settings stored in the setting store seamlessly without otherwise disturbing the operation of operating systems A through A B through B .

In one embodiment each of the operating systems A through A B through B may have a respective corresponding setting profile P through P. Each of the setting profiles P through P may include setting parameters for one or more operating systems. For example a setting profile may include setting parameters for hardware and software resources such as WLAN WWAN security certificate and active directories. Some of sources may further include dependent settings. For example the setting parameters for WLAN may further include dependent setting parameters of static IP proxy and device certificates. These dependent settings may be identified as related to the WLAN setting profile. Thus the update to one of the setting profiles P through P may be pushed to a corresponding one of operating systems A through A B through B . In another embodiment one or more operating systems may be associated with a single setting profile so that the one or more operating systems may share the setting profile. Thus any update to the shared setting profile may be pushed to the one or more operating systems.

The isolated execution environment may include hardware components on which software modules may be implemented to perform functions to achieve seamless and secured storage of settings for operating systems. illustrates an isolated execution environment according to an embodiment of the present disclosure. The isolated execution environment may include a hardware environment including a processor such as a secondary processor a secured network interface for communicating with external processors and a secured memory accessible only by the processor . The processor may be a processing core that may be configured to execution instructions stored in memory . The secured memory may be a suitable temper resistant storage device that may include the setting store which includes setting profiles P through P stored thereon.

In one embodiment network interface may include a network card that is configured to provide communication channels between the isolated execution environment and the operating systems whose setting profiles are stored in the setting store in the secured memory . The communication between the isolated execution environment and the operating systems such as A through A B through B as shown in may be based on certain communication protocols. In this way processor may push setting profiles from the setting store to the operating systems and pull setting from the operating systems to the setting store via network interface .

In one embodiment as part of establishing a trust between the operating system and the isolated execution environment the isolated execution environment may include an authentication module which may be implemented as instructions executed on processor . The processor may execute the authentication module to establish an authenticated session between an operating system and the isolated execution environment . For example the authentication module may receive data of authentication information from the operating system. The authentication information may include but not limited to security codes or combination of an identification of the operating system and a passcode. If the authentication information matches data stored in the isolated execution environment an authenticated session may be established through which the operating system and the isolated execution environment may securely communicate. The authentication may establish secured communication channels or trust between the processors A B with the secondary processor thus with the isolated execution environment .

In another embodiment the isolated execution environment may establish the trust relationship with an operating system by issuing a security certificate to be associated with the root of the operating system. The operating system having the security certificate issued by the isolated execution environment is deemed to have established a trust relationship with the isolated execution environment. Each application executed on the operating system may register with the isolated execution environment e.g. centralized security engine to establish the trust relation.

In one embodiment the isolated execution environment may include a security engine with which applications controlled by the operating system may register. For example software applications including system applications such as the operating system and user applications that need to synchronize and receive setting parameters from a setting profile stored in the setting store may register with the security engine of the isolated execution environment and along with the authentication session to establish a trust relationship with the isolated execution environment . Subsequent to the registration with the security engine the software application may receive new setting parameters pushed by the processor through network interface .

In one embodiment each of the operating systems A through A B through B as shown in may include an API or agent A through A B through B that are capable of pushing and pulling setting parameters to and from setting profiles P P stored in secured setting store of an isolated execution environment . Each of the operating systems may establish a trust relationship with the isolated execution environment by setting a root in the isolated execution environment. Once the trust relationship is established an application registered with the isolated execution environment may via the agent associated with the operating system push setting parameters to or pull setting parameters from a corresponding setting profile stored in the setting data store .

Subsequently at a setting of the operating system may be updated by a user or an administrator. In response to the update of settings of the operating system agent A may push the updated setting to the isolated execution environment to store in a corresponding setting profile.

At the operating system may also establish a trust relationship with the isolated execution environment. Subsequently at agent A associated with operating system may pull the setting parameters from the corresponding setting profile that was updated. The agent A may store the pulled setting parameters in an internal register of the operating system and thus update its setting.

For simplicity of explanation the method is depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be performed to implement the method in accordance with the disclosed subject matter. In addition those skilled in the art will understand and appreciate that the method could alternatively be represented as a series of interrelated states via a state diagram or events.

Referring to at the operations start. At a processor i.e. a secondary processor such as a manageability engine or a centralized security engine CSE of the isolated execution environment may establish a trust relationship with a first operating system. For example the processor may first execute an authentication module to start an authenticated session with the first operating system. Under the authenticated session the processor may validate a certificate received from the first operating system. If the certificate is valid the processor may establish the trust relationship between the isolated execution environment and the first operating system.

At in response to an update to certain settings of the first operating system the processor associated with the isolated execution environment may receive the updated setting parameters. The processor may store the updated setting parameters in a profile that is marked to correspond to the first operating system.

At the processor associated with the isolated execution environment may optionally establish a trust relationship with a second operating system. For example the processor may request and check a security certificate associated with the second operating system. If the security certificate is valid the processor may afford the second operating system a trust relation.

At the processor may push the setting parameters stored in the setting profile to the second operating system and store the setting parameters in an internal register of the second operating system.

Processor includes a front end unit coupled to an execution engine unit and both are coupled to a memory unit . The processor may include a reduced instruction set computing RISC core a complex instruction set computing CISC core a very long instruction word VLIW core or a hybrid or alternative core type. As yet another option processor may include a special purpose core such as for example a network or communication core compression engine graphics core or the like. In one embodiment processor may be a multi core processor or may part of a multi processor system.

The front end unit includes a branch prediction unit coupled to an instruction cache unit which is coupled to an instruction translation lookaside buffer TLB which is coupled to an instruction fetch unit which is coupled to a decode unit . The decode unit also known as a decoder may decode instructions and generate as an output one or more micro operations micro code entry points microinstructions other instructions or other control signals which are decoded from or which otherwise reflect or are derived from the original instructions. The decoder may be implemented using various different mechanisms. Examples of suitable mechanisms include but are not limited to look up tables hardware implementations programmable logic arrays PLAs microcode read only memories ROMs etc. The instruction cache unit is further coupled to the memory unit . The decode unit is coupled to a rename allocator unit in the execution engine unit .

The execution engine unit includes the rename allocator unit coupled to a retirement unit and a set of one or more scheduler unit s . The scheduler unit s represents any number of different schedulers including reservations stations RS central instruction window etc. The scheduler unit s is coupled to the physical register file s unit s . Each of the physical register file s units represents one or more physical register files different ones of which store one or more different data types such as scalar integer scalar floating point packed integer packed floating point vector integer vector floating point etc. status e.g. an instruction pointer that is the address of the next instruction to be executed etc. The physical register file s unit s is overlapped by the retirement unit to illustrate various ways in which register renaming and out of order execution may be implemented e.g. using a reorder buffer s and a retirement register file s using a future file s a history buffer s and a retirement register file s using a register maps and a pool of registers etc. .

Generally the architectural registers are visible from the outside of the processor or from a programmer s perspective. The registers are not limited to any known particular type of circuit. Various different types of registers are suitable as long as they are capable of storing and providing data as described herein. Examples of suitable registers include but are not limited to dedicated physical registers dynamically allocated physical registers using register renaming combinations of dedicated and dynamically allocated physical registers etc. The retirement unit and the physical register file s unit s are coupled to the execution cluster s . The execution cluster s includes a set of one or more execution units and a set of one or more memory access units . The execution units may perform various operations e.g. shifts addition subtraction multiplication and operate on various types of data e.g. scalar floating point packed integer packed floating point vector integer vector floating point .

While some embodiments may include a number of execution units dedicated to specific functions or sets of functions other embodiments may include only one execution unit or multiple execution units that all perform all functions. The scheduler unit s physical register file s unit s and execution cluster s are shown as being possibly plural because certain embodiments create separate pipelines for certain types of data operations e.g. a scalar integer pipeline a scalar floating point packed integer packed floating point vector integer vector floating point pipeline and or a memory access pipeline that each have their own scheduler unit physical register file s unit and or execution cluster and in the case of a separate memory access pipeline certain embodiments are implemented in which only the execution cluster of this pipeline has the memory access unit s . It should also be understood that where separate pipelines are used one or more of these pipelines may be out of order issue execution and the rest in order.

The set of memory access units is coupled to the memory unit which may include a data prefetcher a data TLB unit a data cache unit DCU and a level 2 L2 cache unit to name a few examples. In some embodiments DCU is also known as a first level data cache L1 cache . The DCU may handle multiple outstanding cache misses and continue to service incoming stores and loads. It also supports maintaining cache coherency. The data TLB unit is a cache used to improve virtual address translation speed by mapping virtual and physical address spaces. In one exemplary embodiment the memory access units may include a load unit a store address unit and a store data unit each of which is coupled to the data TLB unit in the memory unit . The L2 cache unit may be coupled to one or more other levels of cache and eventually to a main memory.

In one embodiment the data prefetcher speculatively loads prefetches data to the DCU by automatically predicting which data a program is about to consume. Prefeteching may refer to transferring data stored in one memory location of a memory hierarchy e.g. lower level caches or memory to a higher level memory location that is closer e.g. yields lower access latency to the processor before the data is actually demanded by the processor. More specifically prefetching may refer to the early retrieval of data from one of the lower level caches memory to a data cache and or prefetch buffer before the processor issues a demand for the specific data being returned.

The processor may support one or more instructions sets e.g. the x86 instruction set with some extensions that have been added with newer versions the MIPS instruction set of MIPS Technologies of Sunnyvale Calif. the ARM instruction set with optional additional extensions such as NEON of ARM Holdings of Sunnyvale Calif. .

It should be understood that the core may support multithreading executing two or more parallel sets of operations or threads and may do so in a variety of ways including time sliced multithreading simultaneous multithreading where a single physical core provides a logical core for each of the threads that physical core is simultaneously multithreading or a combination thereof e.g. time sliced fetching and decoding and simultaneous multithreading thereafter such as in the Intel Hyperthreading technology .

While register renaming is described in the context of out of order execution it should be understood that register renaming may be used in an in order architecture. While the illustrated embodiment of the processor also includes a separate instruction and data cache units and a shared L2 cache unit alternative embodiments may have a single internal cache for both instructions and data such as for example a Level 1 L1 internal cache or multiple levels of internal cache. In some embodiments the system may include a combination of an internal cache and an external cache that is external to the core and or the processor. Alternatively all of the cache may be external to the core and or the processor.

The front end may include several units. In one embodiment the instruction prefetcher fetches instructions from memory and feeds them to an instruction decoder which in turn decodes or interprets them. For example in one embodiment the decoder decodes a received instruction into one or more operations called micro instructions or micro operations also called micro op or uops that the machine can execute. In other embodiments the decoder parses the instruction into an opcode and corresponding data and control fields that are used by the micro architecture to perform operations in accordance with one embodiment. In one embodiment the trace cache takes decoded uops and assembles them into program ordered sequences or traces in the uop queue for execution. When the trace cache encounters a complex instruction the microcode ROM provides the uops needed to complete the operation.

Some instructions are converted into a single micro op whereas others need several micro ops to complete the full operation. In one embodiment if more than four micro ops are needed to complete an instruction the decoder accesses the microcode ROM to do the instruction. For one embodiment an instruction can be decoded into a small number of micro ops for processing at the instruction decoder . In another embodiment an instruction can be stored within the microcode ROM should a number of micro ops be needed to accomplish the operation. The trace cache refers to an entry point programmable logic array PLA to determine a correct micro instruction pointer for reading the micro code sequences to complete one or more instructions in accordance with one embodiment from the micro code ROM . After the microcode ROM finishes sequencing micro ops for an instruction the front end of the machine resumes fetching micro ops from the trace cache .

The out of order execution engine is where the instructions are prepared for execution. The out of order execution logic has a number of buffers to smooth out and re order the flow of instructions to optimize performance as they go down the pipeline and get scheduled for execution. The allocator logic allocates the machine buffers and resources that each uop needs in order to execute. The register renaming logic renames logic registers onto entries in a register file. The allocator also allocates an entry for each uop in one of the two uop queues one for memory operations and one for non memory operations in front of the instruction schedulers memory scheduler fast scheduler slow general floating point scheduler and simple floating point scheduler . The uop schedulers determine when a uop is ready to execute based on the readiness of their dependent input register operand sources and the availability of the execution resources the uops need to complete their operation. The fast scheduler of one embodiment can schedule on each half of the main clock cycle while the other schedulers can only schedule once per main processor clock cycle. The schedulers arbitrate for the dispatch ports to schedule uops for execution.

Register files sit between the schedulers and the execution units in the execution block . There is a separate register file for integer and floating point operations respectively. Each register file of one embodiment also includes a bypass network that can bypass or forward just completed results that have not yet been written into the register file to new dependent uops. The integer register file and the floating point register file are also capable of communicating data with the other. For one embodiment the integer register file is split into two separate register files one register file for the low order 32 bits of data and a second register file for the high order 32 bits of data. The floating point register file of one embodiment has 128 bit wide entries because floating point instructions typically have operands from 64 to 128 bits in width.

The execution block contains the execution units where the instructions are actually executed. This section includes the register files that store the integer and floating point data operand values that the micro instructions need to execute. The processor of one embodiment is comprised of a number of execution units address generation unit AGU AGU fast ALU fast ALU slow ALU floating point ALU floating point move unit . For one embodiment the floating point execution blocks execute floating point MMX SIMD and SSE or other operations. The floating point ALU of one embodiment includes a 64 bit by 64 bit floating point divider to execute divide square root and remainder micro ops. For embodiments of the present disclosure instructions involving a floating point value may be handled with the floating point hardware.

In one embodiment the ALU operations go to the high speed ALU execution units . The fast ALUs of one embodiment can execute fast operations with an effective latency of half a clock cycle. For one embodiment most complex integer operations go to the slow ALU as the slow ALU includes integer execution hardware for long latency type of operations such as a multiplier shifts flag logic and branch processing. Memory load store operations are executed by the AGUs . For one embodiment the integer ALUs are described in the context of performing integer operations on 64 bit data operands. In alternative embodiments the ALUs can be implemented to support a variety of data bits including 16 32 128 256 etc. Similarly the floating point units can be implemented to support a range of operands having bits of various widths. For one embodiment the floating point units can operate on 128 bits wide packed data operands in conjunction with SIMD and multimedia instructions.

In one embodiment the uops schedulers dispatch dependent operations before the parent load has finished executing. As uops are speculatively scheduled and executed in processor the processor also includes logic to handle memory misses. If a data load misses in the data cache there can be dependent operations in flight in the pipeline that have left the scheduler with temporarily incorrect data. A replay mechanism tracks and re executes instructions that use incorrect data. Only the dependent operations need to be replayed and the independent ones are allowed to complete. The schedulers and replay mechanism of one embodiment of a processor are also designed to catch instruction sequences for text string comparison operations.

The processor also includes logic to implement store address prediction for memory disambiguation according to embodiments of the disclosure. In one embodiment the execution block of processor may include a store address predictor not shown for implementing store address prediction for memory disambiguation.

The term registers may refer to the on board processor storage locations that are used as part of instructions to identify operands. In other words registers may be those that are usable from the outside of the processor from a programmer s perspective . However the registers of an embodiment should not be limited in meaning to a particular type of circuit. Rather a register of an embodiment is capable of storing and providing data and performing the functions described herein. The registers described herein can be implemented by circuitry within a processor using any number of different techniques such as dedicated physical registers dynamically allocated physical registers using register renaming combinations of dedicated and dynamically allocated physical registers etc. In one embodiment integer registers store thirty two bit integer data. A register file of one embodiment also contains eight multimedia SIMD registers for packed data.

For the discussions below the registers are understood to be data registers designed to hold packed data such as 64 bits wide MMX registers also referred to as mm registers in some instances in microprocessors enabled with MMX technology from Intel Corporation of Santa Clara Calif. These MMX registers available in both integer and floating point forms can operate with packed data elements that accompany SIMD and SSE instructions. Similarly 128 bits wide XMM registers relating to SSE2 SSE3 SSE4 or beyond referred to generically as SSEx technology can also be used to hold such packed data operands. In one embodiment in storing packed data and integer data the registers do not need to differentiate between the two data types. In one embodiment integer and floating point are either contained in the same register file or different register files. Furthermore in one embodiment floating point and integer data may be stored in different registers or the same registers.

Referring now to shown is a block diagram illustrating a system in which an embodiment of the disclosure may be used. As shown in multiprocessor system is a point to point interconnect system and includes a first processor and a second processor coupled via a point to point interconnect . While shown with only two processors it is to be understood that the scope of embodiments of the disclosure is not so limited. In other embodiments one or more additional processors may be present in a given processor. In one embodiment the multiprocessor system may implement hybrid cores as described herein.

Processors and are shown including integrated memory controller units and respectively. Processor also includes as part of its bus controller units point to point P P interfaces and similarly second processor includes P P interfaces and . Processors may exchange information via a point to point P P interface using P P interface circuits . As shown in IMCs and couple the processors to respective memories namely a memory and a memory which may be portions of main memory locally attached to the respective processors.

Processors may each exchange information with a chipset via individual P P interfaces using point to point interface circuits . Chipset may also exchange information with a high performance graphics circuit via a high performance graphics interface .

A shared cache not shown may be included in either processor or outside of both processors yet connected with the processors via P P interconnect such that either or both processors local cache information may be stored in the shared cache if a processor is placed into a low power mode.

Chipset may be coupled to a first bus via an interface . In one embodiment first bus may be a Peripheral Component Interconnect PCI bus or a bus such as a PCI Express bus or another third generation I O interconnect bus although the scope of the present disclosure is not so limited.

As shown in various I O devices may be coupled to first bus along with a bus bridge which couples first bus to a second bus . In one embodiment second bus may be a low pin count LPC bus. Various devices may be coupled to second bus including for example a keyboard and or mouse communication devices and a storage unit such as a disk drive or other mass storage device which may include instructions code and data in one embodiment. Further an audio I O may be coupled to second bus . Note that other architectures are possible. For example instead of the point to point architecture of a system may implement a multi drop bus or other such architecture.

Referring now to shown is a block diagram of a system in which one embodiment of the disclosure may operate. The system may include one or more processors which are coupled to graphics memory controller hub GMCH . The optional nature of additional processors is denoted in with broken lines. In one embodiment processors implement hybrid cores according to embodiments of the disclosure.

Each processor may be some version of the circuit integrated circuit processor and or silicon integrated circuit as described above. However it should be noted that it is unlikely that integrated graphics logic and integrated memory control units would exist in the processors . illustrates that the GMCH may be coupled to a memory that may be for example a dynamic random access memory DRAM . The DRAM may for at least one embodiment be associated with a non volatile cache.

The GMCH may be a chipset or a portion of a chipset. The GMCH may communicate with the processor s and control interaction between the processor s and memory . The GMCH may also act as an accelerated bus interface between the processor s and other elements of the system . For at least one embodiment the GMCH communicates with the processor s via a multi drop bus such as a frontside bus FSB .

Furthermore GMCH is coupled to a display such as a flat panel or touchscreen display . GMCH may include an integrated graphics accelerator. GMCH is further coupled to an input output I O controller hub ICH which may be used to couple various peripheral devices to system . Shown for example in the embodiment of is an external graphics device which may be a discrete graphics device coupled to ICH along with another peripheral device .

Alternatively additional or different processors may also be present in the system . For example additional processor s may include additional processors s that are the same as processor additional processor s that are heterogeneous or asymmetric to processor accelerators such as e.g. graphics accelerators or digital signal processing DSP units field programmable gate arrays or any other processor. There can be a variety of differences between the processor s in terms of a spectrum of metrics of merit including architectural micro architectural thermal power consumption characteristics and the like. These differences may effectively manifest themselves as asymmetry and heterogeneity amongst the processors . For at least one embodiment the various processors may reside in the same die package.

Referring now to shown is a block diagram of a system in which an embodiment of the disclosure may operate. illustrates processors . In one embodiment processors may implement hybrid cores as described above. Processors may include integrated memory and I O control logic CL and respectively and intercommunicate with each other via point to point interconnect between point to point P P interfaces and respectively. Processors each communicate with chipset via point to point interconnects and through the respective P P interfaces to and to as shown. For at least one embodiment the CL may include integrated memory controller units. CLs may include I O control logic. As depicted memories coupled to CLs and I O devices are also coupled to the control logic . Legacy I O devices are coupled to the chipset via interface .

Embodiments may be implemented in many different system types. is a block diagram of a SoC in accordance with an embodiment of the present disclosure. Dashed lined boxes are optional features on more advanced SoCs. In an interconnect unit s is coupled to an application processor which includes a set of one or more cores A N and shared cache unit s a system agent unit a bus controller unit s an integrated memory controller unit s a set or one or more media processors which may include integrated graphics logic an image processor for providing still and or video camera functionality an audio processor for providing hardware audio acceleration and a video processor for providing video encode decode acceleration an static random access memory SRAM unit a direct memory access DMA unit and a display unit for coupling to one or more external displays. In one embodiment a memory module may be included in the integrated memory controller unit s . In another embodiment the memory module may be included in one or more other components of the SoC that may be used to access and or control a memory. The application processor may include a store address predictor for implementing hybrid cores as described in embodiments herein.

The memory hierarchy includes one or more levels of cache within the cores a set or one or more shared cache units and external memory not shown coupled to the set of integrated memory controller units . The set of shared cache units may include one or more mid level caches such as level 2 L2 level 3 L3 level 4 L4 or other levels of cache a last level cache LLC and or combinations thereof.

In some embodiments one or more of the cores A N are capable of multi threading. The system agent includes those components coordinating and operating cores A N. The system agent unit may include for example a power control unit PCU and a display unit. The PCU may be or include logic and components needed for regulating the power state of the cores A N and the integrated graphics logic . The display unit is for driving one or more externally connected displays.

The cores A N may be homogenous or heterogeneous in terms of architecture and or instruction set. For example some of the cores A N may be in order while others are out of order. As another example two or more of the cores A N may be capable of execution the same instruction set while others may be capable of executing only a subset of that instruction set or a different instruction set.

The application processor may be a general purpose processor such as a Core i3 i5 i7 2 Duo and Quad Xeon Itanium Atom or Quark processor which are available from Intel Corporation of Santa Clara Calif. Alternatively the application processor may be from another company such as ARM Holdings Ltd MIPS etc. The application processor may be a special purpose processor such as for example a network or communication processor compression engine graphics processor co processor embedded processor or the like. The application processor may be implemented on one or more chips. The application processor may be a part of and or may be implemented on one or more substrates using any of a number of process technologies such as for example BiCMOS CMOS or NMOS.

Here SOC includes 2 cores and . Cores and may conform to an Instruction Set Architecture such as an Intel Architecture Core based processor an Advanced Micro Devices Inc. AMD processor a MIPS based processor an ARM based processor design or a customer thereof as well as their licensees or adopters. Cores and are coupled to cache control that is associated with bus interface unit and L2 cache to communicate with other parts of system . Interconnect includes an on chip interconnect such as an IOSF AMBA or other interconnect discussed above which potentially implements one or more aspects of the described disclosure. In one embodiment cores may implement hybrid cores as described in embodiments herein.

Interconnect provides communication channels to the other components such as a Subscriber Identity Module SIM to interface with a SIM card a boot ROM to hold boot code for execution by cores and to initialize and boot SoC a SDRAM controller to interface with external memory e.g. DRAM a flash controller to interface with non volatile memory e.g. Flash a peripheral control e.g. Serial Peripheral Interface to interface with peripherals video codecs and Video interface to display and receive input e.g. touch enabled input GPU to perform graphics related computations etc. Any of these interfaces may incorporate aspects of the disclosure described herein. In addition the system illustrates peripherals for communication such as a Bluetooth module 3G modem GPS and Wi Fi .

The computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. In one embodiment processing device may include one or processing cores. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein. In one embodiment processing device is the same as processor architecture described with respect to as described herein with embodiments of the disclosure.

The computer system may further include a network interface device communicably coupled to a network . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker . Furthermore computer system may include a graphics processing unit a video processing unit and an audio processing unit .

The data storage device may include a machine accessible storage medium on which is stored software implementing any one or more of the methodologies of functions described herein such as implementing store address prediction for memory disambiguation as described above. The software may also reside completely or at least partially within the main memory as instructions and or within the processing device as processing logic during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store instructions implementing store address prediction for hybrid cores such as described according to embodiments of the disclosure. While the machine accessible storage medium is shown in an example embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

The following examples pertain to further embodiments. Example 1 is a processing device including a first processor executing an operating system including a configurable setting and an isolated execution environment including a second processor communicatively coupled to the first processor and a secure store coupled to the second processor to store a setting profile containing a copy of the configurable setting in which the second processor is to subsequent to establishing a trust relationship between the isolated execution environment and the operating system synchronize the configurable setting with the setting profile.

In Example 2 the subject matter of Example 1 can optionally provide that the first processor executes a second operating system that comprises a second configurable setting and wherein the second processor is to subsequent to establishing the trust relationship between the isolated execution environment and the second operating system synchronize the second configurable setting with the setting profile.

In Example 3 the subject matter of Examples 1 and 2 can optionally provide that to synchronize the isolated execution environment and the second operating system the second processor is to receive an updated configurable setting from the operating system provide the updated configurable setting to store in the setting profile and push the updated configurable setting stored in the setting profile to the second operating system to update the second configurable setting of the second operating system.

In Example 4 the subject matter of Example 1 can optionally provide that the second processor is coupled to the first processor via an interconnect fabric.

In Example 5 the subject matter of Example 1 can optionally provide that the second processor comprises a manageability engine coupled with the first processor.

In Example 6 the subject matter of Example 1 can optionally provide that the second processor comprises a centralized security engine coupled with the processor.

In Example 7 the subject matter of Examples 1 and 6 can optionally provide that the first processor is to register a software application with the centralized security engine and wherein the first processor pushes an update to the setting profile to the registered software application.

In Example 8 the subject matter of Example 1 can optionally provide that the first processor hosts a plurality of virtual machines via a hypervisor and wherein each virtual machine operates an operating system.

In Example 9 the subject matter of Examples 1 and 8 can optionally provide that the isolated execution environment comprises one of the plurality of virtual machines.

In Example 10 the subject matter of Example 8 can optionally provide that the isolated execution environment comprises the hypervisor.

In Example 11 the subject matter of Examples 1 and 2 can optionally provide that the configurable setting comprises a wireless local area network WLAN profile.

In Example 12 the subject matter of Examples 1 and 2 can optionally provide that the configurable setting comprises a wireless wide area network WWAN profile.

In Example 13 the subject matter of Examples 1 and 2 can optionally provide that the configurable setting comprises a setting for a network access certificate.

Example 14 is a System on a Chip SoC including a first processor executing an operating system including a configurable setting a second processor communicatively coupled to the first processor and a secure store coupled to the second processor to store a setting profile comprising a copy of the configurable setting in which the second processor and the secure store constitute an isolated execution environment and wherein the second processor is to subsequent to establishing a trust relationship between the isolated execution environment and the operating system synchronize the configurable setting with the setting profile.

In Example 15 the subject matter of Example 14 can optionally provide that the first processor executes a second operating system that comprises a second configurable setting and wherein the second processor is to subsequent to establishing the trust relationship between the isolated execution environment and the second operating system synchronize the second configurable setting with the setting profile.

In Example 16 the subject matter of any of Examples 14 and 15 can optionally provide that to synchronize the isolated execution environment and the second operating system the second processor is to receive an updated configurable setting from the operating system provide the updated configurable setting to store in the setting profile and push the updated configurable setting stored in the setting profile to the second operating system to update the second configurable setting of the second operating system.

In Example 17 the subject matter of Example 14 can optionally provide that the second processor comprises a manageability engine coupled with the first processor.

In Example 18 the subject matter of any of Examples 14 and 17 can optionally provide that the second processor comprises a centralized security engine coupled with the processor.

In Example 19 the subject matter of Example 18 can optionally provide that the first processor is to register a software application with the centralized security engine and wherein the first processor pushes an update to the setting profile to the registered software application.

Example 20 is a method including establishing by a second processor of an isolated execution environment a trust relationship between the isolated execution environment and a first operating system executed on a first processor synchronizing a setting profile stored in a secure store associated with the isolated execution environment and a configurable setting of the first operating system establishing a trust relationship between the isolated execution environment and a second operating system executed on the first processor and synchronizing the setting profile stored in the secure store associated with the isolated execution environment and a second configurable setting of the second operating system.

In Example 21 the subject matter of Example 20 can further include responsive to receiving an update to the configurable setting of the first operating system storing the update in the setting profile and pushing the update to the second operating system to update the second configurable setting.

In Example 22 the subject matter of any of Examples 20 and 21 can optionally provide that the second processor comprises a manageability engine coupled with the first processor.

In Example 23 the subject matter of Example 22 can optionally provide that the second processor comprises a centralized security engine coupled with the processor.

Example 25 is a machine readable non transitory medium having stored thereon program codes that when executed perform operations the operations including establishing by a second processor of an isolated execution environment a trust relationship between the isolated execution environment and a first operating system executed on a first processor synchronizing a setting profile stored in a secure store associated with the isolated execution environment and a configurable setting of the first operating system establishing a trust relationship between the isolated execution environment and a second operating system executed on the first processor and synchronizing the setting profile stored in the secure store associated with the isolated execution environment and a second configurable setting of the second operating system.

In Example 26 the subject matter of Example 25 can further include responsive to receiving an update to the configurable setting of the first operating system storing the update in the setting profile and pushing the update to the second operating system to update the second configurable setting.

While the disclosure has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations there from. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this disclosure.

A design may go through various stages from creation to simulation to fabrication. Data representing a design may represent the design in a number of manners. First as is useful in simulations the hardware may be represented using a hardware description language or another functional description language. Additionally a circuit level model with logic and or transistor gates may be produced at some stages of the design process. Furthermore most designs at some stage reach a level of data representing the physical placement of various devices in the hardware model. In the case where conventional semiconductor fabrication techniques are used the data representing the hardware model may be the data specifying the presence or absence of various features on different mask layers for masks used to produce the integrated circuit. In any representation of the design the data may be stored in any form of a machine readable medium. A memory or a magnetic or optical storage such as a disc may be the machine readable medium to store information transmitted via optical or electrical wave modulated or otherwise generated to transmit such information. When an electrical carrier wave indicating or carrying the code or design is transmitted to the extent that copying buffering or re transmission of the electrical signal is performed a new copy is made. Thus a communication provider or a network provider may store on a tangible machine readable medium at least temporarily an article such as information encoded into a carrier wave embodying techniques of embodiments of the present disclosure.

A module as used herein refers to any combination of hardware software and or firmware. As an example a module includes hardware such as a micro controller associated with a non transitory medium to store code adapted to be executed by the micro controller. Therefore reference to a module in one embodiment refers to the hardware which is specifically configured to recognize and or execute the code to be held on a non transitory medium. Furthermore in another embodiment use of a module refers to the non transitory medium including the code which is specifically adapted to be executed by the microcontroller to perform predetermined operations. And as can be inferred in yet another embodiment the term module in this example may refer to the combination of the microcontroller and the non transitory medium. Often module boundaries that are illustrated as separate commonly vary and potentially overlap. For example a first and a second module may share hardware software firmware or a combination thereof while potentially retaining some independent hardware software or firmware. In one embodiment use of the term logic includes hardware such as transistors registers or other hardware such as programmable logic devices.

Use of the phrase configured to in one embodiment refers to arranging putting together manufacturing offering to sell importing and or designing an apparatus hardware logic or element to perform a designated or determined task. In this example an apparatus or element thereof that is not operating is still configured to perform a designated task if it is designed coupled and or interconnected to perform said designated task. As a purely illustrative example a logic gate may provide a 0 or a 1 during operation. But a logic gate configured to provide an enable signal to a clock does not include every potential logic gate that may provide a 1 or 0. Instead the logic gate is one coupled in some manner that during operation the 1 or 0 output is to enable the clock. Note once again that use of the term configured to does not require operation but instead focus on the latent state of an apparatus hardware and or element where in the latent state the apparatus hardware and or element is designed to perform a particular task when the apparatus hardware and or element is operating.

Furthermore use of the phrases to capable of to and or operable to in one embodiment refers to some apparatus logic hardware and or element designed in such a way to enable use of the apparatus logic hardware and or element in a specified manner. Note as above that use of to capable to or operable to in one embodiment refers to the latent state of an apparatus logic hardware and or element where the apparatus logic hardware and or element is not operating but is designed in such a manner to enable use of an apparatus in a specified manner.

A value as used herein includes any known representation of a number a state a logical state or a binary logical state. Often the use of logic levels logic values or logical values is also referred to as 1 s and 0 s which simply represents binary logic states. For example a 1 refers to a high logic level and 0 refers to a low logic level. In one embodiment a storage cell such as a transistor or flash cell may be capable of holding a single logical value or multiple logical values. However other representations of values in computer systems have been used. For example the decimal number ten may also be represented as a binary value of 910 and a hexadecimal letter A. Therefore a value includes any representation of information capable of being held in a computer system.

Moreover states may be represented by values or portions of values. As an example a first value such as a logical one may represent a default or initial state while a second value such as a logical zero may represent a non default state. In addition the terms reset and set in one embodiment refer to a default and an updated value or state respectively. For example a default value potentially includes a high logical value i.e. reset while an updated value potentially includes a low logical value i.e. set. Note that any combination of values may be utilized to represent any number of states.

The embodiments of methods hardware software firmware or code set forth above may be implemented via instructions or code stored on a machine accessible machine readable computer accessible or computer readable medium which are executable by a processing element. A non transitory machine accessible readable medium includes any mechanism that provides i.e. stores and or transmits information in a form readable by a machine such as a computer or electronic system. For example a non transitory machine accessible medium includes random access memory RAM such as static RAM SRAM or dynamic RAM DRAM ROM magnetic or optical storage medium flash memory devices electrical storage devices optical storage devices acoustical storage devices other form of storage devices for holding information received from transitory propagated signals e.g. carrier waves infrared signals digital signals etc. which are to be distinguished from the non transitory mediums that may receive information there from.

Instructions used to program logic to perform embodiments of the disclosure may be stored within a memory in the system such as DRAM cache flash memory or other storage. Furthermore the instructions can be distributed via a network or by way of other computer readable media. Thus a machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer but is not limited to floppy diskettes optical disks Compact Disc Read Only Memory CD ROMs and magneto optical disks Read Only Memory ROMs Random Access Memory RAM Erasable Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM magnetic or optical cards flash memory or a tangible machine readable storage used in the transmission of information over the Internet via electrical optical acoustical or other forms of propagated signals e.g. carrier waves infrared signals digital signals etc. . Accordingly the computer readable medium includes any type of tangible machine readable medium suitable for storing or transmitting electronic instructions or information in a form readable by a machine e.g. a computer .

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present disclosure. Thus the appearances of the phrases in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In the foregoing specification a detailed description has been given with reference to specific exemplary embodiments. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the disclosure as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense. Furthermore the foregoing use of embodiment and other exemplarily language does not necessarily refer to the same embodiment or the same example but may refer to different and distinct embodiments as well as potentially the same embodiment.

