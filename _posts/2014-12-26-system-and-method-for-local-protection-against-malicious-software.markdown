---

title: System and method for local protection against malicious software
abstract: A method in one example implementation includes intercepting a network access attempt on a computing device and determining a software program file associated with the network access attempt. The method also includes evaluating a first criterion to determine whether the network access attempt is permitted and blocking the network access attempt if it is not permitted. The first criterion includes a trust status of the software program file. In specific embodiments, the trust status is defined as trusted if the software program file is included in a whitelist of trustworthy program files and untrusted if the software program file is not included in a whitelist. In more specific embodiments, the method includes blocking the network access attempt if the software program file has an untrusted status. In further embodiments, an event is logged if the software program file associated with the network access attempt has an untrusted status.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467470&OS=09467470&RS=09467470
owner: McAfee, Inc.
number: 09467470
owner_city: Santa Clara
owner_country: US
publication_date: 20141226
---
This Application is a continuation and claims the benefit under 35 U.S.C. 120 of U.S. application Ser. No. 12 844 892 filed Jul. 28 2010 entitled SYSTEM AND METHOD FOR LOCAL PROTECTION AGAINST MALICIOUS SOFTWARE Inventors Rishi Bhargava et al. This application is related to co pending U.S. patent application Ser. No. 12 844 964 filed Jul. 28 2010 entitled SYSTEM AND METHOD FOR NETWORK LEVEL PROTECTION AGAINST MALICIOUS SOFTWARE Inventors Rishi Bhargava et al. The disclosures of both of the prior applications are considered part of and are incorporated by reference in the disclosure of this application.

This disclosure relates in general to the field of network security and more particularly to local protection against malicious software.

The field of network security has become increasingly important in today s society. The Internet has enabled interconnection of different computer networks all over the world. The ability to effectively protect and maintain stable computers and systems however presents a significant obstacle for component manufacturers system designers and network operators. This obstacle is made even more complicated due to the continually evolving array of tactics exploited by malicious operators. Of particular concern more recently are botnets which may be used for a wide variety of malicious purposes. Once a malicious software program file e.g. a bot has infected a host computer a malicious operator may issue commands from a command and control server to control the bot. Bots can be instructed to perform any number of malicious actions such as for example sending out spam or malicious emails from the host computer stealing sensitive information from a business or individual associated with the host computer propagating the botnet to other host computers and or assisting with distributed denial of service attacks. In addition the malicious operator can sell or otherwise give access to the botnets to other malicious operators through the command and control servers thereby escalating the exploitation of the host computers. Consequently botnets provide a powerful way for malicious operators to access other computers and to manipulate those computers for any number of malicious purposes. Security professionals need to develop innovative tools to combat such tactics that allow malicious operators to exploit computers.

A method in one example implementation includes intercepting a network access attempt on a computing device and determining a software program file associated with the network access attempt. The method also includes evaluating a first criterion to determine whether the network access attempt is permitted and blocking the network access attempt if it is not permitted. Finally the first criterion includes a trust status of the software program file. In specific embodiments the trust status is defined as trusted if the software program file is included in a whitelist identifying trustworthy software program files and untrusted if the software program file is not included in a whitelist. In more specific embodiments the network access attempt is blocked if the software program file has an untrusted status. In another more specific embodiment the method further includes searching one or more whitelists to determine whether the software program file is identified in one of the whitelists. In other more specific embodiments the method includes evaluating a second criterion to determine whether the second criterion overrides the first criterion with the second criterion including a network access policy for the software program file. In yet another embodiment an event may be logged if the trust status of the software program file is defined as untrusted and such logging may occur instead of blocking the network access attempt or may occur in addition to blocking the network access attempt.

In example embodiments local protection components on hosts and central protection components in central server may cooperate to provide a system for local protection against malicious software. In one embodiment each software program file in executable software and of hosts and respectively is evaluated to determine a trust status i.e. trusted or untrusted using one or more trust evaluation techniques e.g. whitelist comparisons program file change comparisons blacklist comparisons etc. . A central untrusted software inventory may include entries identifying each program file that is categorized as untrusted and this inventory may also be locally stored on corresponding hosts and . In other embodiments evaluation of software program files of executable software and to determine a trust status is performed in real time for program files associated with each network access attempt. A network access attempt as used herein in this Specification is intended to include any inbound or outbound network access attempt on a host e.g. accepting a connection request making a connection request receiving electronic data from a network sending electronic data to a network . When a software process on one of hosts or is associated with a network access attempt the network access may be blocked if a trust status of any of the program files associated with the software process is determined to be untrusted. In example embodiments the trust status may be determined using one of the untrusted software inventories or may be determined using one or more trust evaluation techniques in real time. Policies may also be used to define blocking rules for software processes associated with untrusted program files e.g. only allow access to a specified subnet of network addresses block all inbound and outbound network access attempts block only inbound or outbound network access attempts block all local network access attempts and allow Internet traffic etc. Any network access attempts by software processes associated with untrusted program files may also be logged and aggregated for reporting.

For purposes of illustrating the techniques of the system for local protection against malicious software it is important to understand the activities occurring within a given network. The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications. In addition it will be appreciated that the broad scope of this disclosure intends for references to program file software program file and executable software to encompass any software file comprising instructions that can be understood and processed on a computer such as for example executable files library modules object files other executable modules script files interpreter files and the like.

Typical network environments used in organizations and by individuals include the ability to communicate electronically with other networks using for example the Internet to access web pages hosted on servers connected to the Internet to send or receive electronic mail i.e. email messages or to exchange files with end users or servers connected to the Internet. Malicious users are continuously developing new tactics using the Internet to spread malware and to gain access to confidential information.

Tactics that represent an increasing threat to computer security often include botnets. Botnets use a client server architecture where a type of malicious software i.e. a bot is placed on a host computer and communicates with a command and control server which may be controlled by a malicious user e.g. a botnet operator . The bot may receive commands from the command and control server to perform particular malicious activities and accordingly may execute such commands. The bot may also send any results or pilfered information back to the command and control server. In addition to receiving commands to perform malicious activities bots also typically include one or more propagation vectors that enable it to spread within an organization s network or across other networks to other organizations or individuals. Common propagation vectors include exploiting known vulnerabilities on hosts within the local network and sending malicious emails having a malicious program attached or providing malicious links within the emails. Bots may also infect host computers through for example drive by downloads viruses worms Trojan horses etc.

Botnets provide a powerful way for botnet operators to compromise computer systems by employing a variety of attacks. Once a bot has infected a host computer the command and control server can issue commands to the bot to perform various types of attacks. Commonly botnets have been used to send bulk email and to perform distributed denial of service attacks. More recently however botnets have been used to perform more targeted attacks against businesses and individuals to obtain confidential data or other sensitive information such as intellectual property and financial data.

Existing firewall and network intrusion prevention technologies are generally deficient in recognizing and containing botnets. Bots are often designed to initiate communication with the command and control server and to masquerade as normal web browser traffic. Bots may be crafted with a command and control protocol that makes the bot appear to be making normal outbound network connections to a web server. For example a bot may use a port typically used to communicate with a web server. Such bots therefore may not be detected by existing technologies without performing more detailed packet inspection of the web traffic. Moreover once a bot is discovered the botnet operator may simply find another way to masquerade network access attempts by the bot to continue to present as normal web traffic. More recently botnet operators have crafted bots to use encryption protocols such as for example secure socket layer SSL thereby encrypting malicious network access attempts. Such encrypted traffic may use a Hypertext Transfer Protocol Secure HTTPS port such that only the endpoints involved in the encrypted session can decrypt the data. Thus existing firewalls and other network intrusion prevention technologies are unable to perform any meaningful inspection of the web traffic. Consequently bots continue to infect host computers within networks.

Other software security technology focused on preventing unauthorized program files from executing on a host computer may have undesirable side effects for end users or employees of a business or other organizational entity. Network or Information Technology IT administrators may be charged with crafting extensive policies relevant to all facets of the business entity to enable employees to obtain software and other electronic data from desirable and trusted network resources. Without extensive policies in place employees may be prevented from downloading software and other electronic data from network resources that are not specifically authorized even if such software and other data are legitimate and necessary for business activities. In addition such systems may be so restrictive that if unauthorized software is found on a host computer any host computer activities may be suspended pending network administrator intervention. For businesses this type of system may interfere with legitimate and necessary business activities resulting in worker downtime lost revenue significant Information Technology IT overhead and the like.

A system and method for local protection against malicious software as outlined in can reduce the propagation and malicious activities of botnets from infected networks while allowing legitimate activities to continue within an infected network with less IT overhead being required. In accordance with one example implementation a system is provided to proactively determine which software program files on each host within a network are a risk i.e. untrusted . In one example this determination is made by detecting unknown or changed program files residing on the hosts. Whenever a network access attempt i.e. inbound or outbound is made on one of the hosts within the network a process associated with the network access attempt is evaluated to determine its corresponding program file or files and the program file or files are evaluated to determine their trust statuses i.e. trusted or untrusted . If each program file is trusted then the network access attempt associated with the process may be allowed. However if any of the program files are untrusted then the network access attempt associated with the process may be blocked thereby preventing the propagation and malicious activities of a possible bot. In one example embodiment network access may be selectively permitted to and or from a defined set of subnets based on policy configurations. Thus the ability of a bot to respond to commands from the command and control server and to propagate may be significantly diminished while minimizing the interruption or prevention of necessary business activities. As a result the system as implemented in provides better protection to networks with an infected host and to other networks the infected host attempts to access.

Turning to the infrastructure of local network is representative of an example architecture in which the system for protecting computer systems may be implemented. Local network may be configured in a variety of forms including but not limited to one or more local area networks LANs any other suitable network or any combinations thereof. The Internet is representative of a wide area network WAN to which local network may be suitably connected. In one embodiment local network may be operably coupled to the Internet by an Internet Service Provider ISP or through an Internet Server with dedicated bandwidth. The connection between local network and the Internet may include any appropriate medium such as for example digital subscriber lines DSL telephone lines T1 lines T3 lines wireless satellite fiber optics cable Ethernet etc. or any combination thereof. In addition gateways switches routers and the like may be used to facilitate electronic communication between hosts and central server and the Internet . The ISP or Internet Server may be configured to allow hosts to communicate with other nodes on the Internet using Transmission Control Protocol Internet Protocol TCP IP and a mail server not shown may allow hosts to send and receive email messages using Simple Mail Transfer Protocol SMTP .

In one example embodiment local network represents a network environment of an organization e.g. a business a school a government entity a family etc. with hosts and representing end user computers operated by employees or other individuals associated with the organization. The end user computers may include computing devices such as desktops laptops mobile or handheld computing devices e.g. personal digital assistants PDAs or mobile phones or any other computing device capable of executing software processes associated with network access to local network . Connection between hosts and central server and any additional components in local network may include any appropriate medium such as for example cable Ethernet wireless e.g. WiFi 3G 4G etc. ATM fiber optics etc. It should be noted that the network configurations and interconnections shown and described herein are for illustrative purposes only. is intended as an example and should not be construed to imply architectural limitations in the present disclosure.

In the example embodiment shown in command and control server and botnet operator are operably coupled to the Internet . In one example command and control server may be a web server controlled or used by botnet operator to issue commands to distributed bots. In another example command and control server could be maliciously installed and hidden on a large corporate educational or government site. Botnet operator may remotely access command and control server through for example the Internet to issue instructions for controlling distributed bots on infected host computers such as hosts or . Numerous botnet operators and command and control servers controlling millions of bots may be operably connected to the Internet . In one example once a bot has infected one of hosts or botnet operator may begin issuing commands through command and control server to propagate the bot throughout local network and or other networks. In addition botnet operator may also issue instructions for the bot to undertake malicious activities from the infected host or such as spam email theft of confidential information distributed denial of service attacks etc.

Whitelists and blacklists may be implemented using checksums where a unique checksum for each program file is stored which can be readily compared to a computed checksum of a program file sought to be evaluated. A checksum can be a mathematical value or hash sum e.g. a fixed string of numerical digits derived by applying an algorithm to a software program file. If the algorithm is applied to a second software program file that is identical to the first software program file then the checksums should match. However if the second software program file is different e.g. it has been altered in some way it is a different version of the first software program file it is a wholly different type of software etc. then the checksums are very unlikely to match.

Databases such as global whitelist in may be provided by independent third parties and may be regularly updated to provide a comprehensive listing of trustworthy software program files available to consumers. Similarly blacklists not shown may be provided by independent third parties and may be regularly updated to provide a comprehensive listing of untrusted malicious software program files. Global whitelists and blacklists may be external to local network and may be accessible through other networks such as Internet or through any other suitable connection that permits electronic communication between local network and global whitelist . Examples of such global whitelists and blacklists include Artemis databases provided by McAfee Inc. of Santa Clara Calif. and SignaCert databases provided by SignaCert Inc. of Portland Oreg.

In the example embodiment shown in executable software and of hosts and may each have a plurality of software program files which as previously noted herein may include any executable files library modules object files other executable modules script files interpreter files and or the like. If one of hosts and has been infected by a bot then the bot could be stored as a program file in the respective host s executable software or . Local protection components and may intercept network access attempts both inbound and outbound on respective hosts and . If any program file associated with a network access attempt has an untrusted status then network access may be blocked or selectively allowed based on other criteria e.g. policies predefined conditions etc. . If the program file has a trusted status however then network access may be allowed.

In some embodiments central protection components of central server evaluate each program file of executable software and and categorize each program file as trusted or untrusted. The program files may be compared to internal whitelist global whitelist internal or external blacklists or any combination thereof. If an evaluated program file is categorized as untrusted an entry identifying the untrusted program file may be added to central untrusted software inventory . Central server may also maintain logged events database containing information related to network access attempts on any host and within local network . Logged events database central untrusted software inventory and internal whitelist may be provided in any network and device accessible to central server .

Turning to shows a schematic diagram of a central server and associated memory components and which is a more detailed example of central server and associated memory components and shown in . In one example embodiment of the system central protection components of central server may include an administrative protection module a policy module a policy database and a software trust determination module . In one example embodiment a central trusted cache may also be included for receiving trusted program file cache entries from software trust determination module . In other embodiments however central server may include or have access to a memory component containing a central untrusted software inventory for storing untrusted program file entries. Central server may also include or have access to memory components such as a logged events database and an internal whitelist in addition to appropriate hardware elements such as a processor and a memory element . A management console may also be suitably connected to central server for authorized persons to deploy configure and maintain the system through for example administrative protection module .

In embodiments using central trusted cache the cache may be implemented in hardware as a block of memory for temporary storage of entries e.g. checksums identifying program files that have been previously determined to have a trusted status such as those program files found during searches of global and or internal whitelists. Central trusted cache can provide quick and transparent access to data indicating program files previously evaluated for a trust status. Thus if a requested program file is found in central trusted cache then a search of global and or internal whitelists or any other trust evaluation may not need to be performed. In addition embodiments using central trusted cache may not need to maintain central untrusted software inventory .

Turning to shows a schematic diagram of one embodiment of a computing device or host and a block diagram of central server in which the system for local protection against malicious software may be implemented. Host is a more detailed example of hosts of . Host includes a set of executable software including for example program files through n. Local network protection components in host may include a local protection module a software manager module a local untrusted software inventory and a software program inventory feed . Software manager module local untrusted software inventory and software program inventory feed may reside in a user space of host . Also shown in user space of host is an example executing software process which corresponds to one or more of the program files of executable software . For ease of reference executable software is shown in user space on host although it may be stored in a memory element such as a disk drive on host .

Host may also include hardware components such as a network interface card NIC device a processor and a memory element . Local protection module and transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP and other protocols may reside in a kernel space of host and may be implemented as part of a network driver interface specification NDIS driver stack which interfaces with NIC device . The operating system kernel provides a process traffic mapping element for mapping software processes to their corresponding program files of executable software .

Data flows are shown between software manager module and central server including policy updates flow untrusted software updates flow and event flow . Data and control flows are also shown between software manager module and local protection module including policy updates flow control flow and event flow . Finally software program inventory feed is shown with a data flow to central server .

Not shown in is additional hardware that may be suitably coupled to processors and in the form of memory management units MMU additional symmetric multiprocessing SMP elements physical memory Ethernet peripheral component interconnect PCI bus and corresponding bridges small computer system interface SCSI integrated drive electronics IDE elements etc. In addition suitable modems and or additional network adapters may also be included for allowing network access. Central server and host may include any additional hardware and software necessary to properly perform their intended functions. Furthermore any suitable operating systems will also be configured in central server and host to appropriately manage the operation of hardware components therein. It will be appreciated that the hardware configurations may vary and the depicted examples are not meant to imply architectural limitations.

Trust determination and logging activities for executable software may in example embodiments be provided at least in part by administrative protection module and software trust determination module of central server and by software program inventory feed software manager module and local protection module of host . Information related to the trust determination and logging activities can be suitably rendered or sent to a specific location e.g. local untrusted software inventory logged events database etc. or simply stored or archived e.g. central untrusted software inventory etc. and or properly displayed in any appropriate format e.g. through management console etc. . Security technology related to one or more such trust determination and logging activities can include elements such as ePolicy Orchestrator software Application Control software and or Change Control software all manufactured by McAfee Inc. of Santa Clara Calif. or any other similar software. Thus any such components may be included within the broad scope of the terms administrative protection module software trust determination module software program inventory feed software manager module and local protection module as used herein in this Specification. Logged events database central untrusted software inventory internal whitelist and local untrusted software inventory may include information related to the trust determination and logging of electronic data e.g. trust determinations for program files network access attempts of software processes etc. and these elements can readily cooperate coordinate or otherwise interact with the modules and components of central server and host .

Intercepting and blocking activities for network access attempts may in example embodiments be provided at least in part in local protection module and software manager module of host and administrative protection module and policy module of central server . Information related to the intercepting and blocking activities may be pushed to a specific location e.g. central server logged events database local protection module etc. or simply stored or archived locally and or properly displayed in any appropriate format e.g. through management console etc. . Security technology related to one or more such intercepting and or blocking activities can include elements such as McAfee ePolicy Orchestrator software or any other similar software. Thus any such components may be included within the broad scope of the terms local protection module software manager module administrative protection module and policy module as used herein in this Specification. Local untrusted software inventory central untrusted software inventory and policy database may include information related to the intercepting and blocking of network access attempts e.g. trust determinations for program files policy configurations etc. and these elements can be readily accessed and otherwise interact with the modules and components of central server and host .

After program files have been enumerated in step each of the program files identified in the software inventory is evaluated to determine a trust status and to categorize accordingly as trusted i.e. network access may be allowed or untrusted i.e. network access may be blocked or selectively allowed . After step flow may pass to step where the first program file is retrieved from the software inventory. Flow then passes to step where the program file is evaluated and then categorized as trusted or untrusted which will be further shown and described herein with reference to . After the program file is categorized as trusted or untrusted in step flow passes to step where a determination is made as to whether the currently evaluated program file is the last program file in the software inventory received by central server from host . If the current program file is not the last program file in the software inventory then the next program file may be retrieved from the software inventory in step and flow may loop back to step to begin the evaluation and trust categorization of the next program. If in step however the current program file is the last program file in the software inventory then flow passes to step .

In step any newly categorized untrusted program files may be pushed to host to update local untrusted software inventory . The push may occur from software trust determination module of central server to software manager module of host via untrusted software updates flow . In an example embodiment software trust determination module of central server could receive a constant feed or a nearly constant feed from software program inventory feed of a complete software inventory on host or a software inventory of new or changed program files on host such that central untrusted software inventory and or local untrusted software inventory are substantially current in real time. In other embodiments software trust determination module could receive the enumerated software inventory at regularly scheduled intervals e.g. daily hourly half hourly etc. .

Turning to illustrates a more detailed flow of a trust determination flow corresponding to step of which is performed for each program file in the software inventory pushed to central server . Flow may begin at step where the current program file is evaluated to determine if it is identified on at least one global whitelist such as global whitelist shown in and or any other whitelist outside of local network . As previously described herein checksums may be used in whitelists to identify program files. If the program file is found on any of the global or other external whitelists in step then a trust status of the program file is defined as trusted and consequently flow ends and the program file is categorized as trusted by not updating central untrusted software inventory . If the program file is not found on a global or other external whitelist in step however then flow moves to step where one or more internal whitelists such as internal whitelist may be searched. Organizations may employ multiple whitelists e.g. an organization wide whitelist an enterprise level whitelist etc. . If the program file is found on any internal whitelist the trust status of the program file is defined as trusted and consequently flow ends and central untrusted software inventory is not updated.

If the program file is not found on any internal or external whitelist in steps or however then the program file has an untrusted status. Flow may then move to step where the program file may be evaluated to determine whether the program file satisfies any predefined condition that allows the program file to be promoted from the untrusted status to a trusted status. Such a predefined condition may include heuristic considerations such as for example software owned by an administrator file access controls file attributes e.g. creation time modification time etc. and the like. In one example an untrusted program file owned by an administrator could be promoted to a trusted status and therefore flow could end so that the program file is categorized as trusted by not updating central untrusted software inventory . If the program file does not satisfy any predefined condition in step however then the untrusted status persists and the program file may be categorized as untrusted by updating central untrusted software inventory to identify the program file in the last step .

Trust determination flow may also include additional logic not shown to evaluate blacklists in addition to whitelists. Blacklists identify software program files known to be malicious. Blacklists may be provided by numerous sources including Artemis and Anti Virus databases provided by McAfee Inc. and locally maintained blacklists within a local network. In this embodiment if the program file is found on any internal or external blacklist then the program file is categorized as untrusted by updating central untrusted software inventory to identify the program file. The untrusted program file information may also be pushed to host to update local untrusted software inventory .

Turning to illustrates an alternative embodiment of a trust determination flow corresponding to step of which may be performed for each program file in the software inventory. Flow may begin at step where the current program file is evaluated to determine whether it has changed. If a current state of the program file has not changed from a previous state then a trust status of the program file is defined as trusted and flow ends such that central untrusted software inventory is not updated to identify the program file. If the current state of the program file has changed from the previous state however then the program file has an untrusted status. Existing change tracking products e.g. McAfee Change Control software McAfee Application Control software McAfee ePolicy Orchestrator software McAfee Policy Auditor software Tripwire software manufactured by Tripwire Inc. of Portland Oreg. etc. may be used to examine change data of the program files to determine whether a change has occurred. In one example change records may be aggregated centrally at central server and McAfee ePO software may make the determination whether the program file has changed.

In if the program file is determined to have an untrusted status in step flow may then move to step where the program file is evaluated to determine whether any predefined condition exists to allow the program file to be promoted from its untrusted status to a trusted status as previously described herein with reference to step in . If one or more predefined conditions permit the program file to be promoted to a trusted status then flow may end and central untrusted software inventory is not updated. If no predefined condition applies to the program file however then the untrusted status persists and the program file may be categorized as untrusted by updating central untrusted software inventory to identify the program file in step .

In another embodiment trust determination flows of may include additional logic not shown to account for program files defined as trusted which had previously been categorized as untrusted. If the program file is defined as trusted from trust determination flows or of respectively additional logic may be provided to determine whether the trusted status of the program file has changed from a previously determined untrusted status. In such a case central untrusted software inventory may be updated to remove or suitably mark the program file entry if its status has been changed from untrusted to trusted. In addition any such updates could also be pushed to host to update local untrusted software inventory accordingly. This embodiment allows program files that have previously been categorized as untrusted e.g. a new internal program file not updated in internal whitelists and not known to global external whitelists etc. to be re categorized to trusted once one of the internal or external whitelists has been updated to identify the new program file.

Alternative implementations to enumerate program files determine a trust status and categorize those program files will be readily apparent. Several embodiments previously shown and described herein refer to enumerating an inventory of executable software on each host in a network such as host pushing the software inventory to central server determining the trust status associated with each program file in the inventory updating central untrusted software inventory accordingly and then pushing untrusted software inventory updates to the appropriate host to be locally maintained in local untrusted software inventory . In alternative embodiments however the trust determination and categorization of software program files could be locally performed by each host and resulting information could be pushed to another location e.g. central untrusted software inventory etc. and or maintained locally e.g. local untrusted software inventory etc. .

Locally determining a trust status of software program files and then appropriately categorizing the program files could be performed by whitelist evaluations blacklist evaluations state change evaluations or any other suitable trust evaluation technique. In such embodiments an inventory of executable software may be enumerated by for example McAfee software e.g. Policy Auditor Application Control or Change Control . When performing whitelist evaluations as shown in the host could access internal whitelists on a local network and or external whitelists accessible through another network such as the Internet. Program file state change evaluations could also be performed locally by evaluating a current and previous state of the program file for changes as shown in . For example McAfee Change Control software allows a sequence of change records to be locally maintained on hosts which could be evaluated to determine if any of the program files on a particular host had changed. In addition the broad scope of this disclosure permits any number of other techniques to be used to determine whether software program files should be categorized as trusted including for example performing both whitelist evaluations and state change evaluations on software program files and or performing blacklist evaluations on software program files.

One or more untrusted software inventories may be suitably configured in various forms in accordance with this disclosure. For example an untrusted software inventory may reside only in individual hosts e.g. untrusted software inventory only in another location e.g. central untrusted software inventory or in some combination thereof. In one embodiment local untrusted software inventory may contain entries identifying untrusted program files found on host but central untrusted software inventory may contain entries for untrusted program files found on multiple hosts within the network. One exemplary embodiment of central untrusted software inventory incorporates a database table format with one column corresponding to a host name and another column corresponding to a program path of the untrusted program file. Local untrusted software inventory may have a similar format or may be simplified for example to contain only the program file path entries.

Embodiments for enumeration and trust determination and categorization shown and described with reference to may be implemented by using either a constant feed of the software inventory to central server or by using batch processing at predefined intervals of time. In a batch processing embodiment windows of time in between the batch processes may enable a bot which has not yet been added to untrusted software inventory to propagate and or perform malicious activities by accessing networks. For some businesses however this approach may be desirable because the predefined time interval may be insignificant or because alternative approaches may hinder legitimate and necessary business activities. Nevertheless another embodiment may be implemented to close these windows of time while still using batch processing to update untrusted software inventory .

In this alternative embodiment a trusted software inventory rather than an untrusted software inventory could be created and maintained. Program files associated with a network access attempt could be evaluated to determine if each one is identified on the trusted software inventory. If the program files are all identified on the trusted software inventory then the network access may be allowed. However if any of the program files are not identified in the trusted software inventory then network access may be blocked or selectively allowed as further described herein. The trusted software inventory may be maintained centrally and or locally and in one embodiment local trusted software inventories may be configured to include only the trusted program files on their corresponding hosts all trusted program files from hosts within the network and or any other trusted program files as determined by a network administrator or other authorized user.

Turning to a simplified flowchart illustrates a protection flow for intercepting blocking and logging activities for a network access attempt i.e. inbound or outbound associated with a software process on a host such as executing software process on host . In one example protection flow may be implemented at least in part as local protection module of host . For ease of reference protection flow will first be described for an outbound network access attempt from software process on host to a network connected to host .

Flow begins at step where local protection module intercepts an outbound network access attempt by software process . In one embodiment processes from executable software use the NDIS driver stack to access a network through NIC device of host . Thus software process may attempt to access a network by sending electronic data through the NDIS driver stack. If the connection is using Internet Protocol Suite then TCP IP breaks up the electronic data into packets and provides a requested destination address. Alternatively the connection may use other protocols e.g. Internetwork Packet Exchange IPX NetBIOS Extended User Interface NetBEUI etc. to prepare the electronic data for transmission. Once the outgoing packets have been prepared local protection module then intercepts the packets which may be attempting any type of network access e.g. an attempt to look up domain name service DNS host names an attempt to connect to a remote host an attempt to write to a socket already connected to a network etc. .

After the outgoing packets have been intercepted flow passes to step where the operating system may be queried regarding which program files e.g. executable files library modules object files other executable modules script files interpreter files etc. correspond to the intercepted packets associated with executing software process . In this example the intercepted packets are mapped to executing software process which may be mapped to an executable file and one or more library modules loaded into process . The operating system kernel keeps process traffic mapping element and provides such mapping information to local protection module in step . Flow then passes to step in which a query is made as to whether the one or more program files corresponding to the intercepted packets from process are trusted. In one example local protection module may query software manager module via control flow for information regarding the program files. Software manager module may then access local untrusted software inventory to determine whether the program files are categorized as untrusted or trusted and then return such information to local protection module via control flow .

If any of the program files are categorized as untrusted i.e. one or more of the program files are found on local untrusted software inventory in step then flow passes to step to determine whether logging is enabled. If logging is enabled in step then flow passes to step to raise the event i.e. the network access attempt for logging. For example event data e.g. information related to the network access attempt and its associated program files may be sent to software manager module via event flow and then software manager module may either log the event data locally or send the event data to another location for logging such as for example central server via event flow . In example embodiments administrative protection module of central server may be adapted to store the event data in a memory element such as logged events database . Examples of possible event data stored in logged events database include identification and or program paths of the program files associated with the intercepted packets identification of the host on which the event occurred a date and time stamp of the network access attempt a type of network access attempt a destination and or source address of the network access attempt port numbers associated with the network access attempt and the like. Administrative protection module may also provide access to logged events database through management console or other reporting mechanisms.

After the event has been raised for logging in step or if logging was not enabled in step then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled the flow passes to step where software process is allowed to access the network and the intercepted packets are passed to NIC device . However if enforcement is enabled in step then policy may be evaluated in step to determine whether any configured policy overrides the untrusted status of the program files such that network access or selective network access associated with software process is allowed.

In one embodiment policy configurations may be crafted by a network administrator and such policies may be pushed to each host such as host . For example policy module of central server may allow an administrator or other authorized user to craft policy configurations through management console and to store such policies in policy database . Administrative protection module may then push any relevant policy configurations to software manager module of host via policy updates flow . Software manager module may further push policy configurations to local protection module via policy updates flow . Alternatively policy configurations may be stored for example in a disk drive of host and local protection module may query software manager module for any relevant policies for a particular process being evaluated.

Policy configurations may be implemented as desired by particular network owners. In some example embodiments policy configurations may include one or more broad based restrictions such as blocking all inbound and outbound network access blocking all inbound network access and allowing outbound network access or allowing inbound network access and blocking outbound network access. More specific strategies may also be employed such as blocking outbound network access to the local network but allowing outbound network access to the Internet or allowing inbound network access from a specified subnet of source addresses and or allowing outbound network access to a specified subnet of destination addresses. Finally even more granular strategies may be used such as blocking specified inbound and or outbound network connections e.g. domain name service DNS simple mail transfer protocol SMTP Internet Relay Chat IRC etc. . These example policy configurations are for illustrative purposes to show possibilities of network access restrictions and are intended to include any other policy configuration to restrict inbound and or outbound network access or any combination thereof.

Specific network level policies may also be crafted for untrusted program files. For example a policy may be crafted to redirect a network access attempt associated with an untrusted program file to another computing device such as a secondary server. In one example a potentially malicious network access attempt associated with an untrusted program file could be forced through additional firewalls filters antispam antivirus gateways proxies and the like when using this redirection. In another example the secondary server may be configured to respond with one or more predefined commands upon receiving a network connection. Some bots are designed to self destruct upon receiving particular commands and the secondary server could be configured to respond to a network connection with such commands thereby causing a bot that has been redirected to the secondary server to be destroyed.

Particular policy configurations may be balanced between competing interests such as the need to prevent the propagation and potentially malicious activities of untrusted software and the need to conduct necessary business activities. For example in a network having a host subnet and a server subnet a policy may be configured to allow software processes associated with untrusted program files to access only the server subnet but not the host subnet. This may be desirable because it may prevent the propagation of malicious software to other hosts within the network while allowing the host uninterrupted access to a secured server subnet. Another policy may block software processes associated with untrusted program files from accessing the Internet except for a known subnet hosting job critical services. Thus many different blocking options may be employed by crafting policies allowing selective network access.

Turning back to step of if a policy has been crafted to allow selective network access by one or more untrusted program files corresponding to executing software process and the intercepted packets conform to the particular policy requirements e.g. the packets have a destination address within an allowed subnet of addresses in accordance with the policy applied to the untrusted program file etc. then flow passes to step where software process is allowed network access and the packets are passed to NIC device . However if the policy does not override the untrusted status of the one or more program files i.e. the policy does not allow network access or no policy is applicable then flow passes to step and software process is blocked from network access. In one example blocking occurs by forcing a TCP connect call to fail and returning an error code to software process thereby preventing the intercepted packets from being passed to NIC device .

With reference again to step if the program files are categorized as trusted i.e. none of the programs files are found on local untrusted software inventory then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled the flow passes to step where software process is allowed network access and the intercepted packets are passed to NIC device . However if enforcement is enabled in step then policy may be evaluated in step to determine whether a configured policy overrides the trusted status of the one or more program files. For example if an untrusted program file was previously intercepted and a policy provided for some type of blocking to be applied to all outbound network access attempts then any trusted program files associated with a subsequent network access attempt may be evaluated and possibly blocked from network access by that policy. Thus if a policy overrides the trusted status of the one or more program files i.e. policy does not allow network access then flow passes to step and software process is blocked from network access. If the trusted status is not overridden by policy i.e. policy allows network access or no policy is applicable in step however then flow passes to step where software process is allowed network access and the intercepted packets are passed to NIC device .

Protection flow of also represents a flow used for intercepting blocking and logging activities for inbound network access attempts to host . At step local protection module intercepts an inbound network access attempt from NIC device . The inbound network access attempt may be for example a TCP listen or accept call and may be associated with an executing software process on host such as software process . Incoming intercepted packets are evaluated in steps through which have previously been described herein with reference to outgoing intercepted packets of network access attempts. If the flow from steps through proceeds to step then the incoming intercepted packets are permitted to access host . However if the flow proceeds to step then the incoming intercepted packets are blocked from accessing host . In one example blocking occurs by forcing a listen or accept call to fail and returning an error code to the caller of the listen or accept API. In addition as previously described herein numerous policy configurations for inbound network access attempts are possible. In one example if it is determined in step that a policy has been crafted to allow selected inbound network access attempts associated with one or more untrusted program files and the incoming packets conform to the particular policy requirements e.g. the packets have a source address within an allowed subnet of addresses in accordance with the policy applied to the untrusted program files etc. then flow passes to step where the incoming intercepted packets are permitted to access host . In another example if a policy was applied to a previous network access attempt i.e. inbound or outbound and provided for some type of blocking to be applied to subsequent network access attempts then a process associated with a subsequent inbound network access attempt may be blocked from access or selectively allowed access to the host in accordance with that policy even if all of its corresponding program files have a trusted status.

Turning to shows a schematic diagram of another embodiment of a computing device or host and a block diagram of central server in which another embodiment of a system for local protection against malicious software may be implemented. Host is a more detailed example of one embodiment of hosts of . Host includes a set of executable software such as for example program files through n. Local network protection components in host may include network hooks a software manager module a local untrusted software inventory and a software program inventory feed . For ease of reference executable software is shown in user space on host although it may be stored in a memory element such as a disk drive on host .

Software manager module local untrusted software inventory and software program inventory feed may reside in a user space of host along with any currently executing software processes such as software process . When a program file is executed and creates executing software process as shown in the embodiment in Windows Sockets API Winsock library may be loaded in software process as a dependency and network hooks may be loaded as a dependency to Winsock library along with any other library modules loaded by executing software process . Existing security technology such as Host Intrusion Prevention System HIPS software manufactured by McAfee Inc. may be used to implement network hooks .

Data flows are shown between software manager module and central server including policy updates flow untrusted software updates flow and event flow . Data and control flows are also shown between software manager module and network hooks including policy updates flow control flow and event flow .

Host may also include hardware components such as a network interface card NIC device a processor and a memory element . A kernel space of host may include transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP and other protocols . Not shown in is additional hardware and software as described with reference to host of .

Network hooks and software manager module may be configured to provide at least in part intercepting blocking and logging activities for network access attempts associated with processes from program files of executable software such as software process on host . Information related to the intercepting blocking and logging activities may be pushed to a specific location e.g. central server logged events database etc. or simply stored or archived locally and or properly displayed in any appropriate format e.g. through management console etc. . Security technology related to one or more such intercepting blocking and logging activities can include elements as previously described herein with reference to and may be inclusive of McAfee HIPS software. Thus any such components may be included within the broad scope of the terms network hooks and software manager module as used herein in this Specification. Local untrusted software inventory may include information related to the blocking and logging of electronic data such as trust categorizations for the program files of executable software and these elements can readily cooperate coordinate or otherwise interact with network hooks and software manager module .

Turning to a simplified flowchart illustrates a protection flow for intercepting blocking and logging activities for a network access attempt i.e. inbound or outbound associated with a software process on a host such as executing software process on host . In one example protection flow may be performed in part by network hooks and in part by software manager module of host . For ease of reference protection flow will first be described for an outbound network access attempt from software process on host to a network connected to host .

Flow begins at step where network hooks intercept an API outbound network access attempt e.g. connect API send API etc. from software process . Because network hooks have been loaded into software process as a dependency on Winsock library network hooks can intercept API network access attempts before they are passed to Winsock library which interfaces to TCP IP protocol stack . The network access attempt may be any type of network access e.g. an attempt to look up domain name service DNS host names an attempt to connect to a remote host an attempt to write to a socket already connected to a network etc. . Once the API has been intercepted flow passes to step to determine which program files e.g. executable files library modules object files other executable modules script files interpreter files etc. are associated with executing software process . In this example the intercepted API is mapped to executing software process which may be mapped to an executable file and one or more library modules loaded into process . In example embodiments software manager module is queried by network hooks via control flow regarding which program files are mapped to executing software process which is mapped to the intercepted API. Software manager module may use an operating system API to obtain such mapping information.

Once the program files are identified flow passes to steps through which may be similar to steps through of protection flow of . In step a query is made as to whether any of the program files corresponding to software process are found on local untrusted software inventory . In one example software manager module may access local untrusted software inventory to determine whether the program files are categorized as untrusted or trusted. If any of the program files are categorized as untrusted i.e. one or more of the program files are found on local untrusted software inventory in step then flow passes to step to determine whether logging is enabled. If logging is enabled then flow passes to step to raise the event i.e. the network access attempt for logging as previously described herein with reference to .

After the event has been raised for logging in step then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled then software manager may pass this information to network hooks via control flow . The flow then passes to step where software process is allowed to access the network by passing the API to Winsock . However if enforcement is enabled in step policy may be evaluated in step to determine whether any configured policy overrides the untrusted status of the one or more untrusted program files as previously described herein with reference to . In one embodiment the policy evaluation may occur in software manager module and the results may be passed to network hooks via control flow .

Policy configurations may be crafted by a network administrator or other authorized user through for example administrative protection module of central server . Administrative protection module may push any relevant policy configurations to software manager module of host via policy updates flow . If a policy has been crafted to allow selective network access by the one or more untrusted program files corresponding to software process and the API conforms to the particular policy requirements e.g. the API network access attempt includes a destination address within an allowed subnet of addresses in accordance with the policy etc. then software manager module may return such information to network hooks via control flow . Flow then passes to step where the API is passed to Winsock and software process is allowed to access the network. However if the policy does not allow network access in step or if an applicable policy does not exist then software manager module may return such information to network hooks via control flow and flow then passes to step where the API is not passed to Winsock . Instead network hooks may return an error condition to software process thereby blocking network access.

With reference again to step if the program files are categorized as trusted i.e. the program files are not found on local untrusted software inventory then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled the flow passes to step where the API is passed to Winsock and software process is allowed to access the network. However if enforcement is enabled in step then policy may be evaluated in step to determine whether a configured policy overrides the trusted status as previously described herein with reference to . If a policy overrides the trusted status of the one or more program files then flow passes to step and the API is not passed to Winsock . Instead network hooks may return an error condition to software process thereby blocking network access. If the trusted status of the one or more program files is not overridden by policy in step however then flow passes to step where the API is passed to Winsock and software process is allowed to access the network.

Protection flow also represents a flow used for intercepting blocking and logging activities for inbound network access attempts to host . At step network hooks intercept an API inbound network access attempt e.g. listen API accept API etc. from Winsock library . The inbound network access attempt is evaluated in steps through which have been previously described herein with reference to outbound intercepted APIs. If the flow from steps through proceeds to step then the inbound network access attempt is permitted to access host . However if the flow proceeds to step then the inbound network access attempt is blocked from accessing host . In one example blocking occurs by rejecting a listen or accept call and returning an error code to the caller of the listen or accept API. In addition policy configurations for inbound network access may also be applied in step as previously described herein with reference to .

Turning to shows a schematic diagram of another embodiment of a computing device or host and a block diagram of central server in which the system for local protection against malicious software may be implemented. Host is a more detailed example of hosts of . Host may include a set of executable software including for example program files through n. Local network protection components in host may include a local protection module a software manager module a program file change monitor a checksum cache and a local trusted cache . In one embodiment checksum cache and local trusted cache may be configured with program file paths and checksums for corresponding software program files. Software manager module and program file change monitor may reside in a user space of host . Also shown in user space of host is an example executing software process which corresponds to one or more of the program files of executable software . For ease of reference executable software is shown in user space on host although it may be stored in a memory element such as a disk drive on host .

Host may also include hardware components such as a network interface card NIC device a processor and a memory element . Local protection module and transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP and other protocols may reside in a kernel space of host and may be implemented as part of a network driver interface specification NDIS driver stack which interfaces with NIC device in a similar manner to the embodiment shown and described with reference to host in . The operating system kernel provides a process traffic mapping element mapping software processes to their corresponding program files of executable software .

Data flows are shown between software manager module and central server including policy updates flow whitelist query data flow and event flow . Data and control flows are also shown between software manager module and local protection module including policy updates flow control flow and event flow . Finally checksum cache and local trusted cache may have bidirectional flows to software manager module and program file change monitor feeds software manager module with data indicating when a change has occurred in a program file. Not shown in is additional hardware of host that may be similar to additional hardware previously described herein with reference to host of .

Local trusted cache and checksum cache may be configured in hardware of host as blocks of memory for temporary storage. Local trusted cache may contain entries e.g. checksums identifying program files that have previously been determined to have a trusted status using trust evaluation techniques such as searching global whitelists searching internal whitelists searching blacklists evaluating program file changes or any combination thereof. Thus if a program file is found in local trusted cache then central server may not need to be queried for a trust status of that particular program file. Checksum cache may contain entries e.g. checksums and program file paths identifying previously computed checksums of software program files on host . Because checksum computation can use valuable processing resources computed checksums may be stored in checksum cache along with a corresponding program file path to prevent unnecessary duplicative checksum computations. Such data stored in caches and can result in quicker retrieval and overall processing during network access attempts and software trust determination processing.

When program files change e.g. new software version software upgrade etc. their corresponding checksums change and therefore checksum cache may need to be updated. In example embodiments program file change monitor can update checksum cache by performing an out of band inspection of the program files on host and providing a data feed indicating changed program files to software manager module to update checksum cache . Existing change tracking products e.g. McAfee Change Control software McAfee Application Control software McAfee ePolicy Orchestrator software McAfee Policy Auditor software Tripwire software manufactured by Tripwire Inc. of Portland Oreg. etc. may be used to examine the program files on host to determine whether a change has occurred. In example embodiments program file change monitor may provide real time data to software manager module indicating a change to a program file on host . After receiving the changed program file data software manager module may search checksum cache for a program file path corresponding to the changed program file and if found may remove the checksum entry associated with the program file path. While checksum cache and program file change monitor provide one embodiment for providing maintaining and updating program file checksums for program files on host any number of alternative approaches could be utilized e.g. remote checksum module database implementation etc. as long as the appropriate checksum can be provided for the program file located at a given program file path.

In a system for local protection that implements the embodiment of host and central server untrusted software inventories e.g. local untrusted software inventories central untrusted software inventory etc. may not be necessary components. Alternatively central trusted cache of central server local trusted cache of host and checksum cache of host may be utilized for quick retrieval of data previously computed or otherwise determined during software trust determination processing.

Trust determination blocking intercepting and logging activities for executable software may in example embodiments be provided at least in part by administrative protection module and software trust determination module of central server and by software manager module program file change monitor and local protection module of host . Information related to such activities can be suitably rendered or sent to a specific location e.g. checksum cache local trusted cache central trusted cache logged events database etc. or simply stored or archived and or properly displayed in any appropriate format e.g. through management console etc. . Security technology related to one or more such trust determination blocking intercepting and logging activities can include elements such as McAfee ePolicy Orchestrator software firewalling software such as McAfee Host Intrusion Prevention System HIPS software change tracking software and or any other similar software. Thus any such components may be included within the broad scope of the terms administrative protection module software trust determination module program file change monitor software manager module and local protection module as used herein in this Specification. Logged events database internal whitelist central trusted cache checksum cache and local trusted cache may include information related to the trust determination blocking intercepting and logging of electronic data e.g. trust determinations for program files network access attempts of software processes etc. and these elements can readily cooperate coordinate or otherwise interact with the modules and components of central server and host .

Turning to a simplified flowchart illustrates a protection flow for intercepting blocking and logging activities for a network access attempt i.e. inbound or outbound associated with a software process on a host such as executing software process on host . In one example protection flow may be implemented at least in part as local protection module of host . For ease of reference protection flow will first be described for an outbound network access attempt from software process on host to a network connected to host .

Flow begins at step where local protection module intercepts an outbound network access attempt by software process . In one example processes from executable software use the NDIS driver stack to access a network through NIC device of host . Thus software process may attempt to access a network by sending electronic data through the NDIS driver stack as previously described herein with reference to .

Once the outgoing packets have been intercepted flow passes to step where the operating system may be queried regarding which program files e.g. executable files library modules object files other executable modules script files interpreter files etc. correspond to the intercepted packets from executing software process . In this example the intercepted packets are mapped to executing software process which may be mapped to an executable file and one or more library modules loaded into process . The operating system kernel keeps process traffic mapping element and provides such mapping information to local protection module in step .

Flow may then pass to steps designated by which may be performed for each program file associated with the network access attempt. In step a query is made as to whether a checksum of a first program file associated with the network access attempt is found in checksum cache . In one embodiment checksum cache will be searched for a program file path of the first program file. If the program file path is not found then a checksum is computed for the first program file in step . In step checksum cache is updated with the program file path and the newly computed checksum. Steps are repeated for each additional program file associated with the network access attempt. In one example scenario a checksum may not be found in step if the checksum was previously removed from checksum cache when software manager module received a data feed from program file change monitor indicating the program file had changed. Thus in this scenario a new checksum would be computed in step for the changed program file and then stored in checksum cache in step . As previously mentioned herein any alternative approach could be utilized to provide checksums as long as the appropriate checksum can be provided for a program file located at a given program file path.

After steps are performed for each program file associated with the network access attempt flow then passes to step . In step a query is made as to whether all program files associated with the network access attempt are found in local trusted cache and if so then each of the program files has previously been determined to have a trusted status and flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled then flow passes to step where software process is allowed network access and the intercepted packets are passed to NIC device . However if enforcement is enabled in step then policy may be evaluated in step to determine whether policy overrides the trusted status of the one or more program files as previously described herein with reference to .

Policy configurations may be crafted by a network administrator as previously described herein and such policies may be pushed to host via policy updates flow . Software manager module may further push policy configurations to local protection module via policy updates flow . Alternatively policy configurations may be stored for example in a memory element such as in disk drives of host and local protection module may query software manager module for any relevant policies for a particular process and or program file being evaluated.

If a policy overrides the trusted status of the one or more program files i.e. policy does not allow network access as previously described herein then flow passes to step where the software process is blocked from network access and the outgoing packets are not passed to NIC device . However if in step the trusted status of the one or more program files is not overridden by policy i.e. a policy allows network access or no policy is applicable then flow passes to step where the outgoing packets are passed to NIC device and software process is allowed to access the network.

With reference again to step if any program file associated with the network access attempt is not found in local trusted cache then flow passes to step where the central server is queried for a trust determination of those program files that were not found in local trusted cache which will be further shown and described herein with reference to . After a trust status for each of the program files not found in local trusted cache is returned from central server flow passes to step where local trusted cache is updated with program files having a trusted status.

Flow then passes to step where a query is made as to whether all program files are trusted i.e. no program files associated with the network access attempt were determined to have an untrusted status per the query to central server . If all of the program files are trusted then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled then flow passes to step where software process is allowed network access and the intercepted packets are passed to NIC device . However if enforcement is enabled in step then policy may be evaluated in step to determine whether policy overrides the trusted status as previously described herein. If a policy overrides the trusted status of the one or more program files then flow passes to step where software process is blocked from network access. However if in step the trusted status of the one or more program files is not overridden by policy then flow passes to step where software process is allowed network access and the outgoing packets are passed to NIC device .

With reference again to step if not all program files have a trusted status i.e. at least one program file associated with the network access attempt was determined to have an untrusted status per the query to central server then flow passes to step to determine whether logging is enabled. If logging is enabled then flow passes to step to raise the event i.e. the network access attempt for logging as previously described herein with reference to . After the event has been raised for logging or if logging was not enabled in step then flow passes to step to determine whether enforcement is enabled. If enforcement is not enabled the flow passes to step where the intercepted packets are passed to NIC device and software process is allowed to access the network. However if enforcement is enabled in step then policy may be evaluated in step to determine whether any configured policy overrides the untrusted status of the one or more program files such that network access or selective network access by software process is allowed as previously described herein with reference to .

If a policy has been crafted to allow selective network access by the one or more untrusted program files corresponding to software process and the intercepted packets conform to the particular policy requirements e.g. the packets include a destination address within an allowed subnet of addresses in accordance with the policy etc. then flow passes to step where the intercepted packets are passed to NIC device and software process is allowed to access the network. However if the untrusted status of the program file is not overridden by policy i.e. policy does not allow access or no policy is applicable then flow passes to step where the intercepted packets are not passed to NIC device and software process is blocked from network access.

Protection flow of also represents a flow used for intercepting blocking and logging activities for inbound network access attempts to host . At step local protection module intercepts an inbound network access attempt from NIC device . The inbound network access attempt may be for example a TCP listen or accept call and may be associated with an executing software process such as software process . The incoming intercepted packets are evaluated in steps through which have previously been described herein with reference to outgoing intercepted packets of a network access attempt. If the flow from steps through proceeds to step then the incoming intercepted packets are permitted to access host . However if the flow proceeds to step then the incoming intercepted packets are blocked from accessing host . In one example blocking occurs by forcing a listen or accept call to fail and returning an error code to the caller of the listen or accept API. In addition as previously described herein numerous policy configurations for inbound network access attempts are possible and may be applied to inbound network access attempts. For example if it is determined in step that a policy has been crafted to allow selected inbound network access attempts associated with one or more untrusted program files and the incoming packets conform to the particular policy requirements e.g. the packets have a source address within an allowed subnet of addresses in accordance with the policy applied to the untrusted program files etc. then flow passes to step where the incoming intercepted packets are allowed to access host . In another example if a policy was applied to a previous network access attempt i.e. inbound or outbound and provided for some type of blocking to be applied to subsequent network access attempts then a process associated with a subsequent inbound network access attempt may be blocked from access or selectively allowed access to the host in accordance with that policy even if all of its corresponding program files have a trusted status.

Turning to illustrates a more detailed flow of a trust determination flow corresponding to step of which may be performed by software trust determination module of central server for program files provided by host e.g. program files associated with an inbound or outbound network access attempt and not found in local trusted cache . Flow may begin at step when host queries central server for trust determination of the program files not found in local trusted cache . In step central server receives data e.g. checksums for program files via whitelist data flow for each of the program files not found in local trusted cache . Flow passes to step where central trusted cache may be searched for the received program file checksums. Central trusted cache may be used so that the trust status of a program file can be cached for quick retrieval not requiring a query to internal or global whitelists. If all of the program file checksums received from host are found in central trusted cache in step then flow passes to step where a trusted status for each program file is returned to host . However if not all program file checksums are found in central trusted cache in step then flow passes to step and further evaluation is performed.

In step one or more global whitelists such as global whitelist shown in and or one or more internal whitelists such as internal whitelist shown in may be searched for each of the program files not found in central trusted cache . In one embodiment checksums are used in whitelists to identify program files and therefore the checksums provided to central server in step are used to search the whitelists. If a program file checksum is found on a whitelist then the trust status of the corresponding program file is defined as trusted but if a program file checksum is not found on any of the whitelists then the trust status of the corresponding program file is defined as untrusted. After the whitelists have been searched flow passes to step where central trusted cache is updated with any program files having a trusted status i.e. found on one of the internal and or external whitelists . After central trusted cache is updated flow passes to step to return the trust status i.e. untrusted or trusted of each program file to host .

It will be apparent that the embodiment shown and described in could be modified in numerous ways to enhance the system for local protection against malicious software. For example logic may be included in modules of host or central server providing for evaluation of heuristic conditions e.g. program file owner modification date creation date program file attribute etc. of a software program file that has been determined to have an untrusted status as previously described herein with reference to . If one or more predefined conditions exist then the program file may be promoted to a trusted status. If no predefined condition applies to the program file however then the untrusted status persists and the program file may be defined as untrusted. Additional logic may also be included to evaluate blacklists in addition to whitelists as previously described herein.

It will also be appreciated that the various embodiments of the system could be implemented using alternative host configurations. For example the embodiments with untrusted software inventories have been shown and described being implemented in a network with hosts having NDIS driver stack and API hooking configurations. The embodiments of the system without untrusted software inventories have been shown and described as being implemented in networks having NDIS driver stack host configurations. However any of the embodiments could be implemented in networks having NDIS driver stack API hooking or various other host configurations e.g. Transport Driver Interface TDI Unix Streams kernel space network stack hooking etc. . For example in a TDI implementation local protection components may be implemented and function in a similar manner to those shown in . In a TDI implementation however a local protection module may sit on top of TCP IP protocols instead of below it.

In one alternative embodiment of a system and method for local protection against malicious software the system may be configured to enumerate program files out of band determine trust status of those enumerated program files and block network access by untrusted program files using Intel Active Management Technology AMT manufactured by Intel Corporation of Santa Clara Calif. In this example embodiment AMT may be used to perform out of band inspection of program files of a host such as host or and create a software inventory. After this enumeration has been performed the program files in the software inventory may be evaluated to determine a trust status as described herein in this Specification and a local and or central untrusted software inventory may be created and updated. Using AMT firewall rules related to any untrusted program files may then be configured in the hardware of the respective host. Specifically filters placed on a NIC device of the host may be configured to block untrusted program files. This configuration may be performed at specified times e.g. predetermined time intervals whenever the untrusted software inventory is updated on demand etc. .

In an alternative AMT embodiment the configuration of filters on the NIC device may be performed in real time. Each time a network access attempt occurs interception determination of associated program files and trust determination of the program files may be performed for example as shown and described herein with reference to the embodiments of . The operating system may then update the AMT firewall rules if any of the associated program files are determined to be untrusted. In yet another embodiment using AMT the enumeration of executable software may be performed out of band one or more untrusted software inventories may be created and maintained and blocking may occur by other embodiments e.g. NDIS driver stack API hooking etc. shown and described herein.

In another embodiment application level filtering may be used in local protection components such as local protection components and of . In application level filtering a firewall adapted to support specifying allowed and or blocked applications such as Windows Firewall manufactured by Microsoft Corp. of Redmond Calif. may be used in conjunction with a local or central untrusted software inventory. For example a local untrusted software inventory may be created as described herein in this Specification. After the untrusted software inventory is populated and anytime the inventory is updated block rules e.g. blocking specific applications blocking ports associated with program files etc. may be created for software program files identified on the untrusted software inventory and then updated in the firewall to block network access attempts associated with the untrusted software program files. Thus when a network access attempt is associated with an executing software process mapped to one or more untrusted program files the firewall will block the network access attempt.

In yet another embodiment a system and method for protecting computer networks may be implemented in a virtualized environment. In this example embodiment out of band inspections of hard disk files that support virtualized machines can be performed. A disk file of a host such as host or may be opened from a hypervisor on which the virtual machine is running such that all executable software can be seen and enumerated. The enumerated software program files can be evaluated to determine a trust status as described herein in this Specification and an untrusted software inventory can be created and maintained. The hypervisor may also be used to filter network access attempts such that inbound and outbound network access attempts associated with untrusted software program files can be blocked. This embodiment may be deployed in a data center or virtual desktop interface VDI environment. In an alternative embodiment once the untrusted software inventory is created using out of band inspections of virtual machine disk files enforcement may be performed using other techniques described herein in this Specification e.g. NDIS stack API hooking etc. .

Software for achieving the operations outlined herein can be provided at various locations e.g. the corporate IT headquarters end user computers distributed servers in a cloud etc. . In other embodiments this software could be received or downloaded from a web server e.g. in the context of purchasing individual end user licenses for separate networks devices servers etc. in order to provide this system for local protection against malicious software. In one example implementation this software is resident in one or more computers sought to be protected from a security attack or protected from unwanted or unauthorized manipulations of data .

In other examples the software of the system for local protection against malicious software could involve a proprietary element e.g. as part of a network security solution with McAfee Application Control software McAfee Change Control software McAfee ePolicy Orchestrator software McAfee Policy Auditor software McAfee Artemis Technology software McAfee Host Intrusion Prevention software McAfee VirusScan software etc. which could be provided in or be proximate to these identified elements or be provided in any other device server network appliance console firewall switch router information technology IT device distributed server etc. or be provided as a complementary solution e.g. in conjunction with a firewall or provisioned somewhere in the network.

In an example local network as shown in host and central server are computers or computing devices that facilitate protecting computer networks against malicious software. As used herein in this Specification the terms computer and computing device are meant to encompass any personal computers network appliances routers switches gateways processors servers load balancers firewalls or any other suitable device component element or object operable to affect or process electronic information in a network environment. Moreover this computer and computing device may include any suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective protection and communication of data.

In certain example implementations the activities involved in protecting computer networks against malicious software outlined herein may be implemented in software. This could be inclusive of software provided in central server e.g. central protection components and hosts e.g. local protection components . These components elements and or modules can cooperate with each other in order to perform activities to provide local protection against malicious software such as botnets as discussed herein. In other embodiments these features may be provided external to these elements included in other devices to achieve these intended functionalities or consolidated in any appropriate manner. For example the protection activities could be further localized in hosts or further centralized in central server and some of the illustrated processors may be removed or otherwise consolidated to accommodate the particular system configuration. In a general sense the arrangement depicted in may be more logical in its representation whereas a physical architecture may include various permutations combinations hybrids of these components elements and modules.

All of these elements hosts and central server include software or reciprocating software that can coordinate manage or otherwise cooperate in order to achieve the protection activities including trust determination logging and enforcement as outlined herein. In still other embodiments one or all of these elements may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof. In the implementation involving software such a configuration may be inclusive of logic encoded in one or more tangible media e.g. embedded logic provided in an application specific integrated circuit ASIC digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by a processor or other similar machine etc. with the tangible media being inclusive of non transitory media. In some of these instances one or more memory elements as shown in various FIGURES including can store data used for the operations described herein. This includes the memory elements being able to store software logic code or processor instructions that are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example the processors as shown in could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof.

Any of these elements e.g. a computer a host a server a distributed server etc. can include memory elements for storing information to be used in achieving the protection activities as outlined herein. Additionally each of these devices may include a processor that can execute software or an algorithm to perform the protection activities as discussed in this Specification. These devices may further keep information in any suitable memory element e.g. random access memory RAM ROM EPROM EEPROM ASIC etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein e.g. logged events database central untrusted software inventory local untrusted software inventory internal whitelist policy database process traffic mapping database checksum cache local trusted cache central trusted cache etc. should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. Each of the computers hosts servers distributed servers etc. may also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment.

Note that with the examples provided herein interaction may be described in terms of two three four or more network components. However this has been done for purposes of clarity and example only. It should be appreciated that the system for local protection against malicious software can be consolidated in any suitable manner. Along similar design alternatives any of the illustrated computers modules components and elements of the FIGURES may be combined in various possible configurations all of which are clearly within the broad scope of this Specification. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of components or network elements. Therefore it should also be appreciated that the system of and its teachings is readily scalable. The system can accommodate a large number of components as well as more complicated or sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the system for local protection as potentially applied to various other architectures.

It is also important to note that the operations described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system for local protection against malicious software. Some of these operations may be deleted or removed where appropriate or these operations may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations and various steps may be altered considerably and still achieve the results taught in this disclosure. For example trust determination processing may evaluate internal whitelists prior to global or external whitelists. Thus the preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

