---

title: Replicating selected snapshots from one storage array to another, with minimal data transmission
abstract: Example embodiments of the present invention provide methods for replicating a production site snapshot to a replication site. A first example embodiment creates a snapshot of the production volume at the production site and creates a bookmark in a do metadata stream. The bookmark may be sent to the replication site and, when processed from the do metadata stream at the replication site, cause the replication site to create a snapshot of the replication volume according to the bookmark. A second example embodiment replicates to a replication site snapshot by generating a list of differences between the production site snapshot and the replication site snapshot and performs replication according to the differences. The differences may include differences between the production site volume and the production site snapshot, differences between the production site volume and the replication site volume and differences between the replication site volume and the replication site snapshot.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471579&OS=09471579&RS=09471579
owner: EMC Corporation
number: 09471579
owner_city: Hopkinton
owner_country: US
publication_date: 20140718
---
A portion of the disclosure of this patent document may contain command formats and other computer language listings all of which are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Computer data is vital to today s organizations and a significant part of protection against disasters is focused on data protection. As solid state memory has advanced to the point where cost of memory has become a relatively insignificant factor organizations can afford to operate with systems that store and process terabytes of data.

Conventional data protection systems include tape backup drives for storing organizational production site data on a periodic basis. Such systems suffer from several drawbacks. First they require a system shutdown during backup since the data being backed up cannot be used during the backup operation. Second they limit the points in time to which the production site can recover. For example if data is backed up on a daily basis there may be several hours of lost data in the event of a disaster. Third the data recovery process itself takes a long time.

Another conventional data protection system uses data replication by creating a copy of the organization s production site data on a secondary backup storage system and updating the backup with changes. The backup storage system may be situated in the same physical location as the production storage system or in a physically remote location. Data replication systems generally operate either at the application level at the file system level or at the data block level.

Current data protection systems try to provide continuous data protection which enable the organization to roll back to any specified point in time within a recent history. Continuous data protection systems aim to satisfy two conflicting objectives as best as possible namely i minimize the down time in which the organization production site data is unavailable during a recovery and ii enable recovery as close as possible to any specified point in time within a recent history.

Continuous data protection typically uses a technology referred to as journaling whereby a log is kept of changes made to the backup storage. During a recovery the journal entries serve as successive undo information enabling rollback of the backup storage to previous points in time. Journaling was first implemented in database systems and was later extended to broader data protection.

An example embodiment of the present invention provides a method a system and a computer program product for replicating a snapshot of a production volume at a production site storage array to a snapshot of a replication volume at a replication site storage array. The method includes notifying a production site replication appliance to quiesce commands received by the replication appliance. A snapshot of the production volume at the production site storage array is then created and a bookmark is created at the production site to be sent to the replica site and written in a do metadata stream of a journal maintained at the replication site. The production site replication appliance is then notified to unquiesce commands received by the production site replication appliance.

Another example embodiments of the present invention provide a method a system and a computer program product for replicating a snapshot of a production volume at a production site storage array to a snapshot of a replication volume at a replication site storage array. The method includes generating a list of differences between the production site snapshot and the replication site snapshot and performing replication from the production site snapshot to the replication site snapshot according to the list of differences.

Journaling uses significant amounts of the volume on which the journal is stored. Conventionally replication systems dynamically add storage for a journal as described in U.S. Pat. No. 7 840 536 entitled METHODS AND APPARATUS FOR DYNAMIC JOURNAL EXPANSION ASSIGNED issued on Nov. 23 2010 and assigned to EMC Corporation of Hopkinton Mass. which is hereby incorporated by reference in its entirety. However such conventional journaling mechanisms lack efficient methods to decrease the size of the journal.

Accordingly example embodiments of the present invention leverage the punch command and thin LUNs in order to create a fully dynamic journal which can shrink and grow on demand. The journal may be assigned a maximum allowed size as well as a journal protection window defining a period for which the journal should retain journal information. A set of currently used blocks will be used and if protection window is large enough the oldest data blocks from an undo stream will be punched out from the stream. The blocks may be large journal blocks of a direct LUN DLUN . DLUNs are LUNs which thin having large volume chunks e.g. 128 MB or 1 GB . Accordingly the punch command punches large slices out of the LUN however the chunks are big enough that sequential IOs remain sequential thereby increasing performance. A manager may monitor how much free space there is in the storage pool and regulate the journal growth if the pool is nearly empty. Additionally the journal capacity may also depend on the actual usage of the replicated LUNs if the replicated LUNs are thin i.e. maintain the journal at a particular percentage of the used storage capacity .

BACKUP SITE a facility where replicated production site data is stored the backup site may be located in a remote site or at the same location as the production site 

CLONE a clone may be a copy or clone of the image or images drive or drives of a first location at a second location 

DELTA MARKING STREAM may mean the tracking of the delta between the production and replication site which may contain the meta data of changed locations the delta marking stream may be kept persistently on the journal at the production site of the replication based on the delta marking data the DPA knows which locations are different between the production and the replica and transfers them to the replica to make both sites identical 

DPA a computer or a cluster of computers that serve as a data protection appliance responsible for data protection services including inter alia data replication of a storage system and journaling of I O requests issued by a host computer to the storage system 

HOST at least one computer or networks of computers that runs at least one data processing application that issues I O requests to one or more storage systems a host is an initiator with a SAN 

JOURNAL a record of write transactions issued to a storage system used to maintain a duplicate storage system and to rollback the duplicate storage system to a previous point in time 

LOGICAL UNIT a logical entity provided by a storage system for accessing data from the storage system 

PHYSICAL STORAGE UNIT a physical entity such as a disk or an array of disks for storing data in storage locations that can be accessed by address 

PRODUCTION SITE a facility where one or more host computers run data processing applications that write data to a storage system and read data from the storage system 

SAN a storage area network of nodes that send and receive I O and other requests each node in the network being an initiator or a target or both an initiator and a target 

SOURCE SIDE a transmitter of data within a data replication workflow during normal operation a production site is the source side and during data recovery a backup site is the source side 

SNAPSHOT a Snapshot may refer to differential representations of an image i.e. the snapshot may have pointers to the original volume and may point to log volumes for changed locations. Snapshots may be combined into a snapshot array which may represent different images over a time period 

SPLITTER PROTECTION AGENT may be an agent running either on a production host a switch or a storage array which can intercept IO and split them to a DPA and to the storage array fail IO redirect IO or do any other manipulation to the IO 

STORAGE SYSTEM a SAN entity that provides multiple logical units for access by multiple SAN initiators 

TARGET SIDE a receiver of data within a data replication workflow during normal operation a back site is the target side and during data recovery a production site is the target side and

WAN a wide area network that connects local networks and enables them to communicate with one another such as the Internet.

During normal operations the direction of replicate data flow goes from source side to target side. It is possible however for a user to reverse the direction of replicate data flow in which case Site I starts to behave as a target backup site and Site II starts to behave as a source production site. Such change of replication direction is referred to as a failover . A failover may be performed in the event of a disaster at the production site or for other reasons. In some data architectures Site I or Site II behaves as a production site for a portion of stored data and behaves simultaneously as a backup site for another portion of stored data. In some data architectures a portion of stored data is replicated to a backup site and another portion is not.

The production site and the backup site may be remote from one another or they may both be situated at a common site local to one another. Local data protection has the advantage of minimizing data lag between target and source and remote data protection has the advantage is being robust in the event that a disaster occurs at the source side.

The source and target sides communicate via a wide area network WAN although other types of networks are also adaptable for use with the present invention.

In accordance with an embodiment of the present invention each side of system includes three major components coupled via a storage area network SAN namely i a storage system ii a host computer and iii a data protection appliance DPA . Specifically with reference to the source side SAN includes a source host computer a source storage system and a source DPA . Similarly the target side SAN includes a target host computer a target storage system and a target DPA .

Generally a SAN includes one or more devices referred to as nodes . A node in a SAN may be an initiator or a target or both. An initiator node is a device that is able to initiate requests to one or more other devices and a target node is a device that is able to reply to requests such as SCSI commands sent by an initiator node. A SAN may also include network switches such as fiber channel switches. The communication links between each host computer and its corresponding storage system may be any appropriate medium suitable for data transfer such as fiber communication channel links.

In an embodiment of the present invention the host communicates with its corresponding storage system using small computer system interface SCSI commands.

System includes source storage system and target storage system . Each storage system includes physical storage units for storing data such as disks or arrays of disks. Typically storage systems and are target nodes. In order to enable initiators to send requests to storage system storage system exposes one or more logical units LU to which commands are issued. Thus storage systems and are SAN entities that provide multiple logical units for access by multiple SAN initiators.

Logical units are a logical entity provided by a storage system for accessing data stored in the storage system. A logical unit is identified by a unique logical unit number LUN . In an embodiment of the present invention storage system exposes a logical unit designated as LU A and storage system exposes a logical unit designated as LU B.

In an embodiment of the present invention LU B is used for replicating LU A. As such LU B is generated as a copy of LU A. In one embodiment LU B is configured so that its size is identical to the size of LU A. Thus for LU A storage system serves as a backup for source side storage system . Alternatively as mentioned hereinabove some logical units of storage system may be used to back up logical units of storage system and other logical units of storage system may be used for other purposes. Moreover in certain embodiments of the present invention there is symmetric replication whereby some logical units of storage system are used for replicating logical units of storage system and other logical units of storage system are used for replicating other logical units of storage system .

System includes a source side host computer and a target side host computer . A host computer may be one computer or a plurality of computers or a network of distributed computers each computer may include inter alia a conventional CPU volatile and non volatile memory a data bus an I O interface a display interface and a network interface. Generally a host computer runs at least one data processing application such as a database application and an e mail server.

Generally an operating system of a host computer creates a host device for each logical unit exposed by a storage system in the host computer SAN. A host device is a logical entity in a host computer through which a host computer may access a logical unit. In an embodiment of the present invention host device identifies LU A and generates a corresponding host device designated as Device A through which it can access LU A. Similarly host computer identifies LU B and generates a corresponding device designated as Device B.

In an embodiment of the present invention in the course of continuous operation host computer is a SAN initiator that issues I O requests write read operations through host device to LU A using for example SCSI commands. Such requests are generally transmitted to LU A with an address that includes a specific device identifier an offset within the device and a data size. Offsets are generally aligned to 512 byte blocks. The average size of a write operation issued by host computer may be for example 10 kilobytes KB i.e. 20 blocks. For an I O rate of 50 megabytes MB per second this corresponds to approximately 5 000 write transactions per second.

System includes two data protection appliances a source side DPA and a target side DPA . A DPA performs various data protection services such as data replication of a storage system and journaling of I O requests issued by a host computer to source side storage system data. As explained in detail hereinbelow when acting as a target side DPA a DPA may also enable rollback of data to an earlier point in time and processing of rolled back data at the target site. Each DPA and is a computer that includes inter alia one or more conventional CPUs and internal memory.

For additional safety precaution each DPA is a cluster of such computers. Use of a cluster ensures that if a DPA computer is down then the DPA functionality switches over to another computer. The DPA computers within a DPA cluster communicate with one another using at least one communication link suitable for data transfer via fiber channel or IP based protocols or such other transfer protocol. One computer from the DPA cluster serves as the DPA leader. The DPA cluster leader coordinates between the computers in the cluster and may also perform other tasks that require coordination between the computers such as load balancing.

In the architecture illustrated in DPA and DPA are standalone devices integrated within a SAN. Alternatively each of DPA and DPA may be integrated into storage system and storage system respectively or integrated into host computer and host computer respectively. Both DPAs communicate with their respective host computers through communication lines such as fiber channels using for example SCSI commands.

In accordance with an embodiment of the present invention DPAs and are configured to act as initiators in the SAN i.e. they can issue I O requests using for example SCSI commands to access logical units on their respective storage systems. DPA and DPA are also configured with the necessary functionality to act as targets i.e. to reply to I O requests such as SCSI commands issued by other initiators in the SAN including inter alia their respective host computers and . Being target nodes DPA and DPA may dynamically expose or remove one or more logical units.

As described hereinabove Site I and Site II may each behave simultaneously as a production site and a backup site for different logical units. As such DPA and DPA may each behave as a source DPA for some logical units and as a target DPA for other logical units at the same time.

In accordance with an embodiment of the present invention host computer and host computer include protection agents and respectively. Protection agents and intercept SCSI commands issued by their respective host computers via host devices to logical units that are accessible to the host computers. In accordance with an embodiment of the present invention a data protection agent may act on an intercepted SCSI commands issued to a logical unit in one of the following ways 

A protection agent may handle different SCSI commands differently according to the type of the command. For example a SCSI command inquiring about the size of a certain logical unit may be sent directly to that logical unit while a SCSI write command may be split and sent first to a DPA associated with the agent. A protection agent may also change its behavior for handling SCSI commands for example as a result of an instruction received from the DPA.

Specifically the behavior of a protection agent for a certain host device generally corresponds to the behavior of its associated DPA with respect to the logical unit of the host device. When a DPA behaves as a source site DPA for a certain logical unit then during normal course of operation the associated protection agent splits I O requests issued by a host computer to the host device corresponding to that logical unit. Similarly when a DPA behaves as a target device for a certain logical unit then during normal course of operation the associated protection agent fails I O requests issued by host computer to the host device corresponding to that logical unit.

Communication between protection agents and their respective DPAs may use any protocol suitable for data transfer within a SAN such as fiber channel or SCSI over fiber channel. The communication may be direct or via a logical unit exposed by the DPA. In an embodiment of the present invention protection agents communicate with their respective DPAs by sending SCSI commands over fiber channel.

In an embodiment of the present invention protection agents and are drivers located in their respective host computers and . Alternatively a protection agent may also be located in a fiber channel switch or in any other device situated in a data path between a host computer and a storage system.

What follows is a detailed description of system behavior under normal production mode and under recovery mode.

In accordance with an embodiment of the present invention in production mode DPA acts as a source site DPA for LU A. Thus protection agent is configured to act as a source side protection agent i.e. as a splitter for host device A. Specifically protection agent replicates SCSI I O requests. A replicated SCSI I O request is sent to DPA . After receiving an acknowledgement from DPA protection agent then sends the SCSI I O request to LU A. Only after receiving a second acknowledgement from storage system will host computer initiate another I O request.

When DPA receives a replicated SCSI write request from data protection agent DPA transmits certain I O information characterizing the write request packaged as a write transaction over WAN to DPA on the target side for journaling and for incorporation within target storage system .

DPA may send its write transactions to DPA using a variety of modes of transmission including inter alia i a synchronous mode ii an asynchronous mode and iii a snapshot mode. In synchronous mode DPA sends each write transaction to DPA receives back an acknowledgement from DPA and in turns sends an acknowledgement back to protection agent . Protection agent waits until receipt of such acknowledgement before sending the SCSI write request to LU A.

In asynchronous mode DPA sends an acknowledgement to protection agent upon receipt of each I O request before receiving an acknowledgement back from DPA .

In snapshot mode DPA receives several I O requests and combines them into an aggregate snapshot of all write activity performed in the multiple I O requests and sends the snapshot to DPA for journaling and for incorporation in target storage system . In snapshot mode DPA also sends an acknowledgement to protection agent upon receipt of each I O request before receiving an acknowledgement back from DPA .

For the sake of clarity the ensuing discussion assumes that information is transmitted at write by write granularity.

While in production mode DPA receives replicated data of LU A from DPA and performs journaling and writing to storage system . When applying write operations to storage system DPA acts as an initiator and sends SCSI commands to LU B.

During a recovery mode DPA undoes the write transactions in the journal so as to restore storage system to the state it was at at an earlier time.

As described hereinabove in accordance with an embodiment of the present invention LU B is used as a backup of LU A. As such during normal production mode while data written to LU A by host computer is replicated from LU A to LU B host computer should not be sending I O requests to LU B. To prevent such I O requests from being sent protection agent acts as a target site protection agent for host Device B and fails I O requests sent from host computer to LU B through host Device B.

In accordance with an embodiment of the present invention target storage system exposes a logical unit referred to as a journal LU for maintaining a history of write transactions made to LU B referred to as a journal . Alternatively journal LU may be striped over several logical units or may reside within all of or a portion of another logical unit. DPA includes a journal processor for managing the journal.

Journal processor functions generally to manage the journal entries of LU B. Specifically journal processor i enters write transactions received by DPA from DPA into the journal by writing them into the journal LU ii applies the journal transactions to LU B and iii updates the journal entries in the journal LU with undo information and removes already applied transactions from the journal. As described below with reference to journal entries include four streams two of which are written when write transaction are entered into the journal and two of which are written when write transaction are applied and removed from the journal.

Write transaction is transmitted from source side DPA to target side DPA . As shown in DPA records the write transaction in four streams. A first stream referred to as a DO stream includes new data for writing in LU B. A second stream referred to as an DO METADATA stream includes metadata for the write transaction such as an identifier a date time a write size a beginning address in LU B for writing the new data in and a pointer to the offset in the do stream where the corresponding data is located. Similarly a third stream referred to as an UNDO stream includes old data that was overwritten in LU B and a fourth stream referred to as an UNDO METADATA include an identifier a date time a write size a beginning address in LU B where data was to be overwritten and a pointer to the offset in the undo stream where the corresponding old data is located.

In practice each of the four streams holds a plurality of write transaction data. As write transactions are received dynamically by target DPA they are recorded at the end of the DO stream and the end of the DO METADATA stream prior to committing the transaction. During transaction application when the various write transactions are applied to LU B prior to writing the new DO data into addresses within the storage system the older data currently located in such addresses is recorded into the UNDO stream.

By recording old data a journal entry can be used to undo a write transaction. To undo a transaction old data is read from the UNDO stream in a reverse order from the most recent data to the oldest data for writing into addresses within LU B. Prior to writing the UNDO data into these addresses the newer data residing in such addresses is recorded in the DO stream.

The journal LU is partitioned into segments with a pre defined size such as 1 MB segments with each segment identified by a counter. The collection of such segments forms a segment pool for the four journaling streams described hereinabove. Each such stream is structured as an ordered list of segments into which the stream data is written and includes two pointers a beginning pointer that points to the first segment in the list and an end pointer that points to the last segment in the list.

According to a write direction for each stream write transaction data is appended to the stream either at the end for a forward direction or at the beginning for a backward direction. As each write transaction is received by DPA its size is checked to determine if it can fit within available segments. If not then one or more segments are chosen from the segment pool and appended to the stream s ordered list of segments.

Thereafter the DO data is written into the DO stream and the pointer to the appropriate first or last segment is updated. Freeing of segments in the ordered list is performed by simply changing the beginning or the end pointer. Freed segments are returned to the segment pool for re use.

A journal may be made of any number of streams including less than or more than 5 streams. Often based on the speed of the journaling and whether the back up is synchronous or a synchronous a fewer or greater number of streams may be used.

Herein some information is provided for conventional continuous data protection systems having journaling and a replication splitter which may be used in one or more embodiments is provided. A replication may set refer to an association created between the source volume and the local and or remote target volumes and a consistency group contains one or more replication sets. A snapshot may be the difference between one consistent image of stored data and the next. The exact time for closing the snapshot may determined dynamically depending on replication policies and the journal of the consistency group.

In synchronous replication each write may be a snapshot. When the snapshot is distributed to a replica it may be stored in the journal volume so that is it possible to revert to previous images by using the stored snapshots. As noted above a splitter mirrors may write from an application server to LUNs being protected by the data protection appliance. When a write is requested from the application server it may be split and sent to the appliance using a host splitter driver residing in the I O stack below any file system and volume manager and just above any multipath driver such as EMC POWERPATH through an intelligent fabric switch through array based splitter such as EMC CLARiiON.

There may be a number of image access modes. Image access may be used to restore production from the disaster recovery site and to roll back to a previous state of the data. Image access may be also to temporarily operate systems from a replicated copy while maintenance work is carried out on the production site and to fail over to the replica. When image access is enabled host applications at the copy site may be able to access the replica.

In virtual access the system may create the image selected in a separate virtual LUN within the data protection appliance. While performance may be constrained by the appliance access to the point in time image may be nearly instantaneous. The image may be used in the same way as logged access physical noting that data changes are temporary and stored in the local journal. Generally this type of image access is chosen because the user may not be sure which image or point in time is needed. The user may access several images to conduct forensics and determine which replica is required. Note that in known systems one cannot recover the production site from a virtual image since the virtual image is temporary. Generally when analysis on the virtual image is completed the choice is made to disable image access.

If it is determined the image should be maintained then access may be changed to logged access using roll to image. When disable image access is disabled the virtual LUN and all writes to it may be discarded.

In an embodiment of virtual access with roll image in background the system first creates the image in a virtual volume managed by the data protection appliance to provide rapid access to the image the same as in virtual access. Simultaneously in background the system may roll to the physical image. Once the system has completed this action the virtual volume may be discarded and the physical volume may take its place. At this point the system continues to function as if logged image access was initially selected. The switch from virtual to physical may be transparent to the servers and applications and the user may not see any difference in access. Once this occurs changes may be read from the physical volume instead of being performed by the appliance. If image access is disabled the writes to the volume while image access was enabled may be rolled back undone . Then distribution to storage may continue from the accessed image forward.

In some embodiments in physical logged access the system rolls backward or forward to the selected snapshot point in time . There may be a delay while the successive snapshots are applied to the replica image to create the selected image. The length of delay may depend on how far the selected snapshot is from the snapshot currently being distributed to storage. Once the access is enabled hosts may read data directly from the volume and writes may be handled through the DPA. The host may read the undo data of the write and the appliance may store the undo data in a logged access journal. During logged access the distribution of snapshots from the journal to storage may be paused. When image access is disabled writes to the volume while image access was enabled tracked in the logged access journal may be rolled back undone . Then distribution to storage may continue from the accessed snapshot forward.

Disable image access may mean changes to the replica may be discarded or thrown away. It may not matter what type of access was initiated that is logged or another type or whether the image chosen was the latest or an image back in time. Disable image access effectively says the work done at the disaster recovery site is no longer needed.

A delta marker stream may contain the locations that may be different between the latest I O data which arrived to the remote side the current remote site and the latest I O data which arrived at the local side. In particular the delta marking stream may include metadata of the differences between the source side and the target side. For example every I O reaching the data protection appliance for the source may be written to the delta marking stream and data is freed from the delta marking stream when the data safely arrives at both the source volume of replication and the remote journal e.g. DO stream . Specifically during an initialization process no data may be freed from the delta marking stream and only when the initialization process is completed and I O data has arrived to both local storage and the remote journal data may be I O data from the delta marking stream freed. When the source and target are not synchronized data may not be freed from the delta marking stream. The initialization process may start by merging delta marking streams of the target and the source so that the delta marking stream includes a list of all different locations between local and remote sites. For example a delta marking stream at the target might have data too if a user has accessed an image at the target site.

The initialization process may create one virtual disk out of all the available user volumes. The virtual space may be divided into a selected number of portions depending upon the amount of data needed to be synchronized. A list of dirty blocks may be read from the delta marker stream that is relevant to the area currently being synchronized to enable creation of a dirty location data structure. The system may begin synchronizing units of data where a unit of data is a constant amount of dirty data e.g. a data that needs to be synchronized.

The dirty location data structure may provide a list of dirty location until the amount of dirty location is equal to the unit size or until there is no data left. The system may begin a so called ping pong process to synchronize the data. The process may transfer the differences between the production and replica site to the replica.

A discussion of mirroring may be found in U.S. Pat. No. 7 346 805 entitled PROTECTION OF MIRRORED DATA issued on Mar. 18 2008 and assigned to EMC Corporation of Hopkinton Mass. which is hereby incorporated by reference in its entirety.

A discussion of journaling and some techniques associated with journaling may be found in U.S. Pat. No. 7 516 287 entitled METHODS AND APPARATUS FOR OPTIMAL JOURNALING FOR CONTINUOUS DATA REPLICATION issued on Apr. 7 2009 and assigned to EMC Corporation of Hopkinton Mass. which is hereby incorporated by reference in its entirety.

A discussion of dynamically adding storage for a journal may be found in U.S. Pat. No. 7 840 536 entitled METHODS AND APPARATUS FOR DYNAMIC JOURNAL EXPANSION issued on Nov. 23 2010 and assigned to EMC Corporation of Hopkinton Mass. which is hereby incorporated by reference in its entirety.

RecoverPoint by EMC Corporation of Hopkinton Mass. provides a journal as described above which allows rolling the volume data for transitioning to any point in time during the protection window provided by the journal. The journal may include bookmarks for accessing any point in time in the journal. For example a bookmark may indicate a point in time that a snapshot of the production volume was taken. In certain scenarios a user may want one or more snapshots created at the production site to be replicated to the replication site journal at the same point in time.

A first example embodiment is described below with reference to the flow diagrams of together with the block diagram of . A second example embodiment is described below with reference to the flow diagrams of together with the block diagram of .

In a first example embodiment illustrated in the snapshot S may be replicated as it is created in storage at the production site. The storage may be array based storage. In a preferred embodiment replication management is integrated with the storage i.e. while the DPA may but need not be integrated in the storage the replication management functions processes are integrated in the storage . Accordingly at the production site the storage notifies or instructs the production site DPA to quiesce all new I O commands received at the DPA from a host via a switch .

With the I O commands quiesced thereby providing an opportunity to take a consistent snapshot the storage creates a snapshot S of the production volume or set of volumes . Accordingly replication is not stopped rather the quiesce process delays processing of new I Os for a short period of time e.g. a millisecond . It should be understood that the DPA may receive the I O commands from the splitter which receives the I O commands from the host and splits them to both the production volume V and the DPA . The DPA also creates a bookmark BM which is a logical marker indicating which I Os belong to a point in time and which are not. The bookmark BM is then sent to the DPA and stored in a do metadata stream of the replication site journal indicating the point in time of the journal protection window that the snapshot S was taken. The storage then notifies or instructs the production site DPA to unquiesce I O commands received from the host .

As described above the data in the do stream with the help of the do metadata stream of the replication site journal will be applied to the replication site volume V . When encountering the bookmark BM from the replication site journal in the do metadata stream the replication site DPA takes a snapshot S of the replication site volume V . Because I Os were quiesced above the snapshot S is identical to snapshot S.

In a second example embodiment illustrated in the replication environment may include a volume i.e. user volume V and a snapshot S at a production site and a replication volume V at a replication site. Here the production site already includes a set of snapshots to be replicated. In certain scenarios such as asynchronous replication volumes V and V may not be identical at a particular point in time. Additionally there may be differences between the production volume V and a production site snapshot S if for example I O commands received by the splitter have been written to the production volume V after the snapshot S was created.

Accordingly there may be an interface such as an application programming interface API between the splitter and the storage at the production site to determine the differences between the production volume V and the production site snapshot S. The API allows the splitter to read a list of locations which are different between the volume e.g. the production volume V or the replication volume V and the snapshot e.g. production site snapshot S or replication site snapshot S . To replicate the production site snapshot S if the snapshot S is among a plurality of snapshots a production site snapshot S is chosen for replications such as by a user. The production site DPA then identifies the production site snapshot S as a snapshot of the production volume V which is replicated to replication volume V by querying the storage and checking the DPA state. The replication site DPA then creates a replication site snapshot S of the replication volume V at the replication site.

The production site DPA automatically creates a consistency group where the source volume is the production site snapshot S and the target volume is the replication site snapshot S . Both volumes i.e. the production and replication site snapshots S S are attached to their respective splitters e.g. splitters as clean i.e. the delta marker stream is not marked that the volumes S S are different . Accordingly new I Os arriving to the production and replication site snapshots S S are tracked in the respective delta marking streams of the consistency group e.g. DMat production site for the production site snapshot S and DM at replication site for the replication site snapshot S .

Before replication between the production site snapshot S and the replication site snapshot S can start the differences between the snapshots S S must be built. First the current differences between the production site volume V and the replication site volume V i.e. DIFF V V are added to the marking stream DM. The difference DIFF V V includes the data currently in the delta marking stream of the production site volume V e.g. DM plus the data still in the do stream at the replication site e.g. DO plus if the replication site is in an image access mode the locations in the image access stream containing V and V at the replication site e.g. DM .

The differences between the production site volume V and the production site snapshot S i.e. DIFF V S are read through the production site splitter and added to the production site delta marking stream DM at the production site and the differences between the replication site volume V and the replication site snapshot S i.e. DIFF V S are read through the replication site splitter and added to the replication site delta marking stream DM at the replication site. As a result the delta marking streams of the consistency group containing the production snapshot S and the replication snapshot S e.g. production site delta marking stream DMand replication site delta marking stream DM include the locations suspected as different between the production site snapshot S and the replication site snapshot S . Accordingly replication from the production site snapshot S to the replication site snapshot S may begin with replication merging the respective delta marking streams DM DM into the production site delta marking stream DM. Therefore only these different locations need to be resynchronized to provide continuous replication between the production snapshot S and the replication snapshot S .

It should be understood that the production site may include a plurality of volumes in a consistency group and that the method described above may be performed for all volumes in the consistency group.

The methods and apparatus of this invention may take the form at least partially of program code i.e. instructions embodied in tangible non transitory media such as floppy diskettes CD ROMs hard drives random access or read only memory or any other machine readable storage medium. When the program code is loaded into and executed by a machine such as the computer of the machine becomes an apparatus for practicing the invention. When implemented on one or more general purpose processors the program code combines with such a processor to provide a unique apparatus that operates analogously to specific logic circuits. As such a general purpose digital machine can be transformed into a special purpose digital machine.

The logic for carrying out the method may be embodied as part of the aforementioned system which is useful for carrying out a method described with reference to embodiments shown in for example . For purposes of illustrating the present invention the invention is described as embodied in a specific configuration and using special logical arrangements but one skilled in the art will appreciate that the device is not limited to the specific configuration but rather only by the claims included with this specification.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly the present implementations are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the appended claims.

In reading the above description persons skilled in the art will realize that there are many apparent variations that can be applied to the methods and systems described. In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made to the specific exemplary embodiments without departing from the broader spirit and scope of the invention as set forth in the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

