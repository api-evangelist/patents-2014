---

title: Hybrid applications utilizing distributed models and views apparatuses, methods and systems
abstract: The Hybrid Applications Utilizing Distributed Models And Views Apparatuses, Methods And Systems (“HAP”) transform hybrid application user inputs using HAP components into web-view secured data populated application views. In some implementations, the disclosure provides a processor-implemented method of providing distributed model views utilizing a hybrid application environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582598&OS=09582598&RS=09582598
owner: Visa International Service Association
number: 09582598
owner_city: San Francisco
owner_country: US
publication_date: 20140115
---
This application is a continuation in part of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 542 443 filed Jul. 5 2012 entitled ELECTRONIC WALLET CHECKOUT PLATFORM APPARATUSES METHODS AND SYSTEMS which in turn claims priority under 35 U.S.C. 119 to U.S. provisional patent application Ser. No. 61 504 348 filed Jul. 5 2011 and entitled ELECTRONIC WALLET CHECKOUT PLATFORM APPARATUSES METHODS AND SYSTEMS and United States patent application Ser. No. 13 802 658 filed Mar. 13 2013 and entitled MULTI DIRECTIONAL WALLET CONNECTOR APPARATUSES METHODS AND SYSTEMS which claims priority under 35 USC 119 to U.S. provisional patent application Ser. No. 61 612 368 filed Mar. 18 2012 entitled BIDIRECTIONAL WALLET CONNECT SERVICE APPARATUSES METHODS AND SYSTEMS and which itself is a continuation in part of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 624 779 filed Sep. 21 2012 and entitled WALLET SERVICE ENROLLMENT PLATFORM APPARATUSES METHODS AND SYSTEMS which is a continuation in part and claims priority under U.S.C. 120 to U.S. patent application Ser. No. 13 589 053 filed Aug. 17 2012 and entitled WALLET SERVICE ENROLLMENT PLATFORM APPARATUSES METHODS AND SYSTEMS which in turn claims priority under 35 USC 119 to U.S. provisional patent application Ser. No. 61 525 168 filed Aug. 18 2011 entitled WALLET SERVICE ENROLLMENT PLATFORM APPARATUSES METHODS AND SYSTEMS U.S. provisional patent application Ser. No. 61 537 421 filed Sep. 21 2011 entitled CONSUMER WALLET ENROLLMENT APPARATUSES METHODS AND SYSTEMS U.S. provisional patent application Ser. No. 61 588 620 filed Jan. 19 2012 entitled CONSUMER WALLET ENROLLMENT APPARATUSES METHODS AND SYSTEMS and U.S. provisional patent application Ser. No. 61 668 441 filed Jul. 5 2012 entitled REFERENCE TRANSACTION APPARATUSES METHODS AND SYSTEMS. The entire contents of the aforementioned application s are expressly incorporated by reference herein.

This application for letters patent disclosure document describes inventive aspects that include various novel innovations hereinafter disclosure and contains material that is subject to copyright mask work and or other intellectual property protection. The respective owners of such intellectual property have no objection to the facsimile reproduction of the disclosure by anyone as it appears in published Patent Office file records but otherwise reserve all rights.

The present innovations generally address the secure management of in application data on a user mobile device and more particularly include HYBRID APPLICATIONS UTILIZING DISTRIBUTED MODELS AND VIEWS APPARATUSES METHODS AND SYSTEMS.

However in order to develop a reader s understanding of the innovations disclosures have been compiled into a single description to illustrate and clarify how aspects of these innovations operate independently interoperate as between individual innovations and or cooperate collectively. The application goes on to further describe the interrelations and synergies as between the various innovations all of which is to further compliance with 35 U.S.C. 112.

Mobile devices provide near real time access to sensitive data. Consumers may for example access their financial accounts remotely. Applications running on a mobile device are generally either compiled or interpreted and may be run natively or non natively on the mobile device.

The leading number of each reference number within the drawings indicates the figure in which that reference number is introduced and or detailed. As such a detailed discussion of reference number would be found and or introduced in . Reference number is introduced in etc.

The HYBRID APPLICATIONS UTILIZING DISTRIBUTED MODELS AND VIEWS APPARATUSES METHODS AND SYSTEMS hereinafter HAP user interface transform web view application requests into native application web view source code requests and populated models via HAP components in response to user interface activities. In some embodiments this is carried out in real time.

In one embodiment a secure data provider e.g. may be a financial services provider such as a card issuer a social media provider a bank a merchant transaction processor a health records aggregator and or the like. The secure data provider may be willing to let merchants and or businesses customize how the sensitive data provided by the secure data provider is presented but may desire additional assurances regarding the ultimate destination and or the handling of the data e.g.

In one embodiment the HAP e.g. may provide a bridge that allows the customization of in App user experiences by on trusted parties such as for example merchant lot while maintaining the security desired by a secure data provider such as for example secure data provider e.g. 

In one embodiment the third party data app developer server may provide a web view application response e.g. containing the web view as enhanced with the HAP handler requests. An example web view application response substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment the user s smart phone may then within a native application may instantiate a web view e.g. utilizing the application response . By encapsulating a web view within a native application structure the HAP may enable the web view to communicate directly with the native application and advantageously interactions within the web view may be linked to actions upstream in the native application. For example the web view application may contain a button to populate the web view with an individual s financial transaction data. If the application were provided merely as a web view with no corresponding native application encapsulation or linkage the secure data provider would have reduced control over how the data is injected into and utilized by the web view application.

In one embodiment the web view application response is parsed to determine interactions within the web view application that require connection with native application handlers e.g. . For example a web view button may contain a designation that the button should be linked to a native application handler. Example code substantially in the form of JavaScript that may be utilized by a web view application to signal a native application that the user has pressed a button and or completed and interaction within the web view application is 

In one embodiment after a time quantum user may while interacting with the instantiated web view application provide a web view button input . For example a web view button input may be a tap double tap swipe and or the like with respect to web view button . In response the user smart phone may from the web view application signal an upstream native application handler e.g. . The upstream handler may in some embodiments be invoked from within the web view such that the upstream handler may determine an instantaneous state of the web view application determine the required data needed to successfully process the web view button input and request and retrieve high security data such as financial data from a third party in a manner that restricts the availability of the data to malicious code that may be present within the web view application response.

In one embodiment the smart phone may create a web view representation structure e.g. representing the current state of the rendered web view application view. Further detail with respect to creating a web view representation structure may be found herein and particularly with respect to e.g. an example WVC Component.

In one embodiment the created web view representation structure may be packaged into a model population request e.g. and transmitted to HAP server . The HAP server may thereafter retrieve the user s personal financial data and supplement and or append to a response the requested data. An example model population request substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In an alternative embodiment such as that described herein and particularly with respect to an example model population request substantially in the form of an HTTP S POST message including XML formatted data may be 

In one embodiment upon retrieving the user s personal financial data HAP server may thereafter create a model population response containing in one embodiment the retrieved financial data. In other embodiments the financial data may be itself parsed and injected into the web view representation structure that was received by HAP server as part of model population request . Note that the retrieved information may be financial information as discussed herein but in other embodiments the HAP may be configured to protect virtually any type of data with enhanced security. Furthermore the relevant information may be obtained from virtually any source. However additional advantages may be realized by obtaining the information from or in connection with a HAP server configured as discussed herein and particularly with respect to wherein the HAP may manage action and access privilege requests to provide the requisite secure information. An example model population response substantially in the form of an HTTP S POST message including XML formatted data is provided below 

By allowing the third party data app developer server to specify which interactions by a user within a web view application should generate a model population request the third party data app developer is provided with flexibility to define multiple layers of web view button indication behavior. For example in one embodiment the HAP handler attached to a web view button may after being invoked by the user request that the user provide additional credentials needed by HAP server to process the model population request. In this embodiment since the user is only providing the enhanced credentials to smart phone and advantageously through a native application not specified or controlled by the third party data app developer server the credentials provided are less likely to be subject to man in the middle attacks caching by third parties and or the like.

In one embodiment upon receiving the model population response user smart phone may extract the received model data values and determine a next web application view to render e.g. . The determination of the next web view application view to render may be determined based on the model data values received such as for example if a large number of financial records are received the next web view may be a view containing a tabular data structure for presentation of such content. In other embodiments the next web application view to render may be determined by examining web view application response the HAP handler associated with the web view button and or the like. In one embodiment after receiving the populated model smart phone may generate a web view source code request e.g. and transmit the request to third party data app developer server . The web view source code request may be a request for the data app server to provide the underlying source code that may be used to generate a web view application view. In some embodiments the source code may be in the form of a template with indicators for the placement of the secure financial data and or the like. An example web view source code request substantially in the form of an HTTP S POST message including XML formatted data is provided below 

In one embodiment the data app developer server may load the requested web view and again attach HAP handler requests to any buttons or interface elements that should be linked from the web view to a native application handler e.g. . In so doing the data app developer server and its administrator may in some embodiments provide a way such that the user may appear to be interacting directly with their secure financial data yet in reality be interacting in a manner that allows the data app developer to provide the user interface while preventing the data app developer from having access to the underlying personal financial data of the user. This may be true even in instances where the data app developer is a nefarious developer that may desire to insert commands into either the web view source code or a web view application response that seeks to retrieve or intercept the user s personal financial data. As stated above because of the nature and configuration of the hybrid application disclosed herein the handling and management of the secure data for a user is managed a level of introspection above that which the data app developer and or data app developer server is made aware of or indeed has access to.

In one embodiment after loading the web view application view and attaching the appropriate HAP handlers to the button for interface elements required by the web view the data app developer server may transmit a web view source code response to the user s smart phone . An example web view source code response substantially in the form of an HTTP S POST message including XML formatted data is provided below 

Upon receipt of the web view source code response the smart phone may utilize the model data values extracted previously e.g. to create insertion commands to inject the model data values into the web view source code response such that the web view source code response may be rendered as a web view application response as though the application response had been returned unadulterated from data app developer server e.g. . The insertion commands may be in some embodiments customized to utilize a language that is parseable as a web view application view. In one example the parseable web view application view language may be JavaScript. In other embodiments PHP C C Java and or other interpreted or compiled languages may be utilized depending on the nature of the instantiated web view that is encapsulated by the native application. Further detail with respect to creating insertion commands from received model data values and the insertion of such commands into received web source code may be found herein and particularly with respect to e.g. an example DVI Component.

In one embodiment the populated web view source code may then be rendered as a web view application view by smart phone and native language HAP handlers may be instantiated to handle further web view requests in the native smart phone application environment e.g. . In one embodiment user may be presented with a data enhanced distributed view output such as an output containing the user secure financial data.

Other embodiments of the HAP enable frictionless enrollment of a consumer s payment accounts in a virtual wallet. In some embodiments customers logged into a financial institution web site such as an account issuer s web site may desire to enroll payment accounts already established with that financial institution in their virtual wallet. In one embodiment a consumer may be logged into the web site of its local bank and be able to access both a credit card and a debit card previously opened with that bank. Advantageously the issuer bank may already have important information about the user that may facilitate the enrollment of the two payment accounts in a virtual wallet e.g. billing address PAN number mother s maiden name etc. and or the creation of a virtual wallet account. In one example the consumer may indicate to the issuer that it desires for the issuer to transmit the account information the issuer has on file to a virtual wallet provider in order to pre fill information in an enrollment form that may be used to enroll one or more payment accounts in a virtual wallet. The issuer may then share or transmit data to the wallet service provider to enable this enrollment. In one embodiment the user may then provide additional information before the payment account is enrolled in the wallet. In other embodiments no additional information may be provided by the user and the payment account may be automatically enrolled in the wallet after the issuer s transmission of the data. In still other embodiments the issuer may be a merchant bank pre paid account provider a non financial institution or an individual i.e. a peer to peer enrollment facilitation .

In some embodiments of the HAP the creation of a virtual wallet account or the enrollment of a payment account in a virtual wallet account may be supplemented by allowing the user to create a pre paid payment account. In doing so the user may fund the pre paid account immediately or open the pre paid account with no funding. In one embodiment the consumer desires to add an existing payment account to their virtual wallet while logged into an issuer s web site. The consumer may therefore select an established account for enrollment in the virtual wallet. Additionally the consumer may then also be prompted to create a pre paid account in their virtual wallet. In some embodiments after choosing to create a pre paid account the consumer may then choose an account with a financial institution from which to fund their pre paid account. Advantageously in this example the consumer may also desire for the information about the pre paid funding source account to be shared with the virtual wallet provider to enable the wallet provider to simultaneously create and fund a pre paid account. In other embodiments the HAP may allow a wallet service provider to retain information e.g. account number routing number billing address and or the like to enable future funding of the pre paid account to occur without additional sharing of data from financial institution to wallet service provider. In still other embodiments the consumer may create a funding threshold rule that would indicate to the wallet service provider to re fill or top up the pre paid account from a designated funding source on the occurrence of a certain event such as low funds. In doing so the HAP enables a consumer to create a pre paid account seamlessly while enrolling other payment accounts in the virtual wallet.

In other embodiments of the HAP the creation of the pre paid account may happen independently of a consumer s interaction with a third party financial institution. For example in some embodiments the virtual wallet may be accessed through a mobile application. In this embodiment the wallet application on the user s mobile phone may prompt the user to establish a pre paid account when it detects that the consumer has just received a large credit to one of their financial accounts. In doing so the establishment of pre paid accounts may be encouraged and facilitated by the HAP.

In some embodiments of the HAP the virtual wallet account enrollment facility may be configured to automatically retrieve an image of the payment account being enrolled in the virtual wallet. In doing so consumers may be presented with an image of the card representation of the payment account being enrolled. In some embodiments this image may be used by the consumer to verify the authenticity of the payment account being added. In other embodiments the image may be displayed to facilitate the selection of payment accounts for addition to the virtual wallet.

Various embodiments of the HAP facilitate the creation of persistent and re assignable links between the consumer s virtual wallet and a merchant or other entity. In some embodiments the HAP may allow the customer to link their virtual wallet to a merchant using reference aliases that are not permanently linked to a single payment account or method. In doing so a consumer s accounts may change over time without breaking the persistent reference links that have been created to various merchants. This capability may facilitate a low friction user experience for payment transactions. In some embodiments the consumer may designate a reference for an account using a merchant s web site. In doing so the consumer may agree to allow future transactions to occur without requiring future affirmative consent. The consumer a may then manage the reference connection through a virtual wallet or web site and update the reference aliases without requiring another visit to the merchant s web site.

Alternative embodiments of the HAP may also allow the consumer to create reference links between other information in their virtual wallet. For example a consumer may desire to create a reference alias for an address frequently used in commerce transactions. Alternatively the consumer may wish to create a reference alias to a name or persona that they may use in commerce. In doing so the HAP may enable the consumer to maintain a degree of privacy while still enabling low friction commerce transactions.

In some embodiments of the HAP the consumer may agree to or designate certain payment options to be used in recurrent transactions. For example the consumer may permit flexible recurring commerce wherein future transactions from a merchant may be billed to the reference alias without further intervention from the user. In other embodiments the consumer may permit managed subscription commerce wherein the consumer and or merchant agrees to various terms or conditions that may govern the current and or future reference transactions with the consumer s virtual wallet account. For example the consumer may designate a pre set amount which the merchant may bill through the reference link monthly. For example a consumer may enroll in a Jam of the Month club. In one embodiment the consumer may choose to create a reference transaction authorization of 40.00 per month for 3 varieties of jam. In another embodiment the jams may have variable prices such as a rare Jam for 199.00 and the consumer may authorize full payment or partial payment with the remainder billed later through a reference transaction or alternative mechanism. Alternatively the consumer may agree to allow the merchant to bill a capped total amount to their virtual wallet reference account before requiring affirmative consent from the consumer for future transactions. For example the user may authorize a one year Jam of the Month subscription for 199.99 which may prompt the user in one year to optionally renew the subscription.

In some embodiments the HAP may provide payment security features to the merchant. For example the merchant may be given assurances that at least one payment account may be available for a given period of time using a reference link. Alternatively the merchant may be alerted when a reference link is updated or revoked by a consumer.

In some embodiments the HAP can enable the payment account issuer to update various parts of a reference transaction link without the intervention of the consumer. For example if a consumer s card number is compromised as a result of fraud the payment account issuer can automatically issue a new account number and update any references using that payment account. Additionally a payment account issuer may change a consumer s account type i.e. from Gold to Platinum and associate the updated account type with the reference transaction link. Advantageously these capabilities may enable higher transaction clearance rates for consumers merchants and payment account issuers.

In some embodiments the HAP may provide enhanced security features to the consumer. For example the consumer may be given additional options for restricting reference transactions if the merchant is a new merchant located in a foreign country has a history of fraudulent transactions or other conditions are present that may be cause for enhanced security. In alternative embodiments the consumer may receive alerts when a transaction is posted through a reference link. For example the consumer may be alerted after every transaction or only if the transaction is suspicious. In some embodiments the consumer may be given the option to approve or cancel the reference transaction.

In some embodiments the HAP may provide a control panel through which the consumer may manage the reference account links. For example the consumer may desire to remove a payment account from their virtual wallet and re assign any reference connections previously using that payment account to instead use another payment account. In other embodiments a consumer may desire to simultaneously add a new payment account to their virtual wallet and use the newly added account to replace another account in their virtual wallet. In some embodiments when a consumer deletes a payment account from their wallet they may be prompted to a update any reference transaction links that use that reference payment account. In doing so the consumer can provided uninterrupted linkage to payment references. In still other embodiments the consumer may be permitted to view reports regarding their historical usage of a reference alias or any accounts linked thereto. In some embodiments the consumer can update edit or revoke links between reference account aliases and various merchants.

Various embodiments of the HAP may enable the consumer to create rules governing the administration and use of reference aliases. As such the consumer may be able to designate a hierarchy of payment accounts to be used for one reference alias in the event that some payment accounts are not available. In other embodiments the consumer may be able to designate alternative reference payment methods such as frequent flyer accounts merchant points accounts coupons virtual currencies government benefits future paychecks accounts receivable loans or lines of credit.

In some embodiments the HAP may enable a merchant offering a checkout option to display a button on their web page including enhanced information. For example the button may include text indicating that the transaction may be fulfilled using a reference alias in the consumer s virtual wallet. Alternatively the button may display a reference address that the consumer has previously designated for use in such transactions. In some embodiments the consumer may interact with the button directly to change update or view reference transaction information.

Various embodiments of the HAP facilitate a common low friction user experience for consumers wishing to link a financial account a merchant account or any other participating commerce services to a digital wallet. In some embodiments the HAP provides a standardized common user experience and control panel for allowing customers to view grant and manage permissions for financial institutions merchants or participating commerce related services to interact with their digital wallet. In other embodiments the HAP eliminates the need for consumers to remember and maintain multiple authentication passwords across many merchant commerce and payment domains. In yet other embodiments the HAP maintains an up to date payment and other relevant personal data across multiple merchants and commerce related services. Various HAP embodiments may also solve for a usability friction for both merchants and consumers of having to authenticate twice once to a merchant and once to wallet provider in order to conduct a wallet ecommerce transaction. Using HAP consumers may log in once either via the merchant or the wallet and conduct an ecommerce transaction.

Embodiments of the HAP may also facilitate storage and management of customer identity and other relevant information for merchants and other commerce related services. Some HAP embodiments may provide a faster and low friction new customer enrollment for customers who already have a wallet account. Other HAP embodiments may provide consumers their own centralized cloud based account having a master copy of commerce related personal and account information protected by a trusted brand. Some HAP embodiments may provide issuers branding and or communication opportunities with cardholders even in shopping experiences like card on file purchases.

Some embodiments of the HAP may provide consumers facilities for easily and conveniently personalizing new prepaid accounts with their issuer using previously verified personal information stored in an online wallet and expediting provisioning a prepaid account to a digital wallet. Once a prepaid card is connected with the wallet the HAP provides the consumer an easy to remember authentication tool to sign on to view and manage their prepaid account either at the wallet destination website application or through limited federation to the prepaid issuers online or mobile prepaid service application.

These and other embodiments of the HAP provide a secure and trusted bidirectional federation with a digital wallet by instituting a permissions system that allows services certain access privileges e.g. read write transact etc. to the wallet only when appropriate and subject to both systematic and customer managed controls.

In one embodiment the HAP may facilitate acceleration of an account creation with a merchant by drawing customer data such as name addresses email etc. from the wallet. Once connected the wallet may keep the customer data up to date e.g. and provide an easy way for the customer to sign in to the merchant account e.g. . For example as shown in a new customer may create an account with a merchant e.g. Nordstrom by filling out the form fields e.g. first name last name email password zip postal code gender email preference and or the like . In one implementation all of these fields may be replaced with information from the HAP and persistently linked to the customer s wallet profile when the customer opts to create an account via the HAP facilities of the wallet e.g. Wallet wallet . The data entry for creating an account with the wallet is much less with the HAP.

In some embodiments the initial connection between an entity and Wallet creates a customer identifier unique to that relationship. Unlike storing card information with a merchant which if compromised could be used at any merchant the customer identifier can only be used by the designated entity. Any other entity attempting to use another entities identifier to access a customer s wallet account would be denied. In some implementations the merchant may use this unique identifier to make calls to the wallet to retrieve and or update commerce relevant or other customer data. The customer has the option to maintain in one place address book payment methods and payment preferences. If the customer moves addresses for example or obtains a new payment card these changes may be remotely propagated to all the merchants they do ongoing business with. In some implementations the merchant has a set of callbacks that the merchant can invoke to the wallet in order to offer seamless and uninterrupted service to the customer. Under the appropriate permissions the merchant may make these calls independently and or under certain triggers such as the appearance of the customer starting a new shopping session.

In one implementation each callback may include the customer ID that is unique to the customer merchant relationship. In a further implementation API calls to the HAP may include one or more API keys such as a public key and or a shared secret key. An API key may be a string value that identifies the general API access configuration and settings for the site. In some embodiments callbacks for HAP may include without limitation the following 

Various methods of callbacks may be utilized. In some embodiments of the HAP API and inline widget methods among others may be implemented. Using the API method the merchant server may make API calls to the V Connect server to retrieve customer data. For example a customer may log in to a merchant account to view their account preferences with the merchant. The merchant server may execute an API call to get payment methods from the HAP server. The merchant may then display the currently active payment method is a wallet e.g. Wallet wallet with account nickname and ending in digits xxxx. For example referring to the merchant may obtain payment methods and from HAP and display them using their nicknames such as My Business Credit Card PaymentCard Ending . . . 1234 e.g. and My Personal Debit Card PaymentCard Ending . . . 1234 e.g. . In this way via API calls the merchant may display rich up to date account information including card art.

Using the inline widget method the merchant may display a wallet rendered window into a user s wallet account. Inline widgets may display rendered or interactive elements that are injected into the merchant s website. An example would be a widget that displays the nickname and associated card art for payment methods stored on file with a merchant similar to shown in . A JAVASCRIPT call from the merchant may indicate the type parameters and customer ID for rendering the widget.

Referring again to a customer may also edit payment methods and other information in the wallet via the HAP button . Using the edit option the customer may add modify delete link delink accounts and addresses and at a glance confirm any new card they added to their wallet account last week is active with the merchant and their bill may process correctly.

Referring to the customer may configure merchant linkage to the wallet starting with option for example. In one implementation the customer may select preferences for the merchant account in a more granular manner. For example the customer may specify for example payment methods and shipping addresses to link to the merchant. Other preference management is discussed in further detail with respect to . Upon completing the preferences set up the customer may select the connect button to create the link between the merchant and the a wallet. The wallet widget may then direct the customer to the merchant site . The wallet may also share or load or dynamically inject to the merchant site information according to the customer preferences. The merchant site may obtain the shared information and display the shared payment methods address and other information to the customer to confirm the connection between the merchant account and the wallet.

The merchant server may receive the authentication request and may parse the request to obtain user and or client details such as username and password. The merchant server may perform authentication of the user and or client details at . In one implementation the merchant server may query its user customer database to verify that the username and the password or other credentials are correct and the user is authorized to access the account with the merchant i.e. merchant account .

In another implementation the user credentials may be authenticated by the wallet server . The user may select sign in with wallet button and may input wallet credentials in the wallet widget launched. The client may generate an authentication request using the user provided login credentials. An example wallet authentication request substantially in the form of a HTTP S POST message including XML formatted data is provided below 

At the wallet server may authenticate the user. In one implementation OAuth protocol may be utilized to authenticate the user on behalf of the merchant. In one implementation the wallet server may use the username and or password one or more widget parameters such as API key in the authorization request and or the like to obtain a customer ID associated with the user customer and the merchant. The wallet server may send the customer ID in an authorization response to the merchant. In one implementation the authorization response may be a back end notification message sent from the wallet server to the merchant. An example notification message in POST method in XML format is provided below 

The merchant server may receive the customer ID in the authorization response message and query their database to confirm that the customer ID matches a customer record in their customer database. Upon verification or successful authentication at the merchant server may send an authentication response to the client . The authentication response in one implementation may be the requested web page that is rendered by the client and displayed to the user at .

In one implementation the merchant server may use the user sign as a trigger to request current user information from the wallet server. The merchant server may generate and send a user information request message to the wallet server. The user information request message may include without limitation the customer ID that is unique to the customer and the merchant relationship a token an API key a digital certificate and or the like. In one implementation the token may be generated using one or more parameters such as the merchant s API key customer ID merchant ID merchant name customer name and or the like. In a further implementation the token may be encrypted. In one implementation the token may be a string that is created by the MD5 Message Digest algorithm hash of one or more of the parameters listed above. In one implementation the merchant server may utilize callbacks via APIs inline widgets etc. to pull user information from the wallet. For example the merchant server may call the getPayment API to obtain payment method details such as card nicknames brand last 4 digits etc. An exemplary GET request method for making the call is provided below.

The wallet server may obtain the request and may parse the request at . In one implementation the wallet server may validate the request by confirming the customer ID API key and or the token are correct. At the wallet server may use the customer ID for example to query one or more databases e.g. customer profile database for user records. The wallet server may retrieve the user record preferences and or permissions from the customer profile database. In one implementation the wallet server may use the associated preferences and permissions specified by the user to determine payment methods that the user has approved for sharing with the merchant. The wallet server may then generate the user information response message for transmission to the merchant. An example response message substantially in the form of a HTTP S POST message including XML formatted data is provided below 

The merchant server may receive the response message and may send the shared user information message to the client which renders the received message to display the current user information to the user at . Although only getPayment API call is discussed in detail other API calls such as those listed in Table 1 may also be called by the merchant server to obtain information including address nick name indicator for default primary address active loyalty programs program names indicator for current primary loyalty program request to instantiate a purchase against the customer ID retrieve and redeem previous purchase records for the customer and or the like. In an alternate implementation instead of the merchant making the API calls to obtain the user information the wallet server may push user information to the merchant. In some implementations the information push may be a one time event for example when the user connects a new service e.g. a merchant to a wallet. In other implementations the information push may be triggered by events such as the user signing in to a service account via the wallet.

Referring to in one implementation the user may input new information to their merchant account. For example the user may add a new shipping address to their merchant account. The client may take the user input and package it as an add new information request to the merchant server. An example add new information request substantially in the form of a HTTP S POST message including XML formatted data is provided below 

In one implementation after receiving the new information request the merchant server may parse the message and retrieve the user record from the one or more databases and or tables e.g. customer profile database . The merchant server may then update the user record and store the updated user record to the customer profile database . An exemplary listing written substantially in the form of PHP SQL commands to update the user record in the customer profile database is provided below 

In one implementation the merchant may send the new user information message to the wallet server. An example new user information message substantially in the form of a HTTP S POST message including XML formatted data is provided below 

The wallet server may receive the new user information message from the merchant along with customer ID. The wallet server may parse the received information at . Using the customer ID extracted from the received information the wallet server may query one or more customer profile databases at . At the server may obtain query results. In one implementation the query may be performed to determine whether the field of new user information is a field that is permitted for updating using information from the merchant source. For example in one implementation shipping information may not be a field that is permitted for updating based on information from the connected service such as the merchant while other information such as a new telephone number received from the merchant may be used to update the customer record in the database e.g. . Such permissions for adding removing changing updating etc. information to and from the wallet may be specified by the user via the permission control panel discussed in detail with respect to . In some other implementations whether information flowing from the merchant to the wallet server can be accepted by the wallet server and used to update the customer records may depend on the merchant trust level how critical the update or change is e.g. changing a payment method versus changing a telephone number and or the like. At depending on whether it is appropriate to update the customer record the wallet server may or may not update the record. At the wallet server may send a confirmation message to the merchant server to confirm whether the new information was accepted and the current information that is on the records in the wallet. At the merchant server may send the client a confirmation message whether the update was successful or not. The client may display the confirmation message at . In one implementation the wallet server may directly communicate with the user e.g. via email SMS MMS phone etc. at and solicit and or provide confirmation of the addition of the new information.

In one implementation if there is no existing merchant account as determined at the customer may create a new merchant account. In one implementation the customer may create a new merchant account via the merchant where the user may fill out a form with fields for name address email username password and or the like at . At the merchant may use the customer provided information to create a new account for the customer and the decision may move to . If on the other hand the customer selects an option to create a new merchant account via the wallet the HAP may determine whether the customer has an existing wallet account at . If the customer does not have a wallet account the HAP may request the user to create a wallet account at . Once there is an existing wallet account the HAP may obtain customer wallet credentials and may authenticate the user at . At the HAP may obtain preferences and or permissions for the merchant account. At the HAP may create a customer ID that establishes the relationship between the merchant and the customer. In one implementation the HAP may store the preferences and or permissions along with the customer ID in its customer database. At the HAP may provide user information allowed by the preferences and permissions to the merchant along with the customer ID. At the merchant may receive the provided information and may create a merchant account for the customer. At the merchant may use the wallet provided information to transact with the customer.

In some embodiments the HAP framework may be leveraged for prepaid card provisioning and personalization. An online wallet service such as Wallet by Payment may store consumer information for a number of purposed including for expediting online shopping and checkout. Cardholder information such as name account number contact information billing and shipping addresses etc. flows originally from an issuer through a provisioning process to the wallet and then by instruction of the consumer to a merchant at the time of checkout. Some embodiments of the HAP entail reversing the flow of information such that an online wallet may provision account information with an issuer and at the same time link the account records at the wallet with the account records of the prepaid issuer.

In one implementation the HAP control panel may include several panels such as service providers payment methods shipping address share permissions and or the like. The service providers may include without limitation any party that a customer may do business with. The customer may have an identity payment relationship etc. established with such parties. The customer may select any one multiple or all of the service providers for individual or group preference and permission management. In one implementation the customer may select the merchant NORDSTROM . The customer may then configure each of the payment methods shipping addresses share and permissions for the selected merchant . The payment methods panel may list one or more payment methods that are present in the wallet. The panel may display an image of the card e.g. from the issuer a nickname for the card card identifier card brand and or the like. The payment methods may also include bank or other financial accounts debit cards credit cards prepaid cards gift cards and or the like. In some implementations the customer may also add new card to the wallet directly from the control panel interface. The customer may select one or more of these payment methods for sharing with the merchant . When the wallet provides the shared payment method to the selected service provider only select information such as the nickname brand and last four digits of the card number etc. may be shared. In some implementations the actual card or account number may not be shared with the service provider.

The customer using the permissions panel may authorize the service provider to execute transactions option against the wallet using the selected payment methods. In some implementations the customer may also set up using the permissions panel recurring billing authorization subscription payments and or the like. For example at the end of a month a merchant e.g. AT T may request authorization from the wallet to bill a monthly charge amount e.g. 120.55 against the standing instructions for a default payment method by a customer having a customer ID. The wallet may be storing the standing payment instructions for default payment method in slot 1 of the wallet and a back up payment method in slot 2 of the wallet. The wallet may map slot 1 to an actual payment method and authorize billing using the actual payment method without the merchant knowing the actual payment method. In one implementation depending on the merchant request a tiered authentication may be employed to more rigorously authenticate the merchant customer. For example a merchant that usually transacts against the primary card and primary shipping address may request to execute a transaction against another shipping address e.g. grandma s address . Such a request may then cause the wallet to step up the authentication protocol e.g. get customer confirmation request digital certification etc. to ensure that the transaction being executed is not a fraudulent transaction.

In one embodiment the HAP may leverage its facilities to determine liability for transactions that happen based on trust relationships. For example depending upon whether the merchant tries to bill the customer with or without popping up an extra widget to log on could affect the liability for the transaction. Using TSM trusted service manager protocols where a secure key from a issuer is passed to put on a phone or other client device so that the wallet knows a secure key from the issuer was present during the transaction may also prevent fraud and affect the liability for the transaction. Similar trust relationship could also be used for liabilities relating to change requests for card not present transactions and or the like.

In some implementations the customer may set up shipping address preferences for the service provider. The shipping address panel may display a list of shipping addresses stored in the customer profile with the wallet. Each of the shipping addresses may be nick named. The customer may select one or more of the shipping addresses for sharing with the merchant and may add another address to the wallet directly from the shipping address panel . In some implementations the customer may allow shipping address to be a field which the service provider may have write access to by configuring the allow write access option . Such authorization for write access to the shipping address field of the customer profile record in the wallet s customer database may allow any changes the customer may make to the shipping information from the service provider interface to propagate to the wallet. Such a bi directional flow of information may ensure true syncing of user information across various service providers and the wallet. In some implementations the customer may configure using the permissions panel that any profile changes may be confirmed with the customer option . The wallet in such a case may send the customer a request to review and or confirm the profile change and may update its customer profile upon explicit approval from the customer.

In some implementations the control panel s share panel may display a list of information fields that may be shared by the customer with the service provider. Examples of the fields of information include without limitation name primary email address work email address information for account creation loyalty programs specific loyalty programs wish lists points balance and or the like. In one implementation one or more of these fields may be configured for write access . Using the permissions panel the customer may further configure whether the service provider is allowed to execute transactions against the wallet authorized to bill the customer authorized the wallet to make bill for subscription payments require confirmation before modifying the customer profile and or the like. Various other permissions and panels for configuring and managing customer information federation are within the scope of the embodiments of the HAP.

The datagram in then continues in . Client then renders the lightbox . In some embodiments the lightbox appears overlaid on the merchant s web site. In other embodiments the lightbox appears in a different window. Upon rendering of the lightbox user is then presented with reference links that have already been created. In some embodiments the user may re use a previously created reference payment persona address or other link by selecting its alias from the lightbox. In other embodiments the user can create a new reference link from within the lightbox. In some embodiments the reference creation request may be substantially in the form of an HTTP S message including XML formatted data as provided below 

In some embodiments wallet server may then process the reference creation request. For example the wallet server may verify that the reference payment may be linked to the merchant. The wallet server may also verify that the reference payment account has sufficient funds to cover the current or future transactions. The wallet server then may reply to client with a reference creation response indication successful or failed reference creation. The client may then render response .

In some embodiments the user may desire to simultaneously pre fill information at the virtual wallet provider force two factor authentication before using the virtual wallet account and or establish a pre paid payment account .

If the user does not have a virtual wallet account the user may sign up via filling out a form as shown in which may ask the user for identification information e.g. a name username and or the like an email address a password for the account other information e.g. gender address and or the like and or like information. Once the user has entered said information the user may click the continue button to submit the request for an account and the card selections to be associated with the newly created account.

In some implementations the HAP before submitting the card selections may present the user with lightbox which may indicate which cards have been selected. The user may have the ability to confirm the card selections by leaving all of the selections as is and clicking the complete button may deselect one or more of the selected cards and click the complete button or may click the start over button in order to clear all selections and to return to the card selection interface. As such in such implementations only the accounts checked or otherwise selected by the user may be passed to the virtual server and added to the user s virtual wallet. Once the user has clicked the complete button the bank issuer may package the information received from the user and may send it to the HAP. The HAP may then send a request to a virtual wallet server authenticating the user s account via the submitted login data and requesting that the virtual wallet server associate the specified cards with the user s virtual wallet. If the user submitted information for creating a new virtual wallet account the HAP may instead send a request that creates a virtual wallet account for the user and associates the specified cards with the user s virtual wallet.

In some embodiments the issuer may then use the data in the request to perform a lookup of account and or prefill information that may be shared with the requesting service. In some embodiments the issuer may have a permissions rule set that governs what data may be shared with requesting services. Example rules include Never share my business account number Default to my personal account Never share my billing address and or the like. In some embodiments the issuer may then respond to the virtual wallet server with a prefill data package containing user user account user financial account and or similar data for use in establishing a virtual wallet account pre paid account enrolling a payment account in a virtual wallet and or the like. In some embodiments the pre provisioned data response e.g. prefill data may be in the form of an HTTP S message including XML formatted data containing fields substantially similar to the following 

In some embodiments the pre provisioned data response may contain reference links e.g. and or the like allowing dynamic updating of the data in the virtual wallet and or at the payment card issuer. In some embodiments the virtual wallet may then pre populate the provided information into a form for enrollment of the user s payment account rewards account and or like in the user s virtual wallet. In some embodiments the HAP may then make a request to retrieve an image for the card and or payment account being added to the virtual wallet . In some embodiments the card image may be a default image. The wallet server may store the card images locally in a cache or retrieve the card images via a web service such as XML RPC SOAP and or the like. In some embodiments the image retrieval request may be in the form of an HTTP S message including XML formatted data containing fields substantially similar to the following 

In some embodiments the card image server may then query a data store for an image of the card. An example PHP SQL listing for querying a database for a card image is provided below 

The card may be a card virtually identical to the card the consumer is enrolling or the card may be of a similar kind but of a more generic type e.g. green card gold card loyalty card and or the like . The data store may have multiple versions of the card available in various size pixel resolutions and or image formats. In some embodiments the card image most closely matching the user s request may be returned to the user. In other embodiments all card images meeting any of the criteria may be returned. In still other embodiments the card image server may create an image on the fly in real time using a dynamic image creation tool and or a template tool such as ImageMagik Gimp Photoshop droplets and or the like. In one embodiment of the invention the card template image retrieved from may be overlayed with a logo photo of the user or other similar data using Bash ImageMagik UNIX instructions substantially similar to 

In some embodiments the image response may contain a cache control indication. The image server may indicate that it may cache the image for use by the wallet server user and or like until a certain date or time. Alternatively the cache date may be set to a date in the past which indicates that the image may not be cached. By using a cached version of the image the card image server may advantageously be able to provide individually customized versions of the card images for card image requesters without having to frequently re generate customized card images e.g. images containing a logo or the user s name and or photo frequently. After the card image has been retrieved the user may click a Save button to enroll the card in the wallet. In other embodiments no card image is retrieved. In still other embodiments the payment account is automatically added to the wallet. Additional logging and or data storage may take place on the wallet server and or data may be stored in a staging table such as delayed processing of card enrollment requests during heavy periods of load. In some embodiments the enrolled payment account and or wallet enrollment data may be stored in a staging table for later processing . In some embodiments the data stored in the staging table may be substantially similar to the following 

The pre provisioned data record may then be updated with the new wallet UUID . In some embodiments the record may be marked with an indication of enrollment method such as manual and additional data may be associated with the record such as an auto update flag used in reference transactions an account level identifier for associating child accounts with a parent account acceptance of a terms and conditions and or a hashed card art image name . In some embodiments the user may receive an indication that they have completed the payment account enrollment in the virtual wallet creation of the wallet account and or the like.

In some embodiments the user may provide card account selections to add to the wallet to the electronic device see . The electronic device may send said selections to the issuer server via a request card account info push to a wallet message . In some implementations the XML encoded push to wallet message may take a form similar to the following 

In some embodiments the message may contain card selection information user account information for the issuer user account information for the wallet service and or the like. The issuer server may then push the selection information via a new card account add request to the wallet server . In some implementations the XML encoded request may take a form similar to the following 

The wallet server may then use any information received from the issuer server to modify the user s wallet account via a MySQL database command similar to the following 

In some implementations the electronic device may instead send the user selections to the wallet server via a request for a pull for card account information from the issuer that is sent by a wallet overlay see . In some implementations the XML encoded pull request may resemble the following 

The wallet server may use any identifying information such as the user s account number with the issuer the user s card number s and or the like provided in the request for card account information to create a new request to the issuer server. The wallet server may request any information necessary to link the card account to the wallet service including permission from the issuer more information about the card account not provided by the user e.g. a card account ID and or the like . The issuer server may after receiving such a request send a new card account add request which may include all information requested by the wallet server.

An example PHP SQL command listing illustrating substantive aspects of querying the Amazon database for modification date of address is provided below 

First the HAP may load an action template from an action template table of the HAP database. An example of the action template is provided as follows 

When the return values are newer for BoA the HAP may determine e.g. as a role that any newer modified entity is a source for that information type. As such it will pre populate a request as follows 

Then the HAP may determine which fields require updates at target and pre populate the request info as follows 

In some embodiments the Source Entity Server may send a source action connect request message e.g. see examples below associated with messages and to the HAP Server . The source action connect request message is constructed based on the determined entities roles and context. Then the HAP Server may check the user access privileges and determine if the requested action is permitted for the connection type and context. Following that the HAP Server may query for user record from the HAP Database . For example the database may be a relational database responsive to Structured Query Language SQL commands. The HAP server may execute a hypertext preprocessor PHP script including SQL commands to query the database for details of the user record. For example if an address needs to be updated between entities as discussed below in example message an example PHP SQL command listing illustrating substantive aspects of querying the HAP database is provided below 

Then the HAP Database may reply with the user record . After receiving the user record the HAP Server may perform action connect . Then the HAP Server may store the changes after the action . For example the HAP server may issue PHP SQL commands similar to the example listing below to store the changes after action data in a database 

After that the HAP Server may send a HAP action connect request e.g. see examples below associated with messages to the Target Entity Server . When the HAP action connect request is received the Target Entity Server may query for user record from Target Entity Database . An example command listing illustrating querying the Target Entity Database may be at least the same form as . Then the Target Entity Database may return the user record . After that the Target Entity Server may perform the action connect . Following that the Target Entity Server may store the changes after the action connect to the Target Entity Database. Then the Target Entity Server may send an action connect completed message with the target entity to the HAP Server. After receiving the action connect completed message the HAP Server may store the message in the HAP Database. Following that the HAP Server may send an action connect completed a message to the Source Entity Server. An example action connect completed message substantially in the form of a HTTP S POST message including XML formatted data is provided below 

Finally the Source Entity Server may store the action connect completed message to the Source Entity Database . Alternatively the Requestor Entity may send a requestor action connect request to the HAP Server. An example action connect request e.g. issuer Bank of America BoA requests the issuer Bank of America to update default address with merchant Amazon substantially in the form of a HTTP S POST message including XML formatted data e.g. is provided below 

Another example action connect request e.g. payment network Visa requests the issuer Chase to update card new expiration date with merchant Best Buy substantially in the form of a HTTP S POST message including XML formatted data e.g. is provided below 

Another example action connect request e.g. wallet provider Walletrequests the merchant Amazon to T shirt size profile with V.me substantially in the form of a HTTP S POST message including XML formatted data e.g. is provided below 

After the requestor action request is completed the HAP Server may send a requestor action connect acknowledgement message back to the Requestor Entity.

In some embodiments a data structure may be generated for any cell in the n dimensional array of settings where each axis of array may be represented by these visual access handles e.g. etc. . Alternatively the axes dimensions may be represented by database tables wherein any of the value fields in the database tables may be key fields that are joinable with other database tables.

Referring to in some embodiments an access privilege may be defined between a source entity and a target entity . Access privileges may also be defined for an entity category for example issuers merchants consumers and or the like and it may also be defined for a specific entity for example issuers like Bank of America BoA Chase merchants like Amazon BestBuy consumers like owner bond 1 spouse of the owner bond 2 child 1 of the owner shipping carriers like Fedex UPS and or the like. In some embodiments when the HAP enables a connection between entities the access privileges may be checked to determine what actions and information types are allowed for this connection. Detailed discussions of access privileges between a source and a target are shown in .

In some embodiments access privileges may be different for different contexts of the connection. The connection may be requested via contexts including but not limited to mobile web in person decoupled transactions 2 device transactions near field communication NFC known merchant and or the like. In some embodiments decoupled transactions allow decoupling a digital wallet checkout experience from having to completed in the same domain or platform where it started. Decoupled transactions enable consumers to manage and authorize transactions through their own personal preferred channel e.g. a personal device regardless of the platform there were on initially. Two device transactions may allow transactions to be authorized by two difference devices of the owners.

In some embodiments a connection may be initiated by a source entity or a target entity to communicate between the source and the target through the HAP. In other embodiments a connection may be initiated by a requestor entity which requests communication between a source entity and a target entity through the HAP. For example an issuer may initiate a connection to a target entity to push a newly issued card information to the target entity. For another example a consumer may initiate a connection and request a merchant as a source entity to update address with an issuer as a target entity. Any entity in may be a requestor entity.

In some embodiments an issuer mobile app contains only issuer cards i.e. no competing cards . Payment network provides the issuer the Wallet SDK package and documentation. In some embodiments issuers may integrate Wallet SDK in their own apps and can test against Payment certification process as usually done for the base Payment network products. In some embodiments issuers have full view of the transactions and the consumers receive the service and the support directly from their issuers. No federation required in this phase given it is and issuer provided service for the issuer cards and authenticated by the issuer. In some embodiments Wallet can provide additional capabilities if requested by the issuer. In some embodiments Wallet mobile reference app is available for issuers who do not have a mobile app or do not wish to integrate the Wallet SDK into their existing apps. In some embodiments Wallet may benefit by taking advantage of the installed base of mobile banking. Issuers are vested deeply in promoting Wallet as it is a direct promotion of their own brand and services. Wallet can focus on solving the issues that would accelerate acceptance and differentiate Wallet and Payment network from the competition.

In some embodiments for Consumers desiring to benefit of the Wallet capability for in app payment and in e commerce the consumer may need 1 to create a Wallet account with Wallet credentials. The consumer can create the account directly with Wallet through the Wallet destination site or Wallet mobile app or Lightbox during shopping. The consumer is asked to chose the participating Wallet bank from which to link his information to wallet. 2 Link his information at his issuers to his wallet created account. The consumer is redirected to his issuer where he logs in and data provisioning to Wallet occurs. Some consumers may elect to create a Wallet account and manually enter their information even if their issuer is Participation. For non participating banks the consumer may enter the information manually in wallet. If a consumer has established a Wallet account and credentials the consumer can log on to his Wallet account through his issuer online banking. The consumers logs on to his issuer online banking and clicks on wallet. The consumer is federated from their issuers to wallet. Wallet identifies validates the federation for the given issuer and for the given user. The consumer may see a Wallet view providing a specific issuer only information.

The consumers may not be able to see the cards and services not associated with this issuer. If the consumer elects to see the cards not belonging to this issuer the consumer may log on to Wallet with the Wallet credentials. Wallet may have multiple SDK certain SDKs may be for issuers others may be for merchants and partners. In addition to the core payment functionality the SDK package may include the ability the enroll add payment instruments authentication and credential management device finger printing all package in a secure hardened. The SDK has a set of modules that the issuer can elect to use or provide their own. The intention is not to create a custom development and ensure that the base is simple and modularized to reduce the future support needs. The VDC may be the storefront for distributing the SDK s . Wallet may create a reference app that may use the modularized SDK to support the smaller issuers as well other markets outside the US. The issuer may control the user experience based on guidelines provided by wallet. Wallet provides guidelines to match the SDK functionality and to ensure consistent user experience and performance. The merchant SDK may have different merchant features. The user experience and the authentication in a merchant SDK is a Wallet standard and all the credentials used for the payment may be Wallet credentials. the plan is to partner with other third parties to enhance the functionality and the value proposition Package. Make it simple modularize enhance security guide and Certify.

In some embodiments checkout details treatment includes display the purchase details such as shipping discount etc. as an expand collapse section in the review page. Other features include I Increase the dimensions of the checkout lightbox for the iPad flow reduce number of touches into fields with auto next use a lightbox overlay from the merchant s site for the iPad flow maintain the checkout window dimensions in both the landscape and portrait modes enhancements for the visual design and interaction elements. standard handling of the footer UI.

In some embodiments in addition to the above additional framework changes to the mobile checkout experience would improve the user experience and funnel conversion for both new and existing Wallet consumers.

In some embodiments change the initial landing page that currently displays the Create an Account and Sign In links to the Log In page directly. This page also has a Create an Account link and is standard with other Web mobile sites.

In some embodiments as upon sign up or login the consumer may be directed to the Review Pay page without any greyed out areas. There they can submit their shipping payment and billing details in a non linear flow. If there is no information yet the consumer can begin adding in their details.

In some embodiments the ability to add a new payment method during the checkout flow and be able to select it for the current checkout. The ability to remove a payment method during the checkout flow which should then be removed from the consumer s wallet.

In some embodiments as a consumer I want to be reduce the number of steps and touches when I checkout on my iPad device. Given A consumer is shopping on the merchant site via their mobile browser on their iPad And a merchant has integrated and has the Wallet buy widget available on their site. When the Wallet checkout lightbox is loaded. Then the consumer should still see the merchant site behind the lightbox for all pages sign up log in payment . And the spacing and field formats should be optimized for the iPad retina non retina displays for all pages sign up log in payment . And interaction elements buttons links behaviors use iOS standard experiences for all pages sign up log in payment .

In some embodiments as s a consumer I don t want to be shown multiple pages to choose between logging in and signing up. Given A consumer is shopping on the merchant site via their mobile browser on their iPad. And a merchant has integrated and has the Wallet buy widget available on their site. When the Wallet checkout lightbox is loaded. Then the consumer should be shown a log in page first that may also have a link to sign up.

In some embodiments as a Wallet consumer I want to be able to see what information is required and complete checkout non linearly to provide the required payment information. Given A consumer is shopping on the merchant site via their mobile browser on their iPad. And a merchant has integrated and has the Wallet buy widget available on their site. When the Wallet checkout lightbox is loaded. And the consumer has either signed up or logged in successfully. Then the consumer may first be directed to review page to confirm or provide the ship pay or bill info individually regardless of having a saved profile or not.

In some embodiments as a Wallet consumer I want to be able to add new remove and edit credit cards in my wallet directly from checkout on my iPad device. Given A consumer is shopping on the merchant site via their mobile browser on their iPad. And a merchant has integrated and has the Wallet buy widget available on their site. When the Wallet checkout lightbox is loaded. And the consumer has either signed up or logged in successfully. Then the consumer can click from the review page to the Payment Method page to select or make changes to their wallet. And the consumer can add additional credit cards to their wallet from the Payment Method page. And the consumer can edit an existing or newly added credit cards in their wallet from the Payment Method page. And the consumer can remove any existing or newly added credit cards in their wallet from the Payment Method page.

In some embodiments as a Wallet merchant I want an optimized mobile experience for my customers who are transacting on my site on their iPad without having to configure a separate mobile tablet configuration. Given A merchant who has on boarded and integrated Wallet on their site. And the merchant has not configured a separate setting to enable mobile. And a consumer is shopping on the merchant site via their mobile browser on their iPad. When the consumer touches the Wallet buy widget after adding items to the cart. Then the checkout lightbox should display as an overlay on top of the merchant site in an iPad optimized format and UX for both retina non retina display through the end to end checkout experience.

In some embodiments on the Review Pay page move the checkout details that lists out the Subtotal Shipping Gift Wrap Discount Misc Tax info under the total price as an expand collapse. Originally this was displayed at the bottom of the page which forced the consumer to look towards the bottom of the review page in order to confirm the appropriate amount. The amount should be the first value for the consumer to confirm their purchase.

In some embodiments in both landscape and portrait modes the checkout lightbox should have the same dimensions regardless of orientation. For retina displays on iPhone iPad the display may need to be double the resolution for visual assets 2x ipad suffix for images .

In some embodiments for the tablet checkout the checkout widget should be displayed as a lightbox overlay on top of the merchant checkout. So both in portrait and landscape views the lightbox should be overlain over the merchant s site. The background should be greyed out in order to call attention to the checkout lightbox.

In some embodiments the input fields in the checkout light should focus the text field sequentially for the next responder chain through the form fields. The order should go from left to right and top to bottom. The widget may recognize the user agent as iPad which would then render the tablet checkout overlay as a lightbox.

In some embodiments the mobile checkout may use a full page overlay that covers the screen completely. Currently the links on the review page use a Change hyperlink. Replace the hyperlink with the HTML5 mobile standards to make the enter row a link for the Shipping Payment Method and Billing update functions.

In some embodiments the current mobile links for the footer are difficult for consumers to open. So instead of the standard Web hyperlinks for the Terms of Service Privacy Policy and Help use the HTML5 mobile standards of using the horizontal bar as the footer links.

In some embodiments for text or mixed text fields display the standard keypad by default. For digit specific fields like the credit card number field the keypad should use the numeric keypad only to improve the user experience. Images for issuer card art may be loaded and displayed according to the size ratio specifications. The default card art images for other cards should have the 2x ipad suffix. Images should not change their aspect ratio going from non retina to retina display or from portrait to landscape orientation.

In some embodiments of the Non linear Checkout Flow from the merchant checkout page the following page that is displayed in the current mobile flow is the Wallet Create Sign In page. This page is a redundant step that impedes flow conversion through checkout for the tablet experience. Therefore the Wallet Create Sign In page should be removed and the initial step should just display the Sign In page directly. That page still allows the user to sign up through a single page following clicking the Create an Account link from this page.

In some embodiments the Review and Continue page may now be the central page for the Wallet checkout flow. So immediately following sign in or enrollment the consumer may be directed to the Review and Continue page. If the consumer doesn t have any saved info in CS getShippingDetail and getPaymentProfile then the fields for shipping payment method and billing may be blank. If the consumer does have saved info in CS then the fields may be pre populated on the Review and Continue page. If the non Paymentcredit card being used has not yet been validated CVV and the consumer tries to complete the transaction from the Review and Continue page then the consumer may be directed to update their payment method info. The credit card form fields may be pre populated masking the PAN except for the last four digits and may be greyed out disabled. A message may be displayed to the consumer that they need to enter in their CVV in order to validate their credit card. The field cursor should be on the CVV field in order for the consumer to complete their validation.

In some embodiments if the first card returned by CS is expired and the consumer tries to complete the transaction from the Review and Continue page then the consumer may be directed to the payment method page to change or add a new payment method. A visual call out may be displayed to the consumer for cards that are expired in their wallet. The expired card may be greyed out disabled from being selectable. The consumer can then go through completing each of the shipping payment method and billing in a non linear flow. Upon every submission for add or update to the shipping payment method or billing pages the consumer is return back to the Review and Continue page where they can complete the transaction.

In some embodiments when the consumer enters in their shipping address and selects that they want to use the address as their billing for the purchase then after continuing back to Review and Continue page both the shipping and billing fields should have the addresses. And from the Review and Continue page the shipping address should be validated validatePurchase with CYBS via CS. If there s a mismatch then the consumer should be displayed with shipping address suggestion page where the consumer can either choose their own shipping or the system suggestion. If the consumer chooses the system suggestion then they are redirected to the Review and Continue page to re confirm the transaction. Otherwise the transaction may be submitted for processing. Enabled for US Canada only at this time.

In some embodiments the updated Payment Method page should update the UX treatments for the Back button along with the ability to add a new payment method . From the same page a button to edit or remove at the top of the page should be presented. To edit the consumer should click the top edit button then select the row of the payment method to make the changes update back to CS . To remove the consumer should click the top edit button then touch the icon button to remove the payment from the wallet update back to CS . If there are no payment methods in the wallet then the button should be greyed out disabled.

In some embodiments architecture consists of the following component interactions ROR UI Common Services API User profile and Payment Instrument Value Added Services VAS for service provider integration.

Referring to VAS may be part of Common Services deployment. VAS API s may be exposed as REST services and UI layer may make the calls directly instead of going through Common Services. VAS may be responsible for all outbound communications with the service provider. ICE adapter may be developed in order to transform the VAS request to the appropriate ICE request to support the existing Alert feature. VAS may be an independent deployable component. Additional adapters may be developed in order support newly on boarded service providers.

Support future offerings from service providers. For example offers gift cards etc. Independently developed and deployable component. Exposes a defined set to of API s while hiding the details of the service provider API using adapters. Extensible to support different service providers through the development of adapters. VAS defines the following set of API s.

Referring to the sequence diagram describes a happy case scenario for subscription and settings API through VAS.

In some embodiments and by way of non limiting examples only the following terms may be interpreted as following 

In some embodiments a 3rd party service provider may integrate to Wallet to provide a value added service VAS to a Wallet consumer. Examples of VAS include alerts offers and top up.

Referring to in some embodiments services within the SPI framework have a generic defined lifecycle. It describes the relationship between user his payment instruments services implementation of these services and the service providers that implement these services. The Wallet consumer may have multiple payment instruments. There are a set of services associated with each payment instrument. Each of these services for a given payment instrument is associated with a service provider therefore multiple service providers can provide the same service. When the consumer chooses a payment instrument she can subscribe to associated service implementations. Because multiple service providers can provide the same service there may be some differentiation allowed. For each service Payment may define the parameters of differentiation allowed.

Referring to in some embodiments there may be five main interactions between Wallet and service providers in this integration 1 Onboarding onboarding of the service provider and on boarding of each service implementation that the service provider provides 2 Subscription to Service user subscribes to service implementation when used for the first time or when service version changes 3 User Settings retrieving and updating of user settings for a given service implementation 4 Activity Notification activity item for a user related to a service implementation 5 Activity Settings updating the settings for a specific activity item. Step 3 specifies settings for the service the offer service for a payment instrument while step 5 specifies settings for an individual activity item e.g. acceptance of an received offer . Step 4 enables Wallet to display activity information e.g. alerts offers in a consolidated manner within a single application where the user may filter and search while also enabling Wallet to send push notifications to the Wallet mobile application with this activity information if configured by the user . These five interactions listed above are described in detail in the following sections. Each section describes the interaction with a sequence diagram and a protocol specification. In addition both Wallet and each service provider maintain different pieces of the data this data model is described in each of these sections. Finally communication between Wallet and the service provider needs to be secure.

Onboarding consists of two phases Onboarding of the service provider Onboarding of each service implementation that the service provider provides. In some embodiments two way communication occurs between Wallet and the service provider therefore Phase 1 service provider onboarding requires that Wallet submits its X509 certificate generate a service provider ID password for the service provider and distribute it. The service provider submits its X509 certificate and Visa specific ID password. Phase 2 onboarding of a service implementation requires that the service provider implement a specific service a XML JSON file containing the UI configuration for the service. This UI configuration is based on the configuration template provided by Payment for this service. See Section 00234 for the template and related configuration data SP SERVICE URL version of the service implementation. In some embodiments the SP SERVICE URL is the common URL path for this service implementation. It is generally of this format 

Payment assigns a serviceID for each service onboarded by the service provider. Payment also specifies the VME HOSTNAME which indicates the hostname of the Wallet service. describes an example sequence diagram.

Data Model The UI configuration service version number Terms and Conditions X509 certificate and service invoker ID password are provided manually by the service provider they are uploaded into the V.me. Security The PaymentID and password provided to the service provider are stored in an X500 Directory the password is stored as a salted hash. The service provider ID password given to Payment by the service provider are stored in a database the password is encrypted. The service provider may in turn store the PaymentID password and service provider ID password securely. Process All onboarding information communicated between Payment and the service provider is done manually using an offline process. Information received by Payment may be validated and uploaded to the Wallet system. The service provider can initially test in the Wallet sandbox and once ready migrate to the production system 

The objective of subscription is to 1 link the user between Wallet and the service provider and to 2 convey the acceptance of the required T C from Wallet to the service provider. When the user first chooses to use a service Wallet may send a subscribe message to the service provider providing sufficient information to enable the service provider to link the Wallet account with the service provider s user account.

Before the user creates or updates her user settings Wallet requests the service provider for the current user settings. If the user has either not enrolled or not accepted the latest version of the Terms and Conditions for the service implementation then a return code to that effect may be provided by the service provider. Based on this status code Wallet may direct the user to an intermediate screen which displays the Terms and Conditions hosted by the service provider. On acceptance of the Terms and Conditions a subscription notice is sent from Wallet to the service provider. Once the subscription is accepted by the SP any subsequent calls to retrieve user settings should be successful.

The body contains the following information vme user user specific Wallet GUID for external usage EXTERNAL GUID service provider cid customer ID optional if available to V.me lastFour last 4 digits of PAN name full name as specified for PAN termsURL url of the T C accepted optional only if user is accepting T Cs the service should use the timestamp in the header as the time of acceptance

This information enables the service provider to link the EXTERNAL GUID to the customer record on its side either via the CID or the last 4 digits of the PAN and the name. Note that the EXTERNAL GUID sent by Wallet may always be the same for a Wallet user irrespective of the service to which the user is subscribing.

If the CID is not available the service provider should use the userid lastFour and name fields to attempt to identity the user account on its side. The service provider may return the following HTTP status codes 200 OK if success linking the accounts 400 Bad Request if the URL or body could not be understood by the service provider if the client sent incorrect data or if the data failed validation 401 Unauthorized if incorrect credentials sent 404 Not Found if URL incorrect including serviced 406 Not Acceptable if the only acceptable content types for the client is not supported by the system 412 Precondition Failed if the service provider could not resolve the user account based on the CID userid lastFour and or name or the user has not accepted the latest Terms and Conditions. In this case the body may contain the code indicating the exact failure. For T C acceptance precondition failure code the body of the response may also contain the URL for the Terms and Conditions to be accepted as a precondition. After displaying this T C and requiring the user to accept the T C Wallet may send a new subscription message with the termsURL field to indicate that the user has accepted this specific T C. code precondition failure code termsURL url of the T C required to be accepted by the user 415 Unsupported Media Type if a content type specified is not supported 500 Internal Server Error a server problem is preventing it from fulfilling the request

In case of success the service provider may return HTTP 200 and the CID. The CID is the foreign key that Wallet may use to reference the user when it communicates with the service provider. Therefore the CID can be any unique key within this service provider s namespace. If it does not have a local key for the user the service provider can simply return the EXTERNAL GUID as the CID value in the response and Wallet may use this as the CID value in future communications.

In case of 500 Internal Server Error Wallet may attempt to retry 3 times before giving up. Data Model Terms and Condition Privacy Policy content as well as their acceptance by users may be managed by the service provider. Security The subscription REST request is sent from Wallet to the service provider. It is over a SSL channel with two factor authentication.

This is used by Wallet to retrieve and update service implementation specific and user specific settings data from the service provider 

The body contains a set of key value pairs where the keys correspond to the UI Configuration data specified during the service implementation onboarding process. See Section 00234 for the body schema. The service provider may return the following HTTP status codes 200 OK success 400 Bad Request if the URL or body could not be understood by the service provider if the client sent incorrect data or if the data failed validation 401 Unauthorized if incorrect credentials sent 404 Not Found if URL incorrect including serviceID or CID 406 Not Acceptable if the only acceptable content types for the client is not supported by the system 412 Precondition Failed if the user is not subscribed or has not accepted the latest Terms and Conditions. The body of the response may contain the URL for the Terms and Conditions to be accepted as a precondition. Wallet may send a subscription message see Section 00202 to remove the precondition before attempting a retry. code recondition failure code termsURL uri of the T C required to be accepted by the user 415 Unsupported Media Type if a content type specified is not supported 500 Internal Server Error a server problem is preventing it from fulfilling the request.

In case of success the service provider returns HTTP 200 OK. For both the GET and the PUT the response body contains the key value settings data. In case of error the Wallet system does NOT retry instead it tells the user that the service provider is unavailable. Data Model The settings data is stored at the service provider and is not stored within V.me. This enables the service provider to provide the same service themselves and the consumer may see the same settings from all places i.e. if a setting is updated on V.me then that setting update should be reflected in that same service invoked from the service provider directly . Security The subscription REST request is sent from Wallet to the service provider. It is over a SSL channel with two factor authentication. Performance These calls occur in the user request path therefore their performance directly affects the user experience.

Activity notifications are used to convey service activity information to V.me. This is a REST request sent from the service provider to V.me 

The body contains one or more settings data. See Section 00234 for the body schema which contains a series of settings. Settings may have the following attributes 

service provider cid Service provider s customer ID negotiated during subscription activityID Unique ID within the service provider s namespace for this activity item each new activity item may have an unique activityID. Here is an example body 

Wallet may return the following HTTP status codes 200 OK 400 Bad 14 Request if the URL or body could not be understood by V.me if the client sent incorrect data or if the data failed validation 401 Unauthorized if incorrect credentials sent 404 Not Found if URL incorrect including serviced 406 Not Acceptable if the only acceptable content types for the client is not supported by the system 415 Unsupported Media Type if a content type specified is not supported 500 Internal Server Error a server problem is preventing it from fulfilling the request In case of 500 Internal Server Error it is up to the service provider whether it wants to retry a few times before giving up.

In case the service provider cannot send activity notifications to V.me Wallet can be configured to periodically poll the service provider to fetch this data. In this case Wallet may invoke the following REST call 

The service provider may return the following HTTP status codes 200 OK 400 Bad Request if the URL or body could not be understood by V.me if the client sent incorrect data or if the data failed validation 401 Unauthorized if incorrect credentials sent 404 Not Found if URL incorrect including serviced 406 Not Acceptable if the only acceptable content types for the client is not supported by the system 415 Unsupported Media Type if a content type specified is not supported 500 Internal Server Error a server problem is preventing it from fulfilling the request. In case of success the service provider may return an array of activity elements each containing the following common attributes and child settings that are identical to the push model. In case of 500 Internal Server Error Wallet may not retry until the next period. Data Model All activity notification information sent to Wallet is stored in the Wallet database. This data is used for push notifications to mobile devices and for activity feed information.

All communication between Wallet and the service provider is over REST with JSON or XML content. SSL is used for channel security. In addition two factor authentication is utilized for every request with one factor being the SSL certificate and the other an ID password. This information is exchanged during service provider onboarding. The request may have the following headers For HTTP Basic authentication the Authorization field is used to convey ID password credentials. For the authorization string the ID is followed by a colon and the password for this pair. The resulting string is encoded with the Base64 algorithm. The server may respond with a 401 Unauthorized if the authorization header is not specified.

Content Type Length Several content types are supported for the request message body XML JSON NVP. The server may respond with a 415 Unsupported Media Type if the content type is unacceptable. The content length is optional.

Accept Type specifies the preferred response format. XML and JSON are acceptable. It may respond with a 406 Not Acceptable if the accept type only specifies other formats.

Keep Alive To minimize connection costs between the service provider and V.me it is recommended that the service provider use HTTP keep alive connections when connecting to Wallet and that it support HTTP keep alive connections when Wallet connects to it.

Internationalization Everything may be encoded in UTF 8. Text may be displayed without automatic conversion.

To display user settings and activity wall data a templating approach may be used. The templating framework contains three parts Template consisting of HTML CSS JS SP specific configuration consisting of XML JSON User specific data consisting of XML JSON.

Template A template is constructed using HTML CSS JS and contains variables that may be filled in either by the SP specific configuration or the user specific data. The fonts and placement of the data is controlled by the template. Here is an example template .

In this template some text is built into the template and is shown above. For the remaining text strings and input boxes variables are specified which can be filled. Each variable denoted as a key may be unique within the template. Validation rules for each input box may also be specified here.

The configuration data may be specified at the V.me service provider user level or activity item level based on settings attributes.

Each service provider that chooses to use the template above may specify a configuration file that can fill in service provider specific strings. In the above template example all the variables on the left are static strings that should be specified in this configuration file the variables on the right are user specific settings data . This is a partial example configuration in XML for three of the variables in the template 

The spi id attribute indicates it is a service provider implementation specific configuration. In this example for English there is a trivial change between the two countries in that the US is present for the US and CAN is present for Canada. Additionally for Canadian French users the text strings have been translated to French.

User specific Data This is a partial example configuration in XML for three of the variables in the template 

The service provider cid indicates it is user specific. The refID attribute for the setting elements above associate the alert with the contact. For example the following 

specifies that for the alert with the key TransactionContacts relates to Transaction alert in the template provided above reference ID 1 and 2 relates to email with address john.smith yahoo.com and sms for phone number 6505551212 have been selected. The variableSetting specifies any variables necessary for an alert. For example in the above XML alert with key TOamt associated with Threshold Over Amount in the template above represents the minimum value for the alert trigger.

An offer or an alert is an example of an activity item. It follows the same template model but the configuration data for this is denoted with a activitiy id attribute. Since all activity is also user specific the service provider cid attribute may also be present. If the action attribute is missing POST is assumed as the default.

For example is an offer activity template only a few fields are specified here for simplicity. Since the service provider logo is identical for all offers from the same service provider this information may be specified once and uploaded into Wallet by the service provider during onboarding hence only a spi id is specified 

In addition the offer components that are per user and per activity item may be specified separately specifically with activity id and service provider cid attributes. Therefore here is a partial example configuration in XML for these variables in the template above 

In some embodiments various service providers may leverage the HAP to provide a variety of services. For example an issuer connected to the wallet may provision card accounts to a wallet dynamically update account status card art and or the like provide real time balance data publish targeted offers to customers publish and update issuer apps or gadgets to the customer s wallet and or the like. A merchant connected to the wallet may allow customers to quickly link existing merchant accounts to a wallet account allow customers to quickly create a merchant account by drawing information with customer s permission from the customer s wallet account allow merchants to set up open authorization recurring billing subscription billing relationships with the customer keep records up to date and access current information on file for their connected customers show customers an inline display of current accounts e.g. including card art for accounts liked to their merchant relationship allow returning customer to login to their merchant account with through wallet login widget and or the like. A loyalty provider connected to a wallet may add a loyalty account to a wallet provide real time points currency balance publish targeted rewards offers access a loyalty account through a wallet login and or the like. A transit authority connected to a wallet may load or associate transit passes with the wallet allow returning customer to login to their transit account or purse through the wallet login widget allow redemption of transit passes or tickets from the wallet and or the like.

Typically users which may be people and or other systems may engage information technology systems e.g. computers to facilitate information processing. In turn computers employ processors to process information such processors may be referred to as central processing units CPU . One form of processor is referred to as a microprocessor. CPUs use communicative circuits to pass binary encoded signals acting as instructions to enable various operations. These instructions may be operational and or data instructions containing and or referencing other instructions and data in various processor accessible and operable areas of memory e.g. registers cache memory random access memory etc. . Such communicative instructions may be stored and or transmitted in batches e.g. batches of instructions as programs and or data components to facilitate desired operations. These stored instruction codes e.g. programs may engage the CPU circuit components and other motherboard and or system components to perform desired operations. One type of program is a computer operating system which may be executed by CPU on a computer the operating system enables and facilitates users to access and operate computer information technology and resources. Some resources that may be employed in information technology systems include input and output mechanisms through which data may pass into and out of a computer memory storage into which data may be saved and processors by which information may be processed. These information technology systems may be used to collect data for later retrieval analysis and manipulation which may be facilitated through a database program. These information technology systems provide interfaces that allow users to access and operate various system components.

In one embodiment the HAP controller may be connected to and or communicate with entities such as but not limited to one or more users from user input devices peripheral devices an optional cryptographic processor device and or a communications network .

Networks are commonly thought to comprise the interconnection and interoperation of clients servers and intermediary nodes in a graph topology. It should be noted that the term server as used throughout this application refers generally to a computer other device program or combination thereof that processes and responds to the requests of remote users across a communications network. Servers serve their information to requesting clients. The term client as used herein refers generally to a computer program other device user and or combination thereof that is capable of processing and making requests and obtaining and processing any responses from servers across a communications network. A computer other device program or combination thereof that facilitates processes information and requests and or furthers the passage of information from a source user to a destination user is commonly referred to as a node. Networks are generally thought to facilitate the transfer of information from source points to destinations. A node specifically tasked with furthering the passage of information from a source to a destination is commonly called a router. There are many forms of networks such as Local Area Networks LANs Pico networks Wide Area Networks WANs Wireless Networks WLANs etc. For example the Internet is generally accepted as being an interconnection of a multitude of networks whereby remote clients and servers may access and interoperate with one another.

The HAP controller may be based on computer systems that may comprise but are not limited to components such as a computer systemization connected to memory .

A computer systemization may comprise a clock central processing unit CPU s and or processor s these terms are used interchangeable throughout the disclosure unless noted to the contrary a memory e.g. a read only memory ROM a random access memory RAM etc. and or an interface bus and most frequently although not necessarily are all interconnected and or communicating through a system bus on one or more mother board s having conductive and or otherwise transportive circuit pathways through which instructions e.g. binary encoded signals may travel to effectuate communications operations storage etc. The computer systemization may be connected to a power source e.g. optionally the power source may be internal. Optionally a cryptographic processor and or transceivers e.g. ICs may be connected to the system bus. In another embodiment the cryptographic processor and or transceivers may be connected as either internal and or external peripheral devices via the interface bus I O. In turn the transceivers may be connected to antenna s thereby effectuating wireless transmission and reception of various communication and or sensor protocols for example the antenna s may connect to a Texas Instruments WiLink WL1283 transceiver chip e.g. providing 802.11n Bluetooth 3.0 FM global positioning system GPS thereby allowing HAP controller to determine its location Broadcom BCM4329FKUBG transceiver chip e.g. providing 802.11n Bluetooth 2.1 EDR FM etc. a Broadcom BCM4750IUB8 receiver chip e.g. GPS an Infineon Technologies X Gold 618 PMB9800 e.g. providing 2G 3G HSDPA HSUPA communications and or the like. The system clock typically has a crystal oscillator and generates a base signal through the computer systemization s circuit pathways. The clock is typically coupled to the system bus and various clock multipliers that will increase or decrease the base operating frequency for other components interconnected in the computer systemization. The clock and various components in a computer systemization drive signals embodying information throughout the system. Such transmission and reception of instructions embodying information throughout a computer systemization may be commonly referred to as communications. These communicative instructions may further be transmitted received and the cause of return and or reply communications beyond the instant computer systemization to communications networks input devices other computer systemizations peripheral devices and or the like. It should be understood that in alternative embodiments any of the above components may be connected directly to one another connected to the CPU and or organized in numerous variations employed as exemplified by various computer systems.

The CPU comprises at least one high speed data processor adequate to execute program components for executing user and or system generated requests. Often the processors themselves will incorporate various specialized processing units such as but not limited to integrated system bus controllers memory management control units floating point units and even specialized processing sub units like graphics processing units digital signal processing units and or the like. Additionally processors may include internal fast access addressable memory and be capable of mapping and addressing memory beyond the processor itself internal memory may include but is not limited to fast registers various levels of cache memory e.g. level 1 2 3 etc. RAM etc. The processor may access this memory through the use of a memory address space that is accessible via instruction address which the processor can construct and decode allowing it to access a circuit path to a specific memory address space having a memory state. The CPU may be a microprocessor such as AMD s Athlon Duron and or Opteron ARM s application embedded and secure processors IBM and or Motorola s DragonBall and PowerPC IBM s and Sony s Cell processor Intel s Celeron Core 2 Duo Itanium Pentium Xeon and or XScale and or the like processor s . The CPU interacts with memory through instruction passing through conductive and or transportive conduits e.g. printed electronic and or optic circuits to execute stored instructions i.e. program code according to conventional data processing techniques. Such instruction passing facilitates communication within the HAP controller and beyond through various interfaces. Should processing requirements dictate a greater amount speed and or capacity distributed processors e.g. Distributed HAP mainframe multi core parallel and or super computer architectures may similarly be employed. Alternatively should deployment requirements dictate greater portability smaller Personal Digital Assistants PDAs may be employed.

Depending on the particular implementation features of the HAP may be achieved by implementing a microcontroller such as CAST s R8051XC2 microcontroller Intel s MCS 51 i.e. 8051 microcontroller and or the like. Also to implement certain features of the HAP some feature implementations may rely on embedded components such as Application Specific Integrated Circuit ASIC Digital Signal Processing DSP Field Programmable Gate Array FPGA and or the like embedded technology. For example any of the HAP component collection distributed or otherwise and or features may be implemented via the microprocessor and or via embedded components e.g. via ASIC coprocessor DSP FPGA and or the like. Alternately some implementations of the HAP may be implemented with embedded components that are configured and used to achieve a variety of features or signal processing.

Depending on the particular implementation the embedded components may include software solutions hardware solutions and or some combination of both hardware software solutions. For example HAP features discussed herein may be achieved through implementing FPGAs which are a semiconductor devices containing programmable logic components called logic blocks and programmable interconnects such as the high performance FPGA Virtex series and or the low cost Spartan series manufactured by Xilinx. Logic blocks and interconnects can be programmed by the customer or designer after the FPGA is manufactured to implement any of the HAP features. A hierarchy of programmable interconnects allow logic blocks to be interconnected as needed by the HAP system designer administrator somewhat like a one chip programmable breadboard. An FPGA s logic blocks can be a programmed to perform the operation of basic logic gates such as AND and XOR or more complex combinational operators such as decoders or mathematical operations. In most FPGAs the logic blocks also include memory elements which may be circuit flip flops or more complete blocks of memory. In some circumstances the HAP may be developed on regular FPGAs and then migrated into a fixed version that more resembles ASIC implementations. Alternate or coordinating implementations may migrate HAP controller features to a final ASIC instead of or in addition to FPGAs. Depending on the implementation all of the aforementioned embedded components and microprocessors may be considered the CPU and or processor for the HAP.

The power source may be of any standard form for powering small electronic circuit board devices such as the following power cells alkaline lithium hydride lithium ion lithium polymer nickel cadmium solar cells and or the like. Other types of AC or DC power sources may be used as well. In the case of solar cells in one embodiment the case provides an aperture through which the solar cell may capture photonic energy. The power cell is connected to at least one of the interconnected subsequent components of the HAP thereby providing an electric current to all subsequent components. In one example the power source is connected to the system bus component . In an alternative embodiment an outside power source is provided through a connection across the I O interface. For example a USB and or IEEE 1394 connection carries both data and power across the connection and is therefore a suitable source of power.

Interface bus ses may accept connect and or communicate to a number of interface adapters conventionally although not necessarily in the form of adapter cards such as but not limited to input output interfaces I O storage interfaces network interfaces and or the like. Optionally cryptographic processor interfaces similarly may be connected to the interface bus. The interface bus provides for the communications of interface adapters with one another as well as with other components of the computer systemization. Interface adapters are adapted for a compatible interface bus. Interface adapters conventionally connect to the interface bus via a slot architecture. Conventional slot architectures may be employed such as but not limited to Accelerated Graphics Port AGP Card Bus Extended Industry Standard Architecture E ISA Micro Channel Architecture MCA NuBus Peripheral Component Interconnect Extended PCI X PCI Express Personal Computer Memory Card International Association PCMCIA and or the like.

Storage interfaces may accept communicate and or connect to a number of storage devices such as but not limited to storage devices removable disc devices and or the like. Storage interfaces may employ connection protocols such as but not limited to Ultra Serial Advanced Technology Attachment Packet Interface Ultra Serial ATA PI Enhanced Integrated Drive Electronics E IDE Institute of Electrical and Electronics Engineers IEEE 1394 fiber channel Small Computer Systems Interface SCSI Universal Serial Bus USB and or the like.

Network interfaces may accept communicate and or connect to a communications network . Through a communications network the HAP controller is accessible through remote clients e.g. computers with web browsers by users . Network interfaces may employ connection protocols such as but not limited to direct connect Ethernet thick thin twisted pair 10 100 1000 Base T and or the like Token Ring wireless connection such as IEEE 802.11a x and or the like. Should processing requirements dictate a greater amount speed and or capacity distributed network controllers e.g. Distributed HAP architectures may similarly be employed to pool load balance and or otherwise increase the communicative bandwidth required by the HAP controller. A communications network may be any one and or the combination of the following a direct interconnection the Internet a Local Area Network LAN a Metropolitan Area Network MAN an Operating Missions as Nodes on the Internet OMNI a secured custom connection a Wide Area Network WAN a wireless network e.g. employing protocols such as but not limited to a Wireless Application Protocol WAP I mode and or the like and or the like. A network interface may be regarded as a specialized form of an input output interface. Further multiple network interfaces may be used to engage with various communications network types . For example multiple network interfaces may be employed to allow for the communication over broadcast multicast and or unicast networks.

Input Output interfaces I O may accept communicate and or connect to user input devices peripheral devices cryptographic processor devices and or the like. I O may employ connection protocols such as but not limited to audio analog digital monaural RCA stereo and or the like data Apple Desktop Bus ADB IEEE 1394a b serial universal serial bus USB infrared joystick keyboard midi optical PC AT PS 2 parallel radio video interface Apple Desktop Connector ADC BNC coaxial component composite digital Digital Visual Interface DVI high definition multimedia interface HDMI RCA RF antennae S Video VGA and or the like wireless transceivers 802.11a b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA high speed downlink packet access HSDPA global system for mobile communications GSM long term evolution LTE WiMax etc. and or the like. One typical output device may include a video display which typically comprises a Cathode Ray Tube CRT or Liquid Crystal Display LCD based monitor with an interface e.g. DVI circuitry and cable that accepts signals from a video interface may be used. The video interface composites information generated by a computer systemization and generates video signals based on the composited information in a video memory frame. Another output device is a television set which accepts signals from a video interface. Typically the video interface provides the composited video information through a video connection interface that accepts a video display interface e.g. an RCA composite video connector accepting an RCA composite video cable a DVI connector accepting a DVI display cable etc. .

User input devices often are a type of peripheral device see below and may include card readers dongles finger print readers gloves graphics tablets joysticks keyboards microphones mouse mice remote controls retina readers touch screens e.g. capacitive resistive etc. trackballs trackpads sensors e.g. accelerometers ambient light GPS gyroscopes proximity etc. styluses and or the like.

Peripheral devices may be connected and or communicate to I O and or other facilities of the like such as network interfaces storage interfaces directly to the interface bus system bus the CPU and or the like. Peripheral devices may be external internal and or part of the HAP controller. Peripheral devices may include antenna audio devices e.g. line in line out microphone input speakers etc. cameras e.g. still video webcam etc. dongles e.g. for copy protection ensuring secure transactions with a digital signature and or the like external processors for added capabilities e.g. crypto devices force feedback devices e.g. vibrating motors network interfaces printers scanners storage devices transceivers e.g. cellular GPS etc. video devices e.g. goggles monitors etc. video sources visors and or the like. Peripheral devices often include types of input devices e.g. cameras .

It should be noted that although user input devices and peripheral devices may be employed the HAP controller may be embodied as an embedded dedicated and or monitor less i.e. headless device wherein access would be provided over a network interface connection.

Cryptographic units such as but not limited to microcontrollers processors interfaces and or devices may be attached and or communicate with the HAP controller. A MC68HC16 microcontroller manufactured by Motorola Inc. may be used for and or within cryptographic units. The MC68HC16 microcontroller utilizes a 16 bit multiply and accumulate instruction in the 16 MHz configuration and requires less than one second to perform a 512 bit RSA private key operation. Cryptographic units support the authentication of communications from interacting agents as well as allowing for anonymous transactions. Cryptographic units may also be configured as part of the CPU. Equivalent microcontrollers and or processors may also be used. Other commercially available specialized cryptographic processors include Broadcom s CryptoNetX and other Security Processors nCipher s nShield SafeNet s Luna PCI e.g. 7100 series Semaphore Communications 40 MHz Roadrunner 184 Sun s Cryptographic Accelerators e.g. Accelerator 6000 PCIe Board Accelerator 500 Daughtercard Via Nano Processor e.g. L2100 L2200 U2400 line which is capable of performing 500 MB s of cryptographic instructions VLSI Technology s 33 MHz 6868 and or the like.

Generally any mechanization and or embodiment allowing a processor to affect the storage and or retrieval of information is regarded as memory . However memory is a fungible technology and resource thus any number of memory embodiments may be employed in lieu of or in concert with one another. It is to be understood that the HAP controller and or a computer systemization may employ various forms of memory . For example a computer systemization may be configured wherein the operation of on chip CPU memory e.g. registers RAM ROM and any other storage devices are provided by a paper punch tape or paper punch card mechanism however such an embodiment would result in an extremely slow rate of operation. In a typical configuration memory will include ROM RAM and a storage device . A storage device may be any conventional computer system storage. Storage devices may include a drum a fixed and or removable magnetic disk drive a magneto optical drive an optical drive i.e. Blueray CD ROM RAM Recordable R ReWritable RW DVD R RW HD DVD R RW etc. an array of devices e.g. Redundant Array of Independent Disks RAID solid state memory devices USB memory solid state drives SSD etc. other processor readable storage mediums and or other devices of the like. Thus a computer systemization generally requires and makes use of memory.

The memory may contain a collection of program and or database components and or data such as but not limited to operating system component s operating system information server component s information server user interface component s user interface Web browser component s Web browser database s mail server component s mail client component s cryptographic server component s cryptographic server the HAP component s account creation and management ACM component Prefill component Wallet Enrollment Component multi directional wallet connector MDWC component Mobile Wallet Overlay MWO component Wallet Alert Interactions WAI component Wallet View Payment WVP component Wallet User Subscription WUS component Wallet Alert Settings WAS component Wallet Subscription Alert WSA component Wallet Saves Alert Setting WSAS component Wallet Get Alert WGA component Wallet Client Saves Alert WCSA component VAS Life Cycle VASLC component VAS Onboarding VASO component VAS Subscription VASS component VAS User Settings VASUS component VAS Activity Notifications VASAN component WVC component DVI component and or the like i.e. collectively a component collection . These components may be stored and accessed from the storage devices and or from storage devices accessible through an interface bus. Although non conventional program components such as those in the component collection typically are stored in a local storage device they may also be loaded and or stored in memory such as peripheral devices RAM remote storage facilities through a communications network ROM various forms of memory and or the like.

The operating system component is an executable program component facilitating the operation of the HAP controller. Typically the operating system facilitates access of I O network interfaces peripheral devices storage devices and or the like. The operating system may be a highly fault tolerant scalable and secure system such as Apple Macintosh OS X Server AT T Plan 9 Be OS Unix and Unix like system distributions such as AT T s UNIX Berkley Software Distribution BSD variations such as FreeBSD NetBSD OpenBSD and or the like Linux distributions such as Red Hat Ubuntu and or the like and or the like operating systems. However more limited and or less secure operating systems also may be employed such as Apple Macintosh OS IBM OS 2 Microsoft DOS Microsoft Windows 2000 2003 3.1 95 98 CE Millenium NT Vista XP Win7 Server Palm OS and or the like. An operating system may communicate to and or with other components in a component collection including itself and or the like. Most frequently the operating system communicates with other program components user interfaces and or the like. For example the operating system may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. The operating system once executed by the CPU may enable the interaction with communications networks data I O peripheral devices program components memory user input devices and or the like. The operating system may provide communications protocols that allow the HAP controller to communicate with other entities through a communications network . Various communication protocols may be used by the HAP controller as a subcarrier transport mechanism for interaction such as but not limited to multicast TCP IP UDP unicast and or the like.

An information server component is a stored program component that is executed by a CPU. The information server may be a conventional Internet information server such as but not limited to Apache Software Foundation s Apache Microsoft s Internet Information Server and or the like. The information server may allow for the execution of program components through facilities such as Active Server Page ASP ActiveX ANSI Objective C C and or .NET Common Gateway Interface CGI scripts dynamic D hypertext markup language HTML FLASH Java JavaScript Practical Extraction Report Language PERL Hypertext Pre Processor PHP pipes Python wireless application protocol WAP WebObjects and or the like. The information server may support secure communications protocols such as but not limited to File Transfer Protocol FTP HyperText Transfer Protocol HTTP Secure Hypertext Transfer Protocol HTTPS Secure Socket Layer SSL messaging protocols e.g. America Online AOL Instant Messenger AIM Application Exchange APEX ICQ Internet Relay Chat IRC Microsoft Network MSN Messenger Service Presence and Instant Messaging Protocol PRIM Internet Engineering Task Force s IETF s Session Initiation Protocol SIP SIP for Instant Messaging and Presence Leveraging a Extensions SIMPLE open XML based Extensible Messaging and Presence Protocol XMPP i.e. Jabber or Open Mobile Alliance s OMA s Instant Messaging and Presence Service IMPS Yahoo Instant Messenger Service and or the like. The information server provides results in the form of Web pages to Web browsers and allows for the manipulated generation of the Web pages through interaction with other program components. After a Domain Name System DNS resolution portion of an HTTP request is resolved to a particular information server the information server resolves requests for information at specified locations on the HAP controller based on the remainder of the HTTP request. For example a request such as http 123.124.125.126 myInformation.html might have the IP portion of the request 123.124.125.126 resolved by a DNS server to an information server at that IP address that information server might in turn further parse the http request for the myInformation.html portion of the request and resolve it to a location in memory containing the information myInformation.html. Additionally other information serving protocols may be employed across various ports e.g. FTP communications across port and or the like. An information server may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the information server communicates with the HAP database operating systems other program components user interfaces Web browsers and or the like.

Access to the HAP database may be achieved through a number of database bridge mechanisms such as through scripting languages as enumerated below e.g. CGI and through inter application communication channels as enumerated below e.g. CORBA WebObjects etc. . Any data requests through a Web browser are parsed through the bridge mechanism into appropriate grammars as required by the HAP. In one embodiment the information server would provide a Web form accessible by a Web browser. Entries made into supplied fields in the Web form are tagged as having been entered into the particular fields and parsed as such. The entered terms are then passed along with the field tags which act to instruct the parser to generate queries directed to appropriate tables and or fields. In one embodiment the parser may generate queries in standard SQL by instantiating a search string with the proper join select commands based on the tagged text entries wherein the resulting command is provided over the bridge mechanism to the HAP as a query. Upon generating query results from the query the results are passed over the bridge mechanism and may be parsed for formatting and generation of a new results Web page by the bridge mechanism. Such a new results Web page is then provided to the information server which may supply it to the requesting Web browser.

Also an information server may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

Computer interfaces in some respects are similar to automobile operation interfaces. Automobile operation interface elements such as steering wheels gearshifts and speedometers facilitate the access operation and display of automobile resources and status. Computer interaction interface elements such as check boxes cursors menus scrollers and windows collectively and commonly referred to as widgets similarly facilitate the access capabilities operation and display of data and computer hardware and operating system resources and status. Operation interfaces are commonly called user interfaces. Graphical user interfaces GUIs such as the Apple Macintosh Operating System s Aqua IBM s OS 2 Microsoft s Windows 2000 2003 3.1 95 98 CE Millenium NT XP Vista 7 i.e. Aero Unix s X Windows e.g. which may include additional Unix graphic interface libraries and layers such as K Desktop Environment KDE mythTV and GNU Network Object Model Environment GNOME web interface libraries e.g. ActiveX AJAX D HTML FLASH Java JavaScript etc. interface libraries such as but not limited to Dojo jQuery UI MooTools Prototype script.aculo.us SWFObject Yahoo User Interface any of which may be used and provide a baseline and means of accessing and displaying information graphically to users.

A user interface component is a stored program component that is executed by a CPU. The user interface may be a conventional graphic user interface as provided by with and or atop operating systems and or operating environments such as already discussed. The user interface may allow for the display execution interaction manipulation and or operation of program components and or system facilities through textual and or graphical facilities. The user interface provides a facility through which users may affect interact and or operate a computer system. A user interface may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the user interface communicates with operating systems other program components and or the like. The user interface may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

A Web browser component is a stored program component that is executed by a CPU. The Web browser may be a conventional hypertext viewing application such as Microsoft Internet Explorer or Netscape Navigator. Secure Web browsing may be supplied with 128 bit or greater encryption by way of HTTPS SSL and or the like. Web browsers allowing for the execution of program components through facilities such as ActiveX AJAX D HTML FLASH Java JavaScript web browser plug in APIs e.g. Firefox Safari Plug in and or the like APIs and or the like. Web browsers and like information access tools may be integrated into PDAs cellular telephones and or other mobile devices. A Web browser may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the Web browser communicates with information servers operating systems integrated program components e.g. plug ins and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses. Also in place of a Web browser and information server a combined application may be developed to perform similar operations of both. The combined application would similarly affect the obtaining and the provision of information to users user agents and or the like from the HAP enabled nodes. The combined application may be nugatory on systems employing standard Web browsers.

A mail server component is a stored program component that is executed by a CPU . The mail server may be a conventional Internet mail server such as but not limited to sendmail Microsoft Exchange and or the like. The mail server may allow for the execution of program components through facilities such as ASP ActiveX ANSI Objective C C and or .NET CGI scripts Java JavaScript PERL PHP pipes Python WebObjects and or the like. The mail server may support communications protocols such as but not limited to Internet message access protocol IMAP Messaging Application Programming Interface MAPI Microsoft Exchange post office protocol POP3 simple mail transfer protocol SMTP and or the like. The mail server can route forward and process incoming and outgoing mail messages that have been sent relayed and or otherwise traversing through and or to the HAP.

Access to the HAP mail may be achieved through a number of APIs offered by the individual Web server components and or the operating system.

Also a mail server may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses.

A mail client component is a stored program component that is executed by a CPU . The mail client may be a conventional mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Microsoft Outlook Express Mozilla Thunderbird and or the like. Mail clients may support a number of transfer protocols such as IMAP Microsoft Exchange POP3 SMTP and or the like. A mail client may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the mail client communicates with mail servers operating systems other mail clients and or the like e.g. it may contain communicate generate obtain and or provide program component system user and or data communications requests information and or responses. Generally the mail client provides a facility to compose and transmit electronic mail messages.

A cryptographic server component is a stored program component that is executed by a CPU cryptographic processor cryptographic processor interface cryptographic processor device and or the like. Cryptographic processor interfaces will allow for expedition of encryption and or decryption requests by the cryptographic component however the cryptographic component alternatively may run on a conventional CPU. The cryptographic component allows for the encryption and or decryption of provided data. The cryptographic component allows for both symmetric and asymmetric e.g. Pretty Good Protection PGP encryption and or decryption. The cryptographic component may employ cryptographic techniques such as but not limited to digital certificates e.g. X.509 authentication framework digital signatures dual signatures enveloping password access protection public key management and or the like. The cryptographic component will facilitate numerous encryption and or decryption security protocols such as but not limited to checksum Data Encryption Standard DES Elliptical Curve Encryption ECC International Data Encryption Algorithm IDEA Message Digest 5 MD5 which is a one way hash operation passwords Rivest Cipher RC5 Rijndael RSA which is an Internet encryption and authentication system that uses an algorithm developed in 1977 by Ron Rivest Adi Shamir and Leonard Adleman Secure Hash Algorithm SHA Secure Socket Layer SSL Secure Hypertext Transfer Protocol HTTPS and or the like. Employing such encryption security protocols the HAP may encrypt all incoming and or outgoing communications and may serve as node within a virtual private network VPN with a wider communications network. The cryptographic component facilitates the process of security authorization whereby access to a resource is inhibited by a security protocol wherein the cryptographic component effects authorized access to the secured resource. In addition the cryptographic component may provide unique identifiers of content e.g. employing and MD5 hash to obtain a unique signature for an digital audio file. A cryptographic component may communicate to and or with other components in a component collection including itself and or facilities of the like. The cryptographic component supports encryption schemes allowing for the secure transmission of information across a communications network to enable the HAP component to engage in secure transactions if so desired. The cryptographic component facilitates the secure accessing of resources on the HAP and facilitates the access of secured resources on remote systems i.e. it may act as a client and or server of secured resources. Most frequently the cryptographic component communicates with information servers operating systems other program components and or the like. The cryptographic component may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The HAP database component may be embodied in a database and its stored data. The database is a stored program component which is executed by the CPU the stored program component portion configuring the CPU to process the stored data. The database may be a conventional fault tolerant relational scalable secure database such as Oracle or Sybase. Relational databases are an extension of a flat file. Relational databases consist of a series of related tables. The tables are interconnected via a key field. Use of the key field allows the combination of the tables by indexing against the key field i.e. the key fields act as dimensional pivot points for combining information from various tables. Relationships generally identify links maintained between tables by matching primary keys. Primary keys represent fields that uniquely identify the rows of a table in a relational database. More precisely they uniquely identify rows of a table on the one side of a one to many relationship.

Alternatively the HAP database may be implemented using various standard data structures such as an array hash linked list struct structured text file e.g. XML table and or the like. Such data structures may be stored in memory and or in structured files. In another alternative an object oriented database may be used such as Frontier ObjectStore Poet Zope and or the like. Object databases can include a number of object collections that are grouped and or linked together by common attributes they may be related to other object collections by some common attributes. Object oriented databases perform similarly to relational databases with the exception that objects are not just pieces of data but may have other types of capabilities encapsulated within a given object. If the HAP database is implemented as a data structure the use of the HAP database may be integrated into another component such as the HAP component . Also the database may be implemented as a mix of data structures objects and relational structures. Databases may be consolidated and or distributed in countless variations through standard data processing techniques. Portions of databases e.g. tables may be exported and or imported and thus decentralized and or integrated.

In one embodiment the database component includes several tables . A user accounts table includes fields such as but not limited to a user ID merchant identifier name home address work address telephone number email merchant ID and or the like. The user table may support and or track multiple entity accounts on a HAP. A merchant service provider table includes fields such as but not limited to merchant ID user ID merchant name merchant location merchant address merchant category code merchant api key loyalty program ID and or the like. A customer profile table includes fields such as but not limited to customer ID user ID merchant ID payment card ID preferred payment type wallet id access privilege id preference setting address book shipping carriers loyalty programs social network transaction history browser cookies offers coupons alerts feeds alerts triggers other wallet accound id and or the like. An Access Privileges table includes fields such as but not limited to access privilege id axis id axis name role id role name entity id entity name context id context name action id action name info type id infotype name action template id wallet id customer ID transaction execution authorization status confirmation authorization status billing authorization status subscription payment authorization status and or the like. A payment card table includes fields such as but not limited to payment card id user id identifier brand expiration date spending limit billing address issuer name nick name loyalty program ID and or the like. A billing agreement table includes fields such as but not limited to customer id billing id billing date billingamount limit confirmation requirement authentication level billing authorization status and or the like. A redemption table includes fields such as but not limited to customer id loyalty program id coupon id redemption date redemption time redemption amount redemption type transaction id and or the like. A wallet table includes fields such as but not limited to wallet id user id prefill id billing address last used date last transaction id and or the like. A card templates table includes fields such as but not limited to card template id payment card id card type file card front location file card back location card front template location card back template location template type and or the like. A wallet accounts table includes fields such as but not limited to wallet account id wallet id account number issuer name issuer id issuer routing number access privilege id and or the like. An issuers table includes fields such as but not limited to issuer id payment card id user id issuer name issuer server url and or the like. An analytics table includes fields such as but not limited to customer id merchant id transaction volume transaction amount transaction type transaction id and or the like. An staging table includes fields such as but not limited to staging table id BID CID account number user id customer id merchant id issuer identifier and or the like. and or the like. A payments table includes fields such as but not limited to billing id billingdate billingamount payment card id authentication level and or the like. An prefills table includes fields such as but not limited to prefills id user id wallet id wallet account id permissions access rules prefill data and or the like. A transaction table includes fields such as but not limited to transaction id merchant id user id session id date time item model manufacturer price item id and or the like. A contracts table includes fields such as but not limited to contract id contract type merchant id user id contract expiration date total authorized charges monthly authorized charges and or the like. An Entities table includes fields such as but not limited to entity id entity category issuer id merchant id consumer id consuer bond marketing partner loyalty partner shipping carrier id social network id wallet provider id wallet id payment network id other 3rd party id and or the like. An Action template table includes fields such as but not limited to action tempalte id action id source id target id requestor id context id access privilege id role id context id action id info type id and or the like. A web views table includes fields such as but not limited to web view id target device target environment web view parser last used last updated and or the like. A web view handlers table includes fields such as but not limited to web view handler id web view id native handler native language native method to call native params to pass button identifier element identifier tab identifier and or the like. A models table includes fields such as but not limited to model id user id issuer id model data model data permissions and or the like. A web view apps table includes fields such as but not limited to web view app id app language app target device universal config native app id and or the like. A native apps table includes fields such as but not limited to native app id native language native target device universal config web view app id and or the like.

In one embodiment the HAP database may interact with other database systems. For example employing a distributed database system queries and data access by search HAP component may treat the combination of the HAP database an integrated data security layer database as a single database entity.

In one embodiment user programs may contain various user interface primitives which may serve to update the HAP. Also various accounts may require custom database tables depending upon the environments and the types of clients the HAP may need to serve. It should be noted that any unique fields may be designated as a key field throughout. In an alternative embodiment these tables have been decentralized into their own databases and their respective database controllers i.e. individual database controllers for each of the above tables . Employing standard data processing techniques one may further distribute the databases over several computer systemizations and or storage devices. Similarly configurations of the decentralized database controllers may be varied by consolidating and or distributing the various database components . The HAP may be configured to keep track of various settings inputs and parameters via database controllers.

The HAP database may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the HAP database communicates with the HAP component other program components and or the like. The database may contain retain and provide information regarding other nodes and data.

The HAP component is a stored program component that is executed by a CPU. In one embodiment the HAP component incorporates any and or all combinations of the aspects of the HAP that was discussed in the previous figures. As such the HAP affects accessing obtaining and the provision of information services transactions and or the like across various communications networks. The features and embodiments of the HAP discussed herein increase network efficiency by reducing data transfer requirements the use of more efficient data structures and mechanisms for their transfer and storage. As a consequence more data may be transferred in less time and latencies with regard to transactions are also reduced. In many cases such reduction in storage transfer time bandwidth requirements latencies etc. will reduce the capacity and structural infrastructure requirements to support the HAP s features and facilities and in many cases reduce the costs energy consumption requirements and extend the life of HAP s underlying infrastructure this has the added benefit of making the HAP more reliable. Similarly many of the features and mechanisms are designed to be easier for users to use and access thereby broadening the audience that may enjoy employ and exploit the feature sets of the HAP such ease of use also helps to increase the reliability of the HAP. In addition the feature sets include heightened security as noted via the Cryptographic components and throughout making access to the features and data more reliable and secure.

The HAP component may transform hybrid application user inputs and or the like and use the HAP. In one embodiment the HAP component takes inputs e.g. launch DataApp input web view button input web view application request model population request web view source code request and or the like etc. and transforms the inputs via various components e.g. account creation and management ACM component Prefill component Wallet Enrollment Component multi directional wallet connector MDWC component Mobile Wallet Overlay MWO component Wallet Alert Interactions WAI component Wallet View Payment WVP component Wallet User Subscription WUS component Wallet Alert Settings WAS component Wallet Subscription Alert WSA component Wallet Saves Alert Setting WSAS component Wallet Get Alert WGA component Wallet Client Saves Alert WCSA component VAS Life Cycle VASLC component VAS Onboarding VASO component VAS Subscription VASS component VAS User Settings VASUS component VAS Activity Notifications VASAN component WVC component DVI component and or the like into outputs e.g. web view application response model population response web view source code response and or the like .

The HAP component enabling access of information between nodes may be developed by employing standard development tools and languages such as but not limited to Apache components Assembly ActiveX binary executables ANSI Objective C C and or .NET database adapters CGI scripts Java JavaScript mapping tools procedural and object oriented development tools PERL PHP Python shell scripts SQL commands web application server extensions web development environments and libraries e.g. Microsoft s ActiveX Adobe AIR FLEX FLASH AJAX D HTML Dojo Java JavaScript jQuery UI MooTools Prototype script.aculo.us Simple Object Access Protocol SOAP SWFObject Yahoo User Interface and or the like WebObjects and or the like. In one embodiment the HAP server employs a cryptographic server to encrypt and decrypt communications. The HAP component may communicate to and or with other components in a component collection including itself and or facilities of the like. Most frequently the HAP component communicates with the HAP database operating systems other program components and or the like. The HAP may contain communicate generate obtain and or provide program component system user and or data communications requests and or responses.

The structure and or operation of any of the HAP node controller components may be combined consolidated and or distributed in any number of ways to facilitate development and or deployment. Similarly the component collection may be combined in any number of ways to facilitate deployment and or development. To accomplish this one may integrate the components into a common code base or in a facility that can dynamically load the components on demand in an integrated fashion.

The component collection may be consolidated and or distributed in countless variations through standard data processing and or development techniques. Multiple instances of any one of the program components in the program component collection may be instantiated on a single node and or across numerous nodes to improve performance through load balancing and or data processing techniques. Furthermore single instances may also be distributed across multiple controllers and or storage devices e.g. databases. All program component instances and controllers working in concert may do so through standard data processing communication techniques.

The configuration of the HAP controller will depend on the context of system deployment. Factors such as but not limited to the budget capacity location and or use of the underlying hardware resources may affect deployment requirements and configuration. Regardless of if the configuration results in more consolidated and or integrated program components results in a more distributed series of program components and or results in some combination between a consolidated and distributed configuration data may be communicated obtained and or provided. Instances of components consolidated into a common code base from the program component collection may communicate obtain and or provide data. This may be accomplished through intra application data processing communication techniques such as but not limited to data referencing e.g. pointers internal messaging object instance variable communication shared memory space variable passing and or the like.

If component collection components are discrete separate and or external to one another then communicating obtaining and or providing data with and or to other component components may be accomplished through inter application data processing communication techniques such as but not limited to Application Program Interfaces API information passage distributed Component Object Model D COM Distributed Object Linking and Embedding D OLE and or the like Common Object Request Broker Architecture CORBA Jini local and remote application program interfaces JavaScript Object Notation JSON Remote Method Invocation RMI SOAP process pipes shared files and or the like. Messages sent between discrete component components for inter application communication or within memory spaces of a singular component for intra application communication may be facilitated through the creation and parsing of a grammar. A grammar may be developed by using development tools such as lex yacc XML and or the like which allow for grammar generation and parsing capabilities which in turn may form the basis of communication messages within and between components.

where Value1 is discerned as being a parameter because http is part of the grammar syntax and what follows is considered part of the post value. Similarly with such a grammar a variable Value1 may be inserted into an http post command and then sent. The grammar syntax itself may be presented as structured data that is interpreted and or otherwise used to generate the parsing mechanism e.g. a syntax description text file as processed by lex yacc etc. . Also once the parsing mechanism is generated and or instantiated it itself may process and or parse structured data such as but not limited to character e.g. tab delineated text HTML structured text streams XML and or the like structured data. In another embodiment inter application data processing protocols themselves may have integrated and or readily available parsers e.g. JSON SOAP and or like parsers that may be employed to parse e.g. communications data. Further the parsing grammar may be used beyond message parsing but may also be used to parse databases data collections data stores structured data and or the like. Again the desired configuration will depend upon the context environment and requirements of system deployment.

For example in some implementations the HAP controller may be executing a PHP script implementing a Secure Sockets Layer SSL socket server via the information sherver which listens to incoming communications on a server port to which a client may send data e.g. data encoded in JSON format. Upon identifying an incoming communication the PHP script may read the incoming message from the client device parse the received JSON encoded text data to extract information from the JSON encoded text data into PHP script variables and store the data e.g. client identifying information etc. and or extracted information in a relational database accessible using the Structured Query Language SQL . An exemplary listing written substantially in the form of PHP SQL commands to accept JSON encoded input data from a client device via a SSL connection parse the data to extract variables and store the data to a database is provided below 

Also the following resources may be used to provide example embodiments regarding SOAP parser implementation 

In order to address various issues and advance the art the entirety of this application for HAP including the Cover Page Title Headings Field Background Summary Brief Description of the Drawings Detailed Description Claims Abstract Figures Appendices and otherwise shows by way of illustration various embodiments in which the claimed innovations may be practiced. The advantages and features of the application are of a representative sample of embodiments only and are not exhaustive and or exclusive. They are presented only to assist in understanding and teach the claimed principles. It should be understood that they are not representative of all claimed innovations. As such certain aspects of the disclosure have not been discussed herein. That alternate embodiments may not have been presented for a specific portion of the innovations or that further undescribed alternate embodiments may be available for a portion is not to be considered a disclaimer of those alternate embodiments. It will be appreciated that many of those undescribed embodiments incorporate the same principles of the innovations and others are equivalent. Thus it is to be understood that other embodiments may be utilized and functional logical operational organizational structural and or topological modifications may be made without departing from the scope and or spirit of the disclosure. As such all examples and or embodiments are deemed to be non limiting throughout this disclosure. Also no inference should be drawn regarding those embodiments discussed herein relative to those not discussed herein other than it is as such for purposes of reducing space and repetition. For instance it is to be understood that the logical and or topological structure of any combination of any program components a component collection other components and or any present feature sets as described in the figures and or throughout are not limited to a fixed operating order and or arrangement but rather any disclosed order is exemplary and all equivalents regardless of order are contemplated by the disclosure. Furthermore it is to be understood that such features are not limited to serial execution but rather any number of threads processes services servers and or the like that may execute asynchronously concurrently in parallel simultaneously synchronously and or the like are contemplated by the disclosure. As such some of these features may be mutually contradictory in that they cannot be simultaneously present in a single embodiment. Similarly some features are applicable to one aspect of the innovations and inapplicable to others. In addition the disclosure includes other innovations not presently claimed. Applicant reserves all rights in those presently unclaimed innovations including the right to claim such innovations file additional applications continuations continuations in part divisions and or the like thereof. As such it should be understood that advantages embodiments examples functional features logical operational organizational structural topological and or other aspects of the disclosure are not to be considered limitations on the disclosure as defined by the claims or limitations on equivalents to the claims. It is to be understood that depending on the particular needs and or characteristics of a HAP individual and or enterprise user database configuration and or relational model data type data transmission and or network framework syntax structure and or the like various embodiments of the HAP may be implemented that enable a great deal of flexibility and customization. For example aspects of the HAP may be adapted for restaurant dining online shopping brick and mortar shopping secured information processing and or the like. While various embodiments and discussions of the HAP have been directed to electronic purchase transactions however it is to be understood that the embodiments described herein may be readily configured and or customized for a wide variety of other applications and or implementations.

