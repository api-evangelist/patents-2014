---

title: Client computing system for and method of receiving cross-platform remote access to 3D graphics applications
abstract: A client computing system in a client-server computing environment includes a client display driver that receives a transmission from a server, decodes graphics commands from the transmission using a client application, executes the functions using a client 3D library stored in a memory of the client, and renders the resulting image data to a display. The client may transmit capability information to the server, allowing the resolution of differences between the graphics application programming interfaces (APIs) supported on the server and the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355429&OS=09355429&RS=09355429
owner: HOPTO INC.
number: 09355429
owner_city: Campbell
owner_country: US
publication_date: 20140421
---
The present application is a continuation and claims the priority benefit of U.S. patent application Ser. No. 13 341 086 filed Dec. 30 2011 the disclosure of which is incorporated herein by reference.

The present application is related to U.S. patent application Ser. No. 08 472 935 filed Jun. 6 1995 now U.S. Pat. No. 5 831 609 the disclosure of which is incorporated herein by reference.

The present disclosure relates generally to a client computing system in a client server computing environment and more particularly to a client computing system for and method of receiving cross platform remote access to 3D graphics applications.

In a client server computing system a computer application or program that is running on one computer i.e. the server may be accessible to another computer i.e. the client over a network such as over the Internet. The user interface running on the server is exposed and visible to the client. In this way the client has remote access to the server and the user of the client device can interact with the application that is running on the server.

The server application may be for example an application that processes two dimensional 2D and or three dimensional 3D graphics. In this example a 2D and or 3D graphics application may be used to render graphical objects on a computer display. Currently in a client server computing system the high level graphics representation e.g. Direct3D OpenGL is reduced to an image e.g. a bitmap image at the server. The image is then transmitted from the server to the client over the network. Once received at the client the image is rendered on the client display. Creating compressing and transmitting these image files may result in high CPU utilization i.e. computing load at the server especially when the application displays objects in motion and when there are a large number of remote users sharing the server. Further images are often large and therefore transmitting images to a large number of remote users consumes a large amount of network bandwidth.

The disclosure provides a client computing system in a client server computing environment that receives and executes graphic commands and methods of efficiently displaying graphic objects on the client computing system located remotely from a computer server that is running a 3D graphics application. The client computing system of the disclosure exhibits numerous advantages over existing systems. In various embodiments the client computing system of the disclosure and associated methods may enable a client user to receive 3D graphics application capabilities with faster speeds particularly when a large number of clients are operatively connected to the server or the client server computing environment has low network bandwidth. Further the client computing system of the disclosure may be configured to operate on a different platform than the server.

While client and display are illustrated as separate physical components e.g. illustrative of a common implementation of a desktop or a workstation computing system such as clients running natively on Windows Linux UNIX and Mac OS X operating system the capabilities of such separate components can also be integrated in a single device e.g. a mobile device or a tablet computer . For example the mobile device can be an iPad tablet computer on the iOS operating system Apple Inc. Cupertino Calif. or other mobile client on either the Android operating system Google Inc. Mountain View Calif. or the Windows CE operating system Microsoft Corp. Redmond Wash. . Thus as used herein the terms client or client computer should be understood to include any such implementations.

Server includes a server application a server 3D library and a virtual display driver that in accordance with the client server model of computing collectively function to enable server to provide various resources or services to client which may be located remotely from the server. In accordance with the present disclosure these resources or services pertain to computer graphics.

Client is a client computing system that includes a client application a client 3D library and a client display driver . Collectively these elements function to enable the client and the client user to consume computer graphics resources or services provided by server .

Server application represents an application executing i.e. running on server . The functionality of server application shall be visible to and accessible by client via network . For example server application may be a computer aided design CAD application such as AutoCAD Autodesk Inc. San Rafael Calif. USA or Cadence Virtuoso Cadence Design Systems San Jose Calif. a medical clinical workflow application such as Symbia.net Siemens AG Munich Germany an interactive mapping application such as Google Earth Google Inc. or a 3D game. The functionality of server application shall be visible to and accessible by client via network . For example the functionality of server application may be accessed from client using a process herein known as application publishing which is currently supported by products such as GraphOn GO Global Microsoft Remote Desktop Services and Citrix XenApp. Such application publishing may be performed in accordance with teachings of commonly owned U.S. Pat. No. 5 831 609 filed Jun. 6 1995 entitled Method and system for dynamic translation between different graphical user interface systems which is incorporated by reference as though fully set forth herein.

Client application represents an application installed on and executing on client that emulates a user interface of server application . For example the client application may run in a browser and be implemented in a scripting language such as JavaScript a multimedia platform such as Adobe Flash or as a browser add on e.g. ActiveX control for Internet Explorer . Additionally client application may run as a standalone application. Client application may receive various input commands from the user via an input device not shown in then transmit these commands to server and update the user interface of client application in response to computer graphics commands transmitted from server back to client over network .

Server 3D library and client 3D library provide a set of common interfaces or graphics functions to server and client respectively. These components are also referred to herein as a high level graphics language or a graphics application programming interface API . In one embodiment of the disclosure both server and client utilize a library such as OpenGL Khronos Group Beaverton Oreg. . This enables server and client to communicate at an interface or a graphics functions level even if server operates on a different computing platform from client . This is in contrast to conventional client server computing systems that have utilized operating system specific APIs to accomplish computer graphics rendering which should not be considered cross platform.

Virtual display driver is a software code module that enables commands or functions that are called in server 3D library to be marshaled i.e. encoded and transmitted to client over network . Marshaling or marshalling is the process of transforming the memory representation of such commands to a data format suitable for transmission via network . For example the display driver assigns an ID to each graphics function and converts function arguments from a platform specific byte order into a common byte order that all clients can read regardless of the native byte order of the client device. This encoding allows graphic objects and their motions to be represented much more efficiently than the conventional method of generating an image for each arrangement or view of the objects. Significantly less data must be compressed and transmitted by the server greatly reducing CPU usage on the server and network bandwidth usage.

Client display driver includes a software code module that receives marshaled data from server via client application and executes the 3D library functions using client 3D library . This enables client to handle intensive graphics rendering operations such as blending or shading while enabling server to share server application with a larger pool of clients. This also reduces the bandwidth requirements of network as pixel array image data e.g. in the form of Bitmap image files no longer needs to be transmitted from server to individual clients such as client as was the case in conventional client server computing systems.

By way of useful background illustrates a flow diagram of a conventional method of displaying graphic objects on a client in a client server computing system. The conventional method may include the following steps.

At a step a client component that is in direct network communication with a server receives and decodes a transmission from the server that includes an image or a series of images . For example the transmission may include bitmap image data. In comparison with the present disclosure the data transmitted to the client will be substantially larger. The client component then forwards the information to a client application.

At a step the client application calls or invokes a client 2D library with the image or series of images.

At a step the client display driver renders the pixel image array data as an image to the display e.g. monitor of the client computer.

At a step client connects to server via network by a suitable connection of either conventional or novel design. For example the connection may be established in accordance with a Transmission Control Protocol Internet Protocol TCP IP model as is known to one of skill.

At an optional step client exchanges capability information i.e. negotiate protocols with server . For example the capability information transmitted from client to server may include information about the particular APIs e.g. OpenGL windowing APIs supported by client display driver . The capability information may include the version or versions of client 3D library e.g. OpenGL 3.2 that are available on client . The capability information may also include any extensions available on client that can act as an adapter between the functionality of different versions of server 3D library and client 3D library . This information may be transmitted in any format that is supported by the client server system.

At a step the client component that is in direct network communication with server receives a transmission from a component of server e.g. virtual display driver . The client component then forwards the transmission to client application .

At a step client application decodes the graphics commands. This step may include for example reading e.g. parsing function names and function parameters from the server transmission into a format compatible with client 3D library . One of skill will recognize that specific details of decoding by client may depend on the details of encoding employed by server which could be received by client as part of step .

At a step client application optionally performs additional preprocessing and formatting of the function and its parameters for example additional platform specific or version specific formatting . If client has not yet initialized the 3D library e.g. Direct3D library OpenGL library etc. that supports the command it automatically loads and initializes the library. Client then calls or invokes client 3D library with the decoded function names and parameters that satisfy the request of client .

At a step client 3D library executes each of the graphic commands and calls client display driver with the resulting pixel image array data. The actual implementation of each graphic command that is executed on client e.g. define a surface with a given texture wrap surface around a sphere is specific to the client s computing platform. For example if the client is operating on a Windows platform the execution of the graphics commands is for example a Windows OpenGL implementation. Calls to client 3D library differs from conventional client server computing systems where the client is making calls to a 2D library only because the bitmap image or other form of image array data has already been generated on the server and supplied to the client by the server.

At a step client display driver renders an image to display . For example this step may include setting pixel image array data in a memory of the client display driver which defines the image displayed on the computer s monitor or other form of display.

At a step client transmits a request to server to publish an application to client via network . For example a request to draw a 3D cube can be made by client . Optionally the request can include information about relevant capabilities of client such as the version or versions of client 3D library supported on client .

At a step client receives a transmission including one or more graphics calls from server via network . The graphics call s relate to the client s original request made at . For example if the original request is to draw a 3D cube the graphics calls may relate to geometric operations and or rendering options such as blending or shading.

At a step client decodes the one or more graphics calls from the transmission. Then based on the received graphic calls client executes each of the graphics commands using calls to client 3D library . After execution of the graphics commands an image or a series of images representing motion of a graphic object or objects is output to display .

