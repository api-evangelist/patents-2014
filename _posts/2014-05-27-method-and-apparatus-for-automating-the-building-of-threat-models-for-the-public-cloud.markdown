---

title: Method and apparatus for automating the building of threat models for the public cloud
abstract: A method and system for automating threat model generation for an application includes identifying components of an application, receiving security information that identifies whether security measures were implemented within the application to secure the application against security threats, determining whether the security measures sufficiently address security risks associated with the security threats, and providing a threat model that includes a report that identifies components of the application that have been sufficiently (or insufficiently) secured from the security threats, according to one embodiment. In one embodiment, determining whether the security measures sufficiently address the security risks can include transmitting first queries, receiving responses to the first queries, and transmitting subsequent queries based at least in part on the responses to the first queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330263&OS=09330263&RS=09330263
owner: Intuit Inc.
number: 09330263
owner_city: Mountain View
owner_country: US
publication_date: 20140527
---
Software application developers use a variety of techniques to protect their applications from unauthorized use and malicious attacks. One such technique includes modeling or matching up the potential security threats with corresponding solutions for an application that is under development. Traditionally an application developer models security threats by manually listing the potential security threats and manually listing solutions to address each security threat for that particular application. In some cases an application developer will model security threats by himself herself while in other cases the application developer will assemble a team of software architecture or other subject matter experts to discuss potential security issues for application and to identify solutions for addressing the potential security threats. However manually modeling security threats may confine the protection to the extent of an application developer s working knowledge of security threats. Additionally modeling security threats can be a time consuming procedure that adds procedural burdens or distractions that are above and beyond the substantive need to develop the application itself.

What is needed is a method and system that enables automating threat model generation for application developers.

In accordance with one embodiment a method and system for automating threat model generation for an application includes identifying components of an application receiving security information that identifies whether security measures were implemented within the application to secure the application against security threats determining whether the security measures sufficiently address security risks associated with the security threats and providing a threat model that includes a report that identifies components of the application that have been sufficiently or insufficiently secured from the security threats. In one embodiment determining whether the security measures sufficiently address the security risks can include transmitting first queries receiving responses to the first queries and transmitting subsequent queries based at least in part on the responses to the first queries.

In one embodiment determining whether the measures of the security information sufficiently address security risks associated with the list of security threats further includes forwarding responses to queries to a subject matter expert or security expert to enable the subject matter expert or security expert to determine a sufficiency of the measures of the security information.

In one embodiment the method and system also includes providing a graphical user interface to receive input associated with the application and identifying the components of the application by receiving information regarding the components of the application through the graphical user interface.

In one embodiment determining whether the measures of the security information sufficiently address security risks associated with the list of security threats includes determining whether the security information conforms with requirements of a security policy for the asset that is managed by the service provider.

Common reference numerals are used throughout the FIGS. and the detailed description to indicate like elements. One skilled in the art will readily recognize that the above FIGS. are examples and that other architectures modes of operation orders of operation and elements functions can be provided and implemented without departing from the characteristics and features of the invention as set forth in the claims.

Embodiments will now be discussed with reference to the accompanying FIGS. which depict one or more exemplary embodiments. Embodiments may be implemented in many different forms and should not be construed as limited to the embodiments set forth herein shown in the FIGS. and or described below. Rather these exemplary embodiments are provided to allow a complete disclosure that conveys the principles of the invention as set forth in the claims to those of skill in the art.

The INTRODUCTORY SYSTEM HARDWARE ARCHITECTURE USER INTERFACE and PROCESS sections herein include systems and processes suitable for incorporating various embodiments of methods and systems for automating threat model generation for an application according to various embodiments.

Herein the term production environment includes the various components or assets used to deploy implement access and use a given application as that application is intended to be used. In various embodiments production environments include multiple assets that are combined communicatively coupled virtually and or physically connected and or associated with one another to provide the production environment implementing the application.

As specific illustrative examples the assets making up a given production environment can include but are not limited to one or more computing environments used to implement the application in the production environment such as a data center a cloud computing environment a dedicated hosting environment and or one or more other computing environments in which one or more assets used by the application in the production environment are implemented one or more computing systems or computing entities used to implement the application in the production environment one or more virtual assets used to implement the application in the production environment one or more supervisory or control systems such as hypervisors or other monitoring and management systems used to monitor and control assets and or components of the production environment one or more communications channels for sending and receiving data used to implement the application in the production environment one or more access control systems for limiting access to various components of the production environment such as firewalls and gateways one or more traffic and or routing systems used to direct control and or buffer data traffic to components of the production environment such as routers and switches one or more communications endpoint proxy systems used to buffer process and or direct data traffic such as load balancers or buffers one or more secure communication protocols and or endpoints used to encrypt decrypt data such as Secure Sockets Layer SSL protocols used to implement the application in the production environment one or more databases used to store data in the production environment one or more internal or external services used to implement the application in the production environment one or more backend systems such as backend servers or other hardware used to process data and implement the application in the production environment one or more software systems used to implement the application in the production environment and or any other assets components making up an actual production environment in which an application is deployed implemented accessed and run e.g. operated as discussed herein and or as known in the art at the time of filing and or as developed after the time of filing.

As used herein the terms computing system computing device and computing entity include but are not limited to a virtual asset a server computing system a workstation a desktop computing system a mobile computing system including but not limited to smart phones portable devices and or devices worn or carried by a user a database system or storage cluster a switching system a router any hardware system any communications system any form of proxy system a gateway system a firewall system a load balancing system or any device subsystem or mechanism that includes components that can execute all or part of any one of the processes and or operations as described herein.

In addition as used herein the terms computing system and computing entity can denote but are not limited to systems made up of multiple virtual assets server computing systems workstations desktop computing systems mobile computing systems database systems or storage clusters switching systems routers hardware systems communications systems proxy systems gateway systems firewall systems load balancing systems or any devices that can be used to perform the processes and or operations as described herein.

As used herein the term computing environment includes but is not limited to a logical or physical grouping of connected or networked computing systems and or virtual assets using the same infrastructure and systems such as but not limited to hardware systems software systems and networking communications systems. Typically computing environments are either known environments e.g. trusted environments or unknown e.g. untrusted environments. Typically trusted computing environments are those where the assets infrastructure communication and networking systems and security systems associated with the computing systems and or virtual assets making up the trusted computing environment are either under the control of or known to a party. Examples of trusted computing environments include the assets and components making up data centers associated with and or controlled by an application and or any computing systems and or virtual assets and or networks of computing systems and or virtual assets associated with known by and or controlled by an application.

In contrast unknown or untrusted computing environments are environments and systems where the assets components infrastructure communication and networking systems and security systems implemented and associated with the computing systems and or virtual assets making up the untrusted computing environment are not under the control of and or are not known by a party and or are dynamically configured with new elements capable of being added that are unknown to the party. Examples of untrusted computing environments include but are not limited to public networks such as the Internet various cloud based computing environments and various other forms of distributed computing systems.

In various embodiments each computing environment includes allocated assets and virtual assets associated with and controlled or used to create and or deploy and or operate an application.

It is often the case that to create and or deploy and or operate application data must be transferred between a first computing environment that is an untrusted computing environment and a trusted computing environment. However in other situations a party may wish to transfer data between two trusted computing environments and or two untrusted computing environments.

In various embodiments one or more cloud computing environments are used to create and or deploy and or operate an application that can be any form of cloud computing environment such as but not limited to a public cloud a private cloud a virtual private network VPN a subnet a Virtual Private Cloud VPC a sub net or any security communications grouping or any other cloud based infrastructure sub structure or architecture as discussed herein and or as known in the art at the time of filing and or as developed after the time of filing.

In many cases a given application or service may utilize and interface with multiple cloud computing environments such as multiple VPCs in the course of being created and or deployed and or operated.

As used herein the term virtual asset includes any virtualized entity or resource and or virtualized part of an actual or bare metal entity. In various embodiments the virtual assets can be but are not limited to virtual machines virtual servers and instances implemented in a cloud computing environment databases associated with a cloud computing environment and or implemented in a cloud computing environment services associated with and or delivered through a cloud computing environment communications systems used with part of or provided through a cloud computing environment and or any other virtualized assets and or sub systems of bare metal physical devices such as mobile devices remote sensors laptops desktops point of sale devices ATMs electronic voting machines etc. located within a data center within a cloud computing environment and or any other physical or logical location as discussed herein and or as known available in the art at the time of filing and or as developed made available after the time of filing.

In various embodiments any or all of the assets making up a given production environment discussed herein and or as known in the art at the time of filing and or as developed after the time of filing can be implemented as virtual assets.

Typically virtual assets are created or instantiated using steps instructions processes code or recipes referred to herein as virtual asset creation templates. Typically virtual assets that have the same or similar operational parameters are created using the same or similar virtual asset creation templates. 

Examples of virtual asset creation templates include but are not limited to any tool and or system for creating and managing a collection of related cloud resources. Illustrative examples of such a virtual asset creation template are any of the cloud formation templates tools provided by Amazon Web Service AWS Rack Space Joyent and or any other of the numerous cloud based infrastructure providers.

Other examples of virtual asset creation templates include but are not limited to any configuration management tool associated with and or used to create virtual assets. One specific illustrative example of such a virtual asset creation template is a cookbook or recipe tool such as a Chef Recipe or system or any other fundamental element or set of elements used to override the default settings on a node within an infrastructure or architecture.

Other examples of virtual asset creation templates include but are not limited to any virtual appliance used to instantiate virtual assets. One specific illustrative example of such a virtual asset creation template is an Amazon Machine Image AMI and or similar functionality provided by Amazon Web Service AWS Rack Space Joyent and or any other of the numerous cloud based infrastructure providers.

Other examples of virtual asset creation templates include but are not limited to any appliance or tool or system or framework used to instantiate virtual assets as discussed herein and or as known available in the art at the time of filing and or as developed made available after the time of filing.

Herein virtual assets that have the same or similar operational parameters and are created by the same or similar virtual asset creation template are generically referred to as virtual assets of the same class. Examples of virtual asset classes include but are not limited to virtual machine classes virtual server classes virtual database or data store classes self monitoring virtual assets including specific types of instances instantiated in a cloud environment application development process classes and application classes.

In one embodiment two or more assets such as computing systems and or virtual assets and or two or more computing environments are connected by one or more communications channels including but not limited to Secure Sockets Layer communications channels and various other secure communications channels and or distributed computing system networks such as but not limited to a public cloud a private cloud a virtual private network VPN a subnet any general network communications network or general network communications network system a combination of different network types a public network a private network a satellite network a cable network or any other network capable of allowing communication between two or more assets computing systems and or virtual assets as discussed herein and or available or known at the time of filing and or as developed after the time of filing.

As used herein the term network includes but is not limited to any network or network system such as but not limited to a peer to peer network a hybrid peer to peer network a Local Area Network LAN a Wide Area Network WAN a public network such as the Internet a private network a cellular network any general network communications network or general network communications network system a wireless network a wired network a wireless and wired combination network a satellite network a cable network any combination of different network types or any other system capable of allowing communication between two or more assets virtual assets and or computing systems whether available or known at the time of filing or as later developed.

As used herein the term user includes but is not limited to any party parties entity and or entities using or otherwise interacting with any of the methods or systems discussed herein. For instance in various embodiments a user can be but is not limited to a person a commercial entity an application a service and or a computing system.

As used herein the term tenant includes but is not limited to any user that enters a relationship agreement and or contract with an asset service provider or other service provider to receive an allocation of one or more assets or asset resources within an asset computing environment. In some embodiments the terms tenant and tenant computing environment are interchangeably used even though in some cases a tenant represents a party parties or entities while the tenant computing environment represents one or more computing resources that are used by or that are at least partially under the control of the tenant.

An asset service provider may require that a tenant of the service provider s assets comply with one or more security related criteria before or while hosting an application on the surface provider s assets. As used herein a tenant of an asset may be but is not limited to a customer or authorized person or organization to which one or more instances or computing resources of an asset are allocated for use e.g. for running or hosting a software application. The asset service provider may want to standardize and customize processes for confirming that a tenant or tenant s developer has adequately or sufficiently identified and addressed security threats that the tenant s application may be particularly susceptible to. The asset service provider may therefore request responses from the tenant for a variety of questions related to the tenant s application. According to one embodiment the asset service provider may execute a threat model generator to ensure that the tenant has considered and or addressed security threats that are associated with or pertinent to the tenant s application.

According to one embodiment to improve the security of its application a tenant may solicit use of a threat model generator during the development of an application that the tenant wishes to host execute or run on one or more assets of the asset service provider. The threat model generator may be configured to provide a customized list of questions to the tenant receive responses to the questions from the tenant and provide one or more reports or diagrams to the tenant that identify aspects of an application that have been sufficiently secured from security threats. The one or more reports or diagrams also identify aspects of an application that have not been sufficiently secured from security threats from the perspective of the asset service provider according to one embodiment.

The production environment provides automated threat model generation for an application using one or more computing environments described hereinafter according to various embodiments. Although each of the computing environments of production environment are illustrated as distinct components one or more of the computing environments may be physically and or functionally combined. Alternatively as will be appreciated by one of ordinary skill in the art in some embodiments the logical functions or modules that are grouped together by the illustrated computing environments may be physically and or functionally separated into additional computing environments that are not presently shown. According to one embodiment the production environment includes an asset computing environment a computing environment a computing environment an asset service provider computing environment and a security service provider computing environment .

The asset computing environment provides hardware software and or virtual resources and assets to customers of the service provider according to one embodiment. The assets or resources of the asset computing environment may be assigned or allocated to the tenant associated with the tenant computing environment in response to one or more of tenants entering an agreement contract or other relationship with the service provider according to one embodiment. As described above in the INTRODUCTORY SYSTEM section assets can include virtual and non virtual assets and can be but are not limited to virtual machines virtual servers databases services associated with cloud computing communications systems mobile devices sensors various computing systems and other physical or logical portions of a data center according to various embodiments. In one embodiment the asset service provider enables tenants to manage create or instantiate an instance of hardware firmware and or software resources for hosting a tenant s application s . The asset computing environment includes a multi tenant asset that hosts applications and and a dedicated asset that hosts an application according to various embodiments. Although two assets and are illustrated in the production environment in various embodiments a greater or fewer number of multi tenant or dedicated assets may be included in the asset computing environment according to other embodiments.

According to various embodiments each of the applications and assets of the asset computing environment can perform a particular function and or have a particular relationship with the computing environment . In one embodiment the multi tenant asset and the applications provide computing services for a tenant of the computing environment and for one or more other tenants that may be associated with other computing environments not shown . For example the multi tenant asset and the application can provide database hosting information management security file transfer or other computing services for both the tenant and another tenant. In one embodiment the multi tenant asset allows tenants to execute host and or run applications e.g. the application from the resources of the multi tenant asset . For example the multi tenant asset may host the application for one tenant while concurrently hosting the application for another tenant from the same hardware and or software resources within the asset computing environment . The applications and may be independent of one another while sharing storage space network resources computer processors random access memory server rack storage space or other resources of the multi tenant asset . In one embodiment the multi tenant asset provides resources that enable multiple tenants to jointly provide users with services through the application . In one particular example the application may be configured to receive store and organize financial data for a user of a computing environment according to one embodiment.

The dedicated asset provides computing services for a single tenant such as the tenant or a developer of the computing environment . In one embodiment the dedicated asset includes hardware or software resources that are allocated to the single tenant and not shared with other tenants or customers associated with the asset computing environment . For example the dedicated asset can include hardware or software resources such as a non volatile memory a server a server cabinet an operating system a virtual device or other asset or virtual asset according to one embodiment. The dedicated asset can be configured to host or execute the application for the tenant or the developer . The dedicated asset can host the application to make the application available to a number of users such as the user without providing the users with direct access to the computing environment or to other computing resources of the tenant or the developer .

The computing environment represents a computing environment of a tenant or customer of the service provider e.g. the tenant according to one embodiment. The computing environment may be owned operated or be under the direction or control of the tenant and the tenant may represent any one of a number of types of customers. According to various embodiments the tenant includes but is not limited to one or more individuals families small medium large businesses educational institutions organizations entities or parties. The computing environment includes the tenant the developer and the application .

The developer includes but is not limited to one or more application developers or one or more application developer computing devices that may create manage manipulate edit upload maintain or otherwise take part in developing updating and or maintaining the applications and or . In one embodiment the application represents an application that is under development e.g. in the planning phase coding phase or testing phase prior to inserting into an asset or instance of an asset of the asset computing device . In one embodiment the applications and or represent applications that are have already been transferred from a development computing environment and are being executed or are capable of being executed by an asset or an instance of an asset.

The computing environment includes one or more users that may have contractual or other relationships with the tenant to use or receive services from one or more applications and or . The computing environment includes the user according to one embodiment. As will be appreciated by one of ordinary skill in the art the computing environment may include more users than illustrated in the production environment . In one embodiment the user receives information or services through the multi tenant asset or the dedicated asset as a client or customer of the tenant or of the developer .

A communication channel provides communicative coupling between the asset computing environment the computing environment the computing environment the asset service provider computing environment and the security service provider computing environment according to one embodiment. The communication channel can be a network within the production environment and can include but is not be limited to a local area network a wide area network a wireless network the Internet an intranet or other network or communications protocols or environments according to various embodiments.

The asset service provider computing environment assigns or allocates control over one or more assets or portions of assets in the asset computing environment to the computing environment e.g. the tenant computing environment according to one embodiment. The asset service provider computing environment may allocate control over assets within the asset computing environment to the computing environment by creating one or more user accounts having for example permission levels associated with a tenant or customer . In one embodiment the tenant or customer permission levels may be different than the permission levels of other non tenant users and may enable the tenant the developer and or the computing environment to add remove modify protect or otherwise manipulate information within the asset computing environment . In other words the service provider may enable a first tenant to add remove view or otherwise manipulate the first tenant s data stored in the asset computing environment and may enable a second tenant to add remove view or otherwise manipulate the second tenant s data stored in the asset computing environment . In some implementations the tenant may use authentication information received from the asset service provider to log in to assets or instances of the assets allocated to the tenant from any computing system or environment and is not limited to accessing the asset computing environment solely from the computing environment . In one embodiment the features or functionality of the asset service provider computing environment are incorporated into the asset computing environment .

In addition to allocating and managing assets of the asset computing environment the asset service provider computing environment also maintains the security of the asset computing environment according to one embodiment. The asset service provider computing environment maintains the security of the asset computing environment by ensuring that applications hosted by assets or instances within the asset computing environment satisfy one or more conditions that are determined or set forth by the service provider e.g. via the asset service provider computing environment according to one embodiment. More particularly the asset service provider computing environment maintains the security of the asset computing environment by executing a threat model generator and a security threat policy manager according to one embodiment.

The threat model generator includes several modules or features for developing and maintaining a threat model library and for determining whether new or existing applications satisfy security related conditions set forth by the asset service provider. According to one embodiment and as described in further detail below the threat model generator analyzes new and existing applications e.g. the applications by automating threat model generation for the applications. The threat model generator automates threat model generation by providing one or more adaptable and customized threat model questionnaires or templates to developers e.g. the developer . The threat model generator includes a threat acquisition module a threat model generation engine a questions bank a support request module and a user interface according to one embodiment.

The threat model generator uses the threat acquisition module to update and maintain the threat model library according to one embodiment. The threat model library is a database table or other data structure configured to organize and store security threats identified by the threat model generator e.g. through the threat acquisition module . The threat acquisition module populates the threat model library with publicly identified or known security threats and with security threats that have been identified by the service provider.

The threat acquisition module populates the threat model library using an external threats module and a detected threats module according to one embodiment. The threat acquisition module uses the external threats module to for example query publicly or privately available security threat repositories or security threat databases or banks. For example the external threats module may be configured to purchase access to a security threat repository from one or more security service providers such as the security service provider computing environment . The acquired list of publicly known or publicly available security threats may include names content characteristics signatures and solutions for the identified and acquired security threats. In other words by acquiring information regarding security threats from an external source the external threats module can populate the threat model library with information that is useful for identifying how security threats are used and for identifying how to protect or secure an application from security threats according to various embodiments.

The threat acquisition module uses the detected threats module to populate the threat model library with information regarding security threats that have been discovered or identified by the asset service provider according to one embodiment. For example the detected threats module can be configured to receive security threat updates manually or automatically from an information security team of the service provider. In some embodiments the information security team of the service provider monitors the assets of the asset computing environment and notifies the detected threats module of any new actual or potential security threats to the applications hosted by the assets or to hardware software components of the assets according to one embodiment. Upon receipt of newly identified defined or detected security threats the detected threats module can be configured to update the threat model library to reflect the newly identified defined or detected security threats according to one embodiment.

The threat model generator uses the threat model generation engine to receive security information for an application and to determine and or indicate the sufficiency or adequacy of the security information according to one embodiment. The threat model generation engine can be configured to transmit questions from the question bank to the developer through the user interface to determine various characteristics of the application or . In particular example the threat model generation engine can be configured to use the model inputs module of the user interface to display questions and receive answers or responses from the developer . According to what the developer is attempting to accomplish the questions can be directed towards the application that is under development or the questions can be directed towards the application or that is mature and that is being modified. An example of a threat model questionnaire or template that may be generated through the user interface is discussed in more detail below and illustrated in . In some implementations the characteristics of the application that are received and determined by the threat model generation engine can include but are not limited to the capacity speed size and software capabilities of an asset or computing environment upon which the application will be executed or hosted. The characteristics of the application that are determined by the threat model generation engine can also include but are not limited to whether the application includes collection oriented components and whether the application has been or will be developed to be resilient to security threats such as tickling attacks spoofing data tampering the denial of service elevation of privilege or the like.

The threat model generator uses the support request module and the output diagram module to determine a sufficiency of security measures included in an application e.g. application or and to indicate or report the determined sufficiency or insufficiency to the developer or to another user according to one embodiment. Threat model generation engine uses the questions bank and the model inputs module to inquire as to whether security measures have been taken into to account for various types of threats such as spoofing data tampering denial of service and the like. The threat model generation engine through the questions from the questions bank may also request that the developer provide information regarding how the application is secured or protected from one or more security threats. For example the threat model generation engine may request or require that the developer provide specific algorithms pseudo algorithms or code to support the developer s assertion that the application is secure. The threat model generation engine may communicate with the threat model library to determine whether the responses received from the developer match or resemble solutions to security threats that are stored in the threat model library . In some instances the threat model generation engine may be unable to automatically determine whether the security measures taken by the developer are adequate or to determine if the security measures resemble the measures or solutions stored in the threat model library . In these example situations the threat model generation engine can be configured to use the support request module to automatically acquire additional support or automatically request input from one or more human resources according to one embodiment.

The support request module may forward one or more responses received from the developer to a programmable service securities expert or other human resource to check evaluate and or determine the adequacy of the response received from the developer . Some programmable services operate by posting tasks to a website that allows one of a number of users to look up an answer or provide a consultation regarding a query for a nominal and predetermined fixed fee. Additionally and or alternatively the support request module can be selectively configured to transmit or forward responses from the developer which the threat model generation engine does not recognize to a computing security expert. For example the asset service provider may have a pre established relationship with one or more computer security experts and the support request module may forward a response from the developer to one or more computer security experts for evaluation and or analysis. The support request module may forward responses received from programmable services and computer security experts to the threat model generation engine so that the threat model generation engine may update the threat model library to reflect the newly acquired information and to facilitate automating future responses that resemble the response from the developer that triggered the operation or execution of the support request module .

The threat model generation engine may use the output diagram module of the user interface to identify display and or generate a threat model for use by the developer according to one embodiment. The output diagram module may be configured to provide tables charts graphs or other data structures that identify portions or components of the application identify security threats associated with the components of the application and identify whether or not the application adequately or sufficiently is protected from enumerated or listed security threats. According to one embodiment and as will be discussed in more detail below the output diagram module can be configured to generate the threat model report that is represented in .

The asset service provider computing environment uses the security threat policy manager to authorize and reject the application or modifications to the application or at least partially based on whether the applications satisfy the security threat policy according to one embodiment. The security threat policy can for example specify one or more minimum requirements that an application must satisfy in order to be hosted by an asset of the asset computing environment . The one or more minimum requirements include but are not limited to whether the application or the components of the application are individually and or holistically protected against tickle attacks identity spoofing data tampering repudiation information disclosure denial of service elevation of privilege or any other currently known or later discovered computer security threats or malicious attacks. In one embodiment the security threat policy specifies that all security threats identified by the service provider must be sufficiently secured against or addressed in the application before the service provider authorizes the insertion or injection of the application into one or more assets of the asset computing environment . In another embodiment the security threat policy specifies a frequency by which an already operable or asset hosted application must be reevaluated in light of newly discovered computer security threats e.g. quarterly semiannually or annually to ensure the security of tenant information user information and other application hosted by the assets. In one embodiment the security threat policy can include a requirement that the developer run proposed modifications to the application or through the threat model generator prior to inserting any application updates or modifications into an asset or instance of the asset computing environment .

The security threat policy manager may use a policy analytics engine to determine whether the application or satisfies the requirements of the security threat policy . The policy analytics engine may communicate with the threat model generator e.g. the threat model generation engine to determine whether information received about an application from the developer satisfies the requirements of the security threat policy . In response to the results determined by the policy analytics engine the security threat policy manager may approve or reject authorization for the application to be inserted into one of the assets of the asset computing environment according to one embodiment. According to another embodiment in response to the results determined by the policy analytics engine the security threat policy manager may approve or reject authorization for modifications or updates to the application or to be inserted into one of the assets of the asset computing environment .

The security threat policy manager uses a policy execution engine to maintain the security of the asset computing environment by approving or rejecting requests to authorize the insertion of an application or modification to an application from the computing environment into the assets of the asset computing environment according to one embodiment. The policy execution engine may be configured to continuously run the background of the asset service provider computing environment or it may be configured to periodically monitor each application hosted by the asset computing environment or each application for which a request has been received to insert the application into the asset computing environment . In one embodiment the policy execution engine periodically e.g. daily or weekly evaluates existing applications to verify that the applications continue to satisfy the requirements of the security threat policy . If the policy execution engine identifies an application that fails to satisfy the requirements of the security threat policy the policy execution engine can notify the tenant developer or owner or the application and can terminate execution of the application until the deficiency is resolved according to one embodiment.

Although the threat model generator is fully described as integrated within the asset service provider computing environment the threat model generator may be installed or distributed in other computing environments within the production environment . For example the threat model generator may be a software package that is downloadable deliverable or installable onto the computing environment for local use by the developer . In another embodiment the threat model generator is hosted by the asset computing environment to provide application analysis and to provide threat model questionnaires and threat model reports to the developer or other users e.g. the user . In yet another embodiment the security service provider computing environment may host the threat model generator instead of the asset service provider computing environment . In this embodiment the security service provider computing environment develops and hosts the threat model generator for the benefit of the developer and for the benefit of the assets of the asset service provider. The threat model generator while hosted by the security service provider computing environment can be configured to communicate with the security threat policy manager and other components within the asset service provider computing environment in order to provide a fully integrated threat modeling product to users such as the tenant and or the developer .

The first question is used to acquire general information about the type of application or the subject matter of the application according to one embodiment. Examples of application types include but are not limited to a survey a marketplace a blog financial service educational or another user identifiable type of application . Each of the illustrated types of applications can include a radio button a check box a selected menu or other user interface selection tool that enables the developer or other user to identify one or more types of applications.

The second question is used to acquire information regarding the configuration of the asset or assets that currently host the application or that will host the application according to one embodiment. The second question can employ various techniques to enable the developer to provide configuration information about a hosting asset. The second question can include an asset metadata upload button that enables the developer to upload a file from the computing environment that identifies the configuration and or characteristics of an asset according to one embodiment. For example the file can include but is not limited to the capacity speed feature sets processor generation quantity of processors and or processor brand for the asset. The second question can include a text box to enable the developer to manually enter the various information about the hardware or software configurations of the particular asset according to one embodiment. The second question can also include one or more drop down menus to allow the developer to select from one or more predetermined configurations that may be offered by the asset service provider according to one embodiment. For example drop down menu may identify service provider defined asset categories such as storage optimized general purpose optimized and or GPU instance . Furthermore to describe the memory capacity number of processors and processor speeds the drop down menu may identify service provider defined sizes of assets such as medium small large and or x large . By providing pre populated drop down menus the threat model generator can assist the developer in identifying asset configurations that are available from the asset service provider for hosting the application. In some embodiments more or less information regarding the assets is provided in the drop down menus such as processor speeds number of processors volatile memory capacities non volatile memory capacities processor brands processor generations and the like.

The third question can be used to acquire additional specific information about components of the application according to one embodiment. For example the third question can include a text box for the developer to enter a number of application programming interfaces APIs . The third question can also include a drop down menu that identifies each of the API types that are used. In one implementation the drop down menu can include one or more check boxes or other graphical user interface tools to acquire accurate API type information from the developer . The third question can also include additional follow up questions regarding each of the APIs such as for each API is each API parameter checked for validity. For example if one API parameter has an integer range of 0 9 the third question can be used to ensure that the developer ensure that the value entered for a particular parameter is within the defined or predetermined range. The third question can include a menu to enable the developer to submit an answer to the follow up questions.

The threat model generation engine populates the threat model questionnaire with a fourth question according to one embodiment. The threat model generation engine populates the threat model questionnaire at least partially based on responses to previous questions e.g. the first question and or the third question according to one embodiment. The fourth question can include a request that the developer identify APIs that are specifically configured to collect information from users according to one embodiment. To receive a response from the developer the fourth question can include a text box or other graphical user interface information entry tools. Subsequently the fourth question can include subcategories of follow up questions that specifically enumerate and or identify types of security threats that the developer should be aware of and should secure the application against. As particular examples the fourth question can include follow up questions and selection menus to identify particular types of security threats the API for the application should be protected from. The follow up questions the selection menus can include questions relating to for example tickle attack spoofing identity tampering with data repudiation information disclosure denial of service elevation of privilege password sniffing and or other categories or subcategories of security threats according to various embodiments.

At least partially based on one or more of the questions the threat model generation engine can populate the threat model questionnaire with one or more additional questions . For example the additional questions can be used to request further information from the developer as to how the developer secures the application against the one or more security threats identified in the threat model questionnaire according to one embodiment. For example if the threat model generation engine determines that one or more APIs or other components of an application are susceptible to denial of service attacks because the application appears to support an insufficient number of ports or connections the additional questions may be configured to assist the developer in identifying if the application has an adequate number of connections if the application is adequately sized or if the application includes adequate features e.g. traffic throttling. The additional questions can be used to request further information from the developer to identify what changes the developer intends to implement in an application e.g. the application or which is already hosted by an asset in the asset computing environment . As described above in connection with the threat model generation engine the support request module may utilize programmable services or other human resources such as an information security expert to evaluate the adequacy of security threat prevention measures proposed by the developer . In some instances the programmable service or other human resource may have follow on questions or inquiries that the support request module may be configured to forward to the developer . In one embodiment the threat model generation engine uses the model inputs module to deliver follow on questions from programmable services or other human resources directly to the developer for response. By automating security threat questions the asset service provider can protect applications belonging to multiple tenants that are sharing a common computing environment or that are sharing assets within a common computing environment. By automating security threat questions and providing these questions to the developer the service provider adds additional value to the services it makes available to its tenants or potential customers which may help the service provider distinguish itself from its competition.

The threat model report includes an application identification ID a threat model table and a threat model diagram to enable the developer or another user to quickly comprehend security weaknesses identified by the threat model generator according to one embodiment. The threat model table includes but is not limited to multiple columns and rows that identify parts of the application the sufficiency of the security of each part of the application and one or more recommended or suggested actions to take for insufficiently secured parts of the application. In one particular example the threat model table includes a list of APIs column a security status column and a suggested action column . The list of APIs column can include each API identified by the developer or can include other functional or organizational components of the application. The security status column provides an indication of the analysis of the service provider computing environment for the application . As shown example entries in the security status column include but are not limited to pass fail weak strong secured not secured and the like according to various embodiments. The suggested action column can be used by the asset service provider computing environment to assist the developer to update or modify the application to satisfy the standards or requirements set forth by the asset service provider. Each of the rows and can represent a different API or component of the application. The row identifies and API D that has been identified as not secure under the security status column . Additionally the suggested action column for the API D includes a recommendation for adding support for multiple connections to the application to provide additional protection against denial of service attacks. While one specific suggested action and row column configuration is illustrated one of ordinary skill in the art will appreciate that more or less rows and columns can be used to provide a threat model table to assist the developer in improving the security of an application.

The threat model diagram provides a graphical representation of the level of security of the application with regards to various particular security threats according to one embodiment. The threat model diagram includes the application ID centrically position with respect to a number of security threats . The security threats that are illustrated include as examples URL misinterpretation directory browsing reverse proxying Java decompilation SQL query poisoning session hijacking elevation of privilege and denial of service . Associated with each illustrated security threat and the application are threat strength indicators . The threat strength indicators can include but are not limited to pass fail weak strong okay sufficient insufficient adequate inadequate or the like. In some embodiments the threat model diagram is color coordinated so that security threats that have been sufficiently protected against are highlighted in green security threats that have been insufficiently protected against are highlighted in red and or security threats that are marginally protected against are highlighted in yellow according to one embodiment. Although the threat model diagram is illustrated as having a circular shape the threat model diagram can be organized in any one of a number of different formats to relay the status and relationship of protection for the application against various security threats.

At block a computing environment identifies components of an application according to one embodiment. The computing environment can be an asset service provider computing environment a security service provider computing environment an asset computing environment and or a computing environment used by a developer or other user in accordance with various implementations of the process . The application is an application that is under development by developer e.g. in the planning phase in the coding phase and or the testing phase or the application is an application that has already been inserted or injected into an instance or asset provided by the asset service provider. The components of the application can include APIs functions modules or other logical functional parts of the application. In one particular embodiment identifying components of the application includes retrieving a list or other enumeration of the components from the developer of the application through a textual or graphical user interface. In some implementations the computing environment also retrieves characteristics of the instance or asset into which the application is or will be inserted so that the computing environment can take additional hardware firmware and or software considerations into account while analyzing the security robustness of the application.

At block the computing environment receives security information that identifies whether measures were taken within the application to secure the application against security threats according to one embodiment. The computing environment receives the security information about the application from the developer through a user interface provided by the computing environment. The security information can be as simple as yes and no responses from the developer to questions such as is the application secured or protected from tickle attacks The security information can alternatively be more complex and include specific measures e.g. coding techniques or algorithms employed to defeat attacks from one or more enumerated security threats.

At block the computing environment determines whether the measures sufficiently address security risks associated with the security threats by transmitting first queries receiving responses to the first queries and transmitting subsequent queries based at least in part on the responses to the first queries according to one embodiment. In other words the computing environment can be configured to provide a dynamic and or customizable series of questions to the developer that are based at least in part on information or characteristics of the application as received from the developer. Because the user interface can be implemented using a dialog box or a webpage in one embodiment the computing environment can dynamically append additional questions to a threat model questionnaire or template in what would appear to the developer to be real time.

According to various embodiments the computing environment can use any one of a number of software modules or partitions of code to generate and or transmit the first queries and the subsequent queries to the developer. For example the computing environment can include a threat model generator that creates and maintains a threat model library e.g. a database of known or discovered security threats and their corresponding resolutions. The threat model generator can also be configured to deliver or provide questions to the developer from a questions bank in order to acquire more information about the application and to more accurately characterize the features and or components of the application. The threat model generator can transmit or provide the questions from the question bank to the developer through a user interface which may be hosted by the threat model generator or by another component within the computing environment.

The threat model generator can be configured to selectively request assistance from human resources when query responses or other information is received from the developer according to one embodiment. For example the threat model generator may use a support request module to forward developer responses to human resources e.g. a programmable services provider or a security expert to assist the threat model generator in determining whether the developer s responses are reasonable valid pertinent and or sufficient to address one or more particular security threats. In one embodiment the threat model generator is configured to use the support request module to solicit the assistance of human resources when a developer describes a solution to a security threat that is not already recorded or included in a threat model library maintained by the computing environment.

As described above the threat model generator can auto populate the threat model library or coordinate human resources to populate the threat model library. For example to auto populate the threat model library the threat model generator can be configured to retrieve information from an online security threats archive database or repository which may be provided by one or more computing security vendors or companies. The threat model generator can coordinate human resources to populate the threat model library by enabling the computing security team of the service provider e.g. the asset service provider or the security service provider to add security threats and their corresponding solutions fixes as the security team discovers the security threats within the asset computing environment according to one embodiment.

At block the computing environment provides a threat model that includes a report that identifies components of the application that have been sufficiently secured and identifies components of the application that have been insufficiently secured from the security threats. The report can include one or more tables graphs diagrams charts or other visual displays or representations of the application or components thereof the security threats and the security status of the application with regard to each of the security threats according to one embodiment. In other embodiments the report can include a list of components of the application and suggested or recommended remedial actions for improving the security of one or more of the components against attack from one or more particular security threats. As will be understood by those of skill in the art other implementations of the threat model may include various other combinations of the application components of the application indications of the level of security for the components of the application suggested remedial actions modifications or fixes to the application to improve its security and or a list of security threats to which the application may be susceptible.

As noted above the specific illustrative examples discussed above are but illustrative examples of implementations of embodiments of the method or process for automating threat model generation for an application. Those of skill in the art will readily recognize that other implementations and embodiments are possible. Therefore the discussion above should not be construed as a limitation on the claims provided below.

In the discussion above certain aspects of one embodiment include process steps and or operations and or instructions described herein for illustrative purposes in a particular order and or grouping. However the particular order and or grouping shown and discussed herein are illustrative only and not limiting. Those of skill in the art will recognize that other orders and or grouping of the process steps and or operations and or instructions are possible and in some embodiments one or more of the process steps and or operations and or instructions discussed above can be combined and or deleted. In addition portions of one or more of the process steps and or operations and or instructions can be re grouped as portions of one or more other of the process steps and or operations and or instructions discussed herein. Consequently the particular order and or grouping of the process steps and or operations and or instructions discussed herein do not limit the scope of the invention as claimed below.

As discussed in more detail above using the above embodiments with little or no modification and or input there is considerable flexibility adaptability and opportunity for customization to meet the specific needs of various parties under numerous circumstances.

In the discussion above certain aspects of one embodiment include process steps and or operations and or instructions described herein for illustrative purposes in a particular order and or grouping. However the particular order and or grouping shown and discussed herein are illustrative only and not limiting. Those of skill in the art will recognize that other orders and or grouping of the process steps and or operations and or instructions are possible and in some embodiments one or more of the process steps and or operations and or instructions discussed above can be combined and or deleted. In addition portions of one or more of the process steps and or operations and or instructions can be re grouped as portions of one or more other of the process steps and or operations and or instructions discussed herein. Consequently the particular order and or grouping of the process steps and or operations and or instructions discussed herein do not limit the scope of the invention as claimed below.

The present invention has been described in particular detail with respect to specific possible embodiments. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. For example the nomenclature used for components capitalization of component designations and terms the attributes data structures or any other programming or structural aspect is not significant mandatory or limiting and the mechanisms that implement the invention or its features can have various different names formats or protocols. Further the system or functionality of the invention may be implemented via various combinations of software and hardware as described or entirely in hardware elements. Also particular divisions of functionality between the various components described herein are merely exemplary and not mandatory or significant. Consequently functions performed by a single component may in other embodiments be performed by multiple components and functions performed by multiple components may in other embodiments be performed by a single component.

Some portions of the above description present the features of the present invention in terms of algorithms and symbolic representations of operations or algorithm like representations of operations on information data. These algorithmic or algorithm like descriptions and representations are the means used by those of skill in the art to most effectively and efficiently convey the substance of their work to others of skill in the art. These operations while described functionally or logically are understood to be implemented by computer programs or computing systems. Furthermore it has also proven convenient at times to refer to these arrangements of operations as steps or modules or by functional names without loss of generality.

Unless specifically stated otherwise as would be apparent from the above discussion it is appreciated that throughout the above description discussions utilizing terms such as but not limited to activating accessing adding aggregating alerting applying analyzing associating calculating capturing categorizing classifying comparing creating defining detecting determining distributing eliminating encrypting extracting filtering forwarding generating identifying implementing informing monitoring obtaining posting processing providing receiving requesting saving sending storing substituting transferring transforming transmitting using etc. refer to the action and process of a computing system or similar electronic device that manipulates and operates on data represented as physical electronic quantities within the computing system memories resisters caches or other information storage transmission or display devices.

The present invention also relates to an apparatus or system for performing the operations described herein. This apparatus or system may be specifically constructed for the required purposes or the apparatus or system can comprise a general purpose system selectively activated or configured reconfigured by a computer program stored on a computer program product as discussed herein that can be accessed by a computing system or other device.

Those of skill in the art will readily recognize that the algorithms and operations presented herein are not inherently related to any particular computing system computer architecture computer or industry standard or any other specific apparatus. Various general purpose systems may also be used with programs in accordance with the teaching herein or it may prove more convenient efficient to construct more specialized apparatuses to perform the required operations described herein. The required structure for a variety of these systems will be apparent to those of skill in the art along with equivalent variations. In addition the present invention is not described with reference to any particular programming language and it is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references to a specific language or languages are provided for illustrative purposes only and for enablement of the contemplated best mode of the invention at the time of filing.

The present invention is well suited to a wide variety of computer network systems operating over numerous topologies. Within this field the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to similar or dissimilar computers and storage devices over a private network a LAN a WAN a private network or a public network such as the Internet.

It should also be noted that the language used in the specification has been principally selected for readability clarity and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the claims below.

In addition the operations shown in the FIGS. or as discussed herein are identified using a particular nomenclature for ease of description and understanding but other nomenclature is often used in the art to identify equivalent operations.

Therefore numerous variations whether explicitly provided for by the specification or implied by the specification or not may be implemented by one of skill in the art in view of this disclosure.

