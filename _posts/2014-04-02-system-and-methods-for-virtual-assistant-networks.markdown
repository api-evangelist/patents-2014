---

title: System and methods for virtual assistant networks
abstract: A system for the operation of a virtual assistant network, comprising a plurality of virtual assistants stored and operating on network-connected devices, and a plurality of virtual assistant brokers stored and operating on network-connected devices, wherein the virtual assistants receive user requests and send the requests to the virtual assistant brokers, and wherein the virtual assistant brokers delegate the requests to other virtual assistants for fulfillment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09172747&OS=09172747&RS=09172747
owner: Artificial Solutions Iberia SL
number: 09172747
owner_city: Barcelona
owner_country: ES
publication_date: 20140402
---
The instant application is a continuation of U.S. patent application Ser. No. 14 184 697 titled SYSTEM AND METHODS FOR VIRTUAL ASSISTANT NETWORKS filed on Feb. 19 2014 which claims priority to U.S. provisional patent application Ser. No. 61 769 191 titled SYSTEM AND METHODS FOR A NETWORK OF VIRTUAL ASSISTANTS filed on Feb. 25 2013 the entire specification of which is hereby incorporated by reference.

The invention relates to the field of artificial intelligence and more particularly to the field of natural language interaction based applications such as virtual assistants.

Virtual assistants are an example of a class of software applications referred to herein as natural language interaction applications that use natural language to interact with a human user. With respect to virtual assistants in particular these applications perform functions similar to those provided by human assistants in that they can engage in conversations with their users in order to for example provide information carry out routine tasks or perform other operations as required. Many virtual assistants have been used in association with web sites with these virtual assistants often featuring the use of graphical images or avatars to simulate the experience of interacting with a human being.

While some natural language interaction applications known in the art may possess rudimentary natural language understanding capabilities in reality most such applications and particularly most virtual assistants known in the art are tightly scripted applications that carry out a limited range of activities. While scripted agents have proven useful in many online scenarios their acceptance has generally been limited because when users are restricted in their ways of expressing themselves in natural language the communication language is not natural. Any notion of the virtual assistant s behaving like a real assistant disappears because too much effort is demanded of the user when the user is expected to know precisely what to say or what to do in order to achieve her goals. Thus there is a distinct need in the art for interpreting fluid and freely expressed natural language in various applications for example by virtual assistants. This challenge is exacerbated by the fact that even when equipped with rudimentary natural language interpretation natural language interaction applications such as virtual assistants that seem to only know a small number of facts and who only talk about a very limited range of subjects such as appointment management do not seem very realistic to humans who are used to being able to say things in a fluid way shifting subjects easily and intermixing casual banter with task oriented speech.

The use of natural language interaction applications generally and virtual assistants more particularly has also been hampered by the high degree of complexity and cost associated with developing and deploying virtual assistants particularly those that have any significant degree of natural language interpretation and interaction capability. As such many of the services used by virtual assistants are housed in the cloud and are connected to using a network such as the internet a corporate intranet Bluetooth and other networks. Maintaining a connection to these services is necessary to completing many tasks of virtual assistants. However given that in the current environment there are many areas where connectivity is not available or expensive due to for example roaming charges or networks requiring a subscription connectivity to other services may not always be available. Moreover since typical users have a plurality of devices maintaining consistency across devices is essential.

Accordingly what is needed in the art is a system and various methods that enable virtual assistants to operate in a networked fashion with one another facilitating interaction between virtual assistants as well as the management of a virtual assistant network for efficient task handling.

Accordingly the inventor has conceived and reduced to practice in a preferred embodiment of the invention various systems and methods for the implementation and operation of virtual assistant networks including the use of a virtual assistant broker that may be used to manage a number of virtual assistants in a networked fashion.

According to a preferred embodiment of the invention a system for operating a virtual assistant network VAN comprising a plurality of virtual assistants VAs such as for example SIRI or other virtual personal assistants or other assistive products or services a plurality of VA brokers that may be stored and operating on network connected electronic devices and a VA communication protocol such as a standardized markup language or other means of standardizing communication between virtual assistants and brokers is disclosed. According to the embodiment VAs may be connected to and in communication with one another as well as with brokers and human users via the Internet or another communication network such as a cellular data network or any other such appropriate means for electronic communication. A VA broker may be in communication with a plurality of VAs for such purposes as to receive requests or information as well as to send requests or other information to VAs thereby facilitating a VAN by unifying communication between individual virtual assistants in an orderly fashion. For example a virtual assistant may be assisting a user that is looking for a restaurant in a foreign country and may send a request to a VA broker for information on local restaurants. The VA broker may then identify another virtual assistant in the network that may be able to process this request for example a virtual assistant maintained by a company in the country that is designed to assist local individuals in locating restaurants and placing reservations and submit the request to that assistant on the user s behalf. The VA broker may then receive the result of the query such as a list of nearby restaurants and their associated information and send this back to the originating virtual assistant for presentation to the user. Alternatively in some embodiments the broker assembles a list of virtual assistants that are likely to be able to satisfy a user s request that was submitted by the user s host virtual assistant and send this list of possible virtual assistants back to the host virtual assistant. The host virtual assistant may then select one of the virtual assistants from the list provided by the broker and contact that virtual assistant with the request directly typically using contact information such as IP address that is provided by the broker with the list of eligible virtual assistants . In other embodiments the host may exercise more direct control selecting a virtual assistant and connecting the host virtual assistant to the selected virtual assistant or even receiving responses to the user s request from a plurality of virtual assistants and returning either a list of responses with or without information concerning which virtual assistant provided each response or a single response selected by the broker. In this manner a network of virtual assistants may be utilized to expand the functionality of any one particular assistant without any additional complication on the part of the user who may perceive that they are consistently interacting with a single virtual assistant with which they may be familiar while networked operation takes place in the background without their knowledge.

Further according to the embodiment a VA communication protocol such as as envisioned by the inventor a standardized markup language may be utilized to facilitate interaction between virtual assistants and brokers. Ordinarily each particular virtual assistant or broker may have a particular means of interaction that may not be interchangeable with another. Such behavior is common practice in various corporate technologies in the art where proprietary technologies may impede interaction between products or services from different vendors. By utilizing a standardized protocol interaction between these disparate technologies may be facilitated in a structured and reliable manner such that networking functionality and the use of brokers that may need to interact with a large variety of different technologies to perform their functions become possible according to the invention.

According to the embodiment not all inter VA communication may need to utilize a broker. For example it is possible that a particular VA may already be familiar with another VA that is appropriate for a particular request. In such a scenario a user may interact with their familiar VA that may serve as the host for the interaction. As needed the host VA may communicate with a known target VA for assistance with specific requests. The target VA may then fulfill those requests as they would during normal operations as if the requests had been received directly from a user and return the results to the host VA for presentation to the user. In this manner networked functionality may be provided by virtual assistants when no broker is available or when it may be undesirable to utilize one such as when the host VA already knows of a specific target VA that may be appropriate for the request .

Further according to the embodiment a VA broker may communicate with another VA broker as necessary such as to utilize virtual assistants outside of its own network. For example a virtual assistant network VAN may be maintained for a specific region or country encompassing a variety of virtual assistant technologies relevant to that specific locale. When a user submits a request for information from another region such as asking for local news from another country it may be possible that no particular VA within the network is ideal for handling the request. In this scenario the originating host VA may decide to communicate with a VA broker for assistance in fulfilling the user s request. The VA broker may then reach out to another target broker for the specified region to pass the request to their network for handling and in turn the target VA broker may submit the request to a local virtual assistant as described previously for handling. The results of that interaction may then be returned to the host VA for presenting to the user. In this use case the user may still perceive that they are only interacting with their familiar virtual assistant while all brokering operations take place without their knowledge.

In another preferred embodiment of invention a method for providing networked virtual assistant operations is disclosed. According to the embodiment a user may submit a request to a virtual assistant for fulfillment. According to the nature of the specific request the VA may identify that another VA is needed to fulfill the request or that utilizing another VA for assistance may further enhance the fulfillment of the request . The VA may then send a request to a VA broker for assistance the broker then communicating with another target VA for fulfillment of the request. The results of the request may then be returned to the host VA for presentation to the user. Alternatively in some embodiments the broker assembles a list of virtual assistants that are likely to be able to satisfy a user s request that was submitted by the user s host virtual assistant and send this list of possible virtual assistants back to the host virtual assistant. The host virtual assistant may then select one of the virtual assistants from the list provided by the broker and contact that virtual assistant with the request directly typically using contact information such as IP address that is provided by the broker with the list of eligible virtual assistants . In other embodiments the host may exercise more direct control selecting a virtual assistant and connecting the host virtual assistant to the selected virtual assistant or even receiving responses to the user s request from a plurality of virtual assistants and returning either a list of responses with or without information concerning which virtual assistant provided each response or a single response selected by the broker.

The inventor has conceived and reduced to practice various systems and methods for operating virtual assistant networks.

One or more different inventions may be described in the present application. Further for one or more of the inventions described herein numerous alternative embodiments may be described it should be understood that these are presented for illustrative purposes only. The described embodiments are not intended to be limiting in any sense. One or more of the inventions may be widely applicable to numerous embodiments as is readily apparent from the disclosure. In general embodiments are described in sufficient detail to enable those skilled in the art to practice one or more of the inventions and it is to be understood that other embodiments may be utilized and that structural logical software electrical and other changes may be made without departing from the scope of the particular inventions. Accordingly those skilled in the art will recognize that one or more of the inventions may be practiced with various modifications and alterations. Particular features of one or more of the inventions may be described with reference to one or more particular embodiments or figures that form a part of the present disclosure and in which are shown by way of illustration specific embodiments of one or more of the inventions. It should be understood however that such features are not limited to usage in the one or more particular embodiments or figures with reference to which they are described. The present disclosure is neither a literal description of all embodiments of one or more of the inventions nor a listing of features of one or more of the inventions that must be present in all embodiments.

Headings of sections provided in this patent application and the title of this patent application are for convenience only and are not to be taken as limiting the disclosure in any way.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries logical or physical.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. To the contrary a variety of optional components may be described to illustrate a wide variety of possible embodiments of one or more of the inventions and in order to more fully illustrate one or more aspects of the inventions. Similarly although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may generally be configured to work in alternate orders unless specifically stated to the contrary. In other words any sequence or order of steps that may be described in this patent application does not in and of itself indicate a requirement that the steps be performed in that order. The steps of described processes may be performed in any order practical. Further some steps may be performed simultaneously despite being described or implied as occurring non simultaneously e.g. because one step is described after the other step . Moreover the illustration of a process by its depiction in a drawing does not imply that the illustrated process is exclusive of other variations and modifications thereto does not imply that the illustrated process or any of its steps are necessary to one or more of the invention s and does not imply that the illustrated process is preferred. Also steps are generally described once per embodiment but this does not mean they must occur once or that they may only occur once each time a process method or algorithm is carried out or executed. Some steps may be omitted in some embodiments or some occurrences or some steps may be executed more than once in a given embodiment or occurrence.

When a single device or article is described it will be readily apparent that more than one device or article may be used in place of a single device or article. Similarly where more than one device or article is described it will be readily apparent that a single device or article may be used in place of the more than one device or article.

The functionality or the features of a device may be alternatively embodied by one or more other devices that are not explicitly described as having such functionality or features. Thus other embodiments of one or more of the inventions need not include the device itself.

Techniques and mechanisms described or referenced herein will sometimes be described in singular form for clarity. However it should be noted that particular embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. Process descriptions or blocks in figures should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of embodiments of the present invention in which for example functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those having ordinary skill in the art.

As used herein virtual assistant means a software hardware or hybrid hardware software application that provides assistance to humans analogous to that provided by human assistants generally using an intuitive user interface such as one that allows a user to express her needs in natural language.

As used herein natural language interpretation means interpretation by a machine of one or a series of utterances made by a human user speaking or writing naturally in some cases natural language may be supplemented by gestural haptic or other input combined with natural language input for example saying move this here while pointing or clicking on an object and a later a location . That is a natural language interpreter generally does not require users to format their requests in simple fixed patterns such as a program might be required to do as for example when invoking a web service or an application programming interface API .

As used herein a dialog is a conversational exchange between two or more participants consisting of a generally unstructured sequence of natural language contributions in the form of requests responses statements and the like. A dialog is an interaction sequence that actually occurs i.e. in run time during a conversation exchange between a user and a natural language system.

As used herein a flow is a logical task unit comprising a set of related interaction steps required and preconfigured in order to perform a task. Typically a flow may comprise one or more transition conditions and operative nodes. A flow is typically defined in a natural language system as a series of predefined steps to perform when some triggering condition is satisfied.

As used herein an instructional path is a sequence of instructions from one or more flows that were invoked or executed during the delivery of a dialog by a natural language system. In effect an instructional path is the realization of one or more flows that occurs in an actual conversation or dialog between a user and a natural language system it represents the sequence of decisions or instructions taken in support of natural language conversation whereas the corresponding dialog is the actual sequence of what was said during the conversation by the parties involved rather than why it was said .

As used herein a natural language interaction system or a natural language system is a computer based system capable of interacting via dialogs with one or more users using natural language perhaps augmented by haptics gestures or other nonverbal means . Natural language systems carry out their function using dialogs which can be thought of also as the actual as executed sequence of interaction steps between a user and a natural language system. A natural language system may participate in a dialog by following the instructional steps of flows.

As used herein a language object means an abstract representation of a logical unit of human linguistic expression that has meaning and is suitable for processing by automated systems such as virtual assistants. Language objects in their simplest form are represented as single words that represent a plurality of variants of a single common meaning including inflectional variants and variants connected by synonymy. That is generally a language object represents all variants and synonyms of the core word that represents it and language objects may contain grammatical variants of words as well such as verb tenses contractions and so forth .

As used herein script means an executable sequence of instructions generally stored or at least rendered for execution as plain text which can be executed by an appropriate script interpreter. Scripts may be written in any scripting language known in the art such as Perl Python PHP Ruby Groovy and the like or in any similar scripting language including proprietary scripting languages. As described variously herein scripts generally are executed upon occurrence of specific events such as initiation or termination of a user interaction session or the triggering of a business rule such as execute the following script if the number of active sessions exceed a configured number . Scripts can be nodes in flows in which case they are referred to as script nodes .

As used herein request or question means a user supplied or automatically supplied input to a natural language interaction based system such as a virtual assistant or to a virtual assistant broker.

As used herein response means a system supplied output from a natural language interaction system as opposed to a user supplied or automatically supplied input .

As used herein condition means a rule or logical expression used for interpreting natural language utterances that if satisfied will allow for execution of one or more actions or will generate one or more effects. There are several types of conditions envisioned according to the invention comprising for example language recognition rules skip conditions and transition conditions.

As used herein a language recognition rule is a specific type of condition built up from language objects and used for capturing natural language expressions. For example a language recognition rule can be used to interpret or capture the intention of a user request.

As used herein trigger or a flow trigger is a construct which holds a condition and which makes the system activate and start executing a flow if the condition is fulfilled.

As used herein listener means is a rule construct with a conditional part and an operational part. When the conditional part is fulfilled the operational part is invoked or executed whereupon it updates current state based on information present in the current state and in the natural language input the user request . Listeners may be configured to operate on a global level on a flow level or on a transition level and they are generally evaluated in that order.

As used herein transition or transition condition means a condition that determines whether the system should pass a transition to enter a new instructive step or process a node or a new transition . Transition may be input consuming requires user input or non input consuming does not require user input . Transitions may comprise one or more conditions and transitions can follow each other directly.

As used herein skip condition means a condition that is verified prior to executing an instructive step i.e. entering a node for example of a flow . If the condition is met e.g. some values have already been set previous in the system the system will skip executing the instructional step and will continue as if it has already been executed.

As used herein small talk means generally off topic conversation elements that may be used to respond to user request. For example if during a flow devoted to making an airline reservation a user asks do you like to fly yourself a preprogrammed response or a random or other selection from a plurality of possible responses may be invoked which causes a response such as I never fly myself because I live in a machine .

As used herein safety net means a special flow type which is invoked when a user request fails to satisfy any condition i.e. no matches were found it is used to ensure that some form of response is made after which generally the last active flow is resumed where it left off.

As used herein an example input is a text sample that is used to describe build and test language recognition rules triggers and flows. Example inputs are typically obtained from text sample corpora which are often obtained for example from logs of actual interactions between users and service representatives such as agents handling chat interactions or phone calls which can be transcribed to generate example inputs . Typically an example input EI will belong to at least one group of EIs that are related to a specific part of a natural language solution such as a trigger and a language recognition rule the trigger s condition . So an EI may belong to a specific trigger of a flow and represents an example of what type of input should fulfill the language recognition rule of the trigger in other words the EI is assigned to a specific language recognition rule often this occurs automatically because the language recognition rules was auto generated from a set of example inputs each of which is then assigned as a positive example input for the language recognition rule by default. Each language recognition rule which can be linked to a trigger language object listener internal flow transition or a skip condition typically comprises four sets of assigned EIs positive local EIs that should match the language recognition rule when tested in isolation but may not necessarily trigger it when tested in the context of the whole solution negative local EIs that should not match it positive global EIs that should both match and trigger it and negative global EIs that maybe could match it but should never trigger it . Those sets may be empty. For example example input Insurance may trigger a general language recognition rule Vehicle insurance may fulfill a more specific language recognition rule and Car insurance may trigger the most specific rule of the three. In this situation the car insurance EI will always match the general insurance rule a designer can solve the implied conflict here by setting an ordering relation that always evaluates the car insurance rule before the more general insurance rule. In that way the more general rule is triggered only when the more specific condition isn t fulfilled. Alternatively systems according to the invention may automatically identify conflicts such as tangles and propose a new ordering relation that may be reviewed by a developer.

As used herein a dialog hand over is when a component that is communicating to a user passes communication control to another component.

As used herein a host VA is a virtual assistant that controls a dialog with a user. All communication with users typically goes via a host VA. In order to find a target VA virtual assistant the host may turn to a VA broker in a VA Network. The host may communicate with target VAs and VA brokers using a standardized inter VA communication protocol. The host decides when to initiate a dialog with a target VA when to forward a user s input to a target VA or a VA broker and how to handle a response from a target VA or VA broker e.g. display natural language response received from the target respond to a request from the target . The host decides when to drop the dialog with a target. A host VA may also be registered in a VAN as a target VA.

As used herein a target VA is a virtual assistant that makes its knowledge available to a network or that performs tasks on behalf of users at the request of a network. The target VA needs to be capable of communicating with other VA s and VA brokers using the inter VA communication protocol. The target VA informs a VA network of its areas of expertise via a VA Broker. A target may be available registered in multiple networks.

As used herein a VA broker assists host VAs and possibly other VA brokers in finding suitable target VAs in VA networks. A VA broker may determine the best suitable target VAs based on various criteria such as but not limited to the user s natural language input statistical information about VA targets user satisfaction usage patterns etc structured information provided by the host user preferences location details language preferences . A VA broker may have a register of target VAs with their associated capabilities. Alternatively in some embodiments the broker assembles a list of virtual assistants that are likely to be able to satisfy a user s request that was submitted by the user s host virtual assistant and send this list of possible virtual assistants back to the host virtual assistant. The host virtual assistant may then select one of the virtual assistants from the list provided by the broker and contact that virtual assistant with the request directly typically using contact information such as IP address that is provided by the broker with the list of eligible virtual assistants . In other embodiments the host may exercise more direct control selecting a virtual assistant and connecting the host virtual assistant to the selected virtual assistant or even receiving responses to the user s request from a plurality of virtual assistants and returning either a list of responses with or without information concerning which virtual assistant provided each response or a single response selected by the broker.

As used herein an inter VA communication protocol is a standard protocol used by VAs and VA brokers to exchange information. The protocol makes it possible for VAs of different vendors built using different technologies and targeted at different devices or interfaces to exchange relevant data in a structured manner.

Generally the techniques disclosed herein may be implemented on hardware or a combination of software and hardware. For example they may be implemented in an operating system kernel in a separate user process in a library package bound into network applications on a specially constructed machine on an application specific integrated circuit ASIC or on a network interface card.

Software hardware hybrid implementations of at least some of the embodiments disclosed herein may be implemented on a programmable network resident machine which should be understood to include intermittently connected network aware machines selectively activated or reconfigured by a computer program stored in memory. Such network devices may have multiple network interfaces that may be configured or designed to utilize different types of network communication protocols. A general architecture for some of these machines may be disclosed herein in order to illustrate one or more exemplary means by which a given unit of functionality may be implemented. According to specific embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented on one or more general purpose computers associated with one or more networks such as for example an end user computer system a client computer a network server or other server system a mobile computing device e.g. tablet computing device mobile phone smartphone laptop and the like a consumer electronic device a music player or any other suitable electronic device router switch or the like or any combination thereof. In at least some embodiments at least some of the features or functionalities of the various embodiments disclosed herein may be implemented in one or more virtualized computing environments e.g. network computing clouds virtual machines hosted on one or more physical computing machines or the like . Moreover in some embodiments one or more aspects or all aspects of the invention may optionally be implemented via a specially programmed chip for instance an application specific integrated circuit or ASIC or an erasable programmable read only memory or EPROM or via some other hardware only approach known in the art.

Referring now to there is shown a block diagram depicting an exemplary computing device suitable for implementing at least a portion of the features or functionalities disclosed herein. Computing device may be for example any one of the computing machines listed in the previous paragraph or indeed any other electronic device capable of executing software or hardware based instructions according to one or more programs stored in memory. Computing device may be adapted to communicate with a plurality of other computing devices such as clients or servers over communications networks such as a wide area network a metropolitan area network a local area network a wireless network the Internet or any other network using known protocols for such communication whether wireless or wired.

In one embodiment computing device includes one or more central processing units CPU one or more interfaces and one or more busses such as a peripheral component interconnect PCI bus . When acting under the control of appropriate software or firmware CPU may be responsible for implementing specific functions associated with the functions of a specifically configured computing device or machine. For example in at least one embodiment a computing device may be configured or designed to function as a server system utilizing CPU local memory and or remote memory and interface s . In at least one embodiment CPU may be caused to perform one or more of the different types of functions and or operations under the control of software modules or components which for example may include an operating system and any appropriate applications software drivers and the like.

CPU may include one or more processors such as for example a processor from one of the Intel ARM Qualcomm and AMD families of microprocessors. In some embodiments processors may include specially designed hardware such as application specific integrated circuits ASICs electrically erasable programmable read only memories EEPROMs field programmable gate arrays FPGAs and so forth for controlling operations of computing device . In a specific embodiment a local memory such as non volatile random access memory RAM and or read only memory ROM including for example one or more levels of cached memory may also form part of CPU . However there are many different ways in which memory may be coupled to system . Memory may be used for a variety of purposes such as for example caching and or storing data programming instructions and the like.

As used herein the term processor is not limited merely to those integrated circuits referred to in the art as a processor a mobile processor or a microprocessor but broadly refers to a microcontroller a microcomputer a programmable logic controller an application specific integrated circuit and any other programmable circuit.

In one embodiment interfaces are provided as network interface cards NICs . Generally NICs control the sending and receiving of data packets over a computer network other types of interfaces may for example support other peripherals used with computing device . Among the interfaces that may be provided are Ethernet interfaces frame relay interfaces cable interfaces DSL interfaces token ring interfaces graphics interfaces and the like. In addition various types of interfaces may be provided such as for example universal serial bus USB Serial Ethernet Firewire PCI parallel radio frequency RF Bluetooth near field communications e.g. using near field magnetics 802.11 WiFi frame relay TCP IP ISDN fast Ethernet interfaces Gigabit Ethernet interfaces asynchronous transfer mode ATM interfaces high speed serial interface HSSI interfaces Point of Sale POS interfaces fiber data distributed interfaces FDDIs and the like. Generally such interfaces may include ports appropriate for communication with appropriate media. In some cases they may also include an independent processor and in some in stances volatile and or non volatile memory e.g. RAM .

Although the system shown in illustrates one specific architecture for a computing device for implementing one or more of the inventions described herein it is by no means the only device architecture on which at least a portion of the features and techniques described herein may be implemented. For example architectures having one or any number of processors may be used and such processors may be present in a single device or distributed among any number of devices. In one embodiment a single processor handles communications as well as routing computations while in other embodiments a separate dedicated communications processor may be provided. In various embodiments different types of features or functionalities may be implemented in a system according to the invention that includes a client device such as a tablet device or smartphone running client software and server systems such as a server system described in more detail below .

Regardless of network device configuration the system of the present invention may employ one or more memories or memory modules such as for example remote memory block and local memory configured to store data program instructions for the general purpose network operations or other information relating to the functionality of the embodiments described herein or any combinations of the above . Program instructions may control execution of or comprise an operating system and or one or more applications for example. Memory or memories may also be configured to store data structures configuration data encryption data historical system operations information or any other specific or generic non program information described herein.

Because such information and program instructions may be employed to implement one or more systems or methods described herein at least some network device embodiments may include nontransitory machine readable storage media which for example may be configured or designed to store program instructions state information and the like for performing various operations described herein. Examples of such nontransitory machine readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as optical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM flash memory solid state drives memristor memory random access memory RAM and the like. Examples of program instructions include both object code such as may be produced by a compiler machine code such as may be produced by an assembler or a linker byte code such as may be generated by for example a Java compiler and may be executed using a Java virtual machine or equivalent or files containing higher level code that may be executed by the computer using an interpreter for example scripts written in Python Perl Ruby Groovy or any other scripting language .

In some embodiments systems according to the present invention may be implemented on a standalone computing system. Referring now to there is shown a block diagram depicting a typical exemplary architecture of one or more embodiments or components thereof on a standalone computing system. Computing device includes processors that may run software that carry out one or more functions or applications of embodiments of the invention such as for example a client application . Processors may carry out computing instructions under control of an operating system such as for example a version of Microsoft s Windows operating system Apple s Mac OS X or iOS operating systems some variety of the Linux operating system Google s Android operating system or the like. In many cases one or more shared services may be operable in system and may be useful for providing common services to client applications . Services may for example be Windows services user space common services in a Linux environment or any other type of common service architecture used with operating system . Input devices may be of any type suitable for receiving user input including for example a keyboard touchscreen microphone for example for voice input mouse touchpad trackball or any combination thereof. Output devices may be of any type suitable for providing output to one or more users whether remote or local to system and may include for example one or more screens for visual output speakers printers or any combination thereof. Memory may be random access memory having any structure and architecture known in the art for use by processors for example to run software. Storage devices may be any magnetic optical mechanical memristor or electrical storage device for storage of data in digital form. Examples of storage devices include flash memory magnetic hard drive CD ROM and or the like.

In some embodiments systems of the present invention may be implemented on a distributed computing network such as one having any number of clients and or servers. Referring now to there is shown a block diagram depicting an exemplary architecture for implementing at least a portion of a system according to an embodiment of the invention on a distributed computing network. According to the embodiment any number of clients may be provided. Each client may run software for implementing client side portions of the present invention clients may comprise a system such as that illustrated in . In addition any number of servers may be provided for handling requests received from one or more clients . Clients and servers may communicate with one another via one or more electronic networks which may be in various embodiments any of the Internet a wide area network a mobile telephony network a wireless network such as WiFi Wimax and so forth or a local area network or indeed any network topology known in the art the invention does not prefer any one network topology over any other . Networks may be implemented using any known network protocols including for example wired and or wireless protocols.

In addition in some embodiments servers may call external services when needed to obtain additional information or to refer to additional data concerning a particular call. Communications with external services may take place for example via one or more networks . In various embodiments external services may comprise web enabled services or functionality related to or installed on the hardware device itself. For example in an embodiment where client applications are implemented on a smartphone or other electronic device client applications may obtain information stored in a server system in the cloud or on an external service deployed on one or more of a particular enterprise s or user s premises.

In some embodiments of the invention clients or servers or both may make use of one or more specialized services or appliances that may be deployed locally or remotely across one or more networks . For example one or more databases may be used or referred to by one or more embodiments of the invention. It should be understood by one having ordinary skill in the art that databases may be arranged in a wide variety of architectures and using a wide variety of data access and manipulation means. For example in various embodiments one or more databases may comprise a relational database system using a structured query language SQL while others may comprise an alternative data storage technology such as those referred to in the art as NoSQL for example Hadoop MapReduce BigTable and so forth . In some embodiments variant database architectures such as column oriented databases in memory databases clustered databases distributed databases or even flat file data repositories may be used according to the invention. It will be appreciated by one having ordinary skill in the art that any combination of known or future database technologies may be used as appropriate unless a specific database technology or a specific arrangement of components is specified for a particular embodiment herein. Moreover it should be appreciated that the term database as used herein may refer to a physical database machine a cluster of machines acting as a single database system or a logical database within an overall database management system. Unless a specific meaning is specified for a given use of the term database it should be construed to mean any of these senses of the word all of which are understood as a plain meaning of the term database by those having ordinary skill in the art.

Similarly most embodiments of the invention may make use of one or more security systems and configuration systems . Security and configuration management are common information technology IT and web functions and some amount of each are generally associated with any IT or web systems. It should be understood by one having ordinary skill in the art that any configuration or security subsystems known in the art now or in the future may be used in conjunction with embodiments of the invention without limitation unless a specific security or configuration system or approach is specifically required by the description of any specific embodiment.

In various embodiments functionality for implementing systems or methods of the present invention may be distributed among any number of client and or server components. For example various software modules may be implemented for performing various functions in connection with the present invention and such modules can be variously implemented to run on server and or client components.

In order to formulate one or more appropriate responses to request natural language interaction engine carries out a process that may be broadly described as taking place in three steps. First natural language interaction engine analyzes request to determine its meaning usually by determining the user s intent . Analysis may require preprocessing for example to convert a spoken request into a textual form suitable for further analysis although it should be noted that in some embodiments audio data obtained from a spoken request could be analyzed directly using one or more speech analytics technologies known in the art . Analysis typically involves parsing request and then analyzing its semantic content to determine one or more possible user intentions that motivated request . In many cases this may be straightforward for instance a request might be Please set my alarm for 8 am and accordingly the user s intent would easily be understood once the sentence was parsed but in other cases it might be anything but straightforward for instance a user might say Get out of here which has several possible intentions depending on context . Thus it could be that output from analysis could involve a certain amount of uncertainty for instance in cases where an output of analysis step comprises a list of possible user intents perhaps with weights indicating their likelihood of being the user s actual intention.

Once analysis is completed natural language interaction engine may undertake a reasoning step to further elaborate or to better determine user intent. Interaction engine may use advanced linguistic interpretation and business rules to simulate intelligent thinking allowing interaction engine to appear to reason like a human and to determine a most appropriate way to respond to a user request . During this reasoning process interaction engine may take into account many contextual factors such as date time location of user entities and facts discussed in a current or recent dialog active flows local context global context information picked up in previous dialogs data about a user and the like. In addition inferences may be drawn based on data about one or more users for example when users do this they normally also want to do that . For example if a user inquires about next year s insurance premium interaction engine may understand context of next year but may need to seek clarification about whether the user is asking about home or motor insurance. In general the goal of reasoning is to reduce ambiguity about what a user meant in request and to apply rules or other logical processing to take into account the extended context in which request was made in order to facilitate the final step of reacting . Once user intent is understood and relevant context has been taken into account natural language interaction engine may select and execute appropriate actions needed to react to request . Suitable reactions may be to give an appropriate verbal textual visual or haptic response to ask for more information to disambiguate user intent when for example disambiguation could not be carried out during reasoning step to open a webpage to play a video to open another application to automatically fill in a form to invoke or update or interact with a third party service to perform some form of multimodal output or to execute a transaction for example by updating a database or by integrating with one or more backend or e commerce systems. These three steps analyze reason and react may all happen seamlessly in milliseconds with interaction engine able to handle thousands of interactions simultaneously or they may occur over an extended period of time depending on context and the state of the device being used or its connectivity.

Interaction environment normally comprises a dialog interface and an interaction processing core engine . Dialog interface performs functions necessary for media specific interactions with users. A principal role of dialog interface is to receive input from a user in order that interaction engine core can successfully determine a user s meaning and the user s intent and to provide feedback or responses back to the user. For example when interactions are conducted using speech interfaces interaction may be either via a phone for example when a virtual assistant is used in place of a conventional IVR application or via a dedicated voice application for example when a user of a mobile application or a web site interacts with a virtual assistant using an application and no phone is involved . In either case or indeed in other cases such as embodiments where other means of exchanging voice communications via audio signals of which many are known in the art are used such as interaction with a building control virtual assistant using an intercom system it is generally necessary to convert speech input into some form of text and conversely to convert text output into some form of speech output although it should be noted there are limited means known in the art for analyzing speech signals directly known in the art as speech analytics technologies and these could be used directly to infer user meaning and intent . Normally this is done by a voice to text conversion layer within dialog interface comprising an automated speech recognition ASR engine and a text to speech TTS engine . Many of each of these components are well known in the art such as those available from Nuance Acapela Ispeech Google and other vendors any suitable ASR and TTS engines may be used according to the invention. In some embodiments ASR and or TTS are deployed integrally to system as shown in while in others they may be deployed as separate services delivered over a network such as the Internet or a telecommunications network such external services architectures may employ ASR or TTS provided by one or more third party service providers. Input may also be received and output sent via text based media channels such as dedicated virtual assistant interfaces for instance when a virtual assistant equipped with a graphical avatar is embedded in a web site and when activated by a user is interacted with directly a social media interface such as Facebook LinkedIn Twitter and the like or any of a number of other text based media channels known in the art but not shown in such as for example text based interaction with a virtual assistant from within a document such as a word processing document a spreadsheet document or a presentation document kiosks such as at airport check in counters and so forth .

Once input has been received it is passed as input to interaction engine core where it is reacted to and one or more responses may be generated. When responses are generated and sent to dialog interface they are converted using TTS to speech form or spoken output if required and delivered to a user via either or both of a voice application or a phone or if response is already in textual form it is passed directly to a text based output channel such as email virtual assistant social media and the like. As a further example illustrating how natural language interpretation can be used to enrich multimodal user interactions consider a combination mobile phone application that proceeds as follows. First a user presses a button to initiate the application which displays or plays a welcome prompt or both to the user. The user may say an utterance expressing her intent or goal for example I would like to arrange travel to Berlin tomorrow morning. The application may then display a selection of radio button style choices on the screen of the mobile phone for example comprising Flights Hotel Car Transport and Recommended . At substantially the same time the application may speak a phrase such as Where would you like to start to make travel plans Select a button or tell me what you want to do. The user and the application may throughout the subsequent interaction use a blend of spoken text and haptic interface conventions to exchange information and satisfy the user s original and any subsequently arising intention . Thus it can be seen that many examples of natural language interaction applications envisioned by the inventors may involve multimodal interactions comprising two or more interface modalities such as speech text buttons images videos vibrations sounds and so forth .

When input is received by interaction engine core it is generally first handled by an input interpretation module which manages the process of handling inputs making various calls to one or more services of natural language interpreter core NLI core which services and associated processes are described in more detail below in order to determine one or more meanings of a user s input and to infer therefrom the user s intent. That is a goal of input interpretation module is to understand what a user wants in order that NLI core in conjunction with input interpretation module can formulate one or more appropriate responses to input . Once a response type or the content of a response is determined output generation module is tasked with creating an appropriate response which can then be sent to dialog interface for delivery in an appropriate medium or via an appropriate channel to the requesting user. In general every time input interpretation module receives and processes a user input and every time output generation module formulates a response and sends it to dialog interface log file generation module generates one or more log files in order to capture a history of interactions between users and natural language interaction applications. In addition more or less detailed information pertaining to processes carried out by NLI core is passed to log file generation module as well in order that not only what transpired is recorded that is the inputs and outputs but also how it was done and why that is a history of decisions made rules and flows executed variables set and so forth in NLI core is captured . NLI core may in order to process user inputs or to create responses require access to one or more external data sources or external services such access is provided by one or more connection APIs which manage interactions between NLI core and possibly also input interpretation module and output generation module and external data sources and services. Such external entities may comprise a plurality of enterprise applications such as customer relationship management CRM systems transaction management systems trouble ticket tracking systems inventory management systems and so forth it will be appreciated by one having ordinary skill in the art that essentially any enterprise or third party applications may be interacted with using standards based APIs or other integration technologies and thus any such enterprise applications known in the art may be used by interaction engine as needed to serve users . Such external entities may also comprise a plurality of third party cloud based applications or any other third party services or applications accessible via public or private interfaces whether standards based or proprietary subject only to findability and security constraints.

NLI core when processing requests received after preprocessing from input interpretation module uses one or more solution data repositories or simply solutions that it loads as required. Solutions generally comprise various combinations of business rules integrations that is configuration data necessary to carry out communications via connect APIs with enterprise applications third party cloud applications and the like custom objects such as script objects used to encapsulate frequently used functionality domain objects which are collections of ontologies or ontological data sets that represent knowledge about one or more subject domains such as travel finance heart health furniture and so forth language recognition rules built up from language objects which may comprise a large number of formal models of various language elements for one or more languages language objects will be discussed in detail below and flows . These solution data components in turn may be preloaded as standardized knowledge bases when a natural language interaction application is created or they may be hand crafted by one or more natural language interaction NLI developer within build environment or both it is quite common to start with a prebuilt set of knowledge base components and then to add new components or extend the added components from within build environment or part of it can be automatically generated according to the embodied invention.

Build environment comprises several components organized in a preferred embodiment into a single application sometimes referred to as a studio from which an NLI developer may access client knowledge and data domain libraries and language libraries . Build environment typically comprises a graphical coding tool and one or more automated testing tools . Thus in a typical scenario a developer building a new natural language interaction application such as a virtual assistant would within a coding tool in build environment load one or more prebuilt language libraries and domain libraries edit these based on available client knowledge and data and then test the resulting knowledge base using one or more automated or manual testing tools in order to test the behavior of her new application prior to its use. Once satisfied with a new solution and with the associated application s behavior the developer would publish knowledge base which would then be available for NLI core to load and use in handling user requests . A key benefit of the build environment approach envisioned by the inventors is that it enables NLI developers who are not necessarily research scientists such as computational linguists to rapidly prototype test refine and then tune natural language interaction applications for particular domains or business needs. This makes it possible to move natural language interaction application development from being an activity typical of linguistic experts with technical skills to one practiced commonly by user without technical or linguistic skills and users such as businesses large and small and other organizations desiring to use natural language interaction applications in production.

According to a preferred embodiment of the invention the process just described is part of an overall closed loop process. The loop is made closed by the availability of an analytics framework which can be used to automatically or manually analyze natural language interaction application performance in order to eliminate poorly functioning dialog elements improve customer satisfaction and so forth. Analytics framework generally takes as input a plurality of log files generated by log file generation module although in some embodiments analytics framework may take input directly in real time from interaction engine for example by receiving requests responses raw user inputs and processed outputs to users as they occur directly from the corresponding components of interaction engine and of course diagnostic information about decision making and operational processes occurring within interaction engine could similarly be obtained as they occur . Thus the log file driven architecture shown and discussed herein should be taken as exemplary and not limiting. In various embodiments analytics framework may comprise one or more of a top response analysis module a dialog browser a category analysis module a log file loader a report generator and a time based analytics module . In any particular embodiment of the invention some most or all of these components may be present within analytics framework moreover in some embodiments one or more of these components or other analytical components known in the art such as business intelligence engines datamarts and the like may be implemented as standalone components separate from analytics framework including for example delivery as web based or cloud based services from a third party analytics platform provider. It should be apparent to one having ordinary skill in the art that any combination or architecture of these and other analytical components may be used according to the invention and that the particular arrangement shown in is intended to be exemplary and not limiting.

Top response analytics module is a software module that computes a ranked list of responses generated by interaction engine to user requests in many embodiments a corresponding ranked list of requests that led to a particular response may be provided often by provision of a drill down capability so that when viewing a ranked list of responses a user may right click or take some other action to see what requests led to that response most commonly . Responses and corresponding requests may be ranked according to one of many numerical or qualitative parameters such as most popular most used most often abandoned from most often viewed most often complained about or any other similar ranking metric. Top response analytics module may automatically generate and maintain ranked lists of responses or may do so on request from an analyst or other authorized user or both . In some embodiments users may be allowed to specify one or more custom ranking criteria as long as they are susceptible of measurement based on data received from interaction engine such custom rankings may be conducted on an ad hoc basis although useful rankings may be added to the last of available standard rankings and could be added to any automated ranking processes as well if desired.

Dialog browser is a user interface element that allows an analyst or other authorized user to view or hear one or more interactions or dialogs between users and natural language interaction applications. Users may be allowed to request random interaction sessions in which case one or more sessions would be displayed for viewing at a time such a view would be useful for example to a marketing analyst who wants to see how users interact by randomly browsing among user experiences. Users may also select one or more sessions for viewing or listening based typically on any of a wide range of filters or selection criteria made available through a user interface of dialog browser . For example a user could request to view all interactions with a specific user or with a specific user application pair or relating to a particular subject such as a particular product or small talk and so forth. Users may also request a specific interaction by providing a time or a session identifier or a customer name and a time or any other filtering arrangement that can distinguish the desired session from all others.

Category analysis module is typically a graphical user interface component that allows an analyst or other authorized user to view one or more or all sessions or interactions that pertain to a particular category such as a category within a domain model for instance by requesting to view a sampling of sessions involving furniture related questions . Users of category analysis module may be able for example to view all or a set of sessions or to view aggregated numerical data pertaining to such sessions that were about home equity loans. While viewing such a set of data or sessions the user might be able to explore for example whether certain questions related to home equity loans are more commonly received from customers that are actually considering taking out such a loan this might be determined for example by displaying columns of data about probability of loan application being taken and probability of closing of loan applications taken and allowing a user to rank sessions by one or another column in order to understand such patterns. It should be clear to one having ordinary skill in the art of data analytics that there are many ways of viewing and analyzing data of this type any of which may be included in category analysis module according to the invention.

Time based analysis module is typically a graphical user interface element that allows an analyst or other authorized user to configure conduct schedule and view the results of various analyses of one or more time based behaviors of natural language interaction applications and or their users. For example time based analysis module may in some embodiments be used to identify trends in user behavior such as the emergence of new dominant questions or shifts in linguistic usage over time. Another example likely to occur quite readily would be the use of time based analysis module to study assimilation of new application capabilities upon their introduction in one or more natural language interaction applications. When new capabilities for instance new language models improved business rules richer interaction modality options or expansion of domain coverage are added to an application such as a virtual assistant their use by those who interact with the modified natural language interaction application is likely to vary over time as more and more users become accustomed to the new capabilities such user assimilation can be studied to learn how long to wait before expecting changes in user behavior such knowledge would be quite useful in avoiding for example the premature termination of an experimental feature which might occur if knowledge engineers misunderstood a normal uptake curve for lack of user interest . Similarly in some embodiments time based analysis of users natural language inquiries may uncover emerging linguistic elements such as the emergence of new buzzwords common off topic questions such as What do you think of the Avengers movie or topics of interest any of which might suggest modifications to knowledge base to maintain a high degree of user acceptance and virtual assistant fluency .

Report generator is typically a graphical user interface element that allows an analyst or other authorized user to design configure schedule edit manage distribution of or view one or more periodic or ad hoc reports regarding operation of interaction engine or virtual assistants hosted by it. Similarly to output from time based analysis module reports generally prove very useful in detecting trends or emerging problems with natural language interaction applications language or domain models or the infrastructure or applications of interaction engine . For example a report might provide tabular and graphical data pertaining to the number of occurrences of various types of interactions using one or more applications and data for each row or category of interaction for each time period might include items such as the number and or percentage of sessions that terminated either prematurely or in an unexpected way the number of sessions that resulted in or involved a product sales inquiry the number of those that resulted in a sale and so forth. It is common in the art for reports to be useful in understanding such issues as diurnal patterns of user behavior for example users might be more likely to conclude purchases during early evening hours and might engage in a higher level of off topic small talk in the hours after midnight . It should be clear to one having ordinary skill in the art that any of the many infrastructure data presentation drill down and drill up filtering and other options known in the well developed art of enterprise application reporting may be used according to the invention. Of course the range of inferences that might be made through use of analytics based on natural language interaction engine data is quite broad. For example in some implementations it may be desirable to identify particular channels media types such as email phone kiosk instant messaging and so forth particular operating systems particular browsers and similar specifics regarding a plurality of users. As an exemplary use of such data it may be that users of Macintosh computers from Apple might be found to demonstrate certain typical habits and preferences knowledge of which might allow for effective tailoring of natural language interaction engine to better serve those customers.

Log file loader is typically a graphical user interface element that allows an analyst or other authorized user to manage the configuration and scheduling of log file loading or to configure real time data acquisition when that approach is taken to gathering data from interaction engine and to carry out ad hoc log file activities such as log file pruning exporting of log files to other systems archiving or configuring archival of log files onto long term storage systems and so forth.

In most embodiments the various components of analytics framework are tightly coupled for instance by allowing an analyst or other user to move directly from one tool or view to another with a simple user interface action such as selecting a button choosing a tab or picking a different view from a context sensitive menu. For example a user viewing a list of sessions in a category analysis screen might select one or more sessions from a list for example by shift clicking them using a mouse or using a check button interface element and then select browse dialogs to view the selected sessions in dialog browser . It should be appreciated by one having ordinary skill in the art that many styles of linking of related user interface elements and analytic functionality exist in the art any of which may be used according to the invention.

According to the embodiment build environment may be used to develop and deploy natural language applications such as application A and application B . In some embodiments natural language interaction engine is a mobile application that is deployed from an application store or downloaded directly from a web site or other source by a user and that interacts with one or more separate mobile applications using data from one or more solutions . In other embodiments solutions and might be loaded directly into applications and respectively. In yet other embodiments a solution and a natural language interaction engine may be embedded fully into a standalone mobile application while in other embodiments individual solutions may be deployed either as separate mobile applications that interact with engine or as modules that are downloaded to device and installed as add ons to engine . Build environment will typically comprise exemplary features described above with reference to . When a developer has completed and tested a natural language application such as a virtual assistant then mobile ready application deployment may be carried out across one or more data networks or mobile telephony networks to deliver the resulting application to a plurality of mobile devices either on demand as implicitly needed or via for example the mediation of an app store such as are well known in the art in which case typically a user of mobile device would explicitly select a mobile ready natural language application and upload it to her mobile device . According to the embodiment natural language applications need not be tightly bound in a one to one relationship with solutions such as solution and solution . For example solution might be a travel related solution comprising elements such as those described above with reference to item in and solution might be a credit card transaction solution. Both solution and solution may be deployed either permanently or temporarily under user of system control on a single mobile device and indeed a plurality of other solutions may be as well limited only by available resources on mobile device . Continuing the example application A might be an airline reservation application perhaps provided by an airline itself or by a third party application vendor which might make use of language recognition rules and flows among other items from both solution for travel related flows and solution for credit card transaction related flows . Similarly application B might be a virtual assistant application using natural language user interaction facilitated by natural language interaction engine . Such a virtual assistant application might only occasionally have need to use solution for example when the user of mobile device desires to set up a flight itinerary using virtual assistant application similarly virtual assistant might also have occasional need for solution to conduct credit card transactions whether or not related to travel . Thus it should be clear to one having ordinary skill in the art that a plurality of solutions may be deployed on mobile device and that these solutions may make their capabilities available to all or a portion of a plurality of natural language applications deployed on mobile device . Moreover natural language applications may typically be provided with access generally subject to application based or user role based security restrictions imposed by mobile device to device specific data such as location data device orientation and other environmental data map data stored on or accessible via mobile device and so forth or user specific data such as a user s address phone number location history preferences or even sign on data to various online services such as Twitter Facebook and the like . Thus shows a valuable embodiment of the invention in which a user of a mobile device even when only intermittently connected to the Internet or a mobile telephony network may enjoy rich natural language based applications with low latency resulting from their residence on the mobile device itself while still being able to invoke or utilize any number of network resident services such as ASR and other third party services or servers .

Virtual assistant mediator VAM facilitates communication between one or more PAs one or more CAs and or one or more external services . To facilitate communications VAM uses PA descriptions stored in PA description database to understand the preferences for example a preferred external service such as Expedia.com for travel arrangements relationships to other PAs for example virtual assistants of friends and colleagues preferred CAs for example a virtual assistant that relays stock quotes that uses a particular celebrity s voice pattern and the like. Furthermore VAM uses CA descriptions stored in CA description database to be informed of what services may be available. Virtual assistant network provides task repository that contains application logic and natural language understanding rules that can be downloaded and or integrated into one or more PAs one or more CAs or to external services as needed. VAM auto generates natural language recognition rules for each task and adds it to task repository for example product names that are not standard language words may require specific natural language recognition rules . Usage process records details on the usage and interaction of virtual assistant network for example which PAs connected to which CAs survey information about a CA or an external service trust parameters satisfaction parameters connectivity issues and other information and saved for analytic purposes to usage database . Communication between one or more PAs CAs external services interface and or other system components is routed via VAM . In some embodiments VA network administrator may manually process a request forwarded by VAM . For example VA network administrator adapts PA natural language recognition rules to user s profile for example adapting to a specific dialect or difference in standard vocabulary or enables and customizes one or more external services for example access to a subscription only investment brokerage website . In another embodiment VA network administrator may enable a human process to provide input to aid in a request by PA where an automated process may not be able. For example if a web service requires captcha input that is a type of challenge response test used in computing as an attempt to ensure that the response is generated by a human .

To prevent session hijacking that is to gain unauthorized access to information services or components in virtual assistant network PA may disconnect from CA or another PA at any time for example by giving a certain command or based on some alarm or threshold .

In order to facilitate service CA may connect to an external service via one or more external services interface . For example a request from user for PA to order a pizza may access an online mapping service such as Google Maps to determine which pizza vendor may be closest in proximity. In this example the vendor has a web services interface that may be used by PA to fulfill the request. In another embodiment a vendor may already have CA that can be used to interface with PA to fulfill the request or a dialog hand over happens and user directly with CA .

In another embodiment virtual assistant may handle intermittent connectivity and be able to continue processing requests from user that require connection when connectivity resumes. For example user may request virtual assistant to block off time in her calendar. In this example this request happens when virtual assistant is unable to connect to user s calendar. As such virtual assistant may add the calendar task to task repository . When connectivity resumes virtual assistant sees the task in the task repository and completes the request.

In some embodiments virtual assistant may for example be configured with rules as to when to resume a dialog. For example in the above example virtual assistant may not have resumed the dialog after the uttered departure date had passed for the intended flight.

In another embodiment virtual assistant may for example simply state that there is an unfinished dialog.

In another embodiment virtual assistant may for example not resume a task based on the capability of user device that may not be capable of enabling the successful outcome of the request.

In another embodiment virtual assistant may for example prioritize unfinished dialogs and present them to user in order of priority or some other desired order.

In another embodiment virtual assistant may for example collect actions that require connections and not revisit those dialogs with user until connectivity is available.

In another embodiment user may for example explicitly tell virtual assistant in natural language to postpone the task for example let s talk about that later .

In another embodiment user may for example stop the dialogue with virtual assistant for example by uttering a command or interaction via an interface on user device .

In another embodiment dialogue between user and virtual assistant may be interrupted by some external factor for example an incoming call on mobile device 

In another embodiment dialogue between user and virtual assistant may be interrupted by user being for example distracted and not responding to virtual assistant .

In another embodiment dialogue between user and virtual assistant may be interrupted by the connection between the user and virtual assistant network shuts down.

In a preferred embodiment tasks and or dialogs can be resumed by user or virtual assistant network for example when 

In some embodiments tasks might be device dependent and may not be resumed on another device. For example a task started on user device i.e. a laptop computer may not be resumed on user device i.e. automobile navigation system 

As further illustrated a VA broker may be utilized such as to facilitate management of a VAN or to assist in optimal routing of networked operations. For example a VA broker may maintain a repository of information related to specific VAs within a network such as their respective capabilities or knowledge bases and may use this information to optimally handle requests as needed. As an example if a host VA is given a request it is unable to fulfill or optionally that it may be capable of fulfilling but to an unacceptable degree as might be configured to optimize customer satisfaction with assistant interactions a request complying with the inter VA communication protocol might be sent to a broker for assistance. The request may contain a natural language expression and additional structured data. Based on the data in the request and known information about the VAN the broker may then find and return information about one or many suitable VA s for fulfillment. The host VA may decide whether to forward the request to any of the suggested target VAs. If so the host VA communicates with the target VA using the standardized inter VA protocol. Alternatively the VA broker may return a list of target VAs to the host VA the list comprising target VAs that it determines may be likely to be useful in satisfying the request sent by the host VA. The communication between the user and the target VA is done via the host VA. In this preferred embodiment the host VA exercises full control over selection of a target VA to fulfill the request. In other embodiments the host VA may evaluate the suitability of a plurality of target VAs and then select a specific target VA and send the relevant information regarding the selected target VA to the host VA. In yet another embodiment the VA broker may receive responses from a plurality of target VAs to whom it sent a request received from the host VA and then select from among the received responses that response which is believed to be most suitable for the received request and send the selected response to the host VA. Again it will be seen that the host VA controls the actual user interaction. When a host VA receives a list of eligible target VAs from a broker the host VA decides when to initiate the dialog with a selected target VA in this case selected by the host VA possibly as a result of user interaction when to forward a user s input and how to handle a response from a target example display natural language response received from the target respond to a request from the target . The host VA decides when to drop the dialog with a target based for example on signals from the user signals from the target or other reasons decided upon by the host VA. In this manner it can be appreciated that networked virtual assistant operations may be further optimized through the use of a broker to increase efficiency and relevancy but that a broker need not be required for a VAN to operate as the VAs may be able to communicate between themselves as described previously .

A period of time passes for example several hours and in step user connects to virtual assistant via user device for example a tablet device . In step virtual assistant identifies an unfinished task in task repository and notifies user that there is an unfinished task. For example virtual assistant utters at which location would you like your dinner party. User may in step decide to not continue with the unfinished task and utter a new request to virtual assistant . Alternatively user may choose to continue the unfinished task in step . If so virtual assistant interacts with user to discover the remaining details of the request for example location and time of dinner party etc. . Virtual assistant may connect to other PA CA and or external services to complete the request. When completed the interaction between user and virtual assistant terminates in step .

User interfaces to virtual assistant process by means of voice text tactile and or video input or a combination of one or more methods or by some other means to request processing of one or more tasks herein referred to as the task . For example a task to book a flight or a task to make dinner reservations. Virtual assistant core understands the task for example through the use of automatic speech recognition and determines how best to process the steps to complete the task. In some embodiments a task may require virtual assistant core to interface to other virtual assistant for example a virtual assistant that may be interfaced to expert system with specific or unique capability such as a virtual assistant for a furniture company with special information on furniture sales information via virtual assistant network interface and or external service via external device interface for example information from a device connected to the internet such as a traffic camera via connected devices interface to process and complete the task. In some embodiments virtual assistant process may not have a suitable connectivity to other elements required to complete the task. For example in the case where information from an external service via external device interface is required external service may require internet connectivity to receive the information required to complete a task for example images from a traffic camera to determine traffic patterns along a planned route . In another embodiment a connection to a virtual assistant on a social network of virtual assistants via virtual assistant network interface may be required to complete a task. In the instances where connectivity is not available virtual assistant core may add a task to task queue . In some embodiments user may indicate a priority for a task using a one or more interfaces to assign a priority for example user is given a choice via a graphical user interface or via voice command to indicate low medium or high priority . User priority process associates a priority to a task record in task queue . Once a task is added task queue effort score calculator determines what may be required to complete the task. For example one or more of the following attributes may be stored as parameters of a task to identify effort required to complete a task and assist in determining when and under what conditions tasks may be performed 

In addition to the above attributes connectivity process determines a more detailed connectivity requirement for each task to more accurately assist in determining a priority for a task 

In a particular embodiment connectivity process may predict when connectivity may be available next by using location information from location awareness process . For example in the case where user may be currently offline but requesting tasks from virtual assistant process and may be in a state of motion for example user may be on a train headed towards a metropolitan area connectivity process may use location information to determine the amount of time to be within range of known mobile of Wi Fi networks or some other form of connectivity in order to start or continue processing tasks that may have been requested while user virtual assistant process was not connected or continue processing a task that virtual assistant process may have been processing previously and connection lost. In some embodiments connectivity process may assume that there will be connectivity available given location information from location awareness process even if it may not known for sure that connection may become available. In a particular embodiment location awareness process may use other information for example speed direction and the like to estimate when connectivity on network interface may be available. In some embodiments virtual assistant process may notify user of a predicted time to connectivity that is how long it may be until virtual assistant process may establish a connection to one or more networks required to complete tasks .

Once effort score calculator has determined details and environment that may be required to perform and complete a task effort score calculator computes an effort score for example how long a task may take to complete what type of connection is required etc. Effort score calculator may store an effort score for each task in task queue . In some embodiments a duration required to complete a task may be stored for each task in task queue . In a particular embodiment effort score calculator will may be required for a task where a priority was set by user using user priority process .

Once a plurality of tasks are stored in task queue reprioritization process may determine that a reprioritization of tasks may be required. For example if connectivity is intermittent through network interface for example connectivity availability is unpredictable and may connect and disconnect at unpredictable periods reprioritization process may reprioritize tasks so that tasks with lowest effort scores may be attempted first. For example a task where a length of time to complete is minimal and or where minimum amounts of data transfer may be required may be prioritized.

In a particular embodiment user priority process may override reprioritization process with an urgent task. For example if user requests virtual assistant process to prioritize a task herein referred to priority task to completion before all other tasks reprioritization process will keep priority task in the first position that is the current task to attempt to complete by virtual assistant process . In a particular embodiment a priority task may be set to a high priority. In this case user priority process may increase the priority of priority task so that it gets the majority of processing time while still allowing reprioritization process to process other tasks based on attributes of all tasks in task queue and current environment parameters for example time left until next connectivity with a long duration .

In a particular embodiment reprioritization process may prioritize tasks in task queue based on connectivity speeds. For example if there are tasks with low data requirements said tasks would be prioritized before tasks that may require a large amount of data to be transferred.

In a preferred embodiment when a task is not complete and network interface loses connectivity to the required network the task will be marked as incomplete in task queue . When connectivity is re established on network interface reprioritization process may keep said task as top priority or in some situations another task may take priority based on environmental parameters. For example a connection where it is predicted that connectivity may not be active for the duration required for an unfinished task a task with a low effort score may then be prioritized. The unfinished task may be attempted again when a suitable connection via network interface is available.

In a particular embodiment virtual assistant core may provide a report to user on the status of tasks in task queue . For example a list may be presented with a list for example via a graphical user interface such as a screen of a tablet device of tasks that may have been completed a percentage completion on tasks that may only be partially complete and a list of tasks that where processing may not have been attempted.

In a another embodiment virtual assistant core may present estimations on when tasks can be completed and presented to user for example by uttering voice signifying as such .

In a preferred embodiment reprioritization process may be continuously adapting and reprioritizing tasks based on data available about tasks and the current environment such as the status of connectivity. For example using predictive elements such as when the next time network interface will have a connection to a required network and types of connectivity available for example Wi Fi GSM and the like .

Referring back to step if it is determined that there is no connectivity on network interface using location data obtained in step connectivity process may calculate in step a predicted time to when network interface may have connectivity. In this example reprioritization process may reprioritize tasks in task queue based on the predicted connectivity attributes for example connectivity process may have predicted that network interface may have connection in five minutes and based on location information from location awareness process connection will stay active for only several minutes. In this example reprioritization process may reprioritize tasks in task queue as more information becomes available. In step connectivity predictions are stored in usage database via usage process . In a particular embodiment usage database may reside on a laptop that may also be executing a virtual assistant process or some other portable device . Once connectivity is established on network interface step compares predictions made in step to actual data of when connectivity was established duration of connectivity and any other predictions that were made by connection process . As such prediction algorithms are updated as necessary. In a particular embodiment historical data will be looked up as needed and used to predict connectivity attributes for said location for future task processing requirements by task process .

It will be appreciated by one having ordinary skill in the art that other modes of communication and control are possible. For example while normally a host VA is in control throughout the process selecting a target VA from a list provided by a VA broker controlling the user dialog and determining precisely how a response received from another VA i.e. a target VA is actually presented to the user and so forth. Alternatively a VA broker may send to the host VA instead of a list of target VAs a list of responses received from a plurality of target VAs and the host VA can then select the response it prefers. Or the VA broker can evaluate a set of responses to a request that is received from a plurality of target VAs and the VA broker makes the selection of the best response then sending only the selected response to the host VA. Many variations are possible as should be evident.

It should also be apparent that among other things a plurality of virtual assistant networks operating as described herein may in effect provide a network of knowledge wherein a user can interact with a host VA by querying it for information and the host VA can access a potentially very extensive network of VAs each of which possesses at least a knowledge base thereby making the entire network of knowledge bases accessible in a natural way to a user via a single virtual assistant user interface.

The skilled person will be aware of a range of possible modifications of the various embodiments described above. Accordingly the present invention is defined by the claims and their equivalents.

