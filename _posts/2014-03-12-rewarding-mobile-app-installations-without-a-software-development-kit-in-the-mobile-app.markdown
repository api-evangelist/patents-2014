---

title: Rewarding mobile app installations without a software development kit in the mobile app
abstract: In an embodiment, a method comprises transmitting, from a mobile computing device to a server computer, first data identifying a selection at the mobile computing device of an app that is not associated with an identification module associated with the server computer that would allow the server computer to identify the device; receiving, at the mobile computing device from the server computer, second data identifying zero or more apps lacking the identification module that have been selected previously using the mobile computing device; determining whether a protocol handler for each of the zero or more apps lacking the identification module is in the mobile computing device; in response to determining that a particular protocol handler for one of the apps is in the mobile computing device, transmitting to the server computer a message specifying that the particular protocol handler is in the mobile computing device; communicating a reward to any of: a particular one of the apps that is associated with the particular protocol handler, or a user account associated with the mobile computing device; wherein the method is performed by one or more computing devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348572&OS=09348572&RS=09348572
owner: Tapjoy, Inc.
number: 09348572
owner_city: San Francisco
owner_country: US
publication_date: 20140312
---
This application claims the benefit under 35 U.S.C. 119 e of provisional application 61 793 833 filed Mar. 15 2013 the entire contents of which are hereby incorporated by reference as if fully set forth herein.

The present disclosure generally relates to data processing techniques for connecting data associated with mobile web browser activities and data associated with native mobile device application activities.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section. Tracking the activities of users that download and engage with computer program applications apps for mobile computing devices is an important goal of such app vendors. One approach used to track such activities is to obtain unique device identifiers for the end users mobile computing devices. The unique device identifiers in the context of APPLE IPHONE devices running APPLE s iOS operating system take a variety of forms including UDID MAC Address advertisingIdentifier Vendor ID and other equivalent values or fields that are sufficiently unique to identify individual devices collectively UIDs . In current practice server computers that are in contact with Apple iOS based apps are able to request and obtain any of these UID values from mobile computing devices however only the UDID is accessible by mobile browsers on Apple iOS based devices through a provisioning profile. Therefore on Apple iOS devices the ability to associate app based activities with browser based activities for individual users is hindered whenever app based activities do not have access to the UDID of a given device.

A protocol handler provides communication services allowing one computing device or software application to send data to other devices or software applications under specific communication rules specified by the protocol. Simple Mail Transfer Protocol SMTP and File Transfer Protocol FTP are examples of protocols that may be associated with protocol handlers which interpret messages or requests that conform to those protocols. Protocol handlers have been used for the purpose of launching apps or passing data on or between mobile computing devices or other devices. For example it has been possible for a first app to invoke a function of a second app by using an inter app messaging facility to send a request formatted according to the second app s protocol. However these mechanisms are not always practical in particular contexts.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment a data processing method comprises during a first execution of a first app that is configured with an identification module the first app requesting one or more advertisements from an ad server computer receiving from the ad server computer an electronic advertisement comprising a reference to a second app wherein the second app is not configured with the identification module displaying the electronic advertisement within the first app receiving input selecting the electronic advertisement sending to the ad server computer a message specifying that the ad was selected receiving and installing the second app wherein the second app is configured with an app specific software unit during a second execution of the first app receiving from the ad server computer a list of app specific software units that are paired with one or more click identifiers that are associated with the device wherein each of the click identifiers indicates a previous selection of an app that is not configured with the identification module determining whether the second app is installed by matching an identifier of the app specific software unit of the second app to the list of app specific software units that was received from the ad server computer in response to detecting that the second app is installed sending an app ID for the second app to the ad server computer and receiving a reward.

In one feature the first app and second app are configured for operation with APPLE IOS operating system software and wherein the app specific software unit is a registered custom URL scheme.

In one feature the first app and second app are configured for operation with ANDROID operating system software and wherein the app specific software unit is an app specific software package.

In one feature the method further comprises receiving the selection of the app via an offer wall that is hosted by the first app. In one feature the method further comprises storing the first data at the server computer as part of a record of potential app conversion transactions. In one feature the click identifiers comprise click keys. In one feature the reward comprises any one or more of virtual goods virtual services or badges or other virtual objects.

In an embodiment a method comprises transmitting from a mobile computing device to a server computer first data identifying a selection at the mobile computing device of an app that is not associated with an identification module associated with the server computer that would allow the server computer to identify the device receiving at the mobile computing device from the server computer second data identifying zero or more apps lacking the identification module that have been selected previously using the mobile computing device determining whether a protocol handler for each of the zero or more apps lacking the identification module is in the mobile computing device in response to determining that a particular protocol handler for one of the apps is in the mobile computing device transmitting to the server computer a message specifying that the particular protocol handler is in the mobile computing device communicating a reward to any of a particular one of the apps that is associated with the particular protocol handler or a user account associated with the mobile computing device wherein the method is performed by one or more computing devices.

Embodiments may also encompass computer apparatus non transitory data storage media storing instructions which when executed cause performing the disclosed methods and other features and aspects that will become apparent from the following description.

Each of the computing devices comprises a smartphone tablet computer netbook computer laptop computer or other movable computer or computing devices that are typically stationary such as desktop computers or workstations. Examples include APPLE IPHONE and IPAD devices ANDROID devices etc. Typically wireless links couple the mobile devices to network which broadly represents one or more local area networks wide area networks internetworks global interconnected internetworks such as the public internet or a combination thereof. For purposes of illustrating a clear example two 2 mobile devices are shown in and one cloud symbol representing network is shown but practical implementations may use thousands or millions of mobile devices and any number of interconnected networks.

App distribution computer is associated with a developer author or publisher of a mobile device application computer program or app or a distribution channel such as a centralized app downloading service examples include the APPLE APP STORE and GOOGLE PLAY service. The app may be a game app utility app product related app or other app. Typically the app developer author or publisher desires to provide advertising within the graphical user interface displays of the app or is willing to enable certain functions options or features in the app in exchange for display of advertising within the app. The advertiser computer may serve ads to apps installed on mobile devices directly or the server computer may serve the ads. In some cases the apps require integration of an identification module for proper operation with the advertiser computer .

Server computer may be owned and operated by an app vendor advertising network operator or other party other than users who own or operate the mobile devices . In an embodiment server computer hosts at least a web server and a device identifying unit which is configured to perform the processes herein associated with obtaining device identifying information from the mobile devices .

In one particular embodiment server computer is associated with an advertising network service that directs advertisements to apps that use or are coupled to an identification module provided by or associated with the server computer that would allow the server computer to identify the device. In various embodiments the identification module may comprise an application programming interface API or software development kit SDK defined by the advertising network service. An API or SDK are merely convenient examples the identification module may comprise any executable code segment that the server computer assists in placing on the mobile computing device for interaction with an app using the techniques herein.

In a commercial embodiment the service is Tapjoy Inc. San Francisco Calif. Advertisers associated with computer such as advertiser computer place advertisements with the service provider. Publishers such as software developers game developers or vendors of products or services cause authoring and publication of apps that may provide non advertising functions such as games. The publishing apps use or are associated with the API or SDK defined by the service provider. The service provider routes advertisements from advertiser computer to the apps via the API or SDK. Compensation flows between the advertiser service provider and publishers according to known advertising compensation models. Users of mobile devices benefit from use of the apps and exposure to products or services that may interest them. For example users may receive rewards and advertisers may benefit from greater integration of apps and services that the advertisers offer. Users also interact with ads served from network .

Server computer may be coupled to a database that is configured to store data obtained from the mobile devices .

For purposes of illustrating a clear example shows two apps protocol handlers and instances of SDK code but other embodiments may include any number of apps based upon the amount of memory or other storage that is available in the mobile device . For purposes of illustrating a clear embodiment does not show distribution platforms that may be used to assign the protocol handlers to the OS installations. Further for convenience refers to code as SDK code but in other embodiments the code may comprise any other identification module that the server computer can place or assist in placing on the mobile device to assist in determining certain identifying information as further described herein.

SDK code typically is statically linked or dynamically linked to the rest of the code of the first app and second app respectively at the time that a developer prepares production versions of executables of the first app and second app. Consequently at runtime the SDK code runs as native code in the mobile device . However the source code for SDK code typically is defined by the owner or operator of the server computer and is not always known to the app developer author or publisher except possibly with respect to public interfaces or APIs that the owner or operator of the server computer elects to publish or disclose.

Browser may comprise a program application or script configured to send and receive HTTP requests and responses and to render HTML documents in a display unit of the mobile computing device . For example browser may request a web page such as a home page or other page of the domain www.tapjoy.com commercially available from Tapjoy Inc. San Francisco Calif. which may contain one or more links which are configured and used as further described herein.

In the embodiment of server computer comprises a web server that is configured in the server computers of the public Domain Name System DNS as responsive to HTTP requests that include the domain name tapjoy.com or the equivalent. Web server may operate under the control or direction of a device identifying unit which may comprise logic or program code that is configured to perform the server side operations that are further described herein with respect to . In particular device identifying unit is configured to generate web page as described below and to generate one or more links dynamically if necessary as further described herein for .

Referring first to at block a mobile device accesses a web page associated with a service provider. For example mobile device of accesses the web server of the server computer . In one particular example an IPHONE device user might use the SAFARI browser built into the IPHONE device to access the website www.tapjoy.com. Typically the mobile device accesses the web page associated with the service provider for purposes of confirming an app that the mobile device previously downloaded.

Block indicates that at least one mobile app which has been linked with the service provider s SDK and has a protocol handler has been installed on the device. For example at any time prior to execution of block and subsequent functional blocks a user of the mobile device selects downloads and installs a mobile app that has been linked with the service provider s SDK by the app publisher and that includes a related protocol handler.

In an embodiment the protocol handler associated with the mobile app is configured to use or respond to messages requests or calls that identify a particular protocol associated with the mobile app and the SDK is configured to process certain kinds of requests that carry a particular label or namespace value that has been defined by the service provider owner or operator of server computer . For example at the time of compiling an executable production version of the app the app publisher authors and or registers a protocol handler for the app s protocol and also statically or dynamically links the app with executable code comprising the API or SDK so that the resulting app executable is integrated with executable code for functions of the API or SDK.

For purposes of illustrating a clear example the following description refers to performing certain functions using an SDK that is integrated with the protocol handler and or app.

The protocol handler comprises a program set of routines or other program code that can respond to requests that carry protocol identifiers associated with that particular handler. In an embodiment the owner or operator of server computer or the services it provides requests or requires publishers of apps to use or register a protocol handler that is designated within their app before the publishers are able to use services such as an advertising network that are offered through the server computer. Typically the app publisher provides a copy of the designated app or protocol identifier to the owner or operator of the server computer for reference validation or other purposes. Consequently the server computer is aware of the identity of all apps and their protocol handlers that are configured to use services of the service provider that owns or operates the server computer and can seek to address the app as needed.

An example of a protocol identifier for a protocol handler associated with a mobile app named App1 is app1 . Other examples are described in other sections of this document. At the time of installation the protocol handler registers with the operating system of the mobile device using registration function calls that are defined by the operating system. Through registration the operating system creates a record of the existence of the protocol handler and the protocol identifier with which it is associated. Thereafter when an inbound request arrives that specifies a particular protocol identifier the operating system is capable of passing the request to a protocol handler that matches the specified protocol identifier.

As indicated in block the web page that was accessed at block contains a request link that includes a particular protocol identifier a label and data. In an embodiment a user of the mobile device invokes the request link by selecting a function button or other GUI widget associated with completing a designated process. For example the user may have directed the browser to contact a web page hosted by the server computer that guides the user through a process of registering with a service provided by the server computer. The registration process might involve collecting among other things a username and or email address for purposes of identifying the holder of an account or the user of a device. At the conclusion of the registration process the web page might contain a prompt such as To complete registration click here to continue. In response to selecting the prompt the link is invoked.

The data in link may be any data that is necessary for performance of any of the other functions that have been previously described. For example the data may comprise a click identifier that indicates a location within the web page a function that the user invoked by making a selection or other information about what the user was doing or attempting to do. Additionally or alternatively the data may represent any other available information about the device or the user such as user e mail address or username or other values. The data need not permanently identify the device for example the data could include a temporary identifier such an advertisingIdentifier. In an embodiment links or requests are communicated from the mobile device to the server computer using a protocol that is stateless in the manner that HTTP is stateless and consequently the data value carried in a request is necessary in communicating what function or action the user or device was seeking to perform. Data values used for this purpose may be arbitrary in content provided that each particular data value that is used in an implementation is recognizable by the server computer as indicating a particular operation action or function.

The label may be any signaling value within a namespace recognizable at server computer which enables the protocol handler to recognize that the server computer is attempting to perform a specific operation or related communication with the mobile device. Examples are described in other sections herein.

The protocol identifier is recognizable to the protocol handler that was designated at block or is among a plurality of possible protocol handlers that could have been designated. In an embodiment the web page contains a plurality of links each of which identifies a different possible protocol handler that could be present on the mobile device. The web page may be structured using client side browser executable script code or the server computer may have server side code which is configured to iteratively generate a series of different requests each of which identifies a different protocol handler for the purpose of iteratively testing whether that particular protocol handler is supported on the device in which case the app that registered such protocol handler is still installed on the device.

This approach is used because while the server computer and web page hosted at the server computer cannot be configured in advance with data indicating which protocols are supported on any arbitrary mobile device the server computer can receive prior notification from app publisher computers about which protocols they have defined for apps that will use services of the server computer and therefore the server computer can test whether or not each unique protocol handler is resident on a particular mobile device. Operators of advertiser computer also can register protocols and their apps can issue callbacks with data to the advertiser computer. Therefore upon receiving communications from an arbitrary mobile device over an open network such as the internet the server computer is configured to provide a web page that is capable of generating a succession of requests each identifying a different possible protocol handler previously registered with the mobile device by an app publisher until the mobile device is able to invoke a corresponding installed and designated protocol handler. Any number of links may be created and used and in a practical embodiment dozens of apps and protocols might need to be tested.

Blocks represent a loop that corresponds to the iterative protocol testing process outlined above. In an embodiment at block the web page configured as seen at block issues a request by providing a link that is formatted according to a particular protocol. In an embodiment requests have the format of a uniform resource identifier URI . An example link is app1 tapjoy register 100423b44cd3387a33 where app1 is a protocol identifier tapjoy register is a label or signaling string or namespace and 100423b44cd3387a33 is a data value that is useful in performing some kind of server side operation. In different embodiments the data value may comprise any information that is available or obtainable during operation of the mobile browser on the mobile device such as an indication of a location in the web page that the user selected or clicked.

In response to block if the mobile device had installed an app known as app1 and had designated a corresponding protocol handler for the app1 protocol at block then at block the mobile device automatically invokes the protocol handler based on matching the protocol identifier in the request that identifies installed designated protocol handlers. However if the protocol handler for app1 is not installed on the mobile device then at block the web page or server computer will receive no response. Control transfers to block in which a new request is issued to attempt invocation of a different protocol. For example the next request might have the form app2 tapjoy register 100423b44cd3387a33 in which app2 identifies a different app and related protocol that also has been prepared using the SDK or API defined by the owner or operator of server computer .

Blocks are iteratively performed in the foregoing manner until a match occurs and a protocol handler can be invoked at block or until all protocols defined by the server computer have been attempted. If all protocols for apps designated at the server computer have been attempted and none responds then as seen at block control transfers to the process of which is further described below.

Invocation of the protocol handler for a designated protocol may occur at the mobile device automatically or in response to user action. The mobile device or app may be configured at block to prompt the user to open an app that matches a designated protocol. In other embodiments prompts are not required and invocation may occur in response to launching the app.

At block a function of the SDK running as native app code intercepts the request by matching the label or optionally a value in a particular namespace which is tapjoy register in the examples above. In other words while the apps denoted app1 or app2 may implement a protocol handler that matches app1 or app2 and permits many kinds of requests when a particular label or signal value is present in a request a function of the SDK interrupts normal protocol handler processing and invokes a processing routine or branches to particular configured program code based on the label for the purpose of confirming any data value such as a UID as further described herein. In effect the SDK provides code that implements a special purpose function for the protocol handler when the request or link contains a specified label value or signaling value. The SDK may also perform the interception by matching the label value to a regular expression rather than matching a single literal value.

At block the SDK function confirms one or more UIDs from the device. In an embodiment the SDK function calls an operating system call API function call or other service on device to confirm one or more UID values.

As defined in APPLE IOS release 6 and for the purposes of illustrating an example the advertisingIdentifier is a UID value that the operating system exposes that the user is capable of resetting at any time. The Vendor ID may be a unique device identifier that is determined on a per vendor basis in association with app or service vendors. For example the owner or operator of server computer could establish a Vendor ID for a particular mobile device and could consider that value as a unique device identifier but that value would have no meaning to another vendor of different services or products.

In such an embodiment the SDK function may invoke an operating system API function call that is available for use by installed code such as native apps but not capable of invocation by scripts in a browser or other sandboxed code or not capable of delivery in response to an external request from a server such as a request from server computer arriving at the mobile device over HTTP via the public internet.

At block the SDK function executes a callback to the server computer and provides the UID value and optionally the data value that was received in the request.

In block the server computer receives the UID value or the data value via the callback. At block or in other operations the server computer may use the UID and or data as appropriate for a particular server computer application or function such as supporting completing an action or a conversion of the mobile device or its user.

In an embodiment as indicated at block the process of initiates when no compatible protocol handler has been found on the mobile device using the process of . At block the process may suggest to the user to install a specified app that is enabled with a compatible protocol handler or cause installation after the user has tapped a button or otherwise indicated consent. Any of several alternatives may be used to implement block . For example since the process of began when the user accessed a web site of the service provider using a discovery app or mobile browser on the mobile device block can comprise redirecting the browser to a specified page that instructs the user to pick and open or download one protocol handler enabled app from among one or more such apps. Alternatively a discovery app that the user is currently running may be used to prompt the user to select from among one or more protocol handler enabled apps. In still another alternative an advertisement based mechanism may be used as seen at blocks which are described further below.

At block the process stores data indicating which app was selected assuming that multiple protocol handler enabled apps were offered. If the mobile device is then currently running a browser then one option is that a local cookie may be stored on the device cookie indicating which app was clicked on. Alternatively the browser or the discovery app may communicate a message back to the service provider s server computer which can store an identifier of the clicked on app in association with an account of the mobile device user.

At block the user installs the specified app and in block the user re visits the site of the service provider. Processing then continues at block of . Since the server computer interacts with the mobile device using a stateless protocol such as HTTP each visit at block is processed in generally the same way and the server computer will not have advance knowledge that a particular visit is a re visit after . However upon a re visit if the mobile device provides login credentials for an existing account at the server computer the server computer can inspect its database to determine if a record for the user account contains an identifier of the specified app that was just downloaded. If so then the server computer can expedite the process of by issuing a protocol request in only the protocol that is handled by the specified app at block rather than iterating through all supported protocols via the loop of block .

Referring now to block in some embodiments an advertisement based approach may be used in which the process causes installation of a protocol handler enabled app via an advertisement. As further described using certain operating system and web server infrastructure may automatically cause prompting a user to perform app installation and provide useful protocol invocation data. As an example of block a protocol handler enabled app that should be installed could be provided to the mobile device using the APPLE Smart App Banner sometimes termed Smart Ads feature. In this approach an advertisement is configured on the server computer of the service provider and is delivered typically as a banner advertisement when computer users browse the web site of the service provider. The advertisement references a specified protocol handler enabled app of the service provider. When a user of a mobile computing device taps on or clicks on the advertisement the referenced protocol handler enabled app is automatically downloaded to and installed on the mobile computing device if the mobile computing device does not already have the app installed.

At block the process provides a URL specifying a protocol known to the service provider and identifying a registration function to the app that was installed via the advertisement. In an embodiment the advertisement configuration may specify an app argument value that identifies the service provider s protocol which is recognized by the protocol handler and specifies a registration or connection function of the app that can cause the app to complete an association of the mobile computing device s UID with an account at the service provider. The app argument value is passed to the app automatically from the advertisement when the associated app opens. If the mobile computing device did not have the app installed at the time the advertisement was clicked on then the app argument is automatically passed to the device after the app downloads installs and opens. If the app was already on the device when the advertisement was clicked then the advertisement automatically changes behavior and causes the app to open then passes the app argument to the app.

At block control transfers to block of and processing continues as described above for block of and subsequent blocks under control of the protocol handler enabled app. In conventional practice as defined by APPLE the app argument is a URL that reflects context within a website that contains the ad or a session ID to download web session state into an app so that the user can have a seamless experience by transitioning to an equivalent or related state in the app. In an embodiment however the app argument may specify a protocol recognized by the app and a registration function of the app that causes association of the UID with an account at the service provider s web site. Thus in this approach the automatic installation of the app with a known protocol in combination with passing an app argument tagged with the protocol and that specifies what the app should do next to assist in registering the UID to an account of the service provider can be used to efficiently skip over some of the processing illustrated in that requires testing for a known protocol handler. Instead control jumps to block where the registration process can continue without delay.

At that point processing as described above for block would occur. Thus this approach has the benefit of improving the likelihood of user installation of a known app on the mobile computing device through an ad click and the app is instrumented with the equivalent of a protocol handler by having the capability to receive interpret and use the app argument to transition to a particular state that can assist in associating a UID with an account at the service provider.

The approach of various embodiments effectively signals the server computer to perform a particular function indicated in the data value or using the data value with respect to the UID received in the callback. Either a name of the callback itself or the data value may indicate the function to be performed. With the foregoing process or equivalents new users of mobile devices that are seeking the use of services at the server computer or a domain that it manages will be able to register with the server computer and reconcile activities that may originate or conclude in with other activities that may support user experiences in or other applications. A UID may be obtained to fulfill a user request or app request from the device using internally operating code rather than through direct requests of external code. Further the UID may be received at the server computer together with other data indicating what operation or request the mobile device or user had attempted. In some embodiments the data delivered in the callback also may comprise one or more values that are accessible only via native code.

Additionally or alternatively as seen at block in an embodiment the UID and other data may be passed from the SDK of the first app to the SDK of the second app . In response the second app may issue a callback to the server computer and provide the UID and other data or use the UID and other data locally for other purposes.

One example use of these techniques is re engagement of users into the second app. For example the user might have interacted with an ad in the first app resulting in obtaining a reward through callbacks from the first app to the server computer the server might supply the ad or data about the interaction to the second app and the server then could direct the user into a particular location in the second app by passing data as described herein in an attempt to re engage the user with the second app. Further the content of the ad in the first app could be configured to help induce engagement with the second app .

The device may maintain other unique identifier values for the use of advertisers vendors of apps or other parties that are provided by the operating system only for other purposes or to other kinds of apps or systems. Thus the particular kind of UID value that is obtained is not critical what is relevant is 

In an embodiment a data processing system provides ways for advertisers to advertise without using a software development kit SDK . The deployment of apps free of SDK integration may result in faster integration by advertisers and may also enable development of lighter weight apps and or apps that do not need to communicate personally identifiable information of users of the apps.

The embodiment herein enables advertisers to work with the service provider associated with server computer on a cost per action CPA basis rather than paying per impression or click 

Referring first to in an embodiment as part of a preparatory step the developer of an app which does not use an SDK associated with the server computer or a service provider such as a distributor of advertisements and creates and develops the app

In an embodiment a protocol handler recognized by the app is registered with the store as seen at block . Registration of the protocol handler at block enables later the operating system of a mobile computing device to recognize the protocol handler in the device as further described. In an embodiment block can cause communicating an update to operating system of mobile computing device that identifies the protocol handler for app as a registered and recognized protocol handler. In some cases registration of a protocol handler at may be performed independently of submitting the app for review and approval.

Thereafter the developer of the app may cause the app to be advertised via the server computer . As a result data promoting the app and offering it for download installation and or opening may be displayed in an offer wall on a mobile computing device . In this context offer wall may comprise a list of offers or advertisements in the form of links icons or other graphical elements that may be selected by user input.

The mobile computing device comprises a first app that is installed on the device and features an identification module IDM that communicates with the server computer or provided by a service provider associated with the server computer . IDM may comprise an SDK implementation of API or any other executable code module segment or unit capable of integration into an app and communicating with the server computer in the manner described herein. The first app utilizing the IDM may be configured to cause mobile computing device to display an offer wall that shows data about or otherwise offers one or more uninstalled apps . Alternatively the offer wall may be omitted and descriptions of apps may be presented differently. The uninstalled apps may or may not include an IDM that is compatible with the server computer however for purposes of illustrating an embodiment of the invention uninstalled apps in do not include an IDM. For purpose of illustrating a clear example shows one installed app and three 3 uninstalled apps offered via the offer wall but other embodiments may have any number of installed or uninstalled apps.

Only one installed app with the IDM is necessary the presence of such an app is implicit in an embodiment because the IDM is responsible for generating the offer wall and offering apps such as app effectively hosting the offer wall . The app may be associated with a completely different publisher or developer than app or may be provided by the owner or operator of server computer .

In an embodiment at a user of the mobile computing device selects by tapping or clicking or other means of user input the app in the offer wall . In response the app causes communicating the user click to the server computer in a message indicating that the click is for an app not having an IDM. Server computer records in suitable storage a record of the user click in association with data identifying the mobile computing device and the app as indicated by the references Device ID and App ID in . Operation effectively signals the server computer that a potential action or completed action could occur in the future if the app is actually downloaded installed and or opened.

In various embodiments the Device ID may comprise any information that assists in identifying a source of the user click for an IDM less app and the Device ID need not comprise a UDID or personally identifying information. The specific implementation of the Device ID is beyond the scope of this disclosure and any suitable identifying data may be used.

In an embodiment the mobile computing device is redirected to a location at which the selected app can be downloaded to the device. An example location is the APPLE APP STORE. Assume that the app is installed and opened as seen at . Because app does not have the IDM the server computer does not receive identifying information from the app at the time of operation that could be used to complete an action resulting in a reward. However installing and opening app also includes associating a protocol handler for the app with the operating system . The protocol handler may be viewed as part of the program code of the app that becomes known to the operating system which is capable of interacting with the protocol handler because of the registration operation .

However when the user opens any app that contains an IDM associated with the server computer in response as indicated by arrow the server computer undertakes a series of interactions with the IDM that result in the IDM checking the mobile computing device to test for the presence of any known protocol handler that is for an IDM less app. In effect opening an IDM enabled app such as app or any other app that has a compatible IDM causes the server computer to request that app to determine whether any incomplete potential action can be completed.

In the example of the result of such checking is that IDM identifies the presence of protocol handler and informs server computer through one of the interactions . In response the server computer can store a record that the mobile computing device completed the potential action that was previously recorded based on operation .

In some embodiments in response the server computer is configured to transmit a reward at operation to the app or device . In various embodiments the reward may comprise one or more items of any one or more of virtual goods virtual services badges or other virtual objects.

In some embodiments in response to completing an action the server computer is configured to undertake other accounting or reconciliation operations. Example operations could cause providing rewards to the user of device or to an app. Accounting and reconciliation operations also could result in invoicing billing payment messages or other operations causing payment from the advertiser or developer associated with app to the entity that owns or operates server computer or an advertising network or advertising service hosted by or associated with the server computer.

In some cases the result of such checking is that IDM cannot identify the presence of protocol handler meaning that the user did not download the app or downloaded and then deleted the app before opening an SDK enabled app that performed the checking. In that case IDM may communicate a failure message to server computer as one of the interactions .

A more detailed view of the interactions in an embodiment is in which illustrates actions and process flows at each of an IDM less app server computer and an installed app that has an IDM compatible with the server computer. In an embodiment at the user has selected the app and a message identifying a click on an IDM less app is transmitted to server computer . The server computer records a potential action or action that could be completed in the future.

At the user opens the app with IDM or any other app that has an SDK compatible with server computer . In response the IDM transmits a message at to query the server computer whether any IDM less clicks have been recorded without yet completing an action or other transaction. In response at the server computer transmits a list of zero or more SDK less apps and their protocol handlers that have been identified in previous click operations such as . Alternatively if there are no clicks on SDK less apps pending then operation could return a negative acknowledgement NACK message in any suitable format.

Upon receiving the list from operation at the IDM may poll the operating system OS to determine whether any protocol handlers in the list are present on the device. The IDM may issue one or more conventional OS calls to check for the presence of each protocol handler in the list. As indicated by and the loop represented in a NO path from typically the IDM checks for one protocol handler at a time proceeding serially through the list that was received at .

If the test of results in identifying a protocol handler then the IDM may communicate an identifier of the protocol handler that was located and at the server computer receives the identifier. In response the server computer may communicate a reward at to the app or device or undertake other accounting or reconciliation operations as previously described. The reward may be communicated to one or more of a particular one of the apps that is associated with the particular protocol handler that was located or a user account associated with the mobile computing device. The user account may be at server computer associated with the server computer or associated with an independent computer or service.

Thus embodiments provide a way to detect the installation or opening of an app that has been published by a developer or publisher who is an advertiser under contract with the owner or operator of server computer without requiring the app to use the IDM compatible with the server computer.

At operation the SDK of the first app requests an ad or ads from the ad server computer . At operation an ad promoting the second app is returned from the ad server computer and is displayed within the first app . At operation the user selects the ad for the second app at which point the SDK sends a message to the ad server specifying that the ad was selected. The ad server then creates an SDK less click ID from this action.

At operation the SDK opens the APP STORE app on the device and displays information prompting the user to approve the download and installation of the second app . At operation the user approves the download and installation of the second app .

At operation the second app is downloaded and installed on the device . The second app is configured with a registered custom URL scheme within the app in an embodiment the custom URL scheme is placed within the app s info.plist file when the second app is submitted to the APP STORE for approval.

At operation at some point later the first app is run and queries the ad server to retrieve a list of URL schemes that are paired with the SDK less click IDs that are associated with the device . At operation the list of URL schemes is returned from the ad server . At operation the SDK checks for the existence of the second app on the device by looking for a match of a registered URL scheme associated with the second app in the list of URL schemes returned from the ad server computer .

At operation if and when the second app is detected on the device the SDK sends the ad server an app ID for the second app at which point the app ID is matched with the SDK less click ID from operation and the user receives a reward.

At operation the SDK of the first app requests an ad or ads from the ad server computer . At operation an ad promoting the second app is returned from the ad server computer and is displayed within the first app . At operation the user selects the ad for the second app at which point the SDK sends a message to the ad server specifying that the ad was selected. The ad server then creates an SDK less click ID from this action.

At operation the SDK opens the APP STORE app on the device and displays information prompting the user to approve the download and installation of the second app . At operation the user approves the download and installation of the second app .

At operation at some point later the first app is run and queries the ad server to retrieve a list of package names that are paired with the SDK less click IDs that are associated with the device . At operation the list of package names is returned from the ad server . At operation the SDK checks for the existence of the second app on the device by looking for a match of a package name associated with the second app in the list of package names returned from the ad server computer .

At operation if and when the second app is detected on the device the SDK sends the ad server an app ID for the second app at which point the app ID is matched with the SDK less click ID from operation and the user receives a reward.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In an embodiment a data processing method comprises receiving at a mobile computing device a request comprising a protocol identifier a label value and a data value wherein the protocol identifier is associated with a protocol implemented in a first mobile app using a protocol handler in the mobile computing device associated with the protocol initiating processing of the request using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and in response to the intercepting providing the data value to other than the first mobile app the protocol handler or the native code element wherein the method is performed by one or more computing devices.

In another embodiment a data processing method comprises requesting a user to initiate installing a first app linked with the native code element as part of a software development kit SDK on a mobile computing device accessing a web page associated with a service provider wherein the web page contains a link comprising a first protocol identifier a label value and a data value wherein the first protocol identifier is associated with a protocol implemented in a first mobile app receiving a request based on the link that includes the first protocol identifier the label value and the data value matching the first protocol identifier to using a protocol handler in the mobile computing device associated with the protocol using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and processing the request on behalf of the protocol handler obtaining a UID from the mobile computing device providing the UID to any of a server computer via a callback that includes the UID and the data or a second app wherein the method is performed by one or more special purpose computing devices.

In another embodiment a data processing method comprises determining that a mobile computing device does not have a protocol handler enabled app installed on the mobile computing device causing or instructing the mobile computing device to install one or more protocol handler enabled apps linked with the native code element as part of a software development kit SDK on the mobile computing device storing data identifying a particular protocol handler enabled app receiving a request to access a web page associated with a service provider wherein the web page contains a link comprising a first protocol identifier a label value and a data value wherein the first protocol identifier is associated with a protocol implemented in the particular protocol handler enabled app receiving a request based on the link that includes the first protocol identifier the label value and the data value matching the first protocol identifier to using a protocol handler in the mobile computing device associated with the protocol using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and processing the request on behalf of the protocol handler obtaining a UID from the mobile computing device providing the UID to any of a server computer via a callback that includes the UID and the data or a second app wherein the method is performed by one or more special purpose computing devices.

In an embodiment a data processing method comprises receiving at a mobile computing device a request comprising a protocol identifier a label value and a data value wherein the protocol identifier is associated with a protocol implemented in a first mobile app using a protocol handler in the mobile computing device associated with the protocol initiating processing of the request using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and in response to the intercepting providing the data value to other than the first mobile app the protocol handler or the native code element wherein the method is performed by one or more computing devices.

In another embodiment a data processing method comprises requesting a user to initiate installing a first app linked with the native code element as part of a software development kit SDK on a mobile computing device accessing a web page associated with a service provider wherein the web page contains a link comprising a first protocol identifier a label value and a data value wherein the first protocol identifier is associated with a protocol implemented in a first mobile app receiving a request based on the link that includes the first protocol identifier the label value and the data value matching the first protocol identifier to using a protocol handler in the mobile computing device associated with the protocol using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and processing the request on behalf of the protocol handler obtaining a UID from the mobile computing device providing the UID to any of a server computer via a callback that includes the UID and the data or a second app wherein the method is performed by one or more special purpose computing devices.

In yet another embodiment a data processing method comprises determining that a mobile computing device does not have a protocol handler enabled app installed on the mobile computing device causing or instructing the mobile computing device to install one or more protocol handler enabled apps linked with the native code element as part of a software development kit SDK on the mobile computing device storing data identifying a particular protocol handler enabled app receiving a request to access a web page associated with a service provider wherein the web page contains a link comprising a first protocol identifier a label value and a data value wherein the first protocol identifier is associated with a protocol implemented in the particular protocol handler enabled app receiving a request based on the link that includes the first protocol identifier the label value and the data value matching the first protocol identifier to using a protocol handler in the mobile computing device associated with the protocol using a native code element in the mobile computing device intercepting the request when the label value matches a particular expression and processing the request on behalf of the protocol handler obtaining a UID from the mobile computing device providing the UID to any of a server computer via a callback that includes the UID and the data or a second app wherein the method is performed by one or more special purpose computing devices.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

