---

title: Activation of dormant features in native applications
abstract: A native application can be deployed that obtains configuration information for the native application at run-time. Digital marketing users or other marketing users can view or control the behavior of the native application by displaying or setting the configuration information of the native application. The native application can report tracked end user interactions and events with the native application according to the configuration information to tag management systems for data compilation by the tag management systems. In addition, the native application can enable digital marketing users or other marketing users to view or control the behavior of the native application from within the native application using an integrated configuration utility. The configuration utility can be activated using a two-stage activation process or an activation and authorization process to prevent an end user from accidentally encountering the configuration utility during routine use of the native application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843827&OS=08843827&RS=08843827
owner: Tealium Inc.
number: 08843827
owner_city: San Diego
owner_country: US
publication_date: 20140120
---
This application claims priority under 35 U.S.C. 119 e as a nonprovisional application of the following U.S. Provisional Applications 

In addition this application is related to U.S. application Ser. No. 14 149 717 filed Jan. 7 2014 titled Content Site Visitor Processing System and U.S. application Ser. No. 14 151 700 filed Jan. 9 2014 titled Combined Synchronous and Asynchronous Tag Deployment. The disclosures of each of the foregoing applications are hereby incorporated by reference in their entirety. Further any subset of the embodiments described herein can be implemented in combination with any subset of the embodiments described in the foregoing applications.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Some operators of content sites such as websites regularly obtain the results of analytics performed with regard to user interactions on their content sites. User analytics can include any type of data regarding interactions of end users with content sites among other types of data. There are different approaches to gathering analytics data one of which includes employing the use of tags.

Tags can include small pieces of website code that allow a website operator to measure traffic and visitor behavior understand the impact of online advertising and social channels use remarketing and audience targeting or test and improve a content site among optionally other functions. Adding tags to a content site has typically required involving a developer to manually insert tag code into one or more pages of a website.

In one embodiment a method of presenting information about elements of a host application is disclosed. The method can be performed under control of a physical computing device including digital logic circuitry. The method can include executing a host application receiving a first user input indicative of a user shaking the physical computing device in response to determining that the first user input matches a first activation input executing a confirmation routine to process one or more additional user inputs to the physical computing device receiving a second user input with the confirmation routine after said receiving the first user input the second user input indicative of the user contacting a screen of the physical computing device and in response to determining using the confirmation routine that the second user input matches a second activation input displaying a configuration utility on the screen the configuration utility configured to output information regarding trackable elements of the host application.

The method of the preceding paragraph can further include one or more of the following features The method can include i receiving a third user input indicative of selection of an interactive user interface element of the trackable elements of the host application after said receiving the second user input the third user input indicative of the user contacting the screen ii in response to determining that the third user input matches a configuration selection input processing the third user input using the configuration utility to output a tracking identifier associated with the interactive user interface element and iii in response to determining that the third user input does not match the configuration selection input navigating within the host application based at least on the interactive user interface element. The configuration utility can be configured for use by an administrator of the host application and not for use by an end user of the host application. The method can include in response to determining that the second user input has not been received within a timeout period stopping said executing the confirmation routine. The physical computing device can include a mobile phone or a tablet computer and the host application can include the confirmation routine and the configuration utility.

In one embodiment non transitory physical computer storage including computer executable instructions stored thereon is disclosed. The computer executable instructions when executed by one or more processors can implement a process. The process can include receiving configuration information for configuring a physical computing device receiving a first user input from a user of the physical computing device the first user input comprising a motion component in response to determining that the first user input matches a first activation input listening for a second user input to the physical computing device using confirmation instructions of the computer executable instructions receiving the second user input from the user and in response to determining using the confirmation instructions that the second user input matches a second activation input displaying a configuration utility interface on a display of the physical computing device the configuration utility interface configured to display information indicative of the configuration information.

The computer executable instructions of the preceding paragraph when executed by one or more processors can further implement a process that includes one or more of the following features The first activation input can be different from the second activation input. The process can include i receiving a third user input from the user the third user input indicative of selection of an element of a user interface displayed on the display ii in response to determining that the third user input matches a configuration selection input displaying information corresponding to the third user input in the configuration utility interface the configuration utility interface shown in juxtaposition to the user interface on the display and iii in response to determining that the third user input does not match the configuration selection input displaying information corresponding to the third user input in the user interface. The process can include in response to determining that the second user input has not been received within a timeout period stopping said listening for the second input to the physical computing device using the confirmation instructions. The configuration information can denote elements of a user interface to be tracked as the user interacts with the user interface. The process can include transmitting to a tracking server data indicative of interactions of the user with the elements of the user interface denoted by the configuration information. The elements of the user interface denoted by the configuration information can include links displayed in the user interface. The configuration utility interface can be configured to display whether elements of a user interface are trackable as the user interacts with the user interface. The configuration utility interface can be usable by the user to change the configuration information stored on the configuration information server when the user may be an authenticated user. The second user input can be an input indicative of consecutive taps on the display by the user. The computer executable instructions can include user interface instructions for displaying a user interface and configuration utility instructions for displaying the configuration utility interface the confirmation and configuration utility instructions including third party developed computer executable instructions the user interface instructions including first party developed computer executable instructions. The configuration utility interface can be configured for use by an administrator of the computer executable instructions and the user interface can be configured for use by an end user of the computer executable instructions.

In one embodiment a system for presenting information regarding elements of a host application is disclosed. The system can include a memory and a processor. The memory can be configured to store a host application and the hardware processor can be configured to communicate with the memory. The hardware processor configured to execute the host application listen for a motion input in response to determining that the motion input matches an expected motion input listen for a user input received before an end of a timeout period and in response to determining that the user input matches an activation input invoke an operation module. The expected motion input can be different from the activation input.

The system of the preceding paragraph can further include one or more of the following features The processor can be configured to in response to determining that a second user input matches a configuration selection input process the second user input using the configuration utility and in response to determining that the second user input does not match the configuration selection input not process the second user input using the configuration utility. The determination of whether the motion input matches the expected motion input and the determination of whether the user input matches the activation input are configured to provide a confirmation that a user intends to activate the configuration utility so that an end user of the host application does not accidentally encounter the configuration utility during routine use of the host application.

In one embodiment a system for providing access to a tag management application is disclosed. The system can include a mobile device. The mobile device can include a processor and a memory device. The memory device can be configured to store at least a tag management application and a gesture to display module. The gesture to display module configured when executed by the processor to listen for a shake gesture corresponding to a user shaking the mobile device in responsive to identifying the shake gesture determine whether a predetermined interaction with the mobile device has occurred and in response to determining that the predetermined interaction with the mobile device has occurred invoke the tag management application.

The system of the preceding paragraph can further include one or more of the following features The gesture to display module can be configured to listen for the shake gesture by hooking into a gesture application programming interface API of a host application stored in the memory. The gesture to display module can be configured to output an invisible overlay over a host application interface. The gesture to display module can be configured to detect screen activity via the invisible overlay to determine whether the predetermined interaction with the mobile device has occurred. The predetermined interaction can include one or both of taps and swipes. The gesture to display module can be configured to determine whether a predetermined interaction with the mobile device has occurred by activating a voice detection module of the mobile device to listen for a voice command

In one embodiment a system including a processor and a memory device is disclosed. The memory device can be configured to store at least a first application and a gesture to display module. The gesture to display module configured when executed by the processor to listen for a shake gesture corresponding to a user shaking the mobile device in responsive to identifying the shake gesture determine whether a predetermined interaction with the mobile device has occurred and in response to determining that the predetermined interaction with the mobile device has occurred invoke the first application.

The system of the preceding paragraph can further include one or more of the following features The gesture to display module can be configured to listen for the shake gesture by hooking into a gesture application programming interface API of a host application stored in the memory. The gesture to display module can be configured to output an invisible overlay over a host application interface. The gesture to display module can be configured to detect screen activity via the invisible overlay to determine whether the predetermined interaction with the mobile device has occurred. The predetermined interaction can include one or both of taps and swipes. The gesture to display module can be configured to determine whether a predetermined interaction with the mobile device has occurred by activating a voice detection module of the mobile device to listen for a voice command

In one embodiment a method is disclosed. The method can be performed under control of a computing device comprising a processor. The method can include listening for a shake gesture corresponding to a user shaking the computing device in responsive to identifying the shake gesture determining whether a predetermined interaction with the computing device has occurred and in response to determining that the predetermined interaction with the computing device has occurred invoking the first application.

The method of the preceding paragraph can further include one or more of the following features The listening for the shake gesture can include hooking into a gesture application programming interface API of a host application. The method can include outputting an invisible overlay over a host application interface. The method can include detecting screen activity via the invisible overlay to determine whether the predetermined interaction with the mobile device has occurred. The predetermined interaction can include one or both of taps and swipes. The method can include determining whether a predetermined interaction with the computing device has occurred by activating a voice detection module of the computing device to listen for a voice command.

Various components of the same type may be distinguished by following the reference label by a dash and a second label that distinguishes among the similar components. If only the first reference label is used herein the description can be applicable to any one of the similar components having the same first reference label irrespective of the second reference label.

While tags are commonly used to track user interactions with web sites digital marketing users may also desire to manage tracking of end user interactions in native applications including both desktop and mobile applications. For example a native application can include links images or the like that may be viewed or selected by an end user of the native application. In some implementations a digital marketing user thus can beneficially control the gathering of information about the views or selections by the end user using a tag management system to collect information useful in making business decisions related to the native application or other promoted content. However since a native application can be a locally installed application and deployed as a precompiled unit of executable code or executable code compiled at run time digital marketing users or other marketing users may have difficultly modifying configurations for tracking of user interactions and events that are coded in the native application after the native application has been developed. In addition some native applications such as applications for mobile devices may require advance approval by an organization before updates to the native applications can be released to the end users thus further slowing the release of modifications to the configuration of the native application.

Digital marketing users and other marketing users additionally may desire to view tag information or manage tags associated with native applications using an easy to access and intuitive interface. One such interface can be a user interface of a native application itself. The user interface of the native application can desirably present tag information or enable management of tags in juxtaposition to overlaid on or otherwise together with the end user interface for the digital marketing users and other marketing users. The digital marketing users and other marketing users may thus understand or control information relevant to end user interactions with the native application using a view similar to that of an end user of the native application. However since the user interface of the native application can be intended for viewing by the end user the functionality to view tag information and manage the tags may desirably be unobtrusive and hidden from the end user. Hiding this functionality from the end user can be challenging though since usable space or features for hiding the functionality can be limited in some native application environments such as applications for mobile devices.

This disclosure describes embodiments systems methods and non transitory computer readable media that can address one or more of the preceding desires or concerns. For example a native application can be deployed that may obtain some configuration information for the native application at run time. Digital marketing users or other marketing users can then view or control the behavior of the native application by displaying or setting the configuration information of the native application obtained at run time. The native application can report tracked end user interactions and events in accordance with the configuration information to tag management systems for data compilation by the tag management systems. Additionally the native application can enable digital marketing users or other marketing users to view or control the behavior of the native application from within the native application using an integrated configuration utility. The configuration utility can be activated using a two stage activation process or an activation and authorization process to prevent an end user from accidentally encountering the configuration utility during routine use of the native application. In this way in some embodiments the configuration utility can be considered an Easter egg since the two stage activation process can activate a dormant configuration utility for the native application in response to one or more secret input commands.

As used herein the term native application in addition to having its ordinary meaning can refer to an application other than a web application or to an application that is not implemented entirely in a web browser. The native application may be a hybrid native web application in an embodiment.

For purposes of summarizing the disclosure certain aspects advantages and novel features of several embodiments are described herein. It is to be understood that not necessarily all such advantages can be achieved in accordance with any particular embodiment of the embodiments disclosed herein. Thus the embodiments disclosed herein can be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

A tag management system TMS can enable companies to improve the way they manage the tags sometimes referred to as pixels which can be used on their web properties for an increasingly broad range of digital marketing technologies and vendors ranging from site analytics and affiliate marketing to multivariate testing and retargeting tools. Waiting for IT departments to implement tags may be often a barrier to marketing agility taking up tech bandwidth which could be more productively used on other areas of website development. Tag implementations are often incomplete and hard to keep track off. As such digital marketing users want to be more self sufficient in their management of these tags so that they can remove the IT bottleneck and impose on tech teams for more value adding improvements to their web properties.

Tag management systems can enable the placement of a JavaScript snippet on website pages. That code snippet may replace the tags that would otherwise have been individually deployed. For TMS users coding lines of HTML and JavaScript on pages can be replaced by a web interface where vendors actions and pages are unified and controlled.

Further a tag management solution may offer support for managing the tagging and or tracking of individual elements of a web page such as link clicks image clicks etc. This can be often provided via a tool which offers a number of convenience features for discovering the elements of the webpage which are desirable for tracking. Such tools may not be a feature of the webpage itself but rather an external tool that can be capable of interacting with the webpage. The methods of enabling these tools vary but may utilize well understood browser capabilities. One such capability can be a known as a bookmarklet. A bookmarklet is a web browser bookmark item that can be capable of injecting content into the visible webpage effectively integrating into the webpage in order to offer the aforementioned features.

The native mobile application environment brings a number of challenges for any third party vendor desiring a similar level of integration. These challenges can exist in part because the delivery platform may not be a web browser. It is the web browser platform that in some cases can allow these aforementioned graceful on demand integrations such as bookmarklets.

Rather the native mobile application environment may offer no such on demand integration capabilities. Native applications can be deployed as precompiled units of executable code. It may be within the source code of these applications and at development time versus on demand when these tools can be integrated. The challenge can then become ensuring the desired third party vendor tool may be accessible to the application s digital marketer or marketing user who can be managing the configuration of the application while not accessible to the general user audience and without the need of source code modification.

Systems and methods in accordance with some embodiments of the disclosure provide a means for a manager of a native mobile application to activate the user interface of a third party tool. This may be done without exposing the capability through a conventional user interface. In the general case this can be useful since the desired third party tool may not be intended to be utilized by the general user audience but rather by the application manager.

In one aspect an activation process can utilize a combination of phone shake gestures and interactions such as taps or voice. When the user can execute the proper sequence of shake gestures and interactions the third party tool s user interface can be revealed to the user. The sequence required may be complex enough to ensure no accidental activation occurs by a general user. This can be further secured with the use of a server side mechanism in some implementations.

Attention is now directed to which illustrates a system . System includes one or more portable or mobile devices also denoted herein for brevity as devices such as cellular phones PDAs Wi Fi 802.11 devices or other portable devices. In the system three portable devices and are shown but the system can include many more portable devices . It is further noted that in some embodiments the device may not be portable and the functionality herein may be implemented on more stationary devices such as desktop or notebook computers or other types of fixed devices. In addition portable devices as described herein may include other types of devices that are mobile but may not be portable.

System further includes a host processing system also denoted herein as host system comprising one or more servers as well as other associated computer and data processing hardware not shown in such as networking equipment displays monitors I O devices or other computer or data communication systems hardware and or software. In an embodiment host system may be provided by or operated by an associated host services company or host services supplier.

As noted previously host system includes one or more servers that include one or more databases as shown in either internal or external to the servers . These databases may be used to store advertisements and data such as is further described herein. Host system may also include one or more operating systems associated with the servers as well as one or more application programs to implement the various host service functionality as is described further herein. Host system may be implemented at a centralized physical location such as a network connected server farm or other similar facility and or may comprise a plurality of distributed servers connected by any of a variety of networking connections at different physical locations.

Devices are typically configured to connect to each other and or to host system through network as shown in . Network may include wired or wireless networking elements such as Ethernet LAN technologies telephony networks such as POTS phone networks cellular networks data networks or other telephony networks as well as Wi Fi or Wi Max networks other wired or wireless Internet network connections and or other networks as are known or developed in the art. These connections may be facilitated by one or more client applications as shown in running on devices as well as one or more host system applications running on one or more host system servers included in host system along with one more network interfaces and or other networking hardware and or software as is known or developed in the art not shown .

In one aspect a memory of the device may be provided with a tag management application or applications and a gesture to display module as shown in that may be installed on the user s device . The tag management application and gesture to display module may be installed on a ROM read only memory at a factory thereby negating the need for the user to download the client . Alternately the user may be supplied with the client application on a computer media such as a CD or DVD a thumb drive or via other media known or developed in the art.

Memory space may comprise DRAM SRAM FLASH hard disk drives or other memory storage devices configured to store and access operating systems the tag management application and or data . Data may include information such as advertisements received from an advertising source system.

Memory space may comprise DRAM SRAM FLASH hard disk drives or other memory storage devices such as media drives configured to store operating systems application programs and or data and memory space may be shared with distributed with or overlap with the memory storage capacity of database . In some embodiments memory space may include database or in some embodiments database may include data as shown in memory space .

Data stored in memory space and or database may include information such as tag management system information or other types of data. In particular memory space may include a host system application or applications stored in the memory space for execution on CPU to perform the various host side functionality described herein.

In one embodiment the following assumptions can be made regarding a source code topology illustrated in 

In one embodiment the third party tool can exist within the host application in order to provide functionality that can be intended to be utilized by the application s developer or manager not the general user audience. In order to achieve the activation of the tool without exposing the existence of the tool to the general user audience a gesture to display code module can be utilized.

Appendix A includes a code snippet for inclusion within an implantation of the gesture to display module which can be capable of detecting such sequences of gestures made with respect to devices based upon the Apple iOS platform. The functionality of this code snippet may be implemented on other platforms as well including the Google Android platform for example.

As noted some embodiments in accordance with the disclosure may include computer software and or computer hardware software combinations configured to implement one or more processes or functions such as those described herein and or in the related applications. These embodiments may be in the form of modules implementing functionality in software and or hardware software combinations. Embodiments may also take the form of a computer storage product with a computer readable medium having computer code thereon for performing various computer implemented operations such as operations related to functionality as describe herein. The media and computer code may be those specially designed and constructed for the purposes of performing functionality described herein or they may be of the kind well known and available to those having skill in the computer software arts or they may be a combination of both.

Examples of computer readable media within the spirit and scope of the present disclosure include but are not limited to magnetic media such as hard disks optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute program code such as programmable microcontrollers application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code may include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. Computer code may be comprised of one or more modules executing a particular process or processes to provide useful results and the modules may communicate with one another via means known in the art. For example some embodiments may be implemented using assembly language Java C C C or other programming languages and software development tools as are known in the art. Other embodiments of the disclosure may be implemented in hardwired circuitry in place of or in combination with machine executable software instructions.

The following example or one or more sub features thereof may be implemented in any combination with any of the features described above. Turning to an embodiment of a computing environment is shown for implementing various tag features including some or all of the tag management features described above. In the computing environment one or more end user systems such as end user systems can communicate over a network with a configuration information server and an analytics system . The end user system can include any form of computing device and may be a desktop laptop smartphone tablet a virtualization of a smartphone or tablet or the like. The end user system can further include a native application B which can provide application content or functionality to the end user system and a user input A that can receive user inputs for interacting with the native application B. The native application B can present a user interface on a display and can request and receive configuration information from the configuration information server for controlling or adjusting operation of the native application B. The configuration information can include a directives file such as a JavaScript file loadable by the native application B. The configuration information server can be a server implemented in computer hardware and or software and managed by the provider of the native application B or the provider of the analytics system for example. Further the network can include a local area network LAN a wide area network WAN a company intranet the public Internet combinations of the same or the like.

The analytics system is shown in communication with the configuration information server . The analytics system can be implemented in computer hardware and or software. For instance the analytics system may be implemented in physical and or virtual servers which may be geographically dispersed or co located. In the depicted embodiment the analytics system includes the user processing system and the tag management system as well as a user profile data repository . The user processing and tag management systems are shown separately for illustrative purposes although their functionality may be implemented by a single system. The analytics system can also be implemented without the tag management system and thus the functionality of the user processing system can be implemented independent of any tag management functionality. Further the analytics system can be implemented without the user processing system and thus the functionality of the tag management system can be implemented independent of any user processing functionality.

One or more marketing user systems such as marketing user systems can access the configuration information server analytics system or business intelligence system via the network . Like the end user system the marketing user system can include a native application B which can provide application content or functionality to the marketing user system and a user input A that can receive user inputs for interacting with the native application B. The marketing user system can also be any type of computing device including but not limited to a desktop laptop tablet smartphone a virtualization of a smartphone or tablet or the like. The native application B can be a different instance of the same or a similar application as the native application B. The user input A can include one or more of a motion sensor touch screen sensor microphone button or the like to receive user inputs. In addition the marketing user system further can include a browser C. The browser C or a configuration utility of the native application B can be used to access or change the configuration information stored on the configuration information server via the analytics system . Although the marketing user system is illustrated as having both the native application B and browser C some market user systems may not include the native application or B browser C depending on the implementation.

The marketing user system can be operated by marketing users such as digital marketing professionals business users providers of the native application B or any other individual who uses tags or data obtained from tags. Marketing users may not be the primary intended end users of the native applications B B in certain embodiments. Instead a marketing user may use the marketing user system to dynamically view or update the types of data tracked or analyzed for different users of the native application B. This data can be tracked by the user processing system via updating the configuration information stored in the configuration information server or updating processing by the user processing system of data obtained from the native application B to build updated user profiles . In addition marketing users can access the information stored in the business intelligence system to obtain an understanding of particular end user system for purposes such as evaluating the effectiveness of various marketing campaigns for instance.

In certain embodiments the user processing system can enable marketing users to configure the types of data tracked for different users of a native application B as well as analyze and report on this user data. For instance the user processing system can provide one or more user interfaces via the browser C that enable customization of collecting information about user of the native application B. Upon execution of the native application B the native application B can supply user data to the user the analytics system optionally through the configuration information server . Such user data can be stored in user profiles in the user profile data repository which may include physical computer storage. Marketing users can subsequently query the user profiles to obtain reports or other information about users of the native application B.

The tag management system can be used to manage the tags provided by third party vendors. For instance the tag management system can provide functionality for marketing users to select which third party vendor tags to associate with a native application for a variety of vendor specific processing purposes. These purposes can include obtaining analytics for data analysis or business intelligence tracking affiliate activity with respect to the native application obtaining user data for displaying targeted ads obtaining user data for customizing search functionality or email campaigns targeted to the end users obtaining user data for personalizing content of the native application obtaining user data for integration with social networking functionality obtaining user data for big data analysis combinations of the same or the like. Tags for any of these vendor specific processing purposes among others can be considered digital marketing tags. Data collected by the tags from the native application B can be provided to tag vendor systems which can perform any of this vendor specific processing. The data or related data may additionally or alternatively be passed to the tag vendor systems through the tag management system .

In an embodiment the tag management system provides functionality such as one or more user interfaces through the browser B for marketing users to map data sources in the native application B to data sources gathered by the tags. For instance if a native application includes a shopping cart value named cart value the tag management system can provide a user interface that enables a user to tell the tag management system to collect data on the cart value and map this data to a cart value variable of one of the tags.

However in some embodiments the tags can instead perform a greedy collection of some or all data available in the native application B. Since the tags and user processing system can be provided by the same entity the data obtained by the tags need not be mapped to third party mappings like the data obtained by the third party tags. Instead some or all of the data available to the tags can be provided to the user processing system for processing. Thus the tags can facilitate vendor neutral data gathering of some or all of the data elements in the native application B. Since this data may not be mapped to a vendor specific format in certain embodiments the data can be exported to business intelligence systems such as business intelligence system without a need to massage the data from its mapped form which can be cumbersome to its original raw form.

The systems can provide the processed data to a business intelligence system which may be owned operated or otherwise used by an operator of the native application B to analyze application user behavior. The business intelligence system can be implemented in computer hardware and or software. The business intelligence system can receive the raw data or processed data from the systems and store and manage the data in a way that facilitates a meaningful presentation of information to those interested in the performance of the native application B. In some embodiments the business intelligence system is part of the user processing system or the tag management system rather than separate as illustrated in .

Turning to an embodiment of a native application configuration information update process is shown. The process illustrates an example mode of operation of the computing environment of and may be implemented by the various components shown in the computing environment of . For convenience the process is described in the context of the computing environment but may instead be implemented by other systems described herein or other computing systems not shown. The process provides one example approach by which the end user system or marketing user system can obtain updated configuration information for the native application B or B upon start up of the native application B or B. Advantageously in certain embodiments the process enables the marketing users to make digital marketing changes to the native application B without having to submit an updated version of the native application B to an application approval organization or without the end users having to re download the updated version of the native application B.

At block the end user system or marketing user system can receive a command to begin executing the native application B or B. The command can be received from an end user of the end user system or marketing user of the marketing user system via the user input A or A. The native application B and B can include first party code providing application functionality for the end user of the end user system . In addition the native application B and B can include integrated third party code such as third party source code and or a third party code library. The third party code can perform functions intended to be hidden from the end user of the end user system .

At block the end user system or marketing user system can request configuration information for the native application B or B from the configuration information server via the network . The native application B or B can cause the end user system or marketing user system to request the configuration information as part of a start up process for the native application B or B.

At block the end user system or marketing user system can receive the configuration information for the native application B or B from the configuration information server via the network . The configuration information can include a directives file such as a JavaScript file loadable by the native application B or B as part of start up process for the native application B or B or usable as a reference file once the native application B or B may be running. The configuration information can be stored to a memory of the end user system or a memory of the marketing user system in some implementations. The configuration information can provide information on what to track within the native application B or B for example element identifiers associated with links or events in the native application B or B how the information should be tracked who should be tracked or the like. In some embodiments the configuration information can be provided by the provider of the analytics system via the configuration information server .

At block the end user system or marketing user system can execute the native application B or B based at least on the configuration information from the configuration information server . In one example the end user system or marketing user system can activate listeners of the third party code integrated in the native application B or B so that the activated listeners process user inputs to the user input A or A. The activated listeners can include button listeners scroll listeners video tracking listeners or the like for instance. Executing the native application B or B can cause the end user system or marketing user system to display an end user interface on a screen of the end user system or marketing user system .

At block the marketing user system can execute the native application B based at least on the configuration information from the configuration information server . In one example the marketing user system can activate listeners of the third party code integrated in the native application B so that the activated listeners process user inputs to the user input A. The activated listeners can include button listeners scroll listeners video tracking listeners or the like for instance. Executing the native application B or B can cause the end user system or marketing user system to display an end user interface on a screen of the end user system or marketing user system . In some embodiments the configuration information can be obtained as described with respect to blocks and of the process of . Additionally or alternatively the configuration information can be obtained from configuration information loaded onto the marketing user system by the marketing user or from configuration information previously loaded or saved by the native application B for example.

At block the native application B can receive a user input via the user input A. The user input A can receive inputs including one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system or a voice input to a microphone of the marketing user system .

At block the native application B can determine whether the user input received at block matches an initial activation action. For instance the initial activation action in one implementation can be three consecutive shakes of the marketing user system . Thus in this example if the native application B determines that the marketing user system has been shaken three times the native application B can determine that the user input matches the initial activation action. In other implementations the initial activation action can include one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system a voice input to a microphone of the marketing user system or the like. Moreover the initial activation action can be coded in the native application B or determined from the configuration information at run time for instance. In some embodiments the native application B or the marketing user system can provide feedback to indicate that the user input matches the initial activation action. The feedback can include one or more or a combination of a sound output from a speaker of the marketing user system a vibration of the marketing user system a translucent overlay on a screen for instance shadowing coloring bordering opaquing or gridding of one or more elements displayed on the screen of the marketing user system a dimming or brightening of at least part of a display on a screen of the marketing user system a small icon displayed on a display for instance in a corner on a screen of the marketing user system or the like.

If the native application B determines that the user input does not match the initial activation action the process moves to block and the marketing user system can continue execution of the native application B. On the other hand if the native application B determines that the user input matches the initial activation action the process moves to block .

At block the native application B can activate a confirmation application to process subsequent user inputs. The confirmation application can be a routine of the native application B that remains dormant during normal use by the end user but can activate upon satisfaction of the initial activation action. The confirmation application for example can be a part of the third party code integrated in the native application B. In some embodiments the confirmation application can divert or block some or all user inputs to the user input A from being processed by the first party code of the native application B such as by providing a visible or invisible overlay on the display of the marketing user system to receive all touch inputs to the user input A. Moreover in some embodiments the native application B or the marketing user system can provide feedback to indicate that the confirmation application has been activated. The feedback can include one or more or a combination of a sound output from a speaker of the marketing user system a vibration of the marketing user system a translucent overlay on a screen for instance shadowing coloring bordering opaquing or gridding of one or more elements displayed on the screen of the marketing user system a dimming or brightening of at least part of a display on a screen of the marketing user system a small icon displayed on a display for instance in a corner on a screen of the marketing user system or the like.

At block the native application B determines whether a timeout period for the confirmation application has expired. The timeout period can be a relatively short duration for instance about 5 10 or 20 seconds or more or less during which the marketing user of the marketing user system can enter another user input to confirm an intent to activate the configuration utility. If no user inputs are received during the timeout period the process moves to block and the marketing user system can continue normal execution of the native application B. On the other hand if a user input is received during the timeout period the process moves to block .

At block the confirmation application can receive the user input via the user input A. The user input A can receive inputs including one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system or a voice input to a microphone of the marketing user system .

At block the confirmation application can determine whether the user input received at block matches a confirmation activation action. For instance the confirmation activation action in one implementation can be three consecutive taps on a screen of the marketing user system . Thus in this example if the confirmation application determines that the screen of the marketing user system has been tapped three times the confirmation application can determine that the user input matches the confirmation activation action. In other implementations the confirmation activation action can include one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a voice input to a microphone of the marketing user system or the like. Moreover the confirmation activation action can be coded in the native application B or determined from the configuration information at run time for instance. If the confirmation application determines that the user input does not match the confirmation activation action the process moves to block and the marketing user system can continue execution of the native application B. On the other hand if the confirmation application determines that the user input matches the confirmation activation action the process moves to block .

At block the native application B can display the configuration utility. The configuration utility can be a routine of the native application B that remains dormant during normal use by the end user but can activate upon satisfaction of the initial and confirmation activation actions. The configuration utility can be used by the marketing user to view the configuration information from the configuration information server in juxtaposition to overlaid on or otherwise together with the end user interface of the native application B. For example the configuration utility can be a part of the third party code integrated in the native application B and present the configuration information about what tags are being leveraged at that moment by the first party code of the native application B what elements of the first party code user interface can be tagged or how to identify an element of the first party application for tagging purposes or the like. In addition the configuration utility can be used by the marketing user to change the configuration information stored at the configuration information server such as to enable or remove tracking for one or more elements of the native application B. In some embodiments the configuration utility can provide read only access to the configuration information since the initial and confirmation activation actions may not be considered sufficient security protections to permit editing of the configuration information stored in the configuration information server . In other embodiments the configuration utility can provide read and write access to the configuration information. Moreover in some embodiments at block the native application B can additionally or alternatively invoke a particular routine or operation module. The routine or operation module can include for example a function method script or the like.

At block the marketing user system can execute the native application B based at least on the configuration information from the configuration information server . In one example the marketing user system can activate listeners of the third party code integrated in the native application B so that the activated listeners process user inputs to the user input A. The activated listeners can include button listeners scroll listeners video tracking listeners or the like for instance. Executing the native application B or B can cause the end user system or marketing user system to display an end user interface on a screen of the end user system or marketing user system . In some embodiments the configuration information can be obtained as described with respect to blocks and of the process of .

At block the native application B can receive a user input via the user input A. The user input A can receive inputs including one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system or a voice input to a microphone of the marketing user system .

At block the native application B can determine whether the user input received at block matches activation instructions. For instance the activation instructions in one implementation can be three consecutive shakes of the marketing user system . Thus in this example if the native application B determines that the marketing user system has been shaken three times the native application B can determine that the activation instructions have been received. In other implementations the activation instructions can be determined to be received in response to sensing one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a voice input to a microphone of the marketing user system or the like. Moreover the activation instructions can be coded in the native application B or determined from the configuration information at run time for instance. In some embodiments the native application B or the marketing user system can provide feedback to indicate that the user input matches the activation instructions. The feedback can include one or more or a combination of a sound output from a speaker of the marketing user system a vibration of the marketing user system a translucent overlay on a screen for instance shadowing coloring bordering opaquing or gridding of one or more elements displayed on the screen of the marketing user system a dimming or brightening of at least part of a display on a screen of the marketing user system a small icon displayed on a display for instance in a corner on a screen of the marketing user system or the like.

If the native application B determines that the activation instructions have not been received the process moves to block and the marketing user system can continue execution of the native application B. On the other hand if the native application B determines that the activation instructions have been received the process moves to block .

At block the native application B can request a user authentication from the marketing user. The native application B can request that the marketing user for example provide a username a password a fingerprint or the like via the user input A. At block the native application B can receive the user authentication from the user input A. At block the native application B can determine whether the user authentication is confirmed to match the authentication for a marketing user of the native application B. If the user authentication is not confirmed to match the authentication for a marketing user of the native application B the process moves to block and the marketing user system can continue execution of the native application B. On the other hand if the user authentication is confirmed to match the authentication for a marketing user of the native application B the process moves to block .

At block the native application B can display the configuration utility. The configuration utility can be a routine of the native application B that remains dormant during normal use by the end user but can activate upon satisfaction of the initial and confirmation activation actions. The configuration utility can be used by the marketing user to view the configuration information from the configuration information server in juxtaposition to overlaid on or otherwise together with the end user interface of the native application B. For example the configuration utility can be a part of the third party code integrated in the native application B and present the configuration information about what tags are being leveraged at that moment by the first party code of the native application B what elements of the first party code user interface can be tagged or how to identify an element of the first party application for tagging purposes or the like. In addition the configuration utility can be used by the marketing user to change the configuration information stored at the configuration information server such as to enable or remove tracking for an element of the native application B. In some embodiments the configuration utility can automatically provide read and write access to the configuration information since the marketing user has provided both the activation instructions and a confirmed user authentication which may be considered sufficient security protections to permit editing of the configuration information stored in the configuration information server . Moreover in some embodiments at block the native application B can additionally or alternatively invoke a particular routine or operation module. The routine or operation module can include for example a function method script or the like.

At block the marketing user system can execute the native application B based at least on the configuration information from the configuration information server . In one example the marketing user system can activate listeners of the third party code integrated in the native application B so that the activated listeners process user inputs to the user input A. The activated listeners can include button listeners scroll listeners video tracking listeners or the like for instance. Executing the native application B or B can cause the end user system or marketing user system to display an end user interface on a screen of the end user system or marketing user system . In some embodiments the configuration information can be obtained as described with respect to blocks and of the process of .

At block the native application B can receive activation instructions from the marketing user of the marketing user system . For instance the activation instructions in one implementation can be three consecutive shakes of the marketing user system . Thus in this example if the native application B determines that the marketing user system has been shaken three times the native application B can determine that the activation instructions have been received. In other implementations the activation instructions can be determined to be received in response to sensing one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system a voice input to a microphone of the marketing user system or the like. Moreover the activation instructions can be coded in the native application B or determined from the configuration information at run time for instance.

At block the native application B can display the configuration utility. The configuration utility can be a routine of the native application B that remains dormant during normal use by the end user but can activate upon satisfaction of the initial and confirmation activation actions. The configuration utility can be displayed as a highlighting of one or more elements displayed on the end user interface a logo indicative of activation of the configuration utility a configuration display menu providing the configuration information from the configuration information server or the like. The configuration utility can be a part of the third party code integrated in the native application B. Advantageously in certain embodiments the configuration utility can present the configuration information about what tags are being leveraged at that moment by the first party code of the native application B what elements of the first party code user interface can be tagged or how to identify an element of the first party application for tagging purposes or the like. In addition the configuration utility can be used by the marketing user to change the configuration information stored at the configuration information server such as to enable or remove tracking for an element of the native application B.

At block the configuration utility can receive a user selection via the user input A. The user input A can receive inputs including one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system or a voice input to a microphone of the marketing user system .

At block the configuration utility can determine whether the user selection received at block is a configuration selection. For example in one implementation when the user selection includes double tapping on the screen over of a displayed element the user selection can be considered a configuration selection. In other implementations the user selection can be considered a configuration selection in response to selection of menu displays of the configuration utility or one or more or a combination of a tap on a screen of the marketing user system a pattern drawn on a screen of the marketing user system a shake of the marketing user system a fingerprint detected by a scanner of the marketing user system a voice input to a microphone of the marketing user system or the like.

If the user selection is determined not to be a configuration selection the process moves to block and the user selection can be processed using the end user features of the native application B. For example if the user selection designated an element such as a link or button of the end user interface of the native application B the first party code of the native application B can process the selection as if an end user selected the element of the end user interface. The process can then move to block and await a further user selection. On the other hand if the user selection is determined to be a configuration selection the process moves to block .

At block the user selection can be processed using the configuration utility. For example if the user selection designated an element such as a link or button of the end user interface of the native application B the configuration utility can display the configuration information such as an element identifier associated with the selected element in a configuration display menu. In another example if the user selection designated an item in a configuration display menu of the configuration utility the configuration utility can accept selection of the item and perform the function associated with the designated menu item.

The user interface controls shown in and are merely illustrative examples and can be varied in other embodiments. For instance buttons dropdown boxes select boxes text boxes check boxes slider controls and other user interface controls shown may be substituted with other types of user interface controls that provide the same or similar functionality. Further the user interface controls may be combined or divided into other sets of user interface controls such that similar functionality or the same functionality may be provided with very different looking user interfaces. Moreover each of the user interface controls may be selected by a user using one or more input options such as a mouse touch screen input or keyboard input among other user interface input options.

Many other variations than those described herein will be apparent from this disclosure. For example depending on the embodiment certain acts events or functions of any of the algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially. In addition different tasks or processes can be performed by different machines and or computing systems that can function together.

Although some embodiments of the disclosure have been illustrated using tag management systems and associated devices and systems as examples the disclosure can further apply to other application environments. In one example the disclosure can apply to native application environments where a digital marketing user or native application provider can desire to flexibly change the way a native application behaves after deployment such as by changing colors background images text or the like of the native application. In another example the disclosure can apply to native application environments where a digital marketing user or native application provider may desire to use the native application itself as a medium for viewing or changing configurations for the native application for end users of the native application. In a further example the disclosure can apply to native application environments where a digital marketing user or native application provider can desire to display or alter information related to third party code embedded in a first party native application or third party configurations associated with the first party native application. In yet another example the disclosure can apply to native application environments where a digital marketing user or native application provider can desire to activate third party features embedded in a first party native application where the third party features are intended for use by the digital marketing user or native application provider and not for use by the end user of the first party native application.

The various illustrative logical blocks modules and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.

The various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine such as a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be a controller microcontroller or state machine combinations of the same or the like. A hardware processor can include electrical circuitry or digital logic circuitry configured to process computer executable instructions. In another embodiment a processor includes an FPGA or other programmable device that performs logic operations without processing computer executable instructions. A processor can also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. A computing environment can include any type of computer system including but not limited to a computer system based on a microprocessor a mainframe computer a digital signal processor a portable computing device a device controller or a computational engine within an appliance to name a few.

The steps of a method process or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module stored in one or more memory devices and executed by one or more processors or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of non transitory computer readable storage medium media or physical computer storage known in the art. An example storage medium can be coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The storage medium can be volatile or nonvolatile. The processor and the storage medium can reside in an ASIC.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or states. Thus such conditional language is not generally intended to imply that features elements and or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. Further the term each as used herein in addition to having its ordinary meaning can mean any subset of a set of elements to which the term each is applied.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As will be recognized certain embodiments of the inventions described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others.

