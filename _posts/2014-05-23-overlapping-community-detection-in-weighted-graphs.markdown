---

title: Overlapping community detection in weighted graphs
abstract: The disclosure includes a system and method for detecting communities in a weighted graph. The community detection module includes a tagset data aggregator, a counts statistics engine, a weighted graph generator, a coherence engine, a community detector and a tag recommendation engine. The tagset data aggregator receives tagset data. The counts statistics engine determines counts statistics for the tagset data. The weighted graph generator generates and denoises weighted tag occurrence graph based on the counts statistics. The coherence engine determines importance score for all tags and coherence score for all tagsets in the tagset data. The community detector determines maximally coherent communities in the weighted tag co-occurrence graph. The tag recommendation engine recommends tags in real time using the maximally coherent communities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09418142&OS=09418142&RS=09418142
owner: Google Inc.
number: 09418142
owner_city: Mountain View
owner_country: US
publication_date: 20140523
---
This application claims the benefit of U.S. Provisional Application No. 61 827 513 filed on May 24 2013 which is herein incorporated in its entirety by reference.

Community detection is a well studied paradigm and is used in a variety of domains such as physics biology computer science social networks analysis etc. to find novel and useful collection of entities that go together. One way to form communities is by amassing entities such as tags or keywords in collaborative tagging systems products in retail systems people in social networking systems or genes in biological systems.

There are two main problems in community detection. First the data used to associate entities with other entities might be noisy as in some cases these associations might just be random while in other cases these might be significant. This degree of association between pairs of entities might be quantified by a weight between them. Therefore detecting communities in weighted graphs is a more important problem than in unweighted graphs. The second problem is that the communities themselves might be overlapping because an entity might be associated with more than one community. For example a product like a wrist watch might go with both electronic products as well as jewelry products. Similarly an ambiguous keyword like bank might mean a financial institution or a bank of a river. Therefore the community detection paradigm must deal with overlapping communities in weighted graphs.

Previous attempts to create graphs include generating an unweighted graph either directly or by thresholding a weighted graph detecting communities and then removing the noise from the communities. Thresholding however leads to a significant loss of information and makes the final communities detected very sensitive to the threshold used to convert the weighted graph into unweighted graph. In addition removing the noise from the communities after they have been detected results in poorly defined communities because important tags may get improperly removed.

According to one innovative aspect of the subject matter described in this disclosure a system includes a processor and a memory storing instructions that when executed cause the system to identify a context defining a tagset determine a plurality of tagsets each including one or more of the tags and a vocabulary of all tags generate counts statistics using the plurality of tagsets and the vocabulary of all tags generate a weighted co occurrence graph including each pair of tags in the vocabulary of all tags based on the counts statistics denoise the weighted tag co occurrence graph and responsive to removing the noise identify at least one community in the weighted tag co occurrence graph.

In general another innovative aspect of the subject matter described in this disclosure may be embodied in methods that include identifying a context defining a tagset determining a plurality of tagsets each including one or more of the tags and a vocabulary of all tags generating counts statistics using the plurality of tagsets and the vocabulary of all tags generating a weighted co occurrence graph including each pair of tags in the vocabulary of all tags based on the counts statistics denoising the weighted tag co occurrence graph and responsive to removing the noise identifying at least one community in the weighted tag co occurrence graph of overlapping communities.

Other implementations of one or more of these aspects include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other implementations may each optionally include one or more of the following features. For instance the operation further includes determining a measure of co occurrence consistency for each pair of tags in the vocabulary of all tags based on the counts statistics the measure of co occurrence consistency measuring how much more is a likelihood of each pair of tags co occurring in a tagset from the plurality of tagsets relative to random determining whether a measure of co occurrence consistency for a pair of tags in the weighted tag co occurrence graph is below a threshold responsive to determining that the measure of co occurrence consistency is below a threshold removing an edge connecting the pair of tags from the weighted tag co occurrence graph as noise determining whether a measure of co occurrence consistency for a pair of tags in the weighted tag co occurrence graph is above a threshold responsive to determining that the measure of co occurrence consistency is above a threshold re computing counts statistics and updating the measure of co occurrence consistency for the pair of tags in the weighted tag co occurrence graph based on the recomputed counts statistics. In another embodiment the operation further includes determining an importance score of the one or more tags in each of the plurality of tagsets using the weighted tag co occurrence graph the importance score indicating how highly each tag is connected to other tags in each of the plurality of tagsets determining coherence of each of the plurality of tagsets based on the importance score of the one or more tags the coherence being a measure of community ness and expressed as the aggregate of the importance score of the one or more tags in each of the plurality of tagsets identifying the one or more communities from the weighted tag co occurrence graph by comparing the coherence between each of the plurality of tagsets determining a pair of tags with a measure of co occurrence consistency above a threshold as seed identifying the seed as a current tagset determining the coherence of the current tagset adding a first tag that has a co occurrence consistency measured with all tags of the current tagset as being above the threshold to create a grow tagset removing a second tag having a least importance score from the current tagset to create a shrink tagset comparing a coherence measured for the grow tagset with a coherence measured for the shrink tagset responsive to the coherence measured for the grow tagset being greater than the coherence measured for the shrink tagset identifying the grow tagset as a next tagset and adding a third tag that has a co occurrence consistency measured with remaining tags of the next tagset as being above the threshold responsive to the coherence measured for the grow tagset being lesser than the coherence measured for the shrink tagset identifying the shrink tagset as a next tagset and removing a fourth tag having a least importance score from the next tagset comparing the coherence measured for the next tagset with the coherence of the current tagset responsive to the coherence measured for the current tagset being greater than the coherence measured for the next tagset determining the current tagset as being a community responsive to the coherence measured for the current tagset being lesser than the coherence measured for the next tagset adding a next tag that has a co occurrence consistency measured with all tags of the current tagset as being above the threshold to create a next grow tagset and removing a next tag having a least importance score from the current tagset to create a next shrink tagset creating a largest candidate seed by adding a next tag to the seed to increase coherence until failure and identifying the largest candidate seed as the current tagset. Once the community has been created in one embodiment the operations further comprise recommending tags in real time based on the at least one community in the weighted tag co occurrence graph.

The technology may be particularly advantageous in a number of respects. First the system provides algorithms to aggressively remove noise at the weighted graph generation and to greedily detect maximally coherent communities in the weighted graph. In addition because the community detection is performed on a weighted graph the detected communities are overlapping strong and tightly bound.

A system and method for detecting communities in a weighted graph that is generated from aggregated tagset data is described below.

The network can be a conventional type wired or wireless and may have a number of configurations for example a star configuration a token ring configuration or other configurations. Furthermore the network may include one or more of a local area network LAN a wide area network WAN e.g. the Internet and other interconnected data paths across which multiple devices may communicate. In some implementations the network may be a peer to peer network. The network may also be coupled to or include portions of a telecommunications network for sending data in a variety of different communication protocols. In some implementations the network includes BLUETOOTH communication networks or a cellular communications network for sending and receiving data for example via short messaging service SMS multimedia messaging service MMS hypertext transfer protocol HTTP direct data connection WAP electronic message etc. While only one network is illustrated any number of networks may be coupled to the above mentioned entities.

The user devices . . . in are used by way of example. Although only two devices are illustrated the technology applies to a system architecture having one or more user devices . In some embodiments the community detection module can be stored on a user device which is connected to the network via signal line . The community detection module can be a thin client application that includes part of the community detection module on the user device and part of the community detection module on the web server to detect one or more communities. The user device can be any computing device that includes a memory and a processor. For example the user device can be a laptop computer a desktop computer a tablet computer a mobile telephone a personal digital assistant a mobile email device a portable game player a portable music player a television with one or more processors embedded therein or coupled thereto or any other electronic device capable of accessing the network etc.

In some embodiments the user device includes a browser . The browser can be software including routines stored in the memory and executed by the processor of the user device . The browser includes any browser application that can retrieve pages hosted by a server for example the web server a social network server not shown a third party server not shown etc. and can present the pages on a display not shown on the user device . In some embodiments the browser retrieves and presents the pages hosted by the user device . The term page includes any document or information resource that comprises textual elements non textual elements for example static images animated images audio video etc. interactive elements for example games buttons hyperlinks etc. scripts for example JavaScript code implementing Ajax techniques etc. metadata etc. In some embodiments the page is a web page in any file format for example HTML HTML5 XHTML XML etc. .

In some embodiments the community detection module can be operable on the web server which is coupled to the network via signal line . The web server can be any computing device such as a hardware server including a processor a memory and network communication capabilities. The web server includes software instructions and or data for generating online services and providing content from the online services to a user who has a subscription with the online services. For example the web server transmits content such as video audio images publication entries etc. from an online service. In some embodiments the content transmitted includes keywords or terms assigned to content by users of the online service. An application such as a browser launched on a user device receives the content transmitted by the web server via the network . Other examples of a web server include an online service for users to provide reviews and commercial websites for purchasing products.

The web server comprises an online service engine that can be software including routines that when executed by a processor not pictured generates an online service that is hosted by the web server . The online service engine can be stored on a non transitory memory associated with the web server . The online service engine is dedicated to generating and providing content for users. The online service engine sends and receives data to and from other entities of the system via the network . For example the online service engine generates a video sharing online service that plays a video responsive to receiving a user request from the user device . In another example the online service is an image hosting service that returns one or more images in response to receiving an application programming interface API call. In some embodiments the online service engine receives data including keywords terms describing the content from users of the online service. For example the online service can be a social bookmarking service that hosts and displays publication entries annotated by users with tags. In another example the online service can be an online database that provides information related to movies television programs and video games including user reviews and tags annotated by experts. Other examples of online services that provide access to content include current news financial news search service maps price aggregator service weather service airline reservations file archives electronic mail blogs micro blogs social networks calendars geolocation service etc.

In some embodiments the browser accesses the online service using hypertext transfer protocol HTTP requests and retrieves content for one or more web pages generated from the online service engine .

The community detection module can be software including routines for detecting communities in a weighted graph. In some embodiments the community detection module can be implemented using hardware including a field programmable gate array FPGA or an application specific integrated circuit ASIC . In some other embodiments the community detection module can be implemented using a combination of hardware and software. In some embodiments the community detection module may be stored in a combination of the devices and servers or in one of the devices or servers.

In some embodiments community detection module receives tagset data including a plurality of tagsets and identifies a context defining a tagset. The community detection module generates counts statistics using the plurality of tagsets. The community detection module generates a weighted tag co occurrence graph based on the counts statistics and denoises the weighted tag co occurrence graph. The community detection module determines importance scores for all tags in the tagset data. The community detection module determines coherence scores for all tagsets in the tagset data. The community detection module determines maximally coherent communities in the weighted tag co occurrence graph and recommends tags in real time using the maximally coherent communities. The community detection module is described below in more detail with reference to .

Referring now to an example of the community detection module is shown in detail. is a block diagram of a computing device that includes the community detection module a processor a memory a communication unit and a storage device according to some implementations. These components of the computing device are communicatively coupled to each other by a bus . Optionally the computing device can be a web server . In some embodiments the computing device can be a user device or other servers.

The processor includes an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device. The processor is coupled to the bus for communication with the other components via signal line . The processor processes data signals and may include various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although a single processor is shown in multiple processors may be included. The processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks including various types of feature extraction and sampling. Other processors operating systems sensors displays and physical configurations may be possible.

The memory stores instructions and or data that may be executed by the processor . The memory is coupled to the bus for communication with the other components via signal line . The instructions and or data may include code for performing the techniques described herein. The memory may be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory or some other memory device known in the art. In some embodiments the memory also includes a non volatile memory or similar permanent storage device and media for example a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or some other mass storage device for storing data on a more permanent basis.

The communication unit transmits and receives data to and from one or more of the user devices and or the web server depending upon where the community detection module may be stored. The communication unit is coupled to the bus via signal line . In some embodiments the communication unit includes a port for direct physical connection to the network or to another communication channel. For example the communication unit includes a USB SD CAT 5 or similar port for wired communication with the user device . In some embodiments the communication unit includes a wireless transceiver for exchanging data with the user device or other communication channel using one or more wireless communication methods for example IEEE 802.11 IEEE 802.16 BLUETOOTH or another suitable wireless communication method.

In some embodiments the communication unit includes a cellular communications transceiver for sending and receiving data over a cellular communications network for example via short messaging service SMS multimedia messaging service MMS hypertext transfer protocol HTTP direct data connection WAP electronic message or another suitable type of electronic communication. In some embodiments the communication unit includes a wired port and a wireless transceiver. The communication unit also provides other conventional connections to the network for distribution of one or more files and media objects using standard network protocols for example TCP IP HTTP HTTPS and SMTP.

The storage device can be a non transitory memory that stores data used by the community detection module . In some embodiments the data is stored temporarily for example in a cache. The storage device may be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory or some other memory device known in the art. In some embodiments the storage device also includes a non volatile memory or similar permanent storage device and media such as a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or some other mass storage device known in the art for storing information on a more permanent basis. In the illustrated implementation the storage device is communicatively coupled by the bus for communication with the other components of the computing device via signal line . Although only one storage device is shown in multiple storage devices may be included. In some other embodiments the storage device may not be included in the computing device and can be communicatively coupled to the computing device via the network .

In some embodiments the data stored in the storage includes tagset data counts statistics data including co occurrence counts graph weighted tag co occurrence consistency graph importance scores coherence scores list of identified communities community scores recommendation scores recommended tags etc. The tagset data aggregator maintains the tagset data in the storage aggregated from the online services hosted by the web servers in some implementations. Examples of tagsets aggregated may include video tags bookmark tags movie tags etc. The counts statistics generated by the counts statistics engine may include co occurrence counts marginal counts total counts co occurrence probability and marginal probability associated with the tagset data. In some embodiments the weighted graph generator converts the co occurrence counts graph into the weighted tag co occurrence graph for storing in the storage . In some embodiments the coherence engine stores the importance scores determined for the tags in tagsets and the coherence scores determined for the tagsets in the storage . In some embodiments the community detector stores the communities detected using a greedy algorithm in the storage . In some embodiments the tag recommendation engine stores community scores recommendation scores etc. used in identifying the recommendation tags. The storage may store other data for providing the functionality described herein.

In some embodiments the community detection module includes a controller a tagset data aggregator a counts statistics engine a weighted graph generator a coherence engine a community detector a tag recommendation engine and a user interface module . These components of the community detection module are communicatively coupled to each other via the bus . Persons of ordinary skill in the art will recognize that some of the components could run as a separate application on the same computing device or a separate computing device . For example the tagset data aggregator could be a standalone application that runs on a separate server.

The controller can be software including routines for receiving data via the communication unit routing the data to the appropriate engine or module and transmitting responses from modules or engines to the communication unit for transmission to the user device or the web servers . In some embodiments the controller can be a set of instructions executable by the processor to provide the functionality described below for managing data and handling communications between the community detection module and other components of the computing device . In some embodiments the controller can be stored in the memory of the computing device and can be accessible and executable by the processor . The controller may be adapted for cooperation and communication with the processor and other components of the computing device via signal line .

In some embodiments the controller identifies the type of data being received and transmits the data to the appropriate module or engine of the community detection module . For example the controller receives content e.g. video audio image etc. from the web server for rendering and transmits the content to the user interface module . In some other embodiments the controller receives user inputs and user actions submitted by the user from the user device . The controller sends the user actions and the user inputs to the appropriate module or engine of the community detection module . For example the controller receives a request to create one or more tags for content displayed on a web page hosted by the web server . The controller then forwards the request to the tagset data aggregator .

In some embodiments the controller receives information from other components of the community detection module and transmits the information to the appropriate component in the system via the communication unit . For example the controller receives graphical data for generating a user interface from the user interface module . The controller then transmits the graphical data to a display device not shown that is part of the user device . The graphical data causes the user device to present the user interface to the user.

In some embodiments the controller receives data from components of the community detection module and stores the data in the storage device . For example the controller receives data describing counts statistics for tagset data from the counts statistics engine and stores the data in the storage device . In some embodiments the controller receives data determining coherence scores for communities detected by the community detector and stores the coherence scores in the storage device . In some embodiments the controller retrieves data from the storage device and sends the data to components of the community detection module . For example the controller retrieves data including pairs of tags from the storage device as seeds for using in detecting communities and sends the data to the community detector .

The tagset data aggregator can be software including routines for collecting data including tagsets from webpages of an online service hosted by a web server . In some embodiments the tagset data aggregator can be a set of instructions executable by the processor to provide the functionality described below for collecting tagset data from webpages. In some embodiments the tagset data aggregator can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the tagset data aggregator can be adapted for cooperation and communication with the processor the counts statistics engine and other components of the computing device via signal line .

In some embodiments the tagset data aggregator aggregates tagsets for content annotated by collaborative users of the online service. The collaborative users collaborate and create diverse tagsets to describe and organize content on the online service. Each tagset includes a plurality of tags describing a specific entity or topic. The tags include keywords or terms describing the entity that they are assigned to and allow the entity to be found again by browsing or searching on the online service. For example a video sharing online service receives tags such as football super bowl touchdown field goal etc. for a video clip that is associated with the sport football. In another example a social bookmarking online service receives tags such as culinary cars travel fashion etc. for web bookmarks that link to content that users find interesting. In some embodiments the tagset data aggregator receives and or aggregates tags for content that already exist and have been uploaded or bookmarked by the online service. For example a music streaming online service includes music albums ready to play from which the user creates multiple playlists. The user then adds tags such as gym roadtrip party etc. to describe the playlists.

In some embodiments the tagset data aggregator aggregates tagsets including a plurality of tags annotated by expert users. For example an online advertising service receives tags such as basketball football scholarship political science sorority etc. from expert advertisers that target high school students applying to colleges. In a second example a movie review online service receives tags such as corruption bank robbery revenge adventure family etc. from movie experts describing the movie entries associated with different genres.

In some instance the tagset data aggregator identifies a context for defining a tagset. In some embodiments the context includes a resource tagset where tags are associated with a single resource. For example the tags could be tags applied to images in a photo sharing online service. The resource tagset is useful in determining the relationships among tags and creating tag communities. In some embodiments the context includes a session tagset that has tags for resources consumed in the same session. For example the session tagset is useful in building a recommendation engine to predict the next image video to recommend given the user s past browsing history within the session. In some embodiments the context includes a user consumed tagset that includes tags of resources consumed by the user. For example user consumed tags include tags for things viewed commented on etc. by the user and are used to generate user profiles. In some embodiments the context includes a user generated tagset that includes tags of resources generated by the user. For example the user generated tagset includes tags that the user applied to content items at multiple online services for example an online service for collecting recipes a photo sharing online service a micro blogging a social network etc. In some embodiments the tagset data aggregator determines a vocabulary of all unique tags in the tagset data aggregated from the online service.

In some embodiments the tagset data aggregator stores data describing the tagset data and their size the plurality of tags in each tagset and the vocabulary of all unique tags determined for the tagset data in the storage . In some implementations the tagset data aggregator sends the vocabulary of all unique tags and or the tagset data to the counts statistics engine the coherence engine and or the community detector .

The counts statistics engine can be software including routines for generating counts statistics from the tagset data. In some embodiments the counts statistics engine can be a set of instructions executable by the processor to provide the functionality described below for generating counts statistics from the tagset data. In some embodiments the counts statistics engine can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the counts statistics engine may be adapted for cooperation and communication with the processor the weighted graph generator and other components of the computing device via signal line .

In some embodiments the counts statistics engine receives tagset data including a plurality of tagsets from the tagset data aggregator and determines counts statistics from the tagset data. The counts statistics generated may include co occurrence counts marginal counts total counts co occurrence probability and marginal probability.

In some embodiments the counts statistics engine determines co occurrence count over each pair of tags V V where V represents the vocabulary of all unique tags and each pair of tags are elements of the set represented by the Cartesian Product V V. The co occurrence count indicates the number of tagsets in which both tags co occur. For example the equation for generating a co occurrence count over each pair of tags represented by the symbol can be 

In some embodiments the counts statistics engine determines a co occurrence count threshold as an absolute value or a relative value based on the N the tagset data size. The counts statistics engine sets the co occurrence counts in the co occurrence counts graph that are below the co occurrence count threshold to zero to control for noise in co occurrence counts.

In some embodiments the count statistics engine determines marginal counts for all unique tags V where tag is an element of the vocabulary of all unique tags V . The marginal counts represent the number of co occurrence pairs in which tag a occurred with some other tag in the tagsets data. For example the equation for generating marginal counts for all unique tags represented by the symbol can be 

In some embodiments the counts statistics engine determines total counts which represents the total number of pairs in which some tag co occurred with some other tag in the tagset data. For example the equation for generating total counts represented by the symbol can be 

In some embodiments the counts statistics engine generates the co occurrence probability for each pair of tags and the marginal probability for all unique tags based on the counts determined above. For example the equations for generating co occurrence and marginal probabilities represented by P and P respectively can be 

In some embodiments the counts statistics engine sends the data describing the counts statistics to the weighted graph generator . In some embodiments the counts statistics engine stores the counts statistics generated for the tagset data in the storage .

The weighted graph generator can be software including routines for generating a weighted graph from the co occurrence counts graph. In some embodiments the weighted graph generator can be a set of instructions executable by the processor to provide the functionality described below for generating a weighted graph. In some embodiments the weighted graph generator can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the weighted graph generator may be adapted for cooperation and communication with the processor the coherence engine and other components of the computing device via signal line .

The counts statistics engine determines the initial co occurrence counts equally for both noisy and signal pairs of tags in the co occurrence counts graph. For example in the tagset London UK Olympic ceremony bus transportation the counts statistics engine cannot identify whether certain pair of tags is noise e.g. London bus or signal e.g. bus transportation and determines the initial co occurrence counts for both pairs equally. In some embodiments the weighted graph generator receives the counts statistics including the co occurrence counts graph from the counts statistics engine . The weighted graph generator generates a weighted tag co occurrence consistency graph referred to herein as weighted tag co occurrence graph from the co occurrence counts graph to discard co occurrence counts between noisy pairs and to keep the co occurrence counts between signal pairs. In some embodiments the weighted graph generator generates a measure of co occurrence consistency for each pair of tags included in the co occurrence counts graph and creates a weighted tag co occurrence graph. The measure of co occurrence consistency measures how much more likely is it for each pair of tags to co occur in a tagset relative to a random chance. For example the equation for generating co occurrence consistency measure for each pair of tags represented by the symbol can be given by the Normalized Point wise Mutual information NMI 

The joint probability for each pair of tags e.g. P as compared to their random chance e.g. P P determines the strength of the co occurrence consistency for each pair of tags. For example consider two frequent tags e.g. Chris Eiffel tower that can co occur frequently just out of random chance compared to two relatively rare tags e.g. global warming greenhouse emissions that co occur out of real association. The joint probability determined for the rare tags global warming greenhouse emissions will be more compared to that of the frequent tags Chris Eiffel tower indicating that the rare tags have co occurred with high consistency.

In some embodiments weighted graph generator performs a denoising operation on the weighted tag co occurrence graph to remove pairs of tags with low measures of co occurrence consistency representing noise in the weighted tag co occurrence graph. The weighted graph generator uses a co occurrence consistency threshold to determine whether a certain pair of tags e.g. London bus is noise and whether a certain other pair of tags e.g. bus transportation is signal in the weighted tag co occurrence graph. In some embodiments the weighted graph generator iteratively performs denoising operation on the weighted tag co occurrence graph. The weighted graph generator starts with the first pair of tags in the weighted tag co occurrence graph. In each iteration of the denoising operation the weighted graph generator determines whether the co occurrence consistency measured for each pair of tags in the weighted tag co occurrence graph is greater than the co occurrence consistency threshold . If the co occurrence consistency measured for a pair of tags is greater than the weighted graph generator computes new marginal counts and total counts determines a new measure of co occurrence consistency for the pairs of tags based on the new marginal and total counts and updates the weighted tag co occurrence graph with the new measure of co occurrence consistency for the pairs of tags. If the co occurrence consistency measured for the pair of tags is lower than then the weighted graph generator removes an edge from the pair of tags from the weighted tag co occurrence graph as noise. The weighted graph generator ends the iteration for the denoising operation only when all the pairs of tags i.e. edges in the weighted tag co occurrence graph are determined to be above the .

In some embodiments the effect of denoising operation results in increased co occurrence consistency measured for a tag with other related tags present in a tagset. For example in the tagset bride reception marriage cake love jason chris responsive to the denoising operation performed at each iteration the co occurrence consistency of related tags such as bride reception marriage love reception marriage etc. increases while it decreases to zero for unrelated tags such as marriage chris or reception jason in the weighted tag co occurrence graph.

In some embodiments the weighted graph generator measures a quality of the resulting weighted tag co occurrence graph in each iteration of the denoising operation. For example the equation for measuring the quality of the weighted tag co occurrence graph represented by Q in each iteration can be 

In some embodiments the weighted graph generator sends data including the weighted tag co occurrence graph to the coherence engine . In some embodiments the weighted graph generator stores the weighted tag co occurrence graph in the storage .

The coherence engine can be software including routines for determining a coherence score of tagsets in the tagset data. In some embodiments the coherence engine can be a set of instructions executable by the processor to provide the functionality described below for determining a coherence score. In some embodiments the coherence engine can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the coherence engine may be adapted for cooperation and communication with the processor the community detector and other components of the computing device via signal line .

In some embodiments the coherence engine retrieves the tagset data and the tag co occurrence graph including the co occurrence consistency between all pairs of tags from the storage to determine the importance scores of all tags in a tagset. In some embodiments the coherence engine receives the tagset data from the tagset data aggregator and the tag co occurrence graph from the weighted graph generator to determine the importance scores for all tags in a tagset. The coherence engine determines the importance score to identify which of the tags are more central to the theme of community than others in the tagset. For example consider two tagsets Tagset A rain storm cloudy umbrella chocolate and Tagset B candy cocoa chocolate coffee. Both tagsets contain the tag chocolate but it really belongs in Tagset B i.e. it is highly connected to other tags in Tagset B and not in Tagset A. In other words the relative importance of this tag chocolate is different in the two tagsets. Thus the tag chocolate may be considered peripheral or noisy to the overall tagset A or may be considered quite central to the tagset B.

In some embodiments the coherence engine initializes the importance scores e.g. is the importance score of tag xin iteration t for all tags in a tagset e.g. x x x . . . x is the set of m tags to be equal e.g. 1 i 1 . . . m . The coherence engine then updates the importance scores iteratively until convergence. For example the equation for convergence of importance score represented by in each iteration can be 

The importance vector converges to the first unnormalized Eigenvector of the m m matrix x x x . That is if x is the first Eigenvalue and v x is the first normalized Eigenvector of this matrix then 

The importance scores quantify which tag in a tagset is most central to the theme of community and is well connected to other tags. For example consider the example tagset wimbeldon 1.02 lawn 0.98 tennis 0.95 net 0.88 court 0.83 watching 0.83 players 0.81 including importance scores for each tag. The tag wimbeldon is the most important tag in this tagset and the contextual association of the tag wimbeldon with tags such as lawn tennis is higher than with other tags such a watching players . The peripheral tags such as watching players have the least importance score. In some embodiments the coherence engine ranks the tags within the tagset based on the importance score. Although the example uses the highest importance score as indicative of the most importance persons of ordinary skill in the art will recognize that difference scales of scores are possible. For example in one embodiment the least importance score is indicative of the most importance.

In an embodiment coherence engine determines a coherence score for the plurality of tagsets in the tagset data. The coherence score associated with a tagset is a measure of community ness that is used by the community detector described below in detecting communities. The coherence engine determines the coherence score for a tagset based on the importance scores of the tags in the tagset. The coherence score of a tagset is high when the consistency of a tag is high with all other tags in the tagset and this is also true for all other tags in the tagset. If a tag in the tagset is not highly consistent with all the other tags in the tagset then the coherence of the tagset goes down. For example the equation for determining a coherence score represented by x for a tagset x x x . . . x can be min where is the importance score of tag x. The coherence engine measures the coherence score of a tagset to be the minimum importance score of all tags in the tagset. The least important tag in the tagset bounds the coherence of the tagset. For example consider the example tagset wimbeldon 1.02 lawn 0.98 tennis 0.95 net 0.88 court 0.83 watching 0.83 players 0.81 including importance scores for each tag. The coherence score determined for this example tagset is 0.81 which is the importance score of the tag players .

In some embodiments the coherence engine defines a notion of community based on coherence scores determined for the plurality of tagsets. Referring now to a graphic representation of a powerset of an example tagset x a b c d is illustrated. Each node of the graphic representation is a subset of the tag vocabulary V and is a potential candidate for representing a community. In some embodiments the coherence engine determines a neighborhood of a tagset for defining a notion of community. For example the neighborhood of a tagset x represented by x can be where x denotes the up neighbors of tagset x in the lattice space of the powerset obtained by adding a tag currently not in tagset x and x denotes the down neighbors in the in the lattice space obtained by removing a tag currently in tagset x. For example the equation for x and x can be where V represents the vocabulary of all tags and represents the tag that is added to or removed from the tagset x. Referring to the graphic representation of the powerset for example the down neighbor i.e. a c d of tagset a c d is the group of tagsets a. c a d c d. The coherence engine identifies these tagsets a. c a d c d by removing exactly one tag from tagset a c d. The up neighbor i.e. a c d of tagset a c d is the tagset a b c d. The coherence engine identifies the tagset a b c d by adding exactly one tag to tagset a c d.

In some embodiments the coherence engine compares the coherence score of a tagset with the coherence scores determined for its neighbors and identifies the tagset as a community if the tagset is a local maxima of coherence . For example the coherence engine determines a tagset x as a local maxima of coherence if where x represents the neighborhood of tagset x .

For example in the graphic representation of the powerset the coherence of tagset a c d is greater than the coherence of all its neighbors. The coherence engine compares the coherence scores of each tagset with all its neighbors and identifies the tagset a c d as a local maxima of coherence and therefore as a community.

In some embodiments the coherence engine sends data including the importance scores of tags in the tagset data and coherence scores of all tagsets from the tagset data to the community detector . In some embodiments the coherence engine stores the data including the importance scores and coherence scores in the storage .

The community detector can be software including routines for detecting communities in the weighted tag co occurrence graph. In some embodiments the community detector can be a set of instructions executable by the processor to provide the functionality described below for detecting communities. In some embodiments the community detector can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the community detector may be adapted for cooperation and communication with the processor the tag recommendation engine and other components of the computing device via signal line .

In some embodiments the community detector receives data including importance scores coherence scores etc. from the coherence engine and the data including the weighted tag co occurrence graph from the weighted graph generator . In some embodiments the community detector retrieves the data including importance scores coherence scores weighted tag co occurrence graph etc. from the storage . In some embodiments the community detector applies a greedy algorithm to detect all communities local maxima of coherence in the weighted tag co occurrence graph.

In some embodiments the community detector determines each pair of tags from the vocabulary of all tags as a starting seed represented as x x . . . x to detect as many communities in the weighted tag co occurrence graph. The community detector determines whether each pair of tags used as a starting seed is above the co occurrence consistency threshold and identifies the starting seed as a current tagset represented by x . In some embodiments the greedy algorithm includes a grow phase and a grow shrink phase. In the grow phase the community detector iteratively adds the best tag to the current tagset x that results in a maximally coherent community represented by x . The community detector instructs the coherence engine to determine the coherence score whenever a next best tag is added to the current tagset x. The community detector ends the grow phase when the coherence score of the current tagset is determined to be less with the next best tag added in the last iteration. The community detector generates the largest possible candidate seed i.e. current tagset x from the original starting seed x using the grow phase.

In some embodiments the community detector begins the grow shrink phase responsive to generating the largest possible candidate seed. In a first step of the grow shrink phase the community detector adds a first tag to the current tagset x that results in a maximally coherent community x referred as grow neighbor and removes a second tag from the current tagset that results in a maximally coherent community x referred as shrink neighbor . For example the equation for maximally coherent communities x and x can be 

In some embodiments the community detector generates a candidate set referred by C x for the current tagset. The candidate set reduces the computational complexity in the grow step of the grow shrink phase which results in the maximally coherent community x grow neighbor . The computational complexity in the grow step includes exhaustively computing the coherence x since there are x V X possible choices. The generated candidate set includes the set of tags referred by such that the set of tags are connected with all the tags in tagset x with a co occurrence consistency measured higher than . For example the equation for generating a candidate set C x can be where min .

In the grow step of the grow shrink phase the community detector identifies the top candidate with the highest value x from the candidate set C x instead of performing an exhaustive search. For example the first tag added to the current tagset above which results in the grow neighbor x can be a top candidate from the candidate set C x . The value x is high if a tag s co occurrence consistency with all elements of tagset x is high. In some embodiments the community detector updates the candidate set C x when the tagset grows as a result of adding one more element . The candidate set is updated as shown min 

In the shrink step of the grow shrink phase the community detector determines the tag with a least important score of all the tags in the current tagset x and removes the least important tag. For example the second tag removed from the current tagset x above which results in the shrink neighbor xis the least important tag.

In some embodiments the community detector instructs the coherence engine to determine the coherence scores of the grow neighbor x and the shrink neighbor x. The community detector compares the coherence of the grow neighbor x with that of the shrink neighbor xas a second step in the grow shrink phase. If the coherence score of the grow neighbor x is greater than that of the shrink neighbor x the community detector determines that the grow step of the grow shrink phase is ideal to continue identifies the grow neighbor x as the next tagset x adds a next tag top candidate from the candidate set C x to the next tagset xand instructs the coherence engine to determine the coherence score of this next tagset x. If the coherence score of the shrink neighbor xis greater than that of the grow neighbor x the community detector determines that the shrink step of the grow shrink phase is ideal to continue identifies the shrink neighbor xas the next tagset x removes a next tag that is least important from the next tagset xand instructs the coherence engine to determine the coherence score of this next tagset x.

In some embodiments the community detector compares the coherence of the next tagset xwith the coherence of the current tagset x as a last step in the grow shrink phase. If the coherence score of the current tagset x is greater than the coherence score of the next tagset x then the community detector determines that the current tagset x to be a local maxima x with a coherence x satisfying the equation max Grow Shrink 

The grow shrink phase converges when neither the grow neighbor x nor the shrink neighbor xresult in a tagset whose coherence is higher than that of the current tagset x. The community detector determines the local maxima x as a community.

If the coherence score of the next tagset xis greater than the coherence of the current tagset x then the community detector determines that a local maxima has not been reached yet identifies the next tagset xas the current tagset x and repeats the community detection process from the first step of the grow shrink phase. The community detector alternates between the grow and shrink phase depending on which phase leads to the highest increase in the coherence value.

In some embodiments the community detector detects a plurality of communities that are duplicates of each other generated using multiple starting seeds. For example the tags are a b c and d. If tags a b are seeds the community detector generates a b c as a community. If tags a c are seeds the community detector generates a b c as a community. As a result two different seeds result in generating the same community so the community detector eliminates the duplicate communities de dupes obtained from all the seeds and the final output contains only one copy of the community a b c.

In some embodiments the community detector sends the data including communities detected to the tag recommendation engine . In some embodiments the community detector stores the data including the communities detected in the storage .

The tag recommendation engine can be software including routines for recommending tags in real time for new content using the communities. In some embodiments the tag recommendation engine can be a set of instructions executable by the processor to provide the functionality described below for recommending tags in real time. In some embodiments the tag recommendation engine can be stored in the memory of the computing device and can be accessible and executable by the processor . In some implementations the tag recommendation engine may be adapted for cooperation and communication with the processor the tagset data aggregator the community detector and other components of the computing device via signal line . In some embodiments the tag recommendation engine is a standalone application that communicates with the community detection module .

In some embodiments the tag recommendation engine receives the data including communities from the community detector and the data including importance scores from the coherence engine . In some embodiments the tag recommendation engine retrieves the data including communities and importance scores of tags within the communities from the storage .

In some embodiments the tag recommendation engine receives a set of first input tags describing new content from the tagset data aggregator . For example a user inputs a tagset snowboard frontside railslide describing a snowboarding video on a video sharing online service. In some embodiments the tag recommendation engine determines a community score for each community including at least one input tag from the input tagset. The tag recommendation engine determines the community score by adding the importance score for the at least one input tag found within each community. For example a community y includes tags e.g. snowboard frontside railslide superpipe ramp along with importance scores e.g. 1.5 2.0 1.2 3.0 2.0 1.3 for each tag. The tag recommendation engine determines the community score for the community y to be 4.7 by computing the sum of the importance scores for the input tags snowboard frontside railslide found within the community.

In some embodiments the tag recommendation engine determines a recommendation score for each of the remaining tags found within each community that were absent from the input tagset. The tag recommendation engine determines the recommendation score by multiplying the importance score of each of the remaining tags with the community score identified for each community including each of the remaining tags. For example in the community y the tag recommendation engine determines the recommendation score for each of the remaining tags superpipe ramp to be 14.1 9.4 6.11 by multiplying their importance scores 3.0 2.0 1.3 with the community score 4.7. In some embodiments the tag recommendation engine adds the recommendation scores determined separately for each of the remaining tags that were found to be common within one or more communities. For example a community z includes tags superpipe ramp shredding rotations the tag recommendation engine identifies tags superpipe ramp in community z to be common with community y and adds the two recommendation scores computed separately for the tags superpipe ramp in the two communities y and z .

In some embodiments the tag recommendation engine sorts the recommendation scores determined for each of the remaining tags in a descending order. In some embodiments the tag recommendation engine recommends one or more tags with the highest recommendation scores as additional tags for the new content. In some embodiments the tag recommendation engine sends the recommended tags to the user interface module and instructs the user interface module to display the recommended tags in real time adjacent to the first input tags entered by the user. For example the tag recommendation engine determines the tags superpipe as having high recommendation scores. The tag recommendation engine then recommends the tags as additional entries to the input tagset snowboard frontside railslide for the snowboarding video in real time.

The user interface module can be software including routines for generating graphical data for providing user interfaces to users. In some embodiments the user interface module can be a set of instructions executable by the processor to provide the functionality described below for generating graphical data for providing user interfaces that includes information from the web server . In some embodiments the user interface module can be stored in the memory of the computing device and is accessible and executable by the processor . In some implementations the user interface module can be adapted for cooperation and communication with the processor and other components of the community detection module via signal line .

In some embodiments the user interface module receives instructions from the tag recommendation engine to generate graphical data that depicts tag recommendations in real time. In some embodiments the user interface module receives instructions from the tagset data aggregator to generate a user interface for adding or deleting a tag. In some other embodiments the user interface module generates graphical data for requested content based at least in part on instructions from the online service engine . For example the user interface module generates graphical data for displaying the community of images publication text videos etc. The user interface module sends the graphical data to an application e.g. a browser in the user device via the communication unit causing the application to display the data in a user interface.

Referring now to a flowchart of an example method for recommending tags using the communities is described. The community detection module includes a tagset data aggregator a counts statistics engine a weighted graph generator a community detector and a tag recommendation engine . The tagset data aggregator identifies a context defining a tagset. In some embodiments the context includes a resource tagset where tags are associated with a single resource. For example the tags could be tags applied to images in a photo sharing online service. The tagset data aggregator determines a plurality of tagsets each including one or more tags and a vocabulary of all unique tags. The counts statistics engine generates count statistics from the plurality of tagsets and the vocabulary of all unique tags. The count statistics generated include co occurrence counts marginal counts total counts co occurrence probability and marginal probability. The weighted graph generator generates a weighted tag co occurrence graph for each pair of tags in the vocabulary of all unique tags based on the count statistics and denoises the weighted tag co occurrence graph. The weighted graph generator uses a co occurrence consistency threshold to determine whether a certain pair of tags is noise and whether a certain other pair of tags is signal in the weighted tag co occurrence graph. The community detector identifies a plurality of communities in the weighted tag co occurrence graph. The communities are each a local maxima of coherence. The tag recommendation engine recommends tags in real time based on the plurality of communities identified. For example a user inputs a tagset snowboard frontside railslide describing a snowboarding video the tag recommendation engine recommends tags superpipe in real time as additional tag entries.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the specification. It will be apparent however to one skilled in the art that the specification can be practiced without these specific details. In other embodiments structures and devices are shown in block diagram form in order to avoid obscuring the description. For example the present implementation is described in some implementations above primarily with reference to user interfaces and particular hardware. However the present implementation applies to any type of computing device that can receive data and commands and any peripheral devices providing services.

Some portions of the detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired item. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms for example processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present implementation of the specification also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium for example but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The specification can take the form of an entirely hardware implementation an entirely software implementation or an implementation including both hardware and software elements. In a preferred implementation the specification is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the description can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can include store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for one or more storing and executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the specification is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the specification as described herein.

The foregoing description of the implementations of the specification has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the specification to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the disclosure be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the specification may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the specification or its features may have one or more different names divisions and formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules routines features attributes methodologies and other aspects of the disclosure can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the specification is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally the disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure is intended to be illustrative but not limiting of the scope of the specification which is set forth in the following claims.

