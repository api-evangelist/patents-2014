---

title: Documentation generation for web APIs based on byte code analysis
abstract: Documentation for application or web service, such as a web application programming interface (API), is generated by analyzing bytecode for the application itself. Metadata contained within the bytecode and that specifies the functionality of the web service is extracted and used as a template and basis for documentation. A second source of documentation, which contains detailed documentation of the web service, is contributed by the web service developer and merged with the metadata extracted from the bytecode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483260&OS=09483260&RS=09483260
owner: Pivotal Software, Inc.
number: 09483260
owner_city: Palo Alto
owner_country: US
publication_date: 20140502
---
Web services have become an increasingly popular method for providing users developers and system administrators with information technology services. In the context of web development a web service typically uses a pre defined set of Hypertext Transfer Protocol HTTP request messages and a pre defined set of response messages having a pre determined structure. A popular architecture known as Representational State Transfer REST constrains the pre defined set of request messages to a set of well known standard operations in the case of HTTP GET POST PUT DELETE .

Web developers that wish to use the web service must program their applications to send requests that exactly comply with the pre defined messages and to process responses in the pre determined structure usually expressed in an Extensible Markup Language XML or JavaScript Object Notation JSON format. The provider of the web service typically creates API documentation that describes how request messages must be transmitted and what response messages can be expected. However as web services and other APIs are developed it may be difficult for the developer of the web service to create documentation that is accurate and up to date with the latest version of the web service. Conventional approaches have placed documentation of a web application within the source code as in line programming comments. However this approach becomes unwieldy as the amount of documentation begins to outgrow the amount of programming code in a particular file. Further programming comments within source code are generally not available to the public or may be written in a form not suitable for public disclosure.

One or more embodiments of the present invention provide techniques for generating documentation of a web service. In accordance with these techniques bytecode for an application is submitted for analysis. Metadata contained within the bytecode and that specifies the functionality of the web service is extracted and used as a template and basis for documentation. Further a second source of documentation is contributed by the web service developer and merged with the metadata extracted from the bytecode.

Embodiments of the present invention describe a method for generating documentation for an application configured to receive and process requests for a resource over a network. The method includes extracting annotations that are stored with machine executable instructions of the application. The annotations may include syntactic metadata for a portion of the machine executable instructions that is for processing the request. The method further includes generating documentation based on the extracted annotations wherein the documentation includes information about the resource made available by the application.

Further embodiments of the present invention include a non transitory computer readable storage medium comprising instructions that when executed in a computing device perform an operation to generate documentation for an application configured to receive and process requests for a resource over a network. The operation may include extracting annotations that are stored with machine executable instructions of the application wherein the annotations include syntactic metadata for a portion of the machine executable instructions that is for processing the request. The operation further includes generating documentation based on the extracted annotations wherein the documentation includes information about the resource made available by the application.

Another embodiment of the present invention includes a computer system for generating documentation for an application configured to receive and process requests for a resource over a network. The computer system comprises a system memory and a processor. The processor is programmed to carry out the steps of extracting annotations that are stored with machine executable instructions of the application wherein the annotations include syntactic metadata for a portion of the machine executable instructions that is for processing the request. The processor is further programmed to carry out the step of generating documentation based on the extracted annotations wherein the documentation includes information about the resource made available by the application.

In one embodiment computer system includes a developer system a server system and a client system communicatively connected via a network . Network may be a local area network LAN connection a wide area network WAN or other suitable communications network. In one embodiment developer system is configured to facilitate software development of a web service application that provides a web services to client applications e.g. client application and generate documentation for web service based on bytecode for web service . Using information provided by documentation a client application executing on client system may be configured to communicate with web service executing on server system .

In one embodiment developer system includes a compiler configured to generate bytecode based on source code of an application e.g. web service . By way of example compiler may compile source code written in Java programming language into Java bytecode and deploy the generated bytecode in a runtime environment configured to parse and execute the bytecode such as a Java Virtual Machine JVM .

Developer system is further configured to generating documentation for web service based on bytecode for web service . In one embodiment the developer system includes a documentation generator having bytecode analyzer and note analyzer modules. Bytecode analyzer is configured to parse bytecode for an application and retrieve metadata pertaining to web service . Bytecode analyzer is further configured to generate an index for documentation describing web service based on the metadata retrieved. Note analyzer is configured to retrieve code notes from a storage source e.g. storage and merge code notes with the documentation index e.g. generated by bytecode analyzer to create documentation describing web service .

In one embodiment documentation generator may be a plug in component to a traditional IDE i.e. integrated development environment that assists a developer who creates web applications e.g. web service using the IDE to generate documentation for web service according to techniques described herein. In some embodiments once the developer has finished generating documentation for the web application e.g. web service using the IDE the plug in component may assist the developer in deploying web service e.g. to server system . The operations of developer system are described further in conjunction with . Developer system may be any computer system having conventional components such as a processor memory storage and network interface. Alternatively developer system may be a virtual machine VM sharing the hardware resources e.g. processor memory storage and or networking resources of a host computer not shown . Developer system includes storage system configured to store code notes . Storage system may be any conventional storage system accessible over network such as shared storage network shares databases or network based file systems.

Server system supports execution of bytecode for a web service application and deployed from developer system . In one embodiment server system provides a runtime environment configured to execute bytecode for one or more applications e.g. web service that provide for example web services database services and other information technology services that may involve retrieval processing and serving of data to one or more users. In the embodiments illustrated herein runtime environment is a Java Virtual Machine JVM although it should be recognized that other runtime environments and or applications having a bytecode interpreter may be used without departing from the scope of the teachings herein. The embodiments presented should therefore not be interpreted to be exclusive or limiting but rather exemplary or illustrative. Server system may be any general purpose computer device that includes conventional components such as a processor memory storage and network interface. Alternatively server system may be a virtual machine VM sharing the hardware resources e.g. processor memory storage and or networking resources of a host computer not shown .

In one embodiment web service includes a web service interface that supports machine to machine interactions over network . Web service is configured to receive requests from client application e.g. client application at pre determined end points and generate responses to return data and information to the requesting client application. In the embodiments illustrated herein web service includes a Representational State Transfer REST application programming interface API that receives and processes HTTP requests and returns a corresponding response. The received requests may identify a particular resource by a Uniform Resource Locator URL and at least one of a plurality of known operations e.g. GET POST PUT DELETE to be performed on that resource. For example web service may process a REST API request specifying a HTTP GET operation at a URL containing book and generate a response having information for a book corresponding to the identifier . It should be recognized that while embodiments describe web service as having a REST API other web services architectures such as Simple Object Access Protocol SOAP may be used without departing from the scope of the teachings herein.

Client system supports execution of one or more client applications that are configured to communicate with web service to retrieve information and or modify a state of web service . To ensure proper interoperability between client application and web service a user such as a third party developer has to carefully configure e.g. at runtime or during development client application to transmit requests to web service having a pre determined format and particular parameters expected by web service . Further the user has to configure client application to correctly process data returned in a response from web service and arranged in pre determined format. For example the user may configure client application to generate a HTTP request to the URL http www.example.com get books all with a request method of GET and further configure client application to expect a response formatted as an XML document. In one embodiment the user configures client application using information provided by documentation . Examples of information provided by documentation include URLs e.g. http www.example.com get books all parameters e.g. bookid parameter types e.g. integer string array and other information suitable to instruct the user on how to properly configure client application to utilize web service .

In one embodiment client application may be developed by third party developer using an integrated development environment IDE installed on the developer s laptop or terminal e.g. client system . The developer s IDE may include an installed plug in e.g. provided by service provider that displays documentation during development to facilitate development of a client application that uses web service . For example while third party developer is writing programming code that transmits a request to web service an installed plug in may conveniently render documentation alongside the programming code. Client system may be any general purpose computer device that includes conventional components such as a processor memory storage and network interface. Alternatively client system may be a virtual machine VM sharing the hardware resources e.g. processor memory storage and or networking resources of a host computer not shown .

At compiler processes source code for a web service application to generate one or more files of bytecode . In one embodiment the service provider may develop web service application using one or more application frameworks that support development of web based applications such as web services. The application frameworks provide libraries and tools that facilitate software development of common activities performed by web services such as database access templates and session management. In some embodiments the application frameworks may follow a request based architectural pattern sometimes referred to as action based or push based architecture that processes requests to perform some action and returns any resultant data from the performed action. Examples of request based application frameworks include Jakarta Struts Django Ruby on Rails Symfony Yii and Spring MVC. To utilize such a request based application framework a software developer provides custom application code for handling requests and returning a response. The custom application code may be portions of source code that include classes and or methods that access modify and retrieve application data generate text graphic and audio output and or perform other programming tasks.

In one embodiment source code of web service specifies a mapping between requests and portions of source code referred to as a request mapping that indicates which application code is to be executed to process a particular request. As such in operation when web service receives a particular request the application framework is able to determine which application code to execute to process the received request. Source code specifies one or more resources identified by a particular location e.g. URL that map to a portion of application code configured to process a request received at the particular location. In some embodiments source code specifies a string pattern e.g. URL pattern that may be used to match one or more locations of resources. In some embodiments source code of web service specifies request parameters for web service such as a particular HTTP method e.g. GET POST and PUT types of input accepted in a request and types of output to be expected in a response.

In one embodiment source code includes one or more annotations to apply behavior of a request based application framework to portions of source code . Annotations generally refer to a form of syntactic metadata that may be added to source code to modify behavior of compiler during compilation of source code . By way of example a software developer may add a Deprecated annotation to a method to cause compiler to issue an error or warning if that annotated method is ever used. While programming comments e.g. comment within source code are ignored and discarded by compilers and interpreters the annotations described herein mark portions of source code and are retained after compilation within bytecode . The use of annotations to apply an application framework and specify a request mapping can be illustrated with reference to Table 1 below.

The Java programming code listing in Table 1 illustrates an annotation Controller at line 03 which specifies the class UserController to be used as a controller by the application framework. The annotation RequestMapping at line 04 specifies that the UserController class is mapped to any request for the resource userRegistration.htm such as for example if a user operates a web browser to navigate to the URL www.example.com userRegistration.htm the application framework proceeds to execute application code for UserController. As shown in Table 1 annotations may specify request mapping for individual methods in the UserController class of the application code. For example the annotation RequestMapping method RequestMethod.GET at line 15 further specifies that any requests handled by UserController and having an HTTP operation of GET should be handled by the method showUserForm . Similarly the annotation RequestMapping method RequestMethod.POST at line 22 specifies that any requests handled by UserController and having an HTTP operation of POST should be handled by the method onSubmit . While embodiments illustrated herein discuss Java annotations used for a Spring application framework it should be recognized that other programming languages and other application frameworks may be utilized in accordance with techniques described herein.

Referring back to when compiler processes source code to generate bytecode compiler translates source code which is generally human readable into a plurality of compact numeric codes constants and references that may be directly interpreted by runtime environment . In one embodiment the annotations included in source code which specify the request mapping of web service are preserved in bytecode .

At bytecode analyzer analyzes bytecode to identify portions of bytecode related to web service . In one embodiment bytecode analyzer processes bytecode to generate a searchable data structure having all executable instructions information and metadata contained in bytecode . Bytecode analyzer may traverse bytecode and search for annotations specifying details of the web service.

Bytecode analyzer searches bytecode for annotations recognized by a request based application framework for specifying a request mapping between resource locations and one or more portions of bytecode . In one embodiment bytecode analyzer searches bytecode for user defined classes that have annotated that indicate the user defined class is configured to handle requests. In the example of the code listing provided above bytecode analyzer searches for an annotation labeled Controller that makes an application class e.g. UserController configured to handle requests for web service . In some embodiments once bytecode analyzer identifies a controller class bytecode analyzer may further search within the controller class e.g. UserController to identify one or more methods of that class that are configured to handle requests for web service . For example bytecode analyzer identifies methods showUserForm and onSubmit has having annotations RequestMapping that define a request mapping.

In one embodiment bytecode analyzer is configured to properly navigate class inheritance and other similar object oriented hierarchies defined by bytecode while searching for annotations that specify a request mapping. Bytecode analyzer may search child classes and parent classes that may inherit annotations defined for a particular class. For example if a particular class e.g. UserController has been annotated as a controller class bytecode analyzer may further search for any child class that inherits from UserController and that may override a method already having a request mapping. Further although bytecode analyzer may not find an annotation for a particular class bytecode analyzer is configured to navigate up the hierarchy to examine all of its parent classes. Similarly bytecode analyzer may identify a request mapping for a particular method and then proceed to check the method s enclosing class for a request mapping as shown in the example of Table 1 e.g. the RequestMapping annotation found for both the UserController class and its individual methods showUserForm and onSubmit .

At bytecode analyzer retrieves metadata from the identified portions of bytecode . In one embodiment bytecode analyzer retrieves metadata information and attributes contained in the annotations that are related to web service . For example when retrieving metadata for the identified method showUserForm bytecode analyzer retrieves not only the RequestMapping annotation but also the attribute method and corresponding value RequestMethod.GET contained therein. It should be recognized that annotations may specify a variety of attributes such as a method or HTTP operation a path that may be used to match URL for a request and data types of input and output handled by web service . In one embodiment bytecode analyzer determines a URL specified by a request mapping and based on an object oriented navigation of bytecode . For example bytecode analyzer may construct a URL path by appending parts of paths specified by each level of classes and methods.

In one embodiment bytecode analyzer may determine input parameters specified by a request mapping. For example the request mapping information retrieved for the onSubmit method may include information indicating a parameter user is specified by an annotation ModelAttribute . In one embodiment bytecode analyzer may determine a data type of input and or output handled by a particular resource of web service based on a HTTP header field e.g. Accept Content Type that specifies certain media types which are acceptable for a request.

At documentation generator generates an index of documentation according to the retrieved metadata. Because documentation generator is deriving documentation based on certain immutable information e.g. HTTP method URL as specified by source code itself documentation generator is able to generate a canonical listing of resources made available by web service using a process that is less prone to human input errors and less susceptible to synchronization issues. The index of documentation comprises a data structure that provides a skeleton document that outlines information retrieved about web service . Documentation generator may create a unique key for each resource e.g. REST endpoint identified in bytecode . In one embodiment the unique for each entry in the index that describes a REST endpoint may comprise an HTTP method and a URL for that REST end point e.g. GET userRegistration.htm . By way of example an index of documentation resulting from the example code listing may appear in Table 2 below 

At note analyzer receives code notes . Code notes provide application documentation having comprehensive details for web service . In one embodiment each entry in code notes includes a key that may be used to uniquely match with a corresponding entry in the index of documentation e.g. generated in . For example a key for an entry in code notes may comprise an HTTP method and URL path for the API endpoint. The developer of web service may provide a plurality of code notes that describe in detail each resource made available by web service . Code notes may be any text graphics and or audio content that may include brief technical summaries technical details long form explanations of web service examples of code tables charts etc. Specific examples of information that be provided by code notes include a status flag indicating whether an API endpoint is active in development or deprecated a short description or slug a long text description a list of return codes that may be provided in a response with corresponding textual reasons and an example request for the web service endpoint. In some embodiments code notes may be stored as one or more files formatted as Extensible Markup Language XML JavaScript Object Notation JSON or other suitable structured or semi structured document format. In one embodiment code notes may generated by a content management system text editor or IDE executing on developer system . By providing code notes as separate from source code embodiments of the present disclosure advantageously eliminate the need to place large amounts of long form text within source code which may be unwieldy during development and may introduce inadvertent bugs.

At note analyzer generates a documentation file by merging the index of documentation and the received code notes . In one embodiment note analyzer traverses the documentation index retrieves a code note for each entry in the index based on the key of the index e.g. HTTP method and URL path and merges the canonical information in the documentation index derived from bytecode with the detailed information in code notes . In some embodiments note analyzer may notify a user e.g. by raising an alert that a corresponding code note cannot be found for a particular entry in the index of documentation. Further note analyzer may raise an alert when a code note is found that has no corresponding entry in the index of documentation. Accordingly note analyzer assists service provider in identifying portions of documentation that lack detailed documentation in the case of a missing code note or where functionality of web service has been eliminated in the case of an orphaned code note . In some implementations documentation may be stored as one or more files formatted as Extensible Markup Language XML JavaScript Object Notation JSON or other suitable structured or semi structured document format. An example of documentation is shown below in Table 3.

At service provider distributes the generated documentation to third party developers that may wish to use web service . In one particular implementation documentation may be a JSON file that encompasses all information from the index of documentation and code notes . A documentation viewer may be configured to load the JSON file e.g. via JavaScript and dynamically render the contents of documentation as a web page viewable in a conventional web browser. In another implementation documentation may be dynamically loaded into an IDE of third party developer and be rendered inline or alongside programming code of a client application configured to contact web service .

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. For example compiler may be separate from a developer system having documentation generator and bytecode and no source code may be provided to the documentation generator . Further while embodiments are described with application frameworks that follow a model view controller MVC architecture it should be recognized that other forms of application frameworks such as a component based framework and other mechanisms for specifying request mappings may be utilized in accordance with techniques described herein. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities which usually though not necessarily take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the description provided herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD ROM Compact Disc ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

