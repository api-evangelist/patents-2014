---

title: Personal area network apparatus
abstract: A portable endpoint device comprises a first virtual device and a second virtual device integrated in a same single unit and configured such that the first virtual device and the second virtual device are configured to allow communication therewith as virtually different physical devices despite being integrated in the same single unit. In operation, the device is configured to receive a first signal from another endpoint device to indicate the availability of the another endpoint device for attachment; send, to the another endpoint device a second signal utilizing first scheduling-related information, the second signal including a first one of a plurality of identifiers for unique identification in association with the portable endpoint device; receive, from the another endpoint device a third signal that is sent in response to the second signal; and receive, from the another endpoint device data utilizing a second one of the identifiers for identification in association with the portable endpoint device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09445260&OS=09445260&RS=09445260
owner: Azure Networks, LLC
number: 09445260
owner_city: Longview
owner_country: US
publication_date: 20140414
---
This application is a continuation of U.S. patent application Ser. No. 13 754 807 filed on Jan. 30 2013 which is a continuation of U.S. patent application Ser. No. 13 430 650 filed on Mar. 26 2012 now U.S. Pat. No. 8 675 590 which is a continuation of U.S. patent application Ser. No. 12 699 846 filed on Feb. 3 2010 now U.S. Pat. No. 8 149 829 which is a continuation of U.S. patent application Ser. No. 11 728 246 filed on Mar. 23 2007 now U.S. Pat. No. 7 756 129 which is a continuation of U.S. patent application Ser. No. 10 894 406 filed on Jul. 19 2004 now U.S. Pat. No. 7 218 633 which is a continuation of U.S. patent application Ser. No. 09 535 591 filed on Mar. 27 2000 now U.S. Pat. No. 6 804 232 which is related to U.S. patent application Ser. No. 09 536 191 filed on Mar. 27 2000 all of which are incorporated herein by reference in their entirety for all purposes.

Over the last decade the size and power consumption of digital electronic devices has been progressively reduced. For example personal computers have evolved from laptops and notebooks into hand held or belt carriable devices commonly referred to as personal digital assistants PDAs . One area of carriable devices that has remained troublesome however is the coupling of peripheral devices or sensors to the main processing unit of the PDA. Generally such coupling is performed through the use of connecting cables. The connecting cables restrict the handling of a peripheral in such a manner as to lose many of the advantages inherent in the PDA s small size and light weight. For a sensor for example that occasionally comes into contact with the PDA the use of cables is particularly undesirable.

While some conventional systems have proposed linking a keyboard or a mouse to a main processing unit using infrared or radio frequency RF communications such systems have typically been limited to a single peripheral unit with a dedicated channel of low capacity.

Based on the foregoing it is desirable to develop a low power data network that provides highly reliable bidirectional data communication between a host or server processor unit and a varying number of peripheral units and or sensors while avoiding interference from nearby similar systems.

Systems and methods consistent with the present invention address this need by providing a wireless personal area network that permits a host unit to communicate with peripheral units with minimal interference from neighboring systems.

A system consistent with the present invention includes a hub device and at least one unattached peripheral device. The unattached peripheral device transmits an attach request to the hub device with a selected address receives a new address from the hub device to identify the unattached peripheral device and communicates with the hub device using the new address.

In another implementation consistent with the present invention a method for attaching an unattached peripheral device to a network having a hub device connected to multiple peripheral devices includes receiving an attach request from the unattached peripheral device the attach request identifying the unattached peripheral device to the hub device generating a new address to identify the unattached peripheral device in response to the received attach request sending the new address to the unattached peripheral device and sending a confirmation message to the unattached peripheral device using the new address to attach the unattached peripheral device.

In yet another implementation consistent with the present invention a method for attaching an unattached peripheral device to a network having a hub device connected to a set of peripheral devices includes transmitting an attach request with a selected address to the hub device receiving a new address from the hub device to identify the unattached peripheral device and attaching to the network using the new address.

The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings identify the same or similar elements. Also the following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims.

Systems and methods consistent with the present invention provide a wireless personal area network that permits a host device to communicate with a varying number of peripheral devices with minimal interference from neighboring networks. The host device uses tokens to manage all of the communication in the network and automatic attachment and detachment mechanisms to communicate with the peripheral devices.

A Personal Area Network PAN is a local network that interconnects computers with devices e.g. peripherals sensors actuators within their immediate proximity. These devices may be located nearby and may frequently or occasionally come within range and go out of range of the computer. Some devices may be embedded within an infrastructure e.g. a building or vehicle so that they can become part of a PAN as needed.

A PAN in an implementation consistent with the present invention has low power consumption and small size supports wireless communication without line of sight limitations supports communication among networks of multiple devices over 100 devices and tolerates interference from other PAN systems operating within the vicinity. A PAN can also be easily integrated into a broad range of simple and complex devices is low in cost and is capable of being used worldwide.

The Hub orchestrates all communication in the PAN which consists of communication between the Hub and one or more PEA s . The Hub manages the timing of the network allocates available bandwidth among the currently attached PEAs participating in the PAN and supports the attachment detachment and reattachment of PEAs to and from the PAN .

The Hub may be a stationary device or may reside in some sort of wearable computer such as a simple pager like device that may move from peripheral to peripheral. The Hub could however include other devices.

The PEAs may vary dramatically in terms of their complexity. A very simple PEA might include a movement sensor having an accelerometer an 8 bit microcontroller and a PAN interface. An intermediate PEA might include a bar code scanner and its microcontroller. More complex PEAs might include PDAs cellular telephones or even desktop PCs and workstations. The PEAs may include stationary devices located near the Hub and or portable devices that move to and away from the Hub.

The Hub and PEAs communicate using multiplexed communication over a predefined set of streams. Logically a stream is a one way communications link between one PEA and its Hub . Each stream has a predetermined size and direction. The Hub uses stream numbers to identify communication channels for specific functions e.g. data and control .

The Hub uses MAC addresses to identify itself and the PEAs . The Hub uses its own MAC address to broadcast to all PEAs . The Hub might also use MAC addresses to identify virtual PEAs within any one physical PEA . The Hub combines a MAC address and a stream number into a token which it broadcasts to the PEAs to control communication through the network . The PEA responds to the Hub if it identifies its own MAC address or the Hub MAC address in the token and if the stream number in the token is active for the MAC address of the PEA .

Hub host may include anything from a simple microcontroller to a high performance microprocessor. The digital control logic DCL may include a controller that maintains timing and coordinates the operations of the Hub host and the RF transceiver . The DCL is specifically designed to minimize power consumption cost and size of the Hub . Its design centers around a time division multiple access TDMA based network access protocol that exploits the short range nature of the PAN . The Hub host causes the DCL to initialize the network send tokens and messages and receive messages. Responses from the DCL feed incoming messages to the Hub host .

The RF transceiver includes a conventional RF transceiver that transmits and receives information via the antenna . The RF transceiver may alternatively include separate transmitter and receiver devices controlled by the DCL . The antenna includes a conventional antenna for transmitting and receiving information over the network.

While shows the exemplary Hub as consisting of three separate elements these elements may be physically implemented in one or more integrated circuits. For example the Hub host and the DCL the DCL and the RF transceiver or the Hub host the DCL and the RF transceiver may be implemented as a single integrated circuit or separate integrated circuits. Moreover one skilled in the art will recognize that the Hub may include additional elements that aid in the sending receiving and processing of data.

The DCL may include a controller that coordinates the operations of the PEA host and the RF transceiver . The DCL sequences the operations necessary in establishing synchronization with the Hub in data communications in coupling received information from the RF transceiver to the PEA host and in transmitting data from the PEA host back to the Hub through the RF transceiver .

The RF transceiver includes a conventional RF transceiver that transmits and receives information via the antenna . The RF transceiver may alternatively include separate transmitter and receiver devices controlled by the DCL . The antenna includes a conventional antenna for transmitting and receiving information over the network.

While shows the exemplary PEA as consisting of three separate elements these elements may be physically implemented in one or more integrated circuits. For example the PEA host and the DCL the DCL and the RF transceiver or the PEA host the DCL and the RF transceiver may be implemented as a single integrated circuit or separate integrated circuits. Moreover one skilled in the art will recognize that the PEA may include additional elements that aid in the sending receiving and processing of data.

The application may include any application executing on the Hub such as a communication routine. The LLC performs several miscellaneous tasks such as initialization attachment support bandwidth control and token planning. The LLC orchestrates device initialization including the initialization of the other layers in the software architecture upon power up.

The LLC provides attachment support by providing attachment opportunities for unattached PEAs to attach to the Hub so that they can communicate providing MAC address assignment and initializing an NI and the layers below it for communication with a PEA . The LLC provides bandwidth control through token planning. Through the use of tokens the LLC allocates bandwidth to permit one PEA at a time to communicate with the Hub .

The NI acts on its own behalf or for an application layer above it to deliver data to the LLT beneath it. The LLT provides an ordered reliable snippet i.e. a data block delivery service for the NI through the use of encoding e.g. 16 64 bytes of data plus a cyclic redundancy check CRC and snippet retransmission. The LLT accepts snippets in order from the NI and delivers them using encoded status blocks e.g. up to 2 bytes of status information translated through Forward Error Correction FEC into 6 bytes for acknowledgments ACKs .

The LLD is the lowest level of software in the software architecture . The LLD interacts with the DCL hardware . The LLD initializes and updates data transfers via the DCL hardware as it delivers and receives data blocks for the LLT and processes hardware interrupts. The DCL hardware is the hardware driven by the LLD .

The LLT transmits the snippet across the network to the receiving device. To accomplish this the LLT adds header information to indicate for example how many bytes in the snippet are padded bytes and error checking information to the snippet and employs reverse direction status acknowledgment messages and retransmissions. This is illustrated in by the bidirectional arrow between the LLT layers marked with n m . The number n of snippet transmissions and the number m of status transmissions in the reverse direction are mostly a function of the amount of noise in the wireless communication which may be highly variable. The LLT may also encrypt portions or all of the snippet using known encryption technology.

The LLT uses the LLD to provide a basic block and stream oriented communications service isolating the DCL interface from the potentially complex processing required of the LLT . The LLT uses multiple stream numbers to differentiate snippet and status blocks so that the LLD need not know which blocks contain what kind of content. The LLD reads and writes the hardware DCL to trigger the transmission and reception of data blocks. The PEA LLT through the PEA LLD instructs the PEA DCL which MAC address or addresses to respond to and which stream numbers to respond to for each MAC address. The Hub LLT through the Hub LLD instructs the Hub DCL which MAC addresses and stream numbers to combine into tokens and transmit so that the correct PEA will respond. The Hub DCL sends and receives frequently in a corrupted form the data blocks across the RF network via the Hub RF transceiver .

The Hub LLT employs FEC for status checksums and error checking for snippets and performs retransmission control for both to ensure that each snippet is delivered reliably to its client e.g. PEA LLT . The PEA LLT delivers snippets in the same order that they were sent by the Hub NI to the PEA NI . The PEA NI takes the one or more bytes sent in the snippets and delivers them in order to the higher level application thereby completing the transmission.

The LLD provides a multi stream data transfer service for the LLT . While the LLT is concerned with data snippets and status acknowledgements the LLD is concerned with the size of data blocks and the direction of data transfers to and from the Hub .

The stream usage plan includes several streams each having a predefined size and data transfer direction. The plan may of course have more or fewer entries and may accommodate more than the two data block sizes shown in the figure. In the plan streams 0 2 are used to transmit the contents of small data blocks from the PEA to the Hub . Streams 3 7 are used to transmit the contents of larger data blocks from the PEA to the Hub . Streams 8 10 on the other hand are used to transmit the contents of small data blocks from the Hub to the PEA . Streams 11 15 are used to transmit the contents of larger data blocks from the Hub to the PEA .

To avoid collisions some of the streams are reserved for PEAs desiring to attach to the network and the rest are reserved for PEAs already attached to the network. With such an arrangement a PEA knows whether and what type of communication is scheduled by the Hub based on a combination of the MAC address and the stream number .

The use of more than one stream for the same snippet allows a snippet to be sent in more than one form. For example the LLT may send a snippet in its actual form through one stream and in a form with bytes complemented and in reverse order through the other stream. The alternating use of different transformations of a snippet more evenly distributes transmission errors among the bits of the snippet as they are received and hence facilitates the reconstruction of a snippet from multiple corrupted received versions. The receiver always knows which form of the snippet was transmitted based on its stream number.

The LLT partitions the streams into two disjoint subsets one for use with Hub assigned MAC addresses and the other for use with attaching PEAs self selected MAC addresses AMACs . Both the LLT and the LLD know the size and direction of each stream but the LLT is responsible for determining how the streams are used how MAC numbers are assigned and used and assuring that no two PEAs respond to the same token containing a MAC address and stream number transmitted by the Hub . One exception to this includes the Hub s use of its MAC address to broadcast its heartbeat described below to all PEAs .

Each token transmitted by the Hub in a token broadcast includes a MAC address and a stream number for the data buffer transfer that follows. The MAC address and stream number in the token together specify a particular PEA to transmit or receive data or in the case of the Hub s MAC address specify no many or all PEAs to receive data from the Hub depending on the stream number . The stream number in the token indicates the direction of the data transfer Hub to PEA or PEA to Hub the number of bytes to be transferred and the data source for the sender and the appropriate empty data block for the receiver .

The TDMA plan controls the maximum number of bytes that can be sent in a data transfer . Not all of the permitted bytes need to be used in the data transfer however so the Hub may schedule a status block in the initial segment of a TDMA time interval that is large enough to send a snippet. The Hub and PEA treat any left over bytes as no ops to mark time. Any PEA not involved in the data transfer uses all of the data transfer bytes to mark time while waiting for the next token . The PEA may also power down non essential circuitry at this time to reduce power consumption.

With regard to the Hub activity the Hub responds to a token command in the TDMA plan step by determining the location of the next data block to send or receive step . The Hub reads the block s MAC address and stream number step and generates a token from the MAC address and stream number using FEC step . The Hub then waits for the time for sending a token in the TDMA plan i.e. a token broadcast in step and broadcasts the token to the PEAs step . If the stream number in the token is zero i.e. a NO DATA TRANSFER token no PEA will respond and the Hub waits for the next token command in the TDMA plan step .

If the stream number is non zero however the Hub determines the size and direction of the data transmission from the stream number and waits for the time for sending the data in the TDMA plan i.e. a data transfer step . Later when instructed to do so by the TDMA plan i.e. after the PEA identified by the MAC address has had enough time to prepare the Hub transmits the contents of the data buffer step . The Hub then prepares for the next token command in the TDMA plan step .

With regard to the PEA activity the PEA reaches a token command in the TDMA plan step . The PEA then listens for the forward error corrected token having a MAC address and stream number transmitted by the Hub step . The PEA decodes the MAC address from the forward error corrected token step and if it is not the PEA s MAC address sleeps through the next data transfer in the TDMA plan step . Otherwise the PEA also decodes the stream number from the token .

All PEAs listen for the Hub heartbeat that the Hub broadcasts with a token containing the Hub s MAC address and the heartbeat stream . During attachment described in more detail below the PEA may have two additional active MAC addresses the one it selected for attachment and the one the Hub assigned to the PEA . The streams are partitioned between these three classes of MAC addresses so the PEA may occasionally find that the token contains a MAC address that the PEA supports but that the stream number in the token is not one that the PEA supports for this MAC address . In this case the PEA sleeps through the next data transfer in the TDMA plan step .

Since the PEA supports more than one MAC address the PEA uses the MAC address and the stream number to identify a suitable empty data block step . The PEA writes the MAC address and stream number it received in the token from the Hub into the data block step . The PEA then determines the size and direction of the data transmission from the stream number and waits for the transmission of the data buffer contents from the Hub during the next data transfer in the TDMA plan step . The PEA stores the data in the data block step and then prepares for the next token command in the TDMA plan step .

During the Hub to PEA transfer the Hub cycles through four states fill send even parity fill and send odd parity. The fill states indicate when the NI may fill a data snippet. The even and odd send states indicate when the Hub sends even numbered and odd numbered snippets to the PEA . The PEA cycles through two states want even and want odd. The two states indicate the PEA s desire for data with want even indicating that the last snippet successfully received had odd parity. The PEA communicates its current state to the Hub via its status messages i.e. the state changes serve as ACKs . The Hub waits for a state change in the PEA before it transitions to its next fill state.

During the PEA to Hub transfer the Hub cycles through six states wait listen for PEA ready to send even status read even send ACK and listen for status wait listen for PEA ready to send odd status read odd and send ACK and listen for status. According to this transfer the PEA cannot transmit data until the Hub requests data which it will only do if it sees from the PEA s status that the PEA has the next data block ready.

The four listen for status states schedule when the Hub asks to receive a status message from the PEA . The two send ACK and listen for status states occur after successful receipt of a data block by the Hub and in these two states the Hub schedules both the sending of Hub status to the PEA and receipt of the PEA status. The PEA status informs the Hub when the PEA has successfully received the Hub status and has transitioned to the next fill state.

Once the PEA has prepared its next snippet it changes its status to have even or have odd as appropriate. When the Hub detects that the PEA has advanced to the fill state or to have even odd it stops scheduling the sending of Hub status ACK to the PEA . If the Hub detects that the PEA is in the fill state it transitions to the following listen for status state. If the PEA has already prepared a new snippet for transmission by the time the Hub learns that its ACK was understood by the PEA the Hub skips the listen for status state and moves immediately to the next appropriate read even odd state. In this state the Hub receives the snippet from the PEA .

The PEA cycles through four states fill have even fill and have odd i.e. the same four states the Hub cycles through when sending snippets . The fill states indicate when the NI can fill a data snippet. During the fill states the PEA sets its status to have nothing to send. The PEA does not transition its status to have even or have odd until the next snippet is filled and ready to send to the Hub . These two status states indicate the parity of the snippet that the PEA is ready to send to the Hub . When the Hub receives a status of have even or have odd and the last snippet it successfully received had the opposite parity it schedules the receipt of data which it thereafter acknowledges with a change of status that it sends to the PEA .

The Hub communicates with only attached PEAs that have an assigned MAC address . An unattached PEA can attach to the Hub when the Hub gives it an opportunity to do so. Periodically the Hub schedules attachment opportunities for unattached PEAs that wish to attach to the Hub using a small set of attach MAC AMAC addresses and a small set of streams dedicated to this purpose.

After selecting one of the designated AMAC addresses at random to identify itself and preparing to send a small possibly forward error corrected attach interest message and a longer possibly checksummed attach request message using this AMAC and the proper attach stream numbers the PEA waits for the Hub to successfully read the attach interest and then the attach request messages. Reading of a valid attach interest message by the Hub causes the Hub believe that there is a PEA ready to send the longer and hence more likely corrupted attach request.

Once a valid attach interest is received the Hub schedules frequent receipt of the attach request until it determines the contents of the attach request either by receiving the block intact with a valid checksum or by reconstructing the sent attach request from two or more received instances of the sent attach request. The Hub then assigns a MAC address to the PEA sending the address to the PEA using its AMAC address.

The Hub confirms receipt of the MAC address by scheduling the reading of a small possibly forward error corrected attach confirmation from the PEA at its new MAC address . The Hub follows this by sending a small possibly forward error corrected confirmation to the PEA at its MAC address so that the PEA knows it is attached. The PEA returns a final small possibly forward error corrected confirmation acknowledgement to the Hub so that the Hub which is in control of all scheduled activity has full knowledge of the state of the PEA . This MAC address remains assigned to that PEA for the duration of the time that the PEA is attached.

Each attaching PEA selects a new AMAC at random from the indicated range when it hears the heartbeat. Because the Hub may receive a garbled transmission whenever more than one PEA transmits the Hub occasionally indicates a large AMAC range especially after rebooting so that at least one of a number of PEAs may select a unique AMAC and become attached. When no PEAs have attached for some period of time however the Hub may select a small range of AMACs to reduce attachment overhead assuming that PEAs will arrive in its vicinity in at most small groups. The Hub then listens for a valid attach interest from an unattached PEA step . The attach interest is a PEA to Hub message having the AMAC address selected by the unattached PEA .

Upon receiving a valid attach interest the Hub schedules a PEA to Hub attach request token with the PEA s AMAC and reads the PEA s attach request step . Due to the low power wireless environment of the PAN the attach request transmission may take more than one attempt and hence may require scheduling the PEA to Hub attach request token more than once. When the Hub successfully receives the attach request from the PEA it assigns a MAC address to the PEA step . In some cases the Hub chooses the MAC address from the set of AMAC addresses.

The Hub sends the new MAC address in an attach assignment message to the now identified PEA still using the PEA s AMAC address and a stream number reserved for this purpose. The Hub schedules and listens for an attach confirmation response from the PEA using the newly assigned MAC address step .

Upon receiving the confirmation from the PEA the Hub sends its own confirmation acknowledging that the PEA has switched to its new MAC to the PEA and waits for a final acknowledgment from the PEA step . The Hub continues to send the confirmation until it receives the acknowledgment from the PEA or until it times out. In each of the steps above the Hub counts the number of attempts it makes to send or receive and aborts the attachment effort if a predefined maximum number of attempts is exceeded. Upon receiving the final acknowledgment the Hub stops sending its attach confirmation informs its NI that the PEA is attached and begins exchanging both data and keep alive messages described below with the PEA .

When an unattached PEA enters the network its LLC instructs its LLT to initialize attachment. Unlike the Hub the PEA waits to be polled. The PEA instructs its DCL to activate and associate the heartbeat stream with the Hub s MAC address and waits for the heartbeat broadcast from the Hub step . The PEA then selects a random AMAC address from the range indicated in the heartbeat to identify itself to the Hub step . The PEA instructs its DCL to send an attach interest and an attach request data block to the Hub and activate and associate the streams with its AMAC address step . The PEA tells its driver to activate and respond to the selected AMAC address for the attach assignment stream.

The unattached PEA then waits for an attach assignment with an assigned MAC address from the Hub step . Upon receiving the attach assignment the PEA finds its Hub assigned MAC address and tells its driver to use this MAC address to send an attach confirmation to the Hub to acknowledge receipt of its new MAC address step activate all attached PEA streams for its new MAC address and deactivate the streams associated with its AMAC address.

The PEA waits for an attach confirmation from the Hub using the new MAC address step and upon receiving it sends a final acknowledgment to the Hub step . The PEA then tells its NI that it is attached.

The PEA if it hears another heartbeat from the Hub before it completes attachment discards any prior communication and begins its attachment processing over again with a new AMAC.

The Hub periodically informs all attached PEAs that they are attached by sending them keep alive messages. The Hub may send the messages at least as often as it transmits heartbeats. The Hub may send individual small possibly forward error corrected keep alive messages to each attached PEA when few PEAs are attached or may send larger possibly forward error corrected keep alive messages to groups of PEAs .

Whenever the Hub schedules tokens for PEA to Hub communications it sets a counter to zero. The counter resets to zero each time the Hub successfully receives a block either uncorrupted or reconstructed from the PEA and increments for unreadable blocks. If the counter exceeds a predefined threshold the Hub automatically detaches the PEA without any negotiation with the PEA . After this happens the Hub no longer schedules data or status transfers to or from the PEA and no longer sends it any keep alive messages.

If the Hub had not actually detached the PEA then the attempt to reattach causes the Hub to detach the PEA so that the attempt to reattach can succeed. When the PEA is out of range of the Hub it may not hear from the Hub and therefore does not change state or increment its heartbeat counter. The PEA has no way to determine whether the Hub has detached it or how long the Hub might wait before detaching it. When the PEA comes back into range of the Hub and hears the Hub heartbeat and keep alive if sent the PEA then determines whether it is attached and attempts to reattach if necessary.

Systems and methods consistent with the present invention provide a wireless personal area network that permit a host device to communicate with a varying number of peripheral devices with minimal power and minimal interference from neighboring networks by using a customized TDMA protocol. The host device uses tokens to facilitate the transmission of data blocks through the network.

The foregoing description of exemplary embodiments of the present invention provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. The scope of the invention is defined by the claims and their equivalents.

