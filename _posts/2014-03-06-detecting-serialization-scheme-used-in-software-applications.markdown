---

title: Detecting serialization scheme used in software applications
abstract: Technology is disclosed for determining a serialization scheme used in serializing a software object by an application (“the technology”). A source application can serialize the object using multiple serialization schemes. In order for another application to deserialize the object serialized by the source application, the application may have to know the serialization scheme used in serializing the object. The technology can analyze an intermediate code, e.g., bytecode, of the source application to determine the serialization scheme used by the source application. The technology compares a portion of the code of the source application that serializes the objects with multiple serialization scheme templates having code for known serialization schemes and determines the serialization scheme used by the source application based on a matching serialization scheme template. After the serialization scheme is identified, the application can reconstruct the object from the serialized object using the identified serialization scheme.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122491&OS=09122491&RS=09122491
owner: 
number: 09122491
owner_city: 
owner_country: 
publication_date: 20140306
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 804 134 entitled OPERATING SYSTEM AND DEVICE INTEGRATED WITH CLOUD COMPUTING FUNCTIONALITIES filed on Mar. 21 2013 which is incorporated by reference herein in its entirety.

Several of the disclosed embodiments relate to serialization and more particularly to detecting serialization schemes used in software applications.

Serialization is a process of translating data structures or object state into a format that can be stored for example in a file or memory buffer or transmitted across a network connection link and reconstructed later in the same or another computer environment. A software object object has state and behavior. The objects correspond to things found in the real world. So for example a graphics program will have objects such as a circle a square and a menu. An online shopping system will have objects such as a shopping cart a customer and a product. When an object is serialized the state of the object that is the attributes and attribute values of the object is written to a data stream as a serialized object in a particular format. The serialized object can be stored in the persistent storage device or transmitted to another computing device. Some example formats of a serialized object include binary format human readable formats such as XML JavaScript Object Notation JSON etc. Some other properties of the object such as a name of the class to which the object belongs a name of the class of non primitive attributes are also written to the data stream. When the object is serialized into the binary format the class names the attributes the attribute values are written into the serialized object as a stream of bytes in a particular sequence.

The content of the byte stream the sequence in which the data is written into the byte stream depends on a serialization scheme used by the application that generated the serialized object. Different serialization schemes have different properties and purposes. For example some serialization schemes are intended to be faster in serializing data some are intended to be faster in deserializing some are intended to produce smaller size serialized objects etc. Some serialization schemes include a complete class name for every non primitive attribute of the object even though the class name has already appeared once for a previous attribute in the serialized object some use a short code to identify the repeating class names etc.

An application can reconstruct the object by deserializing the serialized object. Deserializing the serialized object includes reading the byte stream from the serialized object and constructing the data of the object corresponding to the attributes and the attribute values represented by the sequence of bytes in the byte stream. The application can deserialize the serialized object if the application knows the serialization scheme used in the serialization which may not a problem for an application that generated the serialized object. However if another application intends to reconstruct the object it may not be possible to reconstruct the object since the other application does not know the serialization scheme used for generating the serialized object.

Technology is disclosed for determining a serialization scheme used for serializing a software object by an application the technology . When a software object hereinafter referred to as object is serialized the state of the object e.g. the attributes of the object and attribute values is written to a data stream as a serialized object. The serialized object can be stored at a storage device or transmitted over a network for use by another device. An application can serialize the objects based on multiple serialization schemes. Different serialization schemes have different properties and purposes. For example some serialization schemes are intended to be faster in serializing data some are intended to be faster in deserializing some are intended to produce smaller size serialized objects etc. Some serialization schemes include a complete class name for every non primitive attribute of the object even though the class name has already appeared once for a previous attribute in the serialized object some use a short code to identify the repeating class names etc.

In order for the applications to deserialize the serialized object the applications may have to know the serialization scheme used in serializing the objects. In some embodiments the technology identifies the serialization scheme used in serializing the objects by comparing a portion of the code of the application that serializes the objects with multiple serialization scheme templates having code of known serialization schemes. The serialization scheme corresponding to the matching serialization scheme template is the serialization scheme used in serializing the objects.

In some embodiments the technology uses an intermediate code of the application for identifying the serialization scheme used by the application. The intermediate code of the application can be generated by translating e.g. compiling the source code of the application. The intermediate code is then either interpreted or further translated to machine code for executing the application. In some embodiments the application is written using Java programming language and the intermediate code is a bytecode which is generated by compiling the source code of the application. The bytecode may often be either directly executed on a virtual machine e.g. java virtual machine . The technology inspects the intermediate code to identify the portion of the code that contains the code for serialization compares the portion of the intermediate code with the code of serialization scheme templates which can also be in intermediate format to identify a matching serialization scheme template and identifies the corresponding serialization scheme. After the serialization scheme is identified the objects may be regenerated by deserializing the serialized objects based on the identified serialization scheme.

In some embodiments the application can be a graphical user interface GUI based application and the objects can be user interface UI elements. An example of a UI based application can include a Java application and an example of UI element can include a textbox a radio element a drop down box or a list. When the UI elements are serialized the attribute values of the UI elements are stored. The application can serialize the UI elements using various serialization schemes. For example the application can use a serialization scheme provided by the default serialization application programming interface API of Java. In another example the application can customize the default serialization API provided by Java to serialize the UI elements in a user defined way e.g. to reduce the size of the serialized objects.

An application may want to deserialize objects serialized by other applications for various purposes e.g. for integrating the other applications with the application by using their objects or for analyzing the objects to generate various information regarding the object the properties or attributes of the object.

A cloud data interface can also be included to receive data from and send data to computing devices . The cloud data interface can include network communication hardware and network connection logic to receive the information from computing devices. The network can be a local area network LAN wide area network WAN or the Internet. The cloud data interface may include a queuing mechanism to organize data update received from or sent to the computing devices and .

In some embodiments any communication between the computing devices is routed through the cloud proxy service . For example data related to computer applications and including serialized objects can be exchanged between the computing devices through cloud proxy service . In another example in an environment where the computing devices can communicate with each other directly using a peer to peer communication technique e.g. Bluetooth the cloud proxy service facilitates the computing devices to communicate directly for exchanging the data. In some embodiments while the computing devices and send receive the data directly the cloud proxy service may also obtain a copy of the data.

Although illustrates two computing devices and a person having ordinary skill in the art will readily understand that the technology disclosed herein can be applied to a single computing device or more than two computing devices connected to the cloud proxy service .

The computing devices include an operating system to manage the hardware resources of the computing devices and provide services for running computer applications e.g. mobile applications running on mobile devices . The operating system facilitates execution of the computer applications on the computing device . The computing devices include at least one local storage device to store the computer applications and user data. The computing device or can be a desktop computer a laptop computer a tablet computer an automobile computer a game console a smartphone a personal digital assistant or other computing devices capable of running computer applications as contemplated by a person having ordinary skill in the art. Some examples of the operating system include Android iOS Windows etc.

The computer applications stored in the computing devices can include applications for general productivity and information retrieval including email calendar contacts stock market and weather information. The computer applications can also include applications in other categories such as mobile games factory automation GPS and location based services banking order tracking ticket purchases or any other categories as contemplated by a person having ordinary skill in the art.

All or some of the network connections of the computing devices are through the cloud proxy service . The network connections can include Transmission Control Protocol TCP connections User Datagram Protocol UDP connections or other types of network connections based on other protocols. When there are multiple computer applications that need network connections to multiple remote servers the computing devices only needs to maintain one network connections with the cloud proxy service . The cloud proxy service will in turn maintain multiple connections with the remote servers on behalf of the computer applications .

In some embodiments the computer applications generate various objects in the memory of the computing devices during the execution of the computer applications . Some of the objects can be serialized by the application that created them and a stored in the local storage devices for later use by the same application or other applications and or b transmitted to other computing devices for use by other computer applications. The applications can serialize the objects using various serialization schemes.

The applications which want to use the data from the serialized objects reconstruct the objects by deserializing the serialized objects. The serialized objects are deserialized based on the serialization scheme used for serializing the objects. If the applications do not know the serialization scheme used for serializing the objects the computing devices determine the serialization scheme used for serializing the objects for example by inspecting the code of the application that serialized the objects. Additional details with respect to determination of serialization schemes are described at least with reference to .

The source code includes a serialization method also referred to as serialization code that can be used to serialize the object . The serialization method can use the serialization API provided by the programming language in which the source code is written. The first application may use the serialization API as is e.g. without any customization to the serialization API to serialize the object . The object will be serialized based on the serialization scheme provided by the programming language of the source code . Alternatively the first application may customize the serialization method to serialize the object based one or more serialization schemes .

In some embodiments a first serialization scheme is intended for generating a serialized object of a relatively smaller size. Consider that the source code is written in Java. For example without customization to serialization API provided by Java the two classes game.experiment.DvDraw.Objects.Car and game.experiment.DVDraw.global.Road would be serialized with their fully specified names written to the stream. Both classes have common part of their package names game.experiment.DvDraw and the size of serialized object may be minimized by not repeating the common part e.g. for every serialized object that belongs to a package in this hierarchy. When both classes are serialized one after another the full name of the first one is written to the stream but not for the second one. A short code e.g. a 2 byte code can be assigned for the common part game.experiment.DvDraw when the first class is serialized and can then be written to the stream followed by the class specific part of the name global.Road . The second class can be encoded in the following way 00 FE global.Road where 00 FE is the 2 byte code for game.experiment.DVDraw. Accordingly the serialization method in the first serialization scheme is customized to include the code for performing for such a serialization.

In some embodiments a second serialization scheme is intended for generating a serialized object intended to be deserialized relatively fast. Accordingly the serialization method in the second serialization scheme is customized to include the code for performing for such a serialization. Also in some embodiments different serialization schemes can employ different encryption techniques to encrypt the data being serialized.

Accordingly when the object is serialized the class names the attributes the attribute values are written into the serialized object as a stream of bytes in a particular sequence. The content of the byte stream the sequence in which the data is written into the byte stream depends on a serialization scheme used by the application that generated the serialized object.

The data from the serialized object e.g. state of the object can be extracted by deserializing the serialized object . However to deserialize the serialized object an application has to know the serialization scheme used in serializing the object . The first application which serialized the object can deserialize the serialized object since the first application contains the serialization scheme used in serializing the objects. However if another application e.g. the second application wants to deserialize the serialized object the second application may not be able to deserialize the serialized object unless the second application determines the serialization scheme used in serializing the object .

In some embodiments the source code of the first application and the second application are written using a high level programming language such as Java JavaScript C .Net. The source code is converted e.g. compiled to generate either the intermediate code or machine executable code for the application to be executed by a processor not illustrated of the system . The machine executable code is typically a low level hardware specific code generated by translating e.g. compiling linking either the source code or the intermediate code. The intermediate code is typically intermediate to the source code and the machine executable code. For example for Java applications the intermediate code can be a bytecode which is generated by compiling the source code. The bytecode may often be either directly executed on a virtual machine e.g. interpreter or it may be further compiled into the machine code for better performance.

Typically applications are installed on the computing devices by installing machine executable code or intermediate code of the applications. The source code of the applications may not be installed on end user devices such as the computing devices for various reasons including preventing an end user from modifying the application by changing the source code of the application. Accordingly the computing device may have to determine the serialization scheme used by the first application using the machine executable code or the intermediate code of the first application . In some embodiments the first application and is installed on the computing device as a bytecode . The bytecode is intermediate code of the first application which is generated by compiling the corresponding source code of the first application .

The system includes a code analyzing module that reads the bytecode of the first application and identifies the portion of the bytecode that contains the code of the serialization method for generating the serialized object . In some embodiments the code analyzing module identifies the serialization code by identifying the portion of the bytecode that contains bytecode operations corresponding to the serialization API of the programming language in which the first application is written.

After the serialization code is identified a serialization scheme lookup module of the system compares the serialization code with serialization scheme templates having bytecode corresponding to various known serialization schemes to identify a matching serialization scheme template . If a match is found the serialization scheme corresponding to the matching serialization scheme template is identified as the serialization scheme used in generating the serialized object and the computing device notifies the second application regarding the serialization scheme. The second application or another component in the computing device may deserialize the serialized object and reconstruct the object .

In some embodiments the serialization scheme lookup module is configured to determine if a specific serialization scheme e.g. a default serialization scheme provided by the programming language of the first application is used in generating the serialized object . In such embodiments the system may include a single serialization scheme template having bytecode corresponding to the specific serialization scheme. The serialization scheme lookup module compares the serialization code with the single serialization scheme template and determines whether the serialization code matches with the single serialization scheme template. If the serialization code matches with the single serialization scheme template the serialized object is determined to be serialized using the specific serialization scheme.

In some embodiments the code analyzing module may also convert the bytecode to a pseudo source code format a format which is part bytecode format and part source code format. For example the method names class names the input parameters to the methods can be in source code format and the other code e.g. code within the methods may be in bytecode format. In some embodiments the pseudo source code can be generated from the bytecode using a disassembler application provided by a programming language of the source code of the first application . For example a pseudo source code can be generated from a bytecode of a Java application using the javap disassembler provided by Java.

In some embodiments comparing the pseudo source code of the serialization code may be faster than comparing the bytecode. If the bytecode is converted to the pseudo source code the serialization scheme lookup module may use the serialization scheme templates that contain the code in the pseudo source code format for the comparison.

Further in some embodiments the criteria for comparing the serialization code with the bytecode of the serialization scheme templates can also be customized. For example the serialization scheme lookup module may be configured to compare the operations of the bytecode and not the operands.

The network component can be capable of switching between states including a high power consumption state and a low power conservation state. The network component can be e.g. a Wi Fi networking adapter a cellular phone networking adapter or a combination thereof. The processor is configured to execute the computer applications and the operating system of the computing device . The memory stores instructions of the operating system which when executed by the processor cause the operating system to perform processes for realizing certain functionalities of the computing device . For instance the process of the operating system can facilitate the computer applications to serialize objects deserialize objects transmit or receive data related to the computer applications from the cloud proxy service in and or other computing devices e.g. computing device .

The local storage device as described above can store the instructions e.g. bytecode of the computer application the operating system the serialized objects e.g. serialized object user data and any other data necessary for the operation of the computing device and execution of the computer applications .

The computing device also includes the code analyzing module that identifies a portion of the code of an application that contains the code for serializing an object and the serialization scheme. For example the code analyzing module identifies the serialization code in the bytecode that generates the serialized object . The serialization scheme lookup module compares the serialization code from the intermediate code of the application with one or more serialization scheme templates having code corresponding to various known serialization schemes to identify a matching serialization scheme template. For example the serialization scheme lookup module compares the serialization code with serialization scheme templates to identify a matching serialization scheme template . If a match is found a serialization scheme identifying module identifies the serialization scheme corresponding to the matching serialization scheme template as the serialization scheme used in generating the serialized object.

A deserialization module deserializes the serialized object based on the identified serialization scheme to reconstruct the object from the serialized object. In some embodiments reconstructing the object can include creating an instance of the object that is a copy of the object that was serialized. The reconstructed object will have the same state as the object that is serialized.

After the object is reconstructed from the serialized object the reconstructed object may be used by various applications for various purposes. For instance a second application of the computer application or an application in another computing device e.g. computing device may use the reconstructed object in the second application for providing integration or interoperability with other applications. For example a document created and stored in a serialized format by a first document processing application can be accessed in a second document processing application if the second document processing application is capable of reconstructing the document from the serialized format. The second document processing application provides integration or interoperability with the first document processing application by allowing the document created by the first document processing application to be accessed using the second document processing application.

In some embodiments the object may be reconstructed to generate various analytical information regarding the object. An object analysis module generates analytical information regarding the object including serialization scheme used size of the serialized object number of attributes in the object number of classes referenced relationship between the number of attributes and the size of the serialized object time taken to deserialize the serialized object relationship between the number of attributes and the time take to deserialize the serialized object etc.

In some embodiments the code analyzing module the serialization scheme lookup module the serialization scheme identifying module the deserialization module and the object analysis module can be part of a serialization scheme detection module . The serialization scheme detection module may be provided by an entity such as the provider of the operating system a provider of the cloud proxy service or a provider of the computing device or . The serialization scheme detection module may be further customized or configured by a user such as the user of the computing device or a provider of the computer applications .

An intermediate format code is typically generated by translating e.g. compiling a corresponding source code which is written in a high level programming language. The intermediate code is typically intermediate to the source code and the machine executable code. For example if the application is a Java application the intermediate code for the application can be a bytecode e.g. bytecode . The bytecode may often be either directly executed on a virtual machine e.g. interpreter or it may be further compiled into the machine code for better performance. Further in some embodiments the set of code can also be in a pseudo source code format a format which is part bytecode format and part source code format.

At block the code analyzing module identifies a portion of the code having code for a serializing an instance of the object into the data stream and b the serialization scheme used in serializing the object collectively referred to as serialization code . In some embodiments the code analyzing module identifies the serialization code by identifying the portion of the code that contains operations corresponding to the serialize API of the programming language in which the application is written.

At decision block the serialization scheme lookup module determines whether the serialization code of the application matches with any of multiple serialization scheme templates. The serialization scheme templates have code corresponding to various known serialization schemes. In some embodiments the serialization scheme templates can be stored in various formats to support comparison with the serialization code of the application in various formats. For example the serialization scheme templates can be stored in a bytecode format and or a pseudo source format to support comparison in either or both formats. The various formats of the serialization scheme templates may be stored at the computing device or at the cloud proxy service contain the code in the same format as that of the portion of the code of the application with which the serialization scheme templates are compared.

In some embodiments the criteria for comparing the serialization code with the code of the serialization scheme templates can be customized. For example the serialization scheme lookup module may be configured to compare the operations of the bytecode but not the operands with the operations in the code of the serialization scheme templates.

If no matching serialization scheme template is found the process returns. However if the serialization scheme lookup module identifies a matching serialization scheme template at block the serialization scheme identifying module identifies a serialization scheme corresponding to the matched serialization scheme template as the serialization scheme used by the application and the process returns.

In some embodiments the process is configured to determine if a specific serialization scheme e.g. a default serialization scheme provided by the programming language in which the application is written is used in generating the serialized object. In such embodiments the process may involve comparing the serialization with a single serialization scheme template having code corresponding to the specific serialization scheme. If the serialization code matches with the single serialization scheme template the serialized object is determined to be serialized using the specific serialization scheme.

The memory and storage devices are computer readable storage media that may store instructions that implement at least portions of the described technology. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communications link. Various communications links may be used such as the Internet a local area network a wide area network or a point to point dial up connection. Thus computer readable media can include computer readable storage media e.g. non transitory media and computer readable transmission media.

The instructions stored in memory can be implemented as software and or firmware to program the processor s to carry out actions described above. In some embodiments such software or firmware may be initially provided to the computing system by downloading it from a remote system through the computing system e.g. via network adapter .

The technology introduced herein can be implemented by for example programmable circuitry e.g. one or more microprocessors programmed with software and or firmware or entirely in special purpose hardwired non programmable circuitry or in a combination of such forms. Special purpose hardwired circuitry may be in the form of for example one or more ASICs PLDs FPGAs etc.

The above description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding of the disclosure. However in certain instances well known details are not described in order to avoid obscuring the description. Further various modifications may be made without deviating from the scope of the embodiments. Accordingly the embodiments are not limited except as by the appended claims.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not for other embodiments.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that the same thing can be said in more than one way. One will recognize that memory is one form of a storage and that the terms may on occasion be used interchangeably.

Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any term discussed herein is illustrative only and is not intended to further limit the scope and meaning of the disclosure or of any exemplified term. Likewise the disclosure is not limited to various embodiments given in this specification.

Those skilled in the art will appreciate that the logic illustrated in each of the flow diagrams discussed above may be altered in various ways. For example the order of the logic may be rearranged substeps may be performed in parallel illustrated logic may be omitted other logic may be included etc.

Without intent to further limit the scope of the disclosure examples of instruments apparatus methods and their related results according to the embodiments of the present disclosure are given below. Note that titles or subtitles may be used in the examples for convenience of a reader which in no way should limit the scope of the disclosure. Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

