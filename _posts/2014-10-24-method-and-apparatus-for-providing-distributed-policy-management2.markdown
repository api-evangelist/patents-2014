---

title: Method and apparatus for providing distributed policy management
abstract: An approach is provided for distributed policy management and enforcement. A policy manager determines one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The policy manager also determines one or more respective access policies local to the one or more domains. The one or more respective access policies configured to enable a determination at least in part of access to the respective subsets, the one or more resources, or a combination thereof. At least one of the one or more respective access policies is configured to operate independently of other ones of the one or more respective schemas.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09654509&OS=09654509&RS=09654509
owner: Nokia Technologies Oy
number: 09654509
owner_city: Espoo
owner_country: FI
publication_date: 20141024
---
This application is a Continuation of U.S. application Ser. No. 12 915 969 filed on Oct. 29 2010 the contents of which is incorporated herein by reference in its entirety.

Service providers e.g. wireless cellular etc. and device manufacturers are continually challenged to deliver value and convenience to consumers by for example providing compelling network services. One area of development has been related to services that provide access to growing stores of information from different distributed sources. As a result information owned and or controlled by various entities e.g. service providers content providers users etc. may often be distributed over various decentralized servers storage components nodes etc. of a distributed information system. Moreover at least some of the information may be subject to one or more access control policies e.g. restrict access to one or more resources of the information system to authorized users . As a result service providers and device manufacturers face significant technical challenges to managing and or enforcing such policies over an information system particularly when the information is highly distributed or contains a high number of resources and corresponding access policies.

Therefore there is a need for an approach for providing distributed policy management and enforcement over an information system.

According to one embodiment a method comprises facilitating a creation and or a modification of at least one device user interface element at least one device user interface functionality or a combination thereof based at least in part on information data and or a signal resulting from a local and or remote determination of one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The information the data and or the signal further results from a local and or remote determination of one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to one embodiment a method comprises determining one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The method also comprises determining one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to another embodiment an apparatus comprising at least one processor and at least one memory including computer program code the at least one memory and the computer program code configured to with the at least one processor cause at least in part the apparatus to determine one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The apparatus is also caused to determine one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to another embodiment a computer readable storage medium carrying one or more sequences of one or more instructions which when executed by one or more processors cause at least in part an apparatus to determine one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The apparatus is also caused to determine one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to another embodiment an apparatus comprises means for determining one or more domains of an information system. The one or more domains are associated at least in part to respective subsets of one or more resources of the information system. The apparatus also comprises means for determining one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to another embodiment a method comprises facilitating access to at least one interface configured to allow access to at least one service the at least one service configured to determine one or more domains of an information system. The one or more domains are associated at least in part with respective subsets of one or more resources of the information system. The at least one service is further caused to determine one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies is configured to operate at least in part independently of other ones of the one or more respective access policies.

According to another embodiment a computer program product including one or more sequences of one or more instructions which when executed by one or more processors cause an apparatus to determine one or more domains of an information system. The one or more domains correspond to respective subsets of one or more resources of the information system. The apparatus is also caused to determine one or more respective access policies local to the one or more domains. The one or more respective access policies are configured to enable a determination at least in part of access to the respective subsets the one or more resources or a combination thereof. At least one of the one or more respective access policies operates at least in part independently of other ones of the one or more respective access policies.

Still other aspects features and advantages of the invention are readily apparent from the following detailed description simply by illustrating a number of particular embodiments and implementations including the best mode contemplated for carrying out the invention. The invention is also capable of other and different embodiments and its several details can be modified in various obvious respects all without departing from the spirit and scope of the invention. Accordingly the drawings and description are to be regarded as illustrative in nature and not as restrictive.

Examples of a method apparatus and computer program for providing distributed policy management are disclosed. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the invention. It is apparent however to one skilled in the art that the embodiments of the invention may be practiced without these specific details or with an equivalent arrangement. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the embodiments of the invention.

In other words traditional systems place the responsibility for policy management in one or more centralized components that enforce policies e.g. access policies over all resources within an information system. In some embodiments traditional systems may fragment and or replicate one or more of the policy management components to increase availability. However such a fragmented or replicated system still generally operates on a logically contiguous or centralized view of policies and the resources to which the policies apply. In addition characteristics of specific data types associated with the various resources of the information system typically are accounted for in a central repository of access control evidence and rules. Maintaining such a repository for modern distributed systems where there are potentially trillions of resources and corresponding data types and access policies can expend considerable resources. With respect to connectivity for instance the policies resource types etc. typically are transmitted from central components to more distant components to ensure consistency of policy management and enforcement throughout the system thereby expending network computing and other resources.

One example of a large distributed information system is a semantic web. As used herein the term semantic web refers to a universal medium for data information and knowledge exchange based on computer comprehensible meaning semantics derived from the data information or knowledge. In one embodiment the semantic web is set of interconnected or otherwise related documents data information knowledge or a combination thereof. By way of example knowledge or information in the semantic web is generally structured and organized at a finer level of granularity than information or knowledge contained within free text documents. Moreover the vocabulary used within semantic webs includes not only literal words but also identifiers pointers or other similar references to information.

Semantic web technologies are typically designed to build on distributed and disparate datasets. Accordingly the underlying relationship model of semantic webs presents challenges to both the definition and enforcement of access control policies e.g. security policies privacy policies etc. . It is noted that one of the core goals of this relationship model is to leverage inferred relationships between information that otherwise has not explicit coupling. Because inferred relationships are ephemeral by nature the access control policies governing them are generally deduced from the policies governing the elements that contribute to the relationship policies that may themselves be implicit. In this environment it becomes difficult to envision the potential scope e.g. the extent to which policies or rules may cascade or apply from centralized components that are logically distant from the resource being accessed of any but the most simplistic access control rules.

To address this problem a system of introduces the capability to provide distributed policy management and enforcement over resources of an information system. More specifically the system supports management and enforcement of access control policies at or near a resource access point by defining localized access control policies based at least in part on local schema at a domain or resource level within the information system . As used herein the local schema refers to rules governing the formats of the information e.g. data types documents files etc. to which the policies apply and in some embodiments the access policies themselves. In one embodiment the boundary of the domains defined with the information system represents a potential authorization scope that is subject to its own local access policies and related schema for enforcing access control policies according to its own mechanisms. In some embodiments domains may be nested so that access control can be applied independently but sequentially. For example an information system may include a larger domain corresponding to a file sharing service. The service may authenticate user access to the service domain by a simple username and password challenge. Once authenticated at this level the user receives authority to operate within the domain. However this authority to operate may not extend to all resources within the service domain. For example if the file sharing service also includes a set of files with additional access restrictions e.g. files that only employees of a particular company can access then the system can apply a local access control schema independent of the schema used for access at the service domain level. In this case the file domain may independently apply a completely separate schema e.g. a schema to authenticate the user as an authorized employee with access to the files before authorizing access into the file domain.

In various embodiments of the approach described herein the access policy or policies applied at the service level need not be aware of or coordinate with the access policy applied at the file level and vice versa. At each domain the system need only inquire whether access should be granted to the domain or layer in question. In one embodiment requests to enter or access the domain or its authorization scope e.g. the resources bounded by the domain are layered so that access denial at the boundary of a domain encompassing subordinate domains prevents any further penetration to the subordinate or nested domains.

In this way the local access policies operate independently of other access policies associated with other domains of the information system . In other words an access policy and or its related schema that are local to a particular domain generally need not have any dependencies e.g. resource type definitions policies rules etc. on any other access policies or schema defined over the network thereby advantageously enabling independent management and enforcement access control policies on a domain by domain basis. In this way the local access control schemas of the system operate autonomously to avoid the resource burden associated with communicating information regarding new or modified resource types and corresponding policies from a centralized component to dependent policy management and enforcement components.

In addition the distributed policy management approach of the system enables greater flexibility in adding or modifying resource types because these changes can be performed locally at the domain without incurring the burden associated with propagating the changes to centralized access control components and or other access control components of the information system . Other advantages of the approach described herein include 1 enabling local administrators e.g. administrators who may have more specific needs or knowledge of local resources to tailor access control policies to specific domains 2 enabling the removal of dependencies resulting from centralized data or resource type definitions e.g. enabling the system to define specific types that may only be applicable to a particular domain or subset of the domains of the information system 3 providing efficient scalability of the information system by enabling the addition of access control components for new resources and or domains without maintaining a central repository.

As shown in in one embodiment the information system consists of one or more domains e.g. domains also collectively referred to as domains that define or otherwise encompass respective subsets of resources e.g. resources also collectively referred to as resources within the information system . By way of example a resource can be any element within the information system upon which an operation e.g. an access operation may be performed. It is contemplated that the resource may be active e.g. a server process or passive e.g. a file . Furthermore in one embodiment it is contemplated that a domain can include any collection of resources e.g. both active and passive elements within the information system . In some embodiments the boundaries of the domains may be determined statically or dynamically to identify what resources are included in the domain .

As an example illustrates domains that encompass different boundaries and or hierarchies of resources within the information system . In one embodiment the information system may represent an aggregation of services such as Nokia s Ovi Services that span a variety of services that fall within a common or shared access control infrastructure e.g. the distributed policy structure described herein . Furthermore it is contemplated that the domains may be nested wherein the boundaries of the respective domains form layers within the information system . For example the domain defines resources e.g. processes files data etc. that constitute for instance an application or service within the information system . As described the information system e.g. which may itself represent a top level domain may include any number of domains e.g. domains and that represent any number of applications services or other subset of resources . In this example the domain represents an application or service that is further divided into subordinate domains and e.g. each representing a node or server of the parent domain . Each respective domain and is further divided into other subordinate domains e.g. domains and of domain and domains and of domain .

For each of the domains at different layers levels or points of the information system there are associated policy managers also collectively referred to as policy managers for enabling the distributed policy management approach described herein. In this way the policy managers enable the definition management and enforcement of local access control schemas for the resources of their respective domains . The distributed policy management infrastructure of the system recognizes that policies applied to broad system in a centralized manner are often abstract as the centralized policies typically focus on common generalizations e.g. regarding resource data types across the various components of a distributed system. As a result the policy manager places the functions of the PAP PDP and PEP in the corresponding local domain where the policy manager need not generalize policies that cover resources not present in the domain .

In one embodiment with respect to a particular domain the local policy manager operates under an explicit grammar e.g. the OASIS eXtensible Access Control Markup Language XACML to express a logical strategy to manage and enforce access control policies according to the local schema. By way of example XACML specifies a declarative grammar for expressing access control rules in eXtensible Markup Language XML and a process model for their evaluation. In another embodiment source or program code can be attached or otherwise associated with specific domains and or resources e.g. as associated metadata . The policy manager can then extract the source code appropriate for an implementing platform server or node. The source code is then for instance translated into machine instructions and linked with appropriate runtime libraries to produce an executable image that can be loaded and executed by the implementing platform server or node to enforce local access control policies. In one embodiment the executable compiled or linked code can be cached at the respective policy manager for later use.

In another embodiment any of the domains and or resources may be associated with one or more schemas one or more attributes one or more rules source code binary code one or more implementation libraries with respect to determining access managing access control policies enforcing access control policies and the like. Generally an attribute can be any characteristic of the information system the domains e.g. applications services nodes servers processes etc. and or resources that can direct the definition management and or enforcement of the local access policies. The rules provide decision criteria guidelines etc. for determining whether to grant deny or otherwise restrict access to a domain or resource when implemented in the executable image.

By way of example generation compilation use etc. of the executable image can be triggered by receiving a request to access a domain and or resource . In one embodiment an access is an action or operation undertaken to make use of a domain or resource . Access includes operations such as read and write on storage objects as well as commands to perform operations on functional objects. The request is typically a message or signal from an entity e.g. an actor such as a user or application whose response is the result of performing some access operation. By way of example possible outcomes to servicing a request includes 1 the access operation is performed and the result returned 2 permission to perform the operation is denied and 3 a failure occurred preventing any of the first or second outcomes. In one embodiment as shown in the access request may originate from a user equipment UE and or an application executing on the UE over for instance a communication network with connectivity to the information system . Although various embodiments are discussed with respect to providing distributed policy management of a network it is also contemplated that requests and responses related to distributed policy management may be conveyed over other communication paths including for example intra or inter process communication within a host asynchronous message queues etc.

Under the various example approaches described herein it is noted that access control in a broad distributed system can be achieved by distributed application of independent local access control policies and related schemas at numerous touch points e.g. at the boundaries of the domains or on requesting access of a resource throughout the system . In one embodiment these layered access controls are applied and monitored at multiple separate enforcement and reporting points e.g. at the policy managers corresponding to or near the point of resource access. The distribution of policy management and enforcement for instance at the boundaries of the domains enables discrete or independent policy elements and schemas to be applied in serial parallel and or redundant patterns to support various availability throughput and defensive goals within the information system .

By way of example the communication network of system includes one or more networks such as a data network a wireless network a telephony network or any combination thereof. It is contemplated that the data network may be any local area network LAN metropolitan area network MAN wide area network WAN a public data network e.g. the Internet short range wireless network or any other suitable packet switched network such as a commercially owned proprietary packet switched network e.g. a proprietary cable or fiber optic network and the like or any combination thereof. In addition the wireless network may be for example a cellular network and may employ various technologies including enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. worldwide interoperability for microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi wireless LAN WLAN Bluetooth Internet Protocol IP data casting satellite mobile ad hoc network MANET and the like or any combination thereof.

The UE is any type of mobile terminal fixed terminal or portable terminal including a mobile handset station unit device multimedia computer multimedia tablet Internet node communicator desktop computer laptop computer notebook computer netbook computer tablet computer personal communication system PCS device personal navigation device personal digital assistants PDAs audio video player digital camera camcorder positioning device television receiver radio broadcast receiver electronic book device game device or any combination thereof including the accessories and peripherals of these devices or any combination thereof. It is also contemplated that the UE can support any type of interface to the user such as wearable circuitry etc. .

As noted previously in one embodiment the domains and or resources e.g. processes information are distributed throughout the information system within a semantic web environment. For example the domains resources and related information may be identified as public which makes it accessible to any other user having connectivity to the information system via the communication network or may have been made private where the owner can decide the level of accessibility by using policies enforced by the distributed policy managers . In some embodiments the policies domains and resources may be associated with attributes such as owner of the information source of the information keys associated with the information e.g. access keys encryption decryption keys etc. and other metadata to facilitate management and enforcement of access control policies.

By way of example in semantic web environments resources and or related information may be represented using a common syntax such as Resource Description Framework RDF . RDF is a family of World Wide Web Consortium W3C specifications originally designed as a metadata data model. It has come to be used as a general method for conceptual description or modeling of information that is implemented in web resources using a variety of syntax formats. The underlying structure of any expression in RDF is a collection of triples each consisting of three disjointed sets of nodes including a subject a predicate and an object. A set of such triples is called an RDF graph.

In an embodiment of the approach described herein the basic structure of an RDF triple e.g. which includes a subject a predicate and an object s p o can be extended by adding additional fields for metadata e.g. data that describes the information related to any applicable policies. By way of example some of these additional fields may describe the information owner e.g. a link to the owner identification information such as a user name device identifier federated identifier token etc. information source e.g. a link to the system of record or the authoritative data source for the information and the set of keys associated with that particular triple of information. The keys for instance correspond to one or more policies associated with the domains and or resources . In one embodiment the system generates a key based at least in part on a hash of the corresponding plain text policy. In some embodiments the keys are encrypted or managed using a public key infrastructure PKI . Other fields representing metadata associated with an RDF triple e.g. attributes rules source code binary code implementation libraries etc. may be present in the extended triple. In other embodiments the policy metadata may be represented using separate first class structures associated with the domains and or resources .

In one embodiment an access control policy may be represented by a data structure that contains data such as a set of rules applied by the policy a set of operations that can be performed on the corresponding domain and or resources and their application is controlled by the policy e.g. read write get find etc. one or more keys for the policy e.g. for policy validation one or more hash for the policy e.g. for decoding encoding the keys the owner of the policy etc. In this embodiment policy definitions are stored and accessed by the distributed policy managers .

In another embodiment each instance of policy may be addressable by application of a mechanism. For example a mechanism can be some URI s in an RDF store or some keys in the domains and or resources . If the policies are stored as RDF structures they can be addressable via unique URIs. In one embodiment the inclusion of the owner field in a policy structure provides an additional verification that can be performed by the policy manager to check whether the policies rules schemas attributes source code binary code implementation libraries or other metadata associated with the domains and or resources are valid e.g. have consistent owners associated with appropriate authentication keys etc. .

By way of example the components of the system communicate with each other and other components of the communication network using well known new or still developing protocols. In this context a protocol includes a set of rules defining how the network nodes within the communication network interact with each other based on information sent over the communication links. The protocols are effective at different layers of operation within each node from generating and receiving physical signals of various types to selecting a link for transferring those signals to the format of information indicated by those signals to identifying which software application executing on a computer system sends or receives the information. The conceptually different layers of protocols for exchanging information over a network are described in the Open Systems Interconnection OSI Reference Model.

Communications between the network nodes are typically effected by exchanging discrete packets of data. Each packet typically comprises 1 header information associated with a particular protocol and 2 payload information that follows the header information and contains information that may be processed independently of that particular protocol. In some protocols the packet includes 3 trailer information following the payload and indicating the end of the payload information. The header includes information such as the source of the packet its destination the length of the payload and other properties used by the protocol. Often the data in the payload for the particular protocol includes a header and payload for a different protocol associated with a different higher layer of the OSI Reference Model. The header for a particular protocol typically indicates a type for the next protocol contained in its payload. The higher layer protocol is said to be encapsulated in the lower layer protocol. The headers included in a packet traversing multiple heterogeneous networks such as the Internet typically include a physical layer header a data link layer header an internetwork layer header and a transport layer header and various application layer layer and layer headers as defined by the OSI Reference Model.

In one embodiment the UE the application and the information system e.g. the domains and resources interact according to a client server model. It is noted that the client server model of computer process interaction is widely known and used. According to the client server model a client process sends a message including a request to a server process and the server process responds by providing a service. The server process may also return a message with a response to the client process. Often the client process and server process execute on different computer devices called hosts and communicate via a network using one or more protocols for network communications. The term server is conventionally used to refer to the process that provides the service or the host computer on which the process operates. Similarly the term client is conventionally used to refer to the process that makes the request or the host computer on which the process operates. As used herein the terms client and server refer to the processes rather than the host computers unless otherwise clear from the context. In addition the process performed by a server can be broken up to run as multiple processes on multiple hosts sometimes called tiers for reasons that include reliability scalability and redundancy among others.

In another embodiment the client server model may apply to interactions between the UE and the application with one or more of the policy managers . By way of example a user may execute the application to view available personal photographs. In one embodiment the user can generate one or more access control polices and attach the policies to the one or more of the personal photographs to limit or restrict access the resource. In some embodiments the application and or UE can generate the access control policies locally. Then on receiving a request for access to the resource e.g. personal photographs the application and or the UE can request that a backend component e.g. the policy manager resident on the network interpret and or evaluate the access requests against the attached access control policy to render an access decision. In one embodiment the UE and or the application can then present the access decision on a user interface of the UE . In this case even though the interpretation and evaluation of the access decision occurs at a remote location the access control policy remains nonetheless local to the resource domain of the device because the access control policy operates over the authorization scope of the local domain .

In this embodiment the network management platform includes at least a control logic which executes at least one algorithm for performing functions of the policy manager . For example the control logic interacts with an administration module to identify determine and or bound at least a subset of the resources of the information system into a domain . In some embodiments the domain may have already been identified by the policy manager or another component of the system or the information system e.g. a service provider content provider . In one embodiment the determination of the domain may be performed prior to or concurrent with determining or establishing the boundaries of a particular domain . It is also contemplated that a resource may be included in more than one domain and that domains may overlap in scope. As noted earlier the domains may be defined statically e.g. by explicitly identifying each resource to include or dynamically e.g. by specifying criteria and then evaluating candidate resources against the criteria for inclusion the domain . The administration module then defines the local access policy for the domain according to a schema specific to the domain by specifying for instance attributes of interest e.g. file types to indicate potentially applicable schemas applicable rules for determining whether to grant access policies incorporating those rules and the like.

In another embodiment the administration module also may identify or generate source code binary code and or other implementation libraries to enable implementation of the policies and rules for controlling access to corresponding resources within the domain . In one embodiment the administration module may interact with a compiler and or linker to identify generate the applicable source code binary code and or implementation libraries. By way of example the compiler can translate the source code for implementing the local access policy into machine readable code e.g. binary code . The linker then combines the binary code generated by the compiler to generate an executable image that can be executed to manage or enforce the local access policies and related schema.

In certain embodiments at least a portion of the local access control policy schema attributes rules source code binary code implementation libraries and or other related information may be associated with the domain and or the resources of the domain as metadata. The metadata for instance may be stored in the domain resource database . In addition or alternatively the metadata may be embedded in or attached to the resources themselves.

In one embodiment the policy manager also includes a presentation module to facilitate a creation and or a modification of at least one device user interface element at least one device user interface functionality or a combination thereof based at least in part on information data and or a signal resulting from any of the processes and or functions of the policy manager . By way of example a device user interface element can be a display window a prompt an icon and or any other discrete part of the user interface presented at for instance the UE . In addition a device user interface functionality refers to any process action task routine etc. that supports or is triggered by one or more of the user interface elements. For example user interface functionality may enable speech to text recognition haptic feedback and the like. Moreover it is contemplated that the presentation module can operate based at least in part on processes steps functions actions etc. taken locally e.g. local with respect to a UE or the domain or remotely e.g. over another component of the communication network or other means of connectivity .

In the example of the policy manager also includes a decision module . In one embodiment the control logic interacts with the decision module to receive and or otherwise act on requests to access one or more resources of the domain . More specifically the decision module determines whether the resources referenced in the request is within the domain associated with the policy manager e.g. determines whether the resources are within the authorization scope of the policy manager . If the resources are within the domain the decision module can retrieve at least a portion of the local access policies schema rules source code binary code implementation libraries and the like associated with the resources and then apply them to render a decision regarding whether access to the requested resources is to be granted under the local access policies. In one embodiment to render the decision the decision module can interact with the compiler and or linker to generate an executable image to process the decision logic and rules according to the local access policies. Moreover in some embodiments the executable image and or any of the information used to generate the executable image e.g. attributes rules policies source code binary code libraries etc. may be cached for subsequent use by the policy manager in responding to similar access requests.

On rendering of a decision by decision module the decision module and or the control logic can interact with the enforcement module so that the access decision can be implemented to explicitly allow deny or otherwise restrict access to the requested resources . In certain embodiments the actions of the enforcement module are Boolean in nature whereby access to a resource is either granted or denied. As with the decision process described above the enforcement module can interact with the compiler and or linker to generate an executable image for enforcing the decisions.

Next the policy manager determines one or more respective access policies local to the one or more domains wherein the one or more respective access policies determine at least in part access to the respective subsets the one or more resources or a combination thereof step . At least one of the one or more respective access policies operates at least in part independently of other ones of the one or more respective access policies.

In one embodiment the policy manager can determine one or more schemas one or more attributes one or more rules source code binary code one or more implementation libraries with respect to determining access to the respective subsets the one or more resources or a combination thereof step . Next the policy manager determines to associate the one or more schemas the one or more attributes the one or more rules the source code the binary code the one or more implementation libraries or a combination thereof with the one or more respective access policies step . In addition the policy manager can also determine one or more types of the one or more resources in the respective subsets wherein the one or more respective access policies are based at least in part on the one or more types. As previously discussed in some embodiments the determined information may be associated with the one or more respective access policies the one or more domains the respective subsets the one or more resources or a combination thereof as metadata.

In one embodiment the schemas attributes rules source code binary code and or implementation libraries can be used to support attachment of the access policies rules and any custom modules for applying them to the domain and or the resources of the domain . More specifically the policy manager can attach elements specifying managed rules which are representations of polices in a format that can be automatically parsed and applied by the policy manager . By way of example the format may be based on XACML which is an XML dialect specified explicitly for defining access control rules. Among other qualities XACML enables access control rules to be constructed from arbitrary operations on arbitrary attributes. It is also contemplated that any other language or format may be used to specify or describe schemas policies and or rules.

In one sample use case a unary operation A processes input C . XACML enables the definition of a policy rule based on the unary operation A and the XACML defined binary string equals operation as shown in Table 1.

Assume also that there is a dynamically loadable library containing implementations of operation A and data extractors that can populate B and C from the type of resource this policy is associated with. By way of example a schema describing the rule statement of Table 1 that can generate implementation code on the fly is presented in Table 2.

In other words the schema for defining implementation code can include replaceable tokens referenced based on attributes of the resources to which the related access policy applies. This in turn makes decisions such as whether and when to distill a state rule into an executable module and how long to cache the generated module more manageable by enabling the storage or association of such rules as attributes or metadata of the resources their domains or the type description of the resources . In fact in one embodiment the domain that contains the resource itself need not have knowledge of the resource s format or which of its attributes are relevant to access decisions. The policy manager of the domain need only have at its disposal appropriate tooling to resolve references e.g. replaceable tokens to dynamically loaded modules and to compile a descriptive language e.g. XACML into source code that can itself be compiled dynamically into a loadable and executable image or module.

In step the policy manager receives a request for access to at least one of the one or more resources of the domain . The policy manager first determines whether the requested resource is within the domain associated with the policy manager and falls under the authorization scope of the policy manager within the information system step . It is noted that under some embodiments of the distributed approach described herein requests entering the authorization scope of the domain have also passed through layers of any other domains whose authorization scopes encompass the domain containing the requested resource . In this way requests that are denied access are rejected at the scope or domain where the denial occurs penetrating no further through nested layers of the domains of the information system .

If the requested resource is within the domain of the policy manager the policy manager then determines whether the at least one resource is associated with at least one of the one or more respective access control policy step . By way of example the policy manager retrieves metadata associated with the requested resources and their corresponding domains to determine whether any access control policies are in place. If there are no local access control policies the policy manager grants access to the requested resources step . In one embodiment granting access includes generating and or providing a notification that the request is successful or otherwise allowed.

Next the policy manager determines to retrieve one or more schemas one or more attributes one or more rules source code binary code one or more implementation libraries or a combination thereof associated with the at least one respective access control policy the at least one requested resource or a combination thereof. In one embodiment the boundaries of the domains and resources enable a nested and layered approach to distributed policy management. In other words the distributed approach described herein can operate at the outer and inner boundaries of the authorization scopes of the domains . For example the outer scope boundary is the point at which control passes into a domain of a collection of resources that are subject to a local access control schema describing a set of access control policies rules and their components enabling evaluation and enforcement of the policies rules. In one embodiment the outer boundary is the logical point at which access control policies are applied meaning that the requested resource is not accessed unless and until the authorization is provided.

In one embodiment the decision of whether to grant deny or otherwise restrict the requested access is further based at least in part on the one or more schemas the one or more attributes the one or more rules the source code the binary code the one or more implementation libraries or a combination thereof. In some embodiments the information about the target resource can be used to make the access decisions. This is where the inner scope boundary comes into play. It is noted that domains do not have inner boundaries per se instead the scope of the domain is effectively bounded by the surface of the resources and or nested domains that it contains. In one embodiment it is at this surface or inner boundary that resource attributes metadata etc. are acquired for making an access decision. As noted previously these attributes may be in the form of static metadata e.g. the format of the file implying its schema or dynamic information e.g. traffic or load on the network or host . In some cases custom modules can be specified for instance by the source code binary code implementation libraries etc. determined with respect to the resource . In one embodiment at least some of the schemas or formats of the various attributes metadata etc. and the lexicon in which they are evaluated can be normalized so that the access control decision at the outer boundary can be reached without specific knowledge of the schema format content or behavior of the resource or nested domain at the inner boundary.

In one embodiment the policy manager can determine whether the information e.g. attributes source code etc. are available from a cache storage step . If any of the information cannot be retrieved or is otherwise unavailable from the cache storage the policy manager determines to initiate a generation a compilation or a combination thereof of the one or more schemas the one or more attributes the one or more rules the source code the binary code the one or more implementation libraries or a combination thereof on the receiving of the request step .

The generation and or compilation results in for instance production of an executable image which can then by loaded and or executed by the policy manager step . On running the executable image the policy manager determines or decides whether to grant or deny access according to the local access policies step . If access is allow under the local policies the policy manager grants access to the requested resources as described with respect to step above. In one embodiment a decision to allow access may cause the policy manager to formulate or generate a response that includes tasks or actions to facilitate that access based on for instance the nature of the resource. For example if the requested resource is a process granting access may include providing an interface e.g. an application programming interface API to access the functions and or data of the process. If the requested resource is a file an attribute associated with the requester and or the file may be changed to indicate the allowed access. It is contemplated that the actions that may be performed to grant access can be dependent on the resource and the level of access requested or provided.

In some embodiments if the access decision is to deny access the policy manager can propagate the decision to the outer scope boundary where further decisions on the disposition of the request can be made e.g. whether the request is trapped retried in some other form or simply passed through if there is no consequence to the domain or scope originating the denial decision .

On receiving an access request to the file sharing domain the policy manager presents a user interface for authenticating access to the file sharing domain according to its local policies and schema. In this case the local access policies provide for rules that request a username and password combination for access to the service. The policy manager can then retrieve for instance schemas attributes rules policies source code binary code implementation libraries etc. associated with verifying the username and password combination to evaluate an access decision for the request. Access to the file sharing domain includes access to the resources bounded by the outer boundary and the inner boundary .

If a user wants access to the financial reports in the financial files domain the user can make an access request at the inner boundary . It is noted that in the distributed approach the policy manager of the file sharing domain and the policy manager operate independently. In other words the access control policies applied and enforced at the corresponding domains and can operate without knowledge of the access control policies of the other domain. Nonetheless because of the nested or layered nature of the file sharing domain and the financial files domain the user is able to approach the inner boundary only after successfully traversing the access control policy implemented at the outer boundary .

Accordingly the policy manager need not be concerned about or have knowledge of the access policy of the outer boundary . The policy manager is focused on applying only its local access policy. In this example the access policies and related schema for the financial files domain are based on resources that are of the financial reports resource type. In this system financial reports are treated with more restrictive access control policies to protect sensitive nature of the documents. Again under an embodiment of this approach knowledge of the properties of this resource type need not be propagated to the outer file sharing domain but is instead applied locally at the domain where the resource type is stored. Therefore the policy manager may specify a completely different access control policy based on a different mechanism such as the biometric e.g. fingerprint authentication shown in the user interface . Under the access control policy executable modules associated with scanning and verifying the user s fingerprint may be stored locally at the policy manager . The biometric information is not shared with the file sharing domain thereby advantageously reducing the resource burden associated with implementing biometric security mechanism at the outer boundary where it is not needed.

The processes described herein for providing distributed policy management and enforcement may be advantageously implemented via software hardware firmware or a combination of software and or firmware and or hardware. For example the processes described herein may be advantageously implemented via processor s Digital Signal Processing DSP chip an Application Specific Integrated Circuit ASIC Field Programmable Gate Arrays FPGAs etc. Such exemplary hardware for performing the described functions is detailed below.

A bus includes one or more parallel conductors of information so that information is transferred quickly among devices coupled to the bus . One or more processors for processing information are coupled with the bus .

A processor or multiple processors performs a set of operations on information as specified by computer program code related to provide distributed policy management. The computer program code is a set of instructions or statements providing instructions for the operation of the processor and or the computer system to perform specified functions. The code for example may be written in a computer programming language that is compiled into a native instruction set of the processor. The code may also be written directly using the native instruction set e.g. machine language . The set of operations include bringing information in from the bus and placing information on the bus . The set of operations also typically include comparing two or more units of information shifting positions of units of information and combining two or more units of information such as by addition or multiplication or logical operations like OR exclusive OR XOR and AND. Each operation of the set of operations that can be performed by the processor is represented to the processor by information called instructions such as an operation code of one or more digits. A sequence of operations to be executed by the processor such as a sequence of operation codes constitute processor instructions also called computer system instructions or simply computer instructions. Processors may be implemented as mechanical electrical magnetic optical chemical or quantum components among others alone or in combination.

Computer system also includes a memory coupled to bus . The memory such as a random access memory RAM or any other dynamic storage device stores information including processor instructions for providing distributed policy management. Dynamic memory allows information stored therein to be changed by the computer system . RAM allows a unit of information stored at a location called a memory address to be stored and retrieved independently of information at neighboring addresses. The memory is also used by the processor to store temporary values during execution of processor instructions. The computer system also includes a read only memory ROM or any other static storage device coupled to the bus for storing static information including instructions that is not changed by the computer system . Some memory is composed of volatile storage that loses the information stored thereon when power is lost. Also coupled to bus is a non volatile persistent storage device such as a magnetic disk optical disk or flash card for storing information including instructions that persists even when the computer system is turned off or otherwise loses power.

Information including instructions for providing distributed policy management is provided to the bus for use by the processor from an external input device such as a keyboard containing alphanumeric keys operated by a human user or a sensor. A sensor detects conditions in its vicinity and transforms those detections into physical expression compatible with the measurable phenomenon used to represent information in computer system . Other external devices coupled to bus used primarily for interacting with humans include a display device such as a cathode ray tube CRT a liquid crystal display LCD a light emitting diode LED display an organic LED OLED display a plasma screen or a printer for presenting text or images and a pointing device such as a mouse a trackball cursor direction keys or a motion sensor for controlling a position of a small cursor image presented on the display and issuing commands associated with graphical elements presented on the display . In some embodiments for example in embodiments in which the computer system performs all functions automatically without human input one or more of external input device display device and pointing device is omitted.

In the illustrated embodiment special purpose hardware such as an application specific integrated circuit ASIC is coupled to bus . The special purpose hardware is configured to perform operations not performed by processor quickly enough for special purposes. Examples of ASICs include graphics accelerator cards for generating images for display cryptographic boards for encrypting and decrypting messages sent over a network speech recognition and interfaces to special external devices such as robotic arms and medical scanning equipment that repeatedly perform some complex sequence of operations that are more efficiently implemented in hardware.

Computer system also includes one or more instances of a communications interface coupled to bus . Communication interface provides a one way or two way communication coupling to a variety of external devices that operate with their own processors such as printers scanners and external disks. In general the coupling is with a network link that is connected to a local network to which a variety of external devices with their own processors are connected. For example communication interface may be a parallel port or a serial port or a universal serial bus USB port on a personal computer. In some embodiments communications interface is an integrated services digital network ISDN card or a digital subscriber line DSL card or a telephone modem that provides an information communication connection to a corresponding type of telephone line. In some embodiments a communication interface is a cable modem that converts signals on bus into signals for a communication connection over a coaxial cable or into optical signals for a communication connection over a fiber optic cable. As another example communications interface may be a local area network LAN card to provide a data communication connection to a compatible LAN such as Ethernet. Wireless links may also be implemented. For wireless links the communications interface sends or receives or both sends and receives electrical acoustic or electromagnetic signals including infrared and optical signals that carry information streams such as digital data. For example in wireless handheld devices such as mobile telephones like cell phones the communications interface includes a radio band electromagnetic transmitter and receiver called a radio transceiver. In certain embodiments the communications interface enables connection to the communication network for providing distributed policy management.

The term computer readable medium as used herein refers to any medium that participates in providing information to processor including instructions for execution. Such a medium may take many forms including but not limited to computer readable storage medium e.g. non volatile media volatile media and transmission media. Non transitory media such as non volatile media include for example optical or magnetic disks such as storage device . Volatile media include for example dynamic memory . Transmission media include for example twisted pair cables coaxial cables copper wire fiber optic cables and carrier waves that travel through space without wires or cables such as acoustic waves and electromagnetic waves including radio optical and infrared waves. Signals include man made transient variations in amplitude frequency phase polarization or other physical properties transmitted through the transmission media. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM CDRW DVD any other optical medium punch cards paper tape optical mark sheets any other physical medium with patterns of holes or other optically recognizable indicia a RAM a PROM an EPROM a FLASH EPROM an EEPROM a flash memory any other memory chip or cartridge a carrier wave or any other medium from which a computer can read. The term computer readable storage medium is used herein to refer to any computer readable medium except transmission media.

Logic encoded in one or more tangible media includes one or both of processor instructions on a computer readable storage media and special purpose hardware such as ASIC .

Network link typically provides information communication using transmission media through one or more networks to other devices that use or process the information. For example network link may provide a connection through local network to a host computer or to equipment operated by an Internet Service Provider ISP . ISP equipment in turn provides data communication services through the public world wide packet switching communication network of networks now commonly referred to as the Internet .

A computer called a server host connected to the Internet hosts a process that provides a service in response to information received over the Internet. For example server host hosts a process that provides information representing video data for presentation at display . It is contemplated that the components of system can be deployed in various configurations within other computer systems e.g. host and server .

At least some embodiments of the invention are related to the use of computer system for implementing some or all of the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more processor instructions contained in memory . Such instructions also called computer instructions software and program code may be read into memory from another computer readable medium such as storage device or network link . Execution of the sequences of instructions contained in memory causes processor to perform one or more of the method steps described herein. In alternative embodiments hardware such as ASIC may be used in place of or in combination with software to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware and software unless otherwise explicitly stated herein.

The signals transmitted over network link and other networks through communications interface carry information to and from computer system . Computer system can send and receive information including program code through the networks among others through network link and communications interface . In an example using the Internet a server host transmits program code for a particular application requested by a message sent from computer through Internet ISP equipment local network and communications interface . The received code may be executed by processor as it is received or may be stored in memory or in storage device or any other non volatile storage for later execution or both. In this manner computer system may obtain application program code in the form of signals on a carrier wave.

Various forms of computer readable media may be involved in carrying one or more sequence of instructions or data or both to processor for execution. For example instructions and data may initially be carried on a magnetic disk of a remote computer such as host . The remote computer loads the instructions and data into its dynamic memory and sends the instructions and data over a telephone line using a modem. A modem local to the computer system receives the instructions and data on a telephone line and uses an infra red transmitter to convert the instructions and data to a signal on an infra red carrier wave serving as the network link . An infrared detector serving as communications interface receives the instructions and data carried in the infrared signal and places information representing the instructions and data onto bus . Bus carries the information to memory from which processor retrieves and executes the instructions using some of the data sent with the instructions. The instructions and data received in memory may optionally be stored on storage device either before or after execution by the processor .

In one embodiment the chip set or chip includes a communication mechanism such as a bus for passing information among the components of the chip set . A processor has connectivity to the bus to execute instructions and process information stored in for example a memory . The processor may include one or more processing cores with each core configured to perform independently. A multi core processor enables multiprocessing within a single physical package. Examples of a multi core processor include two four eight or greater numbers of processing cores. Alternatively or in addition the processor may include one or more microprocessors configured in tandem via the bus to enable independent execution of instructions pipelining and multithreading. The processor may also be accompanied with one or more specialized components to perform certain processing functions and tasks such as one or more digital signal processors DSP or one or more application specific integrated circuits ASIC . A DSP typically is configured to process real world signals e.g. sound in real time independently of the processor . Similarly an ASIC can be configured to performed specialized functions not easily performed by a more general purpose processor. Other specialized components to aid in performing the inventive functions described herein may include one or more field programmable gate arrays FPGA not shown one or more controllers not shown or one or more other special purpose computer chips.

In one embodiment the chip set or chip includes merely one or more processors and some software and or firmware supporting and or relating to and or for the one or more processors.

The processor and accompanying components have connectivity to the memory via the bus . The memory includes both dynamic memory e.g. RAM magnetic disk writable optical disk etc. and static memory e.g. ROM CD ROM etc. for storing executable instructions that when executed perform the inventive steps described herein to provide distributed policy management. The memory also stores the data associated with or generated by the execution of the inventive steps.

Pertinent internal components of the telephone include a Main Control Unit MCU a Digital Signal Processor DSP and a receiver transmitter unit including a microphone gain control unit and a speaker gain control unit. A main display unit provides a display to the user in support of various applications and mobile terminal functions that perform or support the steps of providing distributed policy management. The display includes display circuitry configured to display at least a portion of a user interface of the mobile terminal e.g. mobile telephone . Additionally the display and display circuitry are configured to facilitate user control of at least some functions of the mobile terminal. An audio function circuitry includes a microphone and microphone amplifier that amplifies the speech signal output from the microphone . The amplified speech signal output from the microphone is fed to a coder decoder CODEC .

A radio section amplifies power and converts frequency in order to communicate with a base station which is included in a mobile communication system via antenna . The power amplifier PA and the transmitter modulation circuitry are operationally responsive to the MCU with an output from the PA coupled to the duplexer or circulator or antenna switch as known in the art. The PA also couples to a battery interface and power control unit .

In use a user of mobile terminal speaks into the microphone and his or her voice along with any detected background noise is converted into an analog voltage. The analog voltage is then converted into a digital signal through the Analog to Digital Converter ADC . The control unit routes the digital signal into the DSP for processing therein such as speech encoding channel encoding encrypting and interleaving. In one embodiment the processed voice signals are encoded by units not separately shown using a cellular transmission protocol such as enhanced data rates for global evolution EDGE general packet radio service GPRS global system for mobile communications GSM Internet protocol multimedia subsystem IMS universal mobile telecommunications system UMTS etc. as well as any other suitable wireless medium e.g. microwave access WiMAX Long Term Evolution LTE networks code division multiple access CDMA wideband code division multiple access WCDMA wireless fidelity WiFi satellite and the like or any combination thereof.

The encoded signals are then routed to an equalizer for compensation of any frequency dependent impairments that occur during transmission though the air such as phase and amplitude distortion. After equalizing the bit stream the modulator combines the signal with a RF signal generated in the RF interface . The modulator generates a sine wave by way of frequency or phase modulation. In order to prepare the signal for transmission an up converter combines the sine wave output from the modulator with another sine wave generated by a synthesizer to achieve the desired frequency of transmission. The signal is then sent through a PA to increase the signal to an appropriate power level. In practical systems the PA acts as a variable gain amplifier whose gain is controlled by the DSP from information received from a network base station. The signal is then filtered within the duplexer and optionally sent to an antenna coupler to match impedances to provide maximum power transfer. Finally the signal is transmitted via antenna to a local base station. An automatic gain control AGC can be supplied to control the gain of the final stages of the receiver. The signals may be forwarded from there to a remote telephone which may be another cellular telephone any other mobile phone or a land line connected to a Public Switched Telephone Network PSTN or other telephony networks.

Voice signals transmitted to the mobile terminal are received via antenna and immediately amplified by a low noise amplifier LNA . A down converter lowers the carrier frequency while the demodulator strips away the RF leaving only a digital bit stream. The signal then goes through the equalizer and is processed by the DSP . A Digital to Analog Converter DAC converts the signal and the resulting output is transmitted to the user through the speaker all under control of a Main Control Unit MCU which can be implemented as a Central Processing Unit CPU not shown .

The MCU receives various signals including input signals from the keyboard . The keyboard and or the MCU in combination with other user input components e.g. the microphone comprise a user interface circuitry for managing user input. The MCU runs a user interface software to facilitate user control of at least some functions of the mobile terminal to provide distributed policy management. The MCU also delivers a display command and a switch command to the display and to the speech output switching controller respectively. Further the MCU exchanges information with the DSP and can access an optionally incorporated SIM card and a memory . In addition the MCU executes various control functions required of the terminal. The DSP may depending upon the implementation perform any of a variety of conventional digital processing functions on the voice signals. Additionally DSP determines the background noise level of the local environment from the signals detected by microphone and sets the gain of microphone to a level selected to compensate for the natural tendency of the user of the mobile terminal .

The CODEC includes the ADC and DAC . The memory stores various data including call incoming tone data and is capable of storing other data including music data received via e.g. the global Internet. The software module could reside in RAM memory flash memory registers or any other form of writable storage medium known in the art. The memory device may be but not limited to a single memory CD DVD ROM RAM EEPROM optical storage magnetic disk storage flash memory storage or any other non volatile storage medium capable of storing digital data.

An optionally incorporated SIM card carries for instance important information such as the cellular phone number the carrier supplying service subscription details and security information. The SIM card serves primarily to identify the mobile terminal on a radio network. The card also contains a memory for storing a personal telephone number registry text messages and user specific mobile terminal settings.

While the invention has been described in connection with a number of embodiments and implementations the invention is not so limited but covers various obvious modifications and equivalent arrangements which fall within the purview of the appended claims. Although features of the invention are expressed in certain combinations among the claims it is contemplated that these features can be arranged in any combination and order.

