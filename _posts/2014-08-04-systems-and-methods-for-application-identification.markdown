---

title: Systems and methods for application identification
abstract: Systems and methods for application identification in accordance with embodiments of the invention are disclosed. In one embodiment, a user device includes a processor and memory configured to store an application, a session manager, an application identifier, and at least one shared library, and the processor is configured by the session manager to communicate the application identifier and the application identifier data to an authentication server and permit the execution of the application in response to authentication of the application by the authentication server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268923&OS=09268923&RS=09268923
owner: Sonic IP, Inc.
number: 09268923
owner_city: San Diego
owner_country: US
publication_date: 20140804
---
The current application is a continuation of U.S. application Ser. No. 13 340 594 filed Dec. 29 2011 entitled Systems and Methods for Application Identification which claims priority to U.S. Provisional Application No. 61 529 876 filed Aug. 31 2011 entitled Systems and Methods for Application Identification the disclosure of which is incorporated herein by reference.

The present invention relates to cross platform software applications and more specifically to the identification of cross platform software applications.

Consumer electronic CE devices are typically proprietary platforms. CE devices are generally resource limited user devices with limited memory and processing power. CE devices can be contrasted with devices endowed with sufficient resources for a range of functions that can be resource intensive such as a personal computer. A CE device such as a mobile phone or Internet television typically requires a significant investment to create and maintain. Additionally a CE device may include security features such as proprietary access information for CE device updates and other services from CE device creators or managers.

CE devices can utilize applications to make a device more useful. An application is software that performs a specific task for a user. This is in contrast to software which integrates a device s capabilities such as an operating system. Many applications on CE devices are natively implemented. The term natively implemented is typically used to describe an application that is specifically designed to run on a device platform such as a device s operating system and machine firmware. A natively implemented application typically needs to be ported or adapted for each different device on which it is implemented.

Systems and methods for application identification in accordance with embodiments of the invention are disclosed. In one embodiment a user device includes a processor and memory configured to store an application a session manager an application identifier and at least one shared library and the processor is configured by the session manager to communicate the application identifier and the application identifier data to an authentication server and permit the execution of the application in response to authentication of the application by the authentication server.

In another embodiment the session manager and the stored libraries are part of a common application platform stored in the memory of the user device.

In a still further embodiment the application identifier is contained in encrypted provisioning data stored in the memory where the provisioning data is encrypted so that its content is not accessible to the user device.

In still another embodiment the provisioning data is encrypted with cryptographic information associated with the application identifier.

In yet another embodiment the session manager also configures the processor to generate application identifier data based upon at least one characteristic of the application and communicate the application identifier data to the authentication server.

In a further embodiment again the application includes at least one file and the application identifier data includes information that can be used to authenticate the at least one file.

In another embodiment again the information that can be used to authenticate the at least one file includes at least one hash of at least a part of at least one of the at least one files.

In a further additional embodiment the application identifier data includes at least one piece of data selected from the group consisting of application name application version and application vendor.

Another additional embodiment also includes a product identifier stored in memory where the product identifier is associated with the execution platform of the user device.

In a still yet further embodiment the memory is further configured to store a library manifest containing information that can be used to authenticate at least one shared library and the processor is further configured by a session manager to receive a request to access a target library from the at least one shared library authenticate the target library using the library manifest permit the application to access the target library when the library is authenticated and deny the application access to the target library when the library does not authenticate.

In a still further embodiment again the library manifest contains a private key signature of the contents of the manifest.

In still another embodiment again the library manifest contains at least one hash of the target library.

In still another additional embodiment the processor is further configured by the session manager to negotiate a session token key with the target library and provide a session token encrypted with the session token key to the application where the session token key grants access to the target library.

In a yet further embodiment again configuring the processor to negotiate a session token key with the shared library also includes the session manager configuring the processor to send a request to the target library receive data encrypted with a session manager public key send data encrypted with a shared library public key to the target library and receive a confirmation.

Yet another embodiment again also includes at least one application identifier stored in memory that is associated with a shared library.

In a yet further additional embodiment authenticating an application executing on a user device configured to communicate with an authentication server includes retrieving encrypted provisioning data containing an application ID associated with an application using a user device sending the encrypted provisioning data to an authentication server using the user device receiving authentication of the application from the authentication server and authorizing the execution of the application.

In yet another additional embodiment the provisioning data is encrypted with a provisioning data key and the authentication server holds the provisioning data key.

A further additional embodiment again also includes sending information describing the application to the authentication server using the user device and receiving confirmation from the authentication server that the information matches information stored on the authentication server that is associated with the application using the user device.

Another additional embodiment again also includes forcing an update of the application using the authentication server and the information describing the application includes an application version.

A still yet further embodiment again also includes retrieving a product identifier that identifies a type of user device using the user device sending the product identifier that identifies the type of user device to the authentication server with the encrypted provisioning data and receiving confirmation from the authentication server that the application is compatible with the user device.

Still yet another embodiment again also includes receiving a request from the application to access a shared library on the user device retrieving an application identifier that identifies the shared library sending the application identifier that identifies the shared library to the authentication server with the encrypted provisioning data and receiving confirmation from the authentication server that the application is compatible with the shared library.

In a still yet further additional embodiment providing an application with access to a shared library on a user device includes receiving a request for access to a shared library on a user device verifying provisioning data stored on the user device containing an application identifier verifying the shared library stored on the user device using a library manifest containing information that can be used to identify and verify the shared library negotiating a session token key with the shared library using the user device and providing a session token encrypted with the session token key to the application using the user device where the session token key grants access to the shared library.

In still yet another additional embodiment the request for access to a shared library received by the user device includes provisioning data and the name of the shared library.

In a yet further additional embodiment again verifying the provisioning data includes sending the provisioning data to an authentication server and receiving confirmation from the authentication server.

In yet another additional embodiment again the library manifest contains at least one private key signature.

In a still yet further additional embodiment again the library manifest contains at least one hash of the shared library.

In still yet another additional embodiment again the library manifest contains a private key signature of the contents of the manifest.

In still another further embodiment negotiating a session token key includes sending a request to the shared library using the user device receiving data encrypted with the session manager s public key using the user device sending data encrypted with the shared library s public key to the shared library using the user device and receiving confirmation from the share library using the user device.

In yet another further embodiment an authentication server includes a processor and memory configured to store at least one application identifier where the application identifier is associated with a specific application and with application identifier data and the processor is configured by an authentication application to receive application identifier data and encrypted provisioning data containing an application identifier from a user device extract the application identifier from the encrypted provisioning data retrieve stored application identifier data associated with the extracted application identifier compare at least a portion of the stored application identifier data with the received application identifier data and send a message authenticating the application to a user device when the compared portions of application identifier data match.

In another further embodiment again the memory is also configured to store cryptographic information associated with the application identifier and the processor is configured to access the application identifier within the encrypted provisioning data using the cryptographic information associated with the application identifier.

In a further embodiment the application includes at least one file and the application identifier data includes information that can be used to authenticate at least one of the files.

In another embodiment the information that can be used to authenticate at least one of the files includes hashes of part or all of the files.

In a still further embodiment the application identifier data includes at least one piece of information selected from the group consisting of application name application version and application vendor.

In still another embodiment the application identifier is also associated with one or more product identifiers that indicate execution platforms with which the application is compatible.

In a yet further embodiment the memory is also configured to store information describing the compatibility and interoperability of software modules using application identifiers.

In a further embodiment again certifying an application for a consumer electronics product includes receiving application identifier data storing an application identifier on a server so that the application identifier data is associated with the application identifier and application storing the application identifier on a device extracting the application identifier from communications sent from the device retrieving application identifier data associated with the application identifier and displaying the application identifier and application identifier data in human readable format.

Another embodiment again also includes receiving one or more product identifiers where each product identifier is associated with an execution platform validating the application associated with the application identifier on a device including the execution platform identified by the product identifier and storing an association between the one or more product identifiers and the application identifier on the server.

Turning now to the drawings systems and methods for application identification in accordance with embodiments of the invention are illustrated. Common application platforms including the common application platforms described in U.S. patent application Ser. No. 13 223 053 filed Aug. 31 2011 entitled Systems and Methods for Common Application Platforms Utilizing Shared Libraries enable the development of applications that can execute on different hardware and operating system combinations. In many instances the common application platforms include shared libraries that can be utilized by an application to efficiently perform specific functions on a specific device. The shared libraries can provide a variety of functions including but not limited to media playback and handling of digital rights management DRM . The disclosure of U.S. patent application Ser. No. 13 223 053 is incorporated by reference herein in its entirety.

When users are able to load applications onto user devices that are configured using common application platforms the potential exists for the user to load an application that is not compatible with the specific hardware capabilities of the user device and or the specific versions of the shared libraries present on the user device. In a number of embodiments applications authorized to run on a common application platform include an application identifier application ID that enables an authentication server to authenticate the application. When an application is authenticated by the authentication server the user device can grant the application access to the shared libraries and or other resources within the common application platform.

In many embodiments the user device includes a product identifier product ID such as but not limited to the product identifiers described in U.S. Patent Application Ser. No. 61 581 598. As part of the process of authenticating an application the user device can provide its product ID to the authentication server with the application s application ID and the authentication server can determine whether the application identified by the application ID is capable of executing on the product identified by the product ID. The disclosure of U.S. Patent Application Ser. No. 61 581 598 is incorporated by reference herein in its entirety.

In several embodiments aspects of the common application platform including but not limited to one or more of the shared libraries within the common application platform include application IDs. When the user device authenticates an application the user device can provide the application IDs of one or more of the shared libraries to the authentication server and the authentication server can determine whether the application identified by an application ID is compatible with the shared libraries identified by the shared library application IDs.

Shared libraries on common application platforms can be subject to a number of other attempts to acquire valuable information including but not limited to cryptographic keys and user information often referred to as attacks . One such attempt involves loading modified or untrusted applications onto the common application platform in an attempt to intercept valuable information. In many embodiments the application ID is contained within encrypted provisioning data embedded within or accompanying the application and a user device can authenticate the application by providing the encrypted provisioning data to a remote authentication server along with information describing one or more characteristics of the application including but not limited to hashes or checksums of one or more files that make up the application. In this way the authentication server can detect attempts to modify or tamper with the application. When the characteristics of the application do not match the application characteristics associated with the application ID then the authentication server can notify the common application platform and access to the shared libraries is denied. Another attack is to wrap an untrusted application around a library such that it can intercept communication between a trusted application and the shared library. Such an attack can be prevented by enabling an application communicating with the shared library to verify that it is communicating with a trusted library.

In a number of embodiments a static library session manager is compiled into an application and the common application platform includes a manifest describing the shared libraries on the common application platform. The application can use the session manager and the manifest to authenticate the shared libraries with which it communicates. In several embodiments the manifest contains descriptions of the shared libraries including but not limited to hashes or checksums of the shared library modules. In the event that the session manager detects a shared library that is not trusted the application can cease communication with the shared library. In some embodiments the session manager is part of the common application platform instead of the application but can still be utilized by the application in the same ways.

In many embodiments the application ID or the application ID in conjunction with the application version can be used to revoke or force an upgrade of all application software deployments or in conjunction with the product ID can be used to revoke or force an upgrade of application software on a subset of the platforms which the application is deployed to.

A system including user devices running common application platforms in accordance with an embodiment of the invention is illustrated in . The system includes a number of different types of user device that each runs a common application platform. In many embodiments each of the various user devices include applications running on common application platforms utilizing natively implemented shred libraries and the user devices are connected to a content server application server and authentication server over the Internet. In several embodiments the common application platform enables non natively implemented applications to execute on each of the user devices. The user devices communicate with a content server application server and authentication server over a network such as the Internet . In several embodiments the content server is a server that can deliver content to the user devices . In many embodiments the content can be downloaded and or streamed by the user devices . In a number of embodiments application servers store applications that can be downloaded and installed on user devices . Authentication servers can be used to authenticate applications using an application ID provisioned to the application and to confirm that the application is compatible with a specific user device using a product ID provisioned to the user device and or application IDs provisioned to shared libraries within the common application platform on the user device .

In various embodiments the shared libraries on the common application platform can be utilized by applications running on the common application platform. The inclusion of natively implemented libraries that can be shared among applications can increase the functionality of the applications that can be implemented on the common application platform. By way of example an application running with an application platform on a user device can utilize a natively implemented media playback library and a DRM library to stream protected content from the remote content server via the Internet . These same libraries can be utilized by other applications.

Although a specific architecture is shown in any of a variety of architectures can be utilized that enable applications on user devices to securely access shared libraries in accordance with embodiments of the invention. Application IDs and the authentication of applications and shared libraries in accordance with embodiments of the invention are discussed further below.

In many embodiments of the invention an application ID is a unique character string that is associated with a set of application identifier data where a set of application identifier data is descriptive of an application. Any of a number of methods can be used to generate an application ID including a random number generator manual numbering or determination by a person or systematic methods such as using sequential numbers. Typically an authentication server receives application identifier data generates an application ID and associates the application identifier data with the application ID in a database.

Application identifier data that is associated with each application ID can include but is not limited to application name application version and application vendor or developer. The individual pieces of application identifier data represent information about an aspect of an application that remains static throughout all instances where the application is deployed. Information may also be included that can be used to verify some or all of the files of the application such as a checksum or hash of part or all of a file. As discussed below the information can be used to verify that the files deployed with an application on a device are identical to the files that were originally submitted for certification and issuance of the application ID i.e. that they were not tampered with altered or an unauthorized version of the application.

In some embodiments of the invention the application ID remains constant across different versions of the application. The application version is then not included as application identifier data but is stored along with the application ID on devices as further identifying information.

As is described below product IDs may also be associated with an application ID by the authentication server to indicate what products or execution platforms have been tested to be compatible with the application. An execution platform can be a particular hardware configuration or chipset and firmware combination utilized by a user device. Systems and methods for identifying consumer electronic products using product IDs include those disclosed in U.S. Patent Application Ser. No. 61 581 598 entitled Systems and Methods for Identifying Consumer electronic Products Using a Playback Device with a Product Identifier incorporated by reference above.

In many embodiments an application is configured to execute on a common application platform deployed to a specific product. Common application platforms such as but not limited to the common application platforms described in U.S. patent application Ser. No. 13 223 053 filed Aug. 31 2011 entitled Systems and Methods for Common Application Platforms Utilizing Shared Libraries can include shared libraries that can be utilized by applications. In several embodiments of the invention various software components such as shared libraries can also be issued application IDs. As will be discussed further below the use of application IDs on multiple software components can provide additional authentication of the components and an ability to verify compatibility. An authentication server can associate the application ID of an application with the application IDs of the shared libraries that have been tested as compatible with the application. When a number of software components are interacting application IDs for the combination can be sent to a server that has information to authenticate and determine the interoperability of the components. In this way a user device can verify that an application is compatible with the shared libraries currently stored on the user device. As is discussed further below an authentication server can force updates to the application and or shared libraries in response to incompatibilities that can be corrected via appropriate updates.

In several embodiments of the invention an application vendor requests that an application be certified i.e. tested and issued an application ID and provides application identifier data as well as product IDs for the execution platforms for which the application should be certified. The distributor of the common application platform certifies the application by verifying that the application can execute on a common application platform installed on a device that is exemplary of the product identified by the product ID. The product IDs of the execution platforms for which the application is certified and the application identifier data are associated with the application ID in a database maintained by an authentication server system. Generally a change in the value of any piece of application identifier data will necessitate a different application ID.

Because the application ID is used as an authentication mechanism it is desirable that the user device by prevented from accessing the application ID. The application ID can be obfuscated in a variety of ways including but not limited to being encoded encrypted or compiled into a binary in a way that additional information is required in order to interpret the application ID. In several embodiments of the invention the application ID is contained in encrypted provisioning data that is embedded within an application. The application ID can only be accessed using cryptographic information associated with the application ID known to the authentication server.

Although specific application identifier data and fields are described above systems and methods in accordance with embodiments of the invention can utilize any of a variety of types of information to identify an application and associate the information with an application ID. Furthermore the pieces of information included in application identifier data associated with an application ID can be defined by an application ID version.

In many embodiments of the invention encrypted provisioning data containing an application ID is issued for each software module application library etc. . The encrypted provisioning data is stored along with the module when the module is deployed on a user device. The provisioning data typically contains at least the application ID or information from which an application ID can be determined.

In many embodiments the provisioning data includes the application name and an application ID associated with the application. Other embodiments may also include the application version. As indicated above in some embodiments the same application ID is maintained among different versions of the application. Including the application version in the provisioning data can serve to further identify the application. On a user device that has multiple client applications and libraries each application and library may be issued encrypted provisioning data.

As discussed above the application ID should not be easily discernible. In many embodiments the provisioning data is encrypted so that only a server with cryptographic information associated with the application ID can access its contents. Some embodiments may maintain confidentiality by communicated the provisioning data or application ID only over a secure connection such as secure sockets layer SSL .

The provisioning data can be issued during a certification process as will be discussed further below.

Shared libraries are software modules that contain sets of related software instructions that can be utilized by applications. The libraries can be designed to be accessed by other software components such as by an application programming interface API . In many embodiments shared libraries are included in a common application platform. In other embodiments shared libraries are built by a vendor and included in basic device firmware.

In a number of embodiments a library manifest is utilized to enable authentication of shared libraries. In several embodiments of the invention a library manifest contains private key signatures or hashes of each shared library and information to identify each library such as a name or numerical identifier.

A cryptographic hash function is a procedure or algorithm that takes an arbitrary block of data and returns a fixed size bit string the hash value such that an accidental or intentional change to the data will change the hash value. A cryptographic hash function ideally has four significant properties it is easy to compute the hash value for a given input value it is infeasible to generate an input value that has a given hash value it is infeasible to modify an input value without changing the resulting hash value and it is infeasible to find two input values with the same hash value.

The library manifest can be made more tamper resistant by signing and encrypting its contents. A private key signature of the payload of the manifest can be made and included and the payload can be encrypted with a manifest key. In many embodiments of the invention a static session manager is included in each application which has the manifest key and public key can and can utilize the library manifest to authenticate shared libraries.

The session manager is compiled statically and incorporated into each application that accesses a shared library secured by a manifest. In several embodiments of the invention other modules that contain sensitive information susceptible to a security breach or that perform sensitive data manipulations such as a DRM library or a playback library can be compiled statically into an application. When a library is statically compiled into an application the static library is not available for use through an API and is therefore not considered a shared library. Session managers in accordance with embodiments of the invention are discussed further below.

In several embodiments of the invention a session manager provides an interface to an application to request access to a shared library s entry point. The session manager is a static library that is typically developed by the common application platform provider. The session manager can be integrated into an application by its developers to enable access to the relevant shared libraries. Alternatively the session library can be integrated into the common application platform and accessed by the application.

One method of regulating access is for the session manager to provide a token to the client application. Tokens can be used as a credential to permit an authorized session between software modules such as to provide rights to a client application to access a shared library. The session token may contain a creation time that can be used to validate the token a validity duration for the amount of time before the token expires the name of the requesting application and or other information that would be useful in securing a session or indicating what privileges the application is allowed.

In several embodiments of the invention when an application requests access to a shared library a session manager negotiates a session token key with the target shared library and issues an encrypted session token to the client application giving the application rights to access the library. As will be discussed further below any of a variety of methods can be used to negotiate a session token key so long as a trust relationship can be established between a session manager and target library. The process can include other verification steps such as checking the hash values of libraries against the library manifest.

In many embodiments an application stored on a user device includes an application ID that is not accessible to the user device. A user device which stores an application including an application ID that executes on a common application platform utilizing shared libraries in accordance with an embodiment of the invention is shown in . The user device includes a processor volatile memory and non volatile memory . In the illustrated embodiment the non volatile memory includes executable instructions that implement a common application platform including one or more shared libraries . A library manifest is also provided that can be utilized in the authentication of the shared libraries . The non volatile memory also includes an application configured to execute on the common application platform . The application includes a session manager and encrypted provisioning data . As discussed above the session manager is a library statically compiled into the application that enables authentication of the shared libraries and the encrypted provisioning data can be utilized to authenticate the application .

In several embodiments an application name and application ID are contained within the encrypted provisioning data along with an application version. Embodiments of the invention however are not limited to storing the application ID and associated data within the encrypted provisioning data. In many embodiments the provisioning data is encrypted using a provisioning data key. The encrypted provisioning data can be stored in a variety of ways including being embedded within the application stored separately or stored within other files or modules on the device. The encrypted provisioning data can be utilized to authenticate the application . In addition the combination of the encrypted provisioning data and the library manifest can be utilized to determine the compatibility of the application with the shared libraries present on the user device .

The non volatile memory of the user device also includes a product ID which can be utilized for a variety of purposes including determining the compatibility of the application with the user device . Although a specific user device architecture and set of data and applications are illustrated in any of a variety of architectures can be utilized that enable the execution of applications identified using an application ID in accordance with embodiments of the invention. The manner in which application IDs can be utilized to authenticate and verify the compatibility of an application with a user device and a set of shared libraries in accordance with embodiments of the invention are discussed further below.

An authentication server configured to communicate with user devices typically performs application authentication and application compatibility using application IDs and product IDs. The authentication server can maintain a database that associates a specific application ID with application data. In addition the database can associate an application ID with other application IDs and or product IDs with which the application is compatible e.g. the application has been certified with respect to specific products and shared libraries . A relational database conceptually illustrating tables in a database maintained by an authentication server in accordance with an embodiment of the invention is shown in . The relational database contains at least one application data table . The application data table holds values for application ID application name application version vendor and product ID. An application ID can be associated with more than one product ID where an application is compatible with multiple execution platforms. In addition an application ID can be associated with more than one application ID to indicate shared libraries and or other resources with which the application is compatible. Although specific data structures and data fields dimensions are illustrated in any of a variety of data structures can be utilized to store data associated with application IDS such as but not limited to lists in accordance with embodiments of the invention.

In many embodiments of the invention application IDs are assigned to applications during a certification process that determines that an application functions properly on specific products or types of device and or with specific shared libraries. As discussed above products or execution platforms can be identified using product IDs and shared libraries can be identified using their own application IDs. Once compatibility is verified then an authentication server can assign an application ID to the application and associate the assigned application ID with product IDs and application IDs of compatible products and shared libraries. In embodiments where the application is unable to access the application ID the application ID and any associated data can be encrypted using any of a variety of cryptographic techniques to create encrypted provisioning data that can be embedded within the application or provided accompanying the application to enable authentication of the application by the authentication server.

A process for issuing an application ID during a certification process in accordance with an embodiment of the invention is shown in . During the process an application developer submits application identifier data. In a number of embodiments the application identifier data can include but is not limited to an application name application version and vendor to a certification team. The submission may also include product IDs that indicate the products or execution platforms for which the application is intended and that the application should be tested on for certification. The submission can be a paper form that is filled out with the relevant application identifier data an electronic form that transmits the information over a network or other manual or automated process. The certification team verifies that the information is correct that it is unique i.e. data that should be unique to an application do not have the same values as data in another application and complete i.e. data is not missing . If the information is correct the certification team generates an application ID. The newly created application ID is associated with the application identifier data and platform IDs by the authentication server and stored for retrieval e.g. using a database similar to the database depicted in . Some embodiments of the invention may store hash values of the information to allow for more efficient communication when the data needs to be transmitted. The application ID is sent to the vendor to be stored on each device on which the application is deployed. In some embodiments of the invention the application ID and application name are encrypted to generate encrypted provisioning data. In several embodiments the encryption is performed using a provisioning data key that is not known to the application developer. The provisioning data key is stored on the server or other secure system so that it can be utilized to verify and or interpret provisioning data received from user devices.

Although a specific process is illustrated in any of a variety of processes for generating application IDs and embedding the application IDs into applications can be utilized in accordance with embodiments of the invention. Once the application ID is embedded within the application the application can be certified on a variety of different products on which different shared libraries may be installed. Processes for certifying that an application is compatible with a specific product and or set of shared libraries in accordance with embodiments of the invention are discussed below.

A certification process for verifying that an application is compatible with a specific product identified using a product ID in accordance with an embodiment of the invention is shown in . As noted above an application can be identified by storing an application ID within or accompanying the application. In some embodiments of the invention the application ID and application name can be contained within a provisioning data packaged to be loaded on the device. The certification process itself involves an authentication server associating the product IDs with which the application is believed to be compatible. The certification team verifies that the application ID is stored accurately and that the associated application identifier data stored on the server accurately describes the application i.e. the application s characteristics have not changed since the application ID was issued to the application developer . A variety of methods can be utilized to complete the verification. In many embodiments of the invention the application ID is not viewable or obtainable by the application or the user device as discussed above. In some embodiments the application ID is contained in encrypted provisioning data. When the application ID is not directly obtainable from the device or software it may be extracted from device initiated communications with an authentication server. A gateway placed between the device and the authentication server can extract the application ID or provisioning data before sending the provisioning data to the authentication server and request the application identifier data that is associated with the application ID from the server. The gateway can display the application identifier and or application identifier data to the certification team for verification that it is accurate for the tested application.

The certification team verifies that the application functions properly as expected and as intended on the execution platforms for which the application is to be certified. Testing of the application can include stability speed and other technical criteria that may be platform or user experience dependent. Specific technical criteria may vary and may be determined by the certification team. If the application is validated for the execution platforms then testing is complete.

If certification fails at verifying the application ID and associated data or validating the application on the intended execution platforms the associated product IDs are disassociated from the application ID on the server or never associated in the first place . Application identifier data is corrected product IDs for incompatible execution platforms are removed or any technical issues are resolved. Testing can then recommence by associating product IDs with the application IDs on the server.

Associating product IDs with an application ID provides a list of product IDs for which the application has been validated. The list can be updated with new product IDs when an application developer requests to deploy the application to additional execution platforms.

Although a specific process is illustrated in any of a variety of processes for certifying that an application is compatible with specific execution platforms can be utilized in accordance with embodiments of the invention. Although the process described with respect to mainly discusses certification in the content of execution platforms certification can also be performed with respect to specific versions of shared libraries. When an application can be certified with respect to specific shared libraries the shared libraries can also be identified using application IDs. The application IDs of the shared libraries for which the application is compatible can be associated with the application ID of the application in the database of an authentication server in a similar manner to that in which product IDs are associated with the application ID of the application.

Once an application is deployed including an embedded or associated application ID the application ID can be used to authenticate the application and to verify the compatibility of the application with a specific user device and or shared libraries found on the user device and or to verify that the application is permitted to perform specific functions on a user device. When the application is executed on a user device requests sensitive information and or attempts to perform a restricted function the user device can provide the application ID of the application and data describing the application to an authentication server to authenticate the application. In addition to authenticating the application the authentication server can verify the functions that are permitted with respect to the application the compatibility of the application with the user device and shared libraries on the user device and can determine whether the application or the shared libraries require updates.

A process for authenticating an application installed on a user device using an application ID in accordance with an embodiment of the invention is shown in . In the process a device sends provisioning data which contains at least an application ID to an authentication server. In many embodiments of the invention other applications and libraries may be involved to support the application that initiated the communication and the supporting applications and libraries may have their own provisioning data and or application IDs. The device can send the application IDs or provisioning data of the supporting applications and libraries to the server to determine compatibility with the application. In some embodiments an application version is also sent either contained within the provisioning data or separately. When the provisioning data is encrypted the server will typically have the cryptographic data associated with the application ID to decrypt the provisioning data received from the user device and extract the application ID within.

The authentication server can authenticate the application using the application ID. In many embodiments the user device provides information describing the application to the authentication server in conjunction with the application ID and the authentication server can match the description and the application ID against stored information using an authentication application. In many embodiments the description includes but is not limited to a checksum a cryptographic hash and or any other piece of information derived from one or more files that make up the application. The authentication server can also determine whether the application is permitted to execute a specific function. For example a video playback application may be limited to certain formats or certain resolutions and the server can deny requests for content that does not conform.

The server determines whether the application is the current version. As indicated above the application version can be used in a variety of ways including being contained in the provisioning data or being associated with an application ID. Thus an outdated instance of an application can be detected by extracting the version from the provisioning data or by its application ID when the version is associated with the application ID. If the application is not the current version or within a range of versions the server can force an upgrade of the application and or deny attempted functions until an upgrade is applied.

The server can determine whether supporting applications and libraries are compatible. The server may store tables or lists that describe compatibility and interoperability of client applications supporting applications and libraries. If the combination that was sent to the server does not match a combination that is listed as compatible or permitted the server can deny the application from proceeding. While the process illustrated in utilizes provisioning data containing application IDs to identify applications other methods of utilizing application IDs can be used such as taking a hash or signature of the provisioning data or application ID and sending the value to the server which has stored a predetermined value for the hash or signature in accordance with embodiments of the invention.

An application ID enables authentication of applications executing on a common application platform however the potential exists for a shared library to be compromised by way of any number of different types of attacks. In a number of embodiments user devices not only authenticate applications but also permit applications to authenticate the share libraries installed on the device. In several embodiments a session manager is compiled into the application to provide the application with the ability to authenticate shared libraries. In addition the session manager can provide an interface to request access to a shared library s entry point. The session manager can regulate access to a shared library by issuing a session token to the application after certain conditions are met. Conditions can include verifying the application s application ID and the target library s signature in the library manifest. This provides assurance that each software component is authentic and identified.

A process for authenticating and providing access to a shared library via a session manager in accordance with an embodiment of the invention is shown in . The process commences when a session manager receives a request from an application to access a target library. The session manager verifies the target library using the library manifest. As discussed above the library manifest can contain a hash signature or other information that can be used to reliably identify shared libraries on a user device. In some embodiments of the invention the manifest may be encrypted with a symmetric manifest key and signed with an asymmetric private key. The session manager can use the manifest key to decrypt the manifest and corresponding asymmetric public key to validate the signature of the manifest. The session manager can take a hash or signature of the target library and compare the value against the manifest in order to verify the library. In other embodiments any of a variety of cryptographic techniques can be utilized to secure the manifest in such a way that it can be accessed by a session manager.

In several embodiments of the invention when an application authenticates a target shared library a session manager negotiates a session token key with the target shared library and issues an encrypted session token to the client application giving the application rights to access the library. Any of a variety of methods can be used to negotiate a session token key so long as a trust relationship can be established between a session manager and target library including but not limited to public key private key encryption. A session manager can exchange information by a first handshake and second handshake with a target library preferably over a secure connection such as one established by Secure Sockets Layer SSL . In a first handshake the session manager sends a request and the library returns some data encrypted with the session manager s public key. In the second handshake the session manager sends the decrypted data or some information indicative of the data that is reencrypted with the library s public key. The library returns a confirmation if it is able to recover the data payload. The data used in the handshake or some other predetermined data can then be used by the session manager and the library to generate a shared session token key which is used to encrypt the session token. The token is returned to the client application to be used in accessing the shared library it had requested.

Although a specific process is illustrated in any of a variety of processes for providing an application with access to a shared library can be utilized in accordance with embodiments of the invention.

Although the description above contains many specific details these should not be construed as limiting the scope of the invention but as merely providing illustrations of some of the presently preferred embodiments of the invention. Various other embodiments are possible within its scope. Accordingly the scope of the invention should be determined not by the embodiments illustrated but by the appended claims and their equivalents.

