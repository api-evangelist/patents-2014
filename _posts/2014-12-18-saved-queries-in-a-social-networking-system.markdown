---

title: Saved queries in a social networking system
abstract: A user saves a structured query defining connections between two or more objects maintained by a social networking system. The social networking system finds objects matching the structured query, either by periodically performing searches for new objects or by analyzing objects as they are added or modified. The user creating the saved query can subsequently view the matching objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09177016&OS=09177016&RS=09177016
owner: Facebook, Inc.
number: 09177016
owner_city: Menlo Park
owner_country: US
publication_date: 20141218
---
This application is a division of co pending U.S. application Ser. No. 13 729 954 filed Dec. 28 2012 which is incorporated by reference in its entirety.

This invention relates generally to searching for objects in a social networking system and more particularly to maintaining a structured search query.

Social networking systems allow users to interact with each other by creating user profiles forming connections to other users posting content items and sharing content items. The number of user profiles content items and connections increases as the social networking system gains users and increases in popularity. Accordingly users who are active on the social networking system can view a large number of user profiles and content items.

Using an especially active social networking system may result in a large volume of content items user profiles and other activity being presented to a user which may overwhelm the user with information. Hence the user may be flooded with content that the user does not find interesting or relevant making it difficult for the user to identify content of interest. While some social networking systems allow a user to search for a specific item or for items matching a keyword they do not allow the user to perform a structured search for content items or user profiles based on their connections to other content items or user profiles.

A social networking system allows a user to save a structured query defining connections between two or more objects maintained by the social networking system. After saving the structured query the social networking system finds objects matching the structured query and maintains a list of the matching objects. In one embodiment an identifier for the query is stored in a reverse index based on the properties of the objects defined in the structured query. When the social networking system receives a new action the saved query module extracts objects from the action and uses the reverse index to determine whether the extracted objects match a saved query. If an object matches a saved query a link to the object is added to a list of matching objects for the saved query and the user creating the query may view the matching object. In another embodiment the social networking system periodically performs a search for objects matching the structured query and updates the list of matching objects to include any new objects that are found.

In some embodiments a user creates the saved query by providing a search phrase defining a connection between two objects to the social networking system. The search phrase is parsed to generate a structured query comprising search objects representing the objects in the search phrase. The structured query is then saved in association with the user.

The reverse index may have a tree structure organizing query identifiers based on properties of the search objects in the corresponding structured queries. The tree structure allows identification of queries matching a given object by traversing the tree structure according to information in the given object and in objects connected to the given object.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

The client devices comprise one or more computing devices capable of receiving user input as well as transmitting and or receiving data via the network . In one embodiment a client device is a conventional computer system such as a desktop or laptop computer. In another embodiment a client device may be a device having computer functionality such as a personal digital assistant PDA mobile telephone smart phone or similar device. A client device is configured to communicate via the network . In one embodiment a client device executes an application allowing a user of the client device to interact with the social networking system . For example a client device executes a browser application to enable interaction between the client device and the social networking system via the network . In another embodiment a client device interacts with the social networking system through an application programming interface API that runs on the native operating system of the client device such as IOS or ANDROID .

A social networking system user may use several different client devices to interact with the social networking system . For example a user may use a desktop computer to interact with the social networking system at home and a smart phone to interact with the social networking system while traveling. In addition multiple users may use the same client device to interact with the social networking system .

The client devices are configured to communicate via the network which may comprise any combination of local area and or wide area networks using both wired and wireless communication systems. In one embodiment the network uses standard communications technologies and or protocols. Thus the network may include communication links using technologies such as Ethernet 802.11 worldwide interoperability for microwave access WiMAX 3G 4G CDMA digital subscriber line DSL etc. Similarly the networking protocols used on the network may include multiprotocol label switching MPLS transmission control protocol Internet protocol TCP IP User Datagram Protocol UDP hypertext transport protocol HTTP simple mail transfer protocol SMTP and file transfer protocol FTP . Data exchanged over the network may be represented using technologies and or formats including hypertext markup language HTML or extensible markup language XML . In addition all or some of the communication links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS and Internet Protocol security IPsec . The third party server may be coupled to the network for communicating with the social networking system which is further described below in conjunction with .

Each user of the social networking system is associated with a user profile which is stored in the user profile store . A user profile includes declarative information about the user that was explicitly provided by the user and may also include information inferred by the social networking system . In one embodiment a user profile includes multiple data fields with each data field describing one or more attributes of the corresponding user of the social networking system . Examples of information stored in a user profile includes biographic demographic and other types of descriptive information such as work experience educational history gender hobbies or preferences location and the like. A user profile may also store other information provided by the user for example images or videos. In certain embodiments images of users may be tagged with identification information of users of the social networking system displayed in an image. A user profile in the user profile store may also maintain references to actions by the corresponding user performed on content items in the content store and stored in the action log and references to connections to other users maintained by the edge store .

While user profiles in the user profile store are frequently associated with individuals allowing people to interact with each other via the social networking system user profiles may also be stored for entities such as businesses or organizations. This allows an entity to establish a presence on the social networking system for connecting and exchanging content with other social networking system users. The entity may post information about itself about its products or provide other information to users of the social networking system using a brand page associated with the entity s user profile. Other users of the social networking system may connect to the brand page to receive information posted to the brand page or to receive information from the brand page. A user profile associated with the brand page may include information about the entity itself providing users with background or informational data about the entity associated with the brand page.

A user profile may also store a user profile list that defines a list of other user profiles. The user profile list can be created and updated by the user or automatically created and updated by the social networking system . For example a user creates and updates a list of user profiles belonging to the user s close friends family members or co workers. In another example the social networking system automatically creates and updates a list of users that attended the same university as the user. A user profile list may be used to identify content items associated with users on the user profile list for presentation to the user allowing the user to more easily interact with the users on the user profile list.

The content store stores objects representing various types of content. Examples of content represented by an object include a page post a status update a photo a video a link a shared content item a gaming application achievement a check in event at a local business a brand page or any other type of content. Objects may be created by users of the social networking system such as status updates photos events groups or applications. In some embodiments objects are received from third party applications which may be separate from the social networking system . Content items represent single pieces of content that are presented to social networking system users. Presenting content items to users increases user interaction with the social networking system by encouraging users to post content items for presentation increasing the interaction of users with each other and increasing the frequency with which users interact within the social networking system . In addition to the content item a content object in the content store may also include information about the content item. The information may include for example a geographic location where the content item was created or a timestamp for the content item.

The edge store stores information describing connections between user profiles and other objects on the social networking system as edges. Some edges may be defined by users allowing users to specify their relationships with other users by generating edges between their user profiles with the user profiles of the other users. For example users may generate edges with other user profiles that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in the social networking system such as expressing interest in a page on the social networking system becoming a member of a group sharing a link with other users of the social networking system and commenting on posts made by other users of the social networking system .

The edge store stores information describing connections between user profiles and other objects on the social networking system as edges. Some edges may be defined by users allowing users to specify their relationships with other users by generating edges between their user profiles with the user profiles of the other users. For example users may generate edges with other user profiles that parallel the users real life relationships such as friends co workers partners and so forth. Other edges are generated when users interact with objects in the social networking system such as expressing interest in a page on the social networking system becoming a member of a group sharing a link with other users of the social networking system and commenting on posts made by other users of the social networking system .

The edge store includes information describing an edge such as affinity values for objects groups interests and other user profiles. Affinity values may be computed by the social networking system over time to approximate a user s affinity for an object group interest and other user profiles in the social networking system based on the actions performed by the user. Computation of affinity is further described in U.S. patent application Ser. No. 12 978 265 filed on Dec. 23 2010 which is hereby incorporated by reference in its entirety. In one embodiment multiple interactions between a user and a specific object may be stored as a single edge in the edge store alternatively each interaction is stored as a separate edge. In some embodiments connections between user profiles may be stored in the user profile store or the user profile store may access the edge store to determine connections between user profiles.

The action logger receives communications about user actions on and or off the social networking system and populates the action log with information describing these actions. Examples of actions include adding a connection to another user sending a message to another user uploading an image reading a message from another user viewing content associated with another user attending an event posted by another user among others.

The social networking system uses the action log to track user actions on the social networking system as well as on external websites that communicate information to the social networking system . Users may interact with various objects on the social networking system including commenting on posts sharing links and checking in to physical locations via a mobile device accessing content items or other interactions. Information describing these actions is stored in the action log . Additional examples of interactions with objects on the social networking system included in the action log include commenting on a photo album communications between users becoming a fan of a musician adding an event to a calendar joining a group becoming a fan of a brand page creating an event authorizing an application using an application and engaging in a transaction. Additionally the action log records a user s interactions with advertisements on the social networking system as well as other applications operating on the social networking system . In some embodiments each entry in the action log also includes an identifier for the client device that was used to perform the action. In some embodiments data from the action log is used to infer interests or preferences of the user augmenting the interests included in the user profile and allowing a more complete understanding of user preferences.

The action log may also store user actions taken on external websites. For example an e commerce website that primarily sells sporting equipment at bargain prices may recognize a user of a social networking system through social plug ins that enable the e commerce website to identify the user of the social networking system . Because users of the social networking system are uniquely identifiable third party servers such as this sporting equipment retailer may use the information about social networking system users accessing content from a third party server . The action log records data about these users including webpage viewing histories advertisements that were engaged purchases made and other patterns from shopping and buying.

Data maintained by the user profile store the content store the edge store and the action log are collectively referred to as a social graph. At a high level the user profiles groups and content items form nodes in the social graph and edges connect the nodes. Edges between nodes may be based on connections described in the edge store or actions stored in the action log . In some embodiments the social graph includes additional types of nodes and edges that are not explicitly described above with reference to the user profile store the content store the edge store and the action log .

The web server links the social networking system via the network to the one or more client devices as well as to the one or more third party servers . The web server serves web pages as well as other web related content such as JAVA FLASH XML and so forth. The web server may receive and route messages between the social networking system and client devices for example instant messages queued messages e.g. email text and SMS short message service messages or messages sent using any other suitable messaging technique. A user may send a request to the web server to upload information for example profile information to be stored in the user profile store images or videos to be stored in the content store or requests to generate new edges to connect with user profiles groups or content items. Additionally the web server may provide API functionality to send data directly to native client device operating systems such as IOS ANDROID WEBOS or RIM.

The advertisement server presents advertisements to users through the social networking system for example as stories in a user s newsfeed. The advertisement server may additionally or alternatively send advertisements for display to users through external applications authorized to access to a user s identification on the social networking system . For example a user may log in to the social networking system through a native application on a smart phone. The native application may request advertisements from the social networking system and the advertisement server identifies and delivers advertisements to the native application. In some embodiments the advertisement server delivers targeted advertisements by comparing information associated with a user from one or more of the user profile store the content store the edge store and the action log to targeting criteria associated with advertisements. If the information associated with the user satisfies one or more targeting criteria associated with an advertisement the user is eligible to be presented the advertisement. Examples of information associated with a user compared to targeting criteria include information in the user s profile affinities between the user and other users or objects and content items with which the user previously interacted. In these embodiments the advertisement server may also perform targeting based on a user s saved queries as described below with reference to .

The saved query module maintains saved queries and a list of objects matching each saved query. For example if the user performs a search for Harvey Mudd students who like Taylor Swift the saved query module creates and maintains a list of user profiles including information identifying users as students of Harvey Mudd College that are connected to a brand page associated with Taylor Swift. Operation of the saved query module is described in detail below with reference to .

In one embodiment the saved query module creates the list of objects matching a saved query by storing an identifier for the saved query in a reverse index. In this embodiment the saved query module extracts objects from actions received by the action logger and checks the reverse index to determine whether an object extracted from the action matches an existing saved query. For example if a new action recorded by the action logger creates a connection between the brand page associated with Taylor Swift and a new Harvey Mudd student the structured query module adds the profile of the new Harvey Mudd student to the list of objects matching the previously described saved query and notifies the user providing the saved query that a new result has been found. Thus this embodiment allows a user to automatically receive a notification when an object matches the saved query. Operation of this embodiment of the saved query module is described in detail below with reference to .

In another embodiment the saved query module creates the list of objects by performing a direct search the social graph e.g. by checking an index of the social graph to find objects matching the saved query. In this embodiment the saved query module may update the list of objects matching a saved query by performing the direct search at regular time intervals. Operation of this embodiment is described in detail below with reference to .

The query management module receives a search phrase from the user e.g. via the web server and creates a new saved query . A block diagram of an example saved query is shown in and for ease of description the components of the saved query are described below in conjunction with the description of the structured query module .

After creating a saved query the query management module generates a unique identifier for the saved query and adds a user profile identifier to the saved query . The user profile identifier identifies the profile of the user from which the search phrase was received. In one embodiment the query management module also stores the search phrase in the saved query .

The structured query generator receives a search phrase from the query management module and generates a structured query by parsing the search phrase. As used herein a search phrase is a string of text usable to find objects stored by the social networking system subject to a set of constraints on information stored in the objects and on additional objects or users connected to the objects. A structured query is a data structure that stores the information and connections identified in the search phrase. For example the structured query generator receives the search phrase Harvey Mudd students who like Taylor Swift as described in the example above. From this search phrase the structured query generator creates a structured query for finding user profile objects including information identifying a student of Harvey Mudd College and connected to the brand page associated with Taylor Swift. Additional examples of search phrases and corresponding structured queries are described below with reference to . A generated structured query is stored by the structured query generator as part of the saved query .

The query indexing module adds the identifier of a received saved query to the reverse index . The reverse index is a data structure allowing a module e.g. the search module to find identifiers of saved queries matching a given object maintained by the social networking system . An example data structure for implementing the reverse index is described below with reference to .

The object extraction module and the search module operate together to determine whether a received action causes an object maintained by the social networking system to match a saved query . The object extraction module receives an action from the action logger or from the action log and extracts objects related to the action. For example if the action is a user profile forming a connection to a brand page for a restaurant e.g. by becoming a fan of the restaurant the object extraction module extracts the user profile and the brand page for the restaurant from the action. The object extraction module may pass some or all of the extracted objects to the search module .

The search module receives an object extracted from an action by the object extraction module and determines whether the received object matches a saved query in the reverse index . If the search module determines that the received object matches a saved query the search module modifies the matching objects of the saved query to include a reference to the received object and increments the notification count by one to indicate an additional object matching the saved query has been found. In an embodiment where the reverse index has the tree structure shown in the search module may traverse the tree comprising the reverse index based on the received object s information and connection to other objects. A process for traversing a tree data structure is described in detail with reference to .

Continuing with the previous example the search module receives a user profile for a student at Harvey Mudd College named Michael Loy from the object extraction module because a new connection was recently formed between Michael Loy s user profile and the brand page associated with Taylor Swift. After receiving this user profile the search module accesses the reverse index and finds the identifier for the saved query described above. When the query identifier is found the search module adds a link to Michael Loy s user profile to the matching objects of the saved query corresponding to the query identifier and increments the notification count . Accordingly the user that created the saved query receives a notification that a new Harvey Mudd student likes Taylor Swift. The user creating the saved query may access the saved query to see that the new student is Michael Loy from the use profile included in the matching objects of the saved query .

The query display module retrieves the objects matching a saved query and displays the matching objects. In one embodiment the query display module displays the objects in chronological order according to the order in which the objects were added to the list of matching objects of the saved query . For example if a first matching object is added to the list of matching objects at a later time than a second matching object the first matching object may be displayed above the second matching object. In another embodiment the query display module orders the matching objects based on a likelihood of user interaction with the matching objects so objects with which a user is more likely to interact are displayed in a more prominent position. In the preceding example if more comments are associated with the second matching object the query display module may display the second matching object above the first matching object. In some embodiments the query display module also decreases the notification count for a saved query after detecting that the user has viewed one or more previously unviewed matching objects.

The social graph search module receives a structured query from one of the saved queries and periodically performs a search on the social graph to find new objects matching the structured query . In one embodiment the social graph search module maintains an index of objects in the social graph and performs the search by checking the index. In another embodiment the module checks a universal index that is also used to perform searches for other components of the social networking system . After finding the objects the module updates the matching objects of the saved query to include references to objects that were not found in a previous search. The module also increments the notification count by the number of objects found to indicate that additional objects matching the saved query has been found.

In one embodiment the social graph search module performs the search and update process for a saved query at a fixed time interval e.g. every 60 minutes . In another embodiment the module performs the search at variable time intervals by analyzing results obtained during previous searches. For example the module initially performs the search and update process for a saved query at fixed 60 minute intervals. However searches performed between 6 PM and 8 PM consistently yield more results than searches performed between 12 AM and 4 AM so the module performs the search and update process at a shorter time interval between 6 PM and 8 PM e.g. every 15 minutes and performs the process at a longer time interval between 12 AM and 4 AM e.g. every 2 hours .

In the example shown in the search phrase A is Facebook employees who like Barack Obama which identifies user profiles of individuals who are employed by Facebook and are connected to a brand page for Barack Obama. Thus the structured query A for the search phrase A includes a single focal search object A and a single connected search object A. The object type for the focal search object A is an individual user profile and the focal search object A includes an attribute indicating that the user profile belongs to a Facebook employee. The connected search object A is the brand page for Barack Obama.

A user profile object in the social graph matches the structured query A shown in if the user profile includes information indicating that the user is a Facebook employee and if the user profile is also connected to the brand page for Barack Obama. Such a user profile matches the structured query A even if the profile includes additional information and or additional connections to objects. For example a user profile indicating a user is a Facebook employee and connected to the brand page for Barack Obama matches the structured query A even if the user profile also indicates the user is 112 years old and lives in Pyongyang North Korea or if the user profile is also connected to a brand page for Mitt Romney.

In the example shown in the search phrase B is Pictures of Facebook employees with Stanford students in Alaska. In the corresponding structured query B the focal search object B is a picture with the attribute Alaska. The structured query B also includes two connected search objects B C for user profiles identifying a Facebook employee and identifying a Stanford student respectively. Thus a picture maintained by the social networking system matches the structured query B if the picture includes information indicating that it was taken in Alaska and is tagged with a user profile identifying a Facebook employee and a user profile identifying a Stanford student. The picture matches the structured query B even if it includes additional information e.g. a timestamp or additional connections e.g. additional tagged user profiles .

In the example shown in the search phrase C is Check ins at Jane s Beer Store. The focal search object C for the corresponding structured query C is a check in event without any attributes. The structured query C also includes a connected search object D for a brand page associated with Jane s Beer Store. Thus a check in event that is connected to the brand page associated with Jane s Beer Store matches the structured query C even if the check in event also includes additional information e.g. a geographic location where the check in event occurred or additional connections e.g. a connection to a user profile for the user who performed the check in event .

The first layer of the reverse index organizes queries according to the object type of the focal search object. In the embodiment of the first layer includes separate top level branches for user profiles and content objects which are the two primary categories of object types. These top level branches are divided into smaller branches for each type of user profile and each type of content object. For example the branch for user profiles includes smaller branches for individual user profiles and brand page user profiles . Although only five types of focal search objects are shown in the embodiment of the first layer may include additional focal search object types in other embodiments. For example the branch for content items may include additional branches for videos links and gaming application achievements in addition to the branches for pictures status updates and check in events . In another embodiment the top level branches for user profiles and content objects are omitted and the five object types are separate top level branches. This configuration reduces the complexity of the reverse index but may increase the time to traverse the tree.

The second layer of the reverse index organizes queries according to the attributes of the focal search object. Hence the second layer includes separate branches for different attributes. For example the structured query A shown in and having query identifier SQ1 is saved in the reverse index under the branches for employee and Facebook because the focal search object A in the structured query A has the attribute Facebook employee. In other embodiments each attribute is represented as a single level instead of a hierarchy of two levels. For example the attribute Facebook employee may be represented as a single node. If the focal search object for a structured query does not include any attributes the path from the root to the corresponding query identifier does not include any nodes in the second layer . For example the path from the root to the identifier SQ3 for the structured query C shown in does not pass through any nodes in the second layer .

The third layer of the reverse index organizes queries according to the object type of the connected search object. The hierarchy of the third layer is similar to the hierarchy of the first layer . Thus the third layer may also include separate branches for the two main categories of object types shown in the embodiment of or the third layer may include separate branches for each object type without an initial separation into the two categories.

The fourth layer of the reverse index organizes queries according to attributes of the connected search object. The fourth layer includes branches organized in a manner similar to those in the second portion . Thus a detailed description of the branches in the fourth portion is omitted for the sake of brevity.

Identifiers for saved queries are stored at the bottom of the tree so that the path of nodes extending from the root node to a query identifier at the bottom includes nodes at one or more layers identifying the object types of the focal search object and at least one connected search object in the structured query corresponding to the query identifier. The path also includes nodes describing attributes of the focal search object and of the connected search object. Thus if the search module traverses the tree using data associated with a received object e.g. according to the process described below and reaches a query identifier the saved query corresponding to the reached query identifier matches the received object.

If a structured query includes multiple connected search objects e.g. the structured query B shown in the corresponding query identifier is stored in multiple positions at the bottom of the tree . Hence a path of nodes through the tree describes each connected search object. For example the identifier SQ2 for the query shown in is stored in two positions . The path of nodes leading to the first position describes the connected search object C while the path of nodes leading to the second position describes the connected search object B. When a query identifier is stored in multiple positions the corresponding saved query matches a received object if the search reaches each of the multiple identifiers when traversing the reverse index . A process for traversing the list to find a query identifier in multiple positions is described in further detail below.

For the sake of brevity some portions of the tree are omitted from . The tree is likely to include many more branches when implemented on a large scale with many search queries. For example the tree may also include branches below the nodes for brand pages or status updates for storing identifiers of search queries in which the focal search object is a brand page or a status update.

In one embodiment when the search module receives an object the search module traverses the tree to find query identifiers matching the received object. For ease of explanation a process for traversing the tree will be described with reference to the example object shown in . The example object is a picture taken in Barrow Ak. at 11 34 AM on Nov. 15 2012. Three user profiles are tagged in the picture and each user profile includes information about the corresponding individual or organization.

The search module initially traverses the first layer of the tree according to the object type of the received object . In this example the received object is a picture so the search module traverses the tree to the content node and then to the picture node . The search module traverses the second layer of the tree by matching information in the received object to the attributes in the next level of nodes. In the example shown in the picture object includes information indicating a location where the picture was taken i.e. Barrow Ak. and a timestamp indicating a date and time when the picture was taken. As the only matching attribute in the next layer of the tree is the node for Alaska the search module traverses the tree to the Alaska node . If the tree also included nodes for attributes matching the timestamp the search module would also access those nodes based on the timestamp of the received object . For example if the next level included a node with the attribute November 2012 e.g. because a user created a saved query for Pictures taken in November 2012 the search module would also access this node.

The search module then traverses the third layer and the fourth layer of the tree based on the types of the objects connected to the received object and the information in the objects connected to the received objects. Because the received object is connected to three user profiles the search module iterates through the three profiles and accesses the nodes in the third layer and fourth layer corresponding to each profile . The first profile belongs to an individual named Ken Deeter and includes information indicating that Ken is a Facebook employee living in Menlo Park. Thus the search module accesses the nodes for user profiles individuals employees and Facebook employees to arrive at an identifier SQ2 for the saved query shown in . The second profile belongs to an individual named Robyn Morris and indicates Robyn is a Stanford student living in Palo Alto. Thus the search module accesses accesses the nodes for user profiles individuals students and Stanford students to arrive at another identifier SQ2 for the same saved query. Because the search module arrives at both identifiers in the tree for the saved query shown in the search module determines the received object matches this saved query and adds a link to the received object to the matching objects of the saved query. The search module also increments the notification counter of the saved query to indicate an additional object matching the query has been identified.

The third profile is a brand page belonging to a tour company called Arctic Adventures and includes information indicating that the tour company is based in Barrow Ak. Thus the search module accesses the nodes for user profiles brand pages tour companies not shown and Barrow Ak. not shown . In the example tree shown in no query identifiers are shown at the end of this path of nodes. However if the search module arrived at another query identifier e.g. because a user created a saved query for Pictures posted by tour companies in Barrow a link to the received object would also be added to the corresponding saved query.

The structured query generator receives the search phrase and generates a structured query based on the search phrase. For example the structured query generator retrieves the search phrase from the saved query or receives the search phrase directly from the web server or the query management module . In one embodiment the structured query generator generates the structured query by parsing the text in the search phrase to extract a focal search object and at least one connected search object as described with reference to . The structured query generator may also store the structured query as part of the saved query .

The query indexing module adds the query identifier to the reverse index . As described with reference to the reverse index may have a tree structure organizing query identifiers based on the corresponding structured queries. If the reverse index does not include nodes corresponding to the object types and attributes of the focal search object and connected search object in the structured query the query indexing module adds the missing nodes so the reverse index includes an appropriate position for the query identifier .

In the embodiment shown by the saved query module finds existing objects maintained by the social networking system matching the saved query. This allows the user to view objects matching the saved query without waiting for other users to perform actions causing objects to match the saved query. In one embodiment the object extraction module and the search module iterate through recent actions in the action log and determine whether recent actions cause an object to match the saved query. In another embodiment the search module iterates through objects associated with the user or with other users connected to the user to determine whether objects match the saved query. If matching objects are found the search module adds links to the matching objects in the matching objects of the saved query. The search module may also adjust the notification count of the saved query to reflect the number of matching objects that were found.

If objects matching the saved query are found the query display module may display the matching objects to the user to view the results of the saved query. As described above with reference to the query display module the matching objects may be displayed in chronological order displayed according the likelihood of the user having an interest in the matching objects or displayed in some other order. The query display module may also decrease or reset the notification count after the user views the matching objects.

The search module receives each extracted object and checks the reverse index to determine whether the object matches a saved query. In one embodiment the reverse index has a tree structure and the search module traverses the tree as described above in conjunction with to identify saved queries matching the object. If the search module determines that the object matches one or more saved queries the search module updates the saved queries matching the object to include a link to the object. The search module may also increment the notification count of the saved queries to indicate that an additional object has been found. Thus the users creating the saved queries which are identified by the user profile identifier in each saved query may receive a notification when an additional object matching the saved query is detected. The users may subsequently use the query display module to view the additional matching object.

The social graph search module performs a search on the social graph to find objects matching the structured query . As described above with reference to an object matches a structured query in its entirety if the object matches the focal search object and is also connected to objects matching the connected search objects . After finding the objects the social graph search module updates the matching objects portion of the saved query to include links to the objects that were found. The module may also increment the notification count to reflect the number of links that were added to the matching objects . After the matching objects portion is updated the query display module may send the objects for presentation to the user.

After a time interval the social graph search module performs a second search on the social graph to find a second set of objects matching the structured query . Since objects may be modified or added to the social graph during the time interval the second search may yield additional objects matching the structured query that were not found during the first search. The social graph search module updates the matching objects portion of the saved query to include links to these additional matching objects. In addition the social graph search module may increment the notification count and the query display module may send the additional objects for presentation to the user.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory tangible computer readable storage medium or any type of media suitable for storing electronic instructions which may be coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

