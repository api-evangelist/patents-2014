---

title: System, method, and computer program for validating web service interface design
abstract: A system, method, and computer program product are provided for validating web service interface design. In use, an object-oriented information model including JAVA® code associated with JAVA® programming language to be converted to a document-oriented model described in Extensible Markup Language (XML) is identified. Further, one or more objects associated with the object-oriented information model that are associated with a plurality of instances are automatically identified. In addition, for each of the one or more objects associated with the plurality of instances, either: the one or more objects are stored in a location other than the object-oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object-oriented information model; the plurality of objects are indicated as being safe, thus signifying the plurality of objects are not significant; or the plurality of objects are indicated as being contained by a corresponding owning object, thus indicating that there can be no duplication of these objects. In response, the object-oriented information model is annotated as being optimized. Still yet, the object-oriented information model is automatically validated based, at least in part, on the object-oriented information model being annotated as optimized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436440&OS=09436440&RS=09436440
owner: Amdocs Software Systems Limited
number: 09436440
owner_city: Dublin
owner_country: IE
publication_date: 20140224
---
This application claims the benefit of U.S. Provisional Application No. 61 807 350 filed Apr. 2 2013 the entire contents of which are incorporated herein by reference.

The present invention relates to web service interface design and more particularly to validating at design time that messages transferred by the web service are well formed.

Extensible Markup Language XML Web services based on Simple Object Access Protocol SOAP are the ubiquitous mechanism for integrating heterogeneous enterprise IT applications defined by Web Services Description Language WSDL files and supporting XML Schema Definition XSD files. The interfaces are commonly designed using the JAVA programming language and the WSDL XSD is generated using JAVA technologies such as JAVA beans JAVA Architecture for XML Binding JAXB and JAVA API for XML Web Services JAX WS .

Using this approach a problem arises when the object oriented information model described in JAVA is converted to the document oriented model expressed by XML. In particular if there are multiple references to the same object an associated message will be bloated with duplicated data as the references are expressed as nested XML elements. Although JAVA has some primitive mechanisms to remedy this problem there is no ability to prevent this from happening at design time.

A system method and computer program product are provided for validating web service interface design. In use an object oriented information model including JAVA code associated with JAVA programming language to be converted to a document oriented model described in Extensible Markup Language XML is identified. Further one or more objects associated with the object oriented information model that are associated with a plurality of instances are automatically identified. In addition for each of the one or more objects associated with the plurality of instances either the one or more objects are stored in a location other than the object oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object oriented information model the plurality of objects are indicated as being safe thus signifying the plurality of objects are not significant or the plurality of objects are indicated as being contained by a corresponding owning object thus indicating that there can be no duplication of these objects. In response the object oriented information model is annotated as being optimized. Still yet the object oriented information model is automatically validated based at least in part on the object oriented information model being annotated as optimized.

Coupled to the network is a plurality of devices. For example a server computer and an end user computer may be coupled to the network for communication purposes. Such end user computer may include a desktop computer lap top computer and or any other type of logic. Still yet various other devices may be coupled to the network including a personal digital assistant PDA device a mobile phone device a television etc.

As shown a system is provided including at least one central processor which is connected to a communication bus . The system also includes main memory e.g. random access memory RAM etc. . The system also includes a graphics processor and a display .

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive etc. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory the secondary storage and or any other memory for that matter. Such computer programs when executed enable the system to perform various functions to be set forth below for example . Memory storage and or any other storage are possible examples of tangible computer readable media.

As shown an object oriented information model including JAVA code associated with JAVA programming language to be converted to a document oriented model described in Extensible Markup Language XML is identified. See operation . The object oriented information model may include any code message and or model etc. For example in one embodiment the object oriented information model may be associated with a web service interface a web service object an application programming interface API and or various other object oriented information models. In one embodiment the object oriented information model including JAVA code associated with JAVA programming language may be converted to the document oriented model described in XML at runtime.

As shown further in one or more objects associated with the object oriented information model that are associated with a plurality of instances are automatically identified. See operation . For example in one embodiment identifying the one or more objects associated with the object oriented information model that are associated with the plurality of instances may include identifying objects in the JAVA code that are referenced more than once. Further in one embodiment identifying the one or more objects associated with the object oriented information model that are associated with the plurality of instances may include identifying objects in the JAVA code that include more than one object definition.

In addition for each of the one or more objects associated with the plurality of instances either the one or more objects are stored in a location other than the object oriented information model and each of the plurality of instances of the one or more objects are replaced with a reference to the one or more objects in the location other than the object oriented information model the plurality of objects are indicated as being safe thus signifying the plurality of objects are not significant or the plurality of objects are indicated as being contained by a corresponding owning object thus indicating that there can be no duplication of these objects. See operation .

In one embodiment storing the one or more objects in the location other than the object oriented information model may include storing the one or more objects in a defined data container that is outside of the object oriented information model. In one embodiment the defined container may include a data structure capable of storing the one or more objects. The location may include any location in memory e.g. internal and or external etc. .

Additionally in one embodiment replacing each of the plurality of instances of the one or more objects with the reference to the one or more objects in the location other than the object oriented information model may include replacing each of the plurality of instances of the one or more objects with a reference to the defined container that is outside of the object oriented information model. As an option the reference to the defined container that is outside of the object oriented information model may include an identification associated with the one or more objects. The identification may include any type of identifier associated with the object such as a name and or number etc.

In various embodiments the reference may include any type of information and or be associated with various information. Further in one embodiment the reference may include a character string. In another embodiment the reference may include a pointer. In another embodiment the reference may include a number. Of course in various embodiments the reference may come in a variety of forms.

The object oriented information model is annotated as being optimized in response to performing one of the storing and the replacing the indicating the one or more objects as safe or the indicating the one or more objects as being contained by the corresponding owning object. See operation . The annotation may include any form.

For example the annotation may include a log indicating the references to duplicate objects were removed. In another embodiment the reference inserted may serve as the annotation thereby indicating duplicate objects were replaced. For example in one embodiment the presence of a reference in the object oriented information model may serve as the annotation. In another embodiment a flag may be used to annotate the object oriented information model as being optimized.

In another embodiment a notification may be sent to a user indicating the object oriented information model is optimized e.g. and thereby serving as the annotation etc. . In another embodiment the annotation may include a descriptor or character string that becomes part of the object oriented information model or a message associated therewith. Of course in various embodiments the object oriented information model may be annotated as being optimized in a variety of ways.

As shown further in the object oriented information model is automatically validated based at least in part on the object oriented information model being annotated as optimized. See operation . In various embodiments the automatic validation may include various other validation steps.

For example in one embodiment automatically validating the optimized object oriented information model may further include verifying the reference to the one or more objects in the location other than the object oriented information model is of the type java.util.List. As another example automatically validating the optimized object oriented information model may further include verifying the reference to the one or more objects in the location other than the object oriented information model is associated with at least one object identifier. In either case in one embodiment the method may further include converting at least a portion of the object oriented information model including the JAVA code to the document oriented model described in XML as a result of the automatic validation.

Still yet in one embodiment the method may include reporting that there are one or more objects associated with the plurality of instances in the object oriented information model. As an example reporting that there are one or more objects associated with the plurality of instances in the object oriented information model may include displaying an message utilizing a user interface. Further in one embodiment the method may further include indicating the object oriented information model is safe to use based on the automatic validation. As an example the indication may be presented in the form of a message to a user utilizing a user interface.

The objects associated with the object oriented information model may include any type of object. As one example the one or more objects associated with the object oriented information model may include one or more product definitions. In this case identifying the one or more objects associated with the object oriented information model that are associated with the plurality of instances may include identifying that a first one of the one or more product definitions are present more than once in the object oriented information model.

Further in this example storing the one or more objects in the location other than the object oriented information model may include storing the first one of the one or more product definitions outside of the object oriented information model. In this case replacing each of the plurality of instances of the one or more objects with the reference to the one or more objects in the location other than the object oriented information model may include replacing each instance of the first one of the one or more product definitions present in the object oriented information model with a reference to a location where the first one of the one or more product definitions are stored outside of the object oriented information model. As an option the reference to the location where the first one of the one or more product definitions are stored outside of the object oriented information model may further include an identifier associated with the first one of the one or more product definitions.

Of course product definitions are only one example of the objects in accordance with one embodiment. In various embodiments the objects may include any number of items and or descriptors. For example in one embodiment the one or more objects associated with the object oriented information model may include one or more objects associated with fixed definitions.

More illustrative information will now be set forth regarding various optional architectures and uses in which the foregoing method may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

As shown in the context of service interface design message types are created and or edited utilizing JAVA code. See operation . Further one or more interfaces are created. See operation .

Additionally a validation tool is run to validate the interface and associated information. See operation . Further Web Services Description Language WSDL files and supporting XML Schema Definition XSD files are then generated from the interface created and associated information. See operation .

In one embodiment the validation tool may function to report potential duplicate references within a service operation message and require the designer to restructure the message or indicate that the references are safe to use. In another embodiment the validation tool may function to optimize and automatically validate the object oriented information model.

For example in one embodiment a system associated with the flow diagram may function to implement a method by which a set of annotations are added to JAVA code where the annotations describe the web service interface. Further the system may include a validation tool that validates the structure of the message. In this case the request and return message types may be defined explicitly.

The types operationNameResponse and operationName are known as message assembly types and maybe analyzed and validated utilizing the techniques described herein.

As an example an application may manage products customers and the particular products those customers have purchased and own which are referred to as product instances. The product definitions may store fixed information such as for example a picture of the product the make model description dimensions and color etc. Further the product instance may store the customer specific information such as for example date purchased serial number if applicable etc. The information model would naturally define a product instance with an association to the customer who owns it and the product definition of which it is an instance.

Consider a service operation that retrieves customers their product instances and the definitions. If the operation is naively defined to return a list of customers the XML document returned may be structured as shown in . shows a data structure illustrating how duplicate data may be structured in an XML document returned by a web service operation that is naively defined.

If the operation returns 100 customers who purchased the same product the corresponding product definition will be repeated 100 times in the XML document. This may result in many megabytes of duplicated data. The message may therefore be constructed with a separate container for the product definitions that is outside the customer model and referenced from within the customer model as shown in .

As shown the data structure includes a parameter . The parameter refers to a shared reference container. In one embodiment this may be added to the message to avoid duplication of referenced data due to the document structure of XML. In one embodiment the consumer of the operation may find the product definition details of product instances that customers own by matching an embedded identifier ProductDefinitionId.id in the customer structure and an identifier ProductDefinition.id in the shared reference.

In one embodiment to design this data structure a designer may follows the flow illustrated in to generate the Java code illustrated in .

In one embodiment to design this data structure a designer may follows the flow illustrated in to generate the JAVA code illustrated in .

In the context of the annotation type Containment indicates that an associated entity is contained by its parent entity meaning that instances of the contained entity are unique for each parent instance. The relationship to the contained may be one to many but may also be one to one. For example 

The opposite of containment is reference in which instances of the associated entity may be referenced by many different instances of the parent entity. Associations annotated with Containment do not necessary need to implement SafeReference within message assembly.

The annotation type ID indicates that a type is an identifier meaning that it is a special qualification that defines only attributes necessary to identify an instance of the type. ID types are used to reference other types typically for message assembly . For example 

In the context of the annotation type MessageAssembly indicates a message assembly type. These types may define the schema of the input output and fault messages of a web service operation and may be subject to validation to ensure that the messages do not contain duplicated data as a result of transforming the object oriented model of the service implementation to the document oriented model of the XML message. Message assembly types may be annotated with XmlRootElement.

Associations within the types referenced by a message assembly type either directly or indirectly may conform to a variety of forms. For example the association may be annotated with Containment meaning that the associated instances are unique. As another example the target type of the association may be annotated with ID meaning that the instances it references are identified by their ID only. In case other attributes of the referenced entity are needed they may be extracted to a different message property annotated with SharedReference . As another example the association may be referenced in a path of one of the SafeReferences annotations specified by MessageAssembly. For example 

With further reference to the annotation type RepositoryType defines a type and its originating type. Used as part of a type qualification scheme this annotation may be used by a validation tool when validating shared references.

Table 3 describes parameters associated with the RepositoryType annotation in accordance with one embodiment.

With further reference to the annotation type SafeReferences specifies that references within a message assembly type are safe meaning that for this operation there may be little or no duplication of instances of the referenced type within the XML message. This annotation may be used to simplify the structure of the message and avoid the use of a shared reference attributes in the message.

The paths parameter specifies the fields within the message structure that hold the safe references. The path may be specified as a dot separated list of field names starting with a field of the message assembly type and then referencing fields in the nested types. if the path references a List type it may be suffixed with to indicate that the subsequent name is a field of the underlying type rather than a field of java.util.List. For example

This path would specify that for the given operation the message is unlikely to have two different lines of an order that refer to the same product.

Table 4 describes parameters associated with the SafeReferences annotation in accordance with one embodiment.

With further reference to the annotation type SharedReference indicates that a field within a message assembly type is a container for references by other types in the message. Fields annotated with SharedReference may not be part of the functional payload of the operation but may be added to the message in order to avoid instances of the shared reference being duplicated in the XML message. The instances contained in a SharedReference field may be referenced by an ID restriction of the same type.

The definition of ProductInstance may contain a reference to a ProductSpecification via its ID for example 

In this way a message containing hundreds of product instances with many duplicate references to the same product specification will not contain duplicates of the product specifications. The consumer may retrieve the ProductSpecification details from the SharedReference container using the values of ProductSpecificationID.

Table 5 describes various validations that may be performed on message assembly types by a validation tool in accordance with one embodiment. In one embodiment for each of these conditions that fail an appropriate error message may be generated by the validation tool.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

