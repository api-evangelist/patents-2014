---

title: Privacy restrictions for columnar storage
abstract: In privacy restrictions for columnar storage, a query including operations on one or more protected columns is received. The one or more protected columns are specified with one or more access restricting metadata in a columnar table. It is determined whether the received query comprises operations on the one or more protected columns specified with the one or more access restricting metadata. The execution of the query is restricted and a constraint violation is displayed, based on the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317711&OS=09317711&RS=09317711
owner: SAP SE
number: 09317711
owner_city: Walldorf
owner_country: DE
publication_date: 20140625
---
In some jurisdictions storage of protected data such as personal data or sensitive data is strictly governed. Not only the storage but also processing of such protected data is regulated. Typically in a traditional database such as a relational database searching is prevented on the protected data by not adding indexes on columns of such protected data. However in columnar storage this is a challenging task because of the way data is organized and stored.

Embodiments of techniques for privacy restrictions for columnar storage are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. A person of ordinary skill in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In some instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In columnar storage data in tables are stored by columns rather than by rows. For example in the table SAMPLE values in the column NAME are stored first values in the column AGE are stored next in consecutive memory locations values in the column ADDRESS are stored next in consecutive memory locations followed by the values in the column PASSPORT NUMBER . These stored values are intrinsically sorted so that contiguous values will be placed adjacent to each other in memory. Columnar storage allows highly efficient compression. Various compression methods such as run length encoding cluster coding or dictionary coding can be used on such contiguous values.

In the query language statement the syntax to create the columnar table named SAMPLE is specified along with the column attributes such as NAME AGE ADDRESS and PASSPORT NUMBER . The PASSPORT NUMBER being a protected column is specified with the access restricting metadata noquery . The implementation associated with the functionality of access restricting metadata is performed in a database catalog in a database such as in memory database. The database catalog of the in memory database includes metadata in which are stored definitions of the in memory database objects such as base tables views indexes etc. This implementation of access restricting metadata in the database catalog restricts any selection or any operation on the protected column PASSPORT NUMBER . Based on the execution of the query language statement the columnar table SAMPLE is created with the protected column PASSPORT NUMBER .

When a structured query language SQL query including operations on the protected column is received the in memory database may restrict or prevent execution of the query and may return an error message. For example consider receiving an SQL query for execution 

In one embodiment database views generated from the columnar table SAMPLE may inherit the protected column PASSPORT NUMBER specified with the access restricting metadata noquery . Queries or operations performed on the protected column PASSPORT NUMBER in the database views are restricted and error messages such as constraint violation may be returned and displayed on the user interface.

For example block represents column search operation where three tables are joined and this operation could result in rows of data as shown in block . Block represents a filter operation where data is filtered based on the specified criteria criteria A and this operation could result in rows of data as shown in block . Block represents an inner join operation where the tables are joined based on the specified criteria criteria B and this operation could result in rows as shown in block . Blocks and are merely exemplary the query may be associated with any number of blocks representing any operation. Similarly all the individual operations associated with the query can be visualized in the data flow graph .

When a complex query is received from a user involving operations on a protected column specified with access restricting metadata the data flow graph associated with the complex query is automatically traversed to determine whether operations are performed on the protected column. When it is determined that an operation is performed on the protected column the complex query is restricted from being executed and an error message constraint violation may be displayed to the user. For example a query including an operation to alter a protected column of a columnar table by removing the specified access restricting metadata is received. The data flow graph associated with this query is traversed and it is determined that an operation to alter the protected column is included in the received query. In response to this determination a security violation is automatically logged and an automatic notification is sent to an administrator authorized user. Notification may include various channels such as an email short message service etc. Result of execution of the query can be viewed in window of the UI .

Encryption is performed using any encryption function such as Encrypt Random key passport number encrypted value . This Encrypt function is merely exemplary any encryption function using any encryption algorithms can be used. The random key and passport number is sent as input parameters to the encrypt function and this results in the encrypted value. For example consider USER A with passport number 34886544 as shown in and random key x . This passport number 34886544 and random key x are sent as input parameters to the encrypt function Encrypt x and the encrypted value WPX12ER is obtained. This encrypted value WPX12ER is stored in the ENCRYPTED VALUE column in TABLE B . To retrieve the passport numbers the encrypted values are decrypted using any decryption function such as Decrypt Random key name encrypted value passport number . For example consider the random key x and encrypted value WPX12ER . The encrypted value WPX12ER and the random key x are sent as input parameters to the decrypt function Decrypt x WPX12ER and the passport number 34886544 is obtained.

Random key name is used to determine the user associated with the random key in this case based on the random key x USER A is determined. This method of encrypting the values in the protected column and splitting and storing in dedicated tables restricts the protected column from being searched and processed. In one embodiment the encryption and decryption function are available as stored procedures. These stored procedures can be restricted to single record processing so that no more than one record associated with protected column can be processed at a given point of time. In this way data associated with protected column can be automatically restricted from generic data browsing and data retrieval.

In one embodiment the techniques of using access restricting metadata on the protected column and encrypting the value of protected column and storing in dedicated tables are used in combination to ensure maximum privacy protection in a columnar storage. First the protected column is split into two columns RANDOM KEY column and ENCRYPTED VALUES column Second the ENCRYPTED VALUES column is specified with an access restricting metadata to restrict selection or any operation on the protected column specifically ENCRYPTED VALUES column. The RANDOM KEY column is stored in a first table and the RANDOM KEY column and ENCRYPTED VALUES column is stored in a second table. When these two techniques are used in combination maximum privacy protection in ensured for protected columns in database storage.

The various embodiments described above have a number of advantages. Using a data flow graph to determine whether a protected column is accessed in a complex query is efficient and quick. Before the execution of the complex query begins it can be determined whether any protected column is being accessed by any operation. Further encrypting and storing the values of protected column does not allow any operation on the protected column ensuring additional privacy protection. Implementation of these two techniques in columnar storage provides maximum privacy restriction in columnar storage.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the one or more embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

