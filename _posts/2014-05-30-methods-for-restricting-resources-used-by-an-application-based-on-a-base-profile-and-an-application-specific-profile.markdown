---

title: Methods for restricting resources used by an application based on a base profile and an application specific profile
abstract: In response to a request for launching an application within an operating system of a data processing system, one or more extended entitlements are extracted from the application, where the one or more extended entitlements specify one or more resources the application is entitled to access. One or more security profile extensions corresponding to the one or more extended entitlements are dynamically generated. A security profile specifically for the application is created based on the one or more security profile extensions and a base security profile that has been previously compiled, where the base security profile specifies a list of a plurality of base resources. The application is then launched in a sandboxed operating environment that is configured based on the security profile specifically generated for the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361454&OS=09361454&RS=09361454
owner: Apple Inc.
number: 09361454
owner_city: Cupertino
owner_country: US
publication_date: 20140530
---
Embodiments of the invention relate generally to the field of secure computing and more particularly to restricting resources used by an application based on a common security profile and an application specific profile.

Security concerns for all types of processor based electronic devices and particularly for computing devices have become significant. While some concerns may relate to detrimental actions which may be undertaken by defective code implemented by such devices the greater concerns relate to the ramifications of various types of attacks made upon such devices through malicious code including code conventionally known in the field by a number of names such as viruses worms Trojan horses spyware malware and others. Such malicious code can have effects ranging from relatively benign such as displaying messages on a screen or taking control of limited functions of a device to highly destructive such as taking complete control of a device running processes transmitting and or deleting files etc. Virtually any type of imaginable action on a processor based device has been the subject of attacks by malicious code.

Many of these attacks are directed at computing devices such as workstations servers desktop computers notebook and handheld computers and other similar devices. Many of these computing devices can run one or more application programs which a user may operate to perform a set of desired functions. However such attacks are not limited to such computing devices. A broader group of various types of devices such as cell phones personal digital assistants PDAs music and video players network routers switches or bridges and other devices utilizing a microprocessor microcontroller or a digital signal processor to execute coded instructions have been the subjects of attacks by malicious code.

A number of methodologies have been used in an attempt to reduce or eliminate both attacks and influence of malicious or defective code. Generally these methodologies include detection prevention and mitigation. Specifically these methodologies range from attempts to scan identify isolate and possibly delete malicious code before it is introduced to the system or before it does harm such as is the objective of anti virus software and the like to restricting or containing the actions which may be taken by processes affected by malicious or defective code. However such restrictions typically are configured statically based on a set of rules set forth in a security profile. Such statically configured rules do not always represent the dynamic conditions of an operating environment at runtime.

Typically when an application is launched a security profile is compiled for the application based on entitlements of the application. The security profile is then used to establish an operating environment in which the application is running and restriction on resources used by the application is enforced based on the security profile. However compiling such a security profile consumes some resources and it takes longer to complete. The resources such as memory required to maintain the security profiles for a large number of applications may be relatively large.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments a base security profile also referred to as a sandbox profile or simply a profile is precompiled and maintained by an operating system. The base profile contains a set of base rules that are generated based on a set of base entitlements also referred to as base entitlements for accessing resources also referred to as base resources of a data processing system. The base profile may be configured as part of standard components or configuration files that are developed and bundled with an operating system. In addition each of the applications running within the operating system is associated with zero or more extended entitlements also referred to as application specific entitlements . The extended entitlements may be encoded within an executable image of each application and authorized and signed by a predetermined authority.

According to one embodiment when an application is launched by an operating system an access control system of the operating system dynamically extracts the one or more extended entitlements from the application and compiles one or more security profile extensions having a set of one or more extended rules. The base profile and the one or more profile extensions form a logical security profile for the application where the base rules and the extended rules are utilized to establish a sandboxed operating environment and the application is then launched within the sandboxed operating environment. The resource access control is enforced by an access control system via the sandboxed operating environment.

In one embodiment the precompiled base profile is shared by multiple applications. Each of the applications may have its own one or more profile extensions that may extend an additional entitlement from the base entitlements or alternatively override one or more of the base entitlements. Since the base profile has been statically precompiled when an application is launched only the profile extension s may need to be compiled at runtime. As a result the operating system may take less time to launch the application and the performance of the data processing system can be improved. Furthermore since multiple applications share the same base profile less memory is needed to maintain the profiles for all of the applications running within the data processing system.

Application launch module and access control system may be a part of an operating system OS running and executed by the processing resources within system . An operating system is a collection of software that manages computer hardware resources and provides common services for computer programs. The operating system is an essential component of the system software in a computer system. Application programs usually require an operating system to function. Amongst many functionalities of an operating system scheduling is the method by which threads processes or data flows are given access to system resources e.g. processor time communications bandwidth . This is usually done to load balance and share system resources effectively or achieve a target quality of service.

In addition to application launch module and access control system an operating system may further include other core components such as a scheduler a device manager a kernel etc. In order not to unnecessarily obscure embodiments of the present invention these components are not shown herein. The operating system of system may be any kind of operating system such as for example iOS from Apple Inc. Android from Google Windows from Microsoft or other operating systems e.g. UNIX LINUX real time or embedded operating systems .

Referring back to according to one embodiment when launch module receives a request for launching application launch module obtains and or determines extended entitlements from application . The extended entitlements may specify one or more resources of a data processing system that application is entitled to access. The entitlements represent certain functions or resources that an application is entitled to access. The entitlements may be specified by a developer during development of the application or alternatively entitlements can be specified by an authorization entity such as authorization server or provisioning server which provisions or distributes the application. Such entitlements may be specified as an attribute or metadata attached to or embedded within the application and signed by the authorization entity using a digital certificate. Examples of the resources of a data processing system may include a kernel component of an operating system a storage location a network interface a peripheral device etc.

In one embodiment entitlements may be encoded within an executable or binary image of application where entitlements are authorized and signed by a predetermined authority entity such as Apple Inc. Launch module can extract entitlements from an executable image of application without having to load or execute application in the system memory. Based on the extracted entitlements profile compiler compiles security profile for application in conjunction with base security profile . Security profile may be utilized to configure a restricted operating environment in which application is executed therein.

In one embodiment base security profile may be preconfigured based on a set of base entitlements . Base profile may be statically compiled as part of a standard system component or file of an operating system i.e. bundled and shipped with the operating system. Base entitlements may represent a set of resources that most or majority of the applications installed in the system are likely entitled to use e.g. printing functionality . On the other hand extended entitlements may be application specific entitlements associated with application which may be different from application specific entitlements of other applications. Security profile includes one or more profile extensions that are dynamically compiled at launch time based on extended entitlements and base security profile that has been previously and statically compiled.

Base profile is shared by multiple applications while profile extension s are specifically compiled for application at runtime. Security profile may be considered as a logical security profile that includes one or more profile extensions compiled based on application specific extended entitlements and a reference linking with base profile . A profile extension is configured to extend an application specific entitlement from base entitlements of base profile . Alternatively a profile extension may override or supersede a base entitlement in base profile . For example an email client may specify as part of its extended or application specific entitlements a specific directory or folder for storing local email data that other programs may be restricted from accessing. Similarly a browser application may be entitled to a particular storage location for storing the browsing history that other programs may not be entitled to access. If an application does not have an extended entitlement the application may use base profile as its security profile.

Since base profile has been precompiled at launch time only profile extensions are compiled the performance at runtime can be significantly improved. In addition since most of the applications share base profile only one instance of base profile may be maintained in the system memory in addition to the profile extensions associated with the applications. As a result less memory is required to maintain the security profiles for all the applications running within the operating system.

Once security profile has been compiled according to one embodiment a sandboxed operating environment can be configured based on security profile . Application is executed within the sandboxed operating environment as a sandboxed process. Resource access is then enforced by access control module via the sandboxed operating environment. During the execution of application security profile is used to enforce the set of rules to restrict application from performing any action or accessing any resource to which application is not entitled. In other words application can only access the resources that application is entitled to which may be specified in security profile . This in effect forces or contains application to operate in a restricted operating environment i.e. a sandbox or sandboxed operating environment.

Subsequently when application is to access resources via system call or application programming interface API access control module is to manage or enforce the rules set forth in security profile associated with application . Application can access resources only if security profile allows otherwise it will be prevented from accessing resources by access control module .

A sandboxed process refers to a process that has been isolated within a restricted operating environment e.g. sandbox that limits the process to a set of predefined resources. Each sandboxed process may be associated with a set of dedicated system resources such as for example a dedicated memory space a dedicated storage area or a virtual machine etc. One of the purposes of sandboxing an application is to isolate the application from accessing other unnecessary or unrelated system resources of another application or a system component such that any damage caused by the application would not spill over to other areas of the system.

To provide security an application may be contained by restricting its functionality to a subset of operations and only allowing operations that are necessary for the proper operation i.e. operation according to its intended functionality. One method to implement a limited set of policies for each application is to contain or sandbox the application. Sandboxing of an application or process can be achieved using operating system level protection to provide containment and to enforce security policies such as policies that restrict the ability of the application to take actions beyond those functions needed for it to provide its intended functionalities. When an application has been sandboxed during execution the application is executed as a sandboxed process or thread within the system that is contained within a sandbox also referred to as an application container in which it cannot access certain system resources or another territory e.g. sandbox of another application subject to a security profile associated with the sandboxed application which is referred to as a sandboxed process or a sandboxed application.

A sandboxed process is the application or other program for which security containment will be implemented. In many cases a sandboxed process is a user application but it could be another program implemented on the computing device such as a daemon or a service. To increase security and provide an efficient mechanism portions of the security system are implemented or executed in a kernel space. In addition a monitor process module not shown is executed in a separate memory space from the sandboxed processes to further insulate them from each other. In particular a sandboxed process is restricted from accessing memory outside of its process space and is further prohibited from spawning a non sandboxed process. For example a security profile of a sandboxed process may include a rule or policy that denies the sandboxed process from using certain system calls which may be a mechanism that allows processes to alter each other s address spaces. In some embodiments a policy may prevent a program from performing certain actions based on the state of an external accessory connected to the computing device e.g. if an accessory of a specific type or identity is connected is disconnected or is connected and is in or is not in a specific mode. For example an application may only be allowed to communicate over an externally accessible data bus if an accessory that meets certain criteria is connected to the data bus and is in a receptive mode.

Although only application is shown in system may be able to launch multiple applications compile multiple profile extensions and share the same base profile amongst the applications. Each security profile for each of the applications includes its own one or more profile extensions based on its own extended entitlements and shares base profile with the rest of applications as shown in . Referring to processes are launched and executed within sandboxed operating environments as sandboxed processes respectively. Sandboxes are configured based on security profiles respectively. As described above each of profiles may be compiled based on zero or more profile extensions e.g. profile extensions an optional application profile e.g. application profiles and common base profile .

An optional application specific profile refers to a secondary profile that contains entitlements that are specific for a particular application. In one embodiment each profile extension specifies a specific resource in an absolute manner such as a specific path to a storage location e.g. hardcoded path . An application specific profile may include a resource relative to another resource. For example an application specific profile may specify that an application is entitled to access a particular resource of its parent process which is not typically specified in a profile extension because it cannot be hardcoded. According to another embodiment there is a one to one relationship between a profile extension and an extended entitlement while an application specific profile may contain information associated with multiple entitlements of a particular application.

In one embodiment instead of physically maintaining a copy of base profile within their respective profiles a pointer or link e.g. pointers is maintained in each of profiles . As a result less memory may be required to maintain all of profiles for processes as shown in . Referring to when all of the security profiles corresponding to processes are loaded in memory only one instance of base profile is loaded while each of the security profiles of processes includes a link or pointer referencing base profile . Contrary to a conventional system which requires multiple copies of base profile loaded only one copy of base profile is loaded in memory . In one embodiment base profile may be around 60 KB kilobytes while an application specific profile or a profile extension may be in a range of 4 KB. As a result less memory is needed to maintain all of the profiles for processes .

According to another embodiment dependent upon the specific configuration application specific profile and or profile extensions may be used to override the default settings in base profile . For example when access control system examines base profile it may further examine whether application profile and or profile extensions have specified the same rule or rules that are configured in base profile . If so the same rules in application profile and or profile extensions may be applied instead of the one in base profile .

Referring to in one embodiment system includes processor and peripheral interface also referred to herein as a chipset to couple various components to processor including memory and devices via a bus or an interconnect. Processor may represent a single processor or multiple processors with a single processor core or multiple processor cores included therein. Processor may represent one or more general purpose processors such as a microprocessor a central processing unit CPU or the like. More particularly processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processors such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP a network processor a graphics processor a network processor a communications processor a cryptographic processor a co processor an embedded processor or any other type of logic capable of processing instructions. Processor is configured to execute instructions for performing the operations and steps discussed herein.

Peripheral interface may include memory control hub MCH and input output control hub ICH . Peripheral interface may include a memory controller not shown that communicates with a memory . Peripheral interface may also include a graphics interface that communicates with graphics subsystem which may include a display controller and or a display device. Peripheral interface may communicate with graphics device via an accelerated graphics port AGP a peripheral component interconnect PCI express bus or other types of interconnects.

An MCH is sometimes referred to as a Northbridge and an ICH is sometimes referred to as a Southbridge. As used herein the terms MCH ICH Northbridge and Southbridge are intended to be interpreted broadly to cover various chips who functions include passing interrupt signals toward a processor. In some embodiments the MCH may be integrated with processor . In such a configuration peripheral interface operates as an interface chip performing some functions of the MCH and ICH. Furthermore a graphics accelerator may be integrated within the MCH or processor .

Memory may include one or more volatile storage or memory devices such as random access memory RAM dynamic RAM DRAM synchronous DRAM SDRAM static RAM SRAM or other types of storage devices. Memory may store information including sequences of instructions that are executed by processor or any other device. For example executable code and or data of a variety of operating systems device drivers firmware e.g. input output basic system or BIOS and or applications can be loaded in memory and executed by processor . An operating system can be any kind of operating systems such as for example Windows operating system from Microsoft Mac OS iOS from Apple Android from Google Linux Unix or other real time or embedded operating systems such as VxWorks.

Peripheral interface may provide an interface to IO devices such as devices including wireless transceiver s input device s audio IO device s and other IO devices . Wireless transceiver may be a WiFi transceiver an infrared transceiver a Bluetooth transceiver a WiMax transceiver a wireless cellular telephony transceiver a satellite transceiver e.g. a global positioning system GPS transceiver or a combination thereof. Input device s may include a mouse a touch pad a touch sensitive screen which may be integrated with display device a pointer device such as a stylus and or a keyboard e.g. physical keyboard or a virtual keyboard displayed as part of a touch sensitive screen . For example input device may include a touch screen controller coupled to a touch screen. The touch screen and touch screen controller can for example detect contact and movement or break thereof using any of a plurality of touch sensitivity technologies including but not limited to capacitive resistive infrared and surface acoustic wave technologies as well as other proximity sensor arrays or other elements for determining one or more points of contact with the touch screen.

Audio IO may include a speaker and or a microphone to facilitate voice enabled functions such as voice recognition voice replication digital recording and or telephony functions. Other optional devices may include a storage device e.g. a hard drive a flash memory device universal serial bus USB port s parallel port s serial port s a printer a network interface a bus bridge e.g. a PCI PCI bridge sensor s e.g. a motion sensor a light sensor a proximity sensor etc. or a combination thereof. Optional devices may further include an imaging processing subsystem e.g. a camera which may include an optical sensor such as a charged coupled device CCD or a complementary metal oxide semiconductor CMOS optical sensor utilized to facilitate camera functions such as recording photographs and video clips.

Note that while illustrates various components of a data processing system it is not intended to represent any particular architecture or manner of interconnecting the components as such details are not germane to embodiments of the present invention. It will also be appreciated that network computers handheld computers mobile phones and other data processing systems which have fewer components or perhaps more components may also be used with embodiments of the invention.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

