---

title: Confirmed divert bitmap to synchronize raid firmware operations with fast-path hardware I/O processing
abstract: A storage controller system is provided for the monitoring of fast path processing of I/Os to a storage device where the storage controller system allows for processing of I/Os to be monitored through the use of counters in a storage controller based upon the type of I/O issued to the storage controller as well as the conditions associated with the I/O, while providing a bitmap and associated divert bits and counters to monitor the processing of the I/Os in the storage controller. Methods for monitoring the processing of I/Os issued to the storage controller are also provided where the processing of the I/Os is based upon the type fast path I/Os issued to the storage controller and the conditions associated with the issued I/Os while providing a bitmap and associated divert bits and counters to monitor the processing of the I/Os in the storage controller, are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09250832&OS=09250832&RS=09250832
owner: Avago Technologies General IP (Singapore) Pte. Ltd.
number: 09250832
owner_city: Singapore
owner_country: SG
publication_date: 20140521
---
This application is a non provisional patent application of and claims the benefit of U.S. Provisional Application No. 61 830 237 filed Jun. 3 2013 the entire contents of which are incorporated herein by reference for all purposes.

The present disclosure relates generally to computer systems and more particularly to storage systems.

All or most of the components of a computer or other electronic system may be integrated into a single integrated circuit chip . The chip may contain various combinations of digital analog mixed signal and radio frequency functions. These integrated circuits may be referred to as a system on a chip SoC or SOC . A typical application is in the area of embedded systems. A variant of a system on a chip is the integration of many RAID functions on a single chip. This may be referred to as RAID on a chip ROC .

RAID arrays may be configured in ways that provide redundancy and error recovery without any loss of data. RAID arrays may also be configured to increase read and write performance by allowing data to be read or written simultaneously to multiple disk drives. RAID arrays may also be configured to allow hot swapping which allows a failed disk to be replaced without interrupting the storage services of the array. The 1987 publication by David A. Patterson et al. from the University of California at Berkeley titled A Case for Redundant Arrays of Inexpensive Disks RAID discusses the fundamental concepts and levels of RAID technology.

RAID storage systems typically utilize a controller that shields the user or host system from the details of managing the storage array. The controller makes the storage array appear as one or more disk drives or volumes . This is accomplished in spite of the fact that the data or redundant data for a particular volume may be spread across multiple disk drives.

An embodiment of the present invention may comprise a method for monitoring the processing one or more I Os in a storage controller comprising initiating a condition that requires synchronization of RAID operations of the storage controller with one or more affected I Os asserting a divert bit of the storage controller corresponding to an affected virtual drive address range issuing and transmitting one or more I Os from a driver to the storage controller fast tracking the one or more I Os from the storage controller to completion based on the absence of a collision with the asserted divert bit diverting the one or more I Os to firmware where the one or more I Os have a condition that collides with the asserted bit maintaining a count of the number of outstanding I Os mapped to the asserted divert bit and issuing a completion confirmation message to the firmware when counter reaches zero.

An embodiment of the present invention may further comprise a storage control system comprising a storage controller coupled to a host system to receive storage I O requests the storage controller configured to assert a divert bit when initiating a condition that requires synchronization of RAID operations of the storage controller with one or more affected the I Os the storage controller configured to divert to firmware the I Os with a condition that collides with the asserted bit and wherein I Os with a condition that does not collide with an asserted divert bit are transmitted to a storage device and the storage controller comprises a counter configured to maintain a count of outstanding completion of the I O requests from the host mapped to the asserted divert bit.

Host processor is operatively coupled to the bus . Bus may be for example a PCIe bus. The bus is operatively coupled to the storage controller . The storage controller may be or include a RAID controller. The message unit is operatively coupled to the processor and I O accelerator . The I O accelerator is operatively coupled to the message unit the SAS interface and processor . The Processor is operatively coupled to the message unit the I O accelerator and the SAS interface . The SAS interface is operatively coupled to the processor the I O accelerator and storage devices and . Storage devices and may be for example physical disk drives solid state disk drives or a combination thereof.

The driver of the host issues or transmits to the storage controller message unit input output signals I Os through the bus . The message unit processes the I Os from the driver and then as will be discussed in more detail later transmits the I Os to the processor or the I O accelerator .

As will be discussed further detail in the I O accelerator is used to synchronize firmware originated RAID operations with the issued I Os where conditions associated with the I Os may be affected by the RAID operations. When firmware initiates a condition that requires synchronization with the I Os the firmware will assert divert bits within the I O accelerator corresponding to the affected virtual drive address ranges. Counters located in the I O accelerator corresponding to the conditions associated with each asserted divert bit maintain the number of outstanding I O completions corresponding to the asserted divert bit in a divert bitmap. Each counter maintains a running count of the issued I Os incrementing the appropriate counter by one for each newly initiated I O and decrementing the appropriate counter by one for each I O completion to storage devices and . By maintaining a count of the issued I Os firmware is able to maintain a count of the number of outstanding I O completions that are still pending completion. The I O accelerator will issue a message to the firmware whenever the corresponding counter is decremented to zero or if firmware asserts a divert bit for a counter that is already zero. After firmware completes processing of the condition that required diversion of I Os firmware clears the corresponding asserted divert bit in the divert bitmap. For I Os completed directly to firmware such as due to a SAS protocol error the I O accelerator must support the capability for firmware to decrement any counter as though the completion had been received through the fast path completion path. Firmware may determine when there are no longer any outstanding I O completions by reading the state of the associated counter or by recognizing the message issued to firmware by the I O accelerator . When devices complete I Os to storage or successfully the devices return successful completion status to the I O accelerator and the I O accelerator routes the completion status to either the message unit or to firmware depending on the origin of the I O in the first place or a firmware override to return completion status to the host for I O originated by the firmware .

The processor includes firmware that is run by the processor . The processor may comprise a microprocessor microcontroller logic circuit or other processing device and may be distributed among several processing devices. Please note that the divert bitmaps are shared by and operably coupled between the I O accelerator and the processor firmware . While in this example the divert bitmaps and associated bitmap control register and pending completion counters are located in the I O accelerator as would be obvious to one skilled in the art the bitmaps register and pending completion counters may also be implemented in the driver of the storage system.

As shown in the driver issues or transmits to the message unit input output signals I Os including LD I Os issued to logical drives and PD I Os issued to physical drives . The driver includes an application programming interface API which provides the communication between the host application OS and the driver .

The issued I Os are managed by the message unit . The message unit is operably coupled to both the I O accelerator IOA and the I O processor . The message unit processes the LD I Os and PD I Os from the host driver and then transmits the LD I Os to the I O processor while the PD I Os are transmitted to the I O accelerator .

In the I O accelerator of the storage controller the divert processing block which contains the divert bitmaps and bitmap control register is operably coupled to the protocol routing block and the FCFS FIFO Notify and Grant Block . The divert bitmaps comprising divert bits with the corresponding I O pending completion counters and bitmap control register are used to synchronize firmware originated RAID operations with fast path PD I Os where conditions associated with the PD I Os may be affected by the RAID operations. As will be discussed in further detail the number of divert bits in the divert bitmaps relates to the number of conditions of the PD I Os requiring synchronization at any given time. When firmware initiates a condition that requires synchronization with fast path I Os the firmware will assert divert bits corresponding to the affected virtual drive address ranges. Please note that as used herein the term conditions may include but is not limited to dirty cached data firmware maintained records of invalid data blocks stripe level recovery operations configuration changes or selected internal background operations.

In an embodiment the message unit will transmit fast path PD I Os to the divert processing block where the divert processing block will identify any potential conditions associated with the PD I Os that may require processing by the processor firmware by hashing the LD ID and Logical LBA specified in the I O to a bit number and checking to determine if the corresponding bit is asserted. For PD I Os received from the message unit that do not need to be diverted to the processor firmware based on the conditions associated with the PD I Os and the absence of a collision with asserted bits in the divert bitmap the divert processing block routes the PD I Os directly to the protocol routing block . From the protocol routing block the PD I Os are routed to a storage device such as a disk tape or SSD.

In an embodiment for PD I Os transmitted from the message unit to the divert processing block that do require synchronization based on the conditions associated with the issued PD I Os the divert processing block routes and the PD I Os to the processor through the FCFS FIFO Notify and Grant Block for processing by the processor s firmware .

Table 1 below shows an example description of a 32 bit Bitmap Control Register and the directives issued to the Divert Processing Block through the Bitmap Control Register . As shown in Table 1 an example of the general format of the control word specifying an operation performed on divert bitmap is provided where divert bits are associated with the operation code Opcode and bits are dependent upon the Opcode directive which include reserved set divert bit clear divert bit increment a counter in the specified bitmap decrement a counter in the specified bitmap and set a counter in the specified bitmap to zero.

Table 2 provides an example of the codes 0 7 associated with each Opcode directive for bitmap operations identified in Table 1.

Table 3 provides an example of the general format of the control word of the bitmap control register specifying a divert bitmap set directives Opcode directive 1 as identified in Table 2.

Table 4 provides an example of the general format of the control word of the bitmap control register specifying a divert bitmap clear directive Opcode directive 2 as identified in Table 2.

The function of an asserted divert bit is to divert a received fast path PD I O away from the fast path hardware to firmware in the case where the hashed LD ID and LD LBA map to the specified bit so that firmware can manage the synchronization of the PD I O with active firmware originated RAID operations that affect the processing of that PD I O .

The I O accelerator maintains an internal RAM that contains the hash indexed divert bitmaps which may contain a comparatively large number for example in the range from one million to sixteen million bits for the unconfirmed bitmap with no counters used for dirty RAID cache. For the confirmed bitmap as described above a much smaller bitmap 4096 bits for example is used to track the temporary conditions of the PD I Os in firmware that affect fast path I O processing.

Divert bits of the divert bitmaps are operably coupled to and set asserted by firmware based on conditions associated with processing received I Os either LD I Os or fast path PD I Os which are diverted away from the fast path hardware to firmware or cleared deasserted by the processor firmware once the firmware completes processing of the condition that required diversion of fast path I Os . The divert bits are also operably coupled to and consulted by the divert processing block of the I O accelerator while the I O accelerator processes PD I Os to determine when I Os must be diverted to the processor s firmware for processing.

Firmware may specify that multiple bitmaps in the divert bitmap are to set or clear a specified bit by the request written to the register by asserting multiple bits in a bitmap IDs field as described below. The I O accelerator will ignore high order bits in the specified bit number so that the remaining bits specify a bit number available in the specified bitmap. For example if the hash chunk size is 2 048 blocks 1 MB for a 512 byte block size for both the 4 096 bit confirmed LBA mapped divert bitmap and the 2 Mib large unconfirmed LBA mapped divert bitmap and the firmware issues a request to the set register specifying a value of 0xDF4B3C as the bit number then the I O accelerator will use the value 0xB3C as the bit number for the 4 096 bit bitmap 12 bits of relevant index and will use a value of 0x1F4B3C as the bit number for the 2 Mib bitmap.

Table 5 provides an example of the bitmap ID bits associated with each specified bitmap of the divert bitmap .

A bit number of an asserted bit represents a hash slot that maps to one or more conditions that require firmware processing for overlapping PD I Os . As discussed above the conditions that require firmware processing of overlapping PD I Os include dirty write buffers valid RAID cache lines bad block entries maintained by firmware and temporary conditions requiring isolation of one or more stripes a specified LD ID or the entire controller to maintain coherency of data and parity on media. The I O accelerator determines the disposition of a fast path PD I O by examining the bitmaps to determine if a fast path PD I O might collide with a flagged condition indicated by one or at most 2 asserted bits in any of the enabled bitmaps and should therefore be redirected to firmware .

Bitmaps are read only by the I O accelerator and firmware is responsible to set and clear the bits as conditions that require diversion of fast path PD I Os are established and retired.

The divert bitmap maintains separate 16 bit counters corresponding to the conditions associated with each asserted divert bit in the confirmed bitmaps and constantly maintain the number of outstanding PD I O completions that overlap the hash bucket corresponding to the divert bit . Each counter maintains a running count of the fast path PD I Os that are transmitted from the divert processing block to the protocol routing block incrementing the appropriate counter by one for each newly initiated PD I O and decrementing the appropriate counter by one for each PD I O completion that is returned to the protocol routing block . The divert bitmap will maintain a count of the number of outstanding PD I O completions that are mapped to the corresponding divert bit and are still pending completion independent of whether the divert bit has been set or cleared by firmware at any given point in time . The divert bitmap issues a Notify message through the FCFS FIFO Notify and Grant Block to the firmware whenever the corresponding counter for an asserted bit is decremented to zero or if firmware asserts a divert bit for a counter that is already zero. After firmware completes processing of the condition that required diversion of fast path PD I Os firmware clears the corresponding bit in the divert bitmap . For PD I Os completed directly to firmware such as due to a SAS protocol error the I O accelerator must support the capability for firmware to decrement any counter as though the completion had been received through the fast path completion path. Firmware may determine when there are no longer any outstanding fast path PD I O completions associated with a set divert bit by reading the state of the associated counter or by recognizing the Notify message issued to firmware by the FCFS FIFO Notify and Grant Block . The memory required to hold the counters and divert bits for a 4 096 bit confirmed divert bitmap is 4 KB 2 for the counters and 4KB 8 for the confirmed divert bits for a total of 8.5KB.

As shown in Table 6 the I O accelerator provides a bitmap counter update control word for this purpose. Table 6 defines the bitmap counter update control word where bits are associated with the Opcode bits are associated with a divert bitmap as identified in Table 5 and bits are associated with a counter number.

The counter number specifies the counter to be operated on in the specified confirmed bitmap either the confirmed LBA mapped divert bitmap or the confirmed LD ID mapped divert bitmap . The counter number is undefined when operating on the counter associated with the global divert bit and should be set to zero.

In addition to the bitmap counter update first in first out element the I O accelerator provides firmware memory mapped access to all counters so that firmware can read and write counters directly.

While a given divert bit is set newly issued PD I Os received by the divert processing block from the message unit that collide with the asserted divert bit by virtue of the hash of the storage device logical block address LBA range accessed producing the index of a set divert bit are redirected and from the divert processing block to firmware through the FCFS FIFO Notify and Grant Block . A given PD I O should never affect more than two divert bits because the hash slot is designed to be at least as large as the largest PD I O that is supported. The I O accelerator will perform the same hash for any new fast path PD I Os received from the message unit and if the hashed result maps to an asserted divert bit the PD I O is diverted to firmware by posting a Grant message to the FCFS FIFO Notify and Grant Block with the Grant message containing the bit ID of the bitmap that produced a collision.

Upon receiving a confirmation Notify signal or message from the appropriate counter through the FCFS FIFO Notify and Grant Block that the counter is zero upon completion of the last outstanding FP I O mapping to that bit the firmware will then be free to execute the RAID operation that requires synchronization with the affected PD I Os . The Notify message provided the firmware with a change in the state of the bit counter along with the identity the bit number affected. PD I Os diverted to firmware while the divert bit is asserted are either processed by firmware in coordination with the RAID operation affected by the PD I Os or are pended by firmware until the RAID operation is complete. The firmware may then process the pended PD I Os or redirect the pended PD I Os back to the I O accelerator for processing. The I O accelerator will then forward the PD I Os to the protocol routing block to be issued to attached storage devices. Also if the reply destination associated with the PD I O is Host then the affected counter or counters are incremented to reflect the presence of additional pending fast path completions to be processed by the hardware. Once the RAID operations that required asserting a divert bit are complete the firmware will deassert or clear the divert bit to allow the fast path to continue processing of PD I Os that map to that divert bit .

In an embodiment the processor firmware may issue and route firmware originated PD I Os directly to the protocol routing block bypassing the divert processing block by means of the receiving block that is operably coupled to the protocol routing block . Processor firmware will not issue PD I O requests directly to the protocol routing block that have conditions that require the divert bitmap of the divert processing bock to route the I Os to firmware .

In an embodiment the driver may issue LD I Os I Os issued to virtual or logical devices . The LD I Os are transmitted from the driver to the message unit . LD I Os that may be received by the message unit from the driver are delivered by the message unit to firmware for processing by the firmware . Upon receiving the LD I Os firmware will process the LD I Os to determine whether the specified operation might conflict with fast path PD I O operations occurring at the same time. If there is a potential conflict firmware will instruct the divert processing block to assert one or more divert bits associated with the range of LBAs affected by the LD I O .

Firmware will perform RAID mapping operations on LD I Os that affect I Os overlapping a specified LBA range. RAID operations by the firmware to process LD I Os converts the LD I Os to one or more PD I Os which are sent to the receiving interface block of the I O accelerator and routed to the protocol routing block . From the protocol routing block the processed PD I Os are routed directly an attached storage device such as a disk or solid state drive.

The divert bitmaps described herein are designed to minimize the impact on PD I Os that do not collide or require synchronization with firmware maintained elements based on LBA overlap detection. The ability of the divert bitmaps to divert selected PD I Os to firmware is based on the conditions associated with the logical drive address ranges affected by the PD I Os . A scattering hash algorithm may be used to prevent excessive clustering of conditions onto selected divert bits that are associated with modulo boundaries and to scatter slot assignments for different LD I Os. Each divert bit of the divert bitmaps represents ranges of addressable space on one or more storage devices with the divert bit number of the divert bitmaps determined as a hash of the storage devices logical drive ID LDID and the LBA to be accessed by a given PD I O for PD I O . In the hash map a right shift of the LBA is conducted so that each divert bit represents a range of LBAs. Higher order bits are masked off as well which has the effect of mapping multiple LBA ranges to the same hash slot. In the end the number of hash slots is 2 where n is the number of bits left after shifting and masking. The average number of conditions mapped per divert bit at any given time is substantially smaller than one. For example if a storage controller has initiated I Os with as many as 400 conditions active that need synchronization at any given time then a divert bitmap of 4000 divert bits provides an average loading per divert bit of 0.1. The light loading per bit leaves ample clear bits to allow most fast path PD I Os to be processed directly in hardware without incurring firmware processing overhead.

One use of the confirmed bitmaps described herein is to allow firmware to alter the location or contents of data on media that would potentially be accessed by an in flight fast path I O unbeknownst to firmware . Examples where this might occur include array rebuild for capacity expansion and redistribution of data in a D RAID mapped volume. In such cases prior to operating on an affected range of media firmware not only needs to prevent newly issued fast path I Os in the range of the affected media from being issued to devices but also needs to confirm that any previously issued fast path I Os in the range of the affected media have completed.

In a flow diagram is provided showing the processing and monitoring of I Os by the fast path I O processing system using a confirmed divert bitmap . In step firmware initiates a condition that requires synchronization with the I Os. The firmware will assert divert bits of the divert processing block within the I O accelerator corresponding to the affected virtual drive address ranges. In step the driver will issue I Os such as PD I Os from the host to the message unit of the storage system. The message unit will then transmit the I Os to the I O accelerator where the PD I Os are processed in the divert processing block. In step based on the conditions associated with the I Os and the absence of a collision with asserted bits in the divert bitmap the POs do not need to be diverted to processor firmware. Therefore the I Os are fast tracked from the divert processing block and routed to the protocol routing block. In step from the protocol routing block the I Os are routed for completion directly to a storage device or routed to the driver. In step for I Os with a condition that creates a collision with assert divert bits that require the processing and synchronization by the processor s firmware the I Os are diverted to the processor firmware for processing. Because this is asynchronous with the processing of fast path I Os of steps and the divert processing block must confirm by counting the number of outstanding fast path I O completions associated with each asserted bit that any previously issued I Os mapping to the affected divert bits have been completed and cleared from the fast path processing. In step counters located in the I O accelerator corresponding to the conditions associated with each asserted divert bit maintain the number of outstanding I O completions corresponding to the divert bit in divert bitmap. Each counter maintains a running count of the number of outstanding uncompleted fast path I Os mapping to that divert bit incrementing the appropriate counter by one for each newly initiated I O and decrementing the appropriate counter by one for each I O completion allowing the firmware to maintain a count of the number of outstanding I O completions that are still pending completion. Counters are incremented for all colliding bits whether the bits are asserted or not when a fast path I O is sent to the protocol routing block. In step when the pending I O completion counter reaches zero a confirmation Notify signal or message from the appropriate counter is sent to the firmware indicating that the fast path pipeline is clear of fast path I Os mapping to the asserted divert bit. Upon receiving the I O completion count zero confirmation from the divert bitmap the firmware is free to execute the RAID operation that requires synchronization with the affected I Os. I Os diverted to firmware while the divert bit is asserted are either processed by firmware in coordination with the affected internal RAID operation or are pended by firmware until the internal RAID operation is complete at which point firmware may process the pended I Os or redirect them back to the fast path for processing. Firmware originated I Os may specify that after the I O is routed to and processed by a storage device a successful completion is routed to the host or that a successful completion is to be routed back to firmware. If the I O completion is to be routed back to firmware then the counter s are unaffected either when the I O is submitted or when the completion is returned. If the I O completion is to be routed back to the host then the affected counter is incremented when the I O is issued and the affected counter is decremented when the completion is returned. Once the internal RAID operation that required asserting a divert bit is complete the firmware deasserts the divert bit restoring the hardware fast path processing for POs that map to that bit.

The foregoing description of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and other modifications and variations may be possible in light of the above teachings. The embodiment was chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention in various embodiments and various modifications as are suited to the particular use contemplated. It is intended that the appended claims be construed to include other alternative embodiments of the invention except insofar as limited by the prior art.

