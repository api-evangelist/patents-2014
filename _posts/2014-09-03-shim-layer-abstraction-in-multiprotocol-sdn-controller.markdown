---

title: Shim layer abstraction in multi-protocol SDN controller
abstract: A Service Abstraction Layer (SAL) provides network level abstraction enabling applications to interface via multiple software-defined networking (SDN) protocols with network devices in a heterogeneous network (devices in the network support a variety of SDN protocols) and in an opaque fashion in order to fulfill desired services by one or more of the protocols. Abstraction is not limited or mapped to any particular protocol. Protocols can change and applications can vary. Support for new protocols can be added later as plug-ins.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467536&OS=09467536&RS=09467536
owner: Cisco Technology, Inc.
number: 09467536
owner_city: San Jose
owner_country: US
publication_date: 20140903
---
This application claims priority to U.S. Provisional Patent Application No. 61 968 411 filed Mar. 21 2014 the entirety of which is incorporated herein by reference.

An SDN controller is used to communicate with network devices in a network to control various functions of the network devices. SDN controllers tend to support a single particular protocol such as the OpenFlow protocol and thus are limited only to greenfield environments. In reality there are deployments in which there are devices with different capabilities and which are configured to use different SDN protocols.

In accordance with one embodiment a software defined network SDN controller receives one or more requests for services to be performed by a plurality of network devices that communicate with the SDN controller by a plurality of different of SDN protocols. The requests are mapped to appropriate ones of the plurality of different SDN protocols to fulfil the services of the requests. The SDN controller sends to respective ones of the plurality of network devices control messages according to appropriate ones of the plurality of different SDN protocols.

Referring first to a diagram is shown of a system that includes a plurality of network devices N a Software Defined Networking SDN controller and a plurality of applications K . The network devices N may be configured to communicate with the SDN controller using a different one of a plurality of SDN control protocols that are depicted by the arrows labeled N in . Consequently the SDN controller is a multi protocol SDN controller in that it can communicate with network devices which use different SDN protocols. There need not be a one to one correspondence between SDN protocol and network device. That is some network devices may be capable of communicating using more than one SDN protocol.

Turning now to with continued reference to the multi protocol SDN controller can support multiple SDN protocols between it and the network devices N it controls. In the example shown in the network devices N include network devices from a first vendor called Vendor shown at reference numeral and network devices from one or more other vendors called Non Vendor network devices shown at reference numeral .

There are northbound application programming interfaces APIs that enable communication between the applications and the SDN controller . The northbound APIs are expandable on demand. Examples of northbound APIs include an API compliant with the Open Service Gateway Initiative OSGI and a Representational state transfer RESTful API .

Similarly there are southbound APIs that enable communication between the SDN controller and the network devices N . The southbound APIs include dynamic plugins for different SDN communication protocols. Examples of southbound APIs include an API compliant with the Cisco One Platform Kit OnePK an API compliant with the Path Computation Element Communication Protocol PCEP an API compliant with the Interface to Routing System I2RS standard an API compliant with the OpenFlow OF1.x standard and a Command Line Interface CLI .

The SDN controller includes several functional subsystems including an infrastructure core subsystem a controller applications subsystem and a controller components subsystem . All of these subsystems may be implemented as Java bundle in one example.

Examples of functional blocks in the infrastructure subsystem include a Dijkstra Shortest Path First SPF Forwarding Rules Manager Physical and Logical Topology Manager Switch Manager Host Tracker Address Resolution Protocol ARP Handler and Device Manager . The Physical and Logical Topology Manager imports a topology from inventory or other sources. The Dijkstra SPF and Forwarding Rules Manager provide for advanced feature set capabilities.

Examples of functional blocks in the controller applications subsystem include a Flow Manager Slice Manager and Topology Independent Forwarding TIF . The controller components subsystem includes a Graphical User Interface GUI an Authentication block and a Troubleshooting block . The components for the controller applications subsystem are used for deployment in a production network.

The applications K running above the SDN controller need to be opaque to the variety of SDN protocols. A Service Abstraction Layer SAL is provided that is a shim layer abstraction in the infrastructure subsystem .

Network level abstraction enables applications to interface via multiple SDN protocols with network devices in a heterogeneous network devices in the network support a variety of SDN protocols in an opaque fashion in order to fulfill desired services by one or more of the protocols. Abstraction is not limited or mapped to any particular protocol. Protocols can change and applications can vary. In addition support for new protocols can be added as plugins.

Most SDN controllers support only the OpenFlow SDN protocol in the southbound direction to send control messages from the controller to the network devices to communicate with the network devices which in this case is limited to OpenFlow switches . Consequently the network applications on top of the SDN controller are limited to the capabilities of the OpenFlow switches and OpenFlow protocol . Also given that the OpenFlow protocol is relatively new at the time of this writing there are many existing network devices which do not support OpenFlow or cannot be upgraded to support OpenFlow. There are several new protocols that may be developed or are already under development and it is important for SDN controllers to be inclusive and support a wide variety of devices and protocols.

The SAL provides this functionality. The SAL provides a set of services which applications K or modules north of the SDN controller running on and above the SDN controller can use. In the southbound direction from the controller to the network devices N the SAL supports a multitude of protocols to communicate with network devices depending on the capabilities of the devices. The SAL maps the services to the capabilities of the network devices and selects the appropriate southbound protocol to fulfill or render the services.

The SAL provides a plugin mechanism whereby southbound protocol support is developed and attached to the SAL . This makes the SDN controller extensible and capable of supporting a network with heterogeneous devices of varying capabilities and capable of communicating using different protocols.

The services exposed by the SAL provide a higher level abstraction that hides the details of the southbound protocol plugins and how a given service is fulfilled or rendered by a specific device. It thus allows a given service associated with an application to be fulfilled across devices of different capabilities. That is the SAL provides a path service for a traffic flow to follow in a network made of several different types of network devices.

This path may use any network technology such as a virtual local area network VLAN General Routing Encapsulation GRE Multiprotocol Label Switching MPLS tunnel or Virtual Extensible Local Area Network VXLAN tunnel etc. depending on the network device capability. To establish this path the controller programs the device and the SAL allows the controller to use for example the OpenFlow protocol with an OpenFlow switch Simple Network Management Protocol SNMP or CLI to configure a non OpenFlow switch.

The SAL provides the ability to map a higher level abstraction exposed as service sets to a device capability and to the protocol capabilities. In so doing the SAL selects the appropriate protocol primitives to communicate the service intent to a network device. Examples of protocol APIs that the SAL may abstract to are shown at reference numerals in and described above. These southbound protocol APIs are meant only to be examples and APIs for other protocols now known or hereinafter developed may be supported according to the techniques presented herein.

Reference is now made to . shows more details of the SAL and shows how the SAL fits within the overall software architecture of the system depicted in . Business logic modules shown generally at interact with the SAL through generic service requests and responses. Examples of such business logic modules include the aforementioned Forwarding Manager Topology Manager Switch Manager Host Tracker Slice Manager and a Statistics Manager .

The SAL includes a Services Manager and a Plugin Manager . The Services Manager manages generic services such as network device discovery etc. Services are constructed using individual features exposed by the Plugin Manager based on Plugin availability and network device capabilities . The Services Manager includes a service to feature registry . The Plugin Manager includes a database that stores device capability based feature to plugin mapping information. The Services Manager sends a feature request to the Plugin Manager and the Plugin Manager sends an abstracted plugin response .

Examples of plugins are shown at and include an OpenFlow OF plugin a OnePK plugin a vendor specific OF plugin and an I2RS plugin . Each plugin works independently of one another and is loosely coupled with the Services Manager . The Plugin Manager selects plugins dynamically based on the feature request on a given network device or set of network devices.

The SAL and specifically the Plugin Manager is the only place where plugin details are exposed. Therefore no cross contamination across plugins and no contamination in business logic layers can occur.

Reference is now made to . illustrates a flow chart depicting operations of a method performed by an SDN controller according to an example embodiment. At an SDN controller receives one or more requests for services to be performed by a plurality of network devices that communicate with the SDN controller by a plurality of different of SDN protocols. At the SDN controller maps the requests to appropriate ones of the plurality of different SDN protocols to fulfil the services of the requests. At the SDN controller sends to respective ones of the plurality of network devices control messages according to appropriate ones of the plurality of different SDN protocols.

As explained above the SDN controller stores for each SDN protocol one or more libraries of primitives used for communicating with a network device in accordance with a corresponding SDN protocol. The libraries of primitives provide an abstraction so as to hide details of the plurality of different SDN protocols from the plurality of applications. Thus the mapping operation involves selecting primitives of respective ones of the plurality of SDN protocols to communicate a request for services of an application to a network device. To do so the SDN controller stores information that maps network device capability based features to plugins to the plurality of different SDN protocols and dynamically selects a plugin based on a feature contained in a request to a given network device or set of network devices. Plugins are changed or added to accommodate changes or additions to the SDN protocols.

In summary the SDN controller includes a services abstraction layer that provides network level abstraction enabling applications to interface via multiple SDN protocols with network devices in a heterogeneous network devices in the network that supports a variety of SDN protocols in an opaque fashion in order to fulfill desired services by one or more of the protocols. Abstraction is not limited or mapped to any particular protocol. Protocols can change and applications can vary. Support for new protocols can be added later as plugins.

Turning now to a block diagram is shown of the SDN controller . The SDN controller includes a network interface unit one or more processors and memory . Within memory are stored software instructions for SDN controller software and also stored data for SDN protocol libraries. The memory may comprise read only memory ROM random access memory RAM magnetic disk storage media devices optical storage media devices flash memory devices electrical optical or other physical tangible memory storage devices. The processor is for example a microprocessor or microcontroller that executes instructions for the SDN controller software . Thus in general the memory may comprise one or more tangible non transitory computer readable storage media e.g. a memory device encoded with software comprising computer executable instructions and when the software is executed by the processor it is operable to perform the operations described herein in connection with the SDN controller software . The SDN controller software may be implemented as a Java virtual machine running on a server in a data center or other cloud computing environment. The SDN controller software includes instructions for performing the functions of the described above in connection with .

In summary a method is provided comprising at a software defined network SDN controller receiving one or more requests for services to be performed by a plurality of network devices that communicate with the SDN controller by a plurality of different of SDN protocols mapping the requests to appropriate ones of the plurality of different SDN protocols to fulfil the services of the requests and sending from the SDN controller to respective ones of the plurality of network devices control messages according to appropriate ones of the plurality of different SDN protocols.

Similarly an apparatus is provided comprising a network interface unit to send and receive communications over a network a memory that stores libraries of primitives used for communicating with a plurality of network devices in accordance with a plurality of different software defined networking SDN protocols a processor coupled to the network interface that maps received requests for services to be performed by the plurality of network devices to appropriate ones of the plurality of different SDN protocols and causes control messages to be sent to respective ones of the plurality of network devices according to appropriate ones of the plurality of different SDN protocols.

Further still one or more computer readable storage media are provided encoded with software comprising computer executable instructions and when the software is executed by a processor cause the processor to map received requests for services to be performed by a plurality of network devices to appropriate ones of a plurality of different software defined networking SDN protocols and cause control messages to be sent to respective ones of the plurality of network devices according to appropriate ones of the plurality of different SDN protocols.

While various embodiments are disclosed herein it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail may be made therein without departing from the spirit and scope of what is described herein. Thus the breadth and scope of the claims should not be limited by any of the example embodiments disclosed herein.

