---

title: Verification of transformed content
abstract: A computer manages methods for determining accurate document transformation by rendering the source document into a non-rasterized format, where the non-rasterized format is a rendered source document. The computer rendering the target document into a non-rasterized format, where the non-rasterized format is a rendered target document. The computer comparing one or more aspects of the rendered source document to corresponding one or more aspects of the rendered target document. The computer determining, based, at least in part, on the compared one or more aspects, whether or not the source document was accurately transformed to the target document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529876&OS=09529876&RS=09529876
owner: International Business Machines Corporation
number: 09529876
owner_city: Armonk
owner_country: US
publication_date: 20140605
---
The present invention relates generally to content transformation and more particularly to validating accurate content transformation.

Extract Transform Load ETL refers to a process in database usage more specifically in data warehousing performed by an ETL tool. The process includes extracting an original document from a source transforming the data to fit operational needs and loading the transformed document into an end target e.g. database or database warehouse . The process typically consists of numerous processes which the ETL tool sequences together. Original documents i.e. source documents are typically deleted from a storage location after being transformed into another document format i.e. target document . Typically source documents relate to source applications such as email programs from where the source documents are extracted during the ETL process.

Embodiments of the present invention disclose a method computer program product and computer system for determining accurate document transformation. A computer rendering by one or more processors the source document into a non rasterized format where the non rasterized format is a rendered source document. The computer rendering by one or more processors the target document into a non rasterized format where the non rasterized format is a rendered target document. The computer comparing by one or more processors one or more aspects of the rendered source document to corresponding one or more aspects of the source document.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable media having computer readable program code instructions embodied thereon.

Any combination of computer readable media may be utilized. Computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but is not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of a computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Some embodiments of the present invention recognize that there may be situations where a transformation of a source document to a target document is not accurate. For example certain objects e.g. textual content may not transfer from the source document to the target document. Such situations may not be immediately apparent during the transformation and the original document may be deleted resulting in lost content which may not have transferred. Instances such as archiving a large quantity of documents the content of the source documents has to transform to the target document to ensure all of the information is accurately archived in the end target.

Server computer may be a desktop computer a laptop computer a tablet computer a specialized computer server a smartphone or any other computer system known in the art. In certain embodiments server computer represents a computer system utilizing clustered computers and components that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. In general server computer is representative of any programmable electronic device or combination of programmable electronic devices capable of executing machine readable program instructions and communicating with other computer devices via a network. In this embodiment server computer has the ability to communicate with other computer devices to query the computer devices for information.

Extract Transform and Load ETL program residing in server computer has the ability to receive source documents sent from computer device . ETL program can also receive source documents from multiple computer devices not illustrated in . ETL program can transform the source documents and load the transformed documents i.e. target documents into a target storage location such as database . Such a transformation also referred to as an ETL process transforms the content of a source document e.g. HTML to plain text and stores the transformed content in the form of a target document. ETL program can be a server based program. ETL program may comprise programs or tools such as validation program and an index containing the target documents archived in the target storage location. In this embodiment ETL program communicates with validation program residing in server computer .

Validation program residing in computer server has the ability to compare source documents to target documents and determine if the transformation during the ETL process was accurate. In one embodiment validation program is capable of creating a non rasterized version such as a PDF document of both the source document and the target document. In another embodiment validation program is capable of querying a program not illustrated in for the non rasterized versions of the source document and the target document. Validation program compares the non rasterized source document to the non rasterized target document to determine whether or not the transformation was accurate. In this embodiment upon determining the transformation was accurate validation program deletes the source document.

In general network can be any combination of connections and protocols that will support communications between server computer computer device and database . Network can include for example a local area network LAN a wide area network WAN such as the internet a cellular network or any combination of the preceding and can further include wired wireless and or fiber optic connections.

In one embodiment validation program is a web service accessible via network to a user of a separate device e.g. computer device . In another embodiment validation program is operated directly by a user of server computer .

User interface on computer device displays the information that any one of the processes of validation program may display to a user. User interface can be for example a graphical user interface GUI or a web user interface WUI and can display text documents web browser windows user options application interfaces and instructions for operation.

In various embodiments of the present invention computer device can be a laptop computer a tablet computer a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smartphone or any programmable electronic device capable of communicating with server computer and database via network . In this embodiment computer device stores the source documents which ETL program transforms and has the ability of providing an application programming interface API for extracting content in the source documents during the ETL process.

Database can store content of ETL program and validation program such as non rasterized versions of the source and target documents. Database can have a index accessible by a user of computer device ETL program and validation program on server computer . Database can also be located on server computer computer device or any other location in the distributed data processing environment connected to network .

For discussion purposes in this embodiment validation program compares a source document transformed to a target document during an ETL process and determines how accurately the content of the source document is represented in the target document. In another embodiment validation program compares a source document to an index of the source document to determine if the content contained within the source document is accurately represented. Such an embodiment is applicable in an environment where document archiving is performed in a database and where key aspects of the target document are validated with respect to the source document.

Validation program receives a source document step . In this embodiment validation program receives the source document from computer device over network . Alternatively validation program receives the source document from any client device or computer sub system via network . The source document can be an email a Word document an Excel spreadsheet or any other type of document which can be transformed during an ETL process. In this embodiment computer device sends the source document to ETL program and validation program over the network. ETL program transforms the source document to a target document so that it can be stored i.e. archived in a target storage location. The transformation ETL program performs is also known as an ETL process. ETL program can decompose the source document for example separating attachments of the source documents so ETL program can accurately perform the transformation during the ETL process. ETL program transforms content of the source document to another format and designates the document having the other format as the target document. For example an email source document in HTML format may be transformed into a target document in plain text format. Prior to ETL program sending the target document to the target storage location ETL program sends the target document to validation program to ensure the accuracy of the document transformation.

Validation program receives the target document previously transformed from the source document step . In this embodiment validation program receives the target document from ETL program upon completing the ETL process with the transformation of the source document to the target document. In another embodiment validation program has a queue function where validation program queues the target document s prior to receiving them. This queue function allows for validation program to queue the target documents during instances where there are a large quantity of documents are being processed. Accordingly validation program queues the target documents and assigns priority to particular target documents which are to be received first. For example if there is a particular target document in the queue that another program is calling for validation program can move the particular target document to the front of the queue. Further validation program can receive the particular target document first regardless of when the target document was sent by ETL program . In another example validation program assigns priority to target documents of a large size compared to target documents of a smaller size. Assigning priority recognizes the increased likelihood of ETL program not accurately transforming the source document of the larger size during the ETL process. Smaller sized target documents have less content for ETL program to transform so there is a lesser likelihood that ETL program did not accurately transform the source document during the ETL process.

Validation program stores the source document and the target document in temporary storage step . In this embodiment validation program stores the source document and the target document in a temporary storage location allocated in database . In that way temporary storage location of database can act as a buffer for validation program to gain quick access to the source document and target document during the validation process. The source document and the target document are stored in the temporary storage location to ensure the source document is not deleted prior to validation program determining that the target document is an accurate transformation of the source document.

Validation program renders the source document in a non rasterized format step . In this embodiment validation program accesses the source document in temporary storage to render the source document in the non rasterized format. The non rasterized format such as a PDF is where a dot matrix data structure is not present when representing a document. The dot matrix data structure is generally a rectangular grid of pixels which produce an image. Such an image can be for example a letter in a word where the letter d is a pixilated image in the word dog . The non rasterized format such as that of PDF files do not use image based graphics to render a document. It is that type of image that validation program renders. In one example the source document is an email in HTML format and validation program renders the email in a PDF format. In some embodiments validation program renders the PDF of the email in HTML format along with any attachments of the source document. In this embodiment validation program stores the rendered PDF of the email in the same temporary storage location where validation program stores the source document.

Validation program renders the target document in a non rasterized format step . Similar to how validation program renders the source document in the non rasterized format validation program renders the target document in the non rasterized format. In this embodiment validation program accesses the target document in temporary storage to render the target document in the non rasterized format. In this embodiment the non rasterized format of the source document is the same as the non rasterized format of the target document to ensure validation program can perform an accurate determination for accuracy. Alternatively the non rasterized formats of the two rendered documents are different. In one example the target document is an email in plain text format and validation program renders the email in a PDF format. In another example validation program renders a PDF of the email in plain text format as well as any attachments of the email. In this example validation program stores the rendered PDF of the email and any corresponding attachments in the same temporary storage location where validation program stores the target document.

Validation program receives the rendered source document and the rendered target document step . In one embodiment validation program queries a temporary storage location allocated in database to obtain the rendered source and target documents. It should be noted that validation program can query database for any available rendered source and target documents which have yet to be compared for transformation accuracy. In another embodiment validation program has a queue with the rendered source documents and the rendered target documents. In this embodiment upon validation program storing the rendered source and target documents in the temporary storage location allocated in database validation program queues the rendered source and target documents for comparison to determine if the transformation was accurate. In one example a queue is based on the duration that the rendered source and target documents have been stored in the temporary storage location. The longer the duration the higher up the rendered source and target documents are moved in the queue for validation program to receive and compare for transformation accuracy. In another example a queue is based on a file size of the rendered source document. The smaller the file size of the rendered source document the lower the position the rendered source and target documents have in the queue for validation program to compare.

Validation program compares the received rendered source document to the received rendered target document step . In this embodiment validation program compares the received rendered source document to the received rendered target document utilizing known comparison algorithms. Such comparison algorithms examine various aspects of the rendered source document and determine to what extent the various aspects are present in the rendered target document. An aspect of a document may be tokens e.g. text present in the rendered source document. For example validation program compares the tokens present in the rendered source document to the tokens present in the target document. Validation program determines which tokens in the rendered source document appear in the rendered target document. Further validation program can determine if the tokens appear with the same frequency.

Another aspect of a document may be the layout. For example validation program removes the text from both the rendered source and target document to determine the how accurately the layout of the rendered source document compares to the rendered target document. In this example validation program uses an image histogram of the layout for the rendered source document and an image histogram of the layout for the rendered target document to determine the accuracy of the transformation. Image histograms represent the tonal distribution in a digital image which in this example is the layout of both the rendered source and target documents. The more similar the image histograms i.e. the more overlapping the more accurate the transformation of the layout between the rendered source document and the rendered target document.

Another aspect of a document may be the overall visual appearance. For example validation program compares the overall visual appearance of the rendered source document to that of the rendered target document. Such a comparison can be ideal for a source document of a smaller storage size because there is less content that ETL program transfers to the target document. In one embodiment validation program utilizes a similar method of comparing the layouts of the documents where validation program utilizes image histogram comparison for entire rendered source document. Validation program compares the overall image histogram of the rendered source document to the rendered target document to determine the accuracy of the transformation.

In another embodiment validation program identifies embedded objects such as tables or images in the rendered source document and determines if the identified embedded objects exist in the rendered target document. Validation program can also determine how accurately the embedded objects in the rendered source document compare to the rendered target document. For example validation program compares the dimensions of the embedded objects e.g. tables and images in the rendered source document to identify if the embedded objects are accurately presented in the rendered source document.

Validation program determines if a similarity threshold has been reached decision step . The similarity threshold serves as a validation of the accuracy of the document transformation. In this embodiment validation program receives a user input specifying the similarity threshold. In one embodiment the similarity threshold is 98 transformation accuracy where 98 of the overall target document is contained in the source document. In another embodiment validation program has multiple similarity thresholds where there is one similarity threshold for the token e.g. text accuracy and another similarity threshold for the layout accuracy. For example validation program has a token accuracy threshold of 99 with a layout threshold of 90 . Multiple similarity thresholds provide for designating what content of the source document is more important when compared to the target document.

If validation program determines the similarity threshold has been reached yes branch step validation program proceeds to step . If validation program determines the similarity threshold has not been reached no branch step validation program proceeds to step where validation program notifies the user that the transformation of the source document to the target document is not accurate. Alternatively validation program prompts notification of the user that the transformation of the source document to the target document is not accurate.

Validation program determines to delete the source document from the temporary storage step . In this embodiment upon determining the similarity threshold level was met and the transformation of content from the source document to the target document was accurate validation program deletes the source document from the temporary storage. In one embodiment validation program notifies database to delete the source document along with the rendered source document from the temporary storage. In another embodiment if validation program is located on the same server computer as database validation program triggers the deletion of the source document and the rendered source document.

Validation program notifies the user that the similarity threshold has not been reached step . In this embodiment validation program prompts a window on user interface of computer device to notify the user the similarity threshold has not been reached for the transformation of the source document to the target document during the ETL process ETL program performs. In another embodiment validation program prompts the source document and the target document which have not met the similarity threshold in decision step . In some embodiments the user can have the ability to override the similarity threshold via a user input specifying the source document and target document are similar. Alternatively validation program can have the ability to receive a user input requesting ETL program to perform the ETL process for the source document again in order to transform the source document into a new target document.

Validation program stores the target document in the target storage step . In this embodiment validation program stores the target document in database i.e. target storage . Accordingly validation program can transfer the target document from the temporary storage location allocated in database to the target storage i.e. archive located within database . In this embodiment upon storing the target document validation program deletes the target document and the rendered target document from the temporary storage location. In another embodiment validation program requests a separate archiving engine in database store the target document in the target storage location.

Server computer includes communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are examples of computer readable tangible storage devices. A storage device is any piece of hardware that is capable of storing information such as data program code in functional form and or other suitable information on a temporary basis and or permanent basis. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage device.

Validation program is stored persistent storage for execution by one or more of computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage medium that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including systems and devices within or controlled by server computer . In these examples communications unit includes one or more wireless network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Computer programs and processes such as validation program may be downloaded to persistent storage through communications unit or uploaded to another system through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to server computer . For example I O interface may provide a connection to external devices such as a keyboard keypad a touch screen and or some other suitable input device. External devices can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention can be stored on such portable computer readable storage media and can be loaded onto persistent storage via I O interface s . I O interface s may also connect to a display .

Display provides a mechanism to display data to a user and may be for example a touch screen or a computer monitor.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

