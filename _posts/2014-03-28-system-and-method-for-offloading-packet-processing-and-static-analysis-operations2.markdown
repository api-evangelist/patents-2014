---

title: System and method for offloading packet processing and static analysis operations
abstract: According to one embodiment, a network security device configured to detect malicious content within received network traffic comprises a traffic analysis controller (TAC) is provided. The traffic analysis controller comprises a network processing unit (NPU) and is configured to perform at least packet processing on the NPU with a set of pre-filters. In addition, the network security device further comprises a central processing unit (CPU) and is configured to perform at least virtual machine (VM)-based processing. The set of pre-filters is configured to distribute objects of received network traffic such that either static analysis or dynamic analysis may be performed on an object to determine whether the object contains malicious content. The static analysis may be performed on either the NPU or the CPU while the dynamic analysis is performed on the CPU.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09591015&OS=09591015&RS=09591015
owner: FireEye, Inc.
number: 09591015
owner_city: Milpitas
owner_country: US
publication_date: 20140328
---
Embodiments of the disclosure relate to the field of network security. More specifically embodiments of the disclosure relates to a system apparatus and method for conducting packet processing and or static analysis of objects by a traffic analysis controller being logic different from a host in order to offload packet processing and or static analysis from the host.

Over the last decade malicious software has become a pervasive problem for Internet users as most networked resources include software vulnerabilities that are subject to attack. For instance over the past few years more and more vulnerabilities are being discovered in software that is loaded onto computers such as vulnerabilities within operating systems for example. While some vulnerabilities continue to be addressed through software patches prior to the release of such software patches network resources continue to be targeted by exploits.

In general an exploit is information that attempts to take advantage of a vulnerability by adversely influencing or attacking normal operations of a targeted computer. As an illustrative example a Portable Execution Format PDF file may be infected with an exploit that is activated upon execution opening of the PDF file and takes advantage of a vulnerability associated with a certain type and version of a PDF Reader application.

Currently one type of network security device widely used for detecting exploits is designed to identify packets suspected of containing known exploits attempt to block halt propagation of such exploits and log report information associated with such packets through an alert. In particular this conventional network security device is implemented with a processor that is wholly responsible for performing packet processing a static analysis and a dynamic analysis. This type of conventional network security device may experience certain disadvantages.

For instance one disadvantage with conventional network security devices is that the packet processing the static analysis and the dynamic analysis may simultaneously request limited resources of the network security device s processor. Such simultaneous need for the processor s resources inherently leads to one or more processes waiting on others to finish and subsequently relinquish the processor s resources. This dilemma limits the speed efficiency and detection efficacy at which the network security device may analyze received network traffic especially when the network traffic is being received at a high rate.

Various embodiments of the disclosure relate to an electronic device with network connectivity such as a network security device for example where the electronic device comprises a traffic analysis controller TAC and threat detection and prevention TDP logic. According to one embodiment of the disclosure the traffic analysis controller comprises a packet capture framework PCF which captures packets or objects from received network traffic. The PCF passes the captured objects to a set of pre filters which comprises logic to determine whether an object is of interest namely whether the object is of or contains a particular type of network traffic. In one embodiment an object that is determined to be of interest is passed to either a static analysis engine operating on the traffic analysis controller and or a dynamic analysis engine operating separate from the traffic analysis controller but within the network security device e.g. part of the TDP logic .

For instance as illustrated embodiments the network security device may be implemented as a network appliance with a chassis housing where both the traffic analysis controller and the TDP logic are implemented and contained within the same chassis housing. Where the network security device is implemented as a rack of blade servers it is contemplated that the traffic analysis controller may be deployed within a first blade server while the TDP logic is deployed within the first blade server or a different second blade server that is communicatively coupled to the first blade server.

According to this embodiment of the disclosure the static analysis engine comprises at least one subsystem that conducts a static analysis on incoming objects where the analysis of the objects is conducted without certain types of processing e.g. opening an object running the object etc. . The static analysis may include signature matching e.g. exploit signature checks vulnerability checks heuristic analysis e.g. statistical analysis source reputation checking blacklist or whitelist checking or the like. For instance the static analysis engine subsystem s associated with signature matching may comprise logic that conducts exploit signature checks and or vulnerability signature checks on objects of at least a first traffic type e.g. domain name system DNS to identify whether characteristics of any of these objects indicate that the object is associated with a malicious attack e.g. indicative of an exploit . Furthermore another static analysis engine subsystem may be associated with heuristics that examines the metadata or attributes of the object to determine whether a certain portion of the object has characteristics that suggest the object is an exploit and or is associated with a malicious attack.

Furthermore the dynamic analysis engine also comprises one or more dynamic analysis engine subsystems. For instance a dynamic analysis engine subsystem may comprise virtual execution logic to automatically analyze without user assistance content within objects of at least a second traffic type e.g. Hypertext Transfer Protocol HTTP in order to determine whether any of these objects is an exploit. Such objects or packets are provided to the dynamic analysis engine from the traffic analysis controller automatically and without user assistance.

Therefore by compartmentalizing the packet processing and the virtual machine VM based processing the amount of network traffic that the network security device may process over a given time period is now scalable. Furthermore using a network processing unit NPU on the traffic analysis controller for packet processing allows for an increased processing speed due to hardware acceleration as much of the packet processing is done within the hardware and or firmware of the NPU.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

Herein the term traffic analysis controller TAC may be construed as logic that conducts packet processing and or some static analysis of received objects to determine 1 whether further in depth processing of the object is needed to determine whether the object is malicious e.g. associated with a malicious attack or benign and or 2 whether an alert or other warning scheme is needed to advise an administrator of the results from the static analysis. According to one embodiment of the disclosure the traffic analysis controller comprises a processor having access to on chip or off chip memory and being implemented on a substrate. The substrate may be one of several form factors including but not limited or restricted to a network interface card an expansion card a circuit board a semiconductor component or a plug in module. In one embodiment the traffic analysis controller may be a network interface card that comprises a network processing unit communicatively coupled to a non volatile memory where the memory includes several software modules that when executed conducts packet processing and static analysis of objects as described below.

A processing unit may be construed as any type of logic with data processing capability including a general purpose processor a processor core a microcontroller an application specific integrated circuit ASIC a network processor a digital signal processor a virtual processor a field programmable gate array FPGA or the like.

Herein the term object generally refers to a collection of data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables it to be classified for purposes of analysis. During static analysis for example the object may exhibit a set of expected characteristics and during processing a set of expected behaviors. The object may also exhibit a set of unexpected characteristics and a set of unexpected behaviors that may be evidence of an exploit and potentially allow the object to be classified as an exploit.

Examples of objects may include one or more flows or a self contained element within a flow itself. A flow generally refers to related packets that are received transmitted or exchanged during a communication session and multiple flows are related packets that are received transmitted or exchanged during related communication sessions. For convenience a packet is broadly referred to as a series of bits or bytes having a prescribed format which may include all types of network packets frames or cells.

As an illustrative example an object may include a set of one or more flows such as 1 a sequence of transmissions in accordance with a particular communication protocol e.g. User Datagram Protocol UDP Transmission Control Protocol TCP or HTTP etc. or 2 inter process communications e.g. Remote Procedure Call RPC or analogous processes etc. . Similarly as another illustrative example the object may be a self contained element where different types of such objects may include a non executable file such as a document or a dynamically link library a Portable Document Format PDF file a JavaScript file Zip file a Flash file a document for example a Microsoft Office document an electronic mail email downloaded web page an instant messaging element in accordance with Session Initiation Protocol SIP or another messaging protocol or the like.

An exploit may be construed as information e.g. executable code data command s etc. that is associated with a malicious attack on an electronic device namely an attempt normally unbeknownst to its user to 1 alter control of the electronic device where the change in control is unwanted or unintended by the user and or 2 gain access to stored information or information that is available to the user. According to one embodiment an exploit attempts to take advantage of a vulnerability. Typically a vulnerability is a coding error or artifact of software e.g. computer program that allows an attacker to alter legitimate control flow during processing of the software computer program by an electronic device and thus causes the electronic device to experience undesirable or unexpected behaviors. The undesired or unexpected behaviors may include a communication based anomaly or an execution based anomaly which for example could 1 alter the functionality of an electronic device executing application software in a malicious manner 2 alter the functionality of the electronic device executing that application software without any malicious intent and or 3 provide unwanted functionality which may be generally acceptable in another context. To illustrate a computer program may be considered as a state machine where all valid states and transitions between states are managed and defined by the program in which case an exploit may be viewed as seeking to alter one or more of the states or transitions from those defined by the program.

 Malware may be construed as computer code that executes an exploit to take advantage of a vulnerability for example to harm or co opt operation of an electronic device or misappropriate modify or delete data. Conventionally malware is often said to be designed with malicious intent. An object may constitute or contain an exploit and or malware.

The term object of interest may be construed as any object of the received network traffic associated with a packet selected by a pre filter to be routed to one or more of the subsystems of either the static analysis engine or the dynamic analysis engine. For instance an object of interest to the communication protocol traffic subsystem may be any object of a flow such as a sequence of transmissions in accordance with a particular communication protocol e.g. User Datagram Protocol UDP Transmission Control Protocol TCP or Hypertext Transfer Protocol HTTP that is selected by the communication protocol pre filter to be routed to the communication protocol traffic subsystem for analysis. Throughout the specification and claims the terms object of interest and object under analysis are used interchangeably.

The term transmission medium is a physical or logical communication path between two or more electronic devices e.g. any devices with data processing and network connectivity such as for example a security appliance a server a mainframe a computer such as a desktop or laptop netbook tablet firewall smart phone router switch bridge etc. . For instance the communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In certain instances the terms detected is used herein to represent that there is a prescribed level of confidence or probability on the presence of an exploit within an object under analysis. For instance the logic of the static analysis engine detects a potential exploit by examining characteristics or features of an object under analysis and in response determining whether the object has characteristics that suggest the object is an exploit and or is associated with a malicious attack. This determination may be conducted through analysis as to whether there is at least a first probability that such characteristics exist. Likewise the virtual execution logic detects the presence of an exploit by monitoring or observing unexpected or anomalous behaviors or activities of an object under analysis and in response determining whether there is at least a second probability perhaps higher than the first probability that the object has characteristics indicative of an exploit and thus is associated with a malicious attack.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware. Also the term comparison generally means determining if a match e.g. a certain level of correlation is achieved between two items where one of the items may include a particular signature pattern.

The terms binary and binaries may be construed as executable code commonly referred to as object or binary code. Examples of binaries may include but are not restricted or limited to a compiled executable program.

Lastly the terms or and and or and as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. Also A B represents any of the following A B A or B A and B. An exception to this definition will occur only when a combination of elements or functions are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a flow of network traffic within a networking system is shown. Herein some or all of the incoming objects associated with monitored network traffic are received by network security device . The network security device is configured to receive incoming objects over a communication network . Thereafter the network security device is configured to detect using at least a static analysis and a dynamic analysis which objects are to be flagged as including characteristics that suggest the object is an exploit and or is associated with a malicious attack.

Herein the network security device may be communicatively coupled with the communication network to monitor flows in a passive or active manner. In a passive manner the network security device may be communicatively coupled so as to capture and duplicate one or more objects associated with a flow propagating over a communication path . The duplicated copy is then analyzed while the original flow is passed to one or more client devices M 1 where one or more client devices may be simply represented as client device s . Such a network security device is sometimes referred to as a tap or network tap which receives network traffic over communication path between the communication network and client device s M 1 and re routes some or all of the network traffic to the network security device .

Alternatively the network security device may operate in an active manner with an in line deployment where the network traffic over the communication path is directly received by the network security device . In other words the network security device is positioned between the communication network and the client device s and analyzes objects within the original version of the network traffic. Subsequent to such analysis for analyzed objects determined to be associated with a malicious attack the objects may be precluded from being passed to the client device s . Rather the objects may be quarantined and perhaps held for further forensic analysis.

Referring to an exemplary block diagram of a plurality of network security devices N 1 e.g. N 3 communicatively coupled to a management system via a communication network is shown. Communication network may be configured as an intranet operating as a private network shared by the network security devices and management system or communication network may be configured as a public network such as the Internet for example.

In general the management system is adapted to manage network security devices . For instance the management system may be responsible for automatically updating one or more exploit signatures and or vulnerability signatures used by the static analysis engine within some or all of network security devices . Each of these signatures may represent a prior detected exploit or an uncovered software vulnerability. Such sharing may be conducted automatically or manually e.g. uploaded by an administrator. Also such sharing may be conducted without charge among the network security devices or subject to a paid subscription basis.

Herein according to the embodiment illustrated in a first network security device is an electronic device that is adapted to analyze information associated with network traffic routed over the communication network between at least one server device and at least one client device . The communication network may include a public network such as the Internet in which case an optional firewall not shown may be interposed prior to network security device e.g. first network security device . Alternatively the communication network may be a private network such as a wireless data telecommunication network wide area network WAN a type of local area network LAN or a combination of networks.

As shown in the first network security device comprises a traffic analysis controller communicatively coupled to a host which may include a TDP logic hereinafter TDP logic . The traffic analysis controller comprises communication ports a network processing unit NPU communicatively coupled to logic e.g. software modules residing in persistent storage to conduct packet processing and or certain static analysis on objects associated with the received network traffic and a connector . As shown the persistent storage maintains several software modules including static analysis engine a set of pre filters a signatures rule set packet capture framework PCF and or communication interface logic . As shown the communication ports may be adapted to receive network traffic via path so as to connect network security device to communications networks and or while connector provides a communication path to a connector of the TDP logic over transmission medium .

As shown traffic analysis controller and TDP logic may reside within the same chassis housing of the network security device . Of course as described above the network security device may implemented as a group of electronic devices in close physical proximity e.g. rack of blade servers where the traffic analysis controller may be deployed within a first electronic device while the TDP logic is deployed within a second electronic device. For this deployment the transmission medium may include Twinaxial cabling coaxial cabling twisted pair cabling such as Category 5 5e 6 6a or the like.

In general the traffic analysis controller operates as a data capturing device that is configured to receive data propagating to from the client device s and provide at least some of this data to the packet capture framework PCF of the network security device . The traffic analysis controller may provide at least some of the original network traffic to the PCF or duplicate at least some of the network traffic and provide the duplicated copy to the PCF .

According to one embodiment of the disclosure the static analysis engine may be one or more software modules executed by a first processing unit while the dynamic analysis engine may be one or more software modules executed on a second processing unit. The first and second processing units may be different processing units where each processing unit may be a different physical processor located within the same processor package or at different physical locations a different core processor within the same processor package a different virtual processor or the like. Of course the first and second processing units may be the same physical core virtual processor.

As an example as shown in the static analysis engine when deployed as one or more software modules may be executed by the network processing unit NPU being a processing unit for the traffic analysis controller while the dynamic analysis engine may be executed by a central processing unit CPU being a processing unit for the host . The term host refers to any portion of the network security device not included within the traffic analysis controller . Of course it is contemplated that certain functionality of the static analysis engine may be conducted by the host such as the TDP logic for example and executed by the CPU . In this embodiment the packet processing e.g. pre filtering and or certain static analysis functionality is off loaded from the CPU to the NPU as described below and illustrated in .

In an embodiment in which the packet processing e.g. processing of the set of pre filters and some or all of the processing of the static analysis engine is off loaded from the CPU of the host to the NPU of the traffic analysis controller a computational advantage arises. In particular off loading of the packet processing and or at least some functionality by the static analysis engine allows the CPU to devote most of its resources to VM based processing and subsequent monitoring. In this implementation it is now possible to instantiate more VMs and or run the analyses of the VMs for a longer time period as packet processing is not simultaneously requesting the resources of the CPU . Therefore this logical configuration provides an ability to scale the processing of the network security device by increasing the number of VMs used during the processing as well as potentially performing deep packet inspection and or a static analysis on a processor separate from that which is executing the VMs.

Referring to a block diagram of logic associated with the traffic analysis controller TAC of the network security device is shown. As illustrated in the traffic analysis controller comprises communication interface logic packet capture framework PCF pre filters signatures rule set static analysis engine and connector which provides connectivity from the traffic analysis controller to the threat detection and prevention TDP logic .

The PCF controls the flow of the network traffic received by the network security device . Specifically the PCF confirms that the network security device is operating properly according to the deployment scenario of the network security device . For instance if the network security device is deployed off line or in a passive mode the PCF may be configured to ensure that the network security device receives a copy of the received network traffic and passes the copy of the received network traffic to the set of pre filters while the network traffic proceeds to one or more of the client device s . . . and or . In the off line deployment scenario the network security device does not block or delay the network traffic from reaching a client device e.g. client device while the static and or dynamic analysis is being performed. Alternatively if the network security device is deployed in line the PCF does not permit blocks halts the received network traffic to pass through the network security device to the client device until the network security device has determined the received network security traffic does not contain malicious content once processing and analysis are complete. In the in line deployment scenario the PCF ensures that the received network traffic passes to the client device after processing and analysis are complete e.g. the network traffic does not contain malicious content.

The PCF of the traffic analysis controller is capable of receiving and routing objects associated with network traffic to the set of pre filters . According to one embodiment of the disclosure the set of pre filters comprise two or more filtering modules that perform an initial inspection of objects of received network traffic to determine the object type e.g. the type of traffic associated with the object . In such an embodiment one pre filter is associated with objects to be routed to the static analysis engine and another pre filter may be associated with objects to be routed to the dynamic analysis engine of .

Furthermore each pre filter is associated with a subsystem of either the static analysis engine or the dynamic analysis engine corresponding to the type of traffic for which the pre filter is searching. For example a pre filter searching for communication protocol traffic may be associated with a communication protocol traffic subsystem deployed within the dynamic analysis engine . When a pre filter determines that an object of the received network traffic is an object type of traffic for which the pre filter is searching the object is considered an object of interest and is routed from the pre filter to the analysis engine subsystem with which the pre filter is associated. When no pre filter determines that the object is an object of interest the object is permitted to pass to the client device without being routed to either the static analysis engine or the dynamic analysis engine .

The set of pre filters located on the traffic analysis controller may route an object of interest to a subsystem of the static analysis engine located on the traffic analysis controller . Additionally or in the alternative the set of pre filters may route objects of interest to a subsystem of the dynamic analysis engine in the TDP logic located within the host . The pre filter that determines an object is of interest may provide the entire object or certain content within the object for example one or more objects that are part of one or more flows packet payloads or the like to the corresponding analysis engine subsystem.

In some embodiments an object of interest may be provided to the static analysis engine and once the static analysis engine has finished its analysis a determination is made as to whether the object of interest may contain malicious content. Thereafter the object of interest may not be provided to a subsystem within the dynamic analysis engine for further in depth analysis but rather information is provided to logic within the host to initiate an alert message to a network administrator user or another entity regarding presence of a detected object having characteristics associated with a malicious attack. For instance a call back traffic subsystem of may perform such operations upon detecting a call back condition. Alternatively in other embodiments an object of interest may be provided to the static analysis engine analyzed and then provided to the dynamic analysis engine for further analysis prior to the network security device making a determination as to whether the object of interest has characteristics that suggest the object is an exploit and or is associated with a malicious attack. For instance a domain name system DNS subsystem of may perform such operations.

In one embodiment of the disclosure as illustrated in the set of pre filters may comprise four pre filters searching for four types of traffic including 1 DNS traffic 2 traffic containing call back activity 3 communication protocol traffic and 4 traffic containing at least one binary. In such an embodiment the four pre filters correspond to the following subsystems of the static analysis engine or the dynamic analysis engine 1 DNS traffic subsystem 2 call back traffic subsystem 3 communication protocol traffic subsystem and or 4 binary traffic subsystem . Furthermore the set of pre filters are located on the traffic analysis controller along with the static analysis engine .

In the embodiment the static analysis engine comprises the DNS traffic subsystem and the call back traffic subsystem . The dynamic analysis engine located on the host comprises the communication protocol traffic subsystem and the binary traffic subsystem as shown in .

In an alternative embodiment the functions of the communication protocol traffic subsystem and the binary traffic subsystem may be incorporated into a single subsystem on the dynamic analysis engine while the functions of the DNS traffic subsystem and the call back traffic subsystem are incorporated into a single subsystem on the static analysis engine .

Referring to the DNS traffic subsystem and the call back traffic subsystem when executed on one or more processors may be configured to perform static analysis on a particular object such as exploit signature checks and or vulnerability signature checks by exploit matching logic and or vulnerability matching logic for example. Such signature check operations may involve accessing pre stored signatures from signature rules set stored on one or more non transitory storage mediums such as persistent storage .

In general the DNS traffic subsystem and the call back traffic subsystem of the static analysis engine are communicatively coupled to receive one or more objects within network traffic which may be related or unrelated to each other. For instance one object may be a series of packets containing one or more requests to a DNS server operating as a flow routed over communication network . The subsystems of the static analysis engine comprise logic which analyzes each of the objects for known exploits using exploit signatures and for the protocol activity using vulnerability signatures. For instance the exploit matching logic within the DNS traffic subsystem and the call back traffic subsystem performs exploit signature checks which may involve a comparison of one or more pre stored exploit signatures pre configured and predetermined attack patterns against the object of interest from signatures rule set .

Additionally the DNS traffic subsystem and the call back traffic subsystem of the static analysis engine may comprise heuristic logic which analyzes each of the objects using metadata or attributes of the object of interest to determine whether a certain portion of the object has characteristics that suggest the object is an exploit and or is associated with a malicious attack. For instance the heuristic logic may analyze the object of interest to determine whether certain portions of the object corresponds to one or more malicious identifiers which may include but are not limited or restricted to a particular source or destination address e.g. URLs IP addresses MAC addresses etc. that is associated with known exploits exploit patterns or even shell code patterns.

Upon detecting a match during the exploit signature check vulnerability signature check and or the heuristic check an object under analysis has characteristics that suggest the object is an exploit and or is associated with a malicious attack the static analysis engine may be adapted to upload the static analysis results for storage in results database . These results may include but are not limited or restricted to i an exploit identifier such as a particular name family of the suspected exploit if known ii source address e.g. Uniform Resource Locator URL Internet Protocol IP address etc. of a source of the suspect object iii time of analysis and or iv information associated with anomalous characteristics pertaining to the object of interest.

According to another embodiment of the disclosure the PCF may be further configured to capture metadata from network traffic intended for client device . According to one embodiment the metadata may be used at least in part by the heuristic logic and or to determine protocols application types and other information that may be used by logic within the network security device to determine particular software profile s . The software profile s are used for selecting and or configuring a run time environment in one or more virtual machines selected or configured as part of the dynamic analysis engine as described below. These software profile s may be directed to different versions of the same software application for fetching corresponding software image s from profile software rule set .

Furthermore according to one embodiment of the disclosure packet processing and static analysis operations are off loaded to the traffic analysis controller while VM based processing remains on the host . Herein the VM based analysis normally requires significantly more computing resources including both CPU and memory which may be best provided by the host e.g. main system than within a NIC deployment of the traffic analysis controller . Hence the static analysis engine may be adapted to route information that is used by the scheduler dynamic analysis engine and or reporting logic not shown to conduct further analysis as to whether the suspect object is associated with a malicious attack e.g. an exploit . This information may include but is not limited or restricted to 1 the suspect object 2 anomalous characteristics of the suspect object based on signature matching heuristics and other static analysis that may indicate the presence of an exploit 3 a score generated to classify a threat level of the suspect object being a possible exploit

Referring to a block diagram of logic associated with the threat detection and prevention TDP logic of the host hereinafter TDP logic included within the network security device is shown. As illustrated the TDP logic comprises dynamic analysis engine software profile rule set a scheduler and a second connector . The second connector enables the TDP logic to exchange data with the traffic analysis controller over transmission medium . The communication protocol traffic subsystem and the binary traffic subsystem of the dynamic analysis engine include virtual execution environments score determination logic and monitoring logic . The virtual execution environments is comprised of one or more virtual machines VMs K 1 and L 1 .

In general at least one pre filter of the set of pre filters located on the traffic analysis controller provides the objects of interest to the dynamic analysis engine for in depth dynamic analysis using virtual machines VMs or . For instance the communication protocol traffic subsystem may simulate transmission and or receipt by a destination device comprising the virtual machine.

According to one embodiment one or more VMs or within the virtual execution environments may be configured with all of the software profiles corresponding to the software images stored within software profile rule set . Alternatively the VMs or may be configured according to a prevalent software configuration software configuration used by an electronic device within a particular enterprise network e.g. client device or an environment that is required for the object to be processed including software such as a web browser application PDF reader application or the like. However for a known or recognized vulnerability the VMs or may be more narrowly configured to software profiles associated with vulnerable software.

As previously stated and shown in one embodiment of the set of pre filters comprises four pre filters searching for four types of traffic including 1 DNS traffic 2 traffic containing call back activity 3 communication protocol traffic and 4 traffic containing at least one binary. These four pre filters also correspond to the following analysis engine subsystems 1 DNS traffic subsystem 2 call back traffic subsystem 3 communication protocol traffic subsystem and 2 binary traffic subsystem . Furthermore the dynamic analysis engine located on the TDP logic of the host comprises the communication protocol traffic subsystem and the binary traffic subsystem .

Upon receiving an object of interest from pre filters the scheduler may determine which software image s are associated with software having the vulnerability. In one embodiment the determination may be based on the static analysis conducted by the static analysis engine . Thereafter the software profile s are selected by the scheduler to fetch these software image s for configuration of VM or . This tailored selection scheme avoids VM configuration for software that does not feature the matched software vulnerability.

As a second illustrative example the scheduler may be adapted to configure the multiple VMs for concurrent virtual execution of a variety of different versions of the software in efforts to determine whether the object of interest identified by the communication protocol traffic subsystem and the binary traffic subsystem is an exploit.

Of course it is contemplated that the VM configuration described above may be handled by logic other than the scheduler . For instance although not shown the dynamic analysis engine may include configuration logic that is adapted to determine which software image s are associated with software having the vulnerability. The vulnerability may be uncovered by the static analysis engine . This configuration logic may transmit the VM configuration information to the scheduler to handle VM configuration as described above alternatively the dynamic analysis engine may exclusively handle the VM configuration.

According to one embodiment of the disclosure the communication protocol traffic subsystem is adapted with the virtual execution environment to execute one or more VMs that operating in combination with a protocol sequence replayer replay logic simulates the receipt and execution of an object of interest within a run time environment as expected for the type of object. Similarly the binary traffic subsystem is adapted with the virtual execution environment to execute one or more VMs that operating in combination with a protocol sequence replayer replay logic simulates the receipt and execution of an object of interest within a run time environment as expected for objects including binaries.

As an illustrative example the communication protocol traffic subsystem may conduct virtual processing of an object of interest e.g. a HTTP communication session and provide the object of interest to the VM s . . . and or . The replay logic within the communication protocol traffic subsystem may be adapted to provide and sometimes modify e.g. modify IP address packets associated with the objects of interest containing one or more objects containing Internet traffic and synchronize any return network traffic generated by the virtual execution environment in response to the packets. Hence the communication protocol traffic subsystem may suppress e.g. discard the return network traffic such that the return network traffic is not transmitted to the communication network . For instance for a particular suspect object being a flow such as a TCP or UDP sequence the replay logic may replay the data packets by sending packets to the virtual execution environment via a TCP connection or UDP session. Furthermore the replay logic may synchronize return network traffic by terminating the TCP connection or UDP session.

As another illustrative example the binary traffic subsystem may conduct virtual processing of an object of interest e.g. a binary extracted from network traffic and provide the object of interest to the VM s . . . and or . The replay logic within the binary traffic subsystem may be adapted to return information to the VM s . . . and or in the event that the binary requests information from remote sources.

As further shown in the monitoring logic within the dynamic analysis engine may be configured to monitor behavior of the object being processed by one or more VMs . . . and or or . . . and or for detecting anomalous or unexpected activity indicative of an exploit. If so the object may be determined as being associated with malicious activity and thereafter monitoring logic operating with score determination logic may route the VM based results e.g. computed score information associated with the detected anomalous behaviors and other information associated with the detected malicious activity by the suspect object to results database of .

According to one embodiment of the disclosure the score determination logic comprises one or more software modules that are used to determine a probability or level of confidence that the object of interest is an exploit. Score determination logic is configured to generate a value referred to as a score that classifies the threat of the possible exploit. Of course a score may be assigned to the suspect object as a whole by mathematically combining the scores determined by analysis of different content associated with the same object of interest to obtain an overall score for that object of interest.

When the static analysis results or the VM based results indicate that the object of interest under analysis contains malicious content as shown in the object may be held within the network security device and not permitted to pass to one or more of the client devices . . . and or . Alternatively the object may be permitted to pass to one or more of the client devices . . . and or where further monitoring of the object may take place. Furthermore in either case an administrator may be alerted to the presence of an object containing malicious content. Such an alert may be issued e.g. by email or text message to security administrators for example communicating the urgency in handling one or more objects containing at least characteristics that suggest the object is an exploit and or is associated with a malicious attack. An issued alert may also provide a designation of a selected threat level of the one or more objects containing at least characteristics indicative of malicious content.

Of course in lieu of or in addition to static scanning operations being conducted by network security devices it is contemplated that cloud computing services may be implemented with static analysis engine to perform the exploit and or vulnerability signature checks and or with dynamic analysis engine to conduct virtual execution on content within the object of interest as described herein. In accordance with this embodiment network security device may be adapted to establish secured communications with cloud computing services of for exchanging information.

Referring to an exemplary diagram of a flowchart illustrating operations of a network security device determining whether an object of received network traffic requires analysis by an analysis engine subsystem is shown. The traffic analysis controller TAC of the network security device of receives network traffic block . Thereafter a set of pre filters operating on the traffic analysis controller perform an initial inspection of an object within the received network traffic to determine whether the object is an object of interest block . This may be conducted through analysis of the object type.

If none of the pre filters within the set of pre filters finds the object to be an object of interest e.g. the type of object under analysis is not recognized by the pre filters the network security device may allow the object and associated packets or flows if applicable to pass to the client device without further analysis NO at block . However if a pre filter finds the object to be an object of interest such as the object contains traffic of the type for which the pre filter is searching for example YES at block the object of interest may be routed to the appropriate analysis engine subsystem for further processing block .

Upon receiving the object of interest the appropriate analysis engine subsystem performs processing to determine whether the object of interest includes malicious content so as to constitute an exploit block . If the appropriate analysis engine subsystem determines that the object of interest does not have characteristics associated with a malicious attack e.g. not an exploit the network security device may allow the object e.g. associated packet s or flows to pass to the client device NO at block . However if the appropriate analysis engine subsystem determines that the object has characteristics associated with a malicious attack YES at block the network security device may 1 conduct further in depth analysis e.g. DNS subsystem determines object is suspicious and further analysis by the dynamic analysis engine is warranted 2 optionally alert the appropriate administer or security technician of the presence of malicious content 3 prevent the transmission of the object and possibly any packets or flows associated with the object or 4 allow transmission of the object and perform further monitoring block .

Referring to an exemplary diagram of a flowchart illustrating operations of a network security device determining whether an object of received network traffic requires analysis by a communication protocol traffic subsystem is shown. The network security device receives network traffic via the traffic analysis controller block . Thereafter a packet capture framework PCF captures packets of the received network traffic block .

The PCF then sends objects of the received network traffic to the communication protocol pre filter and the communication protocol pre filter determines whether the object is a communication protocol based object block . For instance the communication protocol pre filter may inspect an object searching for an Internet Protocol IP packet comprising a header and a payload. In one embodiment if an object inspected by the communication protocol pre filter is determined to contain an IPv4 or an IPv6 packet the communication protocol pre filter will designate the object as an object of interest and forward the object and possibly any associated packets or flows to the communication protocol analysis engine subsystem. As another example the communication protocol pre filter may designate as objects of interest any object containing packets or data transferred using various communication protocols such as but not limited or restricted to transmission control protocol TCP user datagram protocol UDP dynamic host configuration protocol DHCP hypertext transfer protocol HTTP or file transfer protocol FTP .

If the object is not determined to be a communication protocol based object the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object is determined to be a communication protocol based object i.e. an object of interest to the communication protocol pre filter YES at block the object is routed from the communication protocol pre filter to the communication protocol traffic subsystem of the dynamic analysis engine for processing block .

In one embodiment as the communication protocol traffic subsystem is located within the dynamic analysis engine the processing of the communication protocol traffic subsystem includes VM based processing of the objects of interest. Such dynamic analysis may include virtual execution of the content of the object of interest. In particular one or more VMs of the virtual execution environment of the communication protocol traffic subsystem may simulate loading of packets within an object of interest. The monitoring logic monitors what particular content is loaded and or requested by the object of interest. For instance the VM s may simulate the loading of an object of interest while the monitoring logic monitors for anomalous behavior such as repeated attempts to load the same HTTP address.

If based on the processing by the communication protocol analysis engine the object of interest is not determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object of interest is determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack YES at block the network security device may optionally alert the appropriate administer or security technician of the presence of malicious content block prevent the transmission of the object and possibly any packets or flows associated with the object or allow transmission of the object and perform further monitoring.

Referring to an exemplary diagram of a flowchart illustrating operations of a network security device determining whether an object of received network traffic requires analysis by a binary traffic subsystem is shown. The network security device receives network traffic via the traffic analysis controller block . Thereafter a packet capturing framework PCF captures packets of the received network traffic block .

The PCF then routes objects of the received network traffic to the binary traffic pre filter and the binary traffic pre filter determines whether the object is an object containing a binary block . For instance the binary traffic pre filter may inspect an object searching for one or more packets indicating the presence of a binary within the object or flow. In particular the binary traffic pre filter may inspect the payload of a network packet to determine whether particular data is present in the payload. Alternatively the binary traffic pre filter may determine the presence of particular data in the payload through inspection of the header of a network packet.

If the object is not determined to be an object containing a binary the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object is determined to be an object containing a binary such as an object of interest to the binary traffic pre filter YES at block the object of interest is routed from the binary traffic pre filter to the binary traffic subsystem of the dynamic analysis engine for processing block .

In one embodiment as the binary traffic subsystem is located within the dynamic analysis engine the processing of the binary traffic subsystem includes VM based processing of the objects of interest. Such dynamic analysis may include virtual execution of the content of the object of interest. In particular one or more VMs of the virtual execution environment of the binary traffic subsystem may simulate loading of packets within an object of interest. The monitoring logic monitors what particular content is loaded and or requested by the object of interest. For instance VM may simulate the execution or loading of a file such as a PDF file located within an object of interest while monitoring logic monitors for anomalous behavior that deviates from expected behavior present when executing or loading such a file.

If based on the processing by the binary traffic subsystem the object of interest is not determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object of interest is determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack YES at block the network security device may optionally alert the appropriate administer or security technician of the presence of malicious content block prevent the transmission of the object and possibly any packets or flows associated with the object or allow transmission of the object and perform further monitoring.

Referring to an exemplary diagram of a flowchart illustrating operations of a network security device determining whether an object of received network traffic requires analysis by a DNS traffic subsystem is shown. The network security device receives network traffic via the traffic analysis controller block . Thereafter a packet capture framework PCF captures packets of the received network traffic block . In particular the DNS traffic pre filter may designate an object containing a DNS query as an object of interest.

The PCF then routes objects of the received network traffic to the communication protocol pre filter and the DNS traffic pre filter determines whether the object is an object containing DNS traffic block . For instance the DNS traffic pre filter may inspect an object that contains data structures and communication exchanges adhering to the DNS protocol which is a protocol typically used with exchanges over the Internet.

If the object is not determined to be an object containing DNS traffic the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object is determined to be an object containing DNS traffic i.e. an object of interest to the DNS traffic pre filter YES at block the object of interest is routed from the DNS traffic pre filter to the DNS traffic subsystem of the static analysis engine for processing block .

In one embodiment as the DNS traffic subsystem is located within the static analysis engine the processing of the DNS traffic subsystem includes deep packet inspection DPI and or performance of a static analysis using at least exploit signature checks vulnerability signature checks and or heuristic checks on the objects of interest. In particular the exploit matching logic within DNS traffic subsystem may perform a comparison of one or more pre stored exploit signatures from signatures rule set with the object of interest. In particular the DNS traffic subsystem may perform a heuristic analysis to determine whether the object of interest contains anomalous content such as repeated queries to a DNS server.

If based on the processing by the DNS traffic subsystem the object of interest is not determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object of interest is determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack YES at block the network security device may optionally alert the appropriate administer or security technician of the presence of malicious content block prevent the transmission of the object and possibly any packets or flows associated with the object or allow transmission of the object and perform further processing such as VM based processing within the dynamic analysis engine.

Referring to an exemplary diagram of a flowchart illustrating operations of a network security device determining whether an object of received network traffic requires analysis by a call back traffic subsystem is shown. The network security device receives network traffic via the traffic analysis controller block . Thereafter a packet capture framework PCF captures packets of the received network traffic block .

The PCF then routes objects of the received network traffic to the call back traffic pre filter and the call back traffic pre filter determines whether the object is an object containing call back traffic block . For instance the call back traffic pre filter may inspect an object searching for content containing a call or query to a specific IP address.

In one embodiment the call back traffic pre filter may pass a number of the first packets of every object or flow to the call back traffic subsystem. In such an embodiment the call back traffic subsystem determines whether a call back will be made by the object or flow from the first few packets of the object or flow. The number of first packets of an object or flow passed to the call back traffic subsystem is a variable number and may be for instance the first five or ten packets of every object or flow within the received network traffic.

If the object is not determined to be an object containing call back traffic the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object is determined to be an object containing call back traffic such as an object of interest to the call back traffic pre filter YES at block the object of interest is routed from the call back traffic pre filter to the call back traffic subsystem of the static analysis engine for processing block .

In one embodiment as the call back traffic subsystem is located within the static analysis engine the processing of the call back traffic subsystem includes deep packet inspection DPI and or performance of a static analysis using at least exploit signature checks and or vulnerability signature checks on the objects of interest. In particular the exploit matching logic within call back traffic subsystem may perform a comparison of one or more pre stored exploit signatures from signatures rule set with the object of interest. In particular the call back traffic subsystem may perform a heuristic analysis to determine whether the object of interest contains queries to one or more particular IP addresses present on a list of IP addresses known to contain malicious content or simply prohibited by the administer or security technician associated with the client device.

If based on the processing by the call back traffic analysis engine the object of interest is not determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack the network security device may allow the object and associated packets or flows if applicable to pass to the client device NO at block . However if the object of interest is determined to have characteristics that suggest the object is an exploit and or is associated with a malicious attack YES at block the network security device may optionally alert the appropriate administer or security technician of the presence of malicious content block prevent the transmission of the object and possibly any packets or flows associated with the object or allow transmission of the object and perform further processing such as VM based processing within the dynamic analysis engine.

Referring to a second exemplary block diagram of a plurality of network security devices N 1 e.g. N 3 communicatively coupled to a management system via the communication network is shown. In general as discussed above management system is adapted to manage network security devices . For instance management system is responsible for automatically updating one or more exploit signatures and or vulnerability signatures used by the static analysis engine within some or all of network security devices . Each of these signatures may represent a prior detected exploit or an uncovered software vulnerability. Such sharing may be conducted automatically or manually uploaded by an administrator. Also such sharing may be conducted freely among the network security devices or subject to a subscription basis.

More specifically according to this embodiment of the disclosure the TDP logic comprises both the static analysis engine and the dynamic analysis engine while the traffic analysis controller TAC comprises the packet capture framework PCF and a set of pre filters .

Still referring to the traffic analysis controller comprises communication ports a network processing unit NPU connector and persistent storage . The persistent storage maintains several software modules including a first stage of static analysis engine packet capture framework PCF the set of pre filters and the signatures rule set . The communication ports connect the network security device to communications networks and or while connector connects the traffic analysis controller to the TDP logic .

In this embodiment as shown in the PCF controls the flow of the network traffic received by the network security device e.g. network security device . Specifically the PCF confirms that the network security device is operating properly according to the deployment scenario of the network security device . For instance if the network security device is deployed off line passive mode the PCF ensures that the network security device receives a copy of the received network traffic and passes the copy of the received network traffic to the pre filters while the network traffic is provided to one or more of the client device . . . and or . In the off line deployment scenario the network security device does not block the network traffic from reaching the client device s . . . and or while the static or dynamic analysis is being performed. The traffic analysis controller may provide at least some of the original network traffic to the PCF or duplicate at least some of the network traffic and provide the duplicated copy to the PCF .

Alternatively if the network security device is deployed in line the PCF does not permit the received network traffic to pass through the network security device to the client device s . . . or until the network security device has determined the received network security traffic does not contain malicious content. In the in line deployment scenario the PCF ensures that the received network traffic passes to one or more of the client device . . . and or after processing unless it contains malicious content in which case at least some of the network traffic may be blocked from reaching its intended destination and an alert may be issued.

As described above the pre filters may comprise four pre filters searching for four types of traffic including 1 DNS traffic 2 traffic containing call back activity 3 communication protocol traffic and 4 traffic containing at least one binary. In such an embodiment the four pre filters correspond to the following subsystems of the dynamic analysis engine namely the communication protocol traffic subsystem and the binary traffic subsystem or the static analysis engine namely the DNS traffic subsystem and the call back traffic subsystem. It should be noted that the set of pre filters may be located on the traffic analysis controller while the static analysis engine and the dynamic analysis engine are located in the TDP logic .

The first stage of static engine performs certain functionality such as signature matching for example which is off loaded from the TDP logic to be handed at the traffic analysis controller . A second stage of static engine performs other functionality such as heuristic analysis for example is continued to be handled at the TDP logic . It is contemplated that first stage of static engine may perform heuristic analysis while the second stage of static engine performs other functionality such as signature matching. The goal is to off load a portion of the static analysis to the traffic analysis controller .

Still referring to in communication with traffic analysis controller via transmission medium the TDP logic comprises the second connector the CPU and the persistent storage . The second connector enables the TDP logic to communicate with the traffic analysis controller . The persistent storage comprises software modules including the static analysis engine the scheduler the dynamic analysis engine and the software profile rule set .

As described above the static analysis engine may comprise the DNS traffic subsystem and the call back traffic subsystem but signature matching associated with these subsystems is handled at the traffic analysis controller . The dynamic analysis engine located on the host comprises the communication protocol traffic subsystem and the binary traffic subsystem. However in this embodiment the TDP logic include portions of the DNS and call back traffic subsystems which are executed on the CPU associated with the TDP logic .

In general the static analysis engine and the dynamic analysis engine perform in a similar manner as described above in the first embodiment however in this embodiment both engines including all subsystems are executed on the CPU of the threat detection and prevention logic .

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

