---

title: File joining on back end device
abstract: A device comprises a receiver configured to receive a join-lookup remote procedural call (RPC) for a file, wherein the join-lookup RPC requests a join operation of sub-files associated with the file, and a transmitter configured to transmit the file in response to the Join-Lookup RPC. A distributed file system (DFS) client comprises a transmitter configured to transmit a join-lookup RPC for a file, wherein the join-lookup RPC requests a join operation of sub-files associated with the file, and a receiver configured to receive the file in response to the Join-Lookup RPC. A method comprises receiving a join-lookup RPC for a file, wherein the join-lookup RPC requests a join operation of sub-files associated with the file, and transmitting the file in response to the Join-Lookup RPC.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09646091&OS=09646091&RS=09646091
owner: Futurewei Technologies, Inc.
number: 09646091
owner_city: Plano
owner_country: US
publication_date: 20140224
---
A distributed file system DFS is a file system that allows access to files from multiple devices. The DFS may employ a server client architecture where clients may access files stored on central servers. Authorization rights may determine the extent if any of such access. The servers may be powerful computers dedicated to managing disk drives and may be collectively referred to as the back end of the DFS and the clients may be personal computers and may be collectively referred to as the front end of the DFS. The servers may comprise or be communicatively coupled to system disk arrays. The system disk arrays may each comprise multiple system disks. Users may operate the clients using software applications. The DFS may use a uniform naming convention and mapping scheme to keep track of file locations. One advantage of DFSs is that they provide a centralized storage system on the servers which may free resources on the clients that the clients would otherwise use to store files. The freed resources may thus allow the clients to perform other important functions.

Network File System NFS is a DFS protocol used to allow a client to access files on servers. NFS version 4.1 is the latest version of NFS and is incorporated by reference in its entirety. NFS and other DFS protocols may comprise remote procedural calls RPCs which may refer to communications that allow one device to cause a procedure to execute on another device without explicit user interaction. Typical RPCs may be read write remove and read a directory e.g. readdir . RPCs are invoked with reference to an opaque file handle and input parameters or call arguments. NFS was previously a stateless protocol meaning that it treated each request for data as an independent request unrelated to any previous request. NFS has however evolved to a stateful protocol meaning that related requests are treated as such. The evolution to a stateful protocol has improved performance of DFSs for wide area networks WANs but as file sizes increase and DFSs become more complicated it is becoming more important to further optimize file distribution in DFSs.

In one embodiment the disclosure includes a device comprising a receiver configured to receive a join lookup RPC for a file wherein the join lookup RPC requests a join operation of sub files associated with the file and a transmitter configured to transmit the file in response to the Join Lookup RPC.

In another embodiment the disclosure includes a DFS client comprising a transmitter configured to transmit a join lookup RPC for a file wherein the join lookup RPC requests a join operation of sub files associated with the file and a receiver configured to receive the file in response to the Join Lookup RPC.

In yet another embodiment the disclosure includes a method comprising receiving a join lookup RPC for a file wherein the join lookup RPC requests a join operation of sub files associated with the file and transmitting the file in response to the Join Lookup RPC.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although an illustrative implementation of one or more embodiments are provided below the disclosed systems and or methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

When a client in a DFS requests data associated with a file a responding server may have to retrieve that data from multiple files or sub files residing on multiple system disks. For example a typical LAMP based web application may cause a user s statistical data to collect over a period of time. LAMP may refer to Linux Apache MySQL and PHP Perl or Python. Linux is an operating system Apache is a web server software program MySQL is database software and PHP Perl and Python are programming languages. The data may be located in different sub files located on different system disks. In that case the application may need to combine the sub files into the file in order for the data to be usable. Accordingly the client may interact with the server via a series of RPCs for each sub file on each system disk. For instance if the server has to retrieve data from five sub files where each sub file resides on a different system disk then the client may interact with the server via five series of RPCs. After all of the series of RPCs the client may join the data in a logical manner. That joining process may be referred to as a join operation. The multiple series of RPCs may result in significant overhead though particularly if the amount of data is large. Accordingly there is a need to reduce that overhead in order to reduce the latency of the join operation and there is a need to do so in a scalable and secure fashion.

Disclosed herein are techniques methods and devices for an improved DFS. In particular the disclosed technique may migrate the join operation from the client to the server. The join operation may be accomplished via the client sending a new join lookup RPC to the server the server executing the join lookup and related join operation in its own sandbox and a modification to an application programming interface API to include semantics for the join lookup and related join operation. A sandbox may refer to a controlled process or set of resources on a specific space in a memory in this case the server memory. A sandbox may also be referred to as a container or a virtual machine which may refer to a software based computer. An API may refer to a library that specifies how software components interact. By migrating the join operation from the client to the server the disclosed technique may provide at least three benefits. First the join lookup may require only a single series of RPCs as opposed to multiple series of RPCs thus reducing overhead associated with a data request and thus reducing the latency of the join operation. As file sizes increase traditional techniques may require even more series of RPCs thus further highlighting the reduction in overhead appreciated by the disclosed technique. Second the sandbox is highly scalable due its relatively small size. Third the join operation is secure because it occurs in the sandbox which is inherently secure.

The processor may be implemented by hardware and or software. The processor may be in communication with the ingress ports receiver units transmitter units egress ports and memory . The processor may be implemented as one or more CPU chips cores e.g. as a multi core processor field programmable gate arrays FPGAs application specific integrated circuits ASICs and or digital signal processors DSPs .

The memory may comprise one or more disks tape drives or solid state drives may be used as an over flow data storage device may be used to store programs when such programs are selected for execution and may be used to store instructions and data that are read during program execution. The memory may be volatile and or non volatile and may be read only memory ROM random access memory RAM ternary content addressable memory TCAM static random access memory SRAM or any combination thereof.

The clients may be any hardware devices configured to send and receive data. The clients may each comprise a DFS application . The clients may be associated with end users. For example the clients may be notebook computers tablet computers desktop computers mobile telephones or other devices. Alternatively the clients may be servers communicatively coupled to end user devices such as notebook computers tablet computers desktop computers mobile telephones or other devices. In that case the clients may be referred to as application servers.

The application may be a database application or other application suitable for requesting and receiving data. For example the application may request and receive data via a series of RPCs using NFS or another suitable protocol. The application may comprise or be associated with an API not shown . The API may be modified to include semantics for the new join lookup.

The network may be any network configured to provide for communication among the DFS components. For example the network may be the Internet a mobile telephone network a local area network LAN a wide area network WAN or another network. Alternatively the network may be a dedicated channel between the clients and the server . The network may allow communication along any suitable wired or wireless channels.

The server may be any hardware device configured to send and receive data. For example the server may be an EMC NetApp PLX Technology or similar server with any suitable amount of processing power and memory. The server may comprise the application an operating system and a hypervisor . The server may be a network attached storage NAS device which may refer to a file level computer data storage device built specifically for storing and serving files. The server may also be referred to as an NAS gateway device or NAS controller. The server may be configured to perform tasks for the clients . For example the server may be a dedicated hardware computer server.

The operating system may be any operating system configured to receive data requests from and send data to the clients . Before sending data to the clients the operating system may first retrieve that data from the system disk array . The server may comprise or be communicatively coupled to the system disk array . The system disk array may comprise n system disks configured to store data for use by the server . N may represent any suitable number.

The hypervisor may be software firmware or hardware that creates and runs virtual machines. In that respect the hypervisor may create and run a sandbox . In addition the hypervisor may control the use of CPU time the number of calls memory allocation and other system resources associated with the application . The hypervisor may be a ZeroVM hypervisor which is an open source hypervisor described at www.zerovm.org and is incorporated by reference in its entirety.

The sandbox may be a controlled process or set of resources as described above. There are at least two types of sandboxes. A first type of sandbox may comprise a grouping of multiple processes and may enforce process level policies. A second type of sandbox may be library based or exokernel based and may enforce modified abstractions or APIs for example para virtualized abstractions of sandboxing. For the second type of sandbox the operating system may be aware of an application executing in the sandbox. The sandbox may be a library based sandbox. The sandbox may be said to be lightweight or have a low hypervisor footprint meaning that the sandbox may occupy a relatively small portion of the server s memory. For example the sandbox may occupy up to only 75 kilobytes kB of server memory. The sandbox may be based on the Google Native Client sandbox technique which is described at www.code.google.com p nativeclient and is incorporated by reference in its entirety. The application may connect to the sandbox for secured execution. To read a file the client may receive an input channel from a template manifest not shown provided by the hypervisor . To write to a file the client may receive an output channel from the manifest. The application may receive or set variables in the manifest using a special call. The manifest may be configured dynamically based on file attributes operation and system resources.

At step the clientmay send to the server a read. The read may be in the form of Read fh arg . Fh is described above. Arg is described above and may comprise a byte offset and byte count. Accordingly the read may be Read file 200 4 000 which may instruct the server to return fileat a byte offset of 200 and a byte count of 4 000. From an API perspective the read may be associated with File Read VFS Read and NFS Read layer operations on the clientside and the server side. VFS Ready may be at a lower layer than File Read and NFS Read may be at a lower layer than VFS Read. Alternatively File Read may be at the highest layer VFS Read may be at a lower layer and NFS Read may be at the lowest layer. At step the server may request filefrom the system disk. At step the system diskmay send fileto the server . At step the server may load into its memory file. At step the server may return fileto the client. At step the clientmay begin similar read and return processes for fileand fileuntil at step the server returns fileto the client.

At step the clientmay perform a join operation and join file file and fileto form file.txt. Finally at step the clientmay end the application . As can be seen the join operation requires repetitive RPCs between the clientand the server . Specifically each of file file and filerequires a set of read and return RPCs thus totaling six RPCs. As requested data sizes increase the server may send that requested data in even more files thus requiring even more series of RPCs. The multiple series of RPCs may result in significant overhead across the network and thus the DFS .

At step the server may fork the sandbox via the hypervisor . Forking may refer to creating a byte stream associated with a file system object in this case the sandbox . At step the server may deploy the join operation in the sandbox . Accordingly the sandbox may begin the process of requesting and receiving the sub files that comprise file.txt . At step the sandbox may request filefrom the system disk. At step the system diskmay send fileto the sandbox . At step the sandbox may load into its memory file. At step the sandbox may begin similar request send and load processes for fileand fileuntil at step the sandbox loads into its memory file.

At step the sandbox may perform a join operation and join file file and fileto form file.txt . At step the sandbox may return file.txt to the client. Finally at step the clientmay end the application . As can be seen the join operation does not require repetitive RPCs between the clientand the server . Rather for file file and file there may be only one series of join lookup and return RPCs thus totaling two RPCs.

The disclosed technique may be applicable to existing and future NFS and other DFS protocols whether or not those protocols are stateless or stateful. In that respect the disclosed technique may vary depending on the applicable protocol. Furthermore the disclosed technique may be applicable to clustered file systems such as Hadoop distributed file systems HDFSs and Google File Systems GFSs . Finally the disclosed technique may employ alternate hypervisors such as Mirage which is described at www.openmirage.org and is incorporated by reference in its entirety.

At least one embodiment is disclosed and variations combinations and or modifications of the embodiment s and or features of the embodiment s made by a person having ordinary skill in the art are within the scope of the disclosure. Alternative embodiments that result from combining integrating and or omitting features of the embodiment s are also within the scope of the disclosure. Where numerical ranges or limitations are expressly stated such express ranges or limitations may be understood to include iterative ranges or limitations of like magnitude falling within the expressly stated ranges or limitations e.g. from about 1 to about 10 includes 2 3 4 etc. greater than 0.10 includes 0.11 0.12 0.13 etc. . For example whenever a numerical range with a lower limit R and an upper limit R is disclosed any number falling within the range is specifically disclosed. In particular the following numbers within the range are specifically disclosed R R k R R wherein k is a variable ranging from 1 percent to 100 percent with a 1 percent increment i.e. k is 1 percent 2 percent 3 percent 4 percent 5 percent . . . 50 percent 51 percent 52 percent . . . 95 percent 96 percent 97 percent 98 percent 99 percent or 100 percent. Moreover any numerical range defined by two R numbers as defined in the above is also specifically disclosed. The use of the term about means 10 of the subsequent number unless otherwise stated. Use of the term optionally with respect to any element of a claim means that the element is required or alternatively the element is not required both alternatives being within the scope of the claim. Use of broader terms such as comprises includes and having may be understood to provide support for narrower terms such as consisting of consisting essentially of and comprised substantially of. Accordingly the scope of protection is not limited by the description set out above but is defined by the claims that follow that scope including all equivalents of the subject matter of the claims. Each and every claim is incorporated as further disclosure into the specification and the claims are embodiment s of the present disclosure. The discussion of a reference in the disclosure is not an admission that it is prior art especially any reference that has a publication date after the priority date of this application. The disclosure of all patents patent applications and publications cited in the disclosure are hereby incorporated by reference to the extent that they provide exemplary procedural or other details supplementary to the disclosure.

While several embodiments have been provided in the present disclosure it may be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and may be made without departing from the spirit and scope disclosed herein.

