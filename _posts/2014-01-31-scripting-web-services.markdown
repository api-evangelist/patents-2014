---

title: Scripting web services
abstract: A process performed on a server includes configuring the server to enable script for a Web service to be defined dynamically, where the Web service includes an application program interface (API) for enabling access by, and interaction with, a computer program executing on a device other than the server. The process also includes compiling the script to produce machine-executable code for the Web service, receiving a call from the computer program to the Web service, executing the machine-executable code in response to the call to produce an output, and sending the output to the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09172745&OS=09172745&RS=09172745
owner: PTC Inc.
number: 09172745
owner_city: Needham
owner_country: US
publication_date: 20140131
---
This patent application is a continuation of and claims priority to U.S. application Ser. No. 12 952 890 entitled SCRIPTING WEB SERVICES filed Nov. 23 2010 now U.S. Pat. No. 8 689 181. The contents of U.S. application Ser. No. 12 952 890 are hereby incorporated by reference into this continuation patent application as if set forth herein in full.

The World Wide Web Consortium W3C defines a Web service as a software system designed to support interoperable machine to machine interaction over a network. It has an interface described in a machine processable format specifically Web Services Description Language WSDL . Other systems interact with the Web Service in a manner prescribed by its description using SOAP messages typically conveyed using HTTP with an XML serialization in conjunction with other Web related standards. Many Web services today are now REST compliant. In REST compliant Web services the services manipulate XML representations of Web resources using a uniform set of stateless operations. As is generally known SOAP is the acronym for Simple Object Access Protocol HTTP is the acronym for HyperText Transfer Protocol XML is the acronym for eXtensible Markup Language and REST is the acronym for Representational State Transfer.

Web services include application programming interfaces API or Web APIs that are accessible via HTTP and that are executed on a server hosting the services. A Web service may receive an HTTP request at a server and send a reply that can be consumed by a computer program rather than a person. The HTTP request may include a Uniform Resource Indicator URI that identifies the Web service operation and may include Uniform Resource Locator URL parameters. In its reply the Web service returns data in a format that the requesting client can use. This format is typically XML or JAVA UScript Object Notation JSON but can be comma separated variables or other formats.

Web services may be statically defined. That is a Web service may be programmed to receive one or more arguments to perform a function using those arguments and to provide a reply. By way of example a Web service can be called over the Internet by a computer program running on a remote device. The computer program can call the Web service to request the weather for example. The computer program may pass as arguments to the Web service a location and a time period. The Web service receives these arguments obtains the weather for that location and time period e.g. from a local or remote network resource and returns the weather at the location for the time period.

Each service that exposes Web services faces the challenge of defining a set of services that are easy enough to use and powerful enough to solve real problems. Some more complex applications expose Web services that are not statically defined. Those applications use query languages similar to Structured Query Language SQL to query for data. An example of this is Facebook Query Language FQL . Languages such as these allow Web services to query database tables in ways that may be more flexible than the more classic scenario described above. Although the languages provide flexibility in using Web services the Web services themselves remain unchanged.

This patent application describes methods and apparatus including computer program products for scripting Web services. By virtue of the scripting technology described herein a user can customize Web services to perform any appropriate functions. Thus instead of creating and loading all Web services when a server is configured for a user the techniques described herein allow a user at will to upload their own scripts to the server to define Web services on the server. The Web services are therefore customized for the user. The same processes may be used for Web services on a server that is accessible to multiple users.

Accordingly described herein is a method performed on a server which comprises receiving from a client a call to a Web service run on the server where the Web service corresponds to a script that was uploaded to the server by the client to define the Web service. The method also comprises authenticating the call to an account identifying a script corresponding to the Web service executing code corresponding to the script which code produces an output and sending the output to the client.

The code may comprise a compiled version of the script. The script may comprise JAVA or Groovy. The script may have a security context. The security context may comprise a JAVA classloader that restricts the script to using an approved set of classes and interfaces. The security context may be modifiable. Authenticating the call may comprise authenticating a user who owns or otherwise controls the account.

Also described herein is a method performed on a server that comprises configuring the server to enable script for a Web service to be defined dynamically. The Web service includes an application program interface API for enabling access by and interaction with a computer program executing on a device other than the server. The method also comprises compiling the script to produce machine executable code for the Web service receiving a call from the computer program to the Web service executing the machine executable code in response to the call to produce an output and sending the output to the device.

Configuring the server to enable script for the Web service to be defined dynamically may comprise storing in the server code to generate a graphical user interface GUI into which the script is entered. The method may further comprise receiving a request for the GUI outputting the GUI in response to the request and receiving the script via the GUI.

Configuring the server to enable script for the Web service to be defined dynamically may comprise storing in the server a compiler for compiling the script and storing in the server a database to store information corresponding to the machine executable code. Configuring the server may also comprise storing in the server machine executable code that when executed enables receipt of the script.

The call to the Web service may comprise a HyperText Transfer Protocol HTTP command. The HTTP command may identify the script in accordance with a convention defined by a proprietor of the script. The device designated by the script may be an entity other than the entity on which the computer program runs. The computer program may pass an argument with the call. The argument may be associated with an aspect of an entity being monitored. The machine executable code for the Web service may obtain information associated with the argument and uses the information to generate the output.

The device may communicate with the server over communication path that is at least partially wireless. The call may comprise instructions to access a functionality of the Web service.

Any two or more of the features described in this patent application including those described in this summary section may be combined to form embodiments not specifically described in this patent application.

All or part of the foregoing may be implemented as a computer program product comprised of instructions that are stored on one or more non transitory machine readable storage media and that are executable on one or more processing devices. All or part of the foregoing may be implemented as an apparatus method or system that may include one or more processing devices and memory to store executable instructions to implement functionality.

The details of one or more examples are set forth in the accompanying drawings and the description below. Further features aspects and advantages will become apparent from the description the drawings and the claims.

This patent application describes processes for scripting Web services. An example process includes configuring a server to enable script for a Web service to be defined dynamically. The Web service includes an application program interface API for enabling access by and interaction with a computer program executing on a device other than the server. The script is compiled to produce machine executable code or simply code for the Web service. The resulting code is stored in association with an account. The process also includes receiving from a client a call to the Web service authenticating the call to the account identifying a script that corresponds to the account executing code that corresponds to the script to produce an output and sending the output to the requesting client.

More specifically the script may be sent to server via Web page . Additional information may be sent with or before the script. For example user may log into server before entering script. In this case server may know the user s account information e.g. account number name etc. and associate that information with a Web service defined by the script. Alternatively user may enter this information into other fields not shown in Web page or in another Web page or form not shown . The user may also name the Web service using an alphanumeric identifier or other convention.

In the example of Web services to are associated with corresponding user accounts. At least some of the associated information such as the name of the Web service and access to the user account may be required to access the Web services.

Following receipt of script server compiles the script to generate machine executable code or simply code for implementing the Web service defined by the script. The code may be stored in a database on server in association with e.g. account information and or other identifier s . The code may be executed on server when Web service is called by a computer program. The code may implement an API through which other computer programs can access the functionality provided by the Web service. The functionality may include anything that is programmable by the user. For example the functionality may include calls to other Web services processing data received from monitoring agents including alarm conditions selecting a subset of monitored data accessing tables in a database processing data from those tables and so forth.

In operation monitoring agent interacts with monitoring program which is running on server in this example and which itself may be a Web service. Monitoring agent may be configured to report to monitoring program information about the status and or operation of the corresponding monitored device and or system. For example monitoring agent may report on the number of trips that automobile has taken with a trip being defined by a start and end of operation the duration of each trip and the average speed of each trip. Monitoring agent may also be configured to update itself or its monitored system using information obtained via server . For example monitoring agent may obtain updated parameters for HVAC system such as updated temperature or humidity levels to set and at what times those levels should be set. In another example monitoring agent may obtain software updates and upgrade the software e.g. operating system of its monitored device and or system using the software updates.

In this example as a result of the interaction between monitoring agent and monitoring program monitoring agent provides data about the operation and or status of monitored devices systems. This data may be stored in server as shown.

In this example Web services to are associated with user account . To access Web service a user at client accesses user account . This may be done by logging into the account via a Web page or other GUI. Alternatively a computer program on client calling Web service may log into the user s account without interaction from the user. If there is more than one Web service associated with the user account as is the case in this example it may be necessary to identify the Web service that is to be accessed. This may be done via computer program . For example if computer program is designed to obtain information about the operation of automobile computer program will identify Web service . This may be done e.g. by making a call to that Web service and by including a Web service name or other identifier in the call.

Computer program may to pass Web service one or more arguments such as an identifier for automobile particularly if e.g. Web service is configured to work with more than one automobile . In response Web service may retrieve data that has been obtained by monitoring the operation and or status of automobile . This data may be filtered or otherwise processed for presentation to computer program . For example the data may include starting and ending times for a trip and the length of the trip. Web service may use this information to calculate the average speed over the course of the trip and return only this average speed. Web service provides its information to computer program . This information is then displayed or otherwise presented to user .

Should user require different or additional information user can create a new Web service or edit an existing Web service. This may be done in accordance with the process shown conceptually in .

Server may be a central server that is accessible to different clients at different companies or server may be company specific meaning that it is accessible by and contains Web services for only a particular company. A client accesses Web services via a network such as the Internet. Client may include but is not limited to a back office system such as a customer relationship management CRM system a product lifecycle management PLM system and or a supply chain management SCM system.

By way of example consider an SCM application that monitors goods moved between a supplier and a customer. If the SCM application tracks returned goods and determines through its own analysis that one process seems to be generating a large number of returned products the ability to diagnose and fix the process would be beneficial. Using a dynamically defined Web service of the type described herein the SCM application could query a database maintained by platform to locate equipment and systems included in the monitored process. Using Web services platform may analyze the data and flag to the SCM application the trouble areas in the process. In addition platform could notify and provide technicians with a history of the troubled equipment. In this example all communications and data transmissions between the SCM system and the platform may be secure.

Network system includes clients to and servers to . These clients and servers are connected via network . Network may include one or more networks such as a local area network LAN a wide area network WAN and or the Internet. One or more of the networks that make up network may be wireless such as a cellular telephone network or a Wi Fi network. Network in conjunction with one or more of the clients and servers may form a cloud computing system.

Each client may be a computing device such as desktop a laptop a tablet a smartphone or the like. Generally a smartphone is a mobile device that offers advanced computing capabilities such as the ability to execute applications and to communicate with a server or another appropriate computing device.

Each client may include a hard drive for storing data and computer programs and one or more processing devices e.g. a microprocessor and memory e.g. RAM for executing computer programs. A display screen e.g. such as an LCD Liquid Crystal Display or a CRT Cathode Ray Tube displays to a user images that are generated by the client including but not limited to the Web pages and outputs described herein. As is well known display on a computer peripheral e.g. a monitor physically transforms the computer peripheral. For example if the computer peripheral is LCD based the orientation of liquid crystals can be changed by the application of biasing voltages in a physical transformation that is visually apparent to the user. As another example if the computer peripheral is a CRT the state of a fluorescent screen can be changed by the impact of electrons in a physical transformation that is also visually apparent. Each display screen may be touch sensitive allowing a user to enter information onto the display screen via a virtual keyboard. On some clients such as a desktop or smartphone a physical QWERTY keyboard and scroll wheel may be provided for entering information onto the display screen.

Each client may run an operating system OS such as a version of MICROSOFT WINDOWS or MAC OSX. Computer programs including applications are stored e.g. in hard drive and execute on top of the OS. Among these computer programs may a Web Browser such as MICROSOFT INTERNET EXPLORER GOOGLE CHROME or APPLE SAFARI for accessing data from the servers. This data may include Web pages for entering script and other information to generate Web services and information provided by those Web services including graphics and alphanumerics.

Each of servers to may have the same or similar hardware and or software configuration. In a case where all of the servers are owned by the same entity servers to may act together to perform the functions described herein. In the case of multiple servers server may act as a controller or load balancer for the remaining servers and . In this role server may route data requests and instructions between a client and a slave server such as server . Server may store information locally then route data to another server such as server . For the purposes of the following such internal communications between server and slave servers will be assumed. In a case where the servers are owned by different entities a single server may perform all of the server functions.

Since all of the servers may have the same or similar architecture only the architecture of server is described. Server may be identical in structure and function to server of . Server includes a storage system e.g. RAID Redundant Array of Inexpensive Disks for storing data and computer programs and one or more processing device s e.g. one or more microprocessors and memory e.g. RAM for executing computer programs. Each server may run a platform which includes an operating system such as a version of LINUX and one or more computer programs for interacting with the server s clients. Computer programs including a Web server and a compiler may be stored e.g. in storage system and execute on top of the platform to perform the functions described herein. Storage system may also include a database for storing Web services . Web services may correspond to Web services of . Data for each Web service may include for example script that defines the Web service machine executable code that is generated by compiling the script and information associated with the Web service e.g. to identify the Web service or corresponding account.

Each server may host or otherwise provide access to information contained therein. For example a user at a client may sign onto a Web site hosted by server or e.g. for which server is gateway . In response e.g. through an appropriate HTTP exchange server may provide to client the Web page or other GUI e.g. Web page of for entering script to define a Web service as described in more detail below.

Monitored system may be any type of device and or system that can be monitored examples of which include but are not limited to the examples shown in . Monitoring agent may be a computer program or a device such as a microprocessor or microcontroller that is configured to operate in conjunction with a system to monitor and or control its status and or operation. Monitoring agent may correspond to monitoring agent of .

Monitoring agent may be configured to communicate with server over network . For example monitoring agent may be a wireless device that is configured to communicate over network using one or more wireless protocols. Alternatively monitoring agent may be a wired device. For example monitoring agent may be behind a firewall may be a device of the type described in one or more of the following and may be configured to communicate with server via one or more of the techniques described in one or more of the following U.S. Pat. No. 7 117 239 U.S. Pat. No. 7 185 014 U.S. patent application Ser. No. 10 124 181 and U.S. patent application Ser. No. 11 537 399. The contents of U.S. Pat. No. 7 117 239 U.S. Pat. No. 7 185 014 U.S. patent application Ser. No. 10 124 181 and U.S. patent application Ser. No. 11 537 399 are hereby incorporated by reference into this application as if set forth herein in full. In this regard any appropriate features described in U.S. Pat. No. 7 117 239 U.S. Pat. No. 7 185 014 U.S. patent application Ser. No. 10 124 181 and U.S. patent application Ser. No. 11 537 399 may be used in conjunction with the techniques described herein.

Data center may be a repository for Web services . In this example data center and server are separate entities however in other examples the two may be combined in a single device or set of devices. Data center may include a storage system not shown for storing code and other information for Web services and one or more processing devices not show for making the Web services accessible to clients of the data center over network . For example data center may include a library of Web services that are available to clients over network . A client may access such a Web service directly from the data center or it may take code therefor and store that code on its own server s . Likewise a client may access script that defines those Web services and modify the script to generate new Web services. The resulting new Web services may be stored either in the client s server s or in the data repository library. The library of scripts stored in the data center or server or to can be versioned meaning that they can exist in different versions with appropriate version identifiers associated therewith. A client may therefore use or roll back to to a previous version of a script e.g. if undesirable edits were made to a Web services script .

As part of process server is configured to enable script for a Web service to be defined dynamically. This may be done by storing in server code to generate a Web page or other GUI such as Web page of into which script that defines the Web service is to be entered. Server hosts this Web page thereby enabling clients to access it over a network. An implementation of this Web page is shown in . Specifically shows a Web page that includes a field for defining a name of a Web service a field for providing a description of the Web service e.g. it s functionality and a field for entering script source code for implementing the Web service. Web page also includes a control that triggers compilation of the script. Web page also includes controls to define parameters in the source code e.g. username and name filter .

The script may define a context in which it should run. In this example there are two types of contexts user and system. Under the user context the script runs with the permissions or privileges defined for a specified user. Under the system context the script runs with privileges and permissions for access to all functionality and database objects like an administrator . For example if the script needs to perform administrative type functionality like determining device group assignments for users or defining data item groups the script should run under a system context. The context passed by the Web service does not need to be the same context defined for the script. For example if a Web service is run in a user context and the script defines a system context the Web service will handle switching the context back to user context after the script finishes running.

In an implementation the script has a security context. The security context may be a JAVA classloader that restricts the script to using an approved set of classes and interfaces.

In client accesses Web page through its browser . To access the Web page a user at client may need to sign into his account on server however this is not a requirement. Script for the Web service is entered into the Web page. The script may be JAVA or Groovy for example. Other programming languages may also be entered to define the Web service. Web page may send the uncompiled script to server where it is compiled by compiler and where the resulting machine executable code is stored for use. Alternatively the script may be compiled locally and resulting machine executable code sent to server for storage with or without the corresponding script. Identifying information for the Web service also may be sent to server and stored in associate with code and or script for the Web service.

Client may access Web service . Web service includes a Web API which allows the Web service to interact with a computer program running on the client. For example the computer program on client may call the Web service to obtain information therefrom. The call may include one or more arguments that may be used by the Web service to generate its output or may indicate to the Web service the outputs that are needed. Arguments used for other purposes may also be passed to the Web service.

Code on server may authenticate the call to an account e.g. the user s account identify a script e.g. on server corresponding to the Web service execute code corresponding to the Web service and send an output produced by the Web service to the client. In this regard Web services for the server platform may enable remote users to access and affect information in the platform s database and to access and perform operations on managed assets. Each Web services call to the platform may specify an authenticated user account. The platform validates the user account provided for an operation against its directory service LDAP or Active Directory and user group settings determining the following if the user is permitted access to the platform and if the user has privileges to access the data and perform the operations specified in the Web service call.

If an entity does not have privileges to perform an operation an Access Denied message may be returned to client along with information about which privilege is required. Additionally queries will not return information for any devices to which a user does not have device permissions.

The platform maintains an audit log of significant user actions that occur in the system including operations performed or attempted through Web services. Examples of audited activity include user logins operations that affect database information including creating deleting updating database objects or assigning or unassigning associations agent and device operations and remote access sessions. Audit information is shown in an audit log which is available through an administration application.

In the example of server executes code corresponding to the called Web service and interacts with a monitoring agent to obtain information about a system being monitored and or controlled by that agent. Monitoring agent interacts with the Web service to provide whatever information is requested.

Web service provides its information in this example information based on that provided by monitoring agent to the requesting computer program running in client . The computer program receives that information at client and uses that information to generate an appropriate output. For example the computer program may render graphical information on a machine display e.g. a computer monitor or cell phone display screen showing the past present and projected states of the monitored system. In another example the computer program may be an application or app running on a smartphone and the monitored system may be an automobile. In this example a user on the smartphone may track use of the automobile through graphics tables text or the like that is displayed on the smartphone s display screen by the app.

In an alternative implementation script defining a Web service can be uploaded to server or to through another Web service rather than through a Web page. For example script may be entered into a computer program or a template on the client. The script may be passed as an argument in a call to a Web service running on the server. The Web service on the server may cause the script to be compiled and the resulting code stored thereby allowing the resulting new Web service to be accessed at the server. In another example script for the Web service may be entered into a computer program or interface at the client. A Web service running on the server may query the computer program or interface e.g. periodically for new script. If there is new script the Web service may retrieve that script and cause it to be compiled and the resulting code to be stored on the server thereby allowing the resulting new Web service to be accessed at the server. The Web service may query the client in accordance with any appropriate processes such as those described in U.S. Pat. No. 7 185 014 U.S. patent application Ser. No. 10 124 181 and U.S. patent application Ser. No. 11 537 399 incorporated by reference above.

A particular implementation of Web services scripting is provided below. In this implementation a server stores a platform for creating applications via the Internet. The interactions can be complex and may include multiple actions and or branching logic. The platform supports flexible customer programmed Web services. Each customer creates their own set of Web services and uses them in their applications. A customer can also publish the Web services and allow others to create clients that use those Web services.

A server which may be hosted in a data center provides an Internet service and publishes Web services in addition to a Web user interface UI . Customers login to the UI and define their Web services which are then published to Web service clients.

The UI includes field s to enter script that defines a Web service. The script has a unique name a set of parameters and programming language code. When the script is saved in the server its name can be called in the URI of a Web service call. For example a script like 

When code for a script is executed it can call allowed server APIs to query modify or take actions. For security each script is executed in a secure environment that restricts what the script code can do. Scripts are thus not able to harm the server or perform unauthorized actions. When a client calls a Web service user credentials may be required. User permissions are applied to APIs that the script can call thereby limiting the script to safe actions based on the permissions given to that user by an administrator.

In this regard each call to a Web service may identify an authenticated platform user. To do this the computer program making the call must first login to the platform via an authentication service login operation. If a username and password for an authenticated user are provided to the login operation it will return a SessionId token. That token is cached and then passed with each subsequent Web service operation. If an invalid SessionId is passed to an operation or the SessionId that was passed has timed out the platform will ignore the operation request. The user account passed to the login operation should authenticate to an existing user with sufficient privileges. Each Web service may be limited to the actions and objects to which the user has privileges. For example calling getDevices will return only the devices that this user is allowed to see if he or she logs into the platform. A client should use a login that has appropriate privileges for its intended task.

The process of creating a script may include a user logging into the server platform via a UI. The user submits a script as above. The script code is then compiled and may be tested. Generally speaking scripts need to be managed in development and production. A script may be uploaded to the server for testing. When the testing is successful that script may be promoted to production. If there are any errors in the compilation or testing of the script an error message is displayed and the user must correct the script. If there are no errors the resulting compiled code is stored so that it can be executed relatively quickly. This code may be JAVA bytecodes or .NET CLR or it may be that the script is interpreted when it runs as is the case with perl code.

In an example a client computer program calls a Web service that returns the status of some equipment. The client creates a request to a URI such as 

The server handles the request by extracting the script name GetStatus and user credentials. The user credentials are authenticated and if the authentication process fails an error is returned. For example if the script name does not reference a legal script in the server or this user does not have permissions to run this script an error is returned to the client. Otherwise the named script is loaded into a secure sandbox environment and run. In JAVA this is done via a custom classloader that has a predefined set of JAVA classes that are included in its path. References to classes outside the path are not allowed. Parameters in the URL or the HTTP POST body are passed into the script as named parameters.

The script is allowed to call the server s API and certain external methods. For example a script can call another server s web services. The APIs in the server may be related to monitored assets e.g. devices systems etc. . A script may query the values of readings associated with those assets and also check if the asset has any recent alarm conditions. The result of running the script is a returned HTTP content type and content.

All or part of the processes described herein and their various modifications hereinafter referred to as the processes can be implemented at least in part via a computer program product i.e. a computer program tangibly embodied in one or more information carriers e.g. in one or more tangible non transitory machine readable storage media for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers

A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a network.

Actions associated with implementing the processes can be performed by one or more programmable processors executing one or more computer programs to perform the functions of the calibration process. All or part of the processes can be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array and or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only storage area or a random access storage area or both. Elements of a computer including a server include one or more processors for executing instructions and one or more storage area devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more machine readable storage media such as mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Machine readable storage media suitable for embodying computer program instructions and data include all forms of non volatile storage area including by way of example semiconductor storage area devices e.g. EPROM EEPROM and flash storage area devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other actions may be provided or actions may be eliminated from the described flows and other components may be added to or removed from the described systems. Likewise actions depicted in the figures may be performed by different entities or consolidated.

Elements of different embodiments described herein may be combined to form other embodiments not specifically set forth above. Elements may be left out of the processes computer programs Web pages etc. described herein without adversely affecting their operation. Furthermore various separate elements may be combined into one or more individual elements to perform the functions described herein.

Elements of different implementations described herein may be combined to form other implementations not specifically set forth above. Other implementations not specifically described herein are also within the scope of the following claims.

