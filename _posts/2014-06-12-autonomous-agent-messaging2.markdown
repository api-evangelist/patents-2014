---

title: Autonomous agent messaging
abstract: Apparatus and methods are disclosed for generating, sending, and receiving messages in a networked environment using autonomous (or semi-autonomous) agents. In one example of the disclosed technology, a method of collecting data from an agent executing on a host computer connected to one or more agent data consumers via a network connection includes collecting host data, the collecting occurring whether or not the agent can currently send data via the network connection. When the agent cannot send data via the network connection, the agent spools at least a portion of the collected host data in a spooler. When the agent can send data via the computer network, the agent sends at least a portion of the spooled host data to at least one of the agent data consumers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634951&OS=09634951&RS=09634951
owner: Tripwire, Inc.
number: 09634951
owner_city: Portland
owner_country: US
publication_date: 20140612
---
Existing compliance and security systems for enterprise environments employ the use of agents for monitoring system integrity and reporting changes to one or more centralized compliance servers. However existing agents are limited in a number of ways. Known examples of compliance agents are implemented as a monolithic Java agent that must be connected to a server almost continuously. Further existing agents do not allow for plugins quarantine prioritizing of messaging or disconnected operation. Accordingly there is ample opportunity for improvement in the implementation of agents for monitoring system integrity and reporting changes.

Apparatus and methods are disclosed for generating sending and receiving messages in a networked environment using autonomous or semi autonomous agents. Techniques disclosed herein for sending and receiving messages with agents include flow control mechanisms that allow for spooling of collected data by the agents to improve reliability in the event of network delay and outages. In some examples of the disclosed technology agent capabilities can be readily expanded through the use of on demand agent plugins for facilitating data collection and which further allow separation of message capabilities from particular plugin identification. In some examples of the disclosed technology message and agent identifiers are applied to increase data reliability and to allow re transmission of lost messages upon request.

The disclosed agent platforms are designed to address one or more challenges presented in enterprise deployments of agents by for example reducing agent footprint improving scalability dealing with erratic computer networks providing semi autonomous operation and or providing a self correcting framework.

In some examples of the disclosed technology a method of collecting data from an agent executing on a host computer connected to one or more agent data consumers via a network connection includes collecting host data whether or not the agent can currently send data via the network connection. When the agent cannot send data via the network connection the agent stores at least a portion of the collected host data in a spooler and when the agent can send data via the network connection the agent sends at least a portion of the spooled host data to at least one of the agent data consumers. In some examples the method further includes one or more plugins executable on the host computer collecting the host data the agent sending data to the plugins indicating lag of the spooler. The plugins adjust the rate of collecting host data based at least in part on the indicated spooler lag.

In some examples of the disclosed technology a method for recovering messages transmitted using a computer network includes sending one or more data messages from an agent to a server with the computer network the data messages including sequence numbers generated by the agent receiving a resend message from the server indicating one or more of the data messages are to be resent the messages to be resent being indicated by one or more of the generated sequence numbers. Based on receiving the resend message the agent searches for the indicated messages based on the generated sequence numbers finds at least one of the messages within a range of messages indicated by the resend message that are stored on the computer hosting the agent and resends the found messages to the server.

In some examples of the disclosed technology a method of identifying agent messages sent on a computer network includes by an agent executing on a first physical and or virtual host computer self generating a unique identifier for the agent. The unique identifier is based at least in part on using a random or pseudorandom number generator. The method further includes sending messages from the agent to an agent data consumer the messages including the unique identifier. In some examples the agent is moved to a second physical and or virtual host computer different than the first computer. After the agent is moved the agent sends messages using the same unique identifier. In some examples the agent is replicated on a second physical and or virtual host computer different than the first computer. The replicated agent self generates a second different unique identifier and sends messages to the agent data consumer including the second unique identifier.

In some examples of the disclosed technology a networked computing system includes one or more agent data consumers one or more agent platform servers each of the agent platform servers including an agent bridge one or more agents the agents being configured to execute on computing hosts each of the computing hosts including the computer readable storage media storing computer executable instructions that when executed by the computing hosts cause the computing hosts to perform one or more of the exemplary methods disclosed herein.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. The foregoing and other objects features and advantages of the invention will become more apparent from the following detailed description which proceeds with reference to the accompanying figures. Further any trademarks used herein are the property of their respective owners.

This disclosure is set forth in the context of representative embodiments that are not intended to be limiting in any way.

As used in this application the singular forms a an and the include the plural forms unless the context clearly dictates otherwise. Additionally the term includes means comprises. Further the term coupled encompasses mechanical electrical magnetic optical as well as other practical ways of coupling or linking items together and does not exclude the presence of intermediate elements between the coupled items. Furthermore as used herein the term and or means any one item or combination of items in the phrase.

The systems methods and apparatus described herein should not be construed as being limiting in any way. Instead this disclosure is directed toward all novel and non obvious features and aspects of the various disclosed embodiments alone and in various combinations and subcombinations with one another. The disclosed systems methods and apparatus are not limited to any specific aspect or feature or combinations thereof nor do the disclosed things and methods require that any one or more specific advantages be present or problems be solved. Furthermore any features or aspects of the disclosed embodiments can be used in various combinations and subcombinations with one another.

Although the operations of some of the disclosed methods are described in a particular sequential order for convenient presentation it should be understood that this manner of description encompasses rearrangement unless a particular ordering is required by specific language set forth below. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity the attached figures may not show the various ways in which the disclosed things and methods can be used in conjunction with other things and methods. Additionally the description sometimes uses terms like produce generate display receive evaluate vulnerability weakness scan and perform to describe the disclosed methods. These terms are high level abstractions of the actual operations that are performed. The actual operations that correspond to these terms will vary depending on the particular implementation and are readily discernible by one of ordinary skill in the art.

Theories of operation scientific principles or other theoretical descriptions presented herein in reference to the apparatus or methods of this disclosure have been provided for the purposes of better understanding and are not intended to be limiting in scope. The apparatus and methods in the appended claims are not limited to those apparatus and methods that function in the manner described by such theories of operation.

Any of the disclosed methods can be implemented as computer executable instructions stored on one or more computer readable media e.g. non transitory computer readable storage media such as one or more optical media discs volatile memory components such as DRAM or SRAM or nonvolatile memory components such as hard drives and solid state drives SSDs and executed on a computer e.g. any commercially available computer including smart phones or other mobile devices that include computing hardware . Any of the computer executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer readable media e.g. non transitory computer readable storage media . The computer executable instructions can be part of for example a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application such as a remote computing application . Such software can be executed for example on a single local computer e.g. as an agent executing on any suitable commercially available computer or in a network environment e.g. via the Internet a wide area network a local area network a client server network such as a cloud computing network or other such network using one or more network computers.

For clarity only certain selected aspects of the software based implementations are described. Other details that are well known in the art are omitted. For example it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance the disclosed technology can be implemented by software written in C C Java or any other suitable programming language. Likewise the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.

Furthermore any of the software based embodiments comprising for example computer executable instructions for causing a computer to perform any of the disclosed methods can be uploaded downloaded or remotely accessed through a suitable communication means. Such suitable communication means include for example the Internet the World Wide Web an intranet software applications cable including fiber optic cable magnetic communications electromagnetic communications including RF microwave and infrared communications electronic communications or other such communication means.

Each of the agents communicates with the rest of the system depicted in the computing environment via an agent platform server . As shown the agent platform server includes an agent bridge for sending messages to and from agents e.g. agents . The agent bridge can send messages over a computer network to agents executing on other computers using inter process and or inter thread communication to agents executing on the same computer as the communication bridge or by using other suitable communication means. The illustrated agent platform server also includes a message broker with multiple message queues for temporarily storing messages received from and sent to for example the agent bridge an agent manager and agent data consumers . In some examples the message broker has a single message queue . The agent platform server coordinates operation of the agents by sending and receiving messages using the message broker .

Some agent platform server implementations can contain more than one message broker organized as a network of message brokers. Additionally some implementations can include additional instances of the agent bridge or the agent manager . Various combinations of message brokers agent bridges and agent managers can be used to support high availability and redundant capabilities.

The exemplary computing environment includes a number of agent data consumers including but not limited to a compliance server a log server a policy server a change management server and a file integrity monitoring server an agent reconciliation server an agent provisioning server and an agent management server . In some examples different combinations of agent data consumers can be deployed in the environment according to the desired compliance and security applications to be performed. These combinations are not limited to a single machine. The agent bridge message broker agent manager or any combination of the agent data consumers can execute on separate computers or separate virtual machines on a single or multiple computers. For example the compliance server can host a Compliance and Configuration Control CCC tool used to detect analyze and report on change activity in an IT infrastructure. The CCC tool can assess or receive configurations of the one or more nodes at one or more locations and determine whether the nodes comply with internal and external policies e.g. government regulatory or third party standards such as Sarbanes Oxley HIPAA ISO 27001 NIST 800 NERC PCI PCI DSS Basel II Bill 198 CIS DISA FDCC FFIEC GCSx GLBA GPG 13 IBTRM or other IT infrastructure compliance standards . The CCC tool can identify and validate changes to ensure these configurations remain in known and trusted states.

In particular implementations the CCC tool operates by capturing a baseline of server file systems desktop file system directory servers databases virtual systems middleware applications and or network device configurations in a known good state. Ongoing integrity checks then compare the current states against these baselines to detect changes. The CCC tool collects information used to reconcile changes detected by the agents ensuring they are authorized and intended changes. The CCC tool can crosscheck detected changes with defined IT compliance policies e.g. using policy based filtering with documented change tickets in a change control management CCM system with a list of approved changes with automatically generated lists created by patch management and software provisioning tools and or against other desired and approved changes. This allows the CCC tool to automatically recognize desired changes and expose undesired changes.

The CCC tool can also generate one or more reports concerning the monitored nodes showing a wide variety of information e.g. compliance information configuration information usage information etc. The compliance related reports generated by the CCC tool can in some instances comprise a score for a node that indicates the relative compliance status of the node as a numerical value in a range of possible values e.g. a score of 1 to 100 or other such numeric or alphabetical range . The CCC tool can also apply a set of one or more tests to the nodes to evaluate the compliance status of one or more nodes. In such embodiments the compliance related reports generated by the CCC tool can include the number of devices that passed a particular test as well as the number of devices that failed the test. Further the CCC tool can store detected change event data in an event log or transmit the event data as soon as it is detected or shortly after it is detected. Event logs typically comprise a list of activities and configuration changes at nodes of the IT network.

An exemplary CCC tool that is suitable for use with the disclosed technology is the Tripwire Enterprise tool available from Tripwire Inc. The examples described below are sometimes shown or discussed as being used in connection with the Tripwire Enterprise tool. This particular usage should not be construed as limiting however as the disclosed technology can be adapted by those skilled in the art to help monitor and manage IT nodes using other compliance and configuration control tools as well.

The compliance server can also include a security information and event management SIEM tool that is used to centralize the storage and interpretation of events logs or compliance reports observed and generated in an IT management infrastructure. The event log and compliance report information is typically produced by other software running in the IT network. For example CCC tools generate events that are typically kept in event logs or stored in compliance reports as discussed above. The SIEM can be used to provide a consistent central interface that an IT administrator can use to more efficiently monitor and manage activity and configuration changes in an IT network. As needed the IT administrator can access and use the CCC tool which may provide deeper information than that provided by the SIEM. A SIEM tool can also integrate with external remediation ticketing and or workflow tools to assist with the process of incident resolution. Furthermore certain SIEMs include functionality for generating reports that help satisfy regulatory requirements e.g. Sarbanes Oxley PCI DSS GLBA or any other such requirement or standard such as any of those listed above . For these reasons SIEM tools are becoming more widely adopted by IT administrators who desire to use a single centralized interface for monitoring and managing their increasingly complex IT infrastructures.

Logging tools can operate similarly to SIEM tools. Accordingly for any of the embodiments disclosed below a logging tool may take the place of a SIEM tool. For ease of readability however reference will typically be made to just a SIEM tool. An exemplary tool for logging and SIEM that is suitable for use with the disclosed technology is the Tripwire Log Center tool available from Tripwire Inc.

In some examples of the disclosed technology the agent provides a common platform for executing pluggable platform and or native code in a manner that does not require a concurrently active connection to either the agent bridge or agent data consumers . By allowing unconnected operation the agent is better able to tolerate intermittent network connections delays and or errors in the agent platform server agent data consumers or interconnecting networks.

The agent includes functionality for automatically adjusting the rate at which data on the host system is acquired based on for example currently available host system resources including cache resources host system workload or other host system resources. In some examples cached data can be resequenced based on priority changes and observed behavior of the host system. In some examples the agent can automatically adjust and prioritize transmission of cached data to the agent bridge based on for example the amount of time the agent has been connected to the network a network reconnection event and or using a pseudorandom number to determine when to send cached data to the agent bridge. In some examples the adjusted rate is based on the amount of lag between messages in a spool e.g. spooler lag can be defined by an agent as the amount of time between the oldest and newest messages in a spool . In some examples certain messages can be prioritized over others e.g. messages carrying Security Content Automation Protocol SCAP data can be prioritized so that they are sent with higher priority than other types of messages .

In some examples of the disclosed technology the agent is implemented in a microkernel based operating system platform while in other examples the agent is implemented using a more traditional monolithic kernel. The agent can include an embedded scheduler e.g. executed by the local agent process or another process that determines when to execute agent tasks even when the agent is not connected to a bridge or server.

In some examples the agent is a container based agent that implements Federal Information Processing Standard FIPS cryptographic services for communicating and or storing data. In some examples information regarding FIPS containers names or other relevant FIPS fields are removed from data e.g. before transmitting or storing FIPS data to increase the difficulty of unauthorized decryption of FIPS communications and stored data.

In some examples the agent includes autonomous configuration capabilities. For example the agent can determine software versions and installed hardware associated with its host system or with installed plugins and based on the determined software and hardware negotiate a more detailed configuration with any of the agent data consumers .

In some examples the agent includes support for on demand push down of plugin modules. In some examples the agent includes the capability to automatically switch to different pre designated endpoints by automatically switching to particular ports and or bridges.

In some examples the compliance server communicates a desired spool depth to agents which in turn adjust the rate at which data is sent to server. In some examples when a spool associated with an agent becomes completely full the agent can insert a mark in the spool and then once space in the spool becomes available peel off logs when data transmission resumes.

As shown in the agent includes an asynchronous service module for controlling and coordinating asynchronous services for example processing of asynchronous messages received from and sent to the agent bridge. The asynchronous service module can employ a number of asynchronous input output I O threads for performing these tasks.

An agent information module is used to send messages with information about the agent and its associated plugins including identification information e.g. one or more UUIDs catalogs of available messages the agent is capable of consuming or producing and other agent information.

A message dispatcher sends messages between an agent bridge e.g. via a bridge connector and agent plugins. In some examples the message dispatcher can send commands to an agent spooler. A message builder is used to build messages sent by the message dispatcher including envelopes for such messages.

A plugin manager including a number of plugin connectors for connecting the agent to its plugins. A thread manager is used to manage agent threads e.g. bridge writer threads plugin manager threads asynchronous I O threads or other agent threads .

A bridge connector is used to connect to one or more agent bridges and send messages from for example the message builder.

A multi file spooler includes multiple spool files that can store data from the plugin manager before the data is sent to for example one or more of the agent bridges.

In some examples of the disclosed technology agents are designed to provide multi platform functionality thus allowing developers to develop agents for e.g. both Windows and Posix platforms concurrently.

In some examples agents and their corresponding plugins are written in C using multi platform libraries and coding methodologies. In some examples using languages such as C allows for a smaller agent memory footprint than agents implemented using other languages e.g. Java.

In some examples one or more agents e.g. agents agent bridges e.g. agent bridge and or agent data consumers e.g. compliance server can be co located on the same computer system. In other examples each of the agents agent bridges and compliance servers are installed on separate computing systems that are connected using a network or other communication means or are installed within separate virtual machines connected on a single computing system.

In some examples of the disclosed technology the agent is executed as a non root non administrator user. This provides additional security by restricting access but in some deployments it may be desirable to allow limited administrator access to the agent and or a subset of agent plugins to for example allow access to administrator resources e.g. to access the Windows Event Log WEL .

The agents can communicate to the bridge using for example a proxy provided that supports the SOCKS5 protocol although other protocols can be employed. In some examples it is desirable to utilize authentication features provided by the network protocol to limit access to for example the bridge and or compliance server to authenticated agents. In some examples the SOCKS5 proxy used can be previously installed by a system administrator and be used to support other communications unrelated to agent traffic. One desirable aspect of not including a proxy server within an agent is that the attack surface of the agent is reduced as there is no open SOCKS5 port for attackers to attempt to attack.

In some examples the spooler is supplemented by a parallel Last In First Out buffer LIFO for certain types of messages. For example because consumers of SCAP information often prioritize the most recent data available over older data the agent can use a LIFO as a second spool for data coming from e.g. an OVAL plugin such that the newest messages are transmitted to the server first.

In some examples of the disclosed technology agents can use a unique identifier e.g. a UUID Universally Unique Identifier to identify themselves. The agent self generates its unique identifier. The unique identifier is used to identify messages arriving to the bridge as well as allowing for the routing of messages from server side components to the agent. The unique identifier is independent of any network addresses e.g. IPv4 or IPv6 addresses or other network addresses . In some examples the unique identifier is associated with a set of MAC addresses associated with network interfaces discovered on the agent s host system.

When one or more network addresses e.g. an IP address on a system change the agent can make note of this fact but this does not substantially change operation of the agent. The agent can send IP addresses and associated names to the server for informational purposes but identification of the agent by the server is primarily if not exclusively based on the unique identifier. An agent s identifier is not changed when the IP addresses of the agent s host system changes.

Each agent is controlled by a local agent process e.g. local agent process . The local agent process can control for example the bridge connector message dispatcher plugin manager and spooler shown in .

The message dispatcher controls communication flow between the plugin manager the bridge connector and the spooler . The message dispatcher communicates with a message builder for forming the message and can include a number of bridge handlers and plugin handlers that are configured to operate with particular bridges and plugins respectively.

The bridge connector is used to connect to and send messages to and from the agent bridge . As shown in the bridge connector includes an asynchronous heartbeat timer and an asynchronous connection timer . The asynchronous heartbeat timer is used to determine intervals between sending heartbeat messages to the agent bridge as will be further detailed below. The asynchronous connection timer is used to reset a connection attempt to the bridge if the connection is not achieved by the end of a specified timeout period.

Also shown is an agent configuration manager which is responsible for reading configuration data e.g. configuration data stored in one or more configuration files to determine how to configure the agent. Parameters that can be configured with the configuration data include but are not limited to timer and heartbeat time intervals spooler configuration plugin configuration and security and encryption parameters. In some examples the agent configuration manager is responsible for searching for and invoking plugins by sending commands of enabled and or disabled plugins to the plugin manager .

The agent can also be configured to publish a catalog of messages that it consumes and produces. The agent does not need to publish the plugins that are consuming and or producing information. In this way the actual plugins being used is not shown to the consumers. If a plugin becomes disabled then the messages associated with that plugin are removed from the catalog. If a plugin is configured for load on demand then messages associated with that plugin will be left in the catalog when the plugin is not running. The agent message catalog can be communicated using the agent heartbeat as a list of capabilities.

Also shown is a security manager which is responsible for configuring security and encryption of messages send to from the agent as well as storage and management of encrypted data. The security manager stores related data e.g. security configuration data and encryption keys in one or more cryptography files .

Because the data to be sent is stored in the spool file the agent manager can send data while a plugin is disabled or enabled .

The agent can be configured dynamically using e.g. Domain Name System DNS Service records SRV records or a configuration file. In some examples using DNS SRV records for configuration is preferred when data for a particular DNS domain is sent to a single compliance server. The configuration file setup technique may be preferred when different machines in the same domain will connect to different compliance servers.

In some examples a provisioning service can be used that informs agents about their initial configuration information configures the agents with specific combinations of plugins or provides an upgrade of agent or plugin executable code.

In some examples a reconciliation service can be used to match previous agent identifiers and operating system information with current identifiers and current operating system information. This reconciliation service insures continuity in data and logging information stored in the agent data consumers .

Agents can be installed on individual target machines using e.g. the host operating systems native packaging tools. For example Windows targets can install agents using the Microsoft MSI installer while Linux targets can use Red Hat Package Manager RPM .

Using native system tools allows for easy deployment and upgrade of agents using mechanisms such as Active Directory. The core agent component and associated plugins can each be versioned independently.

On startup the agent collects data including a list of IP addresses assigned to the host domain names associated with the list of IP addresses and performs a lookup for associated DNS SRV records.

The functionality of agents e.g. agents can be expanded with the use of agent plugins. For example illustrates a number of plugins that are connected to the local agent process through the use of a plugin manager. Plugins can be written in any suitable computer language e.g. C using multi platform libraries and coding methodologies which allows for the sharing of the vast majority of agent code across different host platforms. In some examples other languages besides C can be used to implement plugins provided that support is available for the messaging layer used to connect the agent to its agent bridge. In some examples Google Protobuf is used as the messaging layer.

As shown in the agent includes a plugin manager that controls execution of plugins and routes messages between plugins e.g. via plugin connectors the message dispatcher and the spooler . The plugin manager also includes a number of capability maps e.g. capability map that list the types of messages and services that are produced and consumed by the connected plugins. The plugin maps can be used to build catalog entries thereby advertising services available from the agent without exposing additional details regarding the plugins using e.g. ConfigRequest messages.

The loading of plugins can be controlled using a rule set which specifies which plugins to load and connect to the agent and the order in which to load plugins. In some examples some plugins can be chained together thereby providing a degree of modularization.

The plugin manager thread is used to send data to the plugins indicating the current lag of the spooler or delta to the plugin manager for communication to individual plugins via the plugin connector . Each plugin can have a contract e.g. an automatically negotiated contract with the spooler to respond in a certain period of time and then return to sleep.

In some examples agents can load plugins on an on demand basis. In some examples the agent provides a quarantine functionality to limit resources and or data that can be accessed by one or more installed plugins. In some examples plugins can include hooks to allow the plugin to be used across multiple operating system platforms e.g. by handling both Windows and POSIX hooks .

Plugin startup can be initiated based on a number of events for example when an agent e.g. agent is initialized or after a plugin dies. In some examples an agent initializes a plugin by issuing a command including arguments sufficient to describe the desired plugin operation e.g. by passing command line arguments to initialize a plugin process and specifying a path to a configuration file a path to a log file read pipe identifier and or a write pipe . In some examples the agent and its associated plugins e.g. plugins can communicate with each other using other interprocess communications mechanisms provided by the operating system including but not limited to shared memory anonymous pipes UNIX pipes streams or sockets. In some examples some or all of the plugin startup is delegated to the plugin manager thread which can also route communications between the plugin manager and the spooler. The configuration file can include information describing messages that the plugin will receive and send as well as expected behaviors for interacting with the agent that initiated the plugin. Passing arguments at plugin initialization provides the plugin enough information to be fully functional once execution begins.

In some examples messages sent between agents the agent platform server and or the agent data consumers is compressed. Further plugins can compress data before transferring to its agent and messages stored in spooler can be compressed. Compressing transmitted messages and or stored messages can reduce network load and or reduce the spooler storage capacity requirements. Huffman encoding Lempel Ziv encoding or other suitable compression techniques can be used to compress the messages.

In some examples executable code for one or more of the plugins can be located in a specified directory on the agent host computer and then discovered and loaded by automatically traversing the specified directory and or sub directories for the plugin executables.

In some examples messages are passed between an agent and its plugins using message envelopes. Messages sent from a plugin can be numbered and addressed by the associated plugin process. The messages can be addressed using a four part scheme 

Together the sender uuid message type sequence major number and sequence minor number can be used to form envelope addresses. In some examples a plugin can be added to the agent to handle envelope requirements. By using a major and a minor sequence number creating file system updates for every message can be avoided while still providing enough information such that messages can be uniquified in a message spool. This enables agents to find and perform message ResendRequest operations on the spooled messages. Upon invocation of a plugin the agent assigned a new sequence major number thereby making all the messages that the plugin creates and that the agent writes to the spool unique even after restart of a plugin or its corresponding agent. An example of major and minor numbers used to address plugin messages are described in Table 1 below.

In some examples of the disclosed technology a number of different messages types from an agent can be received by its plugins including handshake requests status requests and shutdown requests as discussed further below.

Upon startup a plugin receives a handshake sent from its corresponding agent. The handshake can include data such as the agent s corresponding identifier e.g. UUID a sequence major number and a data directory identifier. Responsive to receiving the handshake from its agent the plugin responds with a handshake response message. The handshake response message includes a plugin identifier e.g. the name of the plugin a description of the plugin s capabilities and a description messages that will be produced by the plugin. For example the plugin capabilities list can include a list of message types that can be accepted by the plugin and the list of plugin messages produced can configuration and data response message types.

Agents e.g. agent can periodically send status messages to one or more of their associated plugins. The plugin in turn responds with a StatusResponse message within a predetermined time period to notify the agent that the plugin is operating correctly. The status request can include an indication of the number of seconds between the time e.g. the wall clock time of the last message written to the spool and the time of the last message read and sent to the bridge. This provides the plugin with an indication of the state of the agent. For example if the agent has sent all the messages in its spool then the message delta is relatively small and sending another small message from the plugin is not expected to burden the agent. Conversely if the agent has not sent a message to the bridge for some time e.g. because the agent is disconnected from its bridge or the agent is behind in sending data to the bridge then the plugin can choose to buffer more data thereby creating a larger message before sending to the agent. Sending fewer messages of larger size in some examples up to about 1 Megabyte incurs less network transmission overhead than sending more messages of a smaller size.

In some examples plugin StatusResponse messages include the plugin name and a description of its current configuration. This information is collected and stored by the agent manager e.g. by receiving StatusResponse messages from the plugin manager via the agent s bridge connector . By collecting plugin name and configuration description a compliance sever e.g. agent data consumers can determine whether a particular plugin has an incorrect or outdated configuration and address the configuration by e.g. sending a new plugin configuration to the agent .

In some examples of the disclosed technology plugins can be shut down as follows. A plugin s host agent sends a Shutdown message to the agent instructing it to shut down. The plugin persists its state e.g. by storing state information in a computer readable storage media coupled to the agent and shuts down. A brief period of time after sending the Shutdown message the agent closes pipes to from the agent and sends the plugin s associated process a SIGTERM signal.

In some examples of the disclosed technology the capabilities of plugins can be enhanced using a ConfigRequest to exploit the autonomous nature of agent operations described herein. In a ConfigRequest pattern a plugin provides a ConfigRequest capability. The plugin responds to ConfigRequests by sending ConfigResponse messages in response and when configured to do so additional data with the ConfigResponse.

In some examples of the disclosed technology a ConfigRequest message for a plugin includes a serial number and a description of a configuration. When a new ConfigRequest is received by a plugin the plugin replaces its current configuration with the new configuration described in the ConfigRequest. Plugins can store their current configuration and runtime state so that the plugin can resume operation using the current configuration and runtime when the plugin is restarted.

The plugin responds with a ConfigResponse message which tells the Server that a new serial number configuration was received and processed. If the plugin cannot service the entirety of the ConfigRequest it can include error information in the ConfigResponse. The requested configuration may have been partially applied or rejected completely as defined by the plugin.

Once a configuration is accepted and applied the plugin begins sending data messages to the agent data consumers via the agent bridge .

The agent periodically sends heartbeat messages. The heartbeat messages can contain information including but not limited to current wall clock time current spooler minor major number currently available messages that can be sent to from plugins for servicing and or messages that cannot currently be serviced by any plugin on the agent.

The spooler stores data as a number of relatively small e.g. 32 Megabyte files on disk to form a complete spool e.g. a 1 Gigabyte spool file comprising 32 each of 32 Megabyte files . Storing spooled data in small files can be desirable as it limits data loss in the inadvertent event of agent or plugin shutdown or corruption of the smaller 32 Megabyte spool file. Within a spool file the data can be further segmented in a series of headers and data where the header indicates a variable length of the data in the segment. As shown in the spool files are stored in a number of computer readable storage media and categorized according to the state of the data in the individual files for example completed files pending files the current read file and the current write file . Further markers indicating e.g. current read and write position of the spool files can be stored in a read position file . As will be readily understood to one of ordinary skill in the art the spool files are not limited to storage in for example a hard drive but can also be stored in a solid state drive SSD non volatile or volatile memory a database or other suitable storage means.

The spool file manager manages the various spool files illustrated in . Completed files are spool files that contain messages that have already been sent to the agent bridge . Pending files are spool files that contain unread messages ready to be read and sent to the agent bridge . The current read file is an open spool file that is being read by the bridge writer thread and concurrently forwarded to the bridge connector . After each message is read the offset of the previously read message and the spool file name is updated in the read position file . This offset and file name lags the last message read by one thereby enabling recovery if the bridge connector is disconnected from the agent bridge while a message is in flight being sent . When the connection is reestablished the message that was in flight is sent again. The agent platform server and the agent data consumers are configured to tolerate duplicate messages. The current write file is the spool file that is open for writing of messages received from the plugins via the message dispatcher . At times the current read file and current write file can be the same file. The spool files illustrated in are one suitable configuration for use with the spooler but it will be readily understood by one of ordinary skill in the art that other suitable spool file configurations can be employed.

Messages in the spooler can be identified using a unique session identifier e.g. unique at least for a particular session of operation on a particular agent . In some examples the unique session identifier includes a major and a minor number. The major number is a unique identifier for the plugin session. The minor number is unique for each message of that type within the corresponding major number run session.

In some examples of the disclosed technology session identifiers are timestamp agnostic in other words the current time on the host computer is not relevant to the ordering of messages according to session identifiers. The session identifiers can be used for relative positioning and sequencing of the messages. In some examples the spooler can be configured to overwrite a selected portion of the spool e.g. 20 of the spool . In some examples there is one spool file per plugin while in other examples two or more plugins share the same spool file.

In some examples message data are encrypted. In some examples the integrity and authenticity of messages can be verified using HMAC Hash based Message Authentication Codes or other suitable methods to prevent tampering of messages sent by the agent or plugins.

The spooler supports disconnected operations. The supported disconnected operations include disconnected plugins e.g. ability to use the spool when plugins are disabled and network disconnections e.g. intentional or unintentional loss of network connectivity to the agent bridge . By spooling data the agent and its plugins can operate semi autonomously. Plugins can receive data configuration information and perform operations e.g. vulnerability scans monitor watch logs or other operations on a regular basis but the data can be returned regardless of the plugin being enabled disabled. When the agent reconnects with the bridge it can send all or a portion of its spooled data one or more of the agent data consumers via the agent bridge .

In some examples the sizes of the spool file s are determined based at least in part on the rate at which messages are being sent. For example if 0 to 5 messages are being sent a MB spool file may be sufficient while 11 or more messages may consume a 1 GB or even larger spool file.

Data stored in the spool files can be secured using e.g. obfuscation by compression or encryption. In some examples spool file data is not encrypted but data in messages sent from the agent to the bridge is encrypted using e.g. transport layer security TLS encryption. The agent should have at least some read access to the spooler data in order to determine e.g. spool information such as message type sequence major minor numbers and time stamps.

Upon agent startup the agent spooler creates a new spool file so that in the event the end of the previous spool file was corrupted new data will be added to an uncorrupted file thereby avoiding appending data to a corrupt spool file that may be unreadable.

The priority queue can be used route some messages to the bridge faster according to priorities assigned to the messages or plugins producing the messages. For example for a plugin that processes SCAP data the most recent messages are the most important and thus are desirable to send earlier than lower priority data. In some examples all the higher priority messages in the priority queue are sent first while in other examples the sending of messages is load balanced so that at least some of the lower priority messages are sent before the higher priority messages are sent.

In some instances there may be more than one instance of agent spooler . For example spooler instances can be dedicated to individual plugins or shared by related plugins.

As shown in the agent platform server provides an agent bridge that can receive messages from agents e.g. agents a message broker including one or more message queues and an agent manager. The message broker can be used to route messages between the agent bridge and any of the agent data consumers . Agents e.g. agents can establish a network connection e.g. to a number of agent data consumers including the compliance server the log server the policy server the change management server etc. to the agent bridge that is hosted on an agent platform server. The agent connection to the agent bridge can be encrypted using e.g. Transport Layer Security Secure Sockets Layer or other suitable encryption scheme. In TCP UDP examples the default port used to connect to the bridge is port number 5670 but other suitable network ports can be employed. To provide additional security the agent can be configured so that it does not listen for incoming connections from the bridge or compliance server. Instead the agent initiates communication to these network targets.

Agents can use the underlying operating system routing information to determine how to connect to the agent bridge. Since agents create connections to the bridge no return routing from the bridge to an agent is necessary. Once the connection is established messages are sent in both directions. For example an agent bridge can send advisory messages to its associated agents instructed the agents to hold message or to hold particular types of messages until a subsequent advisory message is sent indicated that the agent should resume sending of messages or resume sending particular types of messages . The agents and the agent bridge can each establish agent identifiers e.g. UUIDs for uniquely identifying the agents and bridges thereby avoiding reliance on other identifiers such as IP addresses or MAC addresses that may not provide a unique identifier in virtual environments.

In some operational scenarios one or more agent data consumers may be shutdown for maintenance or is temporarily off line and undergoing a fault recovery operation. The agent bridge monitors the message queues determining if the agent data consumers are removing messages in a timely fashion. If the message removal is slowing or stopped the agent bridge sends advisory messages to all agents informing them to stop or restart specific message types. This provides a level of fairness for all messages such that a non operational agent data consumer does not block the traffic of messages to other operational agent data consumers. The message fairness delivery algorithm adds resiliency and robustness in the communication channel from the plugins through the agent and the spooler through the connection to the agent bridge to the message broker and to the agent data consumers. In some examples the agent could have more than one spooler dedicated to a particular plugin or message type facilitating message delivery fairness.

Messages e.g. messages from any of the agent data consumers are sent to and from agents via the agent bridge . The agent s bridge subscribes to a topic though which all agent bound messages travel

Messages can be transported within an envelope. The envelope includes source and or destination information and in some examples includes a time stamp the associated agent identifiers e.g. UUIDs message type the sequence major and or minor numbers or other information that can be used to route and process the messages contained in the envelope.

In some examples the agent platform server is hosted on a separate server from any of the agents while in other examples the agent platform server can reside on the same server as the agents and or the agent data consumers . In some examples the agent platform server resides in the same local area network LAN as the agents and or the agent data consumers while in other examples the agent platform server resides at a separate location or in a computing cloud.

The agent bridge receives and sends messages from and to agents e.g. agents . The agent bridge can notify other components when agent connections are created or destroyed using e.g. AgentConnect and AgentDisconnect messages. The agent bridge can generate a bridge identifier e.g. a UUID for itself that can be used by the agents and the agent data consumers to uniquely identify the agent bridge in subsequent messages.

When an agent connects to the bridge the bridge creates an AgentConnect message. An agent manager e.g. executing on one or more of the agent data consumers subscribes to these messages. Similarly when an agent disconnects from the bridge the bridge creates an AgentDisconnect message. The agent manager subscribes to these messages.

In some examples of the disclosed technology the computing environment includes the agent manager which can execute on for example the agent platform server or another suitable environment. The agent manager can manage the status of agents and provide information for agent data consumers upon request.

The agent manager sends messages to configure agent plugins and processes data stream from agents. Some of the agent data that can be tracked by the agent manager include heartbeats host names IPv4 IPv6 addresses capabilities capability configurations capability and serial number and host platform. In some examples the configuration messages can be initiated by the agent itself or by one of the agent data consumers .

In some examples of the disclosed technology the agent manager can also provide OnlineAgentsRequest services. The agent manager sends an OnlineAgentsRequest message to get a list of online Agents. This request is returned from listening agents in the form of an OnlineAgentsResponse message. The OnlineAgentsResponse message can be used in conjunction with the ongoing AgentOnline messages to track online agents. The agent manager sends AgentOnline messages when for example an agent connects to the agent bridge or when an agent s capabilities change. For example in the event that a plugin dies and its associated agent does not restart the plugin the capabilities for that plugin will no longer be included in catalog published with the associated agents heartbeat. Upon recognizing the change the agent manager can publish a new AgentOnline message for the agent. The allows the agent data consumers to discover new plugins or determine that plugins are no longer operational based on changes in the message catalog reported in the heartbeat messages.

The agent platform server can use the message broker for distributing messages between the agent bridge the agent manager and the agent data consumers . The message queues allow messages to be temporarily stored before sending on to their destination and can be used to buffer traffic in the event of a failure in the connecting network one or more of the agents or one or more of the agent data consumers .

The agents disclosed herein are designed to be semi autonomous. For example agent plugins are designed to accept a complete configuration describing what acts the agent is to perform and when. As a result plugins can continue operating according to the current configuration without communicating with the agent manager or the agent data consumers .

In other words an agent and its plugins can continue their normal operations of watching a target machine even while being unable to communicate with the agent bridge agent manager and or agent data consumers . Messages and data generated by the plugin can be spooled by the agent until a connection to the bridge can be re established and the spooled messages sent.

At act the agent turns Federal Information Processing Standards FIPS mode on for use in subsequent communications. At act the agent checks to determine whether it has already been registered. If the agent has not been registered then the agent generates keys and a certificate signing request CSR at act . Further at act the agent generates a digital signature and client authorization information. At act the agent turns FIPS mode off.

At act the agent sends a client hello message to the agent platform server. In some examples of the disclosed technology the agent initiates an anonymous Transport Layer Security TLS handshake request with the agent platform server that is further detailed below regarding . Responsive to receiving the client hello message the agent platform server sends a server hello message to the agent at act . At act the agent builds an agent registration request and sends the request to the agent platform server at act . The agent registration request includes the keys CSR digital signature and client authorization information that were previously generated.

When the agent platform server receives the agent registration request the server verifies the request. At acts and the agent platform server verifies the registration key and CSR received with the agent registration request. At act the agent platform server signs the CSR and sends the signed CSR to the agent in an agent registration response message at act .

At act the agent converts the signed CSR to a Privacy Enhanced Mail PEM format certificate and stores the PEM certificate in a local computer readable storage media. At act the agent disconnects from the agent platform server.

In some examples of the disclosed technology agents are uniquely identified by an agent UUID which is 128 bits in length. Some examples of when an agent data consumer can receive an AgentUUIDChange message from an agent include registration of a new agent corruption of agent state files change in one or more MAC addresses on the system cloning of a virtual machine VM and or replacement of one or more network cards on the agent s host machine.

In the cases of a new agent registration or corruption of an agent state file an AgentUUIDChange message arrives at the compliance server with a new current UUID and the previous UUID is not set because it did not exist or was unreadable.

In the case of MAC changes VM changes and NIC changes the AgentUUIDChange message can arrive with both the new current and the previous UUID set. In this case the server should be configured to take appropriate action e.g. merging agent data if the messages are from the same system or treating the data as separate in the case of a cloned system. The server needs to determine whether the assets associated with the agent are the same node or different nodes and whether to associate the previous data stream with the new data stream. In some examples the server is configured to make these determinations automatically while in other examples the server receives input e.g. from a user or a configuration file to make the determination.

In the event that a virtual machine with the agent is installed is cloned but not yet started then the cloned agent will authenticated e.g. using password and or public key certificates as described above and obtain new certificates for connecting to the bridge. The agent will then generate a new UUID as described above.

In the event that a virtual machine with the agent installed is cloned after agent startup then upon startup the new agent will connect to the bridge using the existing certificates stored on the cloned system. If all MAC addresses on the agent s host system have changed the agent will generate a new UUID and send an AgentUUIDChange message with the new and previous UUIDs for the agent. The server will create a new asset record corresponding to the new agent s host system. If not all of the MAC addresses on the agent s host system are changed then the will connect to the bridge using the certificate and existing UUID. This allows for the same agent identifier to be used in for examples maintenance scenarios where a network interface card is replaced in a host having more than one network interface card without generating a new agent identifier.

After receiving the hello message the agent platform server verifies the agent peer information at act the certificate at act and the agent identification certificate at act . Once the information is verified at acts the agent platform server responds to the agent with a hello message at act .

After the agent receives the agent platform server s hello message it responds by verifying the server peer information at act the server s certificate authority issued certificate at act and the bridge identity certificate at act . Once the information in the server hello message has been successfully verified the agent responds with an agent heartbeat message . As further detailed above the agent heartbeat message includes information that can be used to process spooled off messages from plugins and to identify and request plugin services including time data spooler marker numbers and available messages that are processed by the agent s plugins.

As data is received from one or more agents the agent data consumers can monitor messages received from the agents including messages from agent plugins and request resends of any messages that are missing. In some examples the bridge e.g. agent bridge can perform similar monitoring and request resends. Because the order in which messages are delivered to the agent data consumers e.g. the compliance server is not necessarily guaranteed it is typically advantageous for the compliance server to have handling capabilities for messages received out of order.

One high level example of how a compliance server handles missing messages is provided below. Assume that a compliance server receives the following stream of data and that the WelConfigResponse and WelData messages are for the same configuration serial number.

An example of major and minor numbers used to address plugin messages are described in Table 2 below.

The first message is a WelConfigResponse message which is received in response to a previously sent WelConfigRequest message. The compliance server then starts receiving a number of WelData messages which have major number 5 and minor numbers being consecutive integers from 1 to 50. The next WelData message received by the compliance server has the same major number 5 but a minor number of 55 which indicates a gap in WelData for minor numbers 51 54.

Responsive to detecting the missing data the server sends a ResendRequest message to the agent. An example format for the message is ResendRequest previous 5 50 which indicates that the next five messages starting from minor message number 50 are being requested. The server then waits for data to be sent e.g. in a ResendResponse message . Assuming the messages were actually dropped then the missing 4 data messages should be received followed by a ResendResponse message 

As will be readily understood to one of ordinary skill in the art it should be noted that the message names and formatting are for exemplary purposes and that other suitable formats of messages can be used in certain embodiments.

Continuing the exemplary datastream illustrated in Table 2 above when server receives the WelData messages 5 101 followed by WelData 6 1 it will realize that some data from the agent may be missing. Responsive to determining a gap in the received messages the server determines the new major sequence number in the received data stream 6 and identifies possible missed messages. The server constructs and sends a ResendRequest for the possibly missing data. The message can be formed as 

In some examples messages that appear to be missing will occur normally as the major number used by the agent is incremented upon starting or restarting the associated plugin.

Using the same example of a dropped message discussed above the agent can also send a number of different status codes depending on the cause of the missing message s . Table 3 below lists a number of different status codes that can be used in an exemplary embodiment of the disclosed technology 

The following examples illustrate messages being sent in different scenarios responsive to a ResendRequest.

For example if the next message received at the server is major minor 5 100 then the server would expect to receive messages 5 1 through 5 99 previously otherwise the messages are determined to be missing. A ResendRequest for messages between 5 1 and 5 100 is sent. If the agent returns any of the NOT FOUND  status codes then the messages are determined to have been lost.

In another variation of this example if the next message received is 6 1 then a ResendRequest is sent to determine whether any messages between 5 100 and 6 0 were not received. A ResendRequest for messages between 5 100 and 6 0 is sent. If the agent returns the code NOT FOUND CORRUPT then the server determines that data has been lost. Alternatively if the agent returns the code NOT FOUND MISSING then the server determines that all the data between 5 100 and 6 0 has been received from the agent. Alternatively if the agent returns the code NOT FOUND TOO OLD then the result is indeterminate the server determines that data from the agent may or may not have been lost.

This section discussed another example of ResendRequest handling as can be performed in certain embodiments of the disclosed technology. Assume that a system comprising an agent bridge and compliance server are in the state depicted in the diagram of . As shown in a number of messages are or have been stored in a spool memory indicated by the files within the dashed lines which includes a number of individual spool files e.g. two spooled off files four completed files etc. . Each rectangle depicted within the spool memory represents a different spool file. The spool memory can be implemented within an agent as described above regarding although in other examples different suitable agent architectures can be employed.

Two spooled off files have already been removed from the spool and are no longer accessible. The first spooled off file started at message number 1 10 and ended at 1 25 while the second spooled off file 1 26 and ended at 1 51 .

Four completed spool files have been sent to the agent bridge but have not yet been removed from the spool. The message data in the completed spool files is available to be re sent to the agent bridge if requested. As shown in the first completed file spans two major numbers from 1 52 to 1 61 and 2 1 to 2 10 . The major number was advanced from 1 to 2 due to for example restarting of the agent or restarting of a plugin associated with the spool.

The current read spool file is shown which includes messages from 3 21 to 3 60. A current read pointer indicates the current read position for spool messages being sent from the agent to the agent bridge. The current read pointer is advanced as additional messages from the spool are sent to the agent bridge.

Two pending files are shown which are queued to be read after the current read file has been completely read and send to the agent bridge.

The current write file is shown which starts at position 3 105 and currently ends at 3 127. The current write pointer stores the current position for writing within the current write file .

As shown in each of the spool files includes one of the time stamps shown. The time stamps can be used to determine the current lag time between messages. Lag time information can be used to for example adjust the rate at which messages are sent to the agent bridge or the rate at which plugins produce data.

In some examples of the disclosed technology each of the spool files includes a header indicating the size of the spool file an envelope and message data. Messages used to transmit data from the agent to its agent bridge can include an envelope with data that can be used to identify the agent and or the plugin producing the message data for example message type agent UUID destination UUID major minor number and timestamp can be included in the message envelope.

As an example assume that the system of is being used to spool plugin data to the agent data consumers . One of the agent data consumers determines that some agent data may be missing and the agent data consumer sends the agent a ResendRequest message . The ResendRequest message includes an indication of the previous message 1 41 and next message 3 32 before and after the messages that may be missing thereby indicating a range of messages to be searched. The ResendRequest message also includes the respective time stamps 20140202081200 and 2014020607007 for the possible missing messages.

The agent receives the ResendRequest message and searches the spool memory e.g. using a message searcher . The agent message search determines that messages 1 42 through 1 51 are too old and have been deleted from the spool TOO OLD messages 1 52 through 1 61 2 01 through 2 54 and 3 01 through 3 31 were found and are still stored in the spool FOUND and messages 1 62 through 2 00 and 2 55 and 3 00 are missing MISSING because the messages were never generated . The agent sends a ResendResponse indicating the results of the agent message search to one or more of the agent data consumers . In some examples the agent also automatically sends the FOUND messages to the agent data consumer that sent the ResendRequest while in other examples the agent waits for an additional request to send particular messages from the spool.

The agent data consumers that receive the ResendResponse can react accordingly. For some applications lost or missing data may merely be noted while in other applications the data can be used to for example initiate additional vulnerability scans to replace the missing data.

In some examples of the disclosed technology there is the shared contract for server components agents and their plugins. The contract can be expressed in an Interface Definition Language IDL and implemented using an Application Programming Interface API to coordinate between server components agents and their plugins. The contract establishes a syntax for creating properly formed messages including defining required and optional fields in the messaging protocol.

Under the example contract the agent is responsible for full verification of a plugin package before it is considered and is available to be launched. The plugin package includes executable files configuration information and or command line arguments including a manifest. The plugin package can be digitally signed using suitable cryptographic techniques. Agents e.g. agents can verify the plugin s digital signature before the plugin is considered for operation. In some examples the plugin package is re verified every time the plugin is started while in other examples the plugin package is re verified periodically at system startup or other suitable intervals. Plugins can connect to the agent using only the pipes given to it from the command line arguments. Plugins use the configuration and log directories passed to it from the command line arguments. The first message an agent sends to a plugin after connect is a HandshakeRequest message. The agent includes full path information for plugin s directory and the plugin s executable directory plugin package directory . The executable directory is used for locating shared libraries the plugin may use or delegate to another application for example a Real Time Manager application RTMGR . A RTMGR application can communicate to operating system kernel modules to obtain user specific security information that is associated with a particular event or change or operation that a plugin is monitoring.

The first message from a plugin sent to the agent is a HandshakeResponse message after it has received a HandshakeRequest. The plugin uses the data directory given to it in the HandshakeRequest it receives from the agent. The Agent periodically sends StatusRequest messages to all plugins. Plugins respond to StatusRequest messages from the agent with StatusResponse messages.

Plugins are expected to respond immediately to a Shutdown request message. The plugin periodically persists its last working position if the plugin cannot immediately persist when it receives a Shutdown message from the agent.

Upon restart plugins resume work from the state using its last ConfigRequest. The plugin manages any incomplete units of work.

If a plugin has no work to do and it is designed for on demand loading it informs the agent by sending a PluginExiting message. The agent subsequently moves the plugins capabilities to the on demand maps and sends a Shutdown message to the Plugin and removes the plugin from the plugin list. The agent is responsible to re launch the plugin if a message is received that is contained in the message catalog. Servers agent and plugins operate to keep the amount of message data in the spooler at or below a selected limit e.g. to avoid using more than 80 of the spooler capacity . In some examples the selected limit for the current capacity can be adjusted. Agent and plugin messages can be formed and enveloped as Protobuf messages. Thus the agent does not need to have detailed information about the plugin s structure or operation.

In some examples of the disclosed technology the bridge is configured to use a registration key for authentication. When in this registration mode the agent must supply the correct registration key to the bridge upon first connecting to the bridge in order to authenticate to the bridge. The initial key can be sent using anonymous SSL. After successfully authenticating the key the agent subsequently receives an encryption certificate e.g. a public key certificate such as an X.509 certificate that can be used for encrypting messages sent using subsequent connections to the bridge. If the registration key is changed e.g. by system administrator re configuring the bridge the agent can continue to use the certificate that was received early using the older key. However any new agent instances will need to use the new registration key to acquire their corresponding certificates.

At process block an agent operating on a computing host having one or more network connections collects host data from e.g. one or more plugins on the computing host. The agent is configured to collect the host data whether or not the agent can currently send data via any of the network connections. The types of data collected using the plugins can include FIM data COCR data WEL data Windows Registry data or other suitable data. After collecting the data the method proceeds to process block .

At process block the agent determines whether it can send data via the host computer s network connection s and if so the method proceeds to process block . If not the method proceeds to process block .

At process block the agent has determined that it can send data via the network and the agent proceeds to send at least a portion of the spooled host data to at least one of agent data consumers. For example data can be sent to any of the agent data consumers illustrated in via an agent bridge . In some examples the collected data is temporarily stored in the spooler before being sent.

At process block the agent stores at least a portion of the collected host data in a spooler for later transmission. In some examples the spooler discussed above can be employed. In some examples some of the spooled data can be overwritten or removed based on the priority of the data or according to other suitable criteria.

After the collected host data is sent according to process block or stored according to process block the method can proceed to collect more host data. As the computer network connection becomes available or unavailable the agent can elect to store data in the spooler or send data accordingly. The rate at which the spooled data is sent can be increased or decreased based on for example the lag of the spooler or host computer resources. In some examples the data that is collected is based on a request for a type of data. The agent searches for plugins that can provide the requested type of data and invokes a corresponding plugin if found. In some examples agent can send a description of the types of data and or messages that can be produced by the agent.

At process block an agent executing on a host computer sending one or more data messages to a server with the computer network. The data messages including sequence numbers generated by the agent. For example each of the sequence numbers can include a major number which is incremented upon starting or restarting the agent and a minor number which is incremented with each message sent. Further examples of suitable sequence numbers as can be used in some examples of the disclosed technology are discussed above and illustrated in .

At process block the agent receives a resend message from the server indicating that one or more of the data messages are to be resent. The messages to be resent are indicated using at least some of the sequence numbers for example a range of sequence numbers can be used. The ResendRequest message illustrated in is an example of suitable resend message. After receiving the resend message the method proceeds to process block .

At process block the agent searches for the indicated messages based on the one or more of the generated sequence numbers. In some examples the messages may have already been removed from the agent s host computer. After searching for the messages the method proceeds to process block .

At process block the agent can resend one or more of the requested messages and resend any messages still stored on the agent s host computer. In some examples an additional reply message such as the ResendRespond message illustrated in can be sent with the resent data messages to describe which of the requested messages have been found are too old or are missing.

At process block the agent self generates a unique agent identifier for itself. The agent identifier is independent of any network addresses associated with the agent s host computer. The agent identifier can be for example a UUID. After generated the agent identifier the method proceeds to process block .

At process block the agent sends a first message to at least one agent data consumer e.g. one or more of the agent data consumers . The agent data consumer can stored the agent identifier for use in determining the origin of subsequent messages from the agent. After sending the first message the method proceeds to process block .

At process block the agent is moved to a different physical and or virtual host computer. The agent then sends a second message to the agent data consumer including the same agent identifier. By using the same identifier the agent data consumer can track messages from the same agent even though the agent is operating from a different network address.

In some examples of the exemplary method the agent can be replicated e.g. on one or more additional physical and or virtual hosts and each of the replicated agents in turn self generates a unique agent identifier for itself thereby allowing agent data consumers to distinguish amongst the replicated agents and the original agent. Further the same agent identifier can be used in scenarios where e.g. the agent s network address changes when a network interface card is changed but without changing the agent identifier.

The computing environment is not intended to suggest any limitation as to scope of use or functionality of the technology as the technology may be implemented in diverse general purpose or special purpose computing environments. For example the disclosed technology may be implemented with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The disclosed technology may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to the computing environment includes at least one central processing unit and memory . In this most basic configuration is included within a dashed line. The central processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power and as such multiple processors can be running simultaneously. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two. The memory stores software images and video that can for example implement the technologies described herein. A computing environment may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus a controller or a network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs CD RWs DVDs or any other medium which can be used to store information and that can be accessed within the computing environment . The storage stores instructions for the software plugin data and messages which can be used to implement technologies described herein.

The input device s may be a touch input device such as a keyboard keypad mouse touch screen display pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . For audio the input device s may be a sound card or similar device that accepts audio input in analog or digital form or a CD ROM reader that provides audio samples to the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium e.g. a connecting network to another computing entity. The communication medium conveys information such as computer executable instructions compressed graphics information video or other data in a modulated data signal. The communication connection s are not limited to wired connections e.g. megabit or gigabit Ethernet Infiniband Fibre Channel over electrical or fiber optic connections but also include wireless technologies e.g. RF connections via Bluetooth WiFi IEEE 802.11a b n WiMax cellular satellite laser infrared and other suitable communication connections for providing a network connection for the disclosed agents bridges and agent data consumers. In a virtual host environment the communication s connections can be a virtualized network connection provided by the virtual host.

Some embodiments of the disclosed methods can be performed using computer executable instructions implementing all or a portion of the disclosed technology in a computing cloud . For example agents can be executing vulnerability scanning functions in the computing environment while agent platform e.g. bridge and agent data consumer service can be performed on servers located in the computing cloud .

Computer readable media are any available media that can be accessed within a computing environment . By way of example and not limitation with the computing environment computer readable media include memory and or storage . As should be readily understood the term computer readable storage media includes the media for data storage such as memory and storage and not transmission media such as modulated data signals.

In view of the many possible embodiments to which the principles of the disclosed invention may be applied it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention.

