---

title: Configuration manager and method for configuring a host system for processing a processing job in a virtual data-processing environment
abstract: Described herein are systems, methods, and software for translating data requests in a data processing cluster. In one example, a method of operating a cache service to interface between a virtual machine cluster and job data associated with a job executed by the virtual machine cluster includes identifying a request initiated by the virtual machine cluster to access at least a portion of the job data in accordance with a first distributed object access protocol. The method further includes in response to the request, accessing at least the portion of the job data in accordance with a second distributed object access protocol, and presenting at least the portion of the job data to the virtual machine cluster in accordance with the first distributed object access protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619248&OS=09619248&RS=09619248
owner: Bluedata Software, Inc.
number: 09619248
owner_city: Mountain View
owner_country: US
publication_date: 20140829
---
This patent application refers to and claims priority to U.S. provisional patent application No. 61 872 451 entitled Configuration Manager and Method for Configuring Processing Jobs in Virtual Environments and filed on Aug. 30 2013 wherein the prior application is herein incorporated by reference in entirety.

Aspects of the disclosure are related to computing hardware and software technology and in particular to configuring a host system in a virtual data processing environment.

An increasing number of data intensive distributed applications are being developed to serve various needs such as processing very large data sets that generally cannot be handled by a single computer. Instead clusters of computers are employed to distribute various tasks such as organizing and accessing the data and performing related operations with respect to the data. Various applications and frameworks have been developed to interact with such large data sets including Hive HBase Hadoop Amazon S3 and CloudStore among others.

At the same time virtualization techniques have gained popularity and are now common place in data centers and other environments in which it is useful to increase the efficiency with which computing resources are used. In a virtualized environment one or more virtual machines are instantiated on an underlying computer or another virtual machine and share the resources of the underlying computer.

However where a single processing job is running on multiple host systems of a virtual data processing environment configuration of the applicable host systems and virtual machines is complex. The configuration will be even more complex when taking into account that the single processing job may be running on multiple virtual machines on multiple host systems. Consequently small variations or errors in the configuration may result in delayed and or improper processing of the single processing job. Further the single processing job may need to obtain data from a plurality of storage systems. The storage systems may have different capacities. The storage systems may use differing object access protocols. The storage systems may differ in the format and or content of required access credentials.

A method of operating a cache service to interface between a virtual machine cluster and job data associated with a job executed by the virtual machine cluster includes identifying a request initiated by the virtual machine cluster to access at least a portion of the job data in accordance with a first distributed object access protocol. The method further includes in response to the request accessing at least the portion of the job data in accordance with a second distributed object access protocol and presenting at least the portion of the job data to the virtual machine cluster in accordance with the first distributed object access protocol.

During the execution of virtual machine cluster cache service may be used to provide data objects from data storage to the virtual machines. To accomplish this task cache service may identify a request by virtual machine cluster to access data in accordance with a first distributed object access protocol access the data in data storage using a second object access protocol and present the data to virtual machine cluster in accordance with the first distributed object access protocol. For example virtual machine cluster may be configured to request data using a particular distributed object access protocol. When a data request occurs cache service identifies the data request and translates the request to an appropriate access protocol for one of data storage systems . Accordingly although virtual machine cluster may use a single protocol cache service may be used to access data using a plurality of different protocols.

In some instances to configure cache service a configuration management system may be included. This management system may identify the data storage systems required for a particular job within virtual machine cluster . Once identified the management system determines one or more access protocols necessary to access data within the storage systems and generates a translation configuration for virtual machine cluster based on the necessary access protocols. This translation configuration allows virtual machine cluster to request data using a first file access format but access the data in the storage systems using alternative access protocols. Thus cache service may be configured by the configuration management system to act as a translation intermediary between virtual machine cluster and the data storage systems.

Although illustrated in the present example as using cache service for translating read requests to data storage it should be understood that cache service and any translation services described herein might also be used to facilitate writes between the virtual cluster and the data storage. For example if virtual machine cluster initiated a write to data storage using a first access protocol cache service may identify the write and translate the write to a second access protocol appropriate for data storage . Accordingly virtual machine cluster may use a single access protocol to initiate the write processes but cache service may be used to translate the writes to the various access protocols necessary for the storage systems.

As a particular example of the system described in shows an exemplary data processing system . The data processing system includes a virtual Hadoop cluster a cache service in communication with the virtual Hadoop cluster and a plurality of data storages and in communication with the cache service . The cache service can be an independent device that is interposed between the virtual Hadoop cluster and the plurality of data storages . Alternatively the cache service can comprise a component of the virtual Hadoop cluster or a component of one or more individual host systems forming the virtual Hadoop cluster .

The plurality of data storages in the example shown store data to be processed by the virtual Hadoop cluster . The job data may be very large in size. The job data can comprise terabytes TB of job data in some examples. The job data in some examples is too large to be stored on a single data storage. Each of the data storages and in the example stores a portion of the data to be processed by the virtual Hadoop cluster .

A data storage of the plurality of data storages can comprise a single storage device such as a hard disk drive. Alternatively a data storage can comprise a storage system made up of many storage devices. The plurality of data storages can be co located with the virtual Hadoop cluster or can be remote from the virtual Hadoop cluster .

In operation virtual Hadoop cluster obtains data from the plurality of data storages in order to process the data. Each data storage in the example shown uses a different object access protocol. The data storage uses a Blob object access protocol. The data storage uses a Gluster object access protocol. The data storage uses a S3 object access protocol. Consequently the virtual Hadoop cluster in the example is not able to obtain data from all of the BLOB Gluster and S3 object access protocols.

The cache service operates to facilitate and anonymize data procurement for the virtual Hadoop cluster . The cache service streamlines data procurement and reduces complexity of the virtual Hadoop cluster . The cache service interfaces between the virtual Hadoop cluster and the plurality of data storages . The cache service anonymizes job data wherein the virtual Hadoop cluster does not need to know where the job data is stored and does not need to know what object access protocol is needed for obtaining the job data. The cache service is configured in the example to be able to perform at least Blob Gluster and S3 object access protocol data fetches from the plurality of data storages . It should be understood that the cache service might be configured to communicate with various data storages and corresponding object access protocols.

In operation the cache service receives a request initiated by the virtual Hadoop cluster . The request comprises a request to access at least a portion of the job data in accordance with a distributed object access protocol. In response to the request the cache service accesses at least the portion of the job data in accordance with a plurality of distributed object access protocols. The cache service then presents at least the portion of the job data to the virtual Hadoop cluster in accordance with the distributed object access protocol. It should be understood that the portion of the job data presented to the virtual Hadoop cluster by the cache service is presented in accordance with the object access protocol of the virtual Hadoop cluster .

As a result the virtual Hadoop cluster does not need to be programmed or configured to communication with multiple data storages using multiple different object access protocols. The virtual Hadoop cluster does not need to be programmed or configured with all possible object access protocols that the virtual Hadoop cluster may need for future data processing operations. The virtual Hadoop cluster does not need to be repeatedly re programmed or re configured to be able to communicate with data storages being used for each new processing job.

It should be understood that the virtual Hadoop cluster is given merely as an illustration. The virtual Hadoop cluster can comprise any processing system that receives job data from multiple data storages and according to multiple object access protocols. Further in some examples the virtual Hadoop cluster comprises a virtualized or distributed processing system wherein multiple instantiated virtual machines process the job data. These virtual machines may include full operating system virtual solutions or in some examples may include containerized application containers such as jails partitions containers or other similar virtualization techniques.

The virtual data processing environment may be employed in for example server computers cloud computing platforms data centers any physical or virtual computing machine and any variation or combination thereof. The virtual data processing environment may optionally include additional devices features or functionality not discussed here for purposes of brevity.

The host system in the example includes a processing job 1. The processing job in some examples comprises a big data processing job wherein data files on the order of gigabytes GB terabytes TB or more of data are to be processed. In some examples the host system can host multiple virtual machines see and the accompanying discussion . When the host system is processing the processing job 1 in this example the host system obtains job data for the processing job 1 from the storage systems A D. However it should be understood that job data can be stored in any number of storage systems including storage systems of different locations different sizes and different object access protocols.

The job data may be stored in a common and expected data format that does not necessarily need any translation. For example the job data stored in the storage systems A D can comprise call records. However the object access protocols used to request and receive job data may require translation so that the host system can properly request and receive job data from a particular host system . The individual storage systems can store the data using different object access protocols including different file access formats and different file access credentials.

In the example shown the host system uses an object access protocol X. The storage systems A and C already employ the object access protocol X in the example. However storage system B uses a object access protocol Y while the storage system D uses object access protocols X and Z. File access transactions with the storage system B and the storage system D will require object access protocol translations.

For example the host system may expect and only operate on job data stored according to a Hadoop Distributed File System HDFS object access protocol i.e. the object access protocol X while the storage system B could employ a Gluster file system and object access protocol and the storage system D could employ a Cloudstore file system and object access protocol. However other object access protocols are contemplated and are within the scope of the description and claims. Consequently without the translation node the host system would have to issue different file access transactions to the storage systems B and D than the file access transactions used for the storage systems A and C.

The translation node is interposed between the host system and the one or more storage systems A D and translates file access transactions. The translation node translates object access protocols to facilitate file access transactions such as reads and writes between the host system and the one or more storage systems A D. As a result the host system does not need to know what object access protocols are used by the storage systems . The host system does not need to be programmed to perform proper file access transactions with multiple different object access protocols that may be used by the various storage systems . Consequently the host system does not need to be programmed with a set of all possible different object access protocols in order to obtain job data from multiple storage systems for job processing. The host system can operate as if using only one object access protocol. Further the host system does not need to be re programmed for successive job processing operations.

The translation node anonymizes the data from the host system . As a result the host system issues data read requests that do not take into account the actual storage systems and actual object access protocols. The translation node therefore simplifies and enhances the operation of the host system . The host system does not need to be programmed or modified according to the storage system or systems to be accessed during the processing of each successive processing job.

The configuration manager communicates with the host system via the communication network and provides the configuration information to the translation node of the host system . The configuration information includes one or more file access translation modules in some examples. The one or more file access translation modules are selected according to one or more predetermined storage systems to be accessed by the host system when processing the processing job 1.

In operation as part of configuring the host system for processing the processing job 1 the configuration manager receives a job designation of the processing job 1. The configuration manager uses the job designation to determine one or more predetermined storage systems to be used i.e. determines the storage systems that hold job data for the processing job 1 . The configuration manager further determines the object access protocols used by each storage system of the one or more predetermined storage systems. The configuration manager obtains one or more file access translation modules according to the determined object access protocols. The configuration manager provides the determined one or more file access translation modules to the translation node of the host system .

In some examples the configuration manager is configured to configure a host system for processing a processing job in a virtual data processing environment comprising obtaining a job designation of the processing job determining one or more predetermined storage systems to be accessed by a host system when processing the processing job determining one or more corresponding object access protocols used by the one or more predetermined storage systems determining one or more file access translation modules corresponding to the one or more object access protocols and providing the one or more file access translation modules to the host system . The one or more file access translation modules are configured to translate file access transactions for each storage system of the one or more predetermined storage systems .

The configuration manager supplies the translation modules per job to each host system as needed. The translation modules are independent of the host systems and the programming of the host systems. The translation modules are independent of the allocated virtual machines of the host systems and are independent of the programming of the virtual machines of the host systems.

A data processing customer does not need to specify anything other than a processing speed and or job duration in some examples. The customer does not need to worry about the number of host systems needed the number of virtual machines needed the memory needed etc. The customer need only specify where the job data is stored and the data size. In some examples the customer may optionally designate the object access protocols needed for the specified storage systems. Alternatively the configuration manager can determine the object access protocols needed for the specified storage systems without the customer needing to provide the object access protocol information.

The job processing speed or job duration can be specified by a Quality of Service QoS value in some examples. The QoS value can be used to set and achieve a desired data consumption rate and or a desired job completion time. The QoS value can be used to determine a minimum and or maximum resource usage in virtual machine hosting. Further the QoS value can be used to determine relative job priorities when host system resources are over committed.

In step the configuration manager processes the job designation and determines the one or more predetermined storage systems to be accessed by a host system when processing the processing job. The determining can include determining the storage system addresses or other information needed for obtaining job data from the one or more predetermined storage systems . The determining includes determining the object access protocols of the one or more predetermined storage systems to be accessed or written to.

In step the configuration manager obtains one or more file access translation modules corresponding to the one or more object access protocols and provides the one or more file access translation modules to the host system. The configuration manager provides the one or more file access translation modules to a translation node of the host system in some examples. The one or more file access translation modules include a object access protocol translation module for each applicable object access protocol. The translation node receives the one or more file access translation modules and translates the file access transactions that are directed to each storage system. As a result the host system can perform file access procedures in a single object access protocol. The host system will not need to have its programming changed in order to accommodate new and different storage systems of new and different object access protocols.

Big data processing jobs that are being processed in the virtual data processing environment can be distributed across the plurality of host systems wherein the processing rate of a big data processing job is accelerated by the plurality of host systems working in parallel. In addition each host system can host multiple virtual machines see and the accompanying discussion . As a result a portion of a big data processing job given to a particular host system can be distributed across multiple virtual machines instantiated in the host system .

Job setup is difficult in such a distributed virtual data processing environment. Where a processing job is to be distributed across the plurality of host systems and is further to be distributed across multiple virtual machines within each host system configuring the appropriate host systems and virtual machines is a large and complicated task.

In the example shown the host system A is processing a processing job 1 and a processing job 2. The host systems B and C are both processing the processing job 2. The host system D is processing the processing job 2 and a processing job 3. In the figure the processing job 2 is being processed at least in part by the four host systems A D. Therefore in order to prepare the virtual data processing environment for the processing job 2 for example the configuration manager must provide configuration information for the processing job 2 to the host systems A B C and D.

Where the host system A is processing at least a portion of processing job 1 the host system A can obtain job data from the storage system A. In addition the host system A may also need to obtain job data for processing job 2. Consequently the host system A may need to obtain at least a portion of the job data 2 from the storage systems B C and D. In the example given the host system B the host system C and the host system D also need to obtain at least a portion of the job data 2 while the host system D further must obtain at least some of the job data 3 for use in the processing job 3.

The configuration manager communicates with the plurality of host systems via the communication network and provides the configuration information to the translation nodes of the plurality of host systems . The configuration information comprises one or more file access translation modules. The one or more file access translation modules are selected according to one or more predetermined storage systems to be accessed by the plurality of host systems when processing a particular processing job.

In operation as part of configuring the host system A for processing the processing job 1 the configuration manager receives a job designation of the processing job 1. The configuration manager uses the job designation to determine one or more predetermined storage systems to be used i.e. determines the storage systems that hold job data for the processing job 1 which is the storage system A in this example. The configuration manager determines the object access protocol used by the storage system A. The configuration manager obtains a file access translation module according to the determined object access protocol of the storage system A. The configuration manager provides the determined file access translation module to the translation node A of the host system A as only the host system A will access the storage system A for processing job 1.

If the configuration manager is configuring the virtual data processing environment for processing job 2 then the host systems A D will need to perform file access transactions with the storage systems B C and D. The configuration manager will send appropriate configuration information to the translation nodes A B C and D of the host systems A B C and D.

If the configuration manager is configuring the virtual data processing environment for processing job 3 then the host system D will need to perform file access transactions with the storage systems D and E. The configuration manager will send appropriate configuration information to the translation node D of the host system D.

In some examples the configuration manager is configured to configure a plurality of host systems for processing a processing job in a virtual data processing environment comprising obtaining a job designation of the processing job determining the plurality of host systems to be allocated to the processing job determining one or more predetermined storage systems to be accessed by the plurality of host systems when processing the processing job and determining one or more corresponding object access protocols used by the one or more predetermined storage systems and determining one or more file access translation modules corresponding to the one or more object access protocols and providing a file access translation module of the one or more file access translation modules to each applicable host system of the plurality of host systems with the one or more file access translation modules configured to be used by the plurality of host systems to translate file access transactions for each storage system of the one or more predetermined storage systems .

In step the configuration manager determines a plurality of host systems to be allocated to the processing job. The configuration manager may need to provide configuration information to more than one host system in some cases. The number of host systems employed in processing a processing job will typically not affect the number of storage systems involved. However the number of host systems will affect the duration of the processing job.

The determining in some examples comprises the configuration manager receiving a designation of the plurality of host systems to be used in processing the processing job. The designation of the plurality of host systems can comprise a customer specification or can be received from a technician operating the virtual data processing environment. The number of host systems and the resources to be allocated within the host systems can be determined according to various factors including job size job data consumption rate and a job processing rate or job completion time as specified by a customer.

In step the configuration manager processes the job designation and determines the one or more predetermined storage systems to be accessed by a host system when processing the processing job. The determining can include determining the storage system addresses or other information needed for obtaining job data from the one or more predetermined storage systems . The determining can include determining the number of storage systems to be accessed. The determining includes determining the object access protocols of the one or more predetermined storage systems to be accessed.

In step the configuration manager determines one or more file access translation modules corresponding to the one or more object access protocols and provides the one or more file access translation modules to each applicable host system of the plurality of host systems. The configuration manager provides the one or more file access translation modules to the plurality of translation nodes of the plurality of host systems in some examples. The one or more file access translation modules are configured to be used by each host system of the plurality of host systems to translate file access transactions for each storage system of the one or more predetermined storage systems. The one or more file access translation modules comprise object access protocol translation modules for each applicable object access protocol. The plurality of translation nodes receive the one or more file access translation modules and translate the file access transactions directed to each storage system of the one or more predetermined storage systems. As a result each host system of the plurality of host systems can perform file access procedures in a single object access protocol. The plurality of host systems will not need to have their programming changed in order to accommodate new and different storage systems of new and different object access protocols.

The configuration manager receives operator inputs for generating a processing job. The configuration manager uses the operator inputs to generate configuration information for the processing job. The configuration manager sends the configuration information to an appropriate host system or systems wherein the host system or systems are consequently configured for operation in processing the processing job. The host system or systems are properly and fully configured by the configuration information and are ready to commence the processing job.

The configuration manager routine comprises a processing routine configured to perform configuration operations. More specifically the configuration manager routine is configured to perform configuration operations on translation nodes of the host system or systems . The configuration manager routine gathers information and generates configuration information for each processing job to be performed. The configuration manager routine then transfers the configuration information to all appropriate host systems and or to all appropriate corresponding translation nodes .

The job designation comprises processing job information concerning a processing job to be performed by the host system or systems . The job designation is processed by the configuration manager routine to determine storage system information for the processing job. The job designation can be processed by the configuration manager routine to determine locations and numbers of the storage systems to be accessed by the processing job. The job designation can be processed by the configuration manager routine to determine object access protocols of the storage systems to be accessed by the processing job.

The configuration information in the example shown comprises one or more file access translation modules. The number of file access translation modules can match the number of storage systems accessed in the processing job in some examples. However where one or more storage systems employ a object access protocol matching the object access protocol of a host system then fewer file access translation modules may be needed than the number of storage systems.

Where four storage systems A D are to be accessed during a processing job then the configuration information comprises up to four file access translation modules A D for example. Fewer than four may be needed such as where two or more storage systems use the same object access protocol. In addition where one or more storage systems employ a object access protocol matching the object access protocol of a host system or systems then fewer file access translation modules may be needed than the number of storage systems.

The configuration information can be retained in the configuration manager even after the processing job has been completed. The configuration information can be stored as a data services container in one example. The configuration information can be later re used. The configuration information can be re used to conduct similar processing jobs. The configuration information can be re used for other processing jobs of the client.

The configuration information can include additional information. The additional information can include a desired QoS. The additional information can include a processing application and or a guest application to be used for the new processing job. The additional information can include processing application options. The additional information can include one or more data inputs. The one or more data inputs can be identified using data connectors such as is common in specifying an Application Programming Interface API . The additional information can include an output location such as a data group and a path to a folder within that data group for example.

The configuration information in the example shown comprises one or more file access translation modules A as previously discussed. Each object access protocol translation module can include information including location information A access information A credential information A and service information A.

The configuration manager generates location information A to be used in a processing job. The location information A enables a host system or systems to access the one or more predetermined storage systems . The location information A therefore includes information that enables the host system or systems to communicate with the appropriate storage systems . The location information A can comprise any manner of storage system address or identifier. For example in the figure the location information A will direct the host system or systems to access the storage system A and obtain the job data. It should be understood that the location information A may be different when loaded into each selected host system of the new processing job. In addition the location information A may be different when loaded into each selected virtual machine of the new processing job.

The configuration manager generates access information A to be used in a processing job. The access information A comprises information that enables the host system or systems to obtain predetermined job data portions from the storage systems . The access information A can specify an entire job data portion stored within a storage system or can specify specific portions of the job data. The access information A may be different for each host system . In addition the access information A may be different when loaded into each selected virtual machine of the new processing job.

The configuration manager generates credential information A to be used in a processing job. The credential information A comprises predetermined access information that enables one or more predetermined persons to access to the one or more predetermined storage systems . Alternatively or in addition the credential information A gives a predetermined person or persons access to a processing job and or to the configuration manager . The credential information A can comprise any manner of suitable identifier s password s or other information suitable of secure and controlled access. In addition the credential information A can include or specify predetermined security measures including encryption and or other security measures. The one or more predetermined persons can use the credential information A to access the one or more predetermined storage systems . The one or more predetermined persons can review the one or more predetermined storage systems and can access predetermined data unit portions in the one or more predetermined storage systems . The one or more predetermined persons can review the location information A review the access information A and or review the service information A wherein the one or more predetermined persons can compare the selected storage systems to the location information A the access information A and or the service information A. Alternatively or in addition the one or more predetermined persons can use the credential information A to access a processing job review operational aspects of the processing job modify the processing job or receive results from the processing job.

The configuration manager generates service information A to be used in a processing job. The service information A comprises service type information for each storage system of the one or more predetermined storage systems . The service information A includes a data access protocol type for each storage system such as object access protocols X Y and Z in the figure wherein the data access protocol type may vary from a data access protocol used and expected by a particular processing application.

The service information A may include an optimal size of job data portions that can be transferred from the storage system . For example a storage system may have a data transfer limit wherein a larger data request will not result in faster data procurement or may even result in slower data procurement.

The service information A may include conversion information for converting the data access protocol needed for obtaining data unit portions from individual storage systems of the one or more predetermined storage systems . The configuration manager therefore further virtualizes the new processing job by enabling data access protocol conversion before the receiving host system operates on the received job data or job data portions. The configuration manager transfers conversion information to a translation node in the host system. As a result each translation node can perform data access protocol conversion for interactions with the one or more storage systems .

Each virtual machine of the plurality of virtual machines may be located in a separate and distinct region of host memory of the host system . Each virtual machine includes virtual memory. The virtual memory comprises memory of the host system that is allocated to the particular virtual machine. The virtual memory of a virtual machine may store data to be used or processed by the virtual machine. The virtual memory may additionally store a guest application wherein the guest application can be executed by the virtual machine. The guest application comprises a job processing application that performs at least part of a processing job. Each virtual machine of the plurality of virtual machines may execute a guest application or applications.

In the example shown the host system includes five virtual machines A E that are involved in a portion of at least two processing jobs. The virtual machines A C are employed in processing a processing job one while virtual machines D E are employed in processing a processing job two. It should be understood that more than the three virtual machines A C may be employed in processing job one and more than the two virtual machines D E may be involved in processing job two. These examples are given for illustration and are not intended to be limiting.

The configuration manager or or may determine and set an initial resource allocation of a processing job. The configuration manager may take into account the priority level of the particular processing job. The configuration manager or may take into account the priority levels of all processing jobs of the host system . The configuration manager may take into account the priority levels of all processing jobs in the virtual data processing environment i.e. the configuration manager can allocate more virtual machines to a high priority processing job .

The resource allocation can comprise the host system resources that are allocated to a particular processing job. For example the resource allocation can comprise the number of virtual machines that are allocated to a particular processing job. The resource allocation can further comprise the host system resources that are allocated to a particular virtual machine . It should be understood that differing amounts of host system memory can be allocated to individual virtual machines for example. A change in resource allocation can increase or decrease the virtual memory available to a particular virtual machine.

The translation node monitors data read requests and participates in the read requests as previously discussed. The translation node may monitor a request queue of a virtual machine and may handle read requests as they occur. Other mechanisms are possible such as direct calls between a data interface of the virtual machine and the translation node . In some implementations a completion queue is maintained wherein the translation node records the completed read requests in the completion queue.

The translation node translates the region in guest memory that is implicated by a read request. The read request is a request made by a guest application. The translation node translates the guest memory region into the region in host memory where the requested data will be transferred.

In the host system the virtual machine memory is mapped to a portion of the host memory. The translation node determines the mapping and uses the determined memory mapping to provide the requested data to the virtual machine memory of the requesting virtual machine . As a result the translation node facilitates data retrieval in the virtual machine . Further the translation node can receive the configuration information from the configuration manager . The translation node can use the configuration information to set up for a new processing job as previously discussed.

The configuration may be achieved at a basic I O level in the host system . A virtual machine of a host system is not aware of the source of the data as the data is received in the virtual machine . A virtual machine of a host system is not aware of the data access protocol of the data as the data is attempted to be accessed and retrieved.

The configuration manager and method configure a host system or host systems for processing jobs. The configuration manager and method configure some or all virtual machines of a host system. The configuration manager and method configure processing jobs across host systems. The configuration manager and method configure all processing jobs being processed on a host system.

The configuration manager and method determine the configuration information and settings needed for processing jobs in a distributed virtual data processing environment. The configuration manager and method provide the configuration information and settings to appropriate host systems of the distributed virtual data processing environment. The configuration manager and method provide the configuration information and settings to the translation nodes of appropriate host systems of the distributed virtual data processing environment.

The configuration manager provides location data to translation nodes of all host systems that will be involved in an upcoming processing job. The configuration manager anonymizes the data that is provided to host systems. The configuration manager anonymizes the data provided to one or more virtual machines instantiated on a host system. The configuration manager anonymizes the data provided to one or more processing jobs running on a virtual machine or machines and running across one or more host systems. As a result a processing job does not need to be modified to include the actual location or locations of the job data. Likewise the instantiated virtual machines and host machines do not need to be modified to include the location data.

The configuration manager includes location data that points each translation node to the storage systems to be used in a processing job. Consequently the configuration manager can configure a processing application according to a current user wherein the processing application is configured and used by more than one user. Alternatively the processing application can be configured and used by different users at different times.

The virtual data processing environment is designed to support multiple host systems running multiple processing jobs. The virtual data processing environment is designed to support host systems running multiple instantiated virtual machines.

The virtual data processing environment eliminates the need for co location of application execution and application data. The virtual data processing environment enables the management of multiple application instances in order to maximize the use of available hardware resources. The virtual data processing environment provides a policy based automation and provides user friendly application management. The virtual data processing environment provides an ability to automatically modify application scale during run time in order to provide a desired QoS. The virtual data processing environment enables sharing of resources between multiple processing jobs.

Various implementations described herein provide for accelerated data operations in which data is provided for consumption to applications executing within virtual environments in a manner that enables big data jobs and other resource intensive tasks to be virtualized. In particular data that resides externally with respect to a virtual environment can be read by guest elements executing within the virtual environment at a pace sufficient to allow for very data intensive jobs. This is accomplished by enhancing the read process such that data read from a source is written in host memory that is associated with guest memory allocated to the guest elements.

In at least one implementation a virtual machine is instantiated within a host environment. The virtual machine may be instantiated by a hypervisor running in the host environment. The hypervisor may run with or without an operating system beneath it. For example in some implementations the hypervisor may executed at a layer above the host operating system while in other implementations the hypervisor may be integrated with the operating system.

The virtual machine may include various guest elements such as a guest operating system and its components guest applications and the like that consume and execute data. The virtual machine may also include virtual representations of various computing components such as guest memory a guest storage system and a guest processor.

In operation a guest element running in the virtual machine is allocated a portion of the guest memory available in the virtual machine. In some scenarios the guest memory may include guest virtual memory. In normal operation a guest element would initiate a read process to read data from a guest storage system in the virtual machine. The data would be read from the guest storage system and written to the portion of the guest memory allocated to the guest element.

In step the translation node of the host system translates the job data read request into a first object access protocol creating a first translated job data read request. The first object access protocol is a object access protocol used by a first external storage system.

In step the first translated job data read request is transferred to the first external storage system. The first external storage system receives the first translated job data read request wherein the first translated job data read request is in the first object access protocol. The first external storage system is therefore able to respond to the first translated job data read request and supply a requested job data portion to the host system.

In step the translation node translates the job data read request into a second object access protocol creating a second translated job data read request. The second object access protocol is a object access protocol used by a second external storage system. The second external storage system is different from the first external storage system and may use a different object access protocol.

In step the second translated job data read request is transferred to the second external storage system. The second external storage system receives the second translated job data read request wherein the second translated job data read request is in the second object access protocol. The second external storage system is therefore able to respond to the second translated job data read request and supply a requested job data portion to the host system.

It should be understood that in some cases the object access protocol of an external storage system may already be the object access protocol in use by the host system and therefore for such an external storage system the job data read request will not require translation. It should be understood that the method might be iteratively repeated depending on the number of external storage systems being accessed and on the number of different object access protocols being used by the external storage systems.

In step the translation node of the host system translates the job one data read request into a first object access protocol creating a first translated job one data read request. The first object access protocol is a object access protocol used by a first external storage system. The first translated job one data read request is transferred to the first external storage system wherein the first translated job one data read request is in the first object access protocol. The first external storage system is therefore able to respond to the first translated job one data read request and supply a requested job one data portion to the host system.

In step the translation node translates the job one data read request into a second object access protocol creating a second translated job one data read request. The second object access protocol is a object access protocol used by a second external storage system. The second external storage system is different from the first external storage system and may use a different object access protocol. The second translated job one data read request is transferred to the second external storage system wherein the second translated job one data read request is in the second object access protocol. The second external storage system is therefore able to respond to the second translated job one data read request and supply a requested job one data portion to the host system.

In step the translation node of the host system receives a job two data read request corresponding to the processing job two. The host system generates the job two data read request and the job two data read request is intercepted by the translation node.

In step the translation node of the host system translates the job two data read request into a third object access protocol creating a third translated job two data read request. The third object access protocol is a object access protocol used by a third external storage system. The third translated job two data read request is transferred to the third external storage system wherein the third translated job two data read request is in the third object access protocol. The third external storage system is therefore able to respond to the third translated job two data read request and supply a requested job two data portion to the host system.

In some examples the third object access protocol may be the same as one of the first or second object access protocols. Alternatively the third object access protocol may be different from both the first and second object access protocols.

In step the translation node translates the job two data read request into a fourth object access protocol creating a fourth translated job two data read request. The fourth object access protocol is a object access protocol used by a fourth external storage system. The fourth external storage system is different from the third external storage system and may use a different object access protocol. The fourth translated job two data read request is transferred to the fourth external storage system wherein the fourth translated job two data read request is in the fourth object access protocol. The fourth external storage system is therefore able to respond to the fourth translated job two data read request and supply a requested job two data portion to the host system.

In some examples the fourth object access protocol may be the same as one of the first or second object access protocols. Alternatively the fourth object access protocol may be different from both the first and second object access protocols. However the fourth object access protocol is different from the third object access protocol.

The storage system in the example shown includes software . In some examples the software comprises operating instructions that configure the processing system when executed by the computer system in general or the processing system in particular to direct the processing system to perform configuration manager or host system operations. Other data such as operational data may also be stored in the storage system . The software comprises the configuration manager routine of or the configuration manager routine of in some examples. Alternatively the software comprises a host system routine that performs the functions of the host system of in some examples.

The processing system may comprise a microprocessor and other circuitry that retrieves and executes the software from the storage system . The processing system may be implemented within a single processing device but may also be distributed across multiple processing devices or sub systems that cooperate in executing program instructions. Examples of the processing system include general purpose central processing units application specific processors and logic devices as well as any other type of processing device combinations or variations.

The storage system may comprise any computer readable storage media readable by the processing system and capable of storing the software . The storage system may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of storage media include random access memory read only memory magnetic disks optical disks flash memory virtual memory and non virtual memory magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other suitable storage media. In no case is the storage media a propagated signal.

In addition to storage media in some implementations the storage system may also include communication media over which the software may be communicated internally or externally. The storage system may be implemented as a single storage device but may also be implemented across multiple storage devices or sub systems co located or distributed relative to each other. The storage system may comprise additional elements such as a controller capable of communicating with the processing system or possibly other systems.

The software may be implemented in program instructions and among other functions and may when executed by the processing system direct the processing system to operate as described herein. In particular the program instructions may include various components or modules that cooperate or otherwise interact to carry out configuration of one or more host systems. The various components or modules may be embodied in compiled or interpreted instructions or in some other variation or combination of instructions. The various components or modules may be executed in a synchronous or asynchronous manner in a serial or in parallel in a single threaded environment or multi threaded or in accordance with any other suitable execution paradigm variation or combination thereof. The software may include additional processes programs or components such as operating system software hypervisor software or other application software. The software may also comprise firmware or some other form of machine readable processing instructions executable by the processing system .

In general the software when loaded into the processing system and executed may transform a suitable apparatus system or device from a general purpose computing system into a special purpose computing system customized to facilitate accelerated data input and output with respect to virtualized environments. Indeed encoding the software on the storage system may transform the physical structure of the storage system . The specific transformation of the physical structure may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the storage media of the storage system and whether the computer storage media are characterized as primary or secondary storage as well as other factors.

The communication interface may include communication connections and devices that allow for communication with other computing systems not shown over a communication network or collection of networks not shown . The communication interface may include user input and output devices for being controlled by a user. The communication interface may include associated user interface software executable by the processing system in support of various user input and output devices.

Although the examples provided in use read requests to illustrate the translation mechanism it should be understood that the translation and cache services described herein might also be used to translate write requests. For instance when a write request is received from a virtual cluster using a first object access format the translation configuration may be used to translate the write request to a second object access format that is appropriate for the destination storage system. Thus although the virtual cluster may use a single object access format the translation or cache service may be used to translate requests into one or more other object access formats appropriate for the available storage systems.

The functional block diagrams operational sequences and flow diagrams provided in the figures are representative of exemplary architectures environments and methodologies for performing novel aspects of the disclosure. While for purposes of simplicity of explanation methods included herein may be in the form of a functional diagram operational sequence or flow diagram and may be described as a series of acts it is to be understood and appreciated that the methods are not limited by the order of acts as some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a method could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

The included descriptions and figures depict specific implementations to teach those skilled in the art how to make and use the best option. For the purpose of teaching inventive principles some conventional aspects have been simplified or omitted. Those skilled in the art will appreciate variations from these implementations that fall within the scope of the invention. Those skilled in the art will also appreciate that the features described above can be combined in various ways to form multiple implementations. As a result the invention is not limited to the specific implementations described above but only by the claims and their equivalents.

