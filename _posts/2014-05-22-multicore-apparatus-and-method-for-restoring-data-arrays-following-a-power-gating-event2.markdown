---

title: Multi-core apparatus and method for restoring data arrays following a power gating event
abstract: An apparatus includes a fuse array and a plurality of cores. The fuse array is programmed with compressed data. Each of the plurality of cores accesses the fuse array upon power-up/reset to read and decompress the compressed data, and to store decompressed data sets for one or more cache memories within the each of the plurality of cores in a stores that is coupled to the each of the plurality of cores. Each of the plurality of cores has reset logic and sleep logic. The reset logic employs the decompressed data sets to initialize the one or more cache memories upon power-up/reset. The sleep logic determines that power is restored following a power gating event, and subsequently accesses the stores to retrieve and employ the decompressed data sets to initialize the one or more caches following the power gating event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606933&OS=09606933&RS=09606933
owner: VIA ALLIANCE SEMICONDUCTOR CO., LTD.
number: 09606933
owner_city: Shanghai
owner_country: CN
publication_date: 20140522
---
This application is related to the following co pending U.S. patent applications each of which has a common assignee and common inventors.

This invention relates in general to the field of microelectronics and more particularly to apparatus and methods for restoring compressed cache repair data following a multi core power gating event.

Integrated device technologies have exponentially advanced over the past 40 years. More specifically directed to the microprocessor fields starting with 4 bit single instruction 10 micrometer devices the advances in semiconductor fabrication technologies have enabled designers to provide increasingly more complex devices in terms of architecture and density. In the 80 s and 90 s so called pipeline microprocessors and superscalar microprocessors were developed comprising millions of transistors on a single die. And now 20 years later 64 bit 32 nanometer devices are being produced that have billions of transistors on a single die and which comprise multiple microprocessor cores for the processing of data.

One requirement that has persisted since these early microprocessors were produced is the need to initialize these devices with configuration data when they are powered up or when they are reset. For example many architectures enable devices to be configured to execute at one of many selectable frequencies and or voltages. Other architectures require that each device have a serial number and other information that can be read via execution of an instruction. Yet other devices require initialization data for internal registers and control circuits. Still other microprocessors particularly that with on board cache memories utilize repair data to implement redundant circuits within these memories to correct for fabrication errors.

As one skilled in the art will appreciate designers have traditionally employed semiconductor fuse arrays on die to store and provide initial configuration and repair data. These fuse arrays are generally programmed by blowing selected fuses therein after a part has been fabricated and the arrays contain thousands of bits of information which are read by a corresponding device upon power up reset to initialize and configure the device for operation.

As device complexity has increased over the past years the amount of configuration repair data that is required for a typical device has proportionately increased. Yet as one skilled in the art will appreciate though transistor size shrinks in proportion to the semiconductor fabrication process employed semiconductor fuse size increases due to the unique requirements for programming fuses on die. This phenomenon in and of itself is a problem for designers who are prevalently constrained by real estate and power considerations. In other words there is just not enough real estate on a given die to fabricate a huge fuse array.

In addition the ability to fabricate multiple device cores on a single die has geometrically exacerbated the problem because configuration requirements for each of the cores result in a requirement for a number of fuses on die in a single array or distinct arrays that is proportional to the number of cores disposed thereon.

Furthermore as one skilled in the art will appreciate multiple core devices utilize complex power saving modes of operation that result in one or more of the cores being powered down in a so called power gating event or sleep mode when not in use. Consequently when a core is powered up following a power gating event the same requirement for initialization configuration and repair persists except that initialization speed requirements are much more stringent.

Therefore what is needed is apparatus and methods that enable configuration repair data to be stored and provided to a multi core device that require significantly less real estate and power on a single die than that which has heretofore been provided.

In addition what is needed is a fuse array mechanism that can store and provide significantly more configuration repair data than current techniques while requiring the same or less real estate on a multi core die.

Furthermore what is needed is a technique that facilitates prompt initialization configuration and repair of a multi core device following a power gating event.

The present invention provides a superior technique for restoring configuration data following a power gating event. In one aspect an apparatus for providing configuration data to an integrated circuit is considered. The apparatus includes a semiconductor fuse array and a plurality of cores. The semiconductor fuse array is disposed on a die into which is programmed compressed configuration data. The plurality of cores is disposed on the die where each of the plurality of cores is coupled to the semiconductor fuse array and where one of the plurality of cores is configured to access the semiconductor fuse array upon power up reset to read and decompress the compressed configuration data and to store decompressed configuration data sets for one or more cache memories within the each of the plurality of cores in a stores that is coupled to the each of the plurality of cores. The each of the plurality of cores has reset logic and sleep logic. The reset logic is configured to employ the decompressed configuration data sets to initialize the one or more cache memories upon power up reset. The sleep logic is configured to determine that power is restored following a power gating event and is configured to subsequently access the stores to retrieve and employ the decompressed configuration data sets to initialize the one or more caches following the power gating event.

In another aspect an apparatus for providing configuration data to an integrated circuit device is contemplated. The apparatus includes a multi core microprocessor. The multi core microprocessor includes a semiconductor fuse array and a plurality of cores. The semiconductor fuse array is disposed on a die into which is programmed compressed configuration data. The plurality of cores is disposed on the die where each of the plurality of cores is coupled to the semiconductor fuse array and where one of the plurality of cores is configured to access the semiconductor fuse array upon power up reset to read and decompress the compressed configuration data and to store decompressed configuration data sets for one or more cache memories within the each of the plurality of cores in a stores that is coupled to the each of the plurality of cores. The each of the plurality of cores has reset logic and sleep logic. The reset logic is configured to employ the decompressed configuration data sets to initialize the one or more cache memories upon power up reset. The sleep logic is configured to determine that power is restored following a power gating event and is configured to subsequently access the stores to retrieve and employ the decompressed configuration data sets to initialize the one or more caches following the power gating event.

In a further aspect the present invention comprehends a method for configuring an integrated circuit. The method includes first disposing a semiconductor fuse array on a die into which is programmed compressed configuration data second disposing a plurality of microprocessor cores on the die where each of the plurality of microprocessor cores is coupled to the semiconductor fuse array and where one of the plurality of microprocessor cores is configured to access the semiconductor fuse array upon power up reset to read and decompress the compressed configuration data and to store decompressed configuration data sets for one or more cache memories within the each of the plurality of cores in a stores that is coupled to the each of the plurality of cores via reset logic disposed within the each of the plurality of cores employing the decompressed configuration data sets to initialize the one or more cache memories upon power up reset and via a reset logic disposed within the each of the plurality of cores determining that power is restored following a power gating event and subsequently accessing the stores to retrieve and employ the decompressed configuration data sets to initialize the one or more caches following the power gating event.

Regarding industrial applicability the present invention is implemented within a MICROPROCESSOR which may be used in a general purpose or special purpose computing device.

Exemplary and illustrative embodiments of the invention are described below. In the interest of clarity not all features of an actual implementation are described in this specification for those skilled in the art will appreciate that in the development of any such actual embodiment numerous implementation specific decisions are made to achieve specific goals such as compliance with system related and business related constraints which vary from one implementation to the next. In addition it will be appreciated that such a development effort might be complex and time consuming but would nevertheless be a routine undertaking for those of ordinary skill in the art having the benefit of this disclosure. Various modifications to the preferred embodiment will be apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments. Therefore the present invention is not intended to be limited to the particular embodiments shown and described herein but is to be accorded the widest scope consistent with the principles and novel features herein disclosed.

The present invention will now be described with reference to the attached figures. Various structures systems and devices are schematically depicted in the drawings for purposes of explanation only and so as to not obscure the present invention with details that are well known to those skilled in the art. Nevertheless the attached drawings are included to describe and explain illustrative examples of the present invention. The words and phrases used herein should be understood and interpreted to have a meaning consistent with the understanding of those words and phrases by those skilled in the relevant art. No special definition of a term or phrase i.e. a definition that is different from the ordinary and customary meaning as understood by those skilled in the art is intended to be implied by consistent usage of the term or phrase herein. To the extent that a term or phrase is intended to have a special meaning i.e. a meaning other than that understood by skilled artisans such a special definition will be expressly set forth in the specification in a definitional manner that directly and unequivocally provides the special definition for the term or phrase.

In view of the above background discussion on device fuse arrays and associated techniques employed within present day integrated circuits for providing configuration data during initial power up a discussion of the limitations and disadvantages of those techniques will be presented with reference to . Following this a discussion of the present invention will be presented with reference to . The present invention overcomes all of the limitations and disadvantages discussed below by providing apparatus and methods for employing compressed configuration in a multi core die which utilize less power and real estate on the multi core die which provide for expeditious restoral of configuration and repair data following power gating events and which are more reliable than that which has heretofore been provided.

Integrated Circuit IC A set of electronic circuits fabricated on a small piece of semiconductor material typically silicon. An IC is also referred to as a chip a microchip or a die.

Central Processing Unit CPU The electronic circuits i.e. hardware that execute the instructions of a computer program also known as a computer application application program program or application by performing operations on data that include arithmetic operations logical operations and input output operations.

Microprocessor An electronic device that functions as a CPU on a single integrated circuit. A microprocessor receives digital data as input processes the data according to instructions fetched from a memory either on die or off die and generates results of operations prescribed by the instructions as output. A general purpose microprocessor may be employed in devices including but not limited to a desktop mobile or tablet computer and may be utilized for tasks such as but not limited to computation text editing multimedia display and Internet browsing. A microprocessor may also be disposed in an embedded system to control a wide variety of devices that include appliances mobile telephones smart phones and industrial control devices.

Multi Core Processor Also known as a multi core microprocessor a multi core processor is a microprocessor having multiple CPUs also known as cores fabricated on a single integrated circuit.

Instruction Set Architecture ISA or Instruction Set A part of a computer architecture related to programming that includes data types instructions registers addressing modes memory architecture interrupt and exception handling and input output. An ISA includes a specification of the set of opcodes i.e. machine language instructions and the native commands implemented by a particular CPU.

x86 Compatible Microprocessor A microprocessor capable of executing computer applications that are programmed according to the x86 ISA.

Microcode A term employed to refer to a plurality of micro instructions. A micro instruction also referred to as a native instruction is an instruction at the level that a microprocessor sub unit executes. Exemplary sub units include integer units floating point units MMX units and load store units. For example micro instructions are directly executed by a reduced instruction set computer RISC microprocessor. For a complex instruction set computer CISC microprocessor such as an x86 compatible microprocessor x86 instructions are translated into associated micro instructions and the associated micro instructions are directly executed by a sub unit or sub units within the CISC microprocessor.

Fuse A conductive structure typically arranged as a filament which can be broken at select locations by applying a voltage across the filament and or current through the filament. Fuses may be deposited at specified areas across a die topography using well known fabrication techniques to produce filaments at all potential programmable areas. A fuse structure is blown or unblown subsequent to fabrication to provide for desired programmability of a corresponding device disposed on the die.

Turning to a block diagram is presented illustrating a present day microprocessor core that includes a fuse array for providing configuration data to the microprocessor core . The fuse array comprises a plurality of semiconductor fuses not shown typically arranged in groups known as banks. The fuse array is coupled to reset logic that includes both reset circuits and reset microcode . The reset logic is coupled to control circuits microcode registers microcode patches elements and cache correction elements . An external reset signal RESET is coupled to the microprocessor core and is routed to the reset logic .

As one skilled in the art will appreciate fuses also called links or fuse structures are employed in a vast number of present day integrated circuit devices to provide for configuration of the devices after the devices have been fabricated. For example consider that the microprocessor core of is fabricated to provide functionality selectively either as a desktop device or a mobile device. Accordingly following fabrication prescribed fuses within the fuse array may be blown to configure the device as say a mobile device. Accordingly upon assertion of RESET the reset logic reads the state of the prescribed fuses in the fuse array and the reset circuits rather than reset microcode in this example enable corresponding control circuits that deactivate elements of the core exclusively associated with desktop operations and activate elements of the core exclusively associated with mobile operations. Consequently the core is configured upon power up reset as a mobile device. In addition the reset logic reads the state of the other fuses in the fuse array and the reset circuits rather than reset microcode in this example enable corresponding cache correction circuits provide corrective mechanisms for one or more cache memories associated not shown with the core . Consequently the core is configured upon power up reset as a mobile device and corrective mechanisms for its cache memories are in place.

The above example is merely one of many different uses for configuration fuses in an integrated circuit device such as a microprocessor core of . One skilled in the art will appreciate that other uses for configuration fuses include but are not limited to configuration of device specific data e.g. serial numbers unique cryptographic keys architecture mandated data that can be accessed by users speed settings voltage settings initialization data and patch data. For example many present day devices execute microcode and often require initialization of registers that are read by the microcode. Such initialization data may be provided by microcode register fuses not shown within the fuse array which are read upon reset and provided to the microcode registers by the reset logic using either the reset circuits the reset microcode or both elements . For purposes of the present application the reset circuits comprise hardware elements that provide certain types of configuration data which cannot be provided via the execution of the reset microcode . The reset microcode comprises a plurality of micro instructions disposed within an internal microcode memory not shown that is executed upon reset of the core to perform functions corresponding to initialization of the core those functions including provision of configuration data that is read from the fuse array to elements such as microcode registers and microcode patch mechanisms . The criteria for whether certain types of configuration data provided via fuses can be distributed to the various elements in the core via reset microcode or not is a function primarily of the specific design of the core . It is not the intent of the present application to provide a comprehensive tutorial on specific configuration techniques that are employed to initialize integrated circuit devices for one skilled in the art will appreciate that for a present day microprocessor core the types of configurable elements generally fall into four categories as are exemplified in control circuits microcode registers microcode patch mechanisms and cache correction mechanisms. Furthermore one skilled will appreciate that the specific values of the configuration data significantly vary based upon the specific type of data. For instance a 64 bit control circuit may include ASCII data that prescribes a serial number for the core . Another 64 bit control register may have 64 different speed settings only one of which is asserted to specify an operating speed for the core . Microcode registers may typically be initialized to all zeros i.e. logic low states or to all ones i.e. logic high states . Microcode patch mechanisms may include an approximately uniform distribution of ones and zeros to indicate addresses in a microcode ROM not shown along with replacement microcode values for those addresses. Finally cache correction i.e. repair mechanisms may comprise very sparse settings of ones to indicate substitution control signals to replace a certain cache sub bank element i.e. a row or a column with a particular replacement sub bank element to enable the repair of one or more cache memories.

Fuse arrays provide an excellent means for configuring a device such as a microprocessor core subsequent to fabrication of the device. By blowing selected fuses in the fuse array the core can be configured for operation in its intended environment. Yet as one skilled in the art will appreciate operating environments may change following programming of the fuse array . Business requirements may dictate that a device originally configured as say as desktop device be reconfigured as a mobile device . Accordingly designers have provided techniques that utilize redundant banks of fuses within the fuse array to provide for unblowing selected fuses therein thus enabling the device to be reconfigured fabrication errors to be corrected and etc. These redundant array techniques will now be discussed with reference to .

Referring now to a block diagram is presented depicting a fuse array within the microprocessor core of including redundant fuse banks RFB RFBN that that may be blown subsequent to blowing first fuse banks PFB PFBN within the fuse array . Each of the fuse banks PFB PFBN RFB RFBN comprises a prescribed number of individual fuses corresponding to specific design of the core . For example the number of fuses in a given fuse bank may be 64 fuses in a 64 bit microprocessor core to facilitate provision of configuration data in a format that is easily implemented in the core .

The fuse array is coupled to a set of registers that are typically disposed within reset logic in the core . A primary register PR is employed to read one of the first fuse banks PFB PFBN say PFB as is shown in the diagram and a redundant register RR is employed to read a corresponding one of the redundant fuse banks RFB RFBN. The registers are coupled to exclusive OR logic that generates an output FB.

In operation subsequent to fabrication of the core the first fuse banks PFB PFBN are programmed by known techniques with configuration data for the core . The redundant fuse banks RFB RFBN are not blown and remain at a logic low state for all fuses therein. Upon power up reset of the core both the first fuse banks PFB PFBN and the redundant fuse banks RFB RFBN are read as required for configuration into the primary and redundant registers respectively. The exclusive OR logic generates the output FB that is a logical exclusive OR result of the contents of the registers . Since all of the redundant fuse banks are unblown i.e. logic low states the output FB value is simply that which was programmed into the first fuse banks PFB PFBN subsequent to fabrication.

Consider now though that design or business requirements dictate that some of the information that was programmed into the first fuse banks PFB PFBN needs to change. Accordingly a programming operation is performed to blow corresponding fuses within the redundant fuse banks RFB RFBN in order to change the information that is read at power up. By blowing a fuse in a selected redundant bank RFB RFBN the value of a corresponding fuse in the primary fuse bank PFB PFBN is logically complemented.

The mechanism of may be employed to provide for reblow of fuses within a device but as one skilled in the art will appreciate a given fuse may only be reblown one time as there is only one set of redundant fuse banks RFB RFBN. To provide for additional reblows a corresponding number of additional fuse banks and registers must be added to the part .

Heretofore the fuse array mechanisms as discussed above with reference to has provided enough flexibility to sufficiently configure microprocessor cores and other related devices while also allowing for a limited number of reblows. This is primarily due to the fact that former fabrication technologies say 65 nanometer and 45 nanometer processes allow ample real estate on a die for the implementation of enough fuses to provide for configuration of a core disposed on the die. However the present inventors have observed that present day techniques are limited going forward due to two significant factors. First the trend in the art is to dispose multiple device cores on a single die to increase processing performance. These so called multi core devices may include say 2 16 individual cores each of which must be configured with fuse data upon power up reset. Accordingly for a 4 core device four fuse arrays are required in that some of the data associated with individual cores may vary e.g. cache correction data redundant fuse data etc. . Secondly as one skilled in the art will appreciate as fabrication process technologies shrink to say 32 nanometers while transistor size shrinks accordingly fuse size increases thus requiring more die real estate to implement the same size fuse array on a 32 nanometer die opposed to that on a 45 nanometer die.

Both of the above limitations and others pose significant challenges to device designers and more specifically to multi core device designers and the present inventors note that significant improvements over conventional device configuration mechanisms can be implemented in accordance with the present invention which allows for programming of individual cores in a multi core device along with substantial increases in cache correction and fuse reprogramming reblow elements. The present invention will now be discussed with reference to .

Turning to a block diagram is presented featuring a system according to the present invention that provides for compression and decompression of configuration repair data for a multi core device. The multi core device comprises a plurality of cores disposed on a die . For illustrative purposes four cores CORE CORE are depicted on the die although the present invention contemplates various numbers of cores disposed on the die . In one embodiment all the cores share a single cache memory that is also disposed on the die . A single programmable fuse array is also disposed on the die and each of the cores are configured to access the fuse array to retrieve and decompress configuration data as described above during power up reset.

In one embodiment the cores comprise microprocessor cores configured as a multi core microprocessor . In another embodiment the multi core microprocessor is configured as an x86 compatible multi core microprocessor. In yet another embodiment the cache comprises a level 2 L2 cache associated with the microprocessor cores . In one embodiment the fuse array comprises 8192 8K individual fuses not shown although other numbers of fuses are contemplated. In a single core embodiment only one core is disposed on the die and the core is coupled to the cache and physical fuse array . The present inventors note that although features and functions of the present invention will henceforth be discussed in the context of a multi core device these features and functions are equally applicable to a single core embodiment as well.

The system also includes a device programmer that includes a compressor that is coupled to a virtual fuse array . In one embodiment the device programmer may comprise a CPU not shown that is configured to process configuration data and to program the fuse array following fabrication of the die according to well known programming techniques. The CPU may be integrated into a wafer test apparatus that is employed to test the device die following fabrication. In one embodiment the compressor may comprise an application program that executes on the device programmer and the virtual fuse array may comprise locations within a memory that is accessed by the compressor . The virtual fuse array includes a plurality of virtual fuse banks that each comprise a plurality of virtual fuses . In one embodiment the virtually fuse array comprises 128 virtual fuse banks that each comprise 64 virtual fuses resulting in a virtual array that is 8 Kb in size.

Operationally configuration information for the device is entered into the virtual fuse array as part of the fabrication process and as is described above with reference to . Accordingly the configuration information comprises control circuits configuration data initialization data for microcode registers microcode patch data and cache correction data. Further as described above the distributions of values for associated with each of the data types is substantially different from type to type. The virtual fuse array is a logical representation of a fuse array not shown that comprises configuration information for each of the microprocessor cores on the die and correction data for each of the caches on the die .

After the information is entered into the virtual fuse array the compressor reads the state of the virtual fuses in each of the virtual fuse banks and compresses the information using distinct compression algorithms corresponding to each of the data types to render compressed fuse array data . In one embodiment system data for control circuits is not compressed but rather is transferred without compression. To compress microcode register data a microcode register data compression algorithm is employed that is effective for compressing data having a state distribution that corresponds to the microcode register data. To compress microcode patch data a microcode patch data compression algorithm is employed that is effective for compressing data having a state distribution that corresponds to the microcode patch data. To compress cache correction data a cache correction data compression algorithm is employed that is effective for compressing data having a state distribution that corresponds to the cache correction data.

The device programmer then programs the uncompressed and compressed fuse array data into the physical fuse array on the die .

Upon power up reset each of the cores may access the physical fuse array to retrieve the uncompressed and compressed fuse array data and reset circuits microcode not shown disposed within each of the cores distributes the uncompressed fuse array data and decompresses the compressed fuse array data according to distinct decompression algorithms corresponding to each of the data types noted above to render values originally entered into the virtual fuse array . The reset circuits microcode then enter the configuration information into control circuits not shown microcode registers not shown patch elements not shown and cache correction elements not shown .

Advantageously the fuse array compression system according to the present invention enables device designers to employ substantially fewer numbers of fuses in a physical fuse array over that which has heretofore been provided and to utilize the compressed information programmed therein to configure a multi core device during power up reset.

Turning now to a block diagram is presented showing a fuse decompression mechanism according to the present invention. The decompression mechanism may be disposed within each of the microprocessor cores of . For purposes of clearly teaching the present invention only one core is depicted in and each of the cores disposed on the die comprise substantially equivalent elements as the core shown. A physical fuse array disposed on the die as described above is coupled to the core . The physical fuse array comprises compressed microcode patch fuses compressed register fuses compressed cache correction fuses and compressed fuse correction fuses . The physical fuse array may also comprise uncompressed configuration data not shown such as system configuration data as discussed above and or block error checking and correction ECC codes not shown . The inclusion of ECC features according to the present invention will be discussed in further detail below.

The microprocessor core comprises a reset controller that receives a reset signal RESET which is asserted upon power up of the core and in response to events that cause the core to initiate a reset sequence of steps. The reset controller includes a decompressor . The decompressor has a patch fuses element a register fuses element and a cache fuses element . The decompressor also comprises a fuse correction element that is coupled to the patch fuses element the register fuses element and the cache fuses element via bus . The patch fuses decompressor is coupled to microcode patch elements in the core . The register fuses element is coupled to microcode registers in the core . And the cache fuses element is coupled to cache correction elements in the core . In one embodiment the cache correction elements are disposed within an on die L2 cache not shown that is shared by all the cores such as the cache of . Another embodiment contemplates cache correction elements disposed within an L1 cache not shown within the core . A further embodiment considers cache correction elements disposed to correct both the L2 and L1 caches described above. Other embodiments contemplate a plurality of on core caches and a shared cache that is not on core.

In operation upon assertion of RESET the reset controller reads the states of the fuses in the physical fuse array and distributes the states of the compressed system fuses to the decompressor . After the fuse data has been read and distributed the fuse correction element of the decompressor decompresses the compressed fuse correction fuses states to render data that indicates one or more fuse addresses in the physical fuse array whose states are to be changed from that which was previously programmed. The data may also include a value for each of the one or more fuse addresses. The one or more fuse addresses and optional values are routed via bus to the elements so that the states of corresponding fuses processed therein are changed prior to decompression of their corresponding compressed data.

In one embodiment the patch fuses element comprises microcode that operates to decompress the states of the compressed microcode patch fuses according to a microcode patch decompression algorithm that corresponds the microcode patch compression algorithm described above with reference to . In one embodiment the register fuses element comprises microcode that operates to decompress the states of the compressed register fuses according to a register fuses decompression algorithm that corresponds to the register fuses compression algorithm described above with reference to . In one embodiment the cache fuses element comprises microcode that operates to decompress the states of the compress cache correction fuses according to a cache correction fuses decompression algorithm that corresponds to the cache correction fuses compression algorithm described above with reference to . After each of the elements change the states of any fuses whose addresses and optional values are provided via bus from the fuse correction element their respective data is decompressed according to the corresponding algorithm employed. As will be described in further detail below the present invention contemplates multiple reblows of any fuse address within the physical fuse array prior to the initiation of the decompression process executed by any of the decompressors . In one embodiment bus may comprise conventional microcode programming mechanisms that are employed to transfer data between respective routines therein. The present invention further contemplates a comprehensive decompressor having capabilities to recognize and decompress configuration data based upon its specific type. Accordingly the recited elements within the decompressor are presented in order to teach relevant aspects of the present invention however contemplated implementations of the present invention may not necessarily include distinct elements but rather a comprehensive decompressor that provides functionality corresponding to each of the elements discussed above.

In one embodiment the reset controller initiates execution of microcode within the patch fuses element to decompress the states of the compressed microcode patch fuses . The reset controller also initiates execution of microcode within the register fuses element to decompress the states of the compressed register fuses . And the reset controller further initiates execution of microcode within the cache fuses element to decompress the states of the compressed cache correction fuses . The microcode within the decompressor also operates to change the states of any fuses addressed by fuse correction data provided by the compressed fuse correction fuses prior to decompression of the compressed data.

The reset controller decompressor and elements therein according to the present invention are configured to perform the functions and operations as discussed above. The reset controller decompressor and elements therein may comprise logic circuits devices or microcode or a combination of logic circuits devices or microcode or equivalent elements that are employed to execute the functions and operations according to the present invention as noted. The elements employed to accomplish these operations and functions within the reset controller decompressor and elements therein may be shared with other circuits microcode etc. that are employed to perform other functions and or operations within the reset controller decompressor and elements therein or with other elements within the core .

After the states of the fuses within the physical fuse array have been changed and decompressed the states of the decompressed virtual fuses are then routed as appropriate to the microcode patch elements the microcode registers and the cache correction elements . Accordingly the core is configured for operation following completion of a reset sequence.

The present inventors note that the decompression functions discussed above need not necessarily be performed in a particular order during a reset sequence. For example microcode patches may be decompressed following decompression of microcode registers initialization data. Likewise the decompression functions may be performed in parallel or in an order suitable to satisfy design constraints.

Furthermore the present inventors note that the implementations of the elements need not necessarily be implemented in microcode versus hardware circuits since in a typical microprocessor core there exist elements of the core which can more easily be initialized via hardware such as a scan chain associated with a cache as opposed to direct writes by microcode. Such implementation details are left up to designer judgment. However the present inventors submit that the prior art teaches that cache correction fuses are conventionally read and entered into a cache correction scan chain by hardware circuits during reset prior to initiating the execution of microcode and it is a feature of the present invention to implement the cache fuses decompressor in microcode as opposed to hardware control circuits since a core s caches are generally not turned on until microcode runs. By utilizing microcode to implement the cache fuses element a more flexible and advantageous mechanisms is provided for entering cache correction data into a scan chain and significant hardware is saved.

Now referring to a block diagram is presented illustrating an exemplary format for compressed configuration data according to the present invention. The compressed configuration data is compressed by the compressor of from data residing in the virtual fuse array and is programmed i.e. blown into the physical fuse array of the multi core device . During a reset sequence as is described above the compressed configuration data is retrieved from the physical fuse array by each of the cores and is decompressed and corrected by the elements of the decompressor within each of the cores . The decompressed and corrected configuration data is then provided to the various elements within the core to initialize the core for operation.

The compressed configuration data comprises one or more compressed data fields for each of the configuration data types discussed above and are demarcated by end of type fields . Programming events i.e. blows are demarcated by an end of blow field . The compressed data fields associated with each of the data types are encoded according to a compression algorithm that is optimized to minimize the number of bits i.e. fuses that are required to store the particular bit patterns associated with each of the data types. The number of fuses in the physical fuse array that make up each of compressed data fields is a function of the compression algorithm that is employed for a particular data type. For example consider a core that comprises sixty four 64 bit microcode registers which must be initialized to say all ones or all zeros. An optimum compression algorithm may be employed to yield compressed data fields for that data type where each of the compressed data fields comprises initialization data for a particular microcode register where the compressed data fields are prescribed in register number order i.e. . And each of the compressed data fields comprises a single fuse which is blown if a corresponding microcode register is initialized to all ones and which is not blown if the corresponding microcode register is initialized to all zeros.

The elements of the decompressor in the core are configured to utilize the end of type fields to determine where their respective compressed data is located within the physical fuse array and the fuse correction decompressor is configured to utilize the end of blow fields to locate compressed fuse correction data that has been programmed i.e. blown subsequent to an initial programming event. It is a feature of the present invention to provide a substantial amount of spare fuses in the physical fuse array to allow for a significant number of subsequent programming events as will be discussed in more detail below.

The exemplary compressed type format discussed above is presented to clearly teach aspects of the present invention that are associated with compression and decompression of configuration data. However the manner in which specific type data is compressed demarcated and the number and types of data to be compressed within the fuse array is not intended to be restricted to the example of . Other numbers types and formats are contemplated that allow for tailoring of the present invention to various devices and architectures extant in the art.

Turning now to a block diagram is presented illustrating an exemplary format for decompressed microcode patch configuration data according to the present invention. During a reset sequence compressed microcode patch configuration data is read by each core from the physical fuse array . The compressed microcode patch configuration data is then corrected according to fuse correction data provided via bus . Then the corrected compressed microcode patch configuration data is decompressed by the patch fuses decompressor . The result of the decompression process is the decompressed microcode patch configuration data . The data comprises a plurality of decompressed data blocks corresponding to the number of microcode patch elements within the core that require initialization data. Each decompressed data block comprises a core address field a microcode ROM address field and a microcode patch data field . The sizes of the fields are a function of the core architecture. As part of the decompression process the patch fuses decompressor creates a complete image of the target data required to initialize the microcode patch elements . Following decompression of the microcode patch configuration data conventional distribution mechanisms may be employed to distribute the data to respectively addressed core and microcode ROM substitution circuits registers in the microcode patch elements .

Now turning to a block diagram is presented depicting an exemplary format for decompressed microcode register configuration data according to the present invention. During a reset sequence compressed microcode register configuration data is read by each core from the physical fuse array . The compressed microcode register configuration data is then corrected according to fuse correction data provided via bus . Then the corrected compressed microcode register configuration data is decompressed by the register fuses decompressor . The result of the decompression process is the decompressed microcode register configuration data . The data comprises a plurality of decompressed data blocks corresponding to the number of microcode registers within the core that require initialization data. Each decompressed data block comprises a core address field a microcode register address field and a microcode register data field . The sizes of the fields are a function of the core architecture. As part of the decompression process the register fuses decompressor creates a complete image of the target data required to initialize the microcode registers . Following decompression of the microcode register configuration data conventional distribution mechanisms may be employed to distribute the data to respectively addressed core and microcode registers .

Referring now to a block diagram is presented featuring an exemplary format for decompressed cache correction data according to the present invention. During a reset sequence compressed cache correction data is read by each core from the physical fuse array . The compressed cache correction data is then corrected according to fuse correction data provided via bus . Then the corrected compressed cache correction data is decompressed by the cache fuses decompressor . The result of the decompression process is the decompressed cache correction data . Various cache mechanisms may be employed in the multi core processor and the decompressed cache correction data is presented in the context of a shared L2 cache where all of the cores may access a single cache utilizing shared areas. Accordingly the exemplary format is provided according to the noted architecture. The data comprises a plurality of decompressed data blocks corresponding to the number of cache correction elements within the core that require corrective data. Each decompressed data block a sub unit column address field and a replacement column address field . As one skilled in the art will appreciate memory caches are fabricated with redundant columns or rows in sub units of the caches to allow for a functional redundant column or row in a particular sub unit to be substituted for a non functional column or row . Thus the decompressed cache correction data allows for substitution of functional columns as shown in for non functional columns. In addition as one skilled in the art will concur conventional fuse array mechanisms associated with cache correction include fuses associated with each sub unit column that are blown when substitution is required by redundant sub unit columns. Accordingly because such a large number of fuses are required to address all sub units and columns therein only a portion of the sub units are typically covered and then the resulting conventional cache correction fuses are very sparsely blown. And the present inventors note that it is a feature of the present invention to address and compress sub unit column addresses and replacement column addresses only for those sub unit columns that require replacement thus minimizing the number of fuses that are required to implement cache correction data. Consequently the present invention as limited by physical fuse array size and the amount of additional configuration data that is programmed therein provides the potential for expanding the number of sub unit columns or rows in a cache that can be corrected over that which has heretofore been provided. In the embodiment shown in it is noted that the associated cores are configured such that only one of the cores sharing the L2 cache would access and provide the corrective data to its respective cache correction elements . The sizes of the fields are a function of the core architecture. As part of the decompression process the cache correction fuses decompressor creates a complete image of the target data required to initialize the cache correction elements . Following decompression of the cache correction data conventional distribution mechanisms in the responsible core may be employed to distribute the data to respectively addressed cache correction elements .

Turning to a block diagram is presented featuring an alternative exemplary format for decompressed cache correction data according to the present invention. The embodiment of may be employed in a multi core processor configuration such as that of where each of the cores comprise one or more on core caches not shown including but not limited to a level one L1 data cache and an L1 instruction cache. During a reset sequence compressed cache correction data is read by each core from the physical fuse array . The compressed cache correction data is then corrected according to fuse correction data provided via bus . Then the corrected compressed cache correction data is decompressed by the cache fuses decompressor . The result of the decompression process is the decompressed cache correction data . The data comprises a plurality of decompressed data blocks corresponding to the number of cache correction elements within the core that require corrective data. Each decompressed data block has a core address field a cache address CAD field a sub unit column address field and a replacement column address field . Thus the decompressed cache correction data allows for substitution of functional columns or rows for non functional columns or rows within a cache specified by the CAD field within a core specified by the core address field . A predefined core address value in the core address field may specify a shared cache such as an L2 cache that is not on core. The sizes of the fields are a function of the core architecture. As part of the decompression process the cache correction fuses decompressor creates a complete image of the target data required to initialize the cache correction elements . Following decompression of the cache correction data conventional distribution mechanisms in the responsible core may be employed to distribute the data to respectively addressed cache correction elements .

Turning now to a block diagram is presented showing an exemplary format for decompressed fuse correction data according to the present invention. As has been discussed above during reset the fuse correction decompressor accesses compressed fuse correction data within the physical fuse array decompresses the compressed fuse correction data and supplies the resulting decompressed fuse correction data to the other decompressors within the core . The decompressed fuse correction data comprises one or more end of blow fields that indicate the end of successively programming events in the physical fuse array . If a subsequent programming event has occurred a reblow field is programmed to indicate that a following one or more fuse correction fields indicate fuses within the physical fuse array that are to be reblown. Each of the fuse correction fields comprises an address of a specific fuse within the physical fuse array that is to be reblown along with a state i.e. blown or unblown for the specific fuse. Only those fuses that are to be reblown are provided in the fuse correction blocks fields and each group of fields within a given reblow event is demarcated by an end of blow field . If reblow field properly encoded is present after a given end of blow field then subsequent one or more fuse fuses may be configured reblown as indicated by corresponding fuse correction fields. Thus the present invention provides the capability for a substantial number of reblows for the same fuse as limited by array size and other data provided therein.

The present inventors have also observed that the real estate and power gains associated with utilization of a shared physical fuse array within which compressed configuration data is stored presents opportunities for additional features disposed on a multi core die. In addition the present inventors have noted that as one skilled in the art will appreciate present day semiconductor fuse structures often suffer from several shortcomings one of which is referred to as growback. Growback is the reversal of the programming process such that a fuse will after some time reconnect after it has been blown that is it goes from a programmed i.e. blown state back to an unprogrammed i.e. unblown state.

In another aspect as alluded to above the present inventors have noted that there may exist challenges when power gating techniques are employed to minimize power consumption across a multi core die such as the die of FIG. . Such techniques which are beyond the scope of the present application are employed to detect when one or more cores are not being utilized and in a varying number of ways the one or more cores are powered down also known as a power gating event . When a power gated core is required for execution power is restored to the core and it begins execution. Of specific interest to the present inventors is the case where a core comprises one or more on core caches as is discussed with reference to where power is removed from these caches under a power gating event. As one skilled in the art will appreciate in order to power up the one or more caches following the power gating event the one or more caches must first be configured using fuse correction data as is described above. However one skilled will also appreciate that excessive reading of fuse arrays decreases the lifetime of the fuses therein. Another issue associated with power gating is the excessive time that may be required for each core to read cache correction fuses to decompress compressed fuse repair data and to configure corrections for each of its respective on core caches. Accordingly another embodiment of the present invention is provided to 1 decrease the amount of time required for all cores to decompress and configure their respective on core caches following a power gating event and 2 increase the overall lifetime of the fuse array by decreasing the number of accesses by the cores under power gating conditions.

Attention is now directed to where a block diagram is presented detailing a mechanism according to the present invention for rapidly loading cache correction data into a multi core device initially and following a power gating event. The device includes a plurality of cores that are configured substantially as described above with reference to . In addition each of the cores includes one or more on core caches CACHE CACHEN a cache repair stores a configuration data stores reset logic and sleep logic . Each of the cores is coupled to a physical fuse array that is configured as described above with reference to and to a stores e.g. random access memory RAM that is disposed on the same die as the cores but which is not disposed within any of the cores . Hence the stores is henceforth referred to as uncore stores . The uncore stores includes designated sub stores that each correspond to each of the cores . The multi core device further includes power control that is coupled to each of the cores . A sync bus SYNC is coupled to each of the cores to provide for synchronization communications there between during power up reset and power gating events.

For purposes of illustration only four cores a single physical fuse array and a single uncore stores are shown however the present inventors note that the novel and inventive concepts according to the present invention can be extended to a plurality of cores fuse arrays and uncore stores of any number. In one embodiment the uncore stores comprises a random access memory RAM that retains power during a power gating event. In one embodiment the uncore stores comprises a 4 KB RAM though other sizes are contemplated.

In operation the power control is configured to perform power gating in order to remove and restore power to one or more of the cores . During power up reset the reset logic on each of the cores is configured to perform among other operations configuration of the cores as is described above. In addition the reset logic is configured to read the configuration data register to determine if a core is a master core or a slave core. If the configuration data indicates that a core is a slave core as part of the reset process the slave core waits until the master core signals over the synchronization bus SYNC that decompressed cache repair data for each of the cores has been read from the fuse array and has been written into corresponding sub stores within the uncore stores . Upon indication over SYNC that the corresponding sub stores have been written each of the slave cores reads their respective decompressed repair data from the corresponding sub stores and proceeds to configure their respective on core caches as is described above. If the configuration data indicates that a core is a master core then as part of power up reset the master core reads cache correction data for all of the cores from the fuse array decompresses the compressed correction data for all of the cores and writes the decompressed cache repair data to the sub stores corresponding to each of the cores . The master core then signals to the other cores over SYNC that writing of the decompressed cache repair data is completed.

During a power gating event the power control removes power from one or more of the cores to the extent that power is also removed from the core s on core caches . However power is not removed from the uncore stores thus preserving the decompressed repair data for each of the cores . The sleep logic is configured to determine when power is restored to a respective core following a power gating event to directly read cache repair data for its on core caches from its respective sub stores and to configure its respective repair data stores for correction of its on core caches thus drastically reducing the time required to return to operations following the power gating event while concurrently substantially increasing the lifetime of the fuse array .

Portions of the present invention and corresponding detailed description are presented in terms of software or algorithms and symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the ones by which those of ordinary skill in the art effectively convey the substance of their work to others of ordinary skill in the art. An algorithm as the term is used here and as it is used generally is conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of optical electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise or as is apparent from the discussion terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system a microprocessor a central processing unit or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Note also that the software implemented aspects of the invention are typically encoded on some form of program storage medium or implemented over some type of transmission medium. The program storage medium may be electronic e.g. read only memory flash read only memory electrically programmable read only memory random access memory magnetic e.g. a floppy disk or a hard drive or optical e.g. a compact disk read only memory or CD ROM and may be read only or random access. Similarly the transmission medium may be metal traces twisted wire pairs coaxial cable optical fiber or some other suitable transmission medium known to the art. The invention is not limited by these aspects of any given implementation.

The particular embodiments disclosed above are illustrative only and those skilled in the art will appreciate that they can readily use the disclosed conception and specific embodiments as a basis for designing or modifying other structures for carrying out the same purposes of the present invention and that various changes substitutions and alterations can be made herein without departing from the scope of the invention as set forth by the appended claims.

