---

title: Dynamic specification auditing for a distributed system
abstract: A distributed system may implement dynamic specification auditing. A specification for a distributed system may be maintained in a machine readable format. Specification assertion agents corresponding to different components of the distributed system may request and receive the specification in order to verify whether tasks performed by the respective component satisfy the specification. The specification assertion agents may then send assertions of the success or failure of the component to be stored in order to verify compliance with specification. Various reports may be generated which identify failures or components in the distributed system that are not reporting assertions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09374417&OS=09374417&RS=09374417
owner: Amazon Technologies, Inc.
number: 09374417
owner_city: Reno
owner_country: US
publication_date: 20140527
---
Large scale distributed systems are more popular than ever. Computational answers solutions services data or other items provided by distributed systems as well various backbone services that support other operations are many times implemented as a large scale distributed system. Large scale distributed systems offer many advantages over traditional monolithic systems. Distributed systems may be scaled to meet the needs or demands on resources in the distributed system simply by connecting new systems to the network. The burden of many different tasks may be more efficiently subdivided and or shared among the components of a distributed system. Redundancy availability and other benefits provided by greater numbers of computing systems or nodes performing tasks in distributed systems are also advantageous. Distributed systems are costly to develop and maintain. Interactions between multiple components are often complex and in many cases the effects of changes to a distributed system are difficult to predict.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

The systems and methods described herein may implement dynamic specification auditing of distributed systems. Distributed system specifications may provide an authoritative guide for developing and maintaining distributed systems that often cover large number of systems components and devices. Complex interactions may be regulated and defined and new features components or other changes may be clearly outlined. The requirements of a specification thus may describe the optimal or approved operation for components implementing a distributed system. However as changes are made to the specification not all components may be brought up to compliance with the specification. Many systems are often implemented by multiple development teams each of which may have to account for changes made by other development teams. Without knowledge of these changes development teams for some components of a distributed system may fail to incorporate changes made by others. Overtime signification errors and performance problems may arise when the specification is not enforced among the components of a distributed system.

Static evaluation techniques may be used to pre test new components or old components of a distributed system when changes are made to a distributed system specification. However if particular components are not tested and unintended affects arise wide spread failures may have to occur before uncompliant components are identified. Moreover for large scale distributed systems different developers may test and implement changes or features specific to a component without ways to determine how the implemented changes affect other components. Dynamic specification auditing for distributed systems allow for continuous and dynamic identification of compliance for distributed systems. This may effectively allow for an ongoing regression test of the effects of specification change as may be made for changes to the distributed system . For example distributed systems with large numbers of independent developers administrators or other actors upon the system may be able to implement changes secure in the knowledge that other developers may be notified and able to account for the changes. Furthermore other testing techniques or approaches may also benefit from dynamically auditing the specification. Integration testing for new features for example may utilize dynamic auditing to easily recognize potential problems or conflicts between new features and how things currently are implemented or operating.

In order to define the various roles operations states and other tasks performed by distributed system components a distributed system specification may be defined. Distributed system may implement dynamic specification auditing techniques as described in more detail below with regard to . As illustrated in distributed system may implement dynamic specification manager . Dynamic specification manager may provide access to the specification and track the compliance with the specification by maintaining assertions reported by multiple specification assertion agents for different distributed system components .

Specification assertion agents may be implemented to monitor and report the compliance of different respective distributed system components . For example specification assertion agents and may report on the compliance of subsystems and respectively. Specification assertion agents and may monitor the compliance of subsystem components and respectively while specification assertion agents and may monitor the compliance of component functions and respectively. Implementing specification assertion agents across different levels of components may allow for both fine grained and coarse grained auditing of specification compliance.

As illustrated in agents may obtain specification . Specification may be maintained in a machine readable format so that specification agents may parse through the specification identify applicable requirements and verify compliance with the identified requirements. Agents may then report compliant or non compliant assertions to be maintained in agent assertion data . Various reports may be generated based on agent assertion data to understand the compliance and coverage of a specification or updated specification. Alarms of particular failures may be triggered in some embodiments and notifications of the failures sent to responsible parties e.g. administrators or developers .

Please note that previous descriptions are not intended to be limiting but are merely provided as an example of a distributed system and dynamic specification auditing. Various other components or arrangements of components may make up a distributed system and or dynamic specification manager.

This specification next includes a general description of a virtual computing resource provider which may implement dynamic specification auditing for distributed s systems. Then various examples of a dynamic specification manager are discussed including different components modules or arrangements of components module that may be employed as part of implementing a dynamic specification manager. A number of different methods and techniques to dynamic specification auditing for distributed s systems are then discussed some of which are illustrated in accompanying flowcharts. Finally a description of an example computing system upon which the various components modules systems devices and or nodes may be implemented is provided. Various examples are provided throughout the specification.

A virtual compute instance and may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor . A number of different types of computing devices may be used singly or in combination to implement the compute instances and of provider network in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments instance clients or other any other user may be configured and or authorized to direct network traffic to a compute instance .

Compute instances may operate or implement a variety of different platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for performing client applications without for example requiring the client to access an instance. In some embodiments compute instances have different types or configurations based on expected uptime ratios. The uptime ratio of a particular compute instance may be defined as the ratio of the amount of time the instance is activated to the total amount of time for which the instance is reserved. Uptime ratios may also be referred to as utilizations in some implementations. If a client expects to use a compute instance for a relatively small fraction of the time for which the instance is reserved e.g. 30 35 of a year long reservation the client may decide to reserve the instance as a Low Uptime Ratio instance and pay a discounted hourly usage fee in accordance with the associated pricing policy. If the client expects to have a steady state workload that requires an instance to be up most of the time the client may reserve a High Uptime Ratio instance and potentially pay an even lower hourly usage fee although in some embodiments the hourly fee may be charged for the entire duration of the reservation regardless of the actual number of hours of use in accordance with pricing policy. An option for Medium Uptime Ratio instances with a corresponding pricing policy may be supported in some embodiments as well where the upfront costs and the per hour costs fall between the corresponding High Uptime Ratio and Low Uptime Ratio costs.

Compute instance configurations may also include compute instances with a general or specific purpose such as computational workloads for compute intensive applications e.g. high traffic web applications ad serving batch processing video encoding distributed analytics high energy physics genome analysis and computational fluid dynamics graphics intensive workloads e.g. game streaming 3D application streaming server side graphics workloads rendering financial modeling and engineering design memory intensive workloads e.g. high performance databases distributed memory caches in memory analytics genome assembly and analysis and storage optimized workloads e.g. data warehousing and cluster file systems . Size of compute instances such as a particular number of virtual CPU cores memory cache storage as well as any other performance characteristic. Configurations of compute instances may also include their location in a particular data center availability zone geographic location etc. . . . and in the case of reserved compute instances reservation term length.

As illustrated in a virtualization host such as virtualization hosts and may implement and or manage multiple compute instances and respectively in some embodiments and may be one or more computing devices such as computing system described below with regard to . A virtualization host may include a virtualization management module such as virtualization management modules and capable of instantiating and managing a number of different client accessible virtual machines or compute instances. The virtualization management module may include for example a hypervisor and an administrative instance of an operating system which may be termed a domain zero or dom0 operating system in some implementations. The dom0 operating system may not be accessible by clients on whose behalf the compute instances run but may instead be responsible for various administrative or control plane operations of the network provider including handling the network traffic directed to or from the compute instances.

As illustrated in each of these components in virtualization hosts virtualization management and compute instances may implement respective specification assertion agents such as specification assertion agents and . Other services or subsystems may be implemented such as resource management which may assign compute instances determine which instance configurations are valid provision more resources etc. security management may implement security groupings such as virtual private networks mapping component which may provide a mapping and encapsulating system for creating an overlay network on network and may provide a separate namespace for the overlay layer and the internal network layer in provider network health management which may monitor suspend provision or alert on the health status of various compute instances and front end which may handle requests from clients directing them to the appropriate internal services in virtualized computing service . These subsystems and services may also implement respective specification assertion agents such as agents and . External computing services such as other computing services may also be leveraged to provide virtual computing service e.g. a storage service . Other computing service s may also implement a respective specification assertion agent

Virtualized computing service may implement dynamic specification manager described in more detail below to manage the dynamic auditing of a specification for virtualized computing service as well as handling new versions or updates to the specification. The specification may be provided to specification assertion agents which in turn may verify compliance of the specification during the performance of component tasks and provide assertion results back to dynamic specification manager .

Clients may encompass any type of client configurable to submit requests to provider network . For example a given client may include a suitable version of a web browser or may include a plug in module or other type of code module configured to execute as an extension to or within an execution environment provided by a web browser. Alternatively a client may encompass an application such as a database application or user interface thereof a media application an office application or any other application that may make use of compute instances to perform various operations. In some embodiments such an application may include sufficient protocol support e.g. for a suitable version of Hypertext Transfer Protocol HTTP for generating and processing network based services requests without necessarily implementing full browser support for all types of network based data. In some embodiments clients may be configured to generate network based services requests according to a Representational State Transfer REST style network based services architecture a document or message based network based services architecture or another suitable network based services architecture. In some embodiments a client e.g. a computational client may be configured to provide access to a compute instance in a manner that is transparent to applications implement on the client utilizing computational resources provided by the compute instance.

Clients may convey network based services requests to provider network via external network . In various embodiments external network may encompass any suitable combination of networking hardware and protocols necessary to establish network based communications between clients and provider network . For example a network may generally encompass the various telecommunications networks and service providers that collectively implement the Internet. A network may also include private networks such as local area networks LANs or wide area networks WANs as well as public or private wireless networks. For example both a given client and provider network may be respectively provisioned within enterprises having their own internal networks. In such an embodiment a network may include the hardware e.g. modems routers switches load balancers proxy servers etc. and software e.g. protocol stacks accounting software firewall security software etc. necessary to establish a networking link between given client and the Internet as well as between the Internet and provider network . It is noted that in some embodiments clients may communicate with provider network using a private network rather than the public Internet.

In some embodiments dynamic specification manager may implement specification management interface . Specification management interface may act as an interface coordinator and or manager for specifications maintained for a distributed system. In at least some embodiments specification management interface may be a network based interface which may receive and respond to requests over the network such as through requests formatted according to a programmatic interface API or network based site that provides a graphical user interface via which requests may be received and responses provided. For instance specification owners which may be client devices operated by distributed system developers or administrators may be configured to provide a new specification or updates to a specification to specification management request handler . For example an update request to change a specification or use a new specification may be received via the interface . Specification management interface may in turn store the new version or update distributed system specification s as requested. discussed below describes various requests or techniques that may be implemented for performing updates to specifications. Specification management interface may also handle requests for compliance reports obtaining the requested agent assertion data evaluating the data generating the report and sending back the report to specification owner s . In some embodiments specification management interface may also notify specification owners if certain alarms are triggered by failure monitor . For example specification management interface may provide a network based site that allows specification owners to configure various alarms reports and other information gather from the assertion data. Different views whether graphic textual or other arrangements of compliance reporting may be selected such as displaying color coded versions of the specification so that components that are not compliant with the specification or not reporting at all may be identified. In a large scale development environment various access control policies or other similar techniques may allow authorized users to access or utilize a few some or all of the various capabilities of dynamic specification manager . Moreover changes to the specification may be tracked as well as which particular user made the changes for subsequent analysis.

Dynamic specification manager may also maintain the specification for the distributed system in some embodiments. Different versions of the specification may be maintained in some embodiments. Distributed system specification s may be maintained in a machine readable format such that specification assertion agent s may be able to parse the specification.

Dynamic specification manager may also implement a specification agent request handler to service requests from specification assertion agent s . For example specification assertion agents may send requests for the specification to specification agent request handler . Specification agent request handler may obtain the distributed system specification and provide the specification to specification assertion agent s . Specification agent request handler may also receive and storage agent reported assertions in agent assertion data which may be a persistent data store.

The examples of implementing a dynamic specification auditing for distributed systems discussed above with regard to have been given in regard to virtual computing resources offered by a provider network. Various other types or configurations of distributed systems or services may implement these techniques. Distributed database systems content delivery networks storage systems or any other large scale distributed system may implement dynamic specification auditing. is high level flowchart illustrating various methods and techniques for dynamic specification auditing for distributed systems according to some embodiments. These techniques may be implemented using various components or nodes of a distributed system.

As indicated at a specification for a distributed system may be maintained in a machine readable format for a distributed system in various embodiments. Machine readable formats may include but are not limited to JavaScript Object Notation JSON and Extensible Markup Language XML or any other format for which specification assertion agents can digest parse interpret otherwise identify the specification requirements corresponding to the distributed system component monitored. Various different types of data stores and or persistent storage devices may be implemented to maintain the specification. Object stores for instance may provide storage for the specification as versioning techniques may allow multiple different versions of a specification to be maintained that correspond to different points in time. The distributed system may itself include multiple different components operating at varying levels within the architecture of the distributed system. For example as illustrated above in both a distributed system may include large sub systems or services which may or may not be internal to a network for the distributed system . Specification assertion agents may be implemented for these different components of the distributed system in order to very compliance of the tasks performs or states of these components with the specification.

As indicated at requests may be received from the specification assertion agents for the specification and in response the specification may be provided as indicated at . Although not illustrated in some embodiments only those portions of the specification relevant to the distributed system component for which a specification assertion agent performs verification may be supplied.

Assertions may be received from some of the specification assertion agents as indicated at . In various embodiments these assertions may indicate whether the corresponding portion s of the specification are met success failure compliance non compliance at the particular component when executing tasks at the distributed system components of the distributed system. Timestamps and other metadata descriptive of the assertions may also be received along with the assertions. Received assertions may then be stored in order to verify compliance with the specification as indicated at . Monitoring techniques that may trigger alarms based on compliance or non compliance may be implemented using the stored assertions as discussed below with regard to . Similarly compliance reports and other views of the stored assertions may be generated and provided for further compliance analysis as discussed below with regard to . The assertions themselves may be stored in the same data store or storage devices as the specification or located differently in another data store or other storage devices.

Specification assertion agents as discussed above with regard to may be implemented at various levels components or locations within a distributed system. Some specification assertion agents may monitor the compliance of tasks that are performed at a very high volume but in a limited number of locations whereas other specification assertion agents may be implemented at many components performing the same task with each individual component monitoring a much smaller volume of tasks. Although each specification assertion agent may receive the same specification information and report assertions in the same format the implementation task compliance verification may vary among specification assertion agents dependent on the task component being monitored. is high level flowchart illustrating various methods and techniques for verifying specification compliance for particular distributed system components at a specification assertion agent according to some embodiments.

As indicated at a request may be sent from a specification assertion agent for a specification of the distributed system to a dynamic specification manager or other component maintaining the specification in some embodiments. The specification document may then be received at the specification assertion agent as indicated at . The specification assertion agent may be configured to parse the specification document in order to identify those portion s of the specification that are relevant to the component for which the assertion agent is verifying compliance. For example the specification assertion agent may parse the specification document for certain key value pairs e.g. if the specification is in JSON or tags e.g. if the specification document is in XML .

Once the relevant portions of the specification are identified then compliance of tasks performed at the distributed system component for which the specification assertion agent is implemented may be verified as indicated at . For example if only certain resources may be configured in certain way by a particular task then the specification document may indicate valid configurations. For configurations that were made and identified as invalid an assertion indicating the component failure or non compliance of the task and other error information may be generated. Similarly if the task is successfully performed then an assertion of success or compliance may be generated. Timestamps and other metadata information may also be included. In another example the specification may define particular parameters for performing operations such as throttling parameters for a throttle component that limits the number of requests to a particular resource. If the throttle parameter is incorrectly set then a non compliant or failure assertion may be generated. Determinations of compliance may vary as the tasks may vary and thus the previous examples are not intended to be limiting as to other ways in which the verification of task compliance with regard to a specification may be performed.

Assertions of compliance and non compliance may be sent to the dynamic specification manager or other component for storage as indicated at in various embodiments. As noted above the assertions may include other information such as a timestamp or other metadata descriptive of the task or assertion. Different specification assertion agents may perform compliance verification differently and independently. In this communications between specification assertion agents and a dynamic specification manager or other system or component maintaining the specification and or storing assertion information may be loosely coupled and asynchronous. Some specification assertion agents may request and receive the specification and never complete task compliance or sending of assertions. Specification assertion agents may be implemented among distributed system components to verify task compliance in such a way as not to interfere with the performance of the components themselves.

For large distributed systems with large amounts of assertion data it may be difficult to view compliance of specific portions of the distributed system or of the distributed system as a whole by sampling viewing the raw assertion data. In some embodiments compliance reports or other aggregation and analysis of the assertion data may be provided so as to quickly provide a more comprehensible view of compliance with the specification. is high level flowchart illustrating various methods and techniques for generating compliance reports with regard to a specification for which dynamic auditing has been performed according to some embodiments.

As indicated at a request for a compliance report may be received in some embodiments. The compliance report may request evaluation of specific components or portions of the distributed system e.g. particular resources or particular layers of the distributed system architectural stack . The request may also include various types of analysis requests or formatting requests for the compliance report. For example the request may wish to view successful or failing assertions over a period of time graphically or the request may ask for current compliance percentages or rates for different types of components or the distributed system as a whole.

As indicated at an evaluation of the assertion data that is stored may be performed in some embodiments. For example assertion data for the specifically requested components or portions of the data may be accessed as well as assertion data within a specific range of time. Based on the evaluation the compliance report may be generated as indicated at . For example a document table spreadsheet or graph may be created which represents the requested report. In some embodiments a compliance report may provide a human readable presentation of the specification e.g. the machine readable document annotated with metadata or other information describing the values in the specification . This human readable version of the specification may be color coded so that compliant portions are colored one way failing or incompliant portions are colored another away and unknown portions of the specification e.g. where for example no assertions have been received may be colored a third way.

Once generated the compliance report may be provided in response to the request as indicated at . For example the report may be emailed downloaded or displayed. In some embodiments a network based interface e.g. a website may display reports and other results as well as receive requests or set up monitoring for particular failures.

Results of dynamic specification auditing may be useful for automated or proactive monitoring of compliance failures. Although illustrated in above implemented as part of a dynamic specification manager monitoring techniques may be implemented separately by different systems e.g. monitors for different components that are customizable by administrators developers responsible for that particular portion of the distributed system . is a high level flowchart illustrating various methods and techniques for monitoring failure assertions in order trigger failure alarms according to some embodiments.

As indicated at storage assertions for distributed system components with respect to a specification may be evaluated in order to identify compliance failures in various embodiments. For instance assertions stored for specific components or associated with specific levels within the distributed system architecture or software stack may be targeted for evaluation. All assertions with regard to front end services such as request handling for example may be evaluated. In another example assertions stored with regard to a particular low level component such as a component that throttles traffic to a specific type of resource or node in the distributed system may be monitored. By selecting particular components types of components functions or even larger groups of components associated with a particular portion of the distributed system monitoring may be tuned to provide fine grained alerts for lower level functions accomplished by specific distributed system components all the way to coarse grained alerts which may provide an indication of the overall performance or compliance of the distributed system.

In various embodiments a determination may be made as to whether failures assertions in the evaluated assertions are sufficient to warrant trigger an alarm for the failures as indicated . For instance some types of failures may so singular or harmful that a single occurrence of failure to comply with the specification may trigger an alarm. For example specification changes that update security features or controls for the distributed system may always trigger alarms if the specification is not complied with. For some failures a threshold of failures may need to be met or surpassed in order trigger an alarm. For example if most components of a same type perform tasks in compliance with the specification and a small number of the type of components do not then it may be surmised that hardware discrepancy or obsolesce issue may be causing the failure assertions.

When alarms are triggered as indicated by the positive exit form a notification or some other indication may be provided to a distributed system administrator as indicated at developer or other responsible party. In some embodiments alarms may be logged when triggered so as to create a record of failures or patterns of failures that are noted. If no alarms are triggered as indicated by the negative exit from then monitoring may continue in various embodiments.

New features components modifications or changes to a distributed system all may instigate corresponding changes to a specification used for dynamic auditing. Different testing approaches may dictate how and when portions of the specification are changed. For example a regression testing approach for the distributed system may select different portions of the specification to update in order to regression test the effect of a change or new component on other components that correspond to the update portions of the specification. is a high level flowchart illustrating various methods and techniques for handling updates to a specification for dynamic auditing according to some embodiments.

As indicated at a request to update a specification for a distributed system may be received. The request may describe or include new portion of the specification to add or insert a portion of the specification to remove or delete or a portion of the specification to modify or change. As the specification may be stored in a machine readable format these update requests may be formatted according to a programmatic interface API that may allow a specification management component such as dynamic specification manager or described above with regard to to make a fine grained update to the specification as the specification document itself may be parsed or traversed to locate the specific portions to update. In some embodiments update requests may simply include a new version of the specification to replace the older version.

In various embodiments the update to the specification may be performed according to the update request as indicated at . For instance the addition deletion or modification may be made to the specification document. In some embodiments changes to the specification may be logged or multiple versions of the specification may be kept in order to facilitate dynamic auditing for different versions of the specification or different states of the specification at a specific point in time. In this way more sophisticated deployment and or testing schemes may be able to employ dynamic specification auditing for particular or targeted purposes.

As indicated at a notification of the update to the specification may be sent to the specification assertion agents in some embodiments. For example a notification including a new specification version number may sent out which may indicate to some specification assertion agents utilizing a prior version of the specification that their own respective copy of the specification may be obsolete. Instead of a notification in some embodiments the updated specification document itself may be sent out to the specification assertion agents. Alternatively specification assertion agents may discover the update to the specification independently from any update notification. For example in some embodiments specification assertion agents may periodically or aperiodically poll to determine whether updates to the specification have been made. A new version number or timestamp associated with the specification document may indicate that newer version of the specification is available which the specification assertion agents may then request.

The methods described herein may in various embodiments be implemented by any combination of hardware and software. For example in one embodiment the methods may be implemented by a computer system e.g. a computer system as in that includes one or more processors executing program instructions stored on a computer readable storage medium coupled to the processors. The program instructions may be configured to implement the functionality described herein e.g. the functionality of various servers and other components that implement the distributed systems described herein . The various methods as illustrated in the figures and described herein represent example embodiments of methods. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Embodiments of dynamic specification auditing for distributed systems as described herein may be executed on one or more computer systems which may interact with various other devices. is a block diagram illustrating an example computer system according to various embodiments. For example computer system may be configured to implement nodes of a compute cluster a distributed key value data store and or a client in different embodiments. Computer system may be any of various types of devices including but not limited to a personal computer system desktop computer laptop or notebook computer mainframe computer system handheld computer workstation network computer a consumer device application server storage device telephone mobile telephone or in general any type of computing device.

Computer system includes one or more processors any of which may include multiple cores which may be single or multi threaded coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. The computer system also includes one or more network communication devices e.g. network interface for communicating with other systems and or components over a communications network e.g. Internet LAN etc. . For example a client application executing on system may use network interface to communicate with a server application executing on a single server or on a cluster of servers that implement one or more of the components of the data warehouse system described herein. In another example an instance of a server application executing on computer system may use network interface to communicate with other instances of the server application or another server application that may be implemented on other computer systems e.g. computer systems .

In the illustrated embodiment computer system also includes one or more persistent storage devices and or one or more I O devices . In various embodiments persistent storage devices may correspond to disk drives tape drives solid state memory other mass storage devices or any other persistent storage device. Computer system or a distributed application or operating system operating thereon may store instructions and or data in persistent storage devices as desired and may retrieve the stored instruction and or data as needed. For example in some embodiments computer system may host a storage system server node and persistent storage may include the SSDs attached to that server node.

Computer system includes one or more system memories that are configured to store instructions and data accessible by processor s . In various embodiments system memories may be implemented using any suitable memory technology e.g. one or more of cache static random access memory SRAM DRAM RDRAM EDO RAM DDR 10 RAM synchronous dynamic RAM SDRAM Rambus RAM EEPROM non volatile Flash type memory or any other type of memory . System memory may contain program instructions that are executable by processor s to implement the methods and techniques described herein. In various embodiments program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc. or in any combination thereof. For example in the illustrated embodiment program instructions include program instructions executable to implement the functionality of a virtual computing resource provider network in different embodiments. In some embodiments program instructions may implement multiple separate clients server nodes and or other components.

In some embodiments program instructions may include instructions executable to implement an operating system not shown which may be any of various operating systems such as UNIX LINUX Solaris MacOS Windows etc. Any or all of program instructions may be provided as a computer program product or software that may include a non transitory computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A non transitory computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . Generally speaking a non transitory computer accessible medium may include computer readable storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM coupled to computer system via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. In other embodiments program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In some embodiments system memory may include data store which may be configured as described herein. In general system memory e.g. data store within system memory persistent storage and or remote storage may store data blocks replicas of data blocks metadata associated with data blocks and or their state configuration information and or any other information usable in implementing the methods and techniques described herein.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the system including through network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems which may implement one or more storage system server nodes database engine head nodes and or clients of the database systems described herein for example. In addition network interface may be configured to allow communication between computer system and various I O devices and or remote storage . Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of a distributed system that includes computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of a distributed system that includes computer system through a wired or wireless connection such as over network interface . Network interface may commonly support one or more wireless networking protocols e.g. Wi Fi IEEE 802.11 or another wireless networking standard . However in various embodiments network interface may support communication via any suitable wired or wireless general data networks such as other types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol. In various embodiments computer system may include more fewer or different components than those illustrated in e.g. displays video cards audio cards peripheral devices other network interfaces such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

It is noted that any of the distributed system embodiments described herein or any of their components may be implemented as one or more network based services. For example a compute cluster within a computing service may present computing services and or other types of services that employ the distributed computing systems described herein to clients as network based services. In some embodiments a network based service may be implemented by a software and or hardware system designed to support interoperable machine to machine interaction over a network. A network based service may have an interface described in a machine processable format such as the Web Services Description Language WSDL . Other systems may interact with the network based service in a manner prescribed by the description of the network based service s interface. For example the network based service may define various operations that other systems may invoke and may define a particular application programming interface API to which other systems may be expected to conform when requesting the various operations.

In various embodiments a network based service may be requested or invoked through the use of a message that includes parameters and or data associated with the network based services request. Such a message may be formatted according to a particular markup language such as Extensible Markup Language XML and or may be encapsulated using a protocol such as Simple Object Access Protocol SOAP . To perform a network based services request a network based services client may assemble a message including the request and convey the message to an addressable endpoint e.g. a Uniform Resource Locator URL corresponding to the network based service using an Internet based application layer transfer protocol such as Hypertext Transfer Protocol HTTP .

In some embodiments network based services may be implemented using Representational State Transfer RESTful techniques rather than message based techniques. For example a network based service implemented according to a RESTful technique may be invoked through parameters included within an HTTP method such as PUT GET or DELETE rather than encapsulated within a SOAP message.

Although the embodiments above have been described in considerable detail numerous variations and modifications may be made as would become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

