---

title: Hierarchical permissions model within a document
abstract: Case management systems and techniques are disclosed. In various embodiments, a hierarchical document permission model is received, the model describing a document hierarchy comprising a plurality of hierarchically related document nodes and defining for each of at least a subset of said document nodes one or more document roles and for each such role one or more document permissions with respect to that document node. The hierarchical document permission model is used to determine and enforce permissions with respect to case management instances to which the hierarchical document permission model applies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405929&OS=09405929&RS=09405929
owner: EMC Corporation
number: 09405929
owner_city: Hopkinton
owner_country: US
publication_date: 20140930
---
This application claims priority to U.S. Provisional Patent Application No. 62 031 592 entitled HIERARCHICAL PERMISSIONS AND CASE ROLES FOR CASE MANAGEMENT filed Jul. 13 2014 which is incorporated herein by reference for all purposes.

Case management systems software and or cloud based or other electronically provided case management services collectively Case Management Systems are used to automate the management of complex sets of documents or other content and associated business or other processes particularly in situations in which the documents or other content that may need to be managed for respective particular instances of a case model type e.g. a loan application may not be the same for each instance and the processing required and or selected to be performed may not be the same for each instance.

A case model Case Model typically describes a type of case instances of which are to be managed by a Case Management System. As opposed to very structured business process that defines a predetermined work flow that does not vary from instance to instance using a Case Model one can model ad hoc actions and define responses thereto with mini workflows enabling the processing of respective instances of a Case Model to be determined dynamically at runtime based e.g. on events context data user input dynamic evaluation of documents or other content etc. As a result each instance of a Case Model e.g. the respective loan applications of different applicants may follow its own course as determined at each step by processing as defined in applicable portions of the Case Model.

The technology can be implemented in numerous ways including as a process a system a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In general the order of the steps of disclosed processes may be altered within the scope of the technology. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the technology is provided below along with accompanying figures that illustrate the technology. The technology is described in connection with such embodiments but the technology is not limited to any embodiment. The scope of the technology is limited only by the claims and the technology encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the technology. These details are provided for the purpose of example and the technology may be practiced according to the claims without some or all of these specific details.

A hierarchical permissions model for documents associated with case management instances is disclosed. In various embodiments each of a plurality of nodes in a document hierarchy e.g. hierarchical sections may have one or more roles e.g. document roles associated therewith and for each role the associated permissions of that role with respect to that portion of the document may be specified.

A case model typically describes a case management system. Using a case model one can model ad hoc actions with mini workflows for example as opposed to very structured process that defines an end to end business workflow. In various embodiments a case model comprises a hierarchical nested container model sometimes referred to herein as a hierarchical data model and may in addition define case roles case phases states and or permissions. In some embodiments permissions may be defined for each case node and or level in the hierarchy and may vary in some embodiments based at least in part on the respective phases states of a state machine defined for a case node.

In various embodiments a case model may include a hierarchical nested container model. This model represents how the data with in a case is organized and what data is captured during runtime. Each node in the hierarchy is sometimes referred to herein as a case node . Case nodes at the lowest level of a case model hierarchy may be referred to as case leaf nodes or simply leaf nodes . Case leaf nodes in various embodiments may point to a specific business object or document type.

The term case role is used herein to refer to user roles that have been defined in a case model. In various embodiments users may be assigned to case roles with respect to instances of a case model and at each case node in the case model permissions may be designated by reference to one or more case roles. During runtime in some embodiments members may be added or removed from these roles at case node instances corresponding to respective instances of a type of case as defined in a case model.

In various embodiments at each case node a metadata model that defines one or more traits and or associated behavior may be defined.

In various embodiments a case model as described herein may be created using a domain specific or other development module or tool. For example reusable elements such sample case nodes typical of those used in the domain e.g. documents case roles behaviors etc. Typically associated with a loan application process a new drug approval application etc. primitives usable to define a state machine and or associated processing for respective case nodes etc. may be provided. For example an application programming interface API may be defined and or a visual or other case model development tool may be provided.

In various embodiments a case model definition is embodied in an xml or other structured data file. A case management system and or platform is provided which is configured e.g. by software to load a case model definition parse the definition and create an instance of the case model based on the definition. Instance specific attributes and or state information or other metadata may be stored in a case model instance data store e.g. a database. At runtime the case model definition file and the case model instance data for a given instance are used by the disclosed case management system to implement the case model instance including by performing processing and managing case model instance associated content per the case model definition in light of the current values of the case model instance data for that instance.

In the example shown in a case model developer system e.g. a client computer system also can connect to case management system via network . In some embodiments a case model development user interface and or service may be accessed and used to define a case model. For example a visual or other developer tool may be presented to enable a developer using client system to define a case model and cause the case model to be stored in data storage and deployed by case management system . In some embodiments deployment of a case model includes making the case model available to be used to create case management instances based on the model and to use the case model to perform with respect to each such instance the case management processing as defined in the case model.

In various embodiments a case model may indicate one or more content objects to be associated with respective instances of a case model. The case model may include metadata and associated behaviors to enable instance specific content objects e.g. documents to be associated with case leaf nodes of a case instance. In the example shown in content objects may be accessed via a content management system configured to manage content objects stored in an associated content repository . In various embodiments case management system may be configured to use instance variables associated with a given case instance and metadata and or behaviors defined in an associated case model to interact programmatically with content management system to obtain and or manage documents or other content objects associated with a case instance. In some embodiments case management system may be configured e.g. via the case model to invoke services and or other functionality of content management system with respect to such documents or other content objects.

Referring further to the case management system includes a case management module . In various embodiments case management module includes functionality to enable users e.g. users of client systems of to create and or use case management instances based on case models stored in case model store . Case management module for example may expose a web or other interface to remote users and may receive via said interface a request to create and or access a case instance. Case management module uses database interface to obtain an associated case model definition from case model store to use the case model to instantiate case instances. Instance variables are stored by case management module in case instance data store .

In various embodiments a case model definition such as model definition may include an XML file or other structured data which the case management system is configured to parse and use to construct case instances based on the case model. For example the hierarchical data structure may be defined along with metadata and associated behaviors for each case node. A case management instance such as case management instance may include an in memory instance of a data structure defined in case model definition which is used to store instance variables such as instance data in this example.

Once the developer has completed and submitted the case model definition the case model definition is received stored and deployed . In some embodiments a runtime representation of the definition is processed e.g. upon submission by the developer to generate an XML or other structured data file that embodies the case model as defined. Deployment in various embodiments includes making the case model definition available to be used to instantiate case management instances based on the case model e.g. individual loan application cases.

In various embodiments for any case node within the hierarchical nested container model a state machine can be defined and the actions that can be used to transition between different phases states of the state machine defined for that case node may be specified. These actions could be used during runtime to transition between states.

In the example shown in a state machine has been defined and associated with a specific case node in the hierarchical model shown in specifically node F . In various embodiments a document or other content associated with node F traits such as metadata and or associated behavior associated with node F etc. may be transformed reviewed and or otherwise involved with processing that may result in a given case model instance in transitions being made between states of the state machine defined for case node F in this example.

In various embodiments enabling a state machine to be defined and associated with a case node comprising a hierarchal nested container model provides a flexible dynamic framework within which ad hoc actions and or information can be responded to in a manner determined dynamically based on the circumstances of a given instance of a case with the result that the actions and or processing performed at a given case node and or the consequences of such actions and or processing may be different for one instance of the case model than for another instance of the case model.

In various embodiments a state machine engine may be included in a case management system such as case management system of to enable a state machine defined for a case node such as state machine of to be implemented and associated functionality to be provided. For example in some embodiments case management module of may include a state machine engine. In some embodiments the state machine engine may receive and parse state machine definition portions of a case model definition and may use such portions to create and manage runtime data structures associated with the respective defined states phases of the state machine and transitions between them. In some embodiments state variables associated with a current state of a case node specific state machine for a given instance of a case model may be stored persistently with other case management instance data for example in a case instance data store such as data store of .

Note that for a given instance of a case model with which the state machine of is associated the states through which the state machine of may transition for that instance may be different than for one or more other instances. Also for a given instance depending on the state machine definition included in the case model definition the user data associated with that instance at applicable times and potentially user actions and decisions made in response to case information the state machine may be transitioned to through a given state more than once e.g. via the reopen transitions potentially resulting in different outcomes of processing associated with that state.

In the example shown in an indication to define a state machine for a case node is received . For example a developer using a case model definition tool service and or interface may select a case node and provide an input indicating that a state machine is desired to be defined for and associated with the selected node. A developer user interface to define a state machine for the case node is provided . A definition of two or more states and transition s between them is received . A definition of permissions associated with the respective states e.g. who may access content or metadata associated with the case node while the state machine is in that state is received . A definition of permissions associated with transitions between the respective states e.g. who may cause each transition to occur is received . In various embodiments a state machine defined for a case node using the process of may be included in the case model definition as stored and deployed e.g. in a corresponding portion of an XML or other structured data file comprising the case model definition.

A hierarchical permissions model for case models is disclosed. In various embodiments the hierarchical permissions model is used at runtime with respect to each case instance to provide and control access to the case instance associated content and associated actions. For a given case model in various embodiments the case model defines authorization permissions. For each of the case node in case hierarchical data model in various embodiments permissions are modeled in such a way that a which case role in b which state machine phase has c what permissions are defined.

In various embodiments with reference to defining permissions a case role may be a contained case role defined at that case node or a role defined at a parent level. Likewise a phase could be a phase defined at that particular case node or a phase defined at a parent case node.

In some embodiments permissions defining a users from which case role in b which phase has c what permissions with respect to metadata and content may be modeled.

In some embodiments permissions are modeled defining a users from which case role in b which phase can c add or remove users from that and other case roles.

In some embodiments permissions are modeled defining a users from which case role can b in what phase c can transition a case node from that phase to possible target phase. As an example users belonging to checklist item reviewer case role may in a case model be given permission to move a checklist item from pending to accepted or rejected . Similarly users in a checklist coordinator case role may be given permission to move a checklist item from an accepted or closed state to an open state.

In various embodiments permissions set for a case role with respect to a case node may be defined dynamically e.g. by reference to the respective phases states of a state machine associated with the case node. For example a case role may have a first set of permissions at a case node when the case node s state machine is in a first phase state and a second different set of permissions at the case node when the case node s state machine is in a second phase state. In some embodiments in each state one or more permissions associated with causing transitions to be made to one or more other states may be set based on case role. In some embodiments permission may be set by case role to indicate which case roles will be able to assign users to case roles and or to change such assignments.

In various embodiments hierarchical and or conditional e.g. by case node phase state permissions defined as described in connection with may be embodied in a case model definition. At runtime when a case instance is instantiated based on the case model definition data comprising the case model definition is parsed to determine and create runtime data structures reflecting the hierarchical data model of the case model and with respect to each node permissions are set by case role and as applicable conditioned on case node phase state . Permission related services associated with a runtime environment in which the case instance is realized are used in some embodiments to enforce hierarchical and or conditional e.g. by phase state permissions as defined in the case model definition. For example in some embodiments the ability of a given user to access and or perform requested operations with respect to metadata and or content to initiate transitions between states and or to assign or modify the assignment of users to case roles with respect to the case instance is determined by the runtime environment based on which if any case role s the user has been assigned with respect to the case instance and the permission s if any associated with such case role s with respect to an applicable case node in a current phase state of a state machine associated with the case node.

At each node of the hierarchical permission model one or more case roles are identified as having permissions at the corresponding case node and for each the permissions to be provided are indicated. For example at node a case role R is listed as having read R and update U permissions with respect to root case node . In various embodiments the case role R would by virtue of having read and update permissions set at the root case node have at least the same permissions at child case nodes of node which in this example would include all nodes given that case node is a root node. As illustrated by node of the hierarchical permissions model the case role R at some nodes may be given permissions beyond those assigned at the root node . In this example the case role R is assigned permissions to create read update or delete content and or metadata at case node corresponding to hierarchical permission model node .

In addition in the example shown in additional case roles such as R R R R and R are associated at permission model nodes and with corresponding case nodes of data model and at each permission model node the respective permissions set for each respective case role that has been associated are indicated.

In various embodiments a case role may have permission s defined at a parent case node and may have the same permission s with respect to child case nodes of the parent node by virtue of the permission s set for the case role at the parent node or instead permissions defined at the parent node may be overridden with a different set of permissions defined at the child node s for the same case role. In some embodiments a case role may be a contained case role and may have permission s only with respect to the case node at which it was assigned the permission s . For example a set of permissions defined for a case role at a specific case node may be contained in the sense that the permissions defined at that node do not extend beyond that node even if the case role exists and has a user assigned to it with respect to other case nodes.

In the example shown in the case role Home Inspector does not have any permission associated with root node or the sub tree beginning at node but instead only has permissions with respect to the sub tree comprising case nodes and . At Home Details case node the Home Inspector case role is granted read permission and with respect to Home Inspection Reports case node the Home Inspector case role is granted permission to create read update and delete .

While in the example shown in each case role has a statically define set of permissions at each case node in various embodiments such permissions may be defined in the case model as being conditioned on case node specific and or other contextual data such as a phase state of a state machine associated with the case node. In addition in various embodiments permissions other than with respect to metadata and or content may be defined such as permissions regarding the ability to add or modify case role assignments with respect to a case instance and or permissions to cause phase state transitions within a state machine of a case node. For example a case role may be defined to have permission to update content and or to make or change case role assignments when a case node is in a first state but not when the same case node is in a second state. Similarly within a case node and a particular phase state thereof a case role may be defined as having a permission to cause a state transition to a next phase state of the case node but only if one or more conditions defined in the case model have been satisfied with respect to the case node such as all required content has been uploaded all required metadata has been provided and or an action required to be taken by another user has been completed.

For example in the example shown in the user Harry is assigned the role Home Inspector . As a result a request by the user Harry to update a home inspection report document and or metadata associated with the Home Inspection Reports node of case instance of would be allowed see nodes and of and corresponding nodes and of whereas a request by the same user Harry to read financial metadata at case node of case instance of would not be allowed see nodes and of and corresponding nodes and of indicating the Home Inspector case role has no permission at the applicable case node .

In various embodiments a hierarchical permission model as described above in relation to case nodes comprising a hierarchical data container model of a case model may be applied to define permissions with respect to hierarchically related subparts of a document or other content object e.g. against hierarchical sections. In various embodiments the case model definition may define one or more document roles and for each node of a document hierarchy associated permissions may be defined for example which document roles can edit which section s within a single document.

In some embodiments permissions at the document level and or at the case node level may be determined dynamically e.g. based on a current phase of a state machine associated with the case node and or document and or other metadata or context.

In the example shown in the case leaf node comprises a document model definition in which a document hierarchy and associated hierarchical permissions model of a document associated with case leaf node are defined. As illustrated in each node in the document hierarchy is represented by nested rectangles on the left hand side of the figure. A document root node has associated with it a document permissions model root node which in this example defines permissions for three case roles. In various embodiments users assigned to the case roles indicated at document permissions model root node would be afforded with respect to all portions of an instance of document model the permissions indicated at document permissions model root node . In this example the document model defines two first level document sub nodes e.g. major sections corresponding to document permission model nodes and . Document permission model nodes and each define document level hierarchical permissions for the respective portions of the document to which each corresponds. Finally in this example the first level document sub node with which document permission model node is associated includes a child document sub node associated with document permission model node .

In the example shown in for example a case model developer may have defined the document hierarchy and permissions as shown in to ensure that only the user having the case document role of Loan Admin would be allowed to update content in a portion of the document hierarchy associated with permission model node while permitting a Loan Applicant to update content associated with permission model nodes and for example but not node . For example it might be desirable for a Loan Applicant to be allowed to update personal information of the loan applicant but not document content such as the loan amount review and or approval status etc.

As illustrated by the example shown in providing a case management system that provides for documents to be modeled as a document hierarchy and document permissions to be set at the level of individual document nodes e.g. sections subsections etc. of the document hierarchy enables a very fine degreed of control to be maintained over documents associated with case management instances.

In various embodiments a case model and associated document model including associated hierarchical permissions modeled at both the case and document level may be embodied in an XML or other structured data file. A case management system in various embodiments parses the definition file to create runtime data structures to be used to represent an instance of a case of a case type with which the definition is associated. Previously stored and or user or system supplied case instance data may be used in various embodiments to populate data values in an instance of such a data structure. A permissions engine in various embodiments reads instance data from the data structure to realize and enforce permissions as defined in the model definition. For example in the case of the definition shown in a user assigned to the role Loan Applicant with respect to a case instance based on the case model shown in would with respect to a document corresponding to case leaf node for that instance be afforded permissions to create update read and or delete content in a portion of the document that corresponds to document permissions node of .

In various embodiments hierarchical permissions at the document hierarchy level may be determined at least in part dynamically based on information such as a phase or state of a state machine associated with a case node with which the document is associated a phase or state of a state machine associated with the document and or a particular portion thereof and or other contextual data.

In various embodiments techniques disclosed herein may be used to provide highly granularly and in some embodiments dynamically determined control to be exercised over documents and other content objects associated with case management instances.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the technology is not limited to the details provided. There are many alternative ways of implementing the technology. The disclosed embodiments are illustrative and not restrictive.

