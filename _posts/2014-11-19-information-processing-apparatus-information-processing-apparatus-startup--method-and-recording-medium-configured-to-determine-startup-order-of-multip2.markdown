---

title: Information processing apparatus, information processing apparatus startup  method, and recording medium, configured to determine startup order of multiple modules
abstract: An information processing apparatus includes a startup condition acquisition unit that acquires a startup condition of multiple program modules, a determination unit that determines a startup order of the multiple program modules by multiple CPU cores, a startup unit that starts up the multiple program modules by executing an executable program module in accordance with the startup order by the multiple CPU cores, an updating unit that updates load information that indicates multiple CPU core load that fluctuates during a startup process, and a limitation unit that limits startup of the program module by the multiple CPU cores based on the load information updated by the updating unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563441&OS=09563441&RS=09563441
owner: RICOH COMPANY LTD.
number: 09563441
owner_city: Tokyo
owner_country: JP
publication_date: 20141119
---
This patent application is based on and claims priority pursuant to 35 U.S.C. 119 a to Japanese Patent Application No. 2013 240058 filed on Nov. 20 2013 in the Japan Patent Office the entire disclosure of which is hereby incorporated by reference herein.

The present invention relates to an information processing apparatus information processing apparatus startup method and a non transitory recording medium storing an information processing apparatus startup control program.

Multicore CPUs that include multiple CPU cores have been adopted in information processing apparatuses and have become widely used in information processing apparatuses embedded in various apparatuses embedded systems . In those information processing apparatuses it is desired to use the multicore CPU effectively and optimize various processes. Especially from the viewpoint of usability it is demanded that startup time of the information processing apparatus after turning the power on until becoming available to users be shortened.

Conventional start up methods of an operating system that speed up the startup by executing divided kernel images sequentially using the multicore CPU are known. However in the conventional startup method described above only the startup of the operating system before booting a kernel is speeded up and therefore the startup of the information processing apparatus could be delayed because the multicore CPU cannot be used effectively after booting the kernel.

On the other hand conventionally information processing apparatuses that speed up the boot time by executing multiple program modules in the startup process simultaneously using the multicore CPU after booting the kernel are known.

First for comparison the startup process of the information processing apparatus that does not execute multiple program modules simultaneously is described below.

In the startup process A shown in init SysVinit in this case program of UNIX is executed in the startup of the information processing apparatus. The init program performs the startup process of the information processing apparatus. The information processing apparatus is initialized by an init process based on the init program and multiple program modules of the startup process are executed sequentially. Consequently multiple program modules i.e. Syslog D Bus Avahi and Bluetooth in this case are executed sequentially.

In the startup process B shown in after starting up Upstart as an init program multiple program modules are executed. In this case for example if a program module related to Universal Serial Bus USB is executed before a USB device gets ready a certain amount of resource is consumed due to load of the program module into memory and other program modules are prevented from executing. In addition some program modules do not function properly if other program modules are not executed. To cope with this issue here startup of multiple program modules is controlled and program modules are executed using events that occur at the information processing apparatus a trigger. As a result it is possible to reduce resource conflict due to unnecessary program startup while some of program modules i.e. Avahi and Bluetooth in this case are executed simultaneously.

In a startup process C shown in after systemd is executed in Linux multiple program modules are executed. Here systemd is an init program developed from Upstart and systemd executes multiple program modules simultaneously and speeds up the startup time of the information processing apparatus. In this case Syslog D Bus Avahi and Bluetooth are executed simultaneously.

Example embodiments of the present invention provide a novel information processing apparatus that includes a startup condition acquisition unit that acquires a startup condition of multiple program modules a determination unit that determines a startup order of the multiple program modules by multiple CPU cores a startup unit that starts up the multiple program modules by executing an executable program module in accordance with the startup order by the multiple CPU cores an updating unit that updates load information that indicates multiple CPU core load that fluctuates during a startup process and a limitation unit that limits startup of the program module by the multiple CPU cores based on the load information updated by the updating unit.

Further example embodiments of the present invention provide startup of an information processing apparatus control method and a non transitory recording medium storing an information processing apparatus start up control program.

In describing preferred embodiments illustrated in the drawings specific terminology is employed for the sake of clarity. However the disclosure of this patent specification is not intended to be limited to the specific terminology so selected and it is to be understood that each specific element includes all technical equivalents that have the same function operate in a similar manner and achieve a similar result.

In the conventional technologies described above in starting up program modules for example memory to be used is allocated by a CPU core a program module is loaded from a storage device into memory and the program module is executed by the CPU core. As described above in starting up a program module information processing apparatus resources are consumed constituting a load on those resources. By contrast in systemd since multiple program modules that satisfy startup condition are executed simultaneously and indiscriminately resource conflict occurs sometimes. As a result it is possible that the startup process of the information processing apparatus is delayed since multiple CPU cores cannot execute multiple programs in the startup process smoothly. Especially in embedded systems in which resources are limited compared to servers that include ample amounts of memory and many CPU cores it is possible that resource conflict occurs easily and simultaneous execution of multiple program modules has a significant impact.

In the following embodiment an information processing apparatus that executes multiple program modules in the startup process smoothly using multiple CPU cores and keeps delay in the startup process within reasonable bounds is provided.

The information processing apparatus in this embodiment includes at least one multicore CPU. The multicore CPU is a multicore processor that includes multiple CPU cores processor cores and the multicore CPU executes multiple processes simultaneously using the multiple CPU cores. In case of starting up the information processing apparatus multiple program modules in the startup process of the information processing apparatus are executed by the multiple CPU cores in the multicore CPU and the information processing apparatus starts. Program modules are various programs executed in the startup process of the information processing apparatus and each program module is executed started up as a process by the CPU core.

As shown in in case of starting up the information processing apparatus a program that performs the startup process i.e. init program in this case is started up and multiple program modules from A to H of the startup process are executed by init process based on the init program. As shown by white right arrows the multiple program modules from A to H are executed in predetermined order by the three CPU cores.

In normal arrow black arrow indicates that there is dependency relation between the program module of the white arrow in its starting point and the program module of the white arrow in its endpoint. Here a dependency relation means a relationship between program modules such that one program module depends on another program module. For example there is a dependency relation between program modules if one program can be started up only on the condition that another program module is started or one program cannot be started up due to another program module.

The information processing apparatus in this embodiment controls executing starting up multiple program modules processes and executes at a maximum the same number of program modules as the number of CPU cores. The information processing apparatus also controls execution order of the multiple program modules based on the dependency relation among multiple program modules and limits executing program modules in accordance with multiple CPU core load. In this case while three program modules can be executed simultaneously by the three CPU core the program module C depends on the program module B and program modules D and E depend on the program module A. Therefore the program modules A and B are executed first.

After finishing starting up the program module A the program modules D and E become executable and the program modules D and E are executed along with the program module B. Subsequently after finishing starting up the program module B the program module C becomes executable and the program module C is executed along with the program modules D and E. After finishing starting up the program module E the program module F is executed in this case. In addition after finishing starting up the program module D the program module G is executed and after finishing starting up the program module C the program module H is executed.

As described above the information processing apparatus in this embodiment controls starting order of multiple program modules without executing multiple program modules simultaneously and indiscriminately. In addition the number of program modules executed simultaneously is limited in accordance with the state of the resources i.e. CPU resources in this case and the number of executed program modules is less than or equal to the number of the CPU cores. Consequently it is possible to control resource conflict and control the delay in the startup process due to resource conflict and that can speed up the startup time of the information processing apparatus.

An image forming apparatus that includes the information processing apparatus s described in detail below as an example. In this case the image forming apparatus is a multifunction peripheral MFP that includes multiple functions such as a facsimile printer copier and scanner.

As shown in the image forming apparatus as an example of the information processing apparatus includes an engine a board for expansion slots a controller and a USB interface I F . The engine is an engine of the image forming apparatus e.g. a printer engine a scanner engine or a facsimile engine. The board for expansion slots includes two Peripheral Component Interconnect PCI slots a and b and the board for expansion slots is connected to the controller . The controller controls the whole part of the image forming apparatus including the engine . The USB I F is connected to various USB devices.

Next the configuration of the controller is described below. A multicore CPU is a CPU that includes multiple CPU cores not shown in figures and controls each part of the image forming apparatus by executing an operating system OS and various programs. An Application Specific Integrated Circuit ASIC A performs various image processing under the control of the multicore CPU . For example the ASIC A converts print data received from an external apparatus into image data. A MEM memory is a line memory that stores the image data a main memory of the image forming apparatus and used as a work area for programs.

A hard disk drive HDD is a storage device that stores image data management information font data OS and programs etc. A Secure Digital SD is a SD memory card as a nonvolatile memory and inserted in a SD memory card slot. A LOGIC is an Integrated Circuit IC that generates a local bus signal from a PCI signal. A Read Only Memory ROM A and a ROM B store programs executed after the image forming apparatus is turned on such as Basic Input Output System BIOS .

A Nonvolatile Random Access Memory NVRAM is an example of a nonvolatile memory and stores settings etc. of the image forming apparatus . A slot A a slot B and a slot C are PCI slots. An ASIC B is connected to the ASIC A via PCI and the ASIC B controls a power supply of the image forming apparatus . A control panel is a user interface UI that includes a display and the control panel accepts user operation on the image forming apparatus .

In the startup process of the image forming apparatus after turning on the power supply a reset signal is input to the ASIC B and the ASIC B supplies electric power to each unit in the image forming apparatus by controlling the power supply. In addition the reset signal is input to each unit in the image forming apparatus . Subsequently the multicore CPU executes an initialization program stored in the ROM A and each unit in the image forming apparatus is initialized by the initialization program. After that the image forming apparatus starts up a generic OS using the multicore CPU and starts up various programs and applications.

As shown in the image forming apparatus includes a print application PRINT APL a copy application COPY APL a facsimile application FAX APL a scan application SCAN APL and a network application NETWORK APL . These applications display a UI screen for configuring execution condition of a job on the display of the control panel and user configuration is accepted by the control panel . Here the application is a program positioned on a layer higher than a generic OS and a sort of an embedded program.

A service Application Programming Interface API is an API to be used for reading a service on a service layer by the application described above. The service layer includes an Engine Control Service ECS a Memory Control Service MCS a cOntrol panel Control Service OCS a Facsimile Control Service FCS a Network Control Service NCS a System Control Service SCS and a System Resource Manager SRM .

A startup process module is a program that performs the startup process of the image forming apparatus init program and executes init process when the image forming apparatus is started as described above. The generic OS is an OS such as UNIX or Linux etc. An engine command I F is a programming interface used for communicating with the engine by the generic OS . A hardware indicates hardware resources in the controller e.g. the multicore CPU and the MEM etc. .

As shown in after the startup process module starts a target list and a startup script are acquired by the startup process module as a function implementation unit of the image forming apparatus . The target list and the startup script are stored in a file system in the HDD preliminarily and the startup process module performs the startup process of the image forming apparatus based on the target list and the startup script read from the HDD .

Not only applications but also various program modules are described in the target list . In addition only target program modules executed finally are described in the target list . Therefore even if a program module executed for starting up the target program modules preliminarily exists the program module is not described in the target list .

In the startup script shown in detailed information on multiple program modules for the startup process of the image forming apparatus is described and the startup script is created preliminarily for each of multiple program modules. In addition startup condition for each program modules is described. The startup condition is a condition for starting up each of the program modules execution condition and various conditions are configured in accordance with a type of the program module. The HDD as a storing unit stores the startup script and startup conditions for each of multiple program modules included in the startup script .

As shown in the startup script i.e. somedaemon.script in this case is a text that the startup process module determines startup operation of program modules and starts up the program modules. For example in unit section Description specifies a name of a program module to be executed. Similarly Requires indicates preliminary condition for executing a program module an example of the startup condition . In this case the program module is executed under the condition of mounting somedir . If the program module is executed under the condition of execution of another program module that is described in Requires .

 Effect indicates an event of the image forming apparatus generated by executing the startup script and rules postcondition of a program module. Effect created var XXX indicates that a file XXX is created in directory var . If the event in Effect is required in Requires in other startup script there is dependency relation among program modules. For example if Requires in the startup script of a program module M considers an event in Effect in the startup script of a program module N as a startup condition precondition the program module M depend on the program module N. As described above the startup process module determines and specifies the dependency relation among program modules based on the startup script .

In ExecStart in service section a program module to be executed and location where it is stored path are described and shell script is described in some cases. In the startup process of the image forming apparatus shown in the startup process module executes program modules based on the startup scripts of multiple program modules and starts up multiple program modules.

Main in the startup process module is a main routine of the startup process module . The main manages the whole part of the process performed by the startup process module instructs the CPU core to execute the program module and starts up the program module. By executing the startup process module the main acquires the target list and the startup script from the HDD and executes each program module based on a processing result of a subroutine shown below.

A startup script analyzer acquires the startup script needed for executing target program modules based on the target list . The startup script includes the startup script for one or more program modules needed for executing target program modules in addition to the startup script of target program modules.

The startup script is stored in the MEM as the acquired data internal data and analyzed by the startup script analyzer . More specifically based on the startup condition of a program module described in the startup script the startup script analyzer specifies if it is needed to execute another program module for executing the program module. Otherwise the startup script analyzer specifies if it is needed to start up a device including hardware in the image forming apparatus for executing the program module.

As described above the startup script analyzer functions as a startup condition acquisition unit and a dependency relation specifying unit. In the startup process of the image forming apparatus the startup script analyzer acquires the startup conditions for multiple program modules from the startup script and specifies the dependency relation among multiple program modules base on the startup conditions. In addition the startup script analyzer specifies a resource to be monitored in the image forming apparatus based on the startup condition of the program modules.

A program state monitor monitors state of multiple program modules in the startup process of the image forming apparatus. For example it is assumed that the startup script analyzer specifies that it is needed to execute the program module Q for executing program module P and execute the program module R for executing the program module Q. In this case in order to execute the program module P the program state monitor monitors execution state of the program modules Q and R and determines whether or not it is finished to execute the program modules Q and R.

A device monitor monitors a device needed for executing a program module in the image forming apparatus . For example if the startup script analyzer specifies that it is needed to mount the HDD for executing a program module the device monitor monitors the HDD and determines whether or not the HDD is mounted. If the startup script analyzer specifies that it is needed to turn the USB I F into ready state for executing a program module the device monitor monitors the USB I F and determines whether or not the USB I F is turned into ready state.

A resource monitor monitors resources related to startup of program modules in the image forming apparatus . For example if creation of a file is described as the startup condition in the startup script the startup script analyzer specifies that the MEM where the file is stored is the resource to be monitored. In this case the resource monitor monitors whether or not the file is stored in the MEM .

Next procedure for executing two applications App and App as the target program modules shown in by the startup process module is described below.

In arrows indicate dependency relation in starting up program modules. The program module at the endpoint of an arrow is executed under the condition of executing the program module at the starting point of the arrow or satisfying state of the device at the starting point of the arrow.

As shown in an event as a startup condition precondition of a program module at the endpoint of the arrow is described on some arrows. The startup condition corresponds to descriptions Effect and Requires in the startup script . For example description create var XXX on the arrow from KMM to SCS indicates that a file XXX is created in director var by executing KMM. SCS becomes executable under the condition of create var XXX . In addition attached id XXX is described on the arrow from usbd. Here attached indicates that the USB driver in the generic OS becomes valid by executing usbd and the USB driver is connected to a USB device. In addition id indicates a port ID and means that which USB port is connected to the USB device. Lastly OCS and a fingerprint authentication module become executable under the condition of attached id XXX .

In case of connecting a USB device to the USB I F the executed usbd detects that the USB device is connected to the USB and reports to the device monitor about that. Otherwise the device monitor monitors the usbd state and detects that the USB device is connected. Consequently the device monitor determines that the USB device turns into ready state and becomes usable. If a control panel device as the USB device is connected to the USB I F and the startup condition of OCS is satisfied the main in the startup process module executes OCS that manages the control panel device. If a fingerprint authentication device as the USB device is connected to the USB I F and the startup condition of the fingerprint authentication module is satisfied the main executes the fingerprint authentication module.

In in accordance with the dependency relation among program modules including the dependency relation described above it is needed to execute SCS NCS and OCS for executing App and it is needed to execute KMM for executing SCS. In addition it is needed to execute usbd for executing OCS and to turn the USB I F into ready state for executing usbd. By contrast App becomes executable under the condition of mounting HDD . Therefore App is executed after it is determined that the HDD is mounted by the device monitor .

In the startup process of the image forming apparatus the startup script analyzer in the startup process module functions as a determination unit that determines order of starting up multiple program modules startup order . The startup script analyzer specifies the dependency relation among multiple program modules base on the startup condition and determines the order of executing multiple program modules based on the specified dependency relation.

More specifically based on the startup condition of a program module described in the startup script the startup script analyzer specifies a program module or device to be executed preliminarily in order to start up the program module. Consequently one or more other program modules second program module needed for executing a program module first program module are specified.

In this case the startup script analyzer acquires a name of a program module from the target list in accordance with priority acquires the startup script of the target program module and checks if the precondition as the startup condition exists. If the precondition exists the startup script analyzer specifies the program module to be executed in order to satisfy the precondition based on the startup script . In addition the startup script analyzer searches for the program module whose postcondition is the event requested by the precondition through the startup script . As described above by tracing the precondition and the postcondition sequentially all program modules needed for executing the target program modules App and App are specified and the startup order of the multiple program modules to be executed is determined.

In the startup process of the image forming apparatus the main in the startup process module functions as a startup unit startup controller that controls the startup of program modules and starts up multiple program modules. In accordance with the startup order determined by the startup scrip analyzer the main executes the executable program modules that satisfy the startup condition sequentially using the multiple CPU cores. Consequently the multiple program modules to be executed are executed sequentially in accordance with the startup order.

In the arrow heading down to right indicates that the CPU core is occupied by a process of the program modules and the program module is executing. It should be noted that the endpoint of arrows does not always indicate the end of the process and some actual processes might occupy the CPU core intermittently depending on its operation and processing.

As shown in based on the dependency relation described above shown in the startup script analyzer determines that KMM and NCS is to be executed first in order to execute App and it is needed that the USB I F is in ready state. As a result the main executes KMM and NCS using multiple CPU cores and starts executing KMM and NCS in t. Simultaneously the program state monitor monitors the execution state of KMM and NCS. In addition the device monitor monitors the state of the USB I F and determines that the USB I F is turned into ready state in t. Subsequently if the program state monitor determines that it is finished to start up KMM the main starts executing usbd in t.

When it is finished to start up KMM load on multiple CPU cores decreases to the state that next program module can be executed load state and load returns to its original state after starting executing usbd. Load on multiple CPU cores changes in accordance with finishing executing program modules and starting executing program modules.

If the program state monitor determines that it is finished to start up NCS the main starts executing SCS in t. Subsequently if the program state monitor determines that it is finished to starting up usbd the main starts executing OCS in t. In addition the device monitor monitors HDD as the device needed for executing App and determines that the HDD is mounted after the HDD is turned into ready state in t.

Next if the program state monitor determines that it is finished to start up SCS and OCS the main starts executing App after its startup condition is satisfied in t. Lastly if the program state monitor determines that it is finished to start up App the main starts executing App after its startup condition is satisfied in t. After finishing starting up App in t it is finished to execute all target program modules described in the target list .

In the startup process described above the image forming apparatus adjust execution of program modules by the multiple CPU cores based on load on multiple CPU cores and usage rate of memory. Consequently resource conflict due to simultaneous execution of multiple program modules can be reduced. The process of adjusting startup of program modules is a complicated process for the startup process module . Therefore the generic OS kernel in the image forming apparatus includes an adjuster for startup of program modules startup adjustment module and provides the function of the startup adjustment unit. By performing the startup adjustment process by the generic OS that includes information on resources in the image forming apparatus it is possible to determine startup adjustment and perform the startup adjustment process quickly. When the main in the startup process module issues a system call the startup adjuster in the generic OS is called up and performs the process of adjusting startup of program modules.

As shown in the adjuster includes a load information updater that updates load information on multiple CPU cores a startup limiter that limits startup of program modules a usage rate updater that updates memory activity and a usage rate regulator that regulates memory usage.

The load information updater is an acquisition unit that acquires load information that indicates multiple CPU core load. In addition the load information updater is an updating unit that updates the load information. The load information indicates load on multiple CPU cores that execute program modules that fluctuates in response to multiple CPU core load in the startup process of the image forming apparatus . The load information updater updates the load information on the multiple CPU cores repeatedly in starting up the multiple program modules by the multiple CPU cores. In the startup process of the image forming apparatus the load information is updated at predetermined timing by the load information updater and the latest load information is acquired.

For example the load information consists of information on the number of CPU cores that execute program modules activity of the multiple CPU cores and load average. In this case the load information is load average and the load information is calculated and acquired by the load information updater . The load average is an index that indicates amount of load on a CPU provided by UNIX like OS and the load average reflects the average number of program modules processes waiting for execution. That is the load average indicates the average approximate number of program modules that cannot be executed since other program modules are currently executed. In general UNIX like OS for example the load average can be calculated by calculating an average number of entries in a queue where program modules to be executed are buffered execution queue in the past.

By contrast in the multicore CPU that includes multiple CPU cores there are queues for each of CPU cores. Therefore the total number of tasks executed by the multiple CPU cores is acquired by summing the number of tasks currently executed in the queue associated with each of CPU cores and an average of the multiple total numbers is calculated. This average is considered as the load average and activity of multiple CPU cores can be calculated by dividing the load average by the number of CPU cores.

In some cases the startup process of the image forming apparatus finishes in several seconds. In that case in order to figure out the change of the load average during the startup process it is needed to acquire the load average in short period of time than ever before. To cope with this issue the load information updater in this embodiment calculates the load average during predetermined time approximate to 100 msec e.g. from 50 msec to 150 msec . For example the total number of program modules executed by the multiple CPU cores at every 10 msec and the average of ten total numbers is calculated. Consequently the load average during 100 msec can be calculated.

The load average calculated as described above varies in accordance with amount of processes that the CPU resource is requested throughput and reflects the amount of processes that the CPU resource is requested in case the number of processes that can be processed by one CPU core is considered as 1. For example if one program module keeps occupying one CPU core the load average approaches to 1 gradually. If two program modules keep occupying two CPU cores the load average approaches to 2 gradually. In case of executing two program modules by one CPU core if one program occupies the CPU core and the other program modules is waiting for being executed the load average approached to 2 gradually. In addition if the load average becomes smaller by 1 approximately than the number of CPU cores that the image forming apparatus includes it is determined that the CPU resource has been released.

The startup limiter is a limitation unit that limits startup execution of program modules by the multiple CPU cores based on the load average as an example of load information. The startup adjuster as the adjusting unit adjusts starting up program modules by the multiple CPU cores by instructing the startup limiter to limit the number of program modules executed by the multiple CPU cores. Here the startup limiter includes a determination unit that determines whether or not startup of program modules by the multiple CPU cores is limited based on the load average and the startup limiter limits startup of program modules by the multiple CPU cores based on the determination result provided by the determination unit.

More specifically the determination unit in the startup limiter determines whether or not next program module new program module can be executed by the multiple CPU cores that execute program modules based on the load average updated by the load information updater . Consequently it is determined whether or not startup of the new program module is limited and the startup limiter limits starting up the next program module by the multiple CPU cores based on the determination result provided by the determination unit. The next program module is one or more executable program modules that will be executed after the program module currently executed and specified based on startup order of multiple program modules.

In addition the startup limiter includes a stop unit that stops executing the next program module based on the determination result provided by the determination unit and a release unit that restarts executing the next program module. The stop unit in the startup limiter stops executing the next program module temporarily if the determination unit determines that the next program module is not executable. After stopping executing the next program module the release unit in the startup limiter restarts executing the next program module by the stop unit if the determination unit determines that the next program module is executable. Consequently the release unit instructs the multiple CPU cores to execute the next program module.

The usage rate updater is an acquisition unit that acquires memory usage used by the multiple CPU cores and an updating unit that updates the memory usage. The memory is a main memory i.e. MEM in this case used by the multiple CPU cores that executes program modules that data is read written and the memory usage indicates memory usage capacity. The memory usage can be calculated by dividing memory capacity in use WA by total usable capacity of memory WB WA WB and the memory usage varies in accordance with amount of used memory. Based on two capacities WA and WB the usage rate updater calculates and acquires the memory usage. In addition the usage rate updater updates the memory usage repeatedly while the multiple CPU cores execute multiple program modules. During the startup process of the image forming apparatus the memory usage is updated at predetermine timing by the usage rate updater and the latest memory usage is acquired.

The usage rate regulator as the regulation unit limits starting up executing program modules by the multiple CPU cores base on the memory usage and the usage rate regulator limits usage of memory by the multiple CPU cores. Therefore the usage rate regulator is also a limit unit that limits starting up program modules and the usage rate regulator limits startup of program modules if the memory usage rate exceeds predetermined value. The startup adjuster adjust startup of program modules by the multiple CPU cores and the memory usage by instructing the usage rate regulator to limit the number of program modules executed by the multiple CPU cores.

In this case the usage rate regulator includes a determination unit that determines whether or not startup of program modules by the multiple CPU cores is limited based on the memory usage and the usage rate regulator limits startup of program modules by the multiple CPU cores based on the determination result provided by the determination unit. If the determination unit determines that the startup of program modules is limited the usage rate regulator stops executing new program modules.

Next the startup process of multiple program modules is described below with reference to multiple flowcharts.

As shown in first the main in the startup process module reads the target list stored in the HDD and the startup script of the multiple program modules in S and stores the target list and the startup script in the MEM . Subsequently after acquiring the startup condition of the program module described in the startup script the startup script analyzer specifies a device in the image forming apparatus related to the startup condition of the program module based on the startup condition and extracts the device to he monitored. The extracted device is registered in the monitored device list in the MEM as the device to be monitored in S. The device monitor monitors the device registered in the monitored device list and determines the state of each device.

In addition based on the startup condition of the program module the startup script analyzer specifies resource in the image forming apparatus related to the startup of the program module and extracts resource to be monitored. The extracted resource is registered in the monitored resource list in the MEM as the resource to be monitored in S. The resource monitor monitors the resource registered in the monitored resource list and determines the state of each resource. Subsequently the startup process module performs the startup process of the program module in S.

As shown in first the main in the startup process module acquires a name of a program module from the target list in accordance with the priority in S. The startup script analyzer acquires the startup script of the target program module corresponding to the name of the program module and the startup script analyzer acquires the startup condition of the target program module described in the startup script .

In addition based on the startup condition of the target program module the startup script determines whether or not it is needed to execute another program module for executing the target program module. After the determination if it is determined that it is needed to execute the other program module the startup script analyzer determines one or more program modules needed for executing the target program module. In that case the startup script analyzer acquires the startup script and startup condition for each program module and specifies all program modules to be executed based on the startup condition.

If there are multiple program modules to be executed based on the acquired startup condition of the multiple program modules the startup script analyzer determines the startup order of the multiple program modules using the multiple CPU cores. Subsequently the main instructs the multiple CPU cores to execute the executable program modules in accordance with the startup order and starts up the multiple program modules sequentially. In that case first the main specifies the program module to be executed by the CPU core based on the startup order in S.

Next in order to determine whether or not it is needed to limit startup of the specified program module the main issues the system call described above system call for waiting for resource condition in S. The startup adjuster in the generic OS shown in is called by the system call and it is determined whether or not startup of the program module is limited. If resources in the image forming apparatus CPU resources and memory resources satisfy predetermined resource conditions it is unnecessary to limit startup of program modules so it is determined that startup of program module is not limited. By contrast if the resources do not satisfy the resource condition it is needed to limit startup of program modules so it is determined that startup of program module is limited. The startup adjuster stops executing the new program module until the resources satisfy the resource conditions and it is unnecessary to limit startup of program modules.

In the present embodiment the user preliminarily configures the image forming apparatus whether or not the load average is checked and the memory is checked. If either one of checking processes or both checking processes are to be performed the startup adjuster performs a process of waiting for resource condition and adjusts startup of program modules. In that case based on the load average the startup limiter in the startup adjuster determines whether or not the multiple CPU cores satisfy the resource conditions requested of the CPU resources of the image forming apparatus . In addition based on the memory usage the usage rate regulator in the startup adjuster determines whether or not the memory satisfies the resource conditions requested of the memory resource in the image forming apparatus .

As shown in first based on the user configuration the startup adjuster determines whether or not the load average as load information on multiple CPU cores is checked in S. After the determination if the load average is not checked NO in S the startup adjuster determines whether or not the memory is checked base on the user configuration in S. If the memory is not checked NO in S the startup adjuster finishes this process.

If the load average is checked YES in S the load information updater acquires the load average of the multiple CPU cores and the startup limiter determines whether or not the load average is smaller than a predetermined value in S. If the load average is smaller than the predetermined value YES in S the startup limiter determines that it is not limited to execute a new program module by the multiple CPU cores. An upper limit of the load average that a new program module can be executed smoothly by the multiple CPU cores is set to the predetermined value of the load average preliminarily e.g. a predetermined value smaller than the number of the CPU cores is set.

If the load average is larger than the predetermined value NO in S the startup limiter determines that it is limited to execute a new program module by the multiple CPU cores and the startup limiter instructs the startup process module to transition to sleep mode state of waiting for executing program module . Consequently the startup process module sleeps and it is limited to execute a new program module. This sleep of the startup process module corresponds to sleep waiting that the load average gets smaller than the predetermined value sleep waiting for load average condition in S. The startup limiter stops executing a new program module by the startup process module .

Next if the memory is checked YES in S the usage rate updater acquires the memory usage and the usage rate regulator determines whether or not the memory usage is smaller than a predetermined value in S. If the memory usage is smaller than the predetermined value YES in S the usage rate regulator determines that it is not limited to execute a new program module and to use memory by the multiple CPU cores. An upper limit of memory usage that a new program module can be executed smoothly by the multiple CPU cores is set to the predetermined value of the memory usage preliminarily.

If the memory usage is larger than the predetermined value NO in S the usage rate regulator determines that it is limited to execute a new program module and it is regulated to use memory by the multiple CPU cores and the usage rate regulator instructs the startup process module to transition to sleep mode. Consequently the startup process module sleeps and it is limited to execute a new program module and it is regulated to use memory. This sleep of the startup process module corresponds to sleep waiting that the memory usage gets smaller than the predetermined value sleep waiting for memory usage condition in S. The usage rate regulator stops executing a new program module by the startup process module and executing a new program module by the CPU core.

If the startup adjuster does not instruct the startup process module to transition to sleep mode the startup process module resumes starting up a program module shown in . By contrast if the startup adjuster instructs the startup process module to transition to sleep mode the startup process module is kept in sleep mode until the load average and the memory usage get smaller than the predetermined value. In that case the startup adjuster updates the load average and the memory usage at predetermined time interval and determines whether or not the sleep mode of the startup process module is released. The determination by the startup adjuster can be performed by an interrupt handler read at predetermined time interval using a hardware tinier similarly.

As shown in first the load information updater updates information used for calculating the load average calculates the load average newly and update the load average of the multiple CPU cores in S. Subsequently based on the load average updated by the load information updater the startup limiter determines whether or not it is limited to execute a new program module.

If the load average is larger than the predetermined value NO in S the startup limiter determines that it is not possible to execute a new program module and it is limited to execute a new program module. Accordingly if the startup process module is in sleep mode waiting on the load average the startup limiter maintains sleep mode waiting on the load average. If the load average is smaller than the predetermined value YES in S the startup limiter determines that it is possible to execute a new program module and it is not limited to execute the new program module. Accordingly if the startup process module is in sleep mode waiting on the load average the startup limiter releases sleep mode waiting on the load average of the startup process module in S and the startup limiter releases the new program module from stopping.

Next the usage rate updater updates information used for calculating the memory usage calculates the memory usage newly and updates the memory usage that the multiple CPU core uses in S. Subsequently based on the memory usage updated by the usage rate updater the usage rate regulator determines whether or not it is limited to execute a new program module 

If the memory usage is larger than the predetermined value NO in S the usage rate regulator determines that it is limited to execute a new program module. Accordingly if the startup process module is in the sleep mode waiting on the memory usage rate the usage rate regulator maintains the sleep mode waiting on the memory usage rate of the startup process module . If the memory usage is smaller than the predetermined value YES in S the usage rate regulator determines that it is not limited to execute a new program module. Accordingly if the startup process module is in the sleep mode waiting on the memory usage rate the usage rate regulator releases the sleep mode waiting on the memory usage rate of the startup process module in S and the startup limiter releases the new program module from stopping.

The startup adjuster repeats the steps described above at predetermined time interval until all sleep modes of the startup process module are exited. Consequently the startup adjuster limits executing a new program module and adjusts executing program modules by the multiple CPU cores. If all sleep modes of the startup process module are exited the startup process module resumes executing program modules. Accordingly as shown in the main in the startup process module executes the program module specified by the CPU core base on the startup order in S and starts up the program module.

The program module executed by the CPU core is the executable program module that has not been executed yet but satisfies the startup condition. If the startup condition of the program module is not satisfied the main instructs the CPU core to execute the program module after the startup condition of the program module is satisfied. In addition the program state monitor also registers the program module executed by the CPU core in the list of executed programs in the MEM . Therefore the program module that the main instructs the CPU core to execute is not currently executed by the CPU core and has not been registered in the list of executed programs yet.

Next the main executes all program modules to be executed and determines whether or not any program module to be executed is left in S. If there is still a program module to be executed NO in S the main repeats the steps described above from S to S until all program modules to be executed are executed. If it is finished to execute all program modules to he executed YES in S the main determines whether or not it is finished to execute all target program module described in the target list in S. If it is not finished to execute all target program modules NO in S the main repeats the steps described above from S to S .

Between the start of execution and the end of execution of the multiple program modules a system call waiting for resource condition is issued each time when a new program module is executed in S. Accordingly based on the latest load average updated by the load information updater the startup limiter determines whether or not it is limited executing a new program module by the multiple CPU cores. After the determination if it is determined that it is limited executing a new program module the startup limiter limits executing the new program module by the multiple CPU cores. In addition based on the latest memory usage updated by the usage rate updater the usage rate regulator determines whether or not it is limited executing a new program module by the multiple CPU cores. After the determination if it is determined that it is limited executing a new program module the usage rate regulator limits executing the new program module by the multiple CPU cores and regulates memory usage by the multiple CPU cores.

As a result it is possible to adjust startup of the program modules and execute multiple program modules in accordance with the startup order. After finishing executing all target program modules YES in S the startup process module finishes the process of starting up multiple program modules. In addition by executing all target program modules described in the target list the startup process of the image forming apparatus finishes and the image forming apparatus starts operating.

As described above in the image forming apparatus and the startup method of the image forming apparatus in this embodiment it is possible to reduce the resource conflict during the startup process of the image forming apparatus and utilize the multiple CPU cores in the multicore CPU effectively. In addition it is possible to execute multiple program modules of the startup process by the multiple CPU cores smoothly and that can reduce delay of the startup of the image forming apparatus . It is also possible to cut the startup time of the image forming apparatus and start up the image forming apparatus quickly. By limiting the execution of the program modules based on the load average updated by the load information updater it is possible to execute the startup process of the image forming apparatus smoothly in accordance with load variation of multiple CPU cores during the startup process appropriately.

The image forming apparatus limits executing program modules and regulates using memory by the multiple CPU cores based on the memory usage. Therefore it is possible to reduce the conflict of the memory used by the multiple CPU cores and execute multiple program modules smoothly. As a result it is possible to reduce delay in the startup of the image forming apparatus much more assuredly. Especially since the memory capacity is Limited in embedded systems it is possible to make a profound effect by limiting the startup of program modules based on the memory usage. If it is configured to perform swapping the startup of multiple program modules can be delayed substantially in some cases since the HDD is accessed due to the swapping. To cope with this issue it is possible to reduce the swapping and the delay in the startup of the multiple program modules by limiting the startup of the program modules based on the memory usage.

In case of limiting the startup of the program modules it is possible to remove the limitation on the startup of the program modules if the predetermined time the load average or the memory usage is smaller than the predetermined value. Consequently even if the load average or the memory usage vary intensively it is possible to execute the multiple program modules smoothly in accordance with the multiple CPU cores and the state of the memory precisely. It is also possible to execute the multiple program modules in the range that the load average does not exceed the number of CPU cores.

If it is specified that a predetermined program module be executed by a predetermined CPU core by configuring the image forming apparatus it is possible to limit the startup of the program modules based on the load average of each of the CPU cores. In this case the load information updater acquires and updates the load average of the predetermined CPU core specified to execute the predetermined program module. The startup limiter determines whether or not is limited to execute the predetermined program module based on the updated load average of the predetermined CPU core and the startup limiter limits the startup of the predetermined program module by the predetermined CPU core. Consequently it is possible to execute the predetermined program module by the predetermined CPU core smoothly.

The CPU core executes not only the program modules but also a thread generated during the startup process of the image forming apparatus . Therefore the load average and the memory usage of the multiple CPU cores can vary and the resources can conflict due to the generation of the thread too. Thus it is preferable to limit the generation of the thread in order to reduce resource conflict. In the image forming apparatus it is limited to generate the thread by user configuration just like the limitation on the startup of the program modules.

Here as shown in if it is requested to generate a thread during the startup of the multiple program modules in the startup process first a system call waiting for a resource condition is issued in S and a process of waiting for the resource condition starts. Since the process of waiting for the resource condition is similar to the processes shown in described before description for the process of waiting for the resource condition is omitted.

In this regard in the process of waiting for the resource condition it is determined whether or not it is limited to generate a new thread based on each of the load average and the memory usage. As a result if it is determined to limit the generation of the new thread a thread generator not shown in figures included in the image forming apparatus transitions to sleep mode. Consequently in the startup process of the image forming apparatus it is limited that the thread generator generates the new thread. In case of releasing the sleep mode of the thread generator based on each of the load average and the memory usage the thread generator performs a thread generating process and the new thread is generated in S.

The image forming apparatus includes a unit that performs processes regarding the generation of a thread described above e.g. a unit that limits the generation of a thread during the startup process based on the load average updated by the load information updater . In addition the image forming apparatus includes a unit that limits the generation of a thread during the startup process based on the memory usage updated by the usage rate updater . The thread generation limitation units described above limit the generation of threads along with executing the program modules by the multiple CPU cores. By limiting the generation of threads it is possible to reduce the resource conflict and execute the multiple program modules smoothly.

The image forming apparatus that includes the multicore CPU is described above. However the image forming apparatus can include multiple single core CPUs instead of the multicore CPU . The single core CPU includes one CPU core and the CPU cores of the multiple single core CPUs functions similar to the multiple CPU cores in the multicore CPU . In this case the image forming apparatus processes information and executes multiple program modules using the CPU cores of the multiple single core CPUs.

In the embodiment described above it is limited to execute the program module based on both the load average and the memory usage. However it is possible to limit the startup of the program module based on either the load average or the memory usage. That is it is possible to limit the startup of the program module based on the load average only or it is possible to limit the startup of the program module based the memory usage only.

It is possible to implement the units in the image forming apparatus described above by executing a program by a computer in the image forming apparatus as an information processing apparatus. The information processing apparatus is various apparatuses that process information e.g. a personal computer a server and an embedded system. The information processing apparatus is embedded in various apparatuses such as an image processing apparatus an image capturing apparatus a display apparatus an office apparatus a communication apparatus a portable apparatus an information processing device and a communication device as the embedded system.

Numerous additional modifications and variations are possible in light of the above teachings. It is therefore to be understood that within the scope of the appended claims the disclosure of this patent specification may be practiced otherwise than as specifically described herein. For example it is possible that the image forming apparatus includes the document holding determination unit only. Alternatively it is possible that the image forming apparatus includes the document holding determination unit and any one of or any combination of the rangefinder the user authentication unit the recovery processor the print job acquisition unit the auxiliary parameter setting unit and the facsimile number setting unit.

As can be appreciated by those skilled in the computer arts this invention may be implemented as convenient using a conventional general purpose digital computer programmed according to the teachings of the present specification. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software arts. The present invention may also be implemented by the preparation of application specific integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the relevant art.

Each of the functions of the described embodiments may be implemented by one or more processing circuits. A processing circuit includes a programmed processor as a processor includes circuitry. A processing circuit also includes devices such as an application specific integrated circuit ASIC and conventional circuit components arranged to perform the recited functions.

