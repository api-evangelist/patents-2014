---

title: Providing data volume recovery access in a distributed data store to multiple recovery agents
abstract: A distributed data store may provide volume recovery access to multiple recovery agents. A data volume may be maintained for a storage client at the distributed data store. Write access to the data volume may be granted according to a single writer consistency scheme. When a recovery event is detected for the data volume, the data volume may be made available to multiple recovery agents that may perform respective recovery operations. Upon first completion of a recovery operation for the data volume, granting access to the data volume according to the single writer consistency scheme may be resumed. In some embodiments, the distributed data store may be a log-structured data store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424140&OS=09424140&RS=09424140
owner: Amazon Technologies, Inc.
number: 09424140
owner_city: Reno
owner_country: US
publication_date: 20140820
---
Data storage systems have implemented many different storage schemes for efficiently and reliability persisting data. Storage schemes implemented on a distributed system architecture are often deployed when storage system client applications such as database systems require greater availability of the data persisted in the data storage system. Common solutions to making data available including storing one or more versions or replicas of data on multiple storage nodes. However by increasing the number of versions or replicas the complexity and operational costs for maintaining a consistent view of persisted data increases. Synchronization protocols are used to ensure consistency when changes are made to the versions or replicas of data across the storage node. However typical synchronization protocols often increase the time and resources required to perform the change consistently. The costs to maintain a consistent view in the data storage system can dull the very advantages of implementing the distributed storage system.

For example consistency schemes may complicate maintenance or support tasks for storage systems. Maintenance functions such as recovering a data volume may need access to the data volume in order to perform. However consistency schemes may limit the ability of a maintenance function to perform if for instance another function or the storage client itself is accessing the data volume. Delaying or inhibiting performance of maintenance and support tasks may reduce overall data storage performance and reliability.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . The words include including and includes indicate open ended relationships and therefore mean including but not limited to. Similarly the words have having and has also indicate open ended relationships and thus mean having but not limited to. The terms first second third and so forth as used herein are used as labels for nouns that they precede and do not imply any type of ordering e.g. spatial temporal logical etc. unless such an ordering is otherwise explicitly indicated.

Various components may be described as configured to perform a task or tasks. In such contexts configured to is a broad recitation generally meaning having structure that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently performing that task e.g. a computer system may be configured to perform operations even when the operations are not currently being performed . In some contexts configured to may be a broad recitation of structure generally meaning having circuitry that performs the task or tasks during operation. As such the component can be configured to perform the task even when the component is not currently on. In general the circuitry that forms the structure corresponding to configured to may include hardware circuits.

Various components may be described as performing a task or tasks for convenience in the description. Such descriptions should be interpreted as including the phrase configured to. Reciting a component that is configured to perform one or more tasks is expressly intended not to invoke 35 U.S.C. 112 paragraph six interpretation for that component.

 Based On. As used herein this term is used to describe one or more factors that affect a determination. This term does not foreclose additional factors that may affect a determination. That is a determination may be solely based on those factors or based at least in part on those factors. Consider the phrase determine A based on B. While B may be a factor that affects the determination of A such a phrase does not foreclose the determination of A from also being based on C. In other instances A may be determined based solely on B.

The scope of the present disclosure includes any feature or combination of features disclosed herein either explicitly or implicitly or any generalization thereof whether or not it mitigates any or all of the problems addressed herein. Accordingly new claims may be formulated during prosecution of this application or an application claiming priority thereto to any such combination of features. In particular with reference to the appended claims features from dependent claims may be combined with those of the independent claims and features from respective independent claims may be combined in any appropriate manner and not merely in the specific combinations enumerated in the appended claims.

Various embodiments of providing volume recovery access in a distributed data store for multiple recovery agents are described herein. A distributed data store may provide storage for various storage clients. These storage clients may include many different types of applications or services which rely upon the distributed data store to provide reliable and consistent access to stored data which may be referred to herein as a data volume . For example a database system such as described below with regard to may utilize a distributed data store as the backend storage for a database. According to the needs of applications and services that rely upon the distributed data store a distributed data store may be configured to provide varying levels of access to a data volume. For instance some applications such as the database system referred to above may require a high reading and or writing workload when accessing the data. In such a scenario multiple different components may provide read access to the data volume so that the database application may handle many different requests to read data from the storage volume. Thus access for these reading components may need to be provided. Similarly a high writing workload making changes to the database may need to be accounted for by providing a low latency consistency scheme to allow write access in a way that does not hamper the performance of the writing workload.

In order to accommodate the reading and or writing workloads for storage clients a distributed data store may implement a consistency scheme or mechanism. For example a single writer consistency scheme may be implemented in some embodiments to provide a mutually exclusive right to a particular a storage client. This writing client may acquire some kind of lease or authorization from the distributed data store that allows the writing client to perform writes with respect to a particular data volume. A single writer consistency scheme may allow for greater writing workloads as the number of steps to synchronize writes to the distributed data store may be significantly less for one writer than if multiple storage clients were allowed write access.

However in some embodiments if a writing client fails crashes stops writing or otherwise becomes unavailable causing a data volume to be in an inconsistent or possibly inconsistent state other support systems or maintenance operations may be unable to continue performing without performing some type of recovery operation on the data volume. For example backup operations may be performed on a data volume storing changes to a data volume in a separate backup data store. If the storage client crashes the backup operation may be unable to continue backing up data as it may not be able to identify what data is consistent and should backed up and what data should not be backed up. Thus performing recovery for a data volume may be important in order for the backup operation to continue.

Generally recovering a data volume may mean determining for a storage client that has failed and restarted or a new storage client replacing an old failed storage client the committed state of data volume. A recovery operation may involve some kind of access to the data volume and may in various embodiments involve one or more writes to the data volume. For example as part of a recovery operation different metadata or other information about a data volume may be written to different storage nodes in a distributed data store maintaining the data volume. In log structured distributed data stores as described below with regard to for example part of recovery may involve determining a recovery point in the log for a data volume. The recovery point may be the last committed log record acknowledged to storage client with no missing or incomplete log records or a last durably persisted log record indicating a consistent view of the data volume from which a storage client and or the support or maintenance functions may continue to operate. This recovery point may be recorded at different storage nodes in the log structured distributed data store in order to indicate to future storage clients reading clients or other components that access the data volume the consistent view of the data volume.

For distributed data stores implementing single writer consistency schemes for write access to a data volume recovery scenarios may prove a challenge. If for instance recovery operations are limited to those systems that typically receive write access such as a storage clients then other systems functions or processes that depend on a recovered data volume before continuing functioning may have to wait until a new storage client can perform the recovery operation which may be a long time if a storage client failure is part of a larger failure that is not quickly solvable or goes unnoticed. However if another recovery agent such as a recovery service agent implemented as part of a recovery service for data volumes maintained a distributed data store performs the recovery operation then a storage client or other component may be blocked from write access to the data volume until recovery is completed or evict the recovery service agent effectively starting the recovery operation over again and delaying recover of the data volume further . Providing volume recovery access to multiple recovery agents may be implemented in distributed data stores that utilize single writer consistency schemes allowing recovery operations to begin sooner and be completed by different components without disrupting one another.

In some embodiments data volume reader s may have read access to data volume . Data volume reader s may be components such as servers or nodes associated with a storage client that access data volume to return certain data. Data volume reader s may also be various support or maintenance functions such as a data backup component or system that interact with a consistent view of data volume . Also illustrated in scene is data volume writer . Data volume writer which may also be referred to as a storage client may have rite access to data volume . Write access may be provided according to single writer consistency scheme in some embodiments. For example data volume writer may have to acquire a lease or other lock on data volume in order to be provided with write access under the single writer consistency scheme. Data volume reader s and data volume writer may be one of various systems applications or devices configured to access data volume e.g. computing system described below in .

In scene data volume writer has failed crashed or otherwise become unable to perform a clean volume shutdown or closing operation for data volume . This unclean volume shutdown may leave data volume in an inconsistent state. For example some write requests may be submitted to and made durable at different storage nodes or locations within distributed data store prior to being acknowledged back to data volume writer as durable. In some embodiments writes or changes to data may occur out of order leaving some write requests that were durably maintained dependent upon some writes that were never performed or made durable e.g. written to enough copies . This scenario may become even more acute in embodiments where distributed data store is a log structured data store. Some log records that are later in the log may be written to the log prior to earlier log records upon which the later log records depend. In these and other unclean shutdown scenarios data volume may be in an inconsistent state or even if the data volume is in a consistent state it may not be ascertainable by data volume reader s that data volume is in a consistent state . Thus read access may continue by data volume readers for those portions of data volume which may be ascertained as consistent or alternatively no read access may be allowed or possible not illustrated .

The unclean volume shutdown may be detected as a recovery event for data volume . More generally a recovery event may be any event which may trigger the performance of a recovery operation. Thus in addition to unclean volume shutdown other recovery events may include detecting that a lease has expired for data volume writer receiving a release request or command to evict the current writer or recovery agent from accessing data volume .

In response to detecting the recovery event the data volume may be made available to multiple recovery agents to access data volume in order to perform recovery operation s . Each recovery agent may perform its on recovery operation independently of any other recovery agent . In some embodiments recovery agent s may be a recovery service agent provisioned and or directed to perform a recovery operation for data volume as part of a recovery service for distributed data store . In some embodiments recovery agent s may be storage clients e.g. new data volume writers . Please note that different recovery agent s may perform a same technique as part of a recovery operation but achieve or determine different results. Thus a consistent view of data volume generated by recovery operations may differ from recovery agent to recovery agent.

In some embodiments making the data volume available to multiple recovery agents may include transitioning a volume state of the data volume from a dirty volume state to a recovery volume state. While in a recovery state recovery agent s may be able to perform write operations that are part of a recovery operation. Thus if for example new metadata or markers identifying consistent views of data in data volume are identified and written to various portions of data volume then multiple recovery agent s may be allowed to perform the write operations as would not be permissible if the single writer consistency scheme were being enforced . discussed in detail below provides various examples of the transitions to a recovery state and upon completion to a clean or dirty state both of which states resume enforcing the single writer consistency scheme . Please note that although multiple recovery agent s may be able to perform a recovery operation it may be that only one recovery agent actually performs the recovery operation in some embodiments.

Upon a determination that the first recovery operation is complete granting write access to data volume may be resumed according to the single writer consistency scheme in some embodiments. As illustrated in scene recovered data volume may be available for read access by data volume reader s as well as write access by a new data volume writer . In some embodiments data volume reader s may access recovered data volume whether or not a new data volume writer access recovered data volume .

Please note is provided as a logical illustration of a distributed data store providing volume recovery access for multiple recovery agents and is not intended to be limiting as to the physical arrangement size or number of components modules or devices implementing a distributed data store data volume reader or data volume writer.

The specification first describes an example of a distributed data store as a distributed storage service according to various embodiments. The example distributed storage service may store data for many different types of clients in various embodiments. One such client may be a network based database service described in further detail below. Included in the description of the example network based database service are various aspects of the example network based database service along with the various interactions between the database service and the distributed storage service. The specification then describes a flowchart of various embodiments of methods for providing volume recovery access in a distributed data store for multiple recovery agents. Next the specification describes an example system that may implement the disclosed techniques. Various examples are provided throughout the specification.

The systems described herein may in some embodiments implement a network based service that enables clients e.g. subscribers to operate a data storage system in a cloud computing environment. In some embodiments the data storage system may be an enterprise class database system that is highly scalable and extensible. In some embodiments queries may be directed to database storage that is distributed across multiple physical resources and the database system may be scaled up or down on an as needed basis. The database system may work effectively with database schemas of various types and or organizations in different embodiments. In some embodiments clients subscribers may submit queries in a number of ways e.g. interactively via an SQL interface to the database system. In other embodiments external applications and programs may submit queries using Open Database Connectivity ODBC and or Java Database Connectivity JDBC driver interfaces to the database system.

More specifically the systems described herein may in some embodiments implement a service oriented architecture in which various functional components of a single database system are intrinsically distributed. For example rather than lashing together multiple complete and monolithic database instances each of which may include extraneous functionality such as an application server search functionality or other functionality beyond that required to provide the core functions of a database these systems may organize the basic operations of a database e.g. query processing transaction management caching and storage into tiers that may be individually and independently scalable. For example in some embodiments each database instance in the systems described herein may include a database tier which may include a single database engine head node and a client side storage system driver and a separate distributed storage system which may include multiple storage nodes that collectively perform some of the operations traditionally performed in the database tier of existing systems .

As described in more detail herein in some embodiments some of the lowest level operations of a database e.g. backup restore snapshot recovery log record manipulation and or various space management operations may be offloaded from the database engine to the storage layer or tier such as a distributed storage system and distributed across multiple nodes and storage devices. For example in some embodiments rather than the database engine applying changes to a database or data pages thereof and then sending the modified data pages to the storage layer the application of changes to the stored database and data pages thereof may be the responsibility of the storage layer itself. In such embodiments redo log records rather than modified data pages may be sent to the storage layer after which redo processing e.g. the application of the redo log records may be performed somewhat lazily and in a distributed manner e.g. by a background process . Log sequence numbers may be assigned to the redo log records from a log sequence number space. In some embodiments crash recovery e.g. the rebuilding of data pages from stored redo log records may also be performed by the storage layer and may also be performed by a distributed and in some cases lazy background process.

In some embodiments because only redo logs and not modified data pages are sent to the storage layer there may be much less network traffic between the database tier and the storage layer than in existing database systems. In some embodiments each redo log may be on the order of one tenth the size of the corresponding data page for which it specifies a change. Note that requests sent from the database tier and the distributed storage system may be asynchronous and that multiple such requests may be in flight at a time.

In general after being given a piece of data a primary requirement of a database is that it can eventually give that piece of data back. To do this the database may include several different components or tiers each of which performs a different function. For example a traditional database may be thought of as having three tiers a first tier for performing query parsing optimization and execution a second tier for providing transactionality recovery and durability and a third tier that provides storage either on locally attached disks or on network attached storage. As noted above previous attempts to scale a traditional database have typically involved replicating all three tiers of the database and distributing those replicated database instances across multiple machines.

In some embodiments the systems described herein may partition functionality of a database system differently than in a traditional database and may distribute only a subset of the functional components rather than a complete database instance across multiple machines in order to implement scaling. For example in some embodiments a client facing tier may be configured to receive a request specifying what data is to be stored or retrieved but not how to store or retrieve the data. This tier may perform request parsing and or optimization e.g. SQL parsing and optimization while another tier may be responsible for query execution. In some embodiments a third tier may be responsible for providing transactionality and consistency of results. For example this tier may be configured to enforce some of the so called ACID properties in particular the Atomicity of transactions that target the database maintaining Consistency within the database and ensuring Isolation between the transactions that target the database. In some embodiments a fourth tier may then be responsible for providing Durability of the stored data in the presence of various sorts of faults. For example this tier may be responsible for change logging recovery from a database crash managing access to the underlying storage volumes and or space management in the underlying storage volumes.

In various embodiments a database instance may include multiple functional components or layers each of which provides a portion of the functionality of the database instance. In one such example a database instance may include a query parsing and query optimization layer a query execution layer a transactionality and consistency management layer and a durability and space management layer. As noted above in some existing database systems scaling a database instance may involve duplicating the entire database instance one or more times including all of the example layers and then adding glue logic to stitch them together. In some embodiments the systems described herein may instead offload the functionality of durability and space management layer from the database tier to a separate storage layer and may distribute that functionality across multiple storage nodes in the storage layer.

In some embodiments the database systems described herein may retain much of the structure of the upper half of the database instance such as query parsing and query optimization layer a query execution layer and a transactionality and consistency management layer but may redistribute responsibility for at least portions of the backup restore snapshot recovery and or various space management operations to the storage tier. Redistributing functionality in this manner and tightly coupling log processing between the database tier and the storage tier may improve performance increase availability and reduce costs when compared to previous approaches to providing a scalable database. For example network and input output bandwidth requirements may be reduced since only redo log records which are much smaller in size than the actual data pages may be shipped across nodes or persisted within the latency path of write operations. In addition the generation of data pages can be done independently in the background on each storage node as foreground processing allows without blocking incoming write operations. In some embodiments the use of log structured non overwrite storage may allow backup restore snapshots point in time recovery and volume growth operations to be performed more efficiently e.g. by using metadata manipulation rather than movement or copying of a data page. In some embodiments the storage layer may also assume the responsibility for the replication of data stored on behalf of clients and or metadata associated with that data such as redo log records across multiple storage nodes. For example data and or metadata may be replicated locally e.g. within a single availability zone in which a collection of storage nodes executes on its own physically distinct independent infrastructure and or across availability zones in a single region or in different regions.

In various embodiments the database systems described herein may support a standard or custom application programming interface API for a variety of database operations. For example the API may support operations for creating a database creating a table altering a table creating a user dropping a user inserting one or more rows in a table copying values selecting data from within a table e.g. querying a table canceling or aborting a query creating a snapshot and or other operations.

In some embodiments the database tier of a database instance may include a database engine head node server that receives read and or write requests from various client programs e.g. applications and or subscribers users then parses them and develops an execution plan to carry out the associated database operation s . For example the database engine head node may develop the series of steps necessary to obtain results for complex queries and joins. In some embodiments the database engine head node may manage communications between the database tier of the database system and clients subscribers as well as communications between the database tier and a separate distributed storage system.

In some embodiments the database engine head node may be responsible for receiving SQL requests from end clients through a JDBC or ODBC interface and for performing SQL processing and transaction management which may include locking locally. However rather than generating data pages locally the database engine head node or various components thereof may generate redo log records and may ship them to the appropriate nodes of a separate distributed storage system. In some embodiments a client side driver for the distributed storage system may be hosted on the database engine head node and may be responsible for routing redo log records to the storage system node or nodes that store the segments or data pages thereof to which those redo log records are directed. For example in some embodiments each segment may be mirrored or otherwise made durable on multiple storage system nodes that form a protection group. In such embodiments the client side driver may keep track of the nodes on which each segment is stored and may route redo logs to all of the nodes on which a segment is stored e.g. asynchronously and in parallel at substantially the same time when a client request is received. As soon as the client side driver receives an acknowledgement back from a write quorum of the storage nodes in the protection group which may indicate that the redo log record has been written to the storage node it may send an acknowledgement of the requested change to the database tier e.g. to the database engine head node . For example in embodiments in which data is made durable through the use of protection groups the database engine head node may not be able to commit a transaction until and unless the client side driver receives a reply from enough storage node instances to constitute a write quorum as may be defined in a protection group policy for the data.

In some embodiments the database tier or more specifically the database engine head node may include a cache in which recently accessed data pages are held temporarily. In such embodiments if a write request is received that targets a data page held in such a cache in addition to shipping a corresponding redo log record to the storage layer the database engine may apply the change to the copy of the data page held in its cache. However unlike in other database systems a data page held in this cache may not ever be flushed to the storage layer and it may be discarded at any time e.g. at any time after the redo log record for a write request that was most recently applied to the cached copy has been sent to the storage layer and acknowledged . The cache may implement any of various locking mechanisms to control access to the cache by at most one writer or multiple readers at a time in different embodiments. Note however that in embodiments that include such a cache the cache may not be distributed across multiple nodes but may exist only on the database engine head node for a given database instance. Therefore there may be no cache coherency or consistency issues to manage.

In some embodiments the database tier may support the use of synchronous or asynchronous read replicas in the system e.g. read only copies of data on different nodes of the database tier to which read requests can be routed. In such embodiments if the database engine head node for a given database receives a read request directed to a particular data page it may route the request to any one or a particular one of these read only copies. In some embodiments the client side driver in the database engine head node may be configured to notify these other nodes about updates and or invalidations to cached data pages e.g. in order to prompt them to invalidate their caches after which they may request updated copies of updated data pages from the storage layer .

In some embodiments the client side driver running on the database engine head node may expose a private interface to the storage tier. In some embodiments it may also expose a traditional iSCSI interface to one or more other components e.g. other database engines or virtual computing services components . In some embodiments storage for a database instance in the storage tier may be modeled as a single volume that can grow in size without limits and that can have an unlimited number of IOPS associated with it. When a volume is created it may be created with a specific size with a specific availability durability characteristic e.g. specifying how it is replicated and or with an IOPS rate associated with it e.g. both peak and sustained . For example in some embodiments a variety of different durability models may be supported and users subscribers may be able to specify for their database a number of replication copies zones or regions and or whether replication is synchronous or asynchronous based upon their durability performance and cost objectives.

In some embodiments the client side driver may maintain metadata about the volume and may directly send asynchronous requests to each of the storage nodes necessary to fulfill read requests and write requests without requiring additional hops between storage nodes. The volume metadata may indicate which protection groups and their respective storage nodes maintain which partitions of the volume. For example in some embodiments in response to a request to make a change to a database the client side driver may be configured to determine the protection group and its one or more nodes that are implementing the storage for the targeted data page and to route the redo log record s specifying that change to those storage nodes. The storage nodes may then be responsible for applying the change specified in the redo log record to the targeted data page at some point in the future. As writes are acknowledged back to the client side driver the client side driver may advance the point at which the volume is durable and may acknowledge commits back to the database tier. As previously noted in some embodiments the client side driver may not ever send data pages to the storage node servers. This may not only reduce network traffic but may also remove the need for the checkpoint or background writer threads that constrain foreground processing throughput in previous database systems.

In some embodiments many read requests may be served by the database engine head node cache. However write requests may require durability since large scale failure events may be too common to allow only in memory replication. Therefore the systems described herein may be configured to minimize the cost of the redo log record write operations that are in the foreground latency path by implementing data storage in the storage tier as two regions a small append only log structured region into which redo log records are written when they are received from the database tier and a larger region in which log records are coalesced together to create new versions of data pages in the background. In some embodiments an in memory structure may be maintained for each data page that points to the last redo log record for that page backward chaining log records until an instantiated data block is referenced. This approach may provide good performance for mixed read write workloads including in applications in which reads are largely cached.

In some embodiments because accesses to the log structured data storage for the redo log records may consist of a series of sequential input output operations rather than random input output operations the changes being made may be tightly packed together. It should also be noted that in contrast to existing systems in which each change to a data page results in two input output operations to persistent data storage one for the redo log and one for the modified data page itself in some embodiments the systems described herein may avoid this write amplification by coalescing data pages at the storage nodes of the distributed storage system based on receipt of the redo log records.

As previously noted in some embodiments the storage tier of the database system may be responsible for taking database snapshots. However because the storage tier implements log structured storage taking a snapshot of a data page e.g. a data block may include recording a timestamp associated with the redo log record that was most recently applied to the data page block or a timestamp associated with the most recent operation to coalesce multiple redo log records to create a new version of the data page block and preventing garbage collection of the previous version of the page block and any subsequent log entries up to the recorded point in time. In such embodiments taking a database snapshot may not require reading copying or writing the data block as would be required when employing an off volume backup strategy. In some embodiments the space requirements for snapshots may be minimal since only modified data would require additional space although user subscribers may be able to choose how much additional space they want to keep for on volume snapshots in addition to the active data set. In different embodiments snapshots may be discrete e.g. each snapshot may provide access to all of the data in a data page as of a specific point in time or continuous e.g. each snapshot may provide access to all versions of the data that existing in a data page between two points in time . In some embodiments reverting to a prior snapshot may include recording a log record to indicate that all redo log records and data pages since that snapshot are invalid and garbage collectable and discarding all database cache entries after the snapshot point. In such embodiments no roll forward may be required since the storage system will on a block by block basis apply redo log records to data blocks as requested and in the background across all nodes just as it does in normal forward read write processing. Crash recovery may thereby be made parallel and distributed across nodes.

One embodiment of a service system architecture that may be configured to implement a network based services based database service is illustrated in . In the illustrated embodiment a number of clients shown as clients may be configured to interact with a network based services platform via a network . Network based services platform may be configured to interface with one or more instances of a database service a distributed storage service and or one or more other virtual computing services . Distributed storage service may be implemented as log structured storage using a single log sequence number space. It is noted that where one or more instances of a given component may exist reference to that component herein may be made in either the singular or the plural. However usage of either form is not intended to preclude the other.

In various embodiments the components illustrated in may be implemented directly within computer hardware as instructions directly or indirectly executable by computer hardware e.g. a microprocessor or computer system or using a combination of these techniques. For example the components of may be implemented by a system that includes a number of computing nodes or simply nodes each of which may be similar to the computer system embodiment illustrated in and described below. In various embodiments the functionality of a given service system component e.g. a component of the database service or a component of the storage service may be implemented by a particular node or may be distributed across several nodes. In some embodiments a given node may implement the functionality of more than one service system component e.g. more than one database service system component .

Generally speaking clients may encompass any type of client configurable to submit network based services requests to network based services platform via network including requests for database services e.g. a request to generate a snapshot etc. . For example a given client may include a suitable version of a web browser or may include a plug in module or other type of code module configured to execute as an extension to or within an execution environment provided by a web browser. Alternatively a client e.g. a database service client may encompass an application such as a database application or user interface thereof a media application an office application or any other application that may make use of persistent storage resources to store and or access one or more databases. In some embodiments such an application may include sufficient protocol support e.g. for a suitable version of Hypertext Transfer Protocol HTTP for generating and processing network based services requests without necessarily implementing full browser support for all types of network based data. That is client may be an application configured to interact directly with network based services platform . In some embodiments client may be configured to generate network based services requests according to a Representational State Transfer REST style network based services architecture a document or message based network based services architecture or another suitable network based services architecture.

In some embodiments a client e.g. a database service client may be configured to provide access to network based services based storage of databases to other applications in a manner that is transparent to those applications. For example client may be configured to integrate with an operating system or file system to provide storage in accordance with a suitable variant of the storage models described herein. However the operating system or file system may present a different storage interface to applications such as a conventional file system hierarchy of files directories and or folders. In such an embodiment applications may not need to be modified to make use of the storage system service model. Instead the details of interfacing to network based services platform may be coordinated by client and the operating system or file system on behalf of applications executing within the operating system environment.

Clients may convey network based services requests e.g. a snapshot request parameters of a snapshot request read request restore a snapshot etc. to and receive responses from network based services platform via network . In various embodiments network may encompass any suitable combination of networking hardware and protocols necessary to establish network based based communications between clients and platform . For example network may generally encompass the various telecommunications networks and service providers that collectively implement the Internet. Network may also include private networks such as local area networks LANs or wide area networks WANs as well as public or private wireless networks. For example both a given client and network based services platform may be respectively provisioned within enterprises having their own internal networks. In such an embodiment network may include the hardware e.g. modems routers switches load balancers proxy servers etc. and software e.g. protocol stacks accounting software firewall security software etc. necessary to establish a networking link between given client and the Internet as well as between the Internet and network based services platform . It is noted that in some embodiments clients may communicate with network based services platform using a private network rather than the public Internet. For example clients may be provisioned within the same enterprise as a database service system e.g. a system that implements database service and or distributed storage service . In such a case clients may communicate with platform entirely through a private network e.g. a LAN or WAN that may use Internet based communication protocols but which is not publicly accessible .

Generally speaking network based services platform may be configured to implement one or more service endpoints configured to receive and process network based services requests such as requests to access data pages or records thereof . For example network based services platform may include hardware and or software configured to implement a particular endpoint such that an HTTP based network based services request directed to that endpoint is properly received and processed. In one embodiment network based services platform may be implemented as a server system configured to receive network based services requests from clients and to forward them to components of a system that implements database service distributed storage service and or another virtual computing service for processing. In other embodiments network based services platform may be configured as a number of distinct systems e.g. in a cluster topology implementing load balancing and other request management features configured to dynamically manage large scale network based services request processing loads. In various embodiments network based services platform may be configured to support REST style or document based e.g. SOAP based types of network based services requests.

In addition to functioning as an addressable endpoint for clients network based services requests in some embodiments network based services platform may implement various client management features. For example platform may coordinate the metering and accounting of client usage of network based services including storage resources such as by tracking the identities of requesting clients the number and or frequency of client requests the size of data tables or records thereof stored or retrieved on behalf of clients overall storage bandwidth used by clients class of storage requested by clients or any other measurable client usage parameter. Platform may also implement financial accounting and billing systems or may maintain a database of usage data that may be queried and processed by external systems for reporting and billing of client usage activity. In certain embodiments platform may be configured to collect monitor and or aggregate a variety of storage service system operational metrics such as metrics reflecting the rates and types of requests received from clients bandwidth utilized by such requests system processing latency for such requests system component utilization e.g. network bandwidth and or storage utilization within the storage service system rates and types of errors resulting from requests characteristics of stored and requested data pages or records thereof e.g. size data type etc. or any other suitable metrics. In some embodiments such metrics may be used by system administrators to tune and maintain system components while in other embodiments such metrics or relevant portions of such metrics may be exposed to clients to enable such clients to monitor their usage of database service distributed storage service and or another virtual computing service or the underlying systems that implement those services .

In some embodiments network based services platform may also implement user authentication and access control procedures. For example for a given network based services request to access a particular database platform may be configured to ascertain whether the client associated with the request is authorized to access the particular database. Platform may determine such authorization by for example evaluating an identity password or other credential against credentials associated with the particular database or evaluating the requested access to the particular database against an access control list for the particular database. For example if a client does not have sufficient credentials to access the particular database platform may reject the corresponding network based services request for example by returning a response to the requesting client indicating an error condition. Various access control policies may be stored as records or lists of access control information by database service distributed storage service and or other virtual computing services .

It is noted that while network based services platform may represent the primary interface through which clients may access the features of a database system that implements database service it need not represent the sole interface to such features. For example an alternate API that may be distinct from a network based services interface may be used to allow clients internal to the enterprise providing the database system to bypass network based services platform . Note that in many of the examples described herein distributed storage service may be internal to a computing system or an enterprise system that provides database services to clients and may not be exposed to external clients e.g. users or client applications . In such embodiments the internal client e.g. database service may access distributed storage service over a local or private network shown as the solid line between distributed storage service and database service e.g. through an API directly between the systems that implement these services . In such embodiments the use of distributed storage service in storing databases on behalf of clients may be transparent to those clients. In other embodiments distributed storage service may be exposed to clients through network based services platform to provide storage of databases or other information for applications other than those that rely on database service for database management. This is illustrated in by the dashed line between network based services platform and distributed storage service . In such embodiments clients of the distributed storage service may access distributed storage service via network e.g. over the Internet . In some embodiments a virtual computing service may be configured to receive storage services from distributed storage service e.g. through an API directly between the virtual computing service and distributed storage service to store objects used in performing computing services on behalf of a client . This is illustrated in by the dashed line between virtual computing service and distributed storage service . In some cases the accounting and or credentialing services of platform may be unnecessary for internal clients such as administrative clients or between service components within the same enterprise.

Although not illustrated in various embodiments distributed storage service may be configured to interface with backup data store system service or device. Various data such as data pages log records and or any other data maintained by distributed storage service internal clients such as database service or other virtual computing services and or external clients such as clients through may be sent to a backup data store.

Note that in various embodiments different storage policies may be implemented by database service and or distributed storage service . Examples of such storage policies may include a durability policy e.g. a policy indicating the number of instances of a database or data page thereof that will be stored and the number of different nodes on which they will be stored and or a load balancing policy which may distribute databases or data pages thereof across different nodes volumes and or disks in an attempt to equalize request traffic . In addition different storage policies may be applied to different types of stored items by various one of the services. For example in some embodiments distributed storage service may implement a higher durability for redo log records than for data pages.

As previously noted each database instance may include a single database engine head node that receives requests e.g. a snapshot request etc. from various client programs e.g. applications and or subscribers users then parses them optimizes them and develops an execution plan to carry out the associated database operation s . In the example illustrated in a query parsing optimization and execution component of database engine head node may perform these functions for queries that are received from database client and that target the database instance of which database engine head node is a component. In some embodiments query parsing optimization and execution component may return query responses to database client which may include write acknowledgements requested data pages or portions thereof error messages and or other responses as appropriate. As illustrated in this example database engine head node may also include a client side storage service driver which may route read requests and or redo log records to various storage nodes within distributed storage service receive write acknowledgements from distributed storage service receive requested data pages from distributed storage service and or return data pages error messages or other responses to query parsing optimization and execution component which may in turn return them to database client . Client side storage device may maintain mapping information about the database volume stored in distributed storage service such that a particular protection group maintaining a partition of the database volume may be determined. Read requests and redo log records may then be routed to storage nodes that are members of the protection group according to the partition of user data to which the read request is directed or to which the redo log record pertains.

In this example database engine head node includes a data page cache in which data pages that were recently accessed may be temporarily held. As illustrated in database engine head node may also include a transaction and consistency management component which may be responsible for providing transactionality and consistency in the database instance of which database engine head node is a component. For example this component may be responsible for ensuring the Atomicity Consistency and Isolation properties of the database instance and the transactions that are directed that the database instance. As illustrated in database engine head node may also include a transaction log and an undo log which may be employed by transaction and consistency management component to track the status of various transactions and roll back any locally cached results of transactions that do not commit.

Note that each of the other database engine head nodes illustrated in e.g. and may include similar components and may perform similar functions for queries received by one or more of database clients and directed to the respective database instances of which it is a component.

In some embodiments the distributed storage systems described herein may organize data in various logical data volumes extents which may include partitions of the user data space in the volume and a segmentation of the log for the volume made durable among a protection group of storage nodes segments which may be data stored on an individual storage node of a protection group and pages for storage on one or more storage nodes. For example in some embodiments each database is represented by a logical volume and each logical volume is partitioned over a collection of storage nodes into extents. A protection group may be composed of different storage nodes in the distributed storage service that together make an extent durable. Multiple segments each of which lives on a particular one of the storage nodes in a protection group are used to make the extent durable.

In some embodiments each data page is stored in a segment such that each segment stores a collection of one or more data pages and a change log also referred to as a redo log e.g. a log of redo log records for each data page that it stores. Thus change logs may be log records segmented to the protection group of which the segment is a member. As described in detail herein the storage nodes may be configured to receive redo log records which may also be referred to herein as ULRs and to coalesce them to create new versions of the corresponding data pages and or additional or replacement log records e.g. lazily and or in response to a request for a data page or a database crash . In some embodiments data pages and or change logs may be mirrored across multiple storage nodes according to a variable configuration such as in a protection group which may be specified by the client on whose behalf the databases are being maintained in the database system . For example in different embodiments one two or three copies of the data or change logs may be stored in each of one two or three different availability zones or regions according to a default configuration an application specific durability preference or a client specified durability preference.

As used herein the following terms may be used to describe the organization of data by a distributed storage system according to various embodiments.

Volume A volume is a logical concept representing a highly durable unit of storage that a user client application of the storage system understands. More specifically a volume is a distributed store that appears to the user client application as a single consistent ordered log of write operations to various user pages of a database. Each write operation may be encoded in a User Log Record ULR which represents a logical ordered mutation to the contents of a single user page within the volume. As noted above a ULR may also be referred to herein as a redo log record. Each ULR may include a unique identifier e.g. a Logical Sequence Number LSN assigned from a log sequence number space. Each ULR may be persisted to one or more synchronous segments in the log structured distributed store that form a Protection Group PG maintaining the partition of user data space i.e. extent to which the update indicate by the log record pertains in order to provide high durability and availability for the ULR. A volume may provide an LSN type read write interface for a variable size contiguous range of bytes.

In some embodiments a volume may consist of multiple extents each made durable through a protection group. In such embodiments a volume may represent a unit of storage composed of a mutable contiguous sequence of Volume Extents. Reads and writes that are directed to a volume may be mapped into corresponding reads and writes to the constituent volume extents. In some embodiments the size of a volume may be changed by adding or removing volume extents from the end of the volume.

Segment A segment is a limited durability unit of storage assigned to a single storage node. Multiple segments may be implemented in a protection group to persist an extent. More specifically a segment provides limited best effort durability e.g. a persistent but non redundant single point of failure that is a storage node for a specific fixed size byte range of data. This data may in some cases be a mirror of user addressable data or it may be other data such as volume metadata or erasure coded bits in various embodiments. A given segment may live on exactly one storage node. Within a storage node multiple segments may live on each SSD and each segment may be restricted to one SSD e.g. a segment may not span across multiple SSDs . In some embodiments a segment may not be required to occupy a contiguous region on an SSD rather there may be an allocation map in each SSD describing the areas that are owned by each of the segments. As noted above a protection group may consist of multiple segments spread across multiple storage nodes. In some embodiments a segment may provide an LSN type read write interface for a fixed size contiguous range of bytes where the size is defined at creation . In some embodiments each segment may be identified by a Segment UUID e.g. a universally unique identifier of the segment .

Storage page A storage page is a block of memory generally of fixed size. In some embodiments each page is a block of memory e.g. of virtual memory disk or other physical memory of a size defined by the operating system and may also be referred to herein by the term data block . More specifically a storage page may be a set of contiguous sectors. It may serve as the unit of allocation in SSDs as well as the unit in log pages for which there is a header and metadata. In some embodiments and in the context of the database systems described herein the term page or storage page may refer to a similar block of a size defined by the database configuration which may typically a multiple of 2 such as 4096 8192 16384 or 32768 bytes.

Log page A log page is a type of storage page that is used to store log records e.g. redo log records or undo log records . In some embodiments log pages may be identical in size to storage pages. Each log page may include a header containing metadata about that log page e.g. metadata identifying the segment to which it belongs. Note that a log page is a unit of organization and may not necessarily be the unit of data included in write operations. For example in some embodiments during normal forward processing write operations may write to the tail of the log one sector at a time.

Log Records Log records e.g. the individual elements of a log page may be of several different classes. For example User Log Records ULRs which are created and understood by users clients applications of the storage system may be used to indicate changes to user data in a volume. Log records may include metadata such as pointers or back links that indicate a previous LSN for log record maintained at a particular segment and or the previous LSN in the log sequence number space. Control Log Records CLRs which are generated by the storage system may also contain control information used to keep track of metadata such as the current unconditional volume durable LSN VDL . Null Log Records NLRs may in some embodiments be used as padding to fill in unused space in a log sector or log page. In some embodiments there may be various types of log records within each of these classes and the type of a log record may correspond to a function that needs to be invoked to interpret the log record. For example one type may represent all the data of a user page in compressed format using a specific compression format a second type may represent new values for a byte range within a user page a third type may represent an increment operation to a sequence of bytes interpreted as an integer and a fourth type may represent copying one byte range to another location within the page. In some embodiments log record types may be identified by GUIDs rather than by integers or enums which may simplify versioning and development especially for ULRs.

Payload The payload of a log record is the data or parameter values that are specific to the log record or to log records of a particular type. For example in some embodiments there may be a set of parameters or attributes that most or all log records include and that the storage system itself understands. These attributes may be part of a common log record header structure which may be relatively small compared to the sector size. In addition most log records may include additional parameters or data specific to that log record type and this additional information may be considered the payload of that log record. In some embodiments if the payload for a particular ULR is larger than the user page size it may be replaced by an absolute ULR an AULR whose payload includes all the data for the user page. This may enable the storage system to enforce an upper limit on the size of the payload for ULRs that is equal to the size of user pages.

Note that when storing log records in the segment log the payload may be stored along with the log header in some embodiments. In other embodiments the payload may be stored in a separate location and pointers to the location at which that payload is stored may be stored with the log header. In still other embodiments a portion of the payload may be stored in the header and the remainder of the payload may be stored in a separate location. If the entire payload is stored with the log header this may be referred to as in band storage otherwise the storage may be referred to as being out of band. In some embodiments the payloads of most large AULRs may be stored out of band in the cold zone of log which is described below .

User pages User pages are the byte ranges of a fixed size and alignments thereof for a particular volume that are visible to users clients of the storage system. User pages are a logical concept and the bytes in particular user pages may or not be stored in any storage page as is. The size of the user pages for a particular volume may be independent of the storage page size for that volume. In some embodiments the user page size may be configurable per volume and different segments on a storage node may have different user page sizes. In some embodiments user page sizes may be constrained to be a multiple of the sector size e.g. 4 KB and may have an upper limit e.g. 64 KB . The storage page size on the other hand may be fixed for an entire storage node and may not change unless there is a change to the underlying hardware.

Data page A data page is a type of storage page that is used to store user page data in compressed form. In some embodiments every piece of data stored in a data page is associated with a log record and each log record may include a pointer to a sector within a data page also referred to as a data sector . In some embodiments data pages may not include any embedded metadata other than that provided by each sector. There may be no relationship between the sectors in a data page. Instead the organization into pages may exist only as an expression of the granularity of the allocation of data to a segment.

Storage node A storage node is a single virtual machine that on which storage node server code is deployed. Each storage node may contain multiple locally attached SSDs and may provide a network API for access to one or more segments. In some embodiments various nodes may be on an active list or on a degraded list e.g. if they are slow to respond or are otherwise impaired but are not completely unusable . In some embodiments the client side driver may assist in or be responsible for classifying nodes as active or degraded for determining if and when they should be replaced and or for determining when and how to redistribute data among various nodes based on observed performance. Multiple storage nodes may together implement a protection group in some embodiments.

SSD As referred to herein the term SSD may refer to a local block storage volume as seen by the storage node regardless of the type of storage employed by that storage volume e.g. disk a solid state drive a battery backed RAM a non volatile RAM device e.g. one or more NV DIMMs or another type of persistent storage device. An SSD is not necessarily mapped directly to hardware. For example a single solid state storage device might be broken up into multiple local volumes where each volume is split into and striped across multiple segments and or a single drive may be broken up into multiple volumes simply for ease of management in different embodiments. In some embodiments each SSD may store an allocation map at a single fixed location. This map may indicate which storage pages that are owned by particular segments and which of these pages are log pages as opposed to data pages . In some embodiments storage pages may be pre allocated to each segment so that forward processing may not need to wait for allocation. Any changes to the allocation map may need to be made durable before newly allocated storage pages are used by the segments.

One embodiment of a distributed storage system is illustrated by the block diagram in . In at least some embodiments storage nodes may store data for different clients as part of a multi tenant storage service. For example the various segments discussed above and below with regard to may correspond to different protection groups and volumes for different clients.

In some embodiments a database system may be a client of distributed storage system which communicates with a database engine head node over interconnect . As in the example illustrated in database engine head node may include a client side storage service driver . In this example distributed storage system includes multiple storage system server nodes including those shown as and each of which includes storage for data pages and redo logs for the segment s it stores and hardware and or software configured to perform various segment management functions. For example each storage system server node may include hardware and or software configured to perform at least a portion of any or all of the following operations replication locally e.g. within the storage node coalescing of redo logs to generate data pages snapshots e.g. creating restoration deletion etc. log management e.g. manipulating log records crash recovery e.g. determining candidate log records for volume recovery and or space management e.g. for a segment . Each storage system server node may also have multiple attached storage devices e.g. SSDs on which data blocks may be stored on behalf of clients e.g. users client applications and or database service subscribers .

In the example illustrated in storage system server node includes data page s segment redo log s segment management functions and attached SSDs . Again note that the label SSD may or may not refer to a solid state drive but may more generally refer to a local block storage volume regardless of its underlying hardware. Similarly storage system server node includes data page s segment redo log s segment management functions and attached SSDs and storage system server node includes data page s segment redo log s segment management functions and attached SSDs .

In some embodiments each of the storage system server nodes in the distributed storage system may implement a set of processes running on the node server s operating system that manage communication with the database engine head node e.g. to receive redo logs send back data pages etc. In some embodiments all data blocks written to the distributed storage system may be backed up to long term and or archival storage e.g. in a remote key value durable backup storage system .

Distributed storage system may also implement a storage control plane. Storage control plane may be one or more compute nodes configured to perform a variety of different storage system management functions. For example storage control plane may implement a volume manager which may be configured to maintain mapping information or other metadata for a volume such as current volume state current writer truncation tables or other truncation information or any other information for a volume as it is persisted in varying different extents segments and protection groups. Volume manager may be configured to communicate with a client of storage system such as client side driver in order to mount or open the volume for the client providing client side driver with mapping information protection group policies and various other information necessary to send write and read requests to storage nodes . Volume manager may be configured to provide the maintained information to storage clients such as database engine head node or client side driver or to other system components such as recovery service agents . For example volume manager may provide a current volume state e.g. clean dirty or recovery current epoch indicator and or any other information about the data volume.

Volume manager may in various embodiments be configured to provide volume recovery access to multiple recovery agents such as client side driver and or database engine head node or recovery service agent s . As noted above volume manager may be configured to maintain and or manage a current volume state for a data volume. Volume state may be clean dirty or recovery as discussed below with regard to . When a data volume is in clean or dirty states volume manager may be configured to enforce a single writer consistency scheme so that only one client has write access to the data volume at a time. Thus the writer may have mutually exclusive access. In for example database engine head node via client side storage service driver may be the single writer. If however the volume state is currently set to recovery then multiple recovery agents may be able to access the data volume.

In some embodiments volume manager may implement a volume recovery service . Volume recovery service may be configured to monitor or evaluate the current volume state and based at least in part on the evaluation direct recovery service agent s to perform a recovery operation with respect to a data volume. For example volume recovery service may determine that the state of a particular data volume has remained in recovery state in excess of a time threshold and in response direct one or more recovery service agent s to perform a recovery operation for the data volume.

In some embodiments volume manager may implement recovery event detection module . Recovery event detection module may detect recovery events for a data volume. For example recovery event detection module may receive an indication from client side storage service driver or database engine head node that the data volume may not be re opened or used again by a writing client. Additionally recovery event detection module may determine other recovery events that may include detecting that a lease has expired for data volume client side storage service driver or database engine head node or may receive a release request or command to evict the database engine head node from another component of the database service . More generally recovery event detection module may detect any event which may trigger or require the performance of a recovery operation.

Volume manager may also implement recovery service agent s which may be individual or collections of computing systems nodes or devices that are configured to perform recovery operations such as described below with regard to . Recovery service agent s may be provisioned from other computing resources of distributed storage system or another system of network based service platform in or directed to perform a recovery operation by volume recovery service . Recovery service agent s may abort the performance of a recovery operation if it is determined that a recovery operation for the same data volume is already complete.

In this example one or more client processes may send database query requests which may include read and or write requests targeting data stored on one or more of the storage nodes to database tier components and may receive database query responses from database tier components e.g. responses that include write acknowledgements and or requested data . Each database query request that includes a request to write to a data page may be parsed and optimized to generate one or more write record requests which may be sent to client side driver for subsequent routing to distributed storage system . In this example client side driver may generate one or more redo log records corresponding to each write record request and may send them to specific ones of the storage nodes of specific protection groups storing the partition user data of user data space to which the write record request pertains in distributed storage system . Client side driver may generate metadata for each of the redo log records that includes an indication of a previous log sequence number of a log record maintained at the specific protection group. Distributed storage system may return a corresponding write acknowledgement s for each redo log record to database engine specifically to client side driver . Client side driver may pass these write acknowledgements to database tier components as write responses which may then send corresponding responses e.g. write acknowledgements to one or more client processes as one of database query responses .

In this example each database query request that includes a request to read a data page may be parsed and optimized to generate one or more read record requests which may be sent to client side driver for subsequent routing to distributed storage system . In this example client side driver may send these requests to specific ones of the storage nodes of distributed storage system and distributed storage system may return the requested data pages to database engine specifically to client side driver . Client side driver may send the returned data pages to the database tier components as return data records and database tier components may then send the data pages to one or more client processes as database query responses .

In some embodiments various error and or data loss messages may be sent from distributed storage system to database engine specifically to client side driver . These messages may be passed from client side driver to database tier components as error and or loss reporting messages and then to one or more client processes along with or instead of a database query response .

In some embodiments the APIs of distributed storage system and the APIs of client side driver may expose the functionality of the distributed storage system to database engine as if database engine were a client of distributed storage system . For example database engine through client side driver may write redo log records or request data pages through these APIs to perform or facilitate the performance of various operations of the database system implemented by the combination of database engine and distributed storage system e.g. storage access change logging recovery and or space management operations . As illustrated in distributed storage system may store data blocks on storage nodes each of which may have multiple attached SSDs. In some embodiments distributed storage system may provide high durability for stored data block through the application of various types of redundancy schemes.

As noted above in some embodiments the functional components of a database system may be partitioned between those that are performed by the database engine and those that are performed in a separate distributed storage system. In one specific example in response to receiving a request from a client process or a thread thereof to insert something into a database e.g. to update a single data block by adding a record to that data block one or more components of the database engine head node may perform query parsing optimization and execution and may send each portion of the query to a transaction and consistency management component. The transaction and consistency management component may ensure that no other client process or thread thereof is trying to modify the same row at the same time. For example the transaction and consistency management component may be responsible for ensuring that this change is performed atomically consistently durably and in an isolated manner in the database. For example the transaction and consistency management component may work together with the client side storage service driver of the database engine head node to generate a redo log record to be sent to one of the nodes in the distributed storage service and to send it to the distributed storage service along with other redo logs generated in response to other client requests in an order and or with timing that ensures the ACID properties are met for this transaction. Upon receiving the redo log record which may be considered an update record by the storage service the corresponding storage node may update the data block and may update a redo log for the data block e.g. a record of all changes directed to the data block . In some embodiments the database engine may be responsible for generating an undo log record for this change and may also be responsible for generating a redo log record for the undo log both of which may be used locally in the database tier for ensuring transactionality. However unlike in traditional database systems the systems described herein may shift the responsibility for applying changes to data blocks to the storage system rather than applying them at the database tier and shipping the modified data blocks to the storage system .

Recovery service agents s may also interact with volume manager and storage nodes to perform a recovery of a data volume. A request for volume state may be sent and in response a recovery volume state may be returned including a current volume epoch indicator . Recovery service agents may perform recovery operations such as described below with respect to . Upon completion of a recovery operation each recovery service agent may send a request to modify the volume state to clean . In some embodiments if a particular recovery service agent fails while performing a recovery operation a new recovery service agent may be provisioned to continuing performing the recovery operation without having to begin the recovery operation from the beginning.

Note that in various embodiments the API calls and responses between database engine and distributed storage system e.g. APIs and or the API calls and responses between client side driver and database tier components e.g. APIs in and or distributed storage system volume manager storage nodes and storage client e.g. and in may be performed over a secure proxy connection e.g. one managed by a gateway control plane or may be performed over the public network or alternatively over a private channel such as a virtual private network VPN connection. These and other APIs to and or between components of the database systems described herein may be implemented according to different technologies including but not limited to Simple Object Access Protocol SOAP technology and Representational state transfer REST technology. For example these APIs may be but are not necessarily implemented as SOAP APIs or RESTful APIs. SOAP is a protocol for exchanging information in the context of network based services. REST is an architectural style for distributed hypermedia systems. A RESTful API which may also be referred to as a RESTful network based service is a network based service API implemented using HTTP and REST technology. The APIs described herein may in some embodiments be wrapped with client libraries in various languages including but not limited to C C Java C and Perl to support integration with system components.

A clean volume state may indicate that there is no writer session e.g. storage client potentially writing to the data volume. The correct and final VDL and possibly the PGDL for each PG may be recorded at the volume manager . There may be no LSNs floating around higher than VDL on any segment in the volume. These conditions are guaranteed to remain constant until the current volume epoch indicator is incremented at the volume manager. Readers can safely read up to VDL even if the current volume epoch indicator is subsequently incremented. A transition from clean volume state to dirty volume state may occur when a writer opens a clean volume . For example a storage client such as client side service driver may request from volume manager to open the volume providing self identification as well as a known volume epoch indicator of the clean state. The volume manager may verify that the known clean volume epoch indicator is still correct then atomically increments the volume epoch indicator and marks the volume as dirty and with a current session belonging to the requesting client. The volume manager may return the new volume epoch indicator and the VDL and possibly the list of PGDLs at the time of the atomic transition to the new client which then owns a lease for writing. No other writer or recovery agent can steal the client s lease without transition to recovery volume state in some embodiments. No recovery operation may be necessary when opening a clean data volume in some embodiments.

A dirty volume state may indicate that there is a writer session e.g. a storage client writing to the data volume and it is possible that there may be log records committed or in flight beyond the VDL recorded at the volume manager . The writer may update UVDL at a write quorum in at least one PG though such UVDL updates may lag behind acknowledging commits to distributed storage service applications. Readers may safely read up to the highest UVDL even after transition out of this state in some embodiments. The data volume may remain in this state until the current volume epoch indicator is incremented at the volume manager . A storage client that owns the current lease epoch for a volume may transition the volume to a clean volume state by performing a clean shutdown closing the data volume . Performing a clean shutdown may include ensuring that a last allocated LSN is a complete LSN i.e. not in the middle of a transaction that all allocated LSNs are volume complete so that the VDL is equal to the last allocated LSN. The writer may then ask the volume manager to transition the data volume to clean volume state providing the volume epoch indicator and the final VDL and possibly the PGDL list . The Volume manager verifies correctness of the owned lease epoch then atomically increments the lease epoch clears the current writer session and updates the current VDL and possibly the PGDL list. Volume manager may then transition from dirty volume state to clean volume state in idempotent fashion. If upon receiving the request the Volume manager finds that the lease epoch has already been incremented it can simply return a successful response.

A recovery volume state may indicate that there may or may not be a current writing session associated with the volume but if there is the associated writer is not writing and it may or may not be attempting to complete recovery. There may be LSNs in flight beyond the true VDL and there may be LSNs beyond true VDL that are being peer replicated. Recovery may need to be completed after which the volume can transition to the clean state disconnecting any attached writer session or dirty state retaining the current attached writer session . Multiple recovery agents may complete a recovery operation. As noted above the first recovery agent to successfully transition state to clean or dirty will win and other recovery agents may abandon their attempts without committing. In addition to completing the recovery operation transition out of the recovery state may include updating a read quorum of segments in every PG in the volume to at least current volume epoch indicator for the recovery state blocking further changes from an evicted writer and incrementing the volume epoch indicator at volume manager . In some embodiments readers can safely read up to the highest known UVDL.

In some embodiments recovery events may be detected or triggered in multiple ways. For example a new writer opens a dirty volume after a previous writer dies is terminated or is abandoned. A new writer may cause the transition from dirty to recovery by asking the volume manager to open the data volume providing self identification as well as known volume epoch indicator for the dirty state . Volume manager may verify that the known volume epoch indicator is still correct then atomically increments the volume epoch indicator changes the writer session to the acquiring client and marks the volume as recovery volume state . The new volume epoch indicator and the recovery state may be returned to the new writer. The new writer may then perform a recovery operation. In another example of transitioning to recovery a release command may be received for a dirty volume to evict an active writer e.g. head node . For a release request volume manager may disconnect an active writer if any. If the current volume state is dirty volume manager may atomically increments the volume epoch indicator clear the writer session and transition the volume state to recovery . A current volume epoch indicator may be included so as not to evict a writer that legitimately acquired the writing session.

As indicated at a volume release request may also be received while remaining in the recovery state . Such a release may occur when a recovering volume is released in conjunction with eviction of an active writer. When a release request is received volume manager may remove the current writer session from the volume and increment the current volume epoch indicator but leave the volume in recovering state . Note if there is no current writer session attached to a volume that is in the recovery state when a release request is received then there may be no need to increment the current volume epoch indicator.

A writer may first complete a recovery operation transitioning to dirty volume state from recovery volume state in various embodiments. The writer may ensure that a super quorum larger of a read or write quorum of segments in each PG in the volume has a lease epoch equal to the current volume epoch indicator of the recovery state . The writer may also establishing a new VDL truncation metadata and PGDL list. The writer may send a request to transition to volume manager and include a current volume epoch indicator. The volume manager verifies that the current volume epoch indicator is still correct and that the current writer session is either clear or matches the existing client then atomically increments the volume epoch indicator mark the volume as dirty and set the current writer session to the requesting client. The writer then owns the lease for writing. If the transition fails because the current volume epoch indicator has already been incremented then the storage client may retry opening the volume at a new current epoch indicator as a recovery service may have performed recovery and marked the volume clean .

As indicated at a recovery service agent may complete recovery transitioning a data volume from recovery volume state to clean volume state . A recovery service agent ma ensure that a super quorum larger of a read or write quorum of segments in each PG in the volume has a current volume epoch indicator equal to the current volume epoch indicator of the recovery state . If at any point during the recovery process the recovery service agent detects that the current volume epoch indicator has been incremented the recovery operation may be aborted. If the recovery service agent succeeds in establishing a new VDL truncation metadata and PGDL list it may send a request to the volume manager with the current volume epoch indicator for the recovery state the new VDL PGDL list and the truncation metadata. The volume manager may verify that the current volume epoch indicator is still correct then atomically increments the current volume epoch indicator clear the current writer session and mark the volume as clean .

A variety of different allocation models may be implemented for an SSD in different embodiments. For example in some embodiments log entry pages and physical application pages may be allocated from a single heap of pages associated with an SSD device. This approach may have the advantage of leaving the relative amount of storage consumed by log pages and data pages to remain unspecified and to adapt automatically to usage. It may also have the advantage of allowing pages to remain unprepared until they are used and repurposed at will without preparation. In other embodiments an allocation model may partition the storage device into separate spaces for log entries and data pages. Once such allocation model is illustrated by the block diagram in and described below.

In allocation approach illustrated in valid log pages may be packed into the beginning of the flat storage space. Holes that open up due to log pages being freed may be reused before additional log page slots farther into the address space are used. For example in the worst case the first n log page slots contain valid log data where n is the largest number of valid log pages that have ever simultaneously existed. In this example valid data pages may be packed into the end of the flat storage space. Holes that open up due to data pages being freed may be reused before additional data page slots lower in the address space are used. For example in the worst case the last m data pages contain valid data where m is the largest number of valid data pages that have ever simultaneously existed.

In some embodiments before a log page slot can become part of the potential set of valid log page entries it may need to be initialized to a value that cannot be confused for a valid future log entry page. This is implicitly true for recycled log page slots since a retired log page has enough metadata to never be confused for a new valid log page. However when a storage device is first initialized or when space is reclaimed that had potentially been used to store application data pages the log page slots may need to be initialized before they are added to the log page slot pool. In some embodiments rebalancing reclaiming log space may be performed as a background task.

In some embodiments a segment may consist of three main parts or zones one that contains a hot log one that contains a cold log and one that contains user page data. Zones are not necessarily contiguous regions of an SSD. Rather they can be interspersed at the granularity of the storage page. In addition there may be a root page for each segment that stores metadata about the segment and its properties. For example the root page for a segment may store the user page size for the segment the number of user pages in the segment the current beginning head of the hot log zone which may be recorded in the form of a flush number the volume epoch and or access control metadata.

In some embodiments the hot log zone may accept new writes from the client as they are received by the storage node. Both Delta User Log Records DULRs which specify a change to a user data page in the form of a delta from the previous version of the page and Absolute User Log Records AULRs which specify the contents of a complete user data page may be written completely into the log. Log records may be added to this zone in approximately the order they are received e.g. they are not sorted by LSN and they can span across log pages. The log records may be self describing e.g. they may contain an indication of their own size. In some embodiments no garbage collection is performed in this zone. Instead space may be reclaimed by truncating from the beginning of the log after all required log records have been copied into the cold log. Log sectors in the hot zone may be annotated with the most recent known unconditional VDL each time a sector is written. Conditional VDL CLRs may be written into the hot zone as they are received but only the most recently written VDL CLR may be meaningful.

In some embodiments the distributed storage systems described herein may maintain various data structures in memory. For example for each user page present in a segment a user page table may store a bit indicating whether or not this user page is cleared i.e. whether it includes all zeroes the LSN of the latest log record from the cold log zone for the page and an array list of locations of all log records from the hot log zone for page. For each log record the user page table may store the sector number the offset of the log record within that sector the number of sectors to read within that log page the sector number of a second log page if the log record spans log pages and the number of sectors to read within that log page. In some embodiments the user page table may also store the LSNs of every log record from the cold log zone and or an array of sector numbers for the payload of the latest AULR if it is in the cold log zone.

In some embodiments of the distributed storage systems described herein an LSN index may be stored in memory. An LSN index may map LSNs to log pages within the cold log zone. Given that log records in cold log zone are sorted it may be to include one entry per log page. However in some embodiments every non obsolete LSN may be stored in the index and mapped to the corresponding sector numbers offsets and numbers of sectors for each log record.

In some embodiments of the distributed storage systems described herein a log page table may be stored in memory and the log page table may be used during garbage collection of the cold log zone. For example the log page table may identify which log records are obsolete e.g. which log records can be garbage collected and how much free space is available on each log page.

In the storage systems described herein an extent may be a logical concept representing a highly durable unit of storage that can be combined with other extents either concatenated or striped to represent a volume. Each extent may be made durable by membership in a single protection group. An extent may provide an LSN type read write interface for a contiguous byte sub range having a fixed size that is defined at creation. Read write operations to an extent may be mapped into one or more appropriate segment read write operations by the containing protection group. As used herein the term volume extent may refer to an extent that is used to represent a specific sub range of bytes within a volume.

As noted above a data volume may consist of multiple extents each represented by a protection group consisting of one or more segments. In some embodiments log records directed to different extents may have interleaved LSNs. For changes to the volume to be durable up to a particular LSN it may be necessary for all log records up to that LSN to be durable regardless of the extent to which they belong. In some embodiments the client may keep track of outstanding log records that have not yet been made durable and once all ULRs up to a specific LSN are made durable it may send a Volume Durable LSN VDL message to one of the protection groups in the volume. The VDL may be written to all synchronous mirror segments i.e. group members for the protection group. This is sometimes referred to as an Unconditional VDL and it may be periodically persisted to various segments or more specifically to various protection groups along with write activity happening on the segments. In some embodiments the Unconditional VDL may be stored in log sector headers.

More specifically in this example protection group includes extents a c which include data from ranges respectively and these extents are mapped to segments . Protection group includes extent d which includes data striped from range and this extent is mapped to segments . Similarly protection group includes extent e which includes data striped from range and is mapped to segments and protection group includes extent f which includes data striped from range and is mapped to segment . In this example protection group includes extent g which includes data striped from range and is mapped to segments and protection group includes extent h which also includes data striped from range and is mapped to segments .

Please note that the striping erasure coding and other storage schemes for the database volume apply to the user data space of the database volume not the log records pertaining to the volume. Log records are segmented across protection groups according to the partition of the volume maintained at the protection group. For example log records indicating updates to the user data striped from range maintained in PG pertain to the user data in PG .

The distributed storage service and database service discussed in provide examples of a distributed data store storing a data volume for a storage client e.g. the database and providing volume recovery access to multiple recovery agents. However various other types of distributed storage systems may be implement which may not be log structured along with other types of storage clients which may not be databases. is a high level flowchart illustrating a technique for implementing volume recovery access in a distributed data store for multiple recovery agents according to some embodiments. Various different distributed data stores volume recovery services storage clients may implement the techniques described below.

As indicated at a data volume may be maintained for a storage client a data distributed data store that grants access to the data volume according to a single writer consistency scheme. For example the single writer consistency scheme may require storage clients to obtain a particular lock or other token that is exclusively possessed prior to writing to the data volume. As discussed above in various embodiments a volume state scheme may be implemented that allows the possessor of the current volume epoch identifier to perform write requests if the data volume is opened from a clean volume state and or a dirty volume state. Current writers may be evicted or prevented from write access if the current volume epoch identifier changes e.g. due to a new writer opening the data volume or any other change to the volume state . Data for the data volume may distributed among various storage nodes servers or storage locations in many different ways such as the protection group schemes described above with regard to .

As indicated at a recovery event for the data volume may be detected. A recovery event may be any event that identifies triggers or causes a recovery operation to be performed for the data volume. In some embodiments a request to release the data volume may be received e.g. from a storage client or other client or a system administrator for the distributed data store . In some embodiments a failure of the storage client or other writing client may be detected. In some embodiments a request or indication from the storage client may be received that indicates that the storage client is finished with the data volume or will not resume after a failure. In response to detecting the recovery event the data volume may be made available for two or more recovery agents to access the data volume as part of performing respective recovery operations as indicated at . Whereas prior to detecting the recovery event only a single writer could write to the data volume multiple recovery agents may be allowed although only one recovery agent may actually perform a recovery operation to access the data volume and perform writes as part of their respective recovery operations. For example the locking mechanism or other mutually exclusive enforcement mechanism may be disengaged. In at least some embodiments the data volume state may be updated to be set to a recovery volume state. Unlike the clean and dirty volume states as described above with regard to the recovery state may allow multiple writers to access the data volume as long as they have obtained the current volume epoch indicator corresponding to the recovery volume state. described below provide examples of recovery agents which may be a storage client or recovery service agent performing recovery operations to recover a data volume in a recovery volume state including volume epoch identifiers.

Recovery operations may be performed in many different ways. Generally recovery operations may identify a consistent view of a data volume that may be considered authoritative for future read and write access and making the consistent view available. Recovery operations may not necessarily produce the same view of the data volume as storage failures or other information may change while different recovery agents are performing a recovery operation . For log structured distributed data stores performing a recovery operation may include determining a recovery point in the log of a data volume that maintains consistent view of the data volume. For example candidate log records for recovery may be requested from each of multiple protection groups storing the log for the data volume. As noted above the log for the data volume may be segmented among protection groups according to a partition of the user data in various embodiments implementing a log structured distributed data store. Each protection group may maintain a segment of log records a log specific to the protection group from which volume wide recovery may be performed. Candidate log records may be log records that indicate possible recovery points for the log for the data volume. Once received the candidate log records may be evaluated to identify a recovery point in the log for the data volume according to a log sequence number space. In some embodiments log sequence numbers assigned from the log sequence number space for the data volume may be sparse. Thus metadata may be included with candidate log records that indicates previous log sequence numbers in the log sequence number space in the data volume in some embodiments.

Additionally recovery operations may provide information so that the consistent view of the data is made available or visible to future read clients or write clients. This information may be written to various locations or storage nodes maintaining the data volume in various embodiments as well as a data store maintaining volume metadata e.g. volume manager discussed above in . Continuing with the log structured data store example in at least some embodiments the recovery point may indicate a truncation point or range in the log excluding log records with log sequence numbers within the truncated range from the view of the data volume. This truncation point along with the range of excluded log records may be sent to and persisted at each of the protection groups so that when as discussed in the example above of applying log records at the storage nodes log records are applied at the protection groups the truncated log records may not be applied.

The first recovery operation to be completed may be detected as indicated by the positive exit from . In various embodiments completion may be detected by determining the first recovery agent to send a request to modify the volume state either to clean or dirty. In response to detecting the first complete recovery operation granting access to the data volume according to the single writer consistency scheme may be resumed as indicated at . For example a writer must obtain the current volume epoch indicator in some embodiments in order to write to the data volume.

As noted above both storage clients and other recovery agents may perform volume recovery operations to recovery a data volume. For a data volume recovery service such as recovery service described above in or any other system or component that facilitates data recovery without the need of a storage client opening a data volume various dynamic techniques may be implemented to automatically or intelligently determine when to perform a volume recovery operation. is a high level flowchart illustrating a technique for directing recovery agents to perform a volume recovery operation for a data volume according to some embodiments.

As indicated at a volume state for a data volume may be maintained. As indicated at the volume state for the data volume may be monitored in various embodiments. For example the amount of time a volume is set to a recovery state may be monitored or evaluated. As indicated at one or more recovery agents may be directed to recover the data volume based at least in part on the monitoring of the volume state for the data volume. If a time period or timeout is exceeded for example based on the monitoring of the time spent in a recovery state then recovery agents may be directed to recover the data volume. In some embodiments it may be that as soon as a data volume transitions to a recovery volume state one or more recovery agents may be directed to begin performing recovery operations. Information such as a volume epoch indicator may be provided to recovery agents in order to allow them to perform recovery operations.

Providing multiple recovery agents with access to a data volume for recovery may involve managing transitions between states for a data volume. discussed above provides various examples of the different types of volume states and conditions to transfer between each state. In some embodiments requests to change volume state may need to be processed in such a way so as not to allow recovery agents storage clients or any other actors that modify volume state to modify the volume state based on a stale view of the data volume. is a high level flowchart illustrating a technique for handling volume state change requests for a data volume according to some embodiments.

As indicated at a request to modify volume state for a data volume may be received that includes a data volume epoch indicator. In various embodiments the data volume epoch indicator may be a monotonically increasing indicator that is increased each time there is a change in the data volume state. Therefore the included data volume epoch indicator in the request may be evaluated to determine if it is valid as the current volume epoch indicator as indicated at . For instance if the current volume epoch indicator for the data volume as maintained at a volume manager or other authoritative source for the current volume epoch indicator then it may be determined whether the included data volume epoch indicator matches the current data volume epoch indicator. If not as indicated by the negative exit the request to modify the data volume state may be denied as indicated at . In some embodiments an error message or other denial may include the current data volume epoch indicator and or other state information for the data volume in a response. If the data volume epoch indicator in the request is valid as indicated by the positive exit from then the volume epoch indicator may be incremented and the data volume state modified as in the request. In some embodiments the incrementing of the volume epoch indicator and modification of the volume state may be performed atomically so that either both values are updated or both values are not updated. In this way a failure may not cause a discrepancy between the volume epoch indicator and the volume state. Once updated the incremented volume epoch indicator may be returned in response to the request as indicated at .

While performing the recovery operation for the data volume the recovery service agent may detect that a higher volume epoch indicator applies to the state of the data volume. For example when write or read requests are sent to storage nodes the recovery service client may include the volume epoch indicator obtained at . If the volume epoch indicator is no longer the highest the storage nodes that receive the access requests may send an error response and or indication of the new higher volume epoch indicator. Based on responses from the storage nodes it may be determined whether higher volume epoch indicator exists for the data volume as indicated at . If a higher volume epoch indicator is detected as indicated by the positive exit from then the recovery operation may be aborted as indicated at . As noted above in a higher volume epoch indicator may indicate that the state of the data volume has changed e.g. another recovery operation completed first . However if no higher volume epoch indicator is detected as indicated by the negative exit from then the recovery service agent may continue with performing the recovery operation. Upon completion of the recovery operation the recovery service agent may send a request to modify the volume state to a clean volume state as indicated at . The request may include the received volume epoch indicator. Although not illustrated if an error response or other indication that the volume epoch indicator is higher is received then the recovery service agent may abort the recovery operation as described at .

If however the data volume is in recovery state as indicated by the positive exit from then the storage client may perform a recovery operation for the data volume as indicated at . Similarly to the recovery operation discussed above with regard to the recovery operation may evaluate and determine a consistent view of the data volume as well as perform at least one write to the data volume to indicate the consistent view of the data volume. While performing the recovery operation for the data volume the storage client may detect that a higher volume epoch indicator applies to the state of the data volume. For example when write or read requests are sent to storage nodes the storage client may include the volume epoch indicator received at . If the volume epoch indicator is no longer the highest the storage nodes that receive the access requests may send an error response and or indication of the new higher volume epoch indicator. Based on responses from the storage nodes it may be determined whether higher volume epoch indicator exists for the data volume as indicated at . If a higher volume epoch indicator is detected as indicated by the positive exit from then the opening of the data volume and the recovery operation may be aborted as indicated at . As noted above in a higher volume epoch indicator may indicate that the state of the data volume has changed e.g. another recovery operation completed first . However if no higher volume epoch indicator is detected as indicated by the negative exit from then the storage client may continue with performing the recovery operation.

Upon completion of the recovery operation the storage client may send a request to modify the volume state to a dirty volume state as indicated at . The request may include the received volume epoch indicator. In some embodiments a response may be received either providing another volume epoch indicator and an indication that the volume is now in dirty volume state as indicated by the positive exit from . The data volume may then be considered available to the storage client for write access as indicated at . Thus the storage client may have mutually exclusive write access to the data volume. If however a response is received that does not indicate the data volume state is now the dirty data volume state e.g. an error indication or indication of a different volume state such as the recovery volume state then the opening of the data volume by the storage client may be aborted as indicated at .

The methods described herein may in various embodiments be implemented by any combination of hardware and software. For example in one embodiment the methods may be implemented by a computer system e.g. a computer system as in that includes one or more processors executing program instructions stored on a computer readable storage medium coupled to the processors. The program instructions may be configured to implement the functionality described herein e.g. the functionality of various servers and other components that implement the database services systems and or storage services systems described herein . The various methods as illustrated in the figures and described herein represent example embodiments of methods. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Computer system includes one or more processors any of which may include multiple cores which may be single or multi threaded coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface . In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA. The computer system also includes one or more network communication devices e.g. network interface for communicating with other systems and or components over a communications network e.g. Internet LAN etc. . For example a client application executing on system may use network interface to communicate with a server application executing on a single server or on a cluster of servers that implement one or more of the components of the database systems described herein. In another example an instance of a server application executing on computer system may use network interface to communicate with other instances of the server application or another server application that may be implemented on other computer systems e.g. computer systems .

In the illustrated embodiment computer system also includes one or more persistent storage devices and or one or more I O devices . In various embodiments persistent storage devices may correspond to disk drives tape drives solid state memory other mass storage devices or any other persistent storage device. Computer system or a distributed application or operating system operating thereon may store instructions and or data in persistent storage devices as desired and may retrieve the stored instruction and or data as needed. For example in some embodiments computer system may host a storage system server node and persistent storage may include the SSDs attached to that server node.

Computer system includes one or more system memories that are configured to store instructions and data accessible by processor s . In various embodiments system memories may be implemented using any suitable memory technology e.g. one or more of cache static random access memory SRAM DRAM RDRAM EDO RAM DDR 10 RAM synchronous dynamic RAM SDRAM Rambus RAM EEPROM non volatile Flash type memory or any other type of memory . System memory may contain program instructions that are executable by processor s to implement the methods and techniques described herein. In various embodiments program instructions may be encoded in platform native binary any interpreted language such as Java byte code or in any other language such as C C Java etc. or in any combination thereof. For example in the illustrated embodiment program instructions include program instructions executable to implement the functionality of a database engine head node of a database tier or one of a plurality of storage nodes of a separate distributed storage system that stores databases and associated metadata on behalf of clients of the database tier in different embodiments. In some embodiments program instructions may implement multiple separate clients server nodes and or other components.

In some embodiments program instructions may include instructions executable to implement an operating system not shown which may be any of various operating systems such as UNIX LINUX Solaris MacOS Windows etc. Any or all of program instructions may be provided as a computer program product or software that may include a non transitory computer readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to various embodiments. A non transitory computer readable storage medium may include any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . Generally speaking a non transitory computer accessible medium may include computer readable storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM coupled to computer system via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computer system as system memory or another type of memory. In other embodiments program instructions may be communicated using optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In some embodiments system memory may include data store which may be configured as described herein. For example the information described herein as being stored by the database tier e.g. on a database engine head node such as a transaction log an undo log cached page data or other information used in performing the functions of the database tiers described herein may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. Similarly the information described herein as being stored by the storage tier e.g. redo log records coalesced data pages and or other information used in performing the functions of the distributed storage systems described herein may be stored in data store or in another portion of system memory on one or more nodes in persistent storage and or on one or more remote storage devices at different times and in various embodiments. In general system memory e.g. data store within system memory persistent storage and or remote storage may store data blocks replicas of data blocks metadata associated with data blocks and or their state database configuration information and or any other information usable in implementing the methods and techniques described herein.

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the system including through network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems which may implement one or more storage system server nodes database engine head nodes and or clients of the database systems described herein for example. In addition network interface may be configured to allow communication between computer system and various I O devices and or remote storage . Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer systems . Multiple input output devices may be present in computer system or may be distributed on various nodes of a distributed system that includes computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of a distributed system that includes computer system through a wired or wireless connection such as over network interface . Network interface may commonly support one or more wireless networking protocols e.g. Wi Fi IEEE 802.11 or another wireless networking standard . However in various embodiments network interface may support communication via any suitable wired or wireless general data networks such as other types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol. In various embodiments computer system may include more fewer or different components than those illustrated in e.g. displays video cards audio cards peripheral devices other network interfaces such as an ATM interface an Ethernet interface a Frame Relay interface etc. 

It is noted that any of the distributed system embodiments described herein or any of their components may be implemented as one or more network based services. For example a database engine head node within the database tier of a database system may present database services and or other types of data storage services that employ the distributed storage systems described herein to clients as network based services. In some embodiments a network based service may be implemented by a software and or hardware system designed to support interoperable machine to machine interaction over a network. A network based service may have an interface described in a machine processable format such as the Web Services Description Language WSDL . Other systems may interact with the network based service in a manner prescribed by the description of the network based service s interface. For example the network based service may define various operations that other systems may invoke and may define a particular application programming interface API to which other systems may be expected to conform when requesting the various operations.

In various embodiments a network based service may be requested or invoked through the use of a message that includes parameters and or data associated with the network based services request. Such a message may be formatted according to a particular markup language such as Extensible Markup Language XML and or may be encapsulated using a protocol such as Simple Object Access Protocol SOAP . To perform a network based services request a network based services client may assemble a message including the request and convey the message to an addressable endpoint e.g. a Uniform Resource Locator URL corresponding to the network based service using an Internet based application layer transfer protocol such as Hypertext Transfer Protocol HTTP .

In some embodiments network based services may be implemented using Representational State Transfer RESTful techniques rather than message based techniques. For example a network based service implemented according to a RESTful technique may be invoked through parameters included within an HTTP method such as PUT GET or DELETE rather than encapsulated within a SOAP message.

The various methods as illustrated in the figures and described herein represent example embodiments of methods. The methods may be implemented manually in software in hardware or in a combination thereof. The order of any method may be changed and various elements may be added reordered combined omitted modified etc.

Although the embodiments above have been described in considerable detail numerous variations and modifications may be made as would become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

