---

title: Managing access to an on-demand service
abstract: Provided are mechanisms and methods for managing a risk of access to an on-demand service as a condition of permitting access to the on-demand service. These mechanisms and methods for providing such management can enable embodiments to help prohibit an unauthorized user from accessing an account of an authorized user when the authorized user inadvertently loses login information. The ability of embodiments to provide such management may lead to an improved security feature for accessing on-demand services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565182&OS=09565182&RS=09565182
owner: salesforce.com, inc.
number: 09565182
owner_city: San Francisco
owner_country: US
publication_date: 20140719
---
This application is a continuation of U.S. patent application Ser. No. 13 874 349 filed on Apr. 30 2013 which is a continuation of U.S. patent application Ser. Nos. 13 424 271 and 13 424 265 each filed on Mar. 19 2012 and each a continuation of U.S. patent application Ser. No. 12 271 661 filed on Nov. 14 2008 now U.S. Pat. No. 8 584 212 which claims the benefit of U.S. Provisional Application 60 988 263 filed on Nov. 15 2007. Each of the above applications is incorporated by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The current invention relates generally to on demand services and more particularly to providing security for such on demand services.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request.

There is often a desire to provide security to the aforementioned database systems. To date however these systems have been vulnerable to attacks such as phishing and other techniques used to access an account of a user. For example such systems may become vulnerable when login information of a user is obtained using a phishing site or a keystroke logger. As a result the user account and organizations associated with the account are vulnerable to attack.

In accordance with embodiments there are provided mechanisms and methods for managing a risk of access to an on demand service as a condition of permitting access to the on demand service. These mechanisms and methods for providing such management can enable embodiments to help prohibit an unauthorized user from accessing an account of an authorized user when the authorized user inadvertently loses login information. The ability of embodiments to provide such management may lead to an improved security feature for accessing on demand services.

In an embodiment and by way of example a method is provided for managing a risk of access to an on demand service as a condition of permitting access to the on demand service. In use a request to access an on demand service is received from a requestor at one of a plurality of entities. It is determined whether the request is from a source providing a risk of access the determination being based at least in part on stored information associated with at least one of a plurality of users or the one of the plurality of entities. Furthermore the risk of access to the on demand service by the requestor is managed as a condition of permitting the requestor to access the on demand service. By this framework the management of such risk may lead to an improved security feature for accessing on demand services.

While the present invention is described with reference to an embodiment in which techniques for managing a risk of access to an on demand service may be implemented in an application server providing a front end for a multi tenant database on demand service the present invention is not limited to multi tenant databases or deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for managing a risk of access to an on demand service as a condition of permitting access to the on demand service.

There is a desire to provide security to on demand database systems. To date however these systems have been vulnerable to attacks such as phishing and other techniques used to access an account of a user. For example such systems may become vulnerable when login information of a user is obtained using a phishing site or a keystroke logger. As a result the user account and organizations associated with the account are vulnerable to attack. Thus mechanisms and methods are provided herein for managing a risk of access to an on demand service as a condition of permitting access to the on demand service. The ability of embodiments to provide such management may lead to an improved security feature for accessing on demand services.

Next mechanisms and methods will be described for managing a risk of access to an on demand service as a condition of permitting access to the on demand service in accordance with various exemplary embodiments.

In the context of the present description an on demand service may include any service that is accessible over a network. For example in one embodiment the on demand service may include an on demand database service. In this case an on demand database service may include any service that relies on a database system that is accessible over a network.

Furthermore in the context of the present description an entity refers to any organization company individual or corporation etc. that may utilize the on demand service. The requestor may include any user or system capable of requesting access to the on demand service. The requestor may be associated with and or a member of the one of the plurality of entities.

Once the request to access the on demand service is received it is determined whether the request is from a source providing a risk of access the determination being based at least in part on stored information associated with at least one of a plurality of users or the one of the plurality of entities. See operation . The risk of access may include a risk to the on demand service users and or entities associated therewith. In this case the determination may be based at least in part on stored information associated with the plurality of users the entity or both.

For example in one embodiment determining whether the request is from a source providing the risk of access may be based at least in part on stored information associated with the plurality of users. In another embodiment determining whether the request is from a source providing the risk of access may be based at least in part on stored information associated with the one of the plurality of entities.

Furthermore the plurality of users may each be associated with the entity. For example the users may be members employees representatives etc. of the entity. Additionally the information associated with the users and the entity may include any type of information such as login information subscription information security information computer or other device information and or any other information.

Determining whether the request for access is from a source providing a risk of access may occur in a variety of ways. For example in one embodiment determining whether the request is from a source providing a risk of access may include determining whether the request is from an unknown source. In this case a list or database including a plurality of known sources may be provided.

Thus a source of the request may be compared to the list of known sources. The sources may include entity sources and or user sources. For example information may be stored for a plurality of known entities and or a plurality of users that may or may not be associated with those entities.

In another embodiment determining whether the request is from a source providing a risk of access may include determining whether the request is from an unknown IP address. In this case a list or database including a plurality of known IP addresses may be provided. Thus an IP address of a source of the request may be compared to the list of known IP addresses. The sources may include IP address associated with entity sources and or user sources.

In still another embodiment determining whether the request is from a source providing a risk of access may include determining whether the request is from a known IP address. In this case the known IP address may be associated with a known trusted source e.g. a white listed source etc. or a known un trusted source e.g. a black listed source etc. .

As shown further in the risk of access to the on demand service by the requestor is managed as a condition of permitting the requestor to access the on demand service. See operation . Managing the risk of access to the on demand service by the requestor as a condition of permitting the requestor to access the on demand service may include a variety of management techniques.

For example in one embodiment managing the risk of access to the on demand service by the requestor as a condition of permitting the requestor to access the on demand service may include challenging the requestor to authenticate via email. In this case an email may be sent to the requestor using an email address stored at or accessible by the on demand service. The requestor may then authenticate any login credentials utilizing information included in the email. Upon authentication the requestor may be permitted to access the on demand service.

In another embodiment managing the risk of access to the on demand service by the requestor as a condition of permitting the requestor to access the on demand service may include challenging the requestor to provide a valid token. As an option a token may be provided to the requestor. In this case the token may be provided to the requestor in a message e.g. an email a text message etc. . The user may then validate the token such that access to the on demand service is permitted.

In still another embodiment managing the risk of access to the on demand service by the requestor as a condition of permitting the requestor to access the on demand service may include determining whether the requestor is permitted access by referencing at least one white list known only to the on demand service. For example the on demand service may maintain or have access to a white list. The white list may be accessed and it may be determined based on the white list that the requestor is permitted to access the on demand service. In the context of the present description a white list refers to any list including trusted or accepted users and or entities.

In yet another embodiment managing the risk of access to the on demand service by the requestor as a condition of permitting the requestor to access the on demand service may include determining whether the requestor is permitted access by referencing at least one black list known only to the on demand service. For example the on demand service may maintain or have access to a black list. The black list may be accessed and it may be determined based on the black list that the requestor is not permitted to access the on demand service. In the context of the present description a black list refers to any list including untrusted or unaccepted users and or entities. As an option the white list and the black list may be combined into one list with indicators indicating whether an associated user and or entity are part of the white list or black list e.g. allowed or blocked etc. .

It should be noted that the request to access the on demand service may be received from the requestor in a variety of ways. For example in one embodiment receiving the request to access the on demand service may include receiving a login request via a user interface. In this case the requestor may provide login information using a user interface e.g. a user interface associated with the on demand service etc. . In another embodiment receiving the request to access the on demand service may include receiving a login request via an application programming interface API . In this case login information associated with the requestor or a device of the requestor may be provided using an API e.g. an API associated with a local or remote application etc. .

As shown the on demand service may include an on demand database service. In one embodiment the on demand database service may include a multi tenant on demand database service. In the present description such multi tenant on demand database service may include any service that relies on a database system that is accessible over a network in which various elements of hardware and software of the database system may be shared by one or more customers. For instance a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

As shown the on demand database service may communicate with a plurality of developers . In use the on demand database service is adapted to receive developed applications from the developers . In the context of the present description the developers may include any one or more entities e.g. individuals corporation organization etc. that develop computer code. Further the applications may include any computer code e.g. a complete program a partial program a code segment etc. .

In addition the on demand database service communicates with one or more tenants of the on demand database service . In the aforementioned embodiment where the on demand database service includes a multi tenant on demand database service a plurality of the tenants may exist. In any case a tenant refers to any one or more persons or entities that are capable of accessing the on demand database service in the present description. For example the tenant s may subscribe to the on demand database service .

By this design the on demand database service serves to provide access to the applications to the tenant s of the on demand database service . In use the aforementioned applications may be under the control of the on demand database service . By administering such control an improved development runtime framework etc. is thereby provided.

In various embodiments such control may be administered in any desired manner. For example the on demand database service may enforce any desired policies by precluding access to applications by the tenant s in situations where the applications do not adhere to the policies. In other embodiments the on demand database service may enforce such policies by precluding or limiting functionality accessible to the developers in such non compliant scenario. For example publication of an application to the on demand database service may be disallowed in the absence of meeting certain requirements. In one specific embodiment the on demand database service may monitor and limit various aspects of the applications and terminate related code based on a dynamic contextual limiter. Of course the foregoing control may be implemented in any desired manner.

In one embodiment the aforementioned control may take the form of limiting at least one aspect of the applications by the on demand database service . For instance such aspect may relate to processing storage bandwidth etc. resources made available to the applications of the developers . By this design the on demand database service may be able constrain the developers in a way that optimizes the ability of the on demand database service to service the tenant s via the applications.

In various embodiments such resources related aspect may involve a database associated with the on demand database service a manner in which such database may be accessed utilizing the applications etc. In such embodiments the foregoing aspect may include but is not limited to a number of columns of a database a number of queries to a database in a predetermined timeframe a number of rows returned by queries a number of database statements e.g. modification statements etc. a number of script statements between database statements a number of rows processed e.g. modified etc. in a predetermined timeframe a number of transaction statements a total number of uncommitted rows since a last transaction control statement a total number of script statements since a last database call a duration of processing etc.

Of course such exemplary list is not to be construed as limiting. For example any aspect of the on demand database service e.g. electronic mail management etc. may also be limited as well. In one specific instance a number of e mails one can send per request and or a number of outbound web service calls made per request may be limited. In various embodiments limits may be applied to an application on a per request basis or on a per time period e.g. per day basis. In the latter embodiment such limitation may apply on a per user or per tenant basis.

In still additional embodiments access to the applications by the tenant s of the on demand database service may be controlled. For instance a single instance of each application may be instantiated among a plurality of the tenant s of the on demand database service . Thus only a single copy of the application need be stored by the on demand database service and simultaneously shared amongst the tenant s in the foregoing manner.

It should be that the forgoing control may be static or dynamic may or may not be uniformly applied etc. For example the foregoing aspects and related control criteria may or may not be different for different applications tenants etc. Just by way of example the on demand database service may allow for more resources when running an upgrade script with respect to when running a per row database trigger etc. Further the on demand database service may allow for more resources for large tenants etc.

In one embodiment the on demand database service may be utilized to manage a risk of access to the on demand service as a condition of permitting access thereto. In this case the managing may include managing a risk of access to the on demand service by a requester tenant as a condition of permitting the requestor tenant to access the on demand service. In this way the management of such risk may lead to an improved security feature for accessing on demand services.

For example this management may help prevent phishers from accessing an account of one of the tenant s if the tenant inadvertently loses login information e.g. a username and password etc. . In one embodiment this may be accomplished by determining whether a successful login has ever been completed for a particular user device e.g. a computer mobile phone PDA etc. from which a request for access has been sent. If the device has previously been used to log into the on demand service access may again be allowed to the on demand service given user login information is verified. If the device has not previously been used to log into the on demand service access may be prohibited until additional information is provided.

In one embodiment the additional information may include information associated with a user of the device who is requesting access to the on demand service i.e. the requestor . In this case it may be desirable to further authenticate the user to determine if this user is the valid holder of the credentials provided for login or if the user is a fraudulent user who obtained the credentials.

As an example a user may attempt to log into or access an on demand service from a computer that is not recognized or registered with the on demand service. The on demand service may then send the user an email. The email may be sent to an email address stored by the on demand service that corresponds to login information provided by the user e.g. a username password etc. . This email address may have been supplied to an on demand service provider upon subscription to the on demand service for example.

In one embodiment the email may include a link to the on demand database service and a unique token. Upon selection of the link by the user the token may be validated. If the validation is successful the computer may be registered for that user.

In the case where a device sending the request is not recognized two scenarios may be present. First a valid user may be logging in from a new machine. Second a fraudulent user may be trying to login with stolen credentials. In the case of a valid user the valid user will receive the email and be able to further authenticate the identity of the user. In the case of the fraudulent user the fraudulent user will not receive the email and thus will not perform the additional authentication step.

The authentication email may be generated as soon as the valid username and password are entered from a machine that is not recognized as registered. As noted this email may include a token. The token may include any token or key capable of being utilized to validate a user.

In one embodiment the token may include a Base 64 encoded querystring parameter that is AES 128 bit encrypted with a unique key for every user. Furthermore as an option there may be several parameters used for validation encrypted within the querystring. For example in various embodiments the parameters may include a username e.g. for the requestor etc. an entity identification e.g. an organization ID associated with the requestor etc. an IP address e.g. indicating where the request originated etc. a time stamp of initial request and or various other parameters capable of being used for validation.

As another option the token may be a one time use token. In this case after the token is used once it may not be re used. Furthermore the token may be configured to expire after a predetermined amount of time. In one embodiment the token may not be valid for longer than ten minutes. This may help prevent replay attacks. The time stamp of initial request parameter may be utilized to determine whether this time criteria is met.

When a valid user receives the email the user may then click on the link and in turn validate the token and register the device that sent the request. Once the token is validated at the on demand service the on demand service may allow the user access and may set a machine identifier on the user device such that in the future the device will be recognized.

The machine identifier may be set using various techniques. For example in one embodiment a cookie may be utilized to set the machine identifier. In this case the cookie may be a permanent cookie. In various other embodiments the machine identifier may be set using flash local storage userData e.g. for Internet Explorer etc. and document object model DOM storage e.g. for Firefox 2 etc. .

In one embodiment the machine identifier may be set using multiple or all of a cookie flash local storage userData and DOM storage. As an option all of these may be set with the same value to minimize the number of times users are required to register a machine. For example if a user chose to clear cookies every time the browser is closed the machine identifier may be recreated by accessing one of the values that has not been deleted. Additionally a client side script may be utilized to ensure that if one of these storage options is populated the rest of the storage options are populated as well. In still other embodiments the machine ID may be set in a querystring of a browser bookmark corresponding to the on demand service.

In one embodiment the machine identifier may be a token that has a long shelf life. In this case the machine identifier may be configured to expire after a predetermined amount of time to prevent malware from stealing the password and cookie associated with the machine identifier. As an option the machine identifier or an encrypted token including the machine identifier may include a timestamp of when the machine identifier was set and information about a user the machine identifier is associated with. As another option the machine identifier may be associated with an IP address.

When the on demand service receives a machine identifier cookie the on demand service may validate that that the cookie is being used by the correct user and may analyze an associated time stamp. If the timestamp is older than a predetermined amount of time e.g. more than one week old etc. a new machine identifier may be generated. Regenerating a new machine identifier may not require that the user re register the user device because the new cookie value may be set by the on demand service.

Any other machine identifier storage objects e.g. a cookie flash local storage userData etc. may also be updated on the side of the user device i.e. the client side . Once the machine identifier is set the user device is registered. It should be noted that the machine identifiers may be unique for every user and associated user device.

When a device of a user is already registered with the on demand service the user may not need to perform any other functions to identify themselves beyond initially providing a username and password. When the user logs in the machine identifier cookie may be provided in a request for access to the on demand service along with the login credentials. The machine identifier the username and password etc. may be validated and if everything is correct the user may be allowed access to the on demand service.

As shown a login page is displayed to a user. See operation . Using this login page a user may enter login information such as a username and password. This login information may be provided as a request for access to a server associated with an on demand service. As an option the request may also include a machine identifier ID of a device e.g. a laptop computer desktop computer handheld computer etc. that the user is using to perform the login.

Once the user enters in the login information it is determined whether the username and password entered by the user are valid. See operation . If the username and password are valid it is determined whether the machine ID of the user device is valid. See operation .

In this case validity of the machine ID may be determined by comparing the machine ID to one or more machine IDs of devices associated with the user. Information regarding the one or more machine IDs of the devices associated with the user may be accessible by the on demand service. If it is determined that the machine ID is a valid machine ID the user is logged in and allowed access to the on demand service. See operation .

If the machine ID is not recognized and it determined that the machine ID is not a valid machine ID an email including a unique token is sent to the user. See operation . The user may then select a link provided in the email. See operation .

It is then determined whether the link is a valid link. See operation . If the link is a valid link the user is logged in and the machine ID of the user device is set. See operation .

If it is determined that the link is not a valid link an error message is generated and displayed to the user. See operation . As an option this error message may be displayed to the user using the login screen.

Using this technique a request to access an on demand service may be received from a requestor and it may be determined whether the request is from a source providing risk. The risk of access to the on demand service may be assessed and managed as a condition of permitting the requestor to access the on demand service. Thus a user and an associated device that is attempting to login to an on demand service may be challenged using a user interface and or using an API. For example the API of the on demand service may use a security token in order to validate a computer of the user attempting to login. The on demand service may also check the computer attempting to login against one or more white lists or black lists to assess the level of risk in permitting the login.

It should be noted that any individual challenge of the user credentials or combination of challenges may be utilized. For example a user interface challenge may be utilized such that as a user logs into an on demand service of an organization from an unknown IP address and browser the user may be challenged. In this case browsers may be tracked using cookies and IP addresses may be tracked in an on demand service database. As noted above the challenge may come in the form of an email sent to an email account stored by the on demand service and the user may follow a link included in the email to login and register the computer.

As another example API security tokens may be utilized. In this case an API may require a security token to be utilized when an unknown IP address is encountered. The token may be issued via email and may follow a life span of a user password. The token may be configured to work on any version of the API login call. Furthermore in order to issue a token a user may access an interface to reset or set a security token. By using this interface a user may request an email with the token.

In another case unknown IP addresses may be identified as part of an identification step. In order for a computer to become known based on an IP address the on demand service may locate the computer on a white list. The white list may include an entity or organization wide white list such that all members of the organization e.g. users or tenants etc. are identified. This entity wide white list may be utilized to allow users to specify known IP ranges. As an option the on demand service may be configured such that any ranges added to the entity wide white list may not be challenged in the user interface or PI.

As shown the interface shows a plurality of entities and corresponding IP address ranges. In this case a user may utilize the interface to manage trusted entities and corresponding IP address ranges. Using this interface the user may click a New button to add a new trusted IP address range.

As shown the interface may be utilized to add a new trusted IP address range. In this case a user may be permitted to enter a range of IP addresses including a start IP address and an end IP address.

As shown the interface shows a plurality of entities and corresponding IP address ranges. In this case a user may utilize the interface to manage trusted and untrusted entities and corresponding IP address ranges. Using this interface the user may allow or block entities and corresponding IP address ranges.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

It should be noted that any of the different embodiments described herein may or may not be equipped with any one or more of the features set forth in one or more of the following published applications US2003 0233404 titled OFFLINE SIMULATION OF ONLINE SESSION BETWEEN CLIENT AND SERVER filed Nov. 4 2002 US2004 0210909 titled JAVA OBJECT CACHE SERVER FOR DATABASES filed Nov. 17 2003 now issued U.S. Pat. No. 7 209 929 US2005 0065925 titled QUERY OPTIMIZATION IN A MULTI TENANT DATABASE SYSTEM filed Sep. 23 2003 US2005 0223022 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM filed Apr. 2 2004 US2005 0283478 titled SOAP BASED WEB SERVICES IN A MULTI TENANT DATABASE SYSTEM filed Jun. 16 2004 and or US2006 0206834 titled SYSTEMS AND METHODS FOR IMPLEMENTING MULTI APPLICATION TABS AND TAB SETS filed Mar. 8 2005 which are each incorporated herein by reference in their entirety for all purposes.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

