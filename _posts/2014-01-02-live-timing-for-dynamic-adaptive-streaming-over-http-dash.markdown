---

title: Live timing for dynamic adaptive streaming over HTTP (DASH)
abstract: In one example, a client device for receiving information for streaming of media data includes a clock, and one or more processors configured to receive a media presentation description (MPD) for media content, wherein the MPD includes data indicative of wall-clock times at which the client device can retrieve data of the media content from a source device, and wherein the data indicates a synchronization method by which the client device is to synchronize the wall-clock times with the clock, synchronize the clock with the wall-clock times using the method indicated by the MPD, and request data of the media content from the source device using the synchronized clock. A server device or source device may form and provide such an MPD to a client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426196&OS=09426196&RS=09426196
owner: QUALCOMM Incorporated
number: 09426196
owner_city: San Diego
owner_country: US
publication_date: 20140102
---
This application claims the benefit of U.S. Provisional Application Ser. No. 61 749 048 filed Jan. 4 2013 the entire content of which is hereby incorporated by reference.

Digital video capabilities can be incorporated into a wide range of devices including digital televisions digital direct broadcast systems wireless broadcast systems personal digital assistants PDAs laptop or desktop computers digital cameras digital recording devices digital media players video gaming devices video game consoles cellular or satellite radio telephones video teleconferencing devices and the like. Digital video devices implement video compression techniques such as those described in the standards defined by MPEG 2 MPEG 4 ITU T H.263 or ITU T H.264 MPEG 4 Part 10 Advanced Video Coding AVC ITU T H.265 MPEG H Part 2 High Efficiency Video Coding HEVC VP8 VP9 and extensions of such standards to transmit and receive digital video information more efficiently.

Video compression techniques perform spatial prediction and or temporal prediction to reduce or remove redundancy inherent in video sequences. For block based video coding a video frame or slice may be partitioned into macroblocks. Each macroblock can be further partitioned. Macroblocks in an intra coded I frame or slice are encoded using spatial prediction with respect to neighboring macroblocks. Macroblocks in an inter coded P or B frame or slice may use spatial prediction with respect to neighboring macroblocks in the same frame or slice or temporal prediction with respect to other reference frames.

After video data has been encoded the video data may be packetized for transmission or storage. The video data may be assembled into a video file conforming to any of a variety of standards such as the International Organization for Standardization ISO base media file format and extensions thereof such as the AVC file format or the HEVC file format or to the MPEG 2 Transport Stream or other encapsulation formats.

In general this disclosure describes techniques related to signaling time information for live streaming using e.g. dynamic adaptive streaming over HTTP DASH . When performing live streaming media content can only be prepared for transmission after the content has been received e.g. recorded and encoded. In accordance with the techniques of this disclosure a source device may advertise times in wall clock time at which segments of media content will be available. The source device may ensure that a segment is fully formed by the advertised wall clock time. Furthermore the source device may advertise a synchronization method by which client devices can synchronize their local clocks with the wall clock times e.g. to ensure that client and the source device operate on the same time basis. For instance the source device may advertise network time protocol NTP hypertext transfer protocol HTTP Timing Protocol HTP HTTP date headers or RESTFUL APIs using for example the HTTP protocol as a synchronization protocol. The source device may further advertise network addresses for time synchronization servers. The source device may advertise this time synchronization information in a manifest file such as a media presentation description MPD .

In one example a method of receiving information for streaming of media data includes receiving by a client device a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which the client device can retrieve data of the media content from a source device and wherein the data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device synchronizing the clock of the client device with the wall clock times using the method indicated by the MPD and requesting data of the media content from the source device using the synchronized clock.

In another example a client device for receiving information for streaming of media data includes a clock and one or more processors configured to receive a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which the client device can retrieve data of the media content from a source device and wherein the data indicates a synchronization method by which the client device is to synchronize the wall clock times with the clock synchronize the clock with the wall clock times using the method indicated by the MPD and request data of the media content from the source device using the synchronized clock.

In another example a computer readable storage medium has stored thereon instructions that when executed cause a processor of a client device to receive a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which the client device can retrieve data of the media content from a source device and wherein the data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device synchronize the clock of the client device with the wall clock times using the method indicated by the MPD and request data of the media content from the source device using the synchronized clock.

In another example a method of signaling information for streaming of media data includes generating data for a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which a client device can retrieve data of the media content from a source device and wherein the generated data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device and sending the MPD to the client device.

In another example a method of signaling information for streaming of media data includes generating data for a media presentation description MPD for media content wherein the MPD indicates more than one method by which a client device can synchronize wall clock times with a clock of the source device. In one example the client device may select one or more suitable methods to synchronize with wall clock time. For example by picking multiple methods the synchronization with wall clock time may be more accurate.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

In general this disclosure describes techniques for enabling accurate timing between a client and a server in an environment for streaming media data such as a dynamic adaptive streaming over HTTP DASH environment. These techniques may be used to support HTTP Live Streaming HLS . Although generally discussed with respect to DASH and HLS the techniques of this disclosure may be applicable to other network streaming protocols. DASH is specified in ISO IEC 23009 1 2012 Information technology Dynamic adaptive streaming over HTTP DASH Part 1 Media presentation description and segment formats Apr. 1 2012 available at http standards.iso.org ittf PubliclyAvailableStandards c057623 ISO IEC 23009 1 2012.zip. Corrigenda Amendments and additional additions may be available for the standard of ISO IEC 23009 1 and the same technologies may apply to any of these extensions.

In HTTP streaming frequently used operations include GET and partial GET. The GET operation retrieves a whole file associated with a given uniform resource locator URL or uniform resource name URN . The partial GET operation receives a byte range as an input parameter and retrieves a continuous number of bytes of a file where the number of bytes correspond to the received byte range. Thus movie fragments may be provided for HTTP streaming because a partial GET operation can get one or more individual movie fragments. Note that in a movie fragment there can be several track fragments of different tracks. In HTTP streaming a media presentation may be a structured collection of data that is accessible to the client. The client may request and download media data information to present a streaming service to a user.

In the example of streaming 3GPP data using HTTP streaming there may be multiple representations for video and or audio data of multimedia content. As explained below different representations within one adaptation set may correspond to different coding characteristics e.g. different profiles or levels of a video coding standard different coding standards or extensions of coding standards such as multiview and or scalable extensions or different bitrates. Different adaptation sets may contain different source components for example different audio languages or different video views. The manifest of such adaptation sets each containing one or multiple representations may be defined in a Media Presentation Description MPD data structure. A media presentation may correspond to a structured collection of data that is accessible to an HTTP streaming client device. The HTTP streaming client device may request and download media data information to present a streaming service to a user of the client device. A media presentation may be described in the MPD data structure which may include updates of the MPD.

A media presentation may contain a sequence of one or more periods. Periods may be defined by a Period element in the MPD. Each period may have an attribute start in the MPD. The MPD may include an availableStartTime attribute and a start attribute for each period. For media presentations of type dynamic typically used for live services the sum of the start attribute of the period and the MPD attribute availableStartTime and the duration of the media segment may specify the availability time of the period in Coordinated Universal Time UTC format in particular the first Media Segment of each representation in the corresponding period. For media presentations of type static typically used for on demand services the start attribute of the first period may be 0. For any other period the start attribute may specify a time offset between the start time of the corresponding Period relative to the start time of the first Period. Each period may extend until the start of the next Period or until the end of the media presentation in the case of the last period. Period start times may be precise. They may reflect the actual timing resulting from playing the media of all prior periods.

Each period may contain one or more adaptations sets and each of the adaptation sets may contain one or more representations for the same media content. A representation may be one of a number of alternative encoded versions of audio or video data. The representations may differ by encoding types e.g. by bitrate resolution and or codec for video data and bitrate and or codec for audio data. The term representation may be used to refer to a section of encoded audio or video data corresponding to a particular period of the multimedia content and encoded in a particular way.

Adaptation Sets of a particular period may be assigned to a group indicated by a group attribute in the MPD. Adaptation Sets in the same group are generally considered alternatives to each other. For example each Adaptation Set of video data for a particular period may be assigned to the same group such that any of the Adaptation Set may be selected for decoding to display video data of the multimedia content for the corresponding period. The media content within one period may be represented by either one Adaptation Set from group 0 if present or the combination of at most one Adaptation Set from each non zero group in some examples. Timing data for each representation of a period may be expressed relative to the start time of the period.

A representation may include one or more segments. Each representation may include an initialization segment or each segment of a representation may be self initializing. When present the initialization segment may contain initialization information for accessing the representation. In general the initialization segment does not contain media data. A segment may be uniquely referenced by an identifier such as a uniform resource locator URL uniform resource name URN or uniform resource identifier URI . The MPD may provide the identifiers for each segment. In some examples the MPD may also provide byte ranges in the form of a range attribute which may correspond to the data for a segment within a file accessible by the URL URN or URI.

Each representation may also include one or more media components where each media component may correspond to an encoded version of one individual media type such as audio video or timed text e.g. for closed captioning . Media components may be time continuous across boundaries of consecutive media segments within one representation.

In general a DASH client device may access and download an MPD from a DASH server device. That is the DASH client device may retrieve the MPD for use in initiating a live session. Based on this MPD and for each selected Representation DASH client device may make several decisions including determining what is the latest segment that is available on the server device determining the segment availability start time of the next segment and possibly future segments determining when to start playout the segment and from which timeline in the segment and determining when to get fetch a new MPD. Once the service is played out the client device may keep track of drift between the live service and its own playout which needs to be detected and compensated.

HTTP Live Streaming HLS attempts to solve these issues as follows. For each segment that is made available the server device publishes a new MPD. The client device after joining the service retrieves the latest MPD analyzes the playlist and then can access the latest segment. The client device then starts playing out the segment and is configured under the expectation that when playing the segment from the beginning it can continually access the next segment in time. Before fetching a new segment or requiring to fetch one the client device fetches a new MPD providing the location of where to get the latest segment.

SmoothStreaming attempts to solve these issues as follows. For each segment that is made available the server device publishes a new manifest equivalent to an MPD. The client after joining the service retrieves the latest manifest analyzes the latest segment that is available by getting the r attribute of the SegmentTimeLine of the latest S element. This provides the information indicating where to get the latest segment. The client device then starts playing out the segment and is configured under the expectation that when playing the segment from the beginning it can continually access the next segment in time as long as the next request is not before the time resulting from adding the segment duration to the time of the last request. The client therefore continues to construct Segments based on the latest SegmentTimeline.S element without fetching a new manifest until it gets an inband signal that the current manifest is no longer usable. At this point in time that is in response to the signal that the current manifest is no longer usable the client device requests a new manifest.

This disclosure recognizes that the proposed solutions of HLS and SmoothStreaming may encounter similar problems. For example both HLS and SmoothStreaming update the MPD playlist manifest on the server device with each newly available segment. This means that the client device is required to fetch the MPD playlist manifest and use the information in the MPD playlist manifest whenever it joins a live session. In other words joining means MPD playlist manifest fetching and the MPD playlist manifest needs to be the latest MPD playlist manifest. Thus even if templates are used the server needs to update the MPD playlist manifest to accommodate for an r count change. This accounting needs to be done for each Representation. The MPD playlist manifest renewal is especially critical in cases where the MPD playlist manifest is distributed through FLUTE File Delivery over Unidirectional Transport or needs to be pushed into caches. In this case along which each new segment a new MPD playlist manifest needs to be pushed.

As another example the client device does not have information as to at what time the next segment is available published on the server device. That is the client device is configured under the expectation that the next segment is published at the latest after segment duration time. This can be verified by updating the MPD playlist prior to fetching a new segment which is necessary for HLS. Moreover the client does not have information as to whether any presentation time later than the earliest presentation time of the latest available segment can be played out in order to get closer to the live edge without needing to rebuffer later. As a fact of the loose timing model and the client not having information as to when the next segment gets available the client device must be configured under the assumption that the earliest presentation time can played.

Furthermore the client device does not have information as to whether playout by other client devices that download the same segment are synchronized. In addition the client device needs to fetch a new MPD when joining the service to obtain the latest information. This fetching requires at least one MPD fetch round trip time which can impose delay between the request to initiate the live session and the time at which the client device can begin playout.

The main reason for the issues noted above is that the existing techniques of HLS and SmoothStreaming do not provide information on the exact time schedule of the MPD and media segment creation. As an example if one operates on 10 second segments the client has little information as to whether the MPD playlist manifest had just been published or whether it will be published shortly after. So the timing may still be off by up to 10 epsilon seconds with epsilon arbitrarily small but greater than 0. In addition these techniques of HLS and SmoothStreaming require updating the MPD playlist manifest frequently with every newly generated and published segment. No reference clock is available to the client that enables a playout that is closer to the live edge or enables playout synchronized with other clients in the techniques of HLS and SmoothStreaming.

The Moving Pictures Experts Group MPEG DASH and DASH IF DASH 264 AVC techniques also attempt to address this issue. For example in these techniques a number based templating may be used. MPEG DASH attempts to address the above mentioned weaknesses. That is MPEG DASH attempts to operate closer to the live edge to synchronize playout of clients that are consuming the same media presentation to avoid regular updates of the MPD on the server and fetches by the client and to avoid fetching the MPD in real time when joining the service.

In particular MPEG DASH uses a wall clock time documented in the MPD which sets up the live Media Presentation. MPEG DASH assumes that the MPD is generated such that the MPD generation process does have access to an accurate clock. This enables client devices that are synchronized to the wall clock time by any means to operate closer to the live edge. Specifically the following information is available in the MPD when using a number template based Representations and using the using the duration attribute 

Assuming now that the wall clock time at the client is denoted at WT then the client device can derive the following information 

An example of the techniques of MPEG DASH is explained below. In this example let the MPD include the following information 

Assume further that a client device fetches the MPD and the wall clock time is NTP 2011 12 25T12 30 27. This value is denoted as FT in this example.

The client device then derives the latest segment number. That is the client device obtains the latest Period as the Period for which AST PS AST PS d then at least one segment within this Period is available and the client device derives the latest segment number LSN available on the client as LSN floor NTP AST PS SSN floor 15 2 22 29 1 

The client device then derives the segment availability start time SAST for a segment with number SN as SAST SN AST PST SN SSN 1 2 

The client device then schedules the playout based on the available information in the MPD. The client device determines the media presentation time in the Period for each Representation as presentation time value in the media segments minus the value of the presentationTimeOffset if present for each Representation. Each segment with segment number SN includes an earliest presentation time denoted by EPT SN .

Using this information the client device can start scheduling playout taking into account the information in the MPD as well the download speed. A suitable playout time is POT PT MPTS PT if the attribute suggestedPresentationDelay is present. If suggestedPresentationDelay is not present then a suitable playout time takes into account the first second and fourth constraints above i.e. the segment availability times at the server as well as the bitrate variability of the media stream.

The client device uses the MPD to construct segments while the MPD is valid. In particular the client device uses the MPD to construct segments until media time FT MUP. That is the greatest segment number GSN that can be constructed is GSN ceil FT MUP AST PS SSN ceil 45 2 22 45 3 

It should be understood that the latest segment may be shorter than the other segments. Before fetching any data beyond segment number 45 in the example above the client device needs to fetch a new MPD in accordance with MPEG DASH.

More generally to use the same concept with different timing and addressing schemes in DASH the following values are introduced according to ISO IEC 23009 1 

Assuming now that the wall clock time at the client device is denoted as WT the client device can derive the following information 

The client device can derive MPD times using this data. For example if the duration attribute is present and the value divided by the value of timescale is denoted as d then the client device using conventional DASH techniques derives the MPD times as 

In the case that the Segment base information contains a SegmentTimeline element with NS elements indexed with s 1 . . . N then in DASH according to ISO IEC 23009 1 

In DASH according to ISO IEC 23009 1 the addressing method is independent of the usage of the timeline generation. The interpretation of the startNumber depends on the addressing method. If the Representation contains or inherits one or more SegmentList elements providing a set of explicit URL s for Media Segments then the client device determines the position of the first segment in the segment list using startNumber. The segment list then provides the explicit URLs. If the Representation contains or inherits a SegmentTemplate element with Number then the URL of the media segment at position k is obtained by replacing the Number identifier by k 1 startNumber in the SegmentTemplate media string. If the Representation contains or inherits a SegmentTemplate element with Time then the client device obtains the URL of the Media Segment at position k by replacing the Time identifier by MST k de normalized with the value if the timescale attribute in the SegmentTemplate media string.

Furthermore in DASH according to ISO IEC 23009 1 the client device schedules the playout based on the available information in the MPD. The client device determines the media presentation time in a Period for each Representation as presentation time value in the media segments minus the value of the presentationTimeOffset if present for each Representation. Each segment at position k has assigned an earliest media presentation time EPT k .

Using this information the client device can start scheduling playout taking into account the information in the MPD as well the download speed. A suitable playout time is POT PT MPTS PT if the attribute suggestedPresentationDelay is present. If the attribute suggestedPresentationDelay is not present then a suitable playout time takes into account the first second and fourth constraint i.e. the segment availability times at the server as well as the bitrate variability of the media stream.

Under DASH according to ISO IEC 23009 1 the client device can use the MPD to construct and request segments until media time FT MUP and the greatest segment position k that can be constructed by this MPD is the one that results in the greatest value for SAST k and at the same time is smaller than FT MUP. The latest segment may be shorter than the other ones.

In case the template construction with duration or with SegmentTimeline.S r 1 is used the approach of DASH according to ISO IEC 23009 1 may provide several advantages compared to the HLS and SmoothStreaming approach such as

Despite these potential advantages the tighter timing control may also result in some issues that may need more detailed analysis. For example under DASH according to ISO IEC 23009 1 

This disclosure aims to enable accurate timing between client devices and server devices in a DASH environment.

Content preparation device in the example of comprises audio source and video source . Audio source may comprise for example a microphone that produces electrical signals representative of captured audio data to be encoded by audio encoder . Alternatively audio source may comprise a storage medium storing previously recorded audio data an audio data generator such as a computerized synthesizer or any other source of audio data. Video source may comprise a video camera that produces video data to be encoded by video encoder a storage medium encoded with previously recorded video data a video data generation unit such as a computer graphics source or any other source of video data. Content preparation device is not necessarily communicatively coupled to server device in all examples but may store multimedia content to a separate medium that is read by server device .

Raw audio and video data may comprise analog or digital data. Analog data may be digitized before being encoded by audio encoder and or video encoder . Audio source may obtain audio data from a speaking participant while the speaking participant is speaking and video source may simultaneously obtain video data of the speaking participant. In other examples audio source may comprise a computer readable storage medium comprising stored audio data and video source may comprise a computer readable storage medium comprising stored video data. In this manner the techniques described in this disclosure may be applied to live streaming real time audio and video data or to archived pre recorded audio and video data.

Audio frames that correspond to video frames are generally audio frames containing audio data that was captured by audio source contemporaneously with video data captured by video source that is contained within the video frames. For example while a speaking participant generally produces audio data by speaking audio source captures the audio data and video source captures video data of the speaking participant at the same time that is while audio source is capturing the audio data. Hence an audio frame may temporally correspond to one or more particular video frames. Accordingly an audio frame corresponding to a video frame generally corresponds to a situation in which audio data and video data were captured at the same time and for which an audio frame and a video frame comprise respectively the audio data and the video data that was captured at the same time.

In some examples audio encoder may encode a timestamp in each encoded audio frame that represents a time at which the audio data for the encoded audio frame was recorded and similarly video encoder may encode a timestamp in each encoded video frame that represents a time at which the video data for encoded video frame was recorded. In such examples an audio frame corresponding to a video frame may comprise an audio frame comprising a timestamp and a video frame comprising the same timestamp. Content preparation device may include an internal clock from which audio encoder and or video encoder may generate the timestamps or that audio source and video source may use to associate audio and video data respectively with a timestamp.

In some examples audio source may send data to audio encoder corresponding to a time at which audio data was recorded and video source may send data to video encoder corresponding to a time at which video data was recorded. In some examples audio encoder may encode a sequence identifier in encoded audio data to indicate a relative temporal ordering of encoded audio data but without necessarily indicating an absolute time at which the audio data was recorded and similarly video encoder may also use sequence identifiers to indicate a relative temporal ordering of encoded video data. Similarly in some examples a sequence identifier may be mapped or otherwise correlated with a timestamp.

Audio encoder generally produces a stream of encoded audio data while video encoder produces a stream of encoded video data. Each individual stream of data whether audio or video may be referred to as an elementary stream. An elementary stream is a single digitally coded possibly compressed component of a representation. For example the coded video or audio part of the representation can be an elementary stream. An elementary stream may be converted into a packetized elementary stream PES before being encapsulated within a video file. Within the same representation a stream ID may be used to distinguish the PES packets belonging to one elementary stream from the other. The basic unit of data of an elementary stream is a packetized elementary stream PES packet. Thus coded video data generally corresponds to elementary video streams. Similarly audio data corresponds to one or more respective elementary streams.

Many video coding standards such as ITU T H.264 AVC and the upcoming High Efficiency Video Coding HEVC standard define the syntax semantics and decoding process for error free bitstreams any of which conform to a certain profile or level. Video coding standards typically do not specify the encoder but the encoder is tasked with guaranteeing that the generated bitstreams are standard compliant for a decoder. In the context of video coding standards a profile corresponds to a subset of algorithms features or tools and constraints that apply to them. As defined by the H.264 standard for example a profile is a subset of the entire bitstream syntax that is specified by the H.264 standard. A level corresponds to the limitations of the decoder resource consumption such as for example decoder memory and computation which are related to the resolution of the pictures bit rate and block processing rate. A profile may be signaled with a profile idc profile indicator value while a level may be signaled with a level idc level indicator value.

The H.264 standard for example recognizes that within the bounds imposed by the syntax of a given profile it is still possible to require a large variation in the performance of encoders and decoders depending upon the values taken by syntax elements in the bitstream such as the specified size of the decoded pictures. The H.264 standard further recognizes that in many applications it is neither practical nor economical to implement a decoder capable of dealing with all hypothetical uses of the syntax within a particular profile. Accordingly the H.264 standard defines a level as a specified set of constraints imposed on values of the syntax elements in the bitstream. These constraints may be simple limits on values. Alternatively these constraints may take the form of constraints on arithmetic combinations of values e.g. picture width multiplied by picture height multiplied by number of pictures decoded per second . The H.264 standard further provides that individual implementations may support a different level for each supported profile.

A decoder conforming to a profile ordinarily supports all the features defined in the profile. For example as a coding feature B picture coding is not supported in the baseline profile of H.264 AVC but is supported in other profiles of H.264 AVC. A decoder conforming to a level should be capable of decoding any bitstream that does not require resources beyond the limitations defined in the level. Definitions of profiles and levels may be helpful for interpretability. For example during video transmission a pair of profile and level definitions may be negotiated and agreed for a whole transmission session. More specifically in H.264 AVC a level may define limitations on the number of macroblocks that need to be processed decoded picture buffer DPB size coded picture buffer CPB size vertical motion vector range maximum number of motion vectors per two consecutive MBs and whether a B block can have sub macroblock partitions less than 8 8 pixels. In this manner a decoder may determine whether the decoder is capable of properly decoding the bitstream.

In the example of encapsulation unit of content preparation device receives elementary streams comprising coded video data from video encoder and elementary streams comprising coded audio data from audio encoder . In some examples video encoder and audio encoder may each include packetizers for forming PES packets from encoded data. In other examples video encoder and audio encoder may each interface with respective packetizers for forming PES packets from encoded data. In still other examples encapsulation unit may include packetizers for forming PES packets from encoded audio and video data.

Video encoder may encode video data of multimedia content in a variety of ways to produce different representations of the multimedia content at various bitrates and with various characteristics such as pixel resolutions frame rates conformance to various coding standards conformance to various profiles and or levels of profiles for various coding standards representations having one or multiple views e.g. for two dimensional or three dimensional playback or other such characteristics. A representation as used in this disclosure may comprise a combination of audio data and video data e.g. one or more audio elementary stream and one or more video elementary streams. Each PES packet may include a stream id that identifies the elementary stream to which the PES packet belongs. Encapsulation unit is responsible for assembling elementary streams into video files of various representations.

Encapsulation unit receives PES packets for elementary streams of a representation from audio encoder and video encoder and forms corresponding network abstraction layer NAL units from the PES packets. In the example of H.264 AVC Advanced Video Coding coded video segments are organized into NAL units which provide a network friendly video representation addressing applications such as video telephony storage broadcast or streaming. NAL units can be categorized to Video Coding Layer VCL NAL units and non VCL NAL units. VCL units may contain the core compression engine and may include block macroblock and or slice level data. Other NAL units may be non VCL NAL units. In some examples a coded picture in one time instance normally presented as a primary coded picture may be contained in an access unit which may include one or more NAL units.

Non VCL NAL units may include parameter set NAL units and SEI NAL units among others. Parameter sets may contain sequence level header information in sequence parameter sets SPS and the infrequently changing picture level header information in picture parameter sets PPS . With parameter sets e.g. PPS and SPS infrequently changing information need not to be repeated for each sequence or picture hence coding efficiency may be improved. Furthermore the use of parameter sets may enable out of band transmission of the important header information avoiding the need for redundant transmissions for error resilience. In out of band transmission examples parameter set NAL units may be transmitted on a different channel than other NAL units such as SEI NAL units.

Supplemental Enhancement Information SEI may contain information that is not necessary for decoding the coded pictures samples from VCL NAL units but may assist in processes related to decoding display error resilience and other purposes. SEI messages may be contained in non VCL NAL units. SEI messages are the normative part of some standard specifications and thus are not always mandatory for standard compliant decoder implementation. SEI messages may be sequence level SEI messages or picture level SEI messages. Some sequence level information may be contained in SEI messages such as scalability information SEI messages in the example of SVC and view scalability information SEI messages in MVC. These example SEI messages may convey information on e.g. extraction of operation points and characteristics of the operation points. In addition encapsulation unit may form a manifest file such as a media presentation descriptor MPD that describes characteristics of the representations. Encapsulation unit may format the MPD according to extensible markup language XML .

Encapsulation unit may provide data for one or more representations of multimedia content along with the manifest file e.g. the MPD to output interface . Output interface may comprise a network interface or an interface for writing to a storage medium such as a universal serial bus USB interface a CD or DVD writer or burner an interface to magnetic or flash storage media or other interfaces for storing or transmitting media data. Encapsulation unit may provide data of each of the representations of multimedia content to output interface which may send the data to server device via network transmission or storage media. In the example of server device includes storage medium that stores various multimedia contents each including a respective manifest file and one or more representations A N representations . In some examples output interface may also send data directly to network .

In some examples representations may be separated into adaptation sets. As noted above in some instances an adaptation set may also be referred to as a representation group. That is various subsets of representations may include respective common sets of characteristics such as codec profile and level resolution number of views file format for segments text type information that may identify a language or other characteristics of text to be displayed with the representation and or audio data to be decoded and presented e.g. by speakers camera angle information that may describe a camera angle or real world camera perspective of a scene for representations in the adaptation set rating information that describes content suitability for particular audiences or the like.

Manifest file may include data indicative of the subsets of representations corresponding to particular adaptation sets as well as common characteristics for the adaptation sets. Manifest file may also include data representative of individual characteristics such as bitrates for individual representations of adaptation sets. In this manner an adaptation set may provide for simplified network bandwidth adaptation. Representations in an adaptation set may be indicated using child elements of an adaptation set element of manifest file .

Server device includes request processing unit and network interface . In some examples server device may include a plurality of network interfaces. Furthermore any or all of the features of server device may be implemented on other devices of a content delivery network such as routers bridges proxy devices switches or other devices. In some examples intermediate devices of a content delivery network may cache data of multimedia content and include components that conform substantially to those of server device . In general network interface is configured to send and receive data via network .

Request processing unit is configured to receive network requests from client devices such as client device for data of storage medium . For example request processing unit may implement hypertext transfer protocol HTTP version 1.1 as described in RFC 2616 Hypertext Transfer Protocol HTTP 1.1 by R. Fielding et al Network Working Group IETF June 1999. That is request processing unit may be configured to receive HTTP GET or partial GET requests and provide data of multimedia content in response to the requests. The requests may specify a segment of one of representations e.g. using a URL of the segment. In some examples the requests may also specify one or more byte ranges of the segment thus comprising partial GET requests. Request processing unit may further be configured to service HTTP HEAD requests to provide header data of a segment of one of representations . In any case request processing unit may be configured to process the requests to provide requested data to a requesting device such as client device .

Additionally or alternatively request processing unit may be configured to deliver media data via a broadcast or multicast protocol such as eMBMS. Content preparation device may create DASH segments and or sub segments in substantially the same way as described but server device may deliver these segments or sub segments using eMBMS or another broadcast or multicast network transport protocol. For example request processing unit may be configured to receive a multicast group join request from client device . That is server device may advertise an Internet protocol IP address associated with a multicast group to client devices including client device associated with particular media content e.g. a broadcast of a live event . Client device in turn may submit a request to join the multicast group. This request may be propagated throughout network e.g. routers making up network such that the routers are caused to direct traffic destined for the IP address associated with the multicast group to subscribing client devices such as client device .

As illustrated in the example of multimedia content includes manifest file which may correspond to a media presentation description MPD . Manifest file may contain descriptions of different alternative representations e.g. video services with different qualities and the description may include e.g. codec information a profile value a level value a bitrate and other descriptive characteristics of representations . Client device may retrieve the MPD of a media presentation to determine how to access segments of representations .

In particular retrieval unit may retrieve configuration data not shown of client device to determine decoding capabilities of video decoder and rendering capabilities of video output . The configuration data may also include any or all of a language preference selected by a user of client device one or more camera perspectives corresponding to depth preferences set by the user of client device and or a rating preference selected by the user of client device . Retrieval unit may comprise for example a web browser or a media client configured to submit HTTP GET and partial GET requests. Retrieval unit may correspond to software instructions executed by one or more processors or processing units not shown of client device . In some examples all or portions of the functionality described with respect to retrieval unit may be implemented in hardware or a combination of hardware software and or firmware where requisite hardware may be provided to execute instructions for software or firmware.

Retrieval unit may compare the decoding and rendering capabilities of client device to characteristics of representations indicated by information of manifest file . Retrieval unit may initially retrieve at least a portion of manifest file to determine characteristics of representations . For example retrieval unit may request a portion of manifest file that describes characteristics of one or more adaptation sets in accordance with the techniques of this disclosure. Retrieval unit may select a subset of representations e.g. an adaptation set having characteristics that can be satisfied by the coding and rendering capabilities of client device . Retrieval unit may then determine bitrates for representations in the adaptation set determine a currently available amount of network bandwidth and retrieve segments from one of the representations having a bitrate that can be satisfied by the network bandwidth.

In general higher bitrate representations may yield higher quality video playback while lower bitrate representations may provide sufficient quality video playback when available network bandwidth decreases. Accordingly when available network bandwidth is relatively high retrieval unit may retrieve data from relatively high bitrate representations whereas when available network bandwidth is low retrieval unit may retrieve data from relatively low bitrate representations. In this manner client device may stream multimedia data over network while also adapting to changing network bandwidth availability of network .

Additionally or alternatively retrieval unit may be configured to receive data in accordance with a broadcast or multicast network protocol such as eMBMS or IP multicast. In such examples retrieval unit may submit a request to join a multicast network group associated with particular media content. After joining the multicast group retrieval unit may receive data of the multicast group without further requests issued to server device or content preparation device . Retrieval unit may submit a request to leave the multicast group when data of the multicast group is no longer needed e.g. to stop playback or to change channels to a different multicast group.

Network interface may receive and provide data of segments of a selected representation to retrieval unit which may in turn provide the segments to decapsulation unit . Decapsulation unit may decapsulate elements of a video file into constituent PES streams depacketize the PES streams to retrieve encoded data and send the encoded data to either audio decoder or video decoder depending on whether the encoded data is part of an audio or video stream e.g. as indicated by PES packet headers of the stream. Audio decoder decodes encoded audio data and sends the decoded audio data to audio output while video decoder decodes encoded video data and sends the decoded video data which may include a plurality of views of a stream to video output .

Video encoder video decoder audio encoder audio decoder encapsulation unit retrieval unit and decapsulation unit each may be implemented as any of a variety of suitable processing circuitry as applicable such as one or more microprocessors digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs discrete logic circuitry software hardware firmware or any combinations thereof. Each of video encoder and video decoder may be included in one or more encoders or decoders either of which may be integrated as part of a combined video encoder decoder CODEC . Likewise each of audio encoder and audio decoder may be included in one or more encoders or decoders either of which may be integrated as part of a combined CODEC. An apparatus including video encoder video decoder audio encoder audio decoder encapsulation unit retrieval unit and or decapsulation unit may comprise an integrated circuit a microprocessor and or a wireless communication device such as a cellular telephone.

Client device server device and or content preparation device may be configured to operate in accordance with the techniques of this disclosure. For purposes of example this disclosure describes these techniques with respect to client device and server device . However it should be understood that content preparation device may be configured to perform these techniques instead of server device .

In general client device and server device may be configured to operate in accordance with DASH according to ISO IEC 23009 1. However client device and server device may be configured in accordance with the techniques of this disclosure to enable accurate timing between client device and server device . For example server device may be configured to signal additional data in the MPD e.g. manifest file to support the timing between client device and server device . In various examples which may be used alone or in any combination server device may 

Thus client device and server device may be configured to operate according to ISO IEC 23009 1 with the following modification to Table 3 thereof where the addition is noted using underlined text 

That is Table 3 of ISO IEC 23009 1 may be modified in accordance with the techniques of this disclosure to include an additional UTCTiming attribute that specifies information on a recommended way to obtain a synchronization to wall clock time as used in the corresponding MPD e.g. manifest file . Likewise MPDs such as manifest file of may include such a UTCTiming attribute. Accordingly encapsulation unit may form manifest file to include the UTCTiming attribute as defined above server device may provide manifest file to client device including the UTCTiming attribute and client device and server device may use the UTCTiming attribute to coordinate how wall clock time can be obtained.

Table 3 of ISO IEC 23009 1 may also be modified to include the addition noted below in underlined text 

For the element UTCTiming the Media Presentation author provides additional information how the client may suitably obtain accurate timing on how the Media Presentation is synchronized to the wall clock time. Multiple schemes may be specified and the client is recommended to use the ordering as a preference by the Media Presentation author. However the client may choose any method potentially having to deal with reduced accuracy. The client may also choose multiple methods in order to increase reliability and or accuracy.

DASH defines several methods on how to obtain additional information on the timing synchronization for the Media Presentation. Table X below shows different timing methods.

The following MPD represents an example of an MPD implemented according to the above additions to ISO IEC 23009 1 

In this manner any of the methods specified in the UTC Timing from above may be used to synchronize the time to UTC such as a wall clock time .

More particularly in the example of client device includes clock . Clock represents an example of a local clock. In accordance with the techniques of this disclosure client device and in particular retrieval unit may determine wall clock times at which segments of media content will be available. Furthermore client device may synchronize clock using the techniques of this disclosure. That is manifest file e.g. an MPD file may include information indicating a synchronization method by which client devices such as client device are to synchronize local clocks with wall clock time e.g. UTC time. Client device may retrieve manifest file and determine the synchronization method from manifest file . The information of manifest file may further indicate one or more network addresses of servers from which client device may retrieve accurate wall clock times. Thus client device may request times from one or more of the servers using the synchronization method e.g. a network based time synchronization protocol such as NTP HTP or HTTP . Retrieval unit may then request a segment when the current time as indicated by clock is at or after the wall clock time indicated in manifest file for the segment.

In certain environments a content delivery network CDN not shown in may be configured to cause the client device to not access the Segments exactly at the time when the segments become available or the CDN may be configured to cause only a subset of client devices to access the segments exactly at the segment availability times. Server device may correspond to a server device of a CDN. Reasons for this may be that some clients populate the edge caches i.e. their requests are routed to the origin server whereas others are purposely delayed in order to serve those exclusively from the cache. In other examples the CDN may prioritize certain client devices e.g. those attempting to operate closer to the live edge any may down prioritize other client devices.

In still other examples the CDN may allow certain Representations to be accessed in a prioritized manner such that spreading of requests among client devices may also depend on the chosen Representation. At a high level the following aspects may be implemented in ISO IEC 23009 1 to support spreading the requests 

Encapsulation unit may form NAL units comprising a header that identifies a program to which the NAL belongs as well as a payload e.g. audio data video data or data that describes the transport or program stream to which the NAL unit corresponds. For example in H.264 AVC a NAL unit includes a 1 byte header and a payload of varying size. A NAL unit including video data in its payload may comprise various granularity levels of video data. For example a NAL unit may comprise a block of video data a plurality of blocks a slice of video data or an entire picture of video data. Encapsulation unit may receive encoded video data from video encoder in the form of PES packets of elementary streams. Encapsulation unit may associate each elementary stream with a corresponding program.

Encapsulation unit may also assemble access units from a plurality of NAL units. In general an access unit may comprise one or more NAL units for representing a frame of video data as well audio data corresponding to the frame when such audio data is available. An access unit generally includes all NAL units for one output time instance e.g. all audio and video data for one time instance. For example if each view has a frame rate of 20 frames per second fps then each time instance may correspond to a time interval of 0.05 second. During this time interval the specific frames for all views of the same access unit the same time instance may be rendered simultaneously. In one example an access unit may comprise a coded picture in one time instance which may be presented as a primary coded picture. Accordingly an access unit may comprise all audio and video frames of a common temporal instance e.g. all views corresponding to time X. This disclosure also refers to an encoded picture of a particular view as a view component. That is a view component may comprise an encoded picture or frame for a particular view at a particular time. Accordingly an access unit may be defined as comprising all view components of a common temporal instance. The decoding order of access units need not necessarily be the same as the output or display order.

A media presentation may include a media presentation description MPD which may contain descriptions of different alternative representations e.g. video services with different qualities and the description may include e.g. codec information a profile value and a level value. An MPD is one example of a manifest file such as manifest file . Client device may retrieve the MPD of a media presentation to determine how to access movie fragments of various presentations. Movie fragments may be located in movie fragment boxes moof boxes of video files.

Video encoder video decoder audio encoder audio decoder encapsulation unit and decapsulation unit each may be implemented as any of a variety of suitable processing circuitry as applicable such as one or more microprocessors digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs discrete logic circuitry software hardware firmware or any combinations thereof. Each of video encoder and video decoder may be included in one or more encoders or decoders either of which may be integrated as part of a combined video encoder decoder CODEC . Likewise each of audio encoder and audio decoder may be included in one or more encoders or decoders either of which may be integrated as part of a combined CODEC. An apparatus including video encoder video decoder audio encoder audio encoder audio decoder and or encapsulation unit and or decapsulation unit may comprise an integrated circuit a microprocessor and or a wireless communication device such as a cellular telephone.

After encapsulation unit has assembled NAL units and or access units into a video file based on received data encapsulation unit passes the video file to output interface for output. In some examples encapsulation unit may store the video file locally or send the video file to a remote server via output interface rather than sending the video file directly to client device . Output interface may comprise for example a transmitter a transceiver a device for writing data to a computer readable medium such as for example an optical drive a magnetic media drive e.g. floppy drive a universal serial bus USB port a network interface or other output interface. Output interface outputs the video file to a computer readable medium such as for example a transmission signal a magnetic medium an optical medium a memory a flash drive or other computer readable medium.

Network interface may receive a NAL unit or access unit via network and provide the NAL unit or access unit to decapsulation unit via retrieval unit . Decapsulation unit may decapsulate a elements of a video file into constituent PES streams depacketize the PES streams to retrieve encoded data and send the encoded data to either audio decoder or video decoder depending on whether the encoded data is part of an audio or video stream e.g. as indicated by PES packet headers of the stream. Audio decoder decodes encoded audio data and sends the decoded audio data to audio output while video decoder decodes encoded video data and sends the decoded video data which may include a plurality of views of a stream to video output .

MPD may comprise a data structure separate from representations . MPD may correspond to manifest file of . Likewise representations may correspond to representations of . In general MPD may include data that generally describes characteristics of representations such as coding and rendering characteristics adaptation sets a profile to which MPD corresponds text type information camera angle information rating information trick mode information e.g. information indicative of representations that include temporal sub sequences and or information for retrieving remote periods e.g. for targeted advertisement insertion into media content during playback . In accordance with the techniques of this disclosure MPD may include UTCTiming information as discussed above with respect to .

Header data when present may describe characteristics of segments e.g. temporal locations of random access points RAPS also referred to as stream access points SAPs which of segments includes random access points byte offsets to random access points within segments uniform resource locators URLs of segments or other aspects of segments . Header data when present may describe similar characteristics for segments . Additionally or alternatively such characteristics may be fully included within MPD .

Segments include one or more coded video samples each of which may include frames or slices of video data. Each of the coded video samples of segments may have similar characteristics e.g. height width and bandwidth requirements. Such characteristics may be described by data of MPD though such data is not illustrated in the example of . MPD may include characteristics as described by the 3GPP Specification with the addition of any or all of the signaled information described in this disclosure.

Each of segments may be associated with a unique uniform resource locator URL . Thus each of segments may be independently retrievable using a streaming network protocol such as DASH. In this manner a destination device such as client device may use an HTTP GET request to retrieve segments or . In some examples client device may use HTTP partial GET requests to retrieve specific byte ranges of segments or .

In accordance with the techniques of this disclosure source device may construct a manifest file such as a media presentation description MPD that indicates wall clock times at which client devices can retrieve data of media content e.g. segments. The MPD may further indicate a synchronization method by which client devices are to synchronize respective local clocks to wall clock times. For instance source device may provide an Internet protocol IP address or domain name for time synch server device in the MPD along with an indication of the synchronization method. In this manner client devices may use the synchronization method to request a current time from time synch server device in order to synchronize local clocks with wall clock times. The time synchronization methods may include for example network time protocol NTP precision time protocol PTP hypertext transfer protocol HTTP Time Protocol HTP or HTTP itself.

As explained above source device may provide an MPD to client devices A B that includes information for a recommended way to synchronize local clocks of client devices A B to wall clock time for the corresponding media Presentation. Table 3 of ISO IEC 23009 1 including the example modifications discussed above represents an example element UTCTiming that can be used to signal such information. Thus client devices A B may use this signaled information to interact with time synch server device in order to synchronize their respective local clocks with wall clock times. Additionally source device may synchronize its local clock with time synch server device in some examples.

When using HTTP to synchronize a local clock client devices may send an HTTP HEAD request to time synch server device . The HTTP HEAD request may conform to RFC 2616 which defines HTTP 1.1. In response to the HTTP HEAD request time synch server device may send a response including date information e.g. a date and a time. Alternatively client devices may send an HTTP GET request to time synch server device in conformance with RFC 2616. In response time synch server device may send a well formatted time stamp value e.g. a time stamp value formatted according to NTP or Extensible Markup Language XML or to an NTP time stamp or an ISO time code.

In addition or in the alternative source device may signal an indication in an MPD that different client devices are to retrieve a particular segment of media data at different times. This may avoid scenarios in which a large number of client devices retrieve the same segment at substantially the same time. For instance the indication may cause client device A to retrieve a particular segment at a different time than client device B. Thus client device A may retrieve the segment at a first time as indicated in the MPD and client device B may retrieve the segment at a second time different than the first time again as indicated in the MPD. In particular client devices A B may issue requests for the segment at different times.

Although only one time synch server device is shown in the example of it should be understood that multiple time synch server devices may be provided and source device may indicate addresses of each of the time synch server devices in an MPD.

Time synch server device may be configured as an NTP server. In accordance with NTP time synch server device may represent a reference clock or a lower stratum clock that is communicatively coupled to a reference clock. Client devices A B may be configured to send requests to time synch server device and additional time synch server devise an NTP client may for example send requests to three different NTP servers. In accordance with NTP client devices A B may determine a timestamp at which a request is sent to time synch server device a timestamp of receipt of the request a timestamp at which a response packet from time synch server device is sent in response to the request and a timestamp at which the response packet is received. Client devices A B may use these timestamps to determine the actual time and adjust their internal clocks accordingly. In some examples client devices A B may periodically repeat the NTP procedure to re adjust their internal clocks to prevent or counteract time slippage.

Additionally or alternatively time synch server device may be configured as an HTTP server. In accordance with HTP time synch server device may provide date and time information in HTTP packet headers. In particular client devices A B may receive packets from time synch server device and or one or more additional HTTP servers. Client devices A B may calculate the average of times received from one or more time synch server devices including time synch server device to derive a current time potentially excluding certain received times from the time synch server devices e.g. times outside of one standard deviation of the average of all of the received times . Client devices A B may also add the time required to perform the calculations of the averages and standard deviations. Client devices A B may then adjust their internal clocks according to the calculated time.

In some examples time synch server device and source device may be functionally integrated into the same device. For instance in response to a request for an MPD source device may send the MPD as well as a well formatted time stamp such as an NTP or XML timestamp. Alternatively time synch server device may be provided separately from source device as shown in the example of but source device may also act as a time synch server device e.g. by providing the well formatted time stamp value and or by acting as a server for a time synchronization protocol such as NTP HTP HTTP or other such protocols. Likewise time synch server device separate from source device may be configured to provide a well formatted time stamp such as an NTP or XML timestamp in response to an HTTP GET request. For instance client devices A B may issue an HTTP GET request directed to a particular URL and in response time synch server device may send a well formatted time stamp e.g. formatted according to NTP or XML.

In this manner client devices A B represent examples of a client device for receiving information for streaming of media data including a clock and one or more processors configured to receive a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which the client device can retrieve data of the media content from a source device and wherein the data indicates a synchronization method by which the client device is to synchronize the wall clock times with the clock synchronize the clock with the wall clock times using the method indicated by the MPD and request data of the media content from the source device using the synchronized clock. The MPD may include data that indicates that client device A for example is to retrieve a segment of the media content at a first time and that client device B in this example is to retrieve the segment at a second time different from the first time.

Likewise source device represents an example of a source device for signaling information for streaming of media data including one or more processors configured to generate data for a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which a client device e.g. one of client devices A B can retrieve data of the media content from the source device and wherein the generated data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device and send the MPD to the client device.

Initially source device may generate a media presentation description MPD for media content e.g. a media Presentation where the MPD includes information indicating time synchronization information . For instance source device may include information in the MPD indicative of a synchronization method e.g. NTP HTP or HTTP and addresses for one or more time synchronization servers such as time synch server device . The time synchronization information may correspond to the UTCTiming element described above with respect to the modified version of Table 3 of ISO IEC 23009 1. In addition the MPD may advertise wall clock times at which segments of the media content will be available for retrieval. In some examples these wall clock times may be different for different client devices. For instance a segment may be available at a first time for client device A but a second different time for client device B. That is the MPD may indicate a first time when client device A can retrieve the segment and a second different time when client device B can retrieve the segment.

Client device A may then request the MPD for the media content . In general client device A may request a manifest file for the media content. An MPD is one example of a manifest file although other types of manifest files may be used in other examples. Source device may receive the request for the MPD and then send the MPD to client device A in response to the request.

Client device A may use the MPD to determine a time synchronization method . For instance client device A may determine whether to synchronize a local clock using NTP HTP HTTP or another time synchronization method using the MPD. Client device A may also determine an address of a time synchronization server device such as time synch server device from the MPD. Client device A may then request a time from time synch server device . Time synch server device may receive the request and in response to the request send an indication of the current time to client device A . Client device A may then synchronize its local clock with the received time . For instance client device A may reset the time of its local clock directly or may run the local clock at a faster or slower rate to reach the indicated time. In some examples client device A may request times from a plurality of different time synchronization servers and combine times received from these servers e.g. through averaging to determine an actual current time and synchronize with this determined time rather than the time indicated by a particular server. Furthermore client device A may calculate processing times and add these processing times to the indicated time when resetting the local clock.

After resetting the local clock client device A may determine a wall clock time at which a segment of the media content will be available from the MPD. Client device A may then request a segment at the wall clock time indicated in the MPD that is the time at which the MPD indicates that the segment is available for retrieval . Client device A may form an HTTP GET or partial GET request for the segment or a portion thereof. Source device may receive the request for the segment and send the requested segment or portion thereof to client device A in response to the request. After receiving the segment client device A may decode and render media data of the segment . Prior to decoding and rendering client device A may buffer the received segment until the data of the segment is ready to be decoded and presented.

In this manner represents an example of a method of receiving information for streaming of media data the method including receiving by a client device a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which the client device can retrieve data of the media content from a source device and wherein the data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device synchronizing the clock of the client device with the wall clock times using the method indicated by the MPD and requesting data of the media content from the source device using the synchronized clock.

Additionally represents an example of a method of signaling information for streaming of media data the method comprising generating data for a media presentation description MPD for media content wherein the MPD includes data indicative of wall clock times at which a client device can retrieve data of the media content from a source device and wherein the generated data indicates a synchronization method by which the client device is to synchronize the wall clock times with a clock of the client device and sending the MPD to the client device.

In one or more examples the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a computer readable medium and executed by a hardware based processing unit. Computer readable media may include computer readable storage media which corresponds to a tangible medium such as data storage media or communication media including any medium that facilitates transfer of a computer program from one place to another e.g. according to a communication protocol. In this manner computer readable media generally may correspond to 1 tangible computer readable storage media which is non transitory or 2 a communication medium such as a signal or carrier wave. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions code and or data structures for implementation of the techniques described in this disclosure. A computer program product may include a computer readable medium.

By way of example and not limitation such computer readable storage media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices flash memory or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection is properly termed a computer readable medium. For example if instructions are transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. It should be understood however that computer readable storage media and data storage media do not include connections carrier waves signals or other transitory media but are instead directed to non transitory tangible storage media. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Instructions may be executed by one or more processors such as one or more digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable logic arrays FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects the functionality described herein may be provided within dedicated hardware and or software modules configured for encoding and decoding or incorporated in a combined codec. Also the techniques could be fully implemented in one or more circuits or logic elements.

The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses including a wireless handset an integrated circuit IC or a set of ICs e.g. a chip set . Various components modules or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques but do not necessarily require realization by different hardware units. Rather as described above various units may be combined in a codec hardware unit or provided by a collection of interoperative hardware units including one or more processors as described above in conjunction with suitable software and or firmware.

Various examples have been described. These and other examples are within the scope of the following claims.

