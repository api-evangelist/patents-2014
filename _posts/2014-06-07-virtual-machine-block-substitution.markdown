---

title: Virtual machine block substitution
abstract: Techniques are described to allow substation of blocks into a virtual machine image of an executing virtual machine. A patch may be applied to a first virtual machine image. One or more blocks modified by the patch are identified and copied to a host having a virtual machine executing from a virtual machine image that is based on the first virtual machine image (prior to the patch). While the virtual machine is executing, the substitution blocks are applied (supersede) corresponding original blocks in the virtual machine image. A guest operating system in the virtual machine may either begin using an executable file in a substitution block. In addition, the guest operating system may be forced to flush from memory and cache executable code replaced by the substitution block.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317279&OS=09317279&RS=09317279
owner: Microsoft Technology Licensing, LLC
number: 09317279
owner_city: Redmond
owner_country: US
publication_date: 20140607
---
This application is a Continuation of application Ser. No. 13 171 443 filed Jun. 29 2011 allowed and to be issued and hereby incorporated in original form by reference.

Data centers compute clouds and other networks of cooperating hosts often use virtual machines VMs for management and efficiency benefits. In some cases a virtual machine image such as a golden image may be duplicated and used in multiple virtual machines. That is a root or base virtual machine image may exist at a management server and virtual machines on hosts may be running copies of the base virtual machine image.

At times it may be desirable to update or patch the software such as applications and operating systems on virtual machines. Often the same patch must be applied to all of the virtual machines that are based on a same virtual machine image. That is virtual machines using copies of a base virtual machine image may need a same patch or update. Typically this has involved for running virtual machines copying a patch installing the patch and restarting the virtual machine and its guest operating system. However restarting a virtual machine may present problems. Particularly in environments of distributed or highly interconnected applications or with applications that require minimal downtime restarting may disrupt a service or affect a Service Level Agreement. Even in cases where there is only virtual machine to be updated it may nonetheless be inconvenient to restart that virtual machine.

The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter which is set forth by the claims presented at the end.

Techniques are described to allow substation of blocks into a virtual machine image of an executing virtual machine. A patch may be applied to a first virtual machine image. One or more blocks modified by the patch are identified and copied to a host having a virtual machine executing from a virtual machine image that is based on the first virtual machine image prior to the patch . While the virtual machine is executing the substitution blocks are applied supersede corresponding original blocks in the virtual machine image. A guest operating system in the virtual machine may either begin using an executable file in a substitution block. In addition the guest operating system may be forced to flush from memory and cache executable code replaced by the substitution block.

Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.

The virtualization layer may be of any variety of known or future implementations such as Hyper V Server VMWare ESX Server Xen Oracle VM etc. The architecture of the virtualization layer may a hosted type with a virtual machine monitor VMM running on a host operating system or a bare metal type with a hypervisor or the like running directly on the hardware of the computer . As used herein the term virtual machine refers to a system type virtual machine that simulates any specific hardware architecture e.g. x86 able to run native code for that hardware architecture to the guest the virtual machine may be nearly indistinguishable from a hardware machine. Virtual machines discussed herein are not abstract or process type virtual machines such as Java Virtual Machines.

The virtualization layer performs the basic function of managing the virtual machines and sharing of the hardware by both itself and the virtual machines . Any of a variety of techniques may be used to isolate the virtual machines from the hardware . In one embodiment the virtualization layer may provide different isolated environments i.e. partitions or domains which correspond to virtual machines . Some of the virtualization layer such as shared virtual device drivers inter virtual machine communication facilities and virtual machine management APIs application programming interfaces may run in a special privileged partition or domain allowing for a compact and efficient hypervisor. In other embodiments functionality for virtual machine management and coherent sharing of the hardware may reside in a monolithic on the metal hypervisor.

The virtualization layer manages execution of the virtual machine handling certain calls to the guest s kernel hypercalls etc. and coordinating the virtual machine s access to the underlying hardware . As the guest and its software run the virtualization layer may maintain state of the guest on the virtual disk image when the guest or an application run by the guest writes data to disk the virtualization layer translates the data to the format of the virtual disk image and writes to the image.

The virtualization layer may perform a process for shutting down the virtual machine . When an instruction is received to stop the virtual machine the state of the virtual machine and its guest is saved to the virtual disk image and the executing virtual machine process or partition is deleted. A specification of the virtual machine may remain for a later restart of the virtual machine .

At step the substitution blocks are copied to one or more target virtual machines. The substitution blocks may or may not be accompanied by a list identifying the substitution blocks. In one embodiment the substitution blocks may be in the form of a difference disk or delta disk details of which are known and described elsewhere. In another embodiment the virtual machine images may be dynamic virtual disks that expand in size as needed.

At step the blocks are applied at the hosts at which they are received. The substitution blocks are handled at the virtualization layer which applies the substitution blocks to the virtual machine images thereon. For discussion consider only a single host and a single substitution block. The host has a virtualization layer that manages execution of a virtual machine using a virtual machine image. The virtualization layer has a block level driver that virtualizes access to the virtual machine image providing block level access to the image and causing the virtual machine image file to appear as a disk to the virtual machine. As such the virtualization layer is able to transparently alter that disk without the need for awareness or cooperation of the virtual machine or the guest software executing in the virtual machine although embodiments involving same are described later . The virtualization layer or hypervisor identifies a block in the target virtual machine image that will be replaced by the substitution block possibly using a tainted block list received with the substitution block or by comparing the substitution block with blocks in the target virtual machine image. The identified tainted block is then replaced with the substitution block which becomes available to the still executing associated virtual machine and guest software.

At step operations below the virtualization layer may be performed. Note that in a case where the substitution block is known or assumed to contain read only data the substitution block may be copied directly and any substituted in files may be simply used when they are accessed by the guest operating system. In another embodiment the virtualization layer informs the guest operating system by a signal or message possibly passed through a virtual machine bus or the like. For example the hypervisor may send the virtual machine information about files in the substitute block that have been modified possibly files with binary executable code . Or by informing the operating system about the storage area of the block and leaving it to the operating system to take any action such as scanning the file system at file system locations corresponding to the block. In one embodiment substitution blocks may contain customization information which is specialized information to target or facilitation substitution. For example a substation block may contain the name of the machine or may specify various machine configuration settings. When substitution occurs the customization information is used to update a setting or state of the guest that is persisted in the corresponding virtual machine image. In this case the substitution system has built in understanding of the guest operating system in contrast to embodiments where substitution is performed at the virtual hardware layer without regard for the guest operating system.

In one embodiment the guest operating system may have a component such as a kernel module that responds to a signal from the hypervisor by taking various steps to assure that a file in the substitute block becomes available when the substitution block is copied into the virtual machine image. This may involve the guest operating system invalidating any paged in executable code from the original replace block that is now out of date invalidating or marking invalid any relevant file cache and so forth. The guest operating system might also force a page fault to cause the file to be reloaded into memory thus allowing for execution of code in the substitute block . The guest operating system may access a translation lookaside buffer to identify where the old code of a new file is located in physical memory and update accordingly.

In response to the insertion of the new substitution block A or with some latency for instance when needed by the guest operating system the code B is accessed by the guest operating system . At this time the code B is paged into physical memory by the virtualization layer forming in memory code C. The in memory code C backs code D mapped in the virtual memory address space of the guest operating system .

It will be appreciated that any of the involved components may be modified or augmented to force out old code and force in new code. For example the guest operating system may be enlightened provided with a virtualization aware element that flushes any affected caches forces relevant pages to be faulted and therefore re read thus loading code B into physical memory as code C etc. In another embodiment the virtualization layer itself might directly update the physical memory of the guest operating system with new code possibly by scanning physical memory to recognize the old code to be replaced. For instance an appropriately enlightened operating system may float up to the hypervisor information about the relevant files and or memory. It is important to recognize that when the substitution block A is added the virtual machine may have an execution state that is inconsistent with the virtual machine image code may still reside in memory that has been replaced by the substitution block A. A number of approaches are discussed below to address this possibility.

One approach for dealing with substituted in code replacing code that has already been executed is to keep a pedigree for every memory paged file. That is the hypervisor tracks which disk block each file came from. With this approach page table entries are invalidated and the file cache may need to be cleared. In another embodiment a page is taken a page fault is forced the page tables is searched and the appropriate pages are faulted in and the page tables are updated possibly using a hook in the hypervisor . Another approach may involve the hypervisor passing to the guest a list of updated invalid files which the guest uses to refresh accordingly. In another embodiment a file to block mapping is used to identify updated files with appropriate memory fixes then performed.

To elaborate consider that hypervisors typically provide a block device layer and the guest operating system a file system layer. If the guest executes a binary file then certain sections are mapped to physical pages there is a page layer which is backed by files sometimes a swap file backed by or directly mapped onto blocks. A file such as the text section of a binary file may be loaded to a page.

While updates to a executing virtual machine have been mentioned another embodiment may pause or suspend a virtual machine when a new block is substituted in. Although it may be convenient to use blocks that match a block size used by the hypervisor performing the substitution this is not required smaller or larger blocks may be used. Moreover although it may in some cases be desirable to avoid restarting virtual machines and guest operating systems such may still be performed after a live block substitution for example to resolve errors or to handle irreconcilable memory disk issues.

Without limiting the embodiments it should be noted that the live patching technique discussed above may be used without regard for the underlying operating system. In addition patching may be performed outside the ordinary mechanisms of virtual machine control and ownership. Specifically a cloud hoster or data center operator can apply a patch to virtual machines without requiring guest or virtual machine credentials which may be convenient for updating cloud fabric code that is embedded in a virtual machine. Furthermore it may be possible to update software on a virtual machine without having to restart the virtual machine or the guest operating system. Some embodiments may be more readily implemented when update blocks contain read only files.

Embodiments and features discussed above can be realized in the form of information stored in volatile or non volatile computer or device readable media. This is deemed to include at least media such as optical storage e.g. compact disk read only memory CD ROM magnetic media flash read only memory ROM or any current or future means of storing digital information. The stored information can be in the form of machine executable instructions e.g. compiled executable binary code source code bytecode or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random access memory RAM and or virtual memory storing information such as central processing unit CPU instructions during execution of a program carrying out an embodiment as well as non volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device including portable devices workstations servers mobile wireless devices and so on.

