---

title: Distributed data store for hierarchical data
abstract: A computing resource service provider may store user data in a distributed data storage system. The distributed data storage system may contain one or more storage nodes configured to store hierarchical data in one or more data stores such as a column data store. Data in the data stores may be compressed or otherwise encoded, by a storage optimizer, in order to reduce that redundancy in the hierarchical data stored in the one or more data stores. Responses to user queries may be fulfilled based at least in part on data stored in the one or more data stores. A query processor may scan multiple different data stores across various storage nodes in order to obtain items responsive to the user query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09633073&OS=09633073&RS=09633073
owner: Amazon Technologies, Inc.
number: 09633073
owner_city: Seattle
owner_country: US
publication_date: 20140324
---
Modern computing systems place a high importance on secure and reliable data storage. Modern computer systems also increasingly use simple lightweight computing instances dedicated to solving specific problems. In many computer systems particularly distributed computer systems and those utilizing system virtualization computing environments where a plurality of guest virtual machines may be hosted on shared physical host machines secure and reliable data storage may become a concern. Secure and reliable data storage systems such as for example redundant storage systems may help to alleviate this concern but such storage systems can be cumbersome and expensive particularly in highly complex distributed or virtualized systems comprising large numbers of host machines a correspondingly large number of guest virtual machines and a commensurate number of redundant storage nodes. Additionally as the number of client systems increases the overhead associated with attaching typical redundant storage resources to client systems may quickly exhaust the resource of the host computing system environment resulting in reduced performance resource scarcity and an increasingly degraded user experience.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to storing data in a column oriented fashion for rapid query processing using a large number of low powered data storage nodes also referred to as storage nodes or simply nodes . Records may be stored in highly partitioned column tables that compactly represent data using prefix compression. Storing data in such a manner may be referred to as sharding data or a database shard. Individual column tables may be replicated within a ring address space. The ring may be an organization of data wherein the data is sorted according to a determined order and each data item has two distinct neighbors referred to herein as an upstream neighbor and a downstream neighbor. The upstream neighbor is the data item that is immediately before the data item according to the sorting order and the downstream neighbor is the data item that is immediately after the data item according to the sorting order. In various examples neighbors are singly connected and the ring is completed or closed by connecting the last data item in the sorted data to the first data item.

Distributed data storage locations also referred to herein as distributed data stores or simply data stores may be used to store information across multiple nodes in a computer network. A single data item may be stored for example in a single storage location or may be stored redundantly in multiple storage locations such as in the ring described above. The use of distributed data stores in various embodiments improves the availability of the data improves the reliability of the data reduces the latency of data access and or otherwise improves other operational characteristics of the storing data. For example the reliability of a data item may be increased by storing redundant copies and or by using redundant copies to verify that a data item has not been altered. The availability of data may be increased and or the latency of access may be reduced by placing a copy of a data item physically or logically according to network communications close to the user client process service and or other such computer system entity that may require access to the data item. The one or more data items may be generated by a user or by an automated process such as access logs task logs debug data error codes or any other data generate with user interaction.

In an embodiment the distributed storage nodes may include an append data store and an optimized data store also referred to as a packed data store . As data is received by the nodes it may be processed by a storage optimizer in order to create packed data to be stored in the optimized data store. The data may be compressed using a variety of techniques that compress data by at least identifying and eliminating statistical redundancy in the data in order to create packed data. However packing data in this manner to be stored in the optimized data store may take more effort than simply storing the data. Situations may arise where requests to store data are received by the storage nodes faster than the storage optimizer can compress the data into packed data and store the packed data in the optimized data store. On these situations overflow data may be stored in the append data store. The append data store may be configured such that data is added to the append data store without processing or otherwise reducing the redundancy in the data. Overflow data may be any data received above the storage optimizer s capacity. Data in the append data store may be periodically or aperiodically removed compressed and then stored in the optimized data store by the storage optimizer.

Furthermore users may submit queries for data stored in the distributed data stores using a query interface or similar service. User queries may be broken into partitioned sub queries on corresponding column tables with sub query rescheduling on one or more other storage nodes that share at least some common data in order to reduce latency. User queries may employ several search criteria to further reduce latency. For example the user may select a certain percentage of the total number of possible records to be returned in order to satisfy the query. The user may also select multiple storage nodes from which to retrieve data or the service provider may transmit the query to multiple query processors for fulfillment. Furthermore one or more systems or services of the service provider such as the front end may receive a user query and determine based at least in part on the user query one or more storage nodes and or query processor to satisfy the user query. For example the front end may receive a user query and determine based at least in part on the user query the location of one or more records responsive to the user query and transmit the user query to a particular query processor capable of retrieving the one or more records.

When a user submits a query a front end processing system also referred to simply as a front end may receive the user query. The user query may contain query constraints and a completeness parameter. For example the user query may contain a search string and a percentage of the total of possible results that will satisfy the query. The front end may then forward the user query to one or more storage nodes containing data relevant to the query based at least in part on the query constraints. The query may be received at a first storage node the first storage node may scan a plurality of column tables and at least a subset of the tables in the plurality of column tables may contain a prefix compressed collection of column values. The prefix compressed data may be a hierarchically structured schema for the column values.

The storage node may perform the prefix compression operations by appending values to the column table based on an insert order and scheduling a repacking task to split join or reorder column tables when system load is lower. The storage node may reorder column values for example to reduce suffix lengths or to eliminate look behind overrides. The storage node may store ordinals as fixed length bit fields wherein the chosen length is based at least in part on identifying a range of compression parameters for the existing column values.

The first storage node may include a query processor responsible for executing the query request on the first storage node. The query processor may allow the query to execute on the storage node for a particular amount of time. Once a run time for the user query exceeds a threshold value the front end may examine results returned by the one or more storage nodes including the first storage node. The query processor may also track the run time for the user query and if the run time exceeds a threshold value the query processor may select one or more other storage node to transmit duplicate user queries for processing of the user query. Furthermore users may specify a work factor that reduces the threshold value and causes duplicate queries to be transmitted sooner than if no work factor had been specified by the user. For example the user may pay a fee to have duplicate queries processed sooner e.g. selecting a certain number of queries to be processed in parallel and reduce latency on the query request. The front end may then determine that the user query is insufficiently satisfied based on the completeness parameter and the returned results. The front end may select a second storage node not included in the one or more storage nodes where the second storage node includes at least one column table in common with the one or more storage nodes and at least one column table is not included in the returned results. The front end may forward the user query to the second storage node to be executed by the query processor on the second node. Furthermore the storage node may search both the append data store and the optimized data store in order to obtain results to fulfill the query. The storage nodes or front end may also maintain an estimate or estimate at the time the query is received the total number of possible results for a particular query.

The user may submit queries over a connection the connection may be established over a network . The network may be any suitable network such as the Internet a local area network wide area network or any other suitable communications network and or other networks noted herein and or combinations of networks. The query request may be received by the query processor directly or may be forwarded to the query processor by one or more services or servers of the service provider. For example the query request may be received by a front end operated by the service provider and forwarded to one or more query processors . The front end may determine one or more query processors capable of fulfilling the query request and forward the query request based at least in part on the determination.

Once a query request has been received at the query processor the query processor may generate a filter based at least in part on the query request. The filter may be configured to determine whether a particular record stored in the data store or the optimized data store satisfies the query. Using the filter the query processor or other system may scan the data store and or the optimized data store in order to obtain query results. The data store and the optimized data store may store data in a column store or other data storage structure. The query request may contain a threshold value indicating an amount of data to be returned in order to satisfy the request. For example the request query may indicate that one thousand records should be returned in order to fulfill the request. In another example the query may indicate a percentage of the total number of records to examine in order to fulfill the request. Furthermore the query processor may estimate a total number of records that meet the query requirements in order to determine if the threshold percentage has been reached when returning results in response to the query request .

The query processor may satisfy the query request using data stored in the data store and or the optimized data store . If the query processor determines that the data store and the optimized data store do not have sufficient data to satisfy the query request the query processor may scan one or more other storage devices such as a remote data store. The query processor may also transmit one or more duplicate query requests to remote query processors or remote storage nodes. The query processor may return results to the front end and the front end may determine whether to transmit duplicate query requests.

The user may request connection to the service provider via one or more connections and in some embodiments via one or more networks and or entities associated therewith such as servers connected to the network either directly or indirectly. The computer system client device that may request access to the query process may include any device that is capable of connecting with a computer system via a network including at least servers laptops mobile devices such as smartphones or tablets other smart devices such as smart watches smart televisions set top boxes video game consoles and other such network enabled smart devices distributed computing systems and components thereof abstracted components such as guest computer systems or virtual machines and or other types of computing devices and or components. The network may include for example a local network an internal network a public network such as the Internet a wide area network a wireless network a mobile network a satellite network a distributed computing system with a plurality of network nodes and or the like. The network may also operate in accordance with various protocols such as those listed below Bluetooth WiFi cellular network protocols satellite network protocols and or others.

The service provider may provide access to one or more host machines as well as provide access to computer services such as virtual machine VM instances automatic scaling groups file based database storage systems block storage services redundant data storage services data archive services data warehousing services user access management services content management services and or other such computer system services as may be running thereon. The service provider may also provide access to computer system resources such as user resources policy resources network resources and or storage resources. In some distributed and or virtualized computer system environments the resources associated with the computer services may be physical devices virtual devices combinations of physical and or virtual devices or other such device embodiments. In some embodiments the host machines may be physical machines located within the computer system environment. In some embodiments the host machines may be guest virtual machines operating on physical machines located within the computer system environment.

The query processor may be connected to one or more replicated storage locations. In the example illustrated in the query processor is connected to a data store connected to optimized data store and connected to a remote data . The computer system may write to a data item or record stored in data store via connection . A write to a data item stored in data store may be optimized by a storage optimizer and store via connection to the optimized data store . The remote data store may contain replicated or partially replicated data from either data store or optimized data store or the remote data store . In some embodiments the storage optimizer may periodically compress data contained in data store and transfer the compressed data to the optimized data store.

The user may generate one or more queries using the computer system client device and transmit queries to the service provider over connection . The queries may include a data set record indexes alphanumeric text search string images audio location query terms or any other information suitable for identifying one or more data items stored by the service provider. The query may be received by the query processor or one or more other services of the service provider . For example the query may be generated by a web server operated by the service provider based at least in part on information provided by an application executed by the computer system client device . The web server may transmit the request to the query processor for fulfillment and the query processor may return the results to the web server or directly to the computer system client device . A filter may be generated based at least in part on the query . The filter may be generated by the query processor or one or more other services of the online retailer. The filter may be any filter capable of determining whether a particular data item or record is within the set of data items or records that satisfy the query . For example the filter may be a bloom filter configured to test whether a particular element is a member of a set.

The query processor may then scan the optimized data store using filter in order to obtain data items to satisfy the query . If the query processor obtains sufficient data items from the optimized data store the query processor may terminate execution of the query and return the results. In various embodiments regardless of whether the query processor obtains sufficient data items from the optimized data store the query processor continues to execute the query by at least scanning the data store and the remote data store . If however the query processor does not obtain sufficient data items from the optimized data store the query processor may then attempt to retrieve additional data items from one or more other data stores in order to satisfy the query . For example if the query processor does not obtain sufficient data items from the optimized data store the query processor may then scan using filter the data store . Data store may be an append data store or similar data store. If the query processor still has not obtained sufficient data items to satisfy the query the query processor may cause the remote data store to be scanned.

Along with entering the query the API call may be configured with one or more options further defining the operation of the query processor or other service executing the query. The options may include as illustrated in a completion threshold and strict or loose adherence to the threshold. Completion threshold indicates a percentage of the total number of possible results which when returned in response to the query may be considered as satisfying the query. Furthermore the query processor may determine or the API call may specify a number for records to be excluded from the total number of possible records when determining the threshold. For example the query may include a search string configured to return data logs generated by one or more computer system instance the data logs may be stored by the service provider on a plurality of different storage node and may also include replicated copies on a plurality of other storage nodes. The user may further specify a percentage of the total number of data logs to be searched in order for the query to be considered complete the specified percentage may be referred to as a completion threshold . As an example the user may select a particular completion threshold percentage from a drop down list presented in a user interface although any suitable mechanism for capturing user selection may be used in accordance with the present disclosure.

The user may further modify the execution of the query by selecting the strict threshold or the loose threshold. The strict threshold may modify execution of the query such that as soon as the completion percentage is reached the query is terminated and no further searching or scanning is done. The loose threshold may allow the query processor or other service executing the query to continue searching one or more data stores for data items that satisfy the query. For example the user may select a completion percentage of 40 percent and the loose threshold the query may then be received by the query processor and the query processor may obtain 40 percent of the total number of possible records from the optimized data store. The query processor may continue and search other data stores such as the append data store or the remote data store for data items that satisfy the query . The APL call may also allow for a variety of other options that may modify the operation of the query including a time out period a set period of time the query is to execute return query results as they are obtained or only upon termination of the query error handling and any other option suitable for modifying the execution of the query . Query results may also be paginated. Furthermore the execution of the query may be paused by the user or when a certain number of results have been return. The execution of the query may be resumed with or without contemporaneous user input.

The user input may include any data caused by the user to be stored by the service provider. For example the user input may include data logs generated by computer systems operated by the user. In another example the user input may be data generated by one or more virtual computer system instances executed by the service provider on behalf of the user. Data designated as user input may be received by the front end . The front end may be a collection of computing resources collectively configured to receive user input and user query and direct the data to the appropriate computer system or service of the service provider such that the received data may be processed accordingly. The front end may be a physical or virtual computing device including a processor and memory and programmed to perform to receive user queries and direct the queries to the appropriate query processor . In the case of the user input the front end may use one or more distribution algorithms to place the user input in the appropriate distributed storage node. The front end may also direct the user query to the appropriate query processor or may direct the user query to a plurality of query processors. The front end may direct the user query based at least in part on a variety of factors such as the availability of the query processors the availability of the storage nodes the data contained in the storage nodes associated with the query processors latency of the query processors and or storage nodes physical location of the query processors and or storage nodes network location of the query processors and or storage nodes or any other suitable factor for distributing queries in a distributed storage environment.

The query processor may be a collection of computing resources collectively configured to obtain data from one or more data stores in response to the user query . The query processor may be a physical or virtual computer system including memory and a processor programmed to search one or more data stores for data items responsive to the user query . The query processor as described above in may generate a filter based at least in part on the user query . The query processor may then use the filter to obtain from a storage system of storage node data item useable to fulfill the user query . Storage node may be a collection of computing resources collectively configured to provide storage for users of the service provider . The storage node may be a physical or virtual storage device such as a database and may further include a processor and a memory with instruction that when executed by the processor cause to the storage node to store data. The storage node may receive data to be stored on behalf of the user or one or more other systems of the service provider . The storage node may cause the received data to be stored in the storage system . The query processor may be further configured to estimate the total number of possible results returned for a user query . Based at least in part the estimate the query processor may duplicate the user query to one or more remote storage nodes or scan additional data stores of storage node . The remote data store may be a collection of computing resources collectively configured to store data in a distributed data storage system. The remote data store may also be configured to transmit user query to query processor . The remote data store may be a physical or virtual storage device such as a database and may further include a processor and a memory with instruction that when executed by the processor cause the remote data store to store data.

As illustrated in the storage system may contain multiple data stores including a data store A a data store B and an optimized data store A . The storage system may be a collection of computing resources collectively configured to store data such as a hard disk random access memory read only memory network attached storage or any other device suitable for storing data. The data store A the data store B and the optimized data store A may be a collection of computing resources collectively configure to store data in a structured manner or unstructured manner. The data store A the data store B and the optimized data store A may be database applications executing on the storage system and programmed to store data in a particular format. For example the data store A and the data store B may be append data stores which are configured to store data by appending the data to the data store. In another example the optimized data store may be configured to store packed or otherwise compressed data. Although only three data stores are illustrated as part of storage system in any number of storage nodes may be contained in storage system . Furthermore the storage nodes may contain data at various levels of compression. For example the data store A may contain only raw data the data store B may contain partially compressed data and the optimized data store A may contain fully compressed data.

The storage optimizer may be a collection of computing resources collectively configured to extract data from one or more data stores of storage system and compress the extracted data in order to generate optimized data store A . The storage optimizer may be a physical or virtual computer system including memory and a processor programmed to determine statistical redundancies in data and remove at least a portion of the redundant data in order to compress that data. The storage optimizer may use a variety of techniques alone or in combination to generate optimized data store A . The storage optimizer may remove preprocessed data or preprocessed data items from data store A and may generate processed data or processed data items based at least in part on the preprocessed data or preprocessed data items. Data store A may be an append data store or other data store configured to store data with minimal processing. Preprocessed data items may include any records stored in a storage node of the service provider that have not be encoded or otherwise processed to remove redundancy in the data items. The preprocessed data items may also include records that have been partially encoded or otherwise processed to remove redundancy in the data items. The preprocessed data stored in the appended data store may be considered preprocessed in relation to the corresponding processed data in the optimized data store A . Once the storage optimizer or other service of the service provider has encoded the data items stored in data store A removed the corresponding data items from data store A and stored the encoded data items in the optimized data store A the data items may be considered processed data items. Various techniques may be used to process preprocessed data items in order to generate processed data items the various techniques are described in greater detail below in connection with .

Furthermore the storage optimizer may also optimize or partially optimize the data in the data store A and the data store B . For example the storage node may receive overflow data from user input . As a result the storage node may cause storage system to store the overflow data in data store A . The storage optimizer may not have the current computing capacity to fully compress the overflow data as it is being written to data store A but may have the computing capacity to partially optimize the overflow data. For example the storage optimizer may implement a reuse count in order to encode the overflow data as it is being written to data store A . The storage optimizer may remove preprocessed data items from the data store A and process the data items in order to generate processed data items. The storage optimizer may then cause the processed data items to be stored in the optimized data store A the processed data items may correspond to the preprocessed data items removed from the data store a .

In one embodiment the hierarchically structured schema for the column values may be represented as a sequence of sub records for a value referred to as a reuse count . For example a first value being A B C D. The prefix compression operation may compress a subsequent second value of A B C E by storing the second value as 3 E where the ordinal 3 specifies the number of hierarchy levels in common between the first and second values and the data E specifies a suffix for the second value. The ordinal may be stored in the reuse count indicating the number of hierarchy levels to reuse from the previous record. In another embodiment a repetition count may be used to compress the data. For example the prefix compression operation may compress one or more subsequent values all identically A B F by storing the values as 2 3 F where the first ordinal 3 specifies the number of common hierarchy levels with the previous value the second ordinal 2 specifies the number of repetitions of the value and the data specifies a suffix for the value.

In another embodiment a lock back count may be used in order to implement negative look behind encoding. For example the prefix compression operation may compress subsequent values all identically A B C D G by storing the values as 4 2 5 G where the first ordinal 4 specifies the number of common hierarchy levels with the first value the second ordinal 2 specifies the number of repetitions of the value the third ordinal 5 overrides the compression look behind to be the first value instead of the predecessor value and the data specifies a suffix for the value.

The overflow data stored in the append data store may be encoded or partially encoded. The data may be encoded using any of the techniques described herein such as those described above in connection with or any other encoding technique suitable for reducing the redundancy in data. The overflow data may be encoded by the storage optimizer or other component of the storage node. In numerous variations to process the overflow data in not encoded as it is being written to the append data store instead the overflow data is periodically compressed by the storage optimizer to generate optimized data. The period for compressing the overflow data may be determined at least in part by the computing capacity of the storage optimizer.

Returning to process the storage node or component thereof such as the storage optimizer may determine if there is sufficient computing capacity to perform one or more optimization operations on the overflow data contained in the append data store. If there is insufficient computing capacity the process may wait until there is sufficient computing capacity to continue. If there is sufficient computing capacity the storage optimizer may optimize data contained in the append data store . For example the storage optimizer may reorder the records contained in the append data to eliminate the look back count as described above in connection with . The storage optimizer may remove the data from the append data store and perform one or more optimization operations. Optimization operations may include any operation to reduce the redundancy in the records contained in the append data store. Once the storage optimizer has optimized the data the optimized data may be stored in the optimized data store . The optimized data store may contain overflow data that has been compressed in order to reduce the size of the data and enable efficient searching and scanning of the data in order to obtain results for user queries.

Once the query processor has received the query the query processor or other computer system may generate a filter . The filter may be configured to obtain records that are a member of the set of records that satisfy the query. The query processor may also obtain an estimate of the number of results . The query processor may obtain an estimate based at least in part on the data contained in one or more data stores associated with the query processor. The query processor may also maintain an estimate of like data entries. The query processor may then determine an optimized data store to fulfill the query . The query processor may determine the optimized data store based at least in part on the data contained in the optimized data store. In numerous variations of process the query processor may be associated with only one optimized data store.

The query processor may obtain one or more query results from the optimized data store . The query processor may scan the optimized data store using the generated filter and copy any records indicated by the filter that satisfy the query. If there is sufficient data to satisfy query e.g. the target threshold has been met or exceeded the query may be fulfilled .

Fulfilling the query may include transmitting the data directly to the user to an application indicated by the user to one or more computer systems of the service provider or otherwise making available to the user the results of the query. However if the target threshold is not met the query processor may obtain query results from a remote data store . The query processor may transmit a duplicate request over a network to one or more remote storage nodes. One or more remote query processors associated with the one or more remote storage nodes may receive the query and execute the query. The one or more remote query processors may perform process in order to fulfill the duplicate query. The one or more remote query processors may return query results to the query processor the user directly or one or more other computer systems of the service provider. An indication may be provided to the query processor indicating whether the one or more remote query processors completed the request and or the number of results returned. The query processor may use the number of results returned by the one or more remote query processors in order to calculate whether the target threshold has been achieved.

If sufficient query results were returned by the one or more remote query processors the query processor may fulfill the query . However if insufficient data was returned the query processor may obtain query results from the append data store . The append data store may be partially encoded and may also contain an estimate of the amount of data contained in the append data store that is not encoded. Once the results have been obtained from the append data store the particular storage node associated with the query processor may fulfill the query . The storage node may be exhausted of records satisfying the query regardless of the target threshold being met.

Although process shows fulfilling the query as a sequential process the query processor may partition the query and distribute the partitions to be executed in parallel or the query processor may distribute the entire query to be executed in parallel amount multiple query processors. Furthermore process may be modified such that the data stores may be scanned in any order. For example the query processor may first obtain query results from the optimized data store then the append data store and finally the remote data store. Process may also include obtaining query results from any number of data stores either locally or remotely. The query processor may also terminate execution of process immediately upon achieving the target threshold regardless of the current state of the system performing process . If the process is terminated after one or more duplicate queries have been transmitted by the query processor the query processor may transmit an indication to terminate the one or more duplicate queries.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

