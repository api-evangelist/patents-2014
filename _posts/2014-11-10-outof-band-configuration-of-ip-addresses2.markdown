---

title: Out-of band configuration of IP addresses
abstract: In some implementations, an IP address can be configured for a computing device using an out-of-band communication channel. For example, a system administrator can configure a system controller (e.g., baseband management controller) with an IP address using an out-of-band communication channel. In some implementations, the system controller can be configured with the IP address when the computing device is powered down. The system controller can store the IP address in memory associated with the system controller. In some implementations, an operating system of the computing device can be configured with an agent (e.g., process, application, utility) that will request the IP address from the system controller and configure the computing device to use the IP address. For example, the operating system agent can use various operating system commands to configure the IP address for the computing device based on the IP address received from the system controller.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544267&OS=09544267&RS=09544267
owner: QUANTA COMPUTER INC.
number: 09544267
owner_city: Taoyuan
owner_country: TW
publication_date: 20141110
---
The disclosure generally relates to configuring an internet protocol IP address for a computing device.

Conventionally an Internet protocol IP address for a computing device can be configured manually or by using a dynamic host configuration protocol DHCP service. For example a computing device can be dynamically configured with an IP address when upon startup of the computing device the computing device establishes a connection to a DHCP server and receives a dynamically allocated IP address from the server. However if the computing device administrator wishes to specify a static IP address for the computing device the administrator will often have to log in to the operating system of the computing device and use various system commands to set the IP address for the computing device. In either case the computing device and operating system must be running before the IP address can be configured for the computing device.

In some implementations an IP address can be configured for a computing device using an out of band communication channel. For example a system administrator can configure a system controller e.g. baseband management controller with an IP address using an out of band communication channel. In some implementations the system controller can be configured with the IP address when the computing device is powered down. The system controller can store the IP address in memory associated with the system controller. In some implementations an operating system of the computing device can be configured with an agent e.g. process application utility that will request the IP address from the system controller and configure the computing device to use the IP address. For example the operating system agent can use various operating system commands to configure the IP address for the computing device based on the IP address received from the system controller.

Particular implementations provide at least the following advantages A system administrator can configure an IP address of a computing device e.g. a server prior to booting or while the computing device is in a low power state.

Details of one or more implementations are set forth in the accompanying drawings and the description below. Other features aspects and potential advantages will be apparent from the description and drawings and from the claims.

It will be appreciated that for simplicity and clarity of illustration where appropriate reference numerals have been repeated among the different figures to indicate corresponding or analogous elements. In addition numerous specific details are set forth in order to provide a thorough understanding of the embodiments described herein. However it will be understood by those of ordinary skill in the art that the embodiments described herein can be practiced without these specific details. In other instances methods procedures and members have not been described in detail so as not to obscure the related relevant feature being described. Also the description is not to be considered as limiting the scope of the embodiments described herein. The drawings are not necessarily to scale and the proportions of certain parts have been exaggerated to better illustrate details and features of the present disclosure.

The term coupled is defined as connected whether directly or indirectly through intervening members and is not necessarily limited to physical connections. The connection can be such that the objects are permanently connected or releasably connected. The term substantially is defined to be essentially conforming to the particular dimension shape or other word that substantially modifies such that the member need not be exact. For example substantially cylindrical means that the object resembles a cylinder but can have one or more deviations from a true cylinder. The term comprising when utilized means including but not necessarily limited to it specifically indicates open ended inclusion or membership in the so described combination group series and the like.

In some implementations system controller can receive the IP address from a remote management system. For example the remote management system can be server management system . In some implementations server manager system can include server manager application e.g. software that is operated by a system administrator . For example server manager can provide a user interface that a system administrator can interact with to specify the IP address of server .

In some implementations a system administrator can specify an IP address for server using server manager . Server manager can send the specified IP address to system controller . For example server manager can send an IP address configuration request to IP configuration utility running on system controller . For example IP configuration utility can be implemented in software or firmware configured on system controller . In some implementations IP configuration utility can provide interfaces for sending receiving the status progress requests as described in detail below. For example IP configuration utility can include interfaces for 1 setting a server s IP address 2 getting a server s IP address 3 setting a progress status and 4 getting a progress status. For example the configuration request can be sent by the server manager to system controller e.g. IP configuration utility using the interface for setting the server IP address. Since system controller operates independently of CPU system controller can receive the IP address from server manager before CPU and or operating system are booted up e.g. before powered on before initialized while in a low power state idle etc. .

In some implementations IP configuration utility can operate independently of the other functions of system controller . For example when system controller is a BMC the BMC s primary function is to monitor the physical state of server . IP configuration utility can operate independently of the BMC s monitoring functions.

In some implementations the IP address configuration request can be sent to IP configuration utility through a network interface of system controller . For example the configuration request can be sent using network interfaces IFs which are coupled to network e.g. LAN WLAN WAN Internet etc. . Network IF can be a dedicated network IF of system controller that allows for out of band communication between server management system and system controller .

In some implementations IP configuration utility can store the specified IP address in memory associated with system controller . For example IP configuration utility can store the IP address received from server manager in non volatile memory e.g. NVRAM read only memory flash memory FRAM etc. corresponding to system controller .

In some implementations IP configuration utility can provide the configured IP address to operating system agent . For example both system controller and CPU can be housed on server . CPU can be configured to support operating system OS e.g. UNIX versions of the Microsoft Windows operating system distributions of the Linux operating system and any operating system supporting the functions disclosed herein . Operating system can be configured with OS agent e.g. process application utility which can interact with IP configuration utility to configure the IP address for server . In some implementations OS agent can be a software application process or utility that is pre installed onto OS .

In some implementations OS agent can request the IP address from system controller . For example upon booting up e.g. powering on initializing the BIOS initializing the operating system server and periodically thereafter IP configuration utility can receive an IP address request from OS agent requesting the IP address that IP configuration utility received from server manager . In response to receiving the IP address request IP configuration utility can send the requested IP address to OS agent . Once OS agent receives the IP address from IP configuration utility OS agent can use various operating system commands e.g. ifconfig ipconfig etc. to configure the IP address of server based on the received IP address.

In some implementations once server is configured with the IP address received from system controller server can advertise its IP address to other network devices. For example once OS agent receives the IP address from IP configuration utility OS agent can configure server e.g. operating system to use the received IP address. The operating system can send IP address advertising packets out to the network using network interface controllers NICs for example. NICs can transmit the IP address advertising packets to switch e.g. a top of rack switch so that switch can generate the appropriate routing and forwarding tables.

In some implementations system controller can receive the IP address from server management system before server is booted up. For example system controller operates out of band and so is adapted to function independently of CPU and OS . As such system controller is able to process the configuration request even though server is not booted up or powered on. Alternatively after booting up system controller can receive the IP address from server management system while server is in a low power or idle state. For example low power and idle states save power by halting instruction to stop a CPU from functioning until an interruption occurs. Because system controller operates out of band and independently of the operating system and CPU the configuration request can be received and processed without interrupting server from the idle state.

In some implementations more than one server IP address can be configured. For simplicity only one server is discussed and illustrated. However it is understood that more than one server can be implemented in accordance with the teachings herein. For example multiple servers each with their own system controller IP configuration utility CPU OS OS agent and NICs are coupled to a single server management system through a network IF each network IF being a dedicated IF for each server. The server management system through the server manager can send multiple configuration requests to multiple system controllers e.g. BMCs to configure the multiple servers with different IP addresses. This can be accomplished prior to booting up the servers or while the servers are in a low power or idle state according to the teachings herein.

Referring to is a flow diagram of an example process for a remote IP configuration using a system controller. The method described below can be carried out using the configurations illustrated in for example and various elements of these figures are referenced in explaining the example method. Each block shown in represents one or more processes methods or subroutines carried out in the example method. Furthermore the illustrated order of blocks is illustrative only and the order of the blocks can change according to the present disclosure. Additional blocks can be added or fewer blocks may be utilized without departing from this disclosure. The example method begins at block .

At block a system controller can receive a configuration request to configure an IP address of the server. For example the configuration request can be a request received from a server management system that specifies an IP address for the server. The request can be received using an out of band communication channel e.g. system controller dedicated network interface that operates independently of the CPU. Thus in some implementations the IP address can be configured with system controller even while the server is powered down idle or otherwise not operational e.g. the server has failed in some way .

In some implementations system controller can maintain a variable e.g. indicator flag to indicate when an IP address update is in progress. For example system controller e.g. IP configuration utility can send an indicator flag value to the OS agent and to server manager to indicate when system controller has been configured with an IP address and when the IP address has be configured on server . For example upon receiving the specified IP address from server management system system controller can set the value of an indicator flag to 1 to indicate that an IP address update set operation is in progress e.g. a new IP address has been received but not set on the server yet . Prior to receiving the specified address the default value of the indicator flag is set to 0 for example indicating that there is no new IP address to configure on the server or that the process for setting the previously specified IP address is complete. The indicator flag can be stored in memory associated with system controller .

At block the system controller can store the specified IP address in a storage associated with the system controller. For example system controller can store the specified IP in memory and responds to server management system that the IP address was stored by returning a indicator flag value of 1. Server management system can present a response to the system administrator e.g. on a graphical user interface indicating that the IP address configuration is in progress.

In some implementations server manager can send a status request to system controller regarding the status of the IP configuration. For example server manager can periodically send a status request to IP configuration utility on system controller to determine if the previously specified IP address has be set on server . IP configuration utility can respond to the status request with a 1 value when the IP address is still pending e.g. has not been set on server or with a 0 value when the IP address has been set on server . Upon receiving a value of 1 from system controller server manager can be configured to wait and send another status request according to a predetermined time interval.

At block server is booted up. In some implementations system controller boots up server . For example system controller can receive a boot up request from server manager causing system controller to boot up server . Alternatively system controller can be programmed to automatically boot up server after receiving the specified IP address from server manager .

At block the system controller receives an IP address request from an operating system OS agent for the specified IP address. For example IP configuration utility can receive a progress request from an OS agent and responds with the value of the indicator flag. A 0 means the IP address does not need updating e.g. there is no IP address to be set . A 1 means that the IP address needs to be updated e.g. the IP configuration utility has received a new IP address that has not been set on the server yet .

At block the system controller provides the specified IP address to the OS agent in response to the IP address request. For example when the value of the status indicator flag is 1 e.g. a new IP address needs to be set on server IP configuration utility can send a flag value of 1 to OS agent to indicate that the IP address needs updating. When the IP address needs updating OS agent can request the new IP address and configure the IP address of the server based on the IP address received from IP configuration utility .

In some implementations upon configuring server with the IP address received from IP configuration utility OS agent can confirm to IP configuration utility that the IP address was successfully configured. IP configuration utility can then set the progress indicator flag to 0 to indicate that the IP address configuration of server is complete.

In some implementations server management system can query system controller according to a predetermined time interval to check on the status of the IP address setting at server . For example IP configuration utility can receive the query and can respond with a flag value of 0 when the IP address configuration process at server is complete. When server manager receives the indicator flag value of 0 server manager then presents a progress complete message to the system administrator e.g. using a graphical user interface of server manager confirming that the IP address was updated successfully.

Referring to is a flow diagram of an example method for a remote IP configuration process using an operating system agent. The method described below can be carried out using the configurations illustrated in for example and various elements of these figures are referenced in explaining the example method. Each block shown in represents one or more processes methods or subroutines carried out in the example method. Furthermore the illustrated order of blocks is illustrative only and the order of the blocks can change according to the present disclosure. Additional blocks can be added or fewer blocks may be utilized without departing from this disclosure. The example method begins at block .

At block an operating system OS of a server is initialized. For example during initialization OS agent can send a progress request to system controller to query whether the server s IP address needs to be updated. In one version the progress request is sent periodically according to a predetermined time interval. When OS agent receives a 0 the IP address does not need updating and OS agent does nothing and waits to send another progress request according to the predetermined time interval. If OS agent receives a 1 the IP address needs to be updated.

At block during initialization of the OS the OS agent sends an IP address request to the system controller for an IP address of the server. For example OS agent can send an IP address request to system controller e.g. IP configuration utility when OS agent receives a flag value of 1 indicating that the IP address needs updating.

At block the OS agent receives a specified IP address from the system controller. For example system controller can receive the IP address request from OS agent . System controller can responds to the IP address request by sending the IP address received from server manager to OS agent .

At block the OS agent configures the IP address of the server based on the specified IP address. For example OS agent can use various operating system commands such as ifconfig in LINUX to set the server s IP address to the specified IP address. Server then configures the specified IP address to NIC or that was indicated by the system administrator. In some implementations OS agent can confirm to system controller that the IP address was successfully configured on server by sending a reset command to system controller to set the flag back to 0 .

In some implementations system architecture can correspond to a single server in a rack of servers. Various rack configurations can be implemented. For example a rack can include multiple chassis and each chassis can contain multiple servers. Each server in the rack can be connected by various hardware components e.g. backbone middle plane etc. . Each server in the rack can be connected to a network through a top of rack switch.

Display device can be any known display technology including but not limited to display devices using Liquid Crystal Display LCD or Light Emitting Diode LED technology. Processor s can use any known processor technology including but are not limited to graphics processors and multi core processors. Input device can be any known input device technology including but not limited to a keyboard including a virtual keyboard mouse track ball and touch sensitive pad or display. Bus can be any known internal or external bus technology including but not limited to ISA EISA PCI PCI Express NuBus USB Serial ATA or FireWire.

Computer readable medium can be any medium that participates in providing instructions to processor s for execution including without limitation non volatile storage media e.g. optical disks magnetic disks flash drives etc. or volatile media e.g. SDRAM ROM etc. . The computer readable medium e.g. storage devices mediums and memories can include for example a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Computer readable medium can include various instructions for implementing operating system e.g. Mac OS Windows Linux etc. and applications such as computer programs. The operating system can be multi user multiprocessing multitasking multithreading real time and the like. The operating system performs basic tasks including but not limited to recognizing input from input device sending output to display device keeping track of files and directories on computer readable medium controlling peripheral devices e.g. disk drives printers etc. which can be controlled directly or through an I O controller and managing traffic on bus . Operating system can include an agent e.g. software application utility program etc. configured to request an IP address from system controller and invoke operating system functions for configuring the server IP address based on the IP address received from the system controller as described above with reference to . Network communications instructions can establish and maintain network connections e.g. software for implementing communication protocols such as TCP IP HTTP Ethernet etc. .

Memory can include high speed random access memory and or non volatile memory such as one or more magnetic disk storage devices one or more optical storage devices and or flash memory e.g. NAND NOR . The memory e.g. computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se. The memory can store an operating system such as Darwin RTXC LINUX UNIX OS X WINDOWS or an embedded operating system such as VxWorks.

System controller can be a service processor that operates independently of processor . In some implementations system controller can be a baseboard management controller BMC . For example a BMC is a specialized service processor that monitors the physical state of a computer network server or other hardware device using sensors and communicating with the system administrator through an independent connection. The BMC is configured on the motherboard or main circuit board of the device to be monitored. The sensors of a BMC can measure internal physical variables such as temperature humidity power supply voltage fan speeds communications parameters and operating system OS functions.

In some implementations the BMC runs independently of processor and hence in the event of processor memory or any other hardware failure the BMC can still provide services and remain functional. In some implementations the BMC can start running as soon as a server is plugged into a power source e.g. power supply unit backup power unit power distribution unit etc. . For example the power button on the front side of the blade does not turn on off the BMC. The management connectivity to the BMC is through two BMC dedicated 100BASE T interfaces on the blade to the chassis internal management. However at any given instance the connectivity to the BMC is only through one of the two 100BASE T interfaces the other one being redundant. A system administrator e.g. using server manager can interact e.g. configure monitor etc. with system controller using the controller s intelligent platform management interface IPMI . For example the IPMI interface can be used to configure system controller with the IP address for the server. Alternatively system controller can be configured e.g. with software firmware etc. with a non IMPI interface e.g. custom interface that allows a system administrator to remotely configure the server s IP address using system controller .

The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language e.g. Objective C Java including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors or cores of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

One or more features or steps of the disclosed embodiments can be implemented using an application programming interface API . An API can define one or more parameters that are passed between a calling application and other software code e.g. an operating system library routine function that provides a service that provides data or that performs an operation or a computation.

The API can be implemented as one or more calls in program code that send or receive one or more parameters through a parameter list or other structure based on a call convention defined in an API specification document. A parameter can be a constant a key a data structure an object an object class a variable a data type a pointer an array a list or another call. API calls and parameters can be implemented in any programming language. The programming language can define the vocabulary and calling convention that a programmer will employ to access functions supporting the API.

In some implementations an API call can report to an application the capabilities of a device running the application such as input capability output capability processing capability power capability communications capability etc.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made. For example other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

