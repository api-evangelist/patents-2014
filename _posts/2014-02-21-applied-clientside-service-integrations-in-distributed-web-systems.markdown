---

title: Applied client-side service integrations in distributed web systems
abstract: In-context compatibility of one or more services or application instances running as services with currently active work is monitored. Respective context-sensitive icons indicate contextual compatibility and availability of corresponding services. The context-sensitive icon is displayed in a graphical user interface of a web application. Availability of one or more services or application instances running as services is indicated in the graphical user interface using different states of the context-sensitive icon. A user may select the icon corresponding to an available and compatible service to be applied to the currently active work in the web application. A single user gesture type command releases the corresponding service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354776&OS=09354776&RS=09354776
owner: Aspen Technology, Inc.
number: 09354776
owner_city: Bedford
owner_country: US
publication_date: 20140221
---
Computer application programs have evolved from stand alone operation to operation through various computer network configurations. Computer networks have further developed from LAN or WAN Local or Wide Area Networks to Global networks such as the Internet. As an outgrowth web and cloud computing along with software as a service SAS came into existence.

Web applications and related computing platforms are not without limitations and disadvantages generally speaking Some challenges faced by web applications include latent communication weak presentation layer access via devices and a lack of standards and or adherence to standards. Various improvements in particular in supporting enterprise services in web applications are desired.

Making use of enterprise services in modern web applications presents challenges that can be overcome through strong graphical user interface GUI paradigms that are congruent with technological limitations. The key behaviors to be provided are monitoring application control and release of the services or application instances running as services that roughly map to the lifecycle of a stateful service session. Although widely applicable this pattern is especially valuable when the services exist as a finite pool of resources that can be consumed even if only temporarily so.

Embodiments aptly provide user selectability of services application instances. By aptly provides Applicant means presenting or otherwise rendering indications of proper context compatibility wise services application instances and timely availability wise displaying the same.

Embodiments of the present invention provide a method and an apparatus to manage enterprise services and application instances running as services. Embodiments employ a visual representation such as a context sensitive icon to indicate to a user compatibility including contextually and availability of one or more services or application instances running as services with currently active work. Context of the currently active work is monitored. Appearance disappearance and re appearance of the context sensitive icon changes based on the monitored context of the active work. Embodiments use a near real time indicator to indicate availability of one or more services or application instances running as services. The near real time indicator indicates such availability to a user by using different states of the context sensitive icon. Upon user selection of the icon indicating an application instance that is both contextually compatible and available at the moment embodiments apply the corresponding service i.e. the service associated with the application instance to the currently active work. Use or application of the service to the currently active work by one user changes the indication of availability of the service by changing the state of the corresponding icon for other or subsequent users. For example embodiments change the icon from a first state indicating that the in context compatible service application instance is available to a second state indicating that the service application instance is unavailable. The service can be released by a single user gesture in the graphical user interface of the active work area.

Embodiments of the present invention provide a method a computer system and a computer program product for managing services. Embodiments aptly provide in a web application user selectability of a contextually compatible service as the service becomes available. To accomplish this embodiments monitor context of currently active work in the web application. Based on the monitoring embodiments produce a visual representation of a respective icon for each contextually compatible service in a graphical user interface GUI displayed in the web application. Embodiments timely indicate availability of the service using different states of the icon. For example a first state of the icon indicates availability of the service and a second state of the icon indicates unavailability of service. A user selects the icon corresponding to an available and contextually compatible service to be applied to the currently active work in the web application. Upon application of the corresponding service to the currently active work the indication of the availability of the service is changed i.e. the corresponding icon is changed to the second state. After the service has been applied the corresponding service may be released in response to a single user gesture in the graphical user interface of the web application. In some embodiments the computer system includes a service management module.

In example embodiments the icon is displayed illuminated in color in the first state indicating that the corresponding contextually compatible service is available.

In example embodiments the icon is displayed dimmed or grayed out in the second state to indicate that the corresponding in context compatible service is unavailable.

In some embodiments the icon is displayed in a third state in alternative views or in a different panel palette during consumption of the corresponding service. In some embodiments the third state suppresses display of the icon.

In other embodiments the user is part of a user group of at least one user. In preferred embodiments the user group is an enterprise system user group and the user is an enterprise system user.

In example embodiments the web application is a process engineering application. In preferred embodiments the web application is part of a loosely connected system of web applications such as an enterprise service system. For example the system of web applications may be the aspenONE Trademark of Assignee system.

In some embodiments the corresponding service is a simulation modeling service or a live plant data service.

In embodiments the respective icons of the one or more compatible services are displayed in a service activation bar area for initial user selection of the graphical user interface. The icon is dimmed or illuminated or otherwise changed between first and second or other different states as a function of changing availability of the respective service. In some embodiments the user selects the icon corresponding to an available and in context compatible service to be applied to the currently active work in the web application and the respective icon of the corresponding service is suppressed removed from disappears from or is not displayed in the service activation bar area.

In other embodiments an indication of the user selected icon is displayed in a service panel area signifying that the corresponding service is currently being applied to the active work in the web application. In preferred embodiments the service panel area is decoupled from the application instance that consumes the service.

In some embodiments the single user gesture to release a corresponding service is any of a user operating a displayed close box or the user dragging and dropping an icon or indication of the corresponding service to a certain area in the graphical user interface.

A computer system implements the foregoing features and methods by comprising a digital resource manager and a service assembly. The service assembly is formed of a resource adapter a service platform and a resource agent service each detailed below . The digital resource manager is operatively coupled to the service assembly in a manner that aptly provides in a web application user selectability of a contextually compatible i.e. pertinent service as the service becomes available.

A simulation engine may perform a simulation on a simulation model from a set of simulation models of a planned design specification. The simulation engine produces simulation data. The simulation data from and plant data from may be received through the network and passed to a correlation engine . The correlation engine may correlate the simulation data and plant data and may output the correlated data through one more user interfaces where includes at least to one more displays where includes at least as show in . Note that the display is accessible over the network for example with Progressive Visual Collaboration provided by aspenONE Trademark of Assignee and the display is accessible locally by the simulation engine as in Aspen Search Trademark of Assignee . Through the network which also may function as a system controller the system preferably includes Content Storage a Search Service a Resource Manager Service and a Resource Agent Service . Multiple users all have access to provide input across different geographic locations through the network .

The preferred Content Storage implementation is Microsoft Sharepoint however embodiments of the present invention may also use other content storage implementations in place of Microsoft Sharepoint. The Content Storage is used to store information including user profile information authentication information and membership information that is communicated to the user through a Web Service Data to a computer display for the user where the Web Service may optionally be included in a Web Server . The computer displays where at least also includes and shown in and include but are not limited to a computer monitor personal computer laptop desktop phone smart phone mobile phone projection device or other computer digital processing or computing device. In some embodiments the computer display includes a display screen. The user is provided with Web Applications that include User Interfaces UI that at least include Workspaces Plant Data Search Simulation and Administration where the UIs may optionally be included in a Web Server . The UI is implemented in Hypertext Markup Language HTML but alternative implementations may be used. Each user can build desired functions to create a unique combination of services instead of for example one software product per service. The service including an application instance running as a service may apply business logic allowing the user to choose functions and a unique combination of services to meet the user s needs. The application may allow for presentation and use application logic which picks and chooses services and determines function integration for the application. In some embodiments the UI is a graphical user interface GUI . Workspaces have a unified user interface that allows the user to store for example the search result modification changes snapshots of plant data and merged views of plant data. illustrates an example view of a Workspace UI . In addition embodiments of the invention include an infrastructure for example aspenONE Trademark of Assignee that provides capabilities for simulation search workspaces and other UIs into a single content area as shown in .

For example a Search UI allows the user to search through a Search Service for both actual real time processing plant operation status data and process design specification data. The Search Service software may extract metadata from the simulation model files and plant data and indexes that data into the search.

In embodiments sensors perform plant data measurements from plant assets and report the plant data measurements through plant data servers for non limiting example through an Aspen InfoPlus.21 IP.21 Trademark of Assignee data service . The Live Data in may correspond to plant data and may include live data historical data and other types of plant data. The plant data may be provided to the Client Adapter Web Sockets where the Client Adapter may optionally be included in a Web Server . As illustrated in live data from the Data Service and simulation data from the Enterprise Service Bus ESB are simultaneously input to the Client Adapter . The Client Adapter may establish two way communications. The Client Adapter may reduce network traffic and latency. The Hypertext Transfer Protocol HTTP headers may be significantly reduced. The Client Adapter may operate continuously.

A Correlation Engine in may correlate the simulation data and plant data into a set of correlated data. In some embodiments the Correlation Engine utilizes the Web Service the Client Adapter and the Workspaces Web Application of in order to correlate the data. However in alternative embodiments the Correlation Engine does not require all three elements and may include other elements. For example Correlation Engine applies techniques that adjust time scale of the simulation data and or the plant data or otherwise time synchronizes the data to form correlated data. The plant data and simulation data together may form the correlated data which is visually presented to the user through a computer display in a side by side manner which means that the plant data and the simulation data may be together concurrent time synchronized streaming visually corresponding correlated overlaid contiguous side by side neighboring adjoining adjacent juxtaposed or associated in nature or form a nexus.

The simulation data is received by the Client Adapter as follows in embodiments of . The Client Adapter on behalf of the user requests an available simulation resource from the Resource Manager . This request is the result of applying a Simulation Service as part of the Service Platform for example . . . to a model that the user is viewing in the Simulation Application . If the requested application instance running as a service is available and contextually compatible represented by the Resource Adapter the request is granted by the Resource Manager . If the requested resource is not available the Resource Manager denies the Client Adapter s request. The Client Adapter may then use turn taking and wait for an available resource. A binding identification is assigned from the Resource Manager and held by or communicated to the Resource Adapter and in some embodiments to the Client Adapter . The communication of the binding identification leads to the activation of Resource Adapter through the Resource Agent and the application instance running as a service associated with Resource Adapter is added to the bound pool. A binding allows for exclusive use of the resource such as the application instance running as a service by a user. An associated application instance running as a service can then be established or activated by a command from the Adapter . Access to a simulation resource in Service Platform is provided and a request is performed through the Enterprise Service Bus ESB Network Element which forwards requests to the Service Platforms . . . generally through the Resource Agent Service to obtain a simulation resource. Within one or more instances of Service Platforms the simulation resource may include one or more instances of Application one or more instances of Application one or more instances of Application or other types of simulators or application instances running as services. Multiple simulation resources may have the same UI or separate UIs. In addition a Resource Agent Service starts and stops Adapters where at least includes and . In some embodiments a user may only access one Service Platform module because the resources are fixed and finite. In some embodiments the Service Platform includes a Resource Adapter an application instance and a monitor. The components of the Service Platform may work together to provide functionality in the system of one application instance. In some embodiments the Resource Agent acts as a service for the whole machine running all of the platforms associated with the machine. The Resource Agent may start and stop Adapters when the machine starts up.

In this way embodiments employ a service assembly formed of at least the resource adapter service platform and resource agent service . The service assembly through resource manager aptly as proper pertinent and timely provides user selectability of one or more services to web applications as further made clear below.

A resource such as an application instance running as a service that is checked out and running may consume license tokens. In some embodiments a service may consume a resource such as an activation key or a key code such that the resource is no longer available. More supplies or resources may be purchased to restock the Service Platform or the System. In embodiments the Resource Adapter acts as a lightweight proxy that will launch application instances running as services only as needed which may minimize consumption of resources and computing power. While the resource such as an application instance running as a service is exclusively checked out to the user stateful information keyed to previous user tasks and needs may be called into the application instance running as a service.

An Adapter is associated with each Application Instance running as a Service Instance. The Adapters adapt application specific settings and instructions between software languages and the Adapters control the application instance running as a service and handles communication between the application instance running as a service and the Client Adapter the Resource Manager and the corresponding Resource Agent as shown in . The Adapters are also used to provide a connectivity mechanism to the ESB for a given instance of a simulator or application . When the simulation instance or application instance running as a service and the corresponding Adapter are activated then simulation data or application data from the shared store may be transferred through the ESB to the Client Adapter .

Once a simulation resource is established the Client Adapter has exclusive access to the simulator. Note multiple simulators or applications may be used but this fact is transparent to the user. Based on request parameters and or other input from Resource Manager and Client Adapter the system knows which type of simulator or application is required and automatically interacts with the correct one. In some embodiments if a deployment or service platform does not have a specific simulator or application installed the specific simulation or application instance running as a service is preferably not seen in the dynamic Service Bar such as in . The Service Platform sends replies and other messages to the Client Adapter that the application publishes for the client to read. The Service Platform may provide push notifications from the Services or Application Instance running as a service. The Service Platform may provide smaller faster and more focused messages.

Note that data from the shared store may include any user driven data meant for sharing. Note that both the Service Platforms and the data from the shared store are not limited to simulation and other types of applications using other types of Service Platforms data from the shared store may be used such as but not limited to files models application models process control planning scheduling manufacturing accounting manufacturing supply chain MSC products supply chain logistics anything that requires automation in a plant or process anything that performs processing of crude oil or other types. In addition as shown in multiple service platform instances modules may be used and multiple application instances running as a service may be used. Example Application Instances running as Service Instances include Aspen Plus Trademark of Assignee and Aspen HYSYS Trademark of Assignee for Hydro Carbon Simulation System which each provide a comprehensive process modeling system and PIMS Trademark of Assignee for Process Information Management System provides a planning and optimization solution. Note also that the simulation resource may also include both the Adapter and the corresponding Application Instance and may optionally include a Monitor which is started by Adapter . The simulation resource has access to the Shared Store of simulation model information so the Client Adapter may retrieve simulation data.

Referring back to the application instance running as a service has access to the Shared Store of simulation model information so the Client Adapter may retrieve simulation data. The Resource Agent runs locally on a simulation service server supports . The Resource Agent starts and stops Adapters where at least includes and based on configurations and commands which may be changed at runtime. At startup the Resource Agent reads its configuration and starts the appropriate number of Adapters which may be implemented as Application specific Adapters. The Adapters may be implemented as Aspen HYSYS Trademark of Assignee Adapters Aspen PIMS Trademark of Assignee Adapters Aspen Plus Trademark of Assignee Adapters and or other types of Adapters. The Adapters initialize and register with the Resource Manager . In some embodiments the Adapter registration is dynamic based on the instructions received by the Resource Agent. The Resource Manager is visible system wide and may not know the physical location of each adapter. The Resource Agent has a license to kill stop any service process if tasked by the administrator to keep the machine clear of hanging slow or otherwise misbehaving service threads. In one embodiment the Application Service Lifecycle is designed to mimic the Desktop Lifecycle although one skilled in the art may realize that other computer lifecycles may be used. As such the Resource Adapter is a proxy for the desktop user and starts and stops the application to help ensure stability and to guard against side effects.

The following is a further explanation of Resource Management from the Client View generally at for example of . To a system client there is a mechanism for sharing a limited set of resources across a group of people such as enterprise users where access is exclusive for the period of time that it is in use depending on availability. For example the enterprise service system will be configured to have a specific number of simulators available which depends on the topology or structure and hardware deployed for the whole system or network. The topology may be distributed. In embodiments a master copy of the simulator may exist. The master copy acts as a template which may be copied to a local directory. All enterprise users may share the pool of simulators and if a simulator is available a user may check out or use a specific copy of the simulator. No two enterprise users will be using the same simulator simultaneously or at the same time so a user s use of a specific copy of the simulator is exclusive during the period of check out. In some embodiments the service such as a simulator may be dedicated to the user and retain memories of user needs tasks events etc. of a stateful service session. In some embodiments the resource may be assigned to another resource or process. For example a scheduling service may be used to bind an application instance running as a service through its Resource Adapter for use at a particular time. In some instances all simulators available in a given enterprise service system are deployed or checked out so that none are available at that moment in time to a specific enterprise user.

For example the enterprise service system and process of Resource Management works a lot like bowling. Shoes are limited resources that require exclusive access while the enterprise user is playing no one else may use them. A representative assigns a pair of shoes in exchange for something a user wants back like a driver s license or tokens . When the user finishes the user returns the shoes to a trusted third party and after some housekeeping the shoes become available again and someone else may check them out. In embodiments of Web Application Web App the trusted third party is the Resource Manager and it oversees a system that is a bit more complex. Like a taxi cab dispatcher the Resource Manager knows how many cabs are available how many have riders and how many are out of service. An enterprise service system may provide manageability to the system. The enterprise service system may serve many users in a scalable way. For example the enterprise service system may scale from 25 users to 100 users to 10 000 users.

The Resource Manager also monitors compatibility. Compatibility implies that a given service or resource somehow enhances the existing work such that new value is created or existing value is released. Some services are contextually compatible with the current work. Compatibility and availability tell a user what services or resources could be applied to current work providing that it is available. For example as pieces or modules are added to the Service Platform module the new piece or module may include additional services resources and applications not previously available. Such systems are dynamic and may easily adjust if there are problems. An advantage of the Resource Management system includes its dynamic nature due to the modularity of the system. The Resource Management system is also configurable.

Referring back to the Resource Adapter is a smart proxy and handles all system interaction on behalf of the Application Instance running as a service. For example upon initialization the Resource Adapter registers the Service with the Resource Manager . In embodiments the Resource Adapter lets the Resource Manager know that the Resource Adapter is available to work if needed and the Resource Adapter runs as a lightweight proxy waiting for a call when not actively servicing requests. By running the Resource Adapter rather than running a Service in perpetuity the system has greater stability. Software application instances and services can have problems especially instability when they are constantly running. The Resource Adapter may have a lifespan of the lifetime of the system. The Application Instance which is run as a service as needed may have a lifespan corresponding to the time of binding and starting until the time of release and stopping. The Resource Adapter controls the lifespan of the Application Instance running as a service by starting and stopping the Application Instance as needed. The Resource Manager preferably does not require a priori knowledge of the Adapter . This high level of decoupling makes a system very dynamic and scalable.

The Resource Adapter preferably services user requests after it has been assigned to a specific client the assignment process is called binding and includes a binding identification or binding ID that drives dynamic routing. The binding ID is held by both the client and the Adapter . A bound Resource Adapter begins to receive user requests for processing and spins up an instance of the application which checks out tokens. As with any other System Service the Adapter publishes responses System Events and Notifications via messaging.

The Resource Adapter functions as a proxy for the Service and when not actively servicing requests the Service instance preferably does not exist. When the Application Instance running as a service is brought into being by Adapter communication occurs via a Case Execution Service CXS . This pattern allows the Resource Adapter to continue to participate in Automation System Management and Administrative functions. The Adapter is a stand alone system component and like all components preferably providing regular status reports to the Resource Manager even if there is no application currently running Once connected to the messaging backbone which is a component of ESB the Resource Adapter provides Service Access by receiving requests publishing events responses and notifications on behalf of itself and the application instance. Adapter Application Instance communication may occur via CXS which includes but is not limited to an application programming interface API . The Adapter may include control logic and may send commands through the CXS to the Application Instance to load run query or otherwise handle the model. The messaging backbone may use the Advanced Message Queuing Protocol AMQP . Other communication services protocols and programming languages may be used to implement the System messaging backbone.

The Adapter may terminate restart or repair the application instance running as a service. In some embodiments the Adapter shuts down or terminates the Application Instance running as a service when the Application Instance is no longer needed and the temporary files associated with the Application Instance running as a service are cleaned up or removed. The computer implemented method may include a secondary process a monitor that monitors the Adapter. In the event that the Adapter dies the monitor will terminate the running application instance and itself. In embodiments the monitor monitors runs a monitor process of the state of the Resource Adapter and optionally the state of the application instance running as a service. In embodiments the monitor is a small companion process that is launched after the launch of the application instance running as a service. The monitor may detect failures from either or both the Adapter and application instance running as a service thereby serving as an additional self healing mechanism. The monitor is given the process identification which is assigned by the operating system to any process of both the Adapter and the application instance running as a service. The Monitor holds or stores the process identification of the application instance and the process identification of the Adapter after the application instance runs as a service. In some embodiments the monitor can stop kill end or terminate based on each process identification and can stop kill end or terminate itself. The monitor acts as a safety to prevent rogue threads for example an application instance when its adapter dies.

The computer implemented method computer system and computer program product may include the switchover event including a failover event detected by a loss of one or more periodic heartbeat messages sent from the application instance running as a service to the Resource Manager through a Resource Adapter . The computer implemented method computer system and computer program product may include the switchover event resulting from an interrogation command sent from the Resource Manager to the application instance running as a service that fails to respond with an expected acknowledgement. The computer implemented method computer system and computer program product may include the switchover event including intervals of regular maintenance as administered by an administration dashboard. In some embodiments the loss of one or more periodic heartbeat messages sent from the application instance running as a service through the Resource Adapter to the Resource Manager indicates problems with the application instance and or the Resource Adapter and the Resource Manager may proactively take action including replacing the problematic Resource Adapter and Application Instance running as a service and moving the problematic Resource Adapter to the dead pool and killing the associated Application Instance . The computer implemented method computer system and computer program product may include the service being associated with a new application instance in addition to being associated with the application instance and subsequently after detecting the switchover event the application instance is no longer associated with the service thereby replacing the application instance identified for removal with the new application instance in a seamless manner such that a live user service session is not interrupted or modified wherein a redundant mirrored application instance is applied as the new application instance running as a service. The switchover event may be initiated by human action as opposed to automated logic.

Now that context of architectural elements and related terminology is described for a summary of enterprise service system for managing services is provided in . is used for an illustration of the primary steps of a preferred embodiment of the proposed approach. depicts the high level flow diagram of embodiments of an enterprise service system for managing services of the present invention. A processor executes Web Application . An application instance generally running as a service may be user selectably integrated into the Web Application . The invention system aptly provides in web application user selectability of a contextually compatible service or an application instance running as a service as the service becomes or is available. This is accomplished by the system at step monitoring contextual compatibility of a service or an application instance running as a service with the Web Application . In particular step monitors context of current active work in the executing web application . Step presents or otherwise displays a representative icon for each contextually compatible service. Generally speaking overall compatibility with various services may be known early in the development of Web application . There is a full set of services that Web Application might potentially consume. Within the workflow of Web Application a portion of the full set of Services application instances running as services may not be needed at certain times in Web Application and different unneeded portions of Services may be ignored at different times by Web Application . Therefore in some embodiments the system includes a Service Bar for presenting respective icons corresponding to a subset of Services pertinent to Web Application .

For each application instance step of the invention system indicates the availability of a service by toggling between a first state and a second state of the icon. The Web Application may detect the availability of a Service by passively listening for system messages advertising that the Service is available. In some embodiments the system messages are one or more periodic heartbeat messages. For a given Web Application the Web Application is designed to listen for the availability of compatible Services. In some embodiments the availability only is monitored for a subset of Services pertinent to Web Application with respective icons displayed in the Service Bar . The set of available services for a pertinent to Web Application corresponds to a subset of services contextually compatible with Web Application not necessarily the full set of Services.

At step system detects the user selection of an icon indicating an available and context compatible service e.g. to apply to the Web Application . In response step applies the corresponding service to the Web application and step changes the availability of the applied service by changing the respective icon to a second state to indicate unavailability of the associated service . In one embodiment step also supports various indicative screen views showing the icon in a third or other state s indicating consumption of the corresponding service . At step the application instance running as a service is released by a single user gesture in the graphical user interface of Web application .

An embodiment of the proposed approach applies non destructive editing in software models and files. One advantage of an embodiment of the proposed approach is that non destructive editing means that multiple users may make changes to the same file without having one user s changes overwrite another user s changes. This is accomplished by coding the plant processing software or simulator such as aspenONE Trademark of Assignee to remember the changes that a given user makes to a model and stores those changes in a given user s account of the invention system where the changes do not affect the other users and all users have their own private set or sets of changes. In the preferred embodiment of the proposed approach changes are initially private and the baseline model itself is preferably not changed. In one embodiment a single user may merge or share his sets of changes to a model. In an alternative embodiment users may merge or share changes to a model instead of employing a private change approach. A given user may receive a copy of the other user s changes or gain access to such changes as part of a collaborative workflow which is also embodied in the invention. In an example scenario loading the original model file and reapplying the changes restores the user s state and lets the user pick up where the last user left off and in example embodiments the user and the last user are the same user. Recovery from a critical failure in a simulator is preferably similar to starting over where opening a saved simulation triggers the process software or simulator to pull the user s modifications from the user s account and applies the user s modifications to the baseline model thereby restoring the state. In addition additional unsaved changes not saved in the user s account held in computer memory working memory generally may be retrieved for the user and these unsaved changes are also included as part of the saved modification set.

Another advantage of an embodiment of the proposed approach includes an advanced concept of autonomous self healing where the system components detect simulator failure conditions and take pro active steps behind the scenes by assigning a new simulator while attempting to recycle the failed instance. The system loads the data and reapplies the changes that were in effect when the failure occurred for example when the Application Instance running as a Service Instance fails but the Web Application remains viable. In one embodiment of the proposed approach this autonomous self healing is performed before a user is aware of a problem with the simulator.

Another advantage of an embodiment of the proposed approach is an improved change management strategy compared to existing change management strategies. Existing change management strategies apply source control such as Clearcase and CVS to change files through multiple users and the file changes result in different versions of a baseline that are stored in a repository. In existing systems the latest baseline version of the file is comparable to a single source of truth. By contrast an embodiment of the proposed approach provides multiple sources of truth where every user has an independent source of truth. In an embodiment of the proposed approach individual user preferences and individual user changes are stored in user preference storage or content storage and each user may have his own source of truth. Rather than just saving a new baseline for each version an embodiment of the proposed approach saves the changes relative to an initial original user baseline which is more convenient to the user.

Another advantage of an embodiment of the proposed approach is that it includes a user centric focus. By contrast in existing source control environments the focus is repository centric. An embodiment of the proposed approach includes a focus on the individual preferences and needs of the system developers. In an embodiment of the proposed approach user deltas and user preferences are saved. By saving user deltas and user preferences live sessions may be moved to new machines. In some embodiments the administrative console can migrate to a different machine. Through a Resource Manager Service using Resource Adapters the system has incredible flexibility and leverages behavior that mimics a user on desktop software in a distributed enterprise system as a service without requiring non trivial modifications to the application code or to alter its workflows in any material way.

Benefits of embodiments of the proposed methods computer systems and computer program products for managing services for a user group include displaying Compatibility and Availability information in user interfaces and GUIs including on mobile form factors PC browsers and touch enabled devices. Use of Compatibility and Availability information provides the user with a maximum amount of choices while avoiding confusion and possible frustration when choices leading to functional dead ends failures or illegal states are displayed in a UI.

Additionally using the Service Palette paradigm allows decoupling of the UI elements from the application instance running as a service. The Service Palette increases the ease of introducing new services when the new services may have very different requirements for display and control. Service context indicators including a Global Service Bar which displays services or application instances running as services currently being consumed by active work encourages user awareness as the user moves around the system.

Enterprise services and application instances can be represented as additional enhancement capabilities that can be applied to currently active work in a Web Application . Services information provided to the user fall into two categories compatibility including contextual and availability. Compatibility in the context of the current active work implies that a given service somehow enhances the existing work such that new value is created or existing value is released. In this way system s indications of compatibility contextual and availability tell a user what services could be applied to current work providing that it is available. For example as pieces or modules are added to the service platform or Web Application platform the new piece or module may include additional services and applications not previously available. Contextual compatibility of services and applications is monitored based on currently active work in a client workspace. Based on the monitoring system produces in a graphical user interface a visual representation of a respective icon for each in context compatible service or application as illustrated in . The icon serves as or provides a selection mechanism that allows a user gesture to transition a service into the application phase where that service is applied to enhance the current work. The monitoring phase provides contextual compatibility information to the user by a context sensitive representation of services i.e. display or presentation of the icon with a near real time indicator that provides the second type of information availability. Being able to see a service visually represented as a respective icon icon badge or service badge means that the service is contextually compatible with the current work. In some embodiments business logic is applied to display respective icons or service badges that are compatible in a context sensitive manner. Beyond having that visual cue moving between two detectable states indicates or signifies whether that in context compatible service is actually available at the moment. In some embodiments the one or more services involve turn taking pauses integrated into the services for example for specific services or shared resources . In some embodiments a hidden not visible respective icon represents a contextually incompatible service or application instance to apply to the current work. In some embodiments a respective icon is not displayed in a Service Bar or an Activation Bar when it is being consumed.

Availability of a given service may be represented in a number of ways but in the case of using an icon service badge having the icon manifest a visual change can help the user discern between a contextually compatible service that is available and one that is contextually compatible but happens to be currently unavailable. For example a contextually compatible and available service may be indicated by a respective icon displayed illuminated in color lit up or active. In example embodiments a contextually compatible and unavailable service is indicated by a respective icon displayed dimmed grayed out or disabled. Other visual or operational changes between a first state of the icon indicating availability and a second state of the icon indicating unavailability can also be used. A consumption of a context compatible service may result in a third state of the icon. For example the icon may be suppressed or removed from display or may disappear from the Service Bar .

The visual representations of a respective icon for each compatible and available service or application enhance user understanding of contextual compatibility and availability. At a glance a user can determine which services or applications can be applied to the current work based on visual cues linked to availability and contextual compatibility. An easy assessment of available and in context compatible resources such as services or applications is useful particularly in distributed enterprise service systems and platforms.

Enterprise services may also be dependent on the availability of finite resources shared across different enterprise users. For example all enterprise users may share a pool of fifteen simulators. If a simulator is available an enterprise user may exclusively check out a specific copy of the simulator for example displayed as an illuminated icon to apply to currently active work. Certain enterprise services may be inexhaustible or always compatible. However in some embodiments if a user is currently consuming an exhaustible service only one application instance of that service may be available to that particular user. For example a user currently applying a service or application instance of an exhaustible service may have the respective icon disappear from the Service Bar or Activation Bar in the GUI viewable by the user. In some embodiments a user may use the last application instance of a service and the resource may be unavailable to all enterprise users until the resource e.g. service application instance activation key or key code is restocked for the enterprise service system or platform.

An enterprise service system may be more complex and may become unstable if all software applications are constantly running. In embodiments a Resource Manager treats instances of Resource Adapters as finite but reusable resources that can be allocated and bound to a given user for an unspecified duration. Embodiments allow integration of desktop software in a distributed enterprise system as a service without requiring non trivial modifications to the application code or to alter its workflows in any material way. A Resource Adapter or smart proxy adapts the native interfaces of the application to the common message based infrastructure of an Enterprise Service Oriented Architectures SOA . A Resource Manager component is created that serves multiple functions. Some Resource Manager functions include tracking all Adapters that register with it listening for Adapter regular heartbeat status messages to detect situations where and Adapter needs to be taken offline proactively and allocating the limited resources available and that interact with a smart proxy Adapter .

This Service Paradigm achieves Stateful Service Behavior in what is normally a stateless system. These approaches are not mutually exclusive in that a given architecture can easily support both Stateful and Stateless Services in the same SOA architecture. A stateless service does not maintain any client specific state. In embodiments a stateless service allows one instance of a stateless service to serve multiple clients simultaneously without a context switch involving moving data in and out of the service depending on the identity of the client. For example a stateless service starts from default values without memory or context linked to the user or to the client. In embodiments some state information for example tables and other cached data may be necessary to allow the service to function as designed but may not directly relate to any specific client.

In some embodiments the resource agent launches the Resource Adapter with configuration information achieving stateful service behavior. A stateful service involves stored information of variables and data from applications at a given time point that may be linked to a specific user. A stateful method or apparatus involves remembering one or more preceding events in a sequence of interactions with a user another computer or other outside element. In some embodiments the stateful service is configured to act like a dedicated service based on a specific user for example a user s needs preferences and tasks. In some embodiments the stateful service involves binding certain information to a specific user for example information tied to a user s account based on a user s login information to access a system. A stateful method apparatus or service can be dynamic. In embodiments the Resource Adapter gets or retrieves configuration information and uses the information to populate parameter values for a stateful service session. In example embodiments the Resource Adapter uses XML for a method to call for a stateful application instance running as a service with parameter values. Non destructive editing normally involves a baseline from which a user works and the system maintains a list of changes to that baseline where a list of changes is preferably referred to as a delta. As the delta evolves changes to the delta are written to persistent store. In embodiments viable message formats are used to call for information such as parameter values for the system. In embodiments the information for the system is in extensible markup language XML or XML representing differences from default values.

Finding ways to continue to leverage the value locked up in desktop software is a common challenge among mature software companies in a world where more and more people are working away from a desk. Service Oriented Architectures provide the freedom to create controlled service environments that mimic the usage for which the software was initially designed. In some embodiments for SOAs to mimic individual software usage the User Interface may be bypassed with the ability to trigger code paths programmatically. In other embodiments the ability to trigger code paths programmatically is integrated with the User Interface. In embodiments the SOAs mimic individual software usage by triggering code paths programmatically and by retrieving the results from that processing to tie that access to a system that can drive that program logic from alternative interfaces.

The respective icon visual representation is based on the context of the underlying transaction e.g. Web Application transaction or Application Instance applied as a service . In some embodiments the context of the underlying transaction depends on the current state of the Web Application or Application Instance running as a service. An icon s appearance is based on factors including one or more of the following Web Application context Application Instance running as a service engine stored data business logic of the engine routine and rules built into the engine routine . In some embodiments the presentation or disappearance of the respective icon depends on complex considerations corresponding to different states of the icon. For example the different states of the icon may include two states a first state of the icon indicating availability and a second state of the icon indicating unavailability. In embodiments a third state of the icon may indicate consumption of a Service or Application Instance running as a Service. In other embodiments the different states of the icon indicated in a graphical user interface displayed in the web application may correspond to more than two different states providing additional or other information to the user.

In some embodiments the SOA is multithreaded i.e. contains one or more threads. In embodiments the services may be run in a serial sequence or in a parallel sequence multithread . In example embodiments the application instance running as a service is multithreaded. In example embodiments the infrastructure of the Service Platform and architectural implementation of one or more components are multithreaded to increase and to maximize flexibility and performance. For example the Web Application may be multithreaded.

The present invention includes a computer implemented method of managing services for at least one user integrated into a web system or a web application . For example a service may involve live plant data including sensing actual real time processing plant operation status data for at least one asset from a set of assets of a processing plant through at least one sensor recording to a computer server the actual real time processing plant operation status data sensed from the at least one sensor performing a simulation through at least one simulation model from a set of simulation models of a planned process design specification through a computer implemented simulation engine recording process design specification data from the simulation through the computer implemented simulation engine correlating the actual real time processing plant operation status data and the process design specification data through a computer implemented correlation engine into a set of correlated data displaying the set of correlated data to the at least one user through a computer display such that the actual real time processing plant operation status data and the process design specification data are streaming and visually presented concurrently to the at least one user at the same time. In other embodiments a user may search simulation models select a model from a listing for example by clicking on a specific model to modify simulation design parameters.

An example implementation of the Compatibility Availability paradigm consists of a simple bar which contains respective icons that represent services and application instances which is sometimes referred to as a Service Bar or an activation bar. The Service Bar depicted in may be displayed in the web system or a web application workspace for example in the title bar or in the menu bar of a graphical user interface as shown in . Only services or application instances running as services that are compatible with the current work are displayed as visual representations of respective icons in the dynamically populated Service Bar . For example the service bar of shows visual representations of respective icons for Live Plant Data icon left and Simulation modeling icon right services. In some embodiments not all of the services or application instances running as services loaded into the whole system appear as visual representations of respective icons the absence of icons indicates incompatible services or incompatible application instances running as services. The dynamic set of respective icons represents services compatible context wise with the Web Application or Web Service and currently active work and the icons and thus the icons in the dynamic Service Bar may be context sensitive. Using this approach for monitoring keeps the icon size and thus the Service Bar very small in the GUI too small to use a fine grained control. The respective icon may be treated as a moderately sized button. Clicking or tapping the icon may cause the icon to change to something more finger friendly. A larger size magnifying or zooming in on a visual representation of the respective icon for example by hovering over tapping on or clicking on the icon may allow a clearer view of the visual representation of the respective icons and attendant titling of the icon increases the ease of user selection with either finger track pad or computer mouse.

Upon selection of the service to be applied by the user selecting the icon corresponding to an available and compatible service the icon badge or visual representation of the respective icon may leave or may be removed from the Service Bar also referred to as an Activation Bar of and may appear in the Global Service Bar in the upper left corner of a working screen view as in . For example the Global Service Bar shown in detail in has a permanent part which may hide a uBar that is typically visible in one of Assignees software programs. The Global Service Bar of also displays a respective icon or service badge for a corresponding Service which shows the user that he is consuming an Application Instance running as a service. Here the icon in the Global Service Bar informs the user that the user is consuming a Simulator Application Instance and the user is consuming or using tokens part of the licensing mechanism in some embodiments.

In some embodiments an icon or service badge may appear as a Service Panel. In some embodiments the respective icon or service badge may appear in the Service Panel to help identify the service associated with and controlled by the Service Panel. In some embodiments the respective icon may be suppressed from the Service Panel display. For example in the Simulation modeling Service Panel of there is a control button for example a play button to trigger a run of the corresponding service and a text display field showing the status message from the Service or Application Instance running as a service for example of Finished running the model. In embodiments the control button may take other forms or visual representations depending on the Service or Application Instance running as a service . The Service Panel achieves a couple of objectives. First the icon badge or visual representation of a respective icon in the original Service Bar or Activation Bar disappears from the Service Bar location of since that service is being consumed as selected by the user and is no longer available to apply a second time by the same user in embodiments of the invention. For example the Service Bar changes from the configuration of showing icons to the configuration of showing only the Live Plant Data Service icon in the Service Bar . In other embodiments a user may be able to apply the same service to multiple tasks. However consumption of a service may use up finite resources such as license tokens. In some embodiments the Service Panel may correspond to other visual representations that serve the same functions.

Also since the corresponding icon s of are now in the Global Service Bar of the user knows that a service has been applied even if the original page is no longer visible. For example the user may navigate to a different application instance running as a service such as switching from the simulation modeling application instance to a different screen view of the system . The applied service may continue to run in the background and consume services or resources as the user performs other tasks on active work.

Finally the application of any service causes a Service Panel to appear in the web application space. This paradigm scales well since it effectively decouples the GUI for any given service from the web application instance that consumes it. This level of decoupling allows a service to create service centric panels that have built in service centric configuration via a slide out configuration drawer as well as a bevy of unfolding and or sliding panels that contain any combination of displays and controls. The Service Panel including may become an independent piece of a UI user interface or GUI of the Web Application . The Service Panel does not require writing or modifying code in each application instance because the Service Panel may be moved around the GUI screen such as in of without ending the service . The decoupling of the GUI from the application instance where the service was applied allows the user to switch tasks and move between application instances to perform various functions in the Web Application or Web Service. The Simulation Service Panel of as an example epitomizes the economy of design esthetic with a drag bar along the top for repositioning the panel with a close button shortcut that releases the service. The drag bar allows the user to grab or drag the Service Panel around the screen. The Service Panels can thus be positioned where the Service Panels do not cover up or obscure areas of the graphical user interface of interest to the user. Additionally as shown in the Service Panel may have one control button to cause the simulation to run for example the play button and one text display field for status messages. One of skill in the art may implement other embodiments of the Service Panel with user controls and providing messages and information from the Application Instance running as a service.

One final point is the release of a Service . This happens by way of a single user gesture in the GUI of web application . In an example aspenONE implementation Trademark of Assignee there are two single user gestures from which to choose. For users that are comfortable with desktop software with windowed environments there is a close box in the upper right corner of the Service Panel of which closes the service panel and releases the corresponding service . Another option that might be preferred for touch enabled devices is to simply drag the service panel collectively back where it came from the Service Bar or Activation Bar . Illustrative is and the recycle icon of . This action gives the user visual cues that he is properly navigating and interacting. For example when the whole service panel or service palette is over the top bar Service Bar or Activation Bar the Service Bar or Activation Bar expands and displays a recycle icon giving the user a large target upon which to drop the panel thus releasing ending use session of the corresponding service . Either of these gestures will release end a session of the service.

As shown in the user interface screen shows context compatible and available services while viewing a different simulation flow sheet than . Here the Web Application is another simulation modeling application instance . The Service Activation Bar shows a Live Plant Data icon a Simulation icon and an icon indicating that other services are available as compatible and available application instances . In this example any of these services could be applied to the Web Application .

A simulator is an infrastructure resource with a limited number of simulators available to users which can be represented as a simulator icon . If a user selects or clicks the simulator icon then the Service Bar responds by showing a decrease of one icon the simulator icon because the user selected the simulator service represented by simulator icon and consumed the simulator service represented by simulator icon . The system may gray out simulator icon when no simulator instance is available or when all simulators are in use. The system may suppress display of the simulator icon when the user consumes the simulator service represented by simulator icon or when all simulators are in use. Also in response to user selection of the simulator icon system displays a corresponding service panel or a service palette representing the user selected simulator service. The service panel of shows the running simulator. A user may consume up to one simulator thus system removes display of the simulator icon from the home screen.

In the modeling application instance the user saw collaborative front end engineering design FEED with detailed information because the simulator ran in the text display field. The use can change the model field or parameter data and run the model again with a click of a button on the service panel or service palette. The text message appears in the service panel or palette regarding the status of the application instance running as a service see for example .

As shown in the user interface screen shows services being consumed or applied to the current work while viewing a different simulation flow sheet. Here the Web Application is another simulation modeling application instance . The Global Service Bar in the upper left corner of the GUI is showing or otherwise serving as a visual cue that the user is consuming services by the Global Service bar displaying respective icons or icon badges for a Live Plant Data Service and a Simulation modeling Service . Both of the compatible services Live Plant Data and Simulation modeling with the Web Application were available made user selectable and applied leaving no services in the Service Bar. The Recycling icon is in the screen view location where the Service Bar is displayed in other example embodiments of the GUI. The user also knows which services are being consumed based on the Service Panels appearing in the GUI. For example in a Simulation modeling Service Panel and a Live Plant Data Service Panel are displayed in the GUI. Both of the service panels are displaying respective status messages from the corresponding services e.g. No Errors from the Simulation modeling Service in Service Panel . The drag bars enable the user to move the Service Panels within the GUI if for example the Live Plant Data Service Panel was blocking part of the simulation flow sheet.

Developing the GUI paradigms for the aspenONE product Trademark of Assignee presented challenges due to some many competing objectives including mobile form factors and touch enabled devices. For example managing services can be accomplished using methods and apparatuses of the invention including various desktop laptop tablet mobile devices and web applications. The use of the Compatibility Availability paradigm gives the user a maximum amount of choices while avoiding the confusion that comes from showing choices that lead to functional dead ends failures or illegal states.

By using the Service Palette or Service Panel paradigm the GUI elements decouple from the application design while making it easier to introduce new services which may have very different requirements for display and control. A Global Service Bar showing services being consumed provides service context indicators to encourage awareness as users move around the system .

Client computer s devices and server computer s provide processing storage and input output devices executing application programs and the like. Client computers devices may be for example desktops laptops mobile devices and so forth. The service assembly is formed of a resource adapter a service platform and a resource agent service. The digital resource manager is operatively coupled to the service assembly in a manner that aptly provides in a web application user selectability of a contextually compatible i.e. pertinent service as the service becomes available. A single client computer device or server computer may host one or more services.

Client computer s devices can also be linked through communications network to other computing devices including other client devices processes and server computer s . Communications network can be part of a remote access network a global network e.g. the Internet a worldwide collection of computers Local area or Wide area networks and gateways that currently use respective protocols TCP IP Bluetooth etc. to communicate with one another. Other electronic device computer network architectures are suitable.

In one embodiment the processor routines and data are a computer program product generally referenced including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the invention system. Computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection. In other embodiments the invention programs are a computer program propagated signal product embodied on a propagated signal on a propagation medium e.g. a radio wave an infrared wave a laser wave a sound wave or an electrical wave propagated over a global network such as the Internet or other network s . Such carrier medium or signals provide at least a portion of the software instructions for the present invention routines program .

In alternate embodiments the propagated signal is an analog carrier wave or digital signal carried on the propagated medium. For example the propagated signal may be a digitized signal propagated over a global network e.g. the Internet a telecommunications network or other network. In one embodiment the propagated signal is a signal that is transmitted over the propagation medium over a period of time such as the instructions for a software application sent in packets over a network over a period of milliseconds seconds minutes or longer. In another embodiment the computer readable medium of computer program product is a propagation medium that the computer system may receive and read such as by receiving the propagation medium and identifying a propagated signal embodied in the propagation medium as described above for computer program propagated signal product.

Generally speaking the term carrier medium or transient carrier encompasses the foregoing transient signals propagated signals propagated medium storage medium and the like.

While this invention has been particularly shown and described with references to example embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

