---

title: Dynamic maximum transmission unit size adaption
abstract: An aspect includes dynamically adapting a maximum transmission unit (MTU) size in a computer network. A packet is received at a first link of a switch of the computer network. An MTU size of the received packet is determined based on an application programming interface (API) crossing value associated with the first link of the switch. An associated destination MTU size of a second link of the switch is determined as a target destination of the received packet. The associated destination MTU size of the second link is adjusted based on a difference between the MTU size of the received packet and the associated destination MTU size of the second link.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09237110&OS=09237110&RS=09237110
owner: International Business Machines Corporation
number: 09237110
owner_city: Armonk
owner_country: US
publication_date: 20140930
---
This application is a continuation of U.S. application Ser. No. 13 833 977 filed Mar. 15 2013 the disclosure of which is incorporated by reference herein in its entirety.

The present invention relates to computer networks and more specifically to dynamically adapting a maximum transmission unit size in a computer network.

Ethernet networks are typically employed in local area networks LANs that include a plurality of network switches. A number of communication protocols have been developed and continue to evolve to enhance Ethernet network performance for various environments. For example an enhancement to Ethernet called data center bridging DCB converged enhanced Ethernet CEE or data center Ethernet DCE supports the convergence of LANs with storage area networks SANs . Other protocols that can be used in a data center environment in conjunction with Ethernet include for instance Fibre Channel over Ethernet FCoE Internet Wide Area Remote direct memory access Protocol iWARP Remote direct memory access over Converged Ethernet RoCE . Various applications can employ different protocols for different purposes.

Various Ethernet protocols used in a network typically encapsulate data using a common Ethernet frame size. A maximum transmission unit MTU size is defined as the largest data unit that the network can transmit. A larger MTU brings greater efficiency because each packet carries more user data while protocol overhead such as headers or underlying per packet delays remain fixed. This results in a higher efficiency creating an improvement in bulk protocol throughput. A larger MTU also results in processing of fewer packets for the same amount of data. In some systems such as hybrid architectures per packet processing can be a critical performance limitation. However using the largest possible MTU can also be problematic. For instance large packets can occupy a slow link for a longer time period causing greater delays to following packets while increasing lag and minimum latency. As an example a 1500 byte packet the largest allowed by Ethernet at the network layer ties up a typical 14 kbps modem link for about one second. Large packets are also problematic in the presence of communication errors. Corruption of a single bit in a packet requires that the entire packet be retransmitted. At a given bit error rate larger packets are more likely to be corrupted. Retransmissions of larger packets take longer which can reduce overall system throughput.

According to an aspect of the present invention a method for dynamically adapting a maximum transmission unit MTU size in a computer network is provided. A packet is received at a first link of a switch of the computer network. An MTU size of the received packet is determined based on an application programming interface API crossing value associated with the first link of the switch. An associated destination MTU size of a second link of the switch is determined as a target destination of the received packet. The associated destination MTU size of the second link is adjusted based on a difference between the MTU size of the received packet and the associated destination MTU size of the second link.

According to a further aspect of the present invention a computer program product for dynamically adapting a maximum transmission unit size in a computer network is provided. The computer program product includes a tangible storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method. The method includes receiving a packet at a first link of a switch of the computer network. An MTU size of the received packet is determined based on an application programming interface API crossing value associated with the first link of the switch. An associated destination MTU size of a second link of the switch is determined as a target destination of the received packet. The associated destination MTU size of the second link is adjusted based on a difference between the MTU size of the received packet and the associated destination MTU size of the second link.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and the features refer to the description and to the drawings.

Exemplary embodiments relate to adaptively matching different maximum transmission unit MTU sizes for different types of network protocols with different message sizes. MTU size may be monitored and adjusted at one or more network switches on a packet basis. Time division multiplexing can be used per link to vary MTU sizes for the same link over a period of time. Packet size and network link performance can be used to estimate and adjust MTU size per link for a plurality of network switches.

In an exemplary embodiment switches in a network are under the control of a central software defined network SDN controller. An SDN is a form of network virtualization in which the control plane is separated from the data plane in the network and implemented in a software application. This architecture allows network administrators to have programmable central control of network traffic without requiring physical access to hardware devices of the network. OpenFlow is an example of an enabler of SDN that gives access to the forwarding plane of a network switch or router over the network. The central SDN controller can receive messages from all of the switches in the network and provide instructions to each switch regarding the creation of virtual queues and the routing of packet traffic. The central SDN controller overlooks an entire network and may activate a selection of switches at a particular moment in time.

Turning now to an example of a system including a network that supports OpenFlow will now be described in greater detail. In the example depicted in the system is a data center environment including a plurality of servers and client systems configured to communicate over the network using switches that are OpenFlow capable. In exemplary embodiments the servers also referred as hosts or host systems are high speed processing devices e.g. mainframe computers desktop computers laptop computers hand held devices embedded computing devices or the like including at least one processing circuit e.g. a computer processor CPU capable of reading and executing instructions and handling interactions with various components of the system . The servers may be storage system servers configured to access and store large amounts of data to one or more data storage systems .

The client systems can include a variety of desktop laptop general purpose computer devices mobile computing devices and or networked devices with processing circuits and input output I O interfaces such as keys buttons a touch screen audio input a display device and audio output. The client systems can be linked directly to one or more of the switches or wirelessly through one or more wireless access points .

The data storage systems refer to any type of computer readable storage media and may comprise one or more secondary storage elements e.g. hard disk drive HDD solid state memory tape or a storage subsystem that is internal or external to the servers . Types of data that may be stored in the data storage systems include for example various files and databases. There may be multiple data storage systems utilized by each of the servers which can be distributed in various locations of the system .

The system also includes a network controller that is a central software defined network controller configured to make routing decisions within the network . The network controller establishes secure links to configure the switches and establish communication properties of links between the switches . For example the network controller can configure the switches to control packet routing paths for data flows between the servers and client systems as well as one or more firewalls and one or more load balancers . The one or more firewalls restrict access and the flow of network traffic between the network and one or more external networks . The one or more load balancers can distribute workloads across multiple computers such as between the servers .

The servers client systems and network controller can include various computer communication hardware and software technology known in the art such as one or more processing units or circuits volatile and non volatile memory including removable media power supplies network interfaces support circuitry operating systems and the like. Although the network controller is depicted as a separate component it will be understood that network configuration functionality can alternatively be implemented in one or more of the servers or client systems in a standalone or distributed format.

The network can include a combination of wireless wired and or fiber optic links. The network as depicted in represents a simplified example for purposes of explanation. For example each of the links depicted in the network can include more than one physical link. Embodiments of the network can include numerous switches e.g. hundreds with dozens of ports and links per switch . The network may support a variety of known communication standards that allow data to be transmitted between the servers client systems switches network controller firewalls s and load balancer s . Communication protocols are typically implemented in one or more layers such as a physical layer layer 1 a link layer layer 2 a network layer layer 3 a transport layer layer 4 and an application layer layer 5 . In exemplary embodiments the network supports OpenFlow as a layer 2 protocol. The switches can be dedicated OpenFlow switches or OpenFlow enabled general purpose switches that also support layer 2 and layer 3 Ethernet.

The secure channel connects the switch to the network controller of . The secure channel allows commands and packets to be communicated between the network controller and the switch via the OpenFlow protocol. The secure channel can be implemented in software as executable instructions stored within the switch . Protocol details to establish a protocol definition for an implementation of OpenFlow and other protocols can be stored in the protocol support . The protocol support may be software that defines one or more supported protocol formats. The protocol support can be embodied in a computer readable storage medium for instance flash memory which is configured to hold instructions for execution by the switch logic . Implementing the protocol support as software enables updates in the field for new versions or variations of protocols and can provide OpenFlow as an enhancement to existing conventional routers or switches.

The flow table defines supported connection types associated with particular addresses virtual local area networks or switch ports. A flow may be defined as all packets that match a particular header format. Each entry in the flow table can include one or more rules actions and statistics associated with a particular flow. The rules define each flow and can be determined by packet headers. The actions define how packets are processed. The statistics track information such as the size of each flow e.g. number of bytes the number of packets for each flow and time since the last matching packet of the flow or connection time. Examples of actions include instructions for forwarding packets of a flow to one or more specific ports e.g. unicast or multicast encapsulating and forwarding packets of a flow to the network controller of and dropping packets of the flow. Entries in the flow table can be added and removed by the network controller of via the secure channel . The network controller of can pre populate the entries in the flow table . Additionally the switch can request creation of an entry from the network controller upon receiving a flow without a corresponding entry in the flow table .

The buffers provide temporary storage in queues for flows as packets are sent between the ports . In a lossless configuration rather than dropping packets when network congestion is present the buffers temporarily store packets until the associated ports and links of are available. Each of the buffers may be associated with a particular port flow or sub network. Each of the buffers is logically separate but need not be physically independent. Accordingly when one of the buffers is full it does not adversely impact the performance of the other buffers within the switch .

Rather than include a separate network controller such as the network controller of control and routing aspects are handled by one or more of the servers clients or the switches . Accordingly the switches need not include the secure channel of when control logic is localized within the switches . In exemplary embodiments switches of and the switches of include an MTU size adaptor as further described in reference to .

The MTU data store can include multiple entries for the same link that may be further distinguished by message type . For example command type messages for a given link can have a smaller associated destination MTU size than data type messages. The entries in the MTU data store can also include timing data . The timing data may be used to sequence a given link between two or more different MTU sizes such that a combination of larger and smaller MTU sizes are used on the link over a period of time. The timing data can indicate a time switching interval and or a sequence for time division multiplexing MTU size values for an associated link . Accordingly the adjustment logic may access a timer as a time base for switching MTU sizes per link

The adjustment logic may also use a performance monitor to monitor links for congestion utilization retransmission rate and trending. Identified trends of links becoming slower over utilized or more error prone may result in the adjustment logic reducing the associated destination MTU size . Likewise as a monitored link becomes less congested less utilized or more reliable the adjustment logic may increase the associated destination MTU size toward a maximum supported size for the link

Each of the links and can include multiple physical links. Accordingly a received packet may be routed to a target destination i.e. a next hop location in the associated network of the MTU size adaptor based on determining a best matching MTU value from the associated destination MTU sizes if multiple physical links are coupled to the same target destination. For example if a link between a switch containing the MTU size adaptor includes a pair of physical links to a same target destination where the first physical link has an associated destination MTU size of 1500 bytes and the second physical link has an associated destination MTU size of 9 kbytes the adjustment logic can use this information to match a routing decision for a received packet based on its determined MTU size.

Turning now to a flow diagram of a process for dynamically adapting an MTU size in a computer network will be described in an exemplary embodiment. The process is described in reference to and can be implemented by the system of and or the system of . For purposes of explanation the following example is provided primarily in view of the system of and the MTU size adaptor of .

At block a packet is received at a first link of a switch of the computer network . At block an MTU size of the received packet is determined based on an API crossing value associated with the first link of the switch . At block an associated destination MTU size of a second link of the switch is determined where the second link is a target destination of the received packet .

At block the associated destination MTU size of the second link is adjusted based on a difference between the MTU size of the received packet and the associated destination MTU size of the second link . Adjusting can include reducing the associated destination MTU size of the second link based on determining that the MTU size of the received packet is less than the associated destination MTU size of the second link . If the second link can support a larger MTU size the associated destination MTU size of the second link may be increased to match the MTU size of the received packet .

MTU size adjustments can also be based on message type where a message type of the received packet is determined. The associated destination MTU size of the second link may be adjusted lower based on determining that the message type is a control message type and the associated destination MTU size of the second link may be adjusted higher based on determining that the message type is a data message type.

Time based MTU size adjustments can also or alternatively be performed. For example time division multiplexing on the second link can be performed by adjusting the associated destination MTU size of the second link between different sizes based on periods of time. Timing data and timer can support time division multiplexing.

MTU size adjustments can be based on network performance. For example the performance monitor can monitor network performance at the switch . The associated destination MTU size of the second link may be adjusted based on the network performance over a period of time to progressively reduce the associated destination MTU size of the second link in response to one or more of an increasing level of congestion for the second link and an increasing retransmission rate for the second link . The adjustment logic may also progressively increase the associated destination MTU size of the second link in response to one or more of a decreasing level of congestion for the second link and a decreasing retransmission rate for the second link

At block the received packet is fragmented into multiple transmit packets based on determining that the MTU size of the received packet is greater than the associated destination MTU size of the second link

In an exemplary embodiment the second link includes a pair physical links having a lower associated destination MTU size and a higher associated destination MTU size . The received packet can be routed to the physical link having the lower associated destination MTU size based on determining that the MTU size of the received packet is less than or equal to the lower associated destination MTU size . Similarly the received packet can be routed to the physical link having the higher associated destination MTU size based on determining that the MTU size of the received packet is greater than the lower associated destination MTU size .

Technical effects include dynamically adapting network traffic for a maximum transmission unit size in a computer network. Performing MTU size adjustments on a packet basis allows for more efficient network utilization. MTU sizes can be adjusted dynamically between larger and smaller sizes based on packet size message type and timing parameters. Additionally packets can be split locally within a network switch to match MTU constraints of particular links.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible and non transitory storage medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention had been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

