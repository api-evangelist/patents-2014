---

title: Flash redirection with caching
abstract: In particular embodiments, a server loads in a browser a webpage including flash content including an ActionScript, the ActionScript including at least one function. The browser loads a flash redirection plugin and requests the plugin to execute the ActionScript. The plugin determines whether a cache at the server includes the function, and if the cache includes the function, the plugin determines a result associated with the function in the cache and returns the result to the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489471&OS=09489471&RS=09489471
owner: Dell Products L.P.
number: 09489471
owner_city: Round Rock
owner_country: US
publication_date: 20140627
---
This application claims the benefit under 35 U.S.C. 119 a of Indian Patent Application No. 638 DEL 2014 filed 6 Mar. 2014 which is incorporated herein by reference.

This application is a continuation in part under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 743 227 filed 16 Jan. 2013 which claims the benefit under 35 U.S.C. 119 a of Indian Patent Application No. 3064 DEL 2012 filed 28 Sep. 2012 and which is a continuation in part under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 539 226 filed 29 Jun. 2012 a continuation in part under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 539 224 filed 29 Jun. 2012 a continuation in part under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 539 222 filed 29 Jun. 2012 and a continuation in part under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 539 220 filed 29 Jun. 2012 all of which are incorporated herein by reference.

The disclosure relates in general to client server computer systems and more particularly to presenting flash content.

A user of a client computing device may initiate a remote desktop protocol RDP session with a server via any remote desktop protocol client application executing on the client computing device for example Microsoft Remote Desktop Protocol Citrix Independent Computing Architecture VMware Personal Computer over Internet Protocol etc. . The user may attempt to load a webpage that includes flash content e.g. a flash video via a web browser executing on the server. In response the flash content of the webpage may be loaded on the server and transmitted as a bitmap to the client computing device allowing the user to see an image associated with the webpage.

The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However it will be apparent to those skilled in the art that the subject technology may be practiced without these specific details. In some instances well known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology. Like components are labeled with identical element numbers for ease of understanding.

A user of a client computing device may initiate a remote desktop protocol session with a server via a remote desktop protocol client application executing on the client computing device. The remote desktop protocol may be for example Microsoft Remote Desktop Protocol RDP Citrix Independent Computing Architecture ICA VMware VMview VMware Remote Desktop Protocol or VMware Personal Computer Over Internet Protocol PCOIP . The user may instantiate a web browser on the server and data from the web browser may be displayed on the client computing device via the remote desktop protocol client application. The web browser may display a webpage that includes flash content for example a flash video that may be played via a flash player application e.g. Adobe Flash Player .

In some examples a computer program product may transmit to the client computing device all flash content of a webpage or alternatively user selected flash content of the webpage. The flash content may be rendered at the server and transmitted to the client computing device via the remote desktop protocol. Alternatively the computer program product may redirect the flash parameters e.g. a web address or uniform resource locator of flash content to the client computing device for downloading flash content at the client computing device via an Internet connection of the client computing device and for rendering on the client computing device.

In some examples the decision of flash content rendering may be manual. A compatibility list listing which flash content items are rendered on the server and which content items are rendered on the client may be provided. In some examples a flash player may be required on the client computing device. In other examples the flash player may not be required on the client computing device. In some examples Internet connectivity at the client computing device may be required. In other examples Internet connectivity at the client computing device may not be required. In some examples of the compatibility list approach a server e.g. a login server may fetch data from listed website s and pass the data back to the client e.g. via a tunnel.

The present disclosure may in particular embodiments be supported in multiple web browsers e.g. Internet Explorer versions 6 7 8 9 and or web browser implementing Netscape Plugin Application Programming Interface NPAPI such as Chrome and Mozilla Firefox and on multiple platforms e.g. Windows or Linux . Transparent flash content may be supported by the present disclosure in particular embodiments. A transparent flash content item may include for example a flash video having a non rectangular shape e.g. a circular shape or a flash video having hypertext markup language HTML content from a webpage in its background e.g. a video overlaying HTML images or text that occasionally becomes transparent allowing the overlayed HTML images or text to be viewed .

Particular embodiments include but are not limited to 1 flash redirection 2 intelligent fallback to flash acceleration 3 flash redirection via proxy server if the client computing device is not directly connected to the Internet but is connected to the Internet via a proxy server 4 flash redirection with a tunneling server which may be the same as the remote desktop protocol server if the client computing device does not have access to the Internet either directly or via the proxy server and or 5 selective redirection of flash content item s on a webpage.

Particular embodiments provide one or more of the following 1 flash redirection with flash acceleration 2 flash redirection with proxy 3 automatic tunneling of flash redirection 4 selective redirection of flash 5 transparent flash support 6 flash redirection support on other browsers for example Mozilla Firefox and Chrome and or 7 automatic reloading of a webpage upon reconnecting to a disconnected session.

Particular embodiments may allow a user to play flash e.g. Adobe Flash content at thin clients rather than playing at a server and consuming server resources. Particular embodiments may allow users to experience smoother and more reliable playback of flash content. By playing the flash content at the client flash redirection may reduce the server and network load and may result in greater scalability while improving user experience. Flash content may include for example videos and animations. If the client supports flash redirection the client may in particular embodiments receive the original compressed multimedia stream from the web server e.g. flash content server and decode it locally for display. As a result bandwidth usage may be decreased as the data transmitted over the network may be compressed video instead of a succession of bitmaps. The bandwidth usage may remain the same when a video window is resized or when played in full screen mode. Flash redirection may work with Internet Explorer and NPAPI browsers like Chrome and Firefox. In particular embodiments under seamless flash redirection all the flash content of a page may be redirected to the client as illustrated for example in .

If a flash player is not present at the client flash acceleration see e.g. may take place automatically for the flash content at the server rather than remote desktop protocol e.g. RDP ICA or VMVIEW rendering. Flash acceleration may enable thin client users to experience improved flash video content performance in a remote computing environment. In some examples flash acceleration transcodes the native flash media stream to a high bit rate motion JPG content that is then delivered to the client for fast local rendering. Since the resulting images are redirected over a separate virtual channel to the client greater control of frame rate and compression may be provided. In this example a flash player need not be installed on the client. A user of a remote desktop protocol client application may have an option the settings for which may be stored in the server to select flash acceleration and or flash redirection.

If a flash player is present at the client but the client does not have access to the Internet then flash redirection may happen through an external proxy server e.g. proxy server A C or C . The external proxy server may download the flash content and then send the flash content to the clients. Automatic detection of the proxy server may happen at the client. If the proxy server is not present in the network then flash tunneling see e.g. may happen through the login server e.g. remote desktop protocol server A or B .

In particular embodiments a user may selectively redirect the flash on a website at the server. As a result the user may avoid redirecting the flash content items which are not of his her interest for example advertisements. This may be achieved for example by the user selecting e.g. single clicking via a mouse double clicking via a mouse or touching via a touch screen on the flash content item. This mechanism is called tapping. Once the user taps a particular flash content item on a website the content items may be redirected. When the user opens the website on a subsequent occasion particular embodiments may detect the tapped flash content and start redirecting the flash to clients e.g. thin clients automatically such that the user does not need to tap the desired flash content item s again. In some examples by default all the flash content items may be rendered at the server and the flash content item s may be redirected to client by tapping see e.g. .

Transparent flash allows the flash content to be in a shape other than a rectangle including for example a circle. In some implementations of flash redirection transparent flash is not supported. In particular embodiments of flash redirection transparent flash is supported and all flash content is drawn in the same fashion as in a browser executing locally on the client computing device.

In some examples when a session is disconnected while redirecting the flash content and logged into again all the flash content which was played and redirected in the previous session may start redirecting to the client automatically by reloading the webpage for a new session. In particular embodiments when a user disconnects the session while redirecting the flash and later resumes the session the user may see a blank area at the locations of flash content on the webpage. The user may see a white area at the server in the client remote desktop protocol application window representing the server due to the flash redirection and the flash content being played locally at client. A disconnect of a session may allow the server to retain all or a portion of the process es running on the server during the session.

In particular embodiments when a web browser e.g. Internet Explorer Firefox or Chrome executing on the server loads a webpage which has flash content the flash content items on the webpage are monitored at the server and all the flash parameters are redirected from the server to a client. The client may include a flash player and may pass all the parameters from the server to the flash player at the client. Some webpages may include flash content that depends on the execution of ActionScript JavaScript or browser calls e.g. NPN calls . As an example a user viewing flash video content may wish to pop out the video embedded in a webpage to a standalone window and continue playing the video from where it left off this may depend on the execution of JavaScript. As another example a flash video player may be resized e.g. YouTube options to resize small size player to large size player or large size player to small size player during viewing and this may also depend on the execution of JavaScript. In particular embodiments the web browser executing on the server may load a webpage which has flash content and which depends on the execution of an ActionScript. In such cases the server may pass the ActionScript to the client for remote execution at the client flash player to be described in further detail below. In particular embodiments the result of Action Script calls e.g. calls forwarded from the server to the client may be cached at the server to be described in further detail below. In particular embodiments the webpage may have flash content that depends on the execution of a JavaScript. In such cases the client may pass the JavaScript to the server for remote execution at the server s browser to be described in further detail below. In particular embodiments the webpage may have flash content that depends on the execution of one or more NPN calls. In such cases the client may pass the NPN calls to the server for remote execution at the server s browser to be described in further detail below.

A flash redirection module e.g. flash redirection client module may check for the flash player at the client. If present the flash redirection module may wait for flash parameters from the server. If there are any parameters the flash redirection module may start playing in a local flash player. If the flash player is not present at the client flash acceleration may be used instead of flash redirection.

Flash redirection at the client may include checking for access to an outside network e.g. the Internet . If the client has access to the outside network the client may fetch the data directly for the flash player. If the client does not have access to the outside network the client may look for an external proxy and forward all the requests of its flash player to the proxy server. If an external proxy is not found the client may query the server through tunneling. The tunneling server which may be the same machine as the remote desktop protocol server may fetch the data and pass back to the client. The tunneling server may act like a pass through server. The tunneling server may forward the client requests to the actual server the remote desktop protocol server and pass back the response to client. If tunneling is used and the server is over a wide area network WAN WAN Accelerator Optimizer may be used to improve the performance.

In particular embodiments the flash content on the webpage may be monitored and a data repository may be prepared. Flash redirection may display a small icon near flash content item s on the webpage. When the user selects e.g. clicks on the icon flash redirection may redirect all the associated flash parameters to the client. The client may include a flash player and pass all the parameters from a server to the flash player.

The client computing device A may be a laptop computer a desktop computer a mobile phone a tablet computer a personal digital assistant PDA or any similar device. As illustrated the client computing device is connected to the server A via a connection A. The connection A may be a remote desktop protocol connection. The client computing device A may include a flash player e.g. Adobe Flash Player or a remote desktop protocol client application. One example of the client computing device A is described in detail in conjunction with .

A remote desktop protocol connection may among other things allow for visual data from the server A to be displayed remotely on the client computing device A. The client computing device A may be able to cause execution of software application s residing on the server A. A remote desktop connection may use a remote desktop protocol. Example remote desktop protocols include Microsoft Remote Desktop Protocol RDP Citrix Independent Computing Architecture ICA and VMware VMview .

In one example the connection A between the client computing device A and the server A is independent of the network A. For example the network A may be the Internet and the client computing device A may be connected to the server A via one or more of a local network a corporate intranet a direct wired connection or a direct wireless connection. Alternatively the client computing device A may be connected to the server A via a connection A e.g. a remote desktop protocol connection over the network A.

The server A may be a remote desktop protocol server. In some aspects the server may be an enterprise computer e.g. an office desktop computer that is configured to be accessed remotely e.g. from an employee s home or a field office via a remote desktop protocol. Alternatively the server A may be implemented as a server farm including multiple machines a single machine with a single processor or a multi processor machine. One example of the server A is described in detail in conjunction with .

In some examples the client computing device A may be connected to the network A directly via a connection A. The connection A may be a hypertext transfer protocol HTTP or hypertext transfer protocol secure HTTPS connection. In some examples the client computing device A may be connected to the network A via the proxy server A. The connection A between the client computing device A and the proxy server A may be a HTTP or HTTPS connection and the connection A between the proxy server A and the network A may be a HTTP or HTTPS connection. In some aspects the client computing device A may not be connected to the network A except via the server A. The connection A of the server A to the network A may be a HTTP connection.

The proxy server A may be configured to allow a computer e.g. a client computing device A connecting to the proxy server A to connect to the network A. The proxy server A may be configured to filter out some content e.g. webpages to prevent users of computers connected to the network A via the proxy server A from accessing that content. For example in an enterprise setting an employer may use the proxy server A to prevent its employees from accessing social networking content while allowing them to access other Internet content.

Particular embodiments may be implemented without the proxy server A or without one or more of the connections A A and A.

The flash content server A may be for example a web server that includes flash content e.g. a YouTube server . Flash content may include video files or transparent flash content items. A transparent flash content item may include for example a flash video having a non rectangular shape e.g. a circular shape or a flash video having hypertext markup language HTML content from a webpage in its background e.g. a video overlaying HTML images or text that occasionally becomes transparent allowing the overlayed HTML images or text to be viewed . The flash content server A is connected to the network A via a connection A. The connection A may be a HTTP or HTTPS connection.

HTTP may be used for example to fetch flash content by the client computing device A. HTTPS may be used for example to get flash content in a secure manner by the client computing device.

As shown in in one example embodiment server B on server side B is displaying via a remote desktop protocol server application a webpage that includes a flash video B or other flash content item from flash content server B. The server B is connected to clients B and B via a remote desktop protocol connection B and B e.g. RDP ICA or VMview . Each client B or B on client side B is connected to the flash content server B via a hypertext transfer protocol HTTP connection B or B. The clients B or B receive the webpage as a bitmap via the remote desktop protocol connection B or B and the clients B or B receive the flash video B or B via the HTTP connection B or B to the flash content server B.

As shown in in one example embodiment server C on server side C is displaying via a remote desktop protocol server application a webpage that includes a flash video C or other flash content item from flash content server C. The server C is connected to clients C and C via a remote desktop protocol connection C and C e.g. RDP ICA or VMview . Each client C or C on client side C is connected to a proxy server C or C via a HTTP connection C or C. Each proxy server C or C is connected to the flash content server C via a HTTP connection C or C. The clients C or C receive the webpage as a bitmap via the remote desktop protocol connection C or C and the clients C or C receive the flash video C or C via the HTTP connections C and C or C and C and over the proxy server C or C to the flash content server C.

As illustrated the client computing device A includes a flash player A. The flash player A may be configured to play flash content for example flash videos or transparent flash content items. The flash player A may be for example Adobe Flash Player . Also as illustrated the client computing device A is not directly connected to the network A. Instead the client computing device A is configured to access the network via the connection A to the server and the connection A of the server to the network.

The connection A between the client computing device A and the server A may be a remote desktop protocol connection. The client computing device A may transmit to the server A user interface data e.g. mouse operations and keyboard clicks entered by a user of the client computing device via the connection A. The server A may transmit to the client computing device A a bitmap including image data to be displayed on a display unit e.g. a screen of the client computing device A via the connection A.

As illustrated the server A includes a tunneling module A. The tunneling module may be configured to in an event that the server A is connected to the client computing device A via a connection A e.g. a remote desktop protocol connection and a web browser executing on the server A and displayed on the client computing device A via a remote desktop protocol client application is accessing a flash content item create a tunnel A. The tunnel A may be configured to transmit flash content from the server A to the client A as a flash content file rather than as a bitmap. As a result the client computing device A may be able to play the flash content via the flash player A improving the quality of the playback of the flash content over the bitmap transmitted via connection A .

The flash content may be received at the server A from the flash content server A via the network A. The server A may be connected with the flash content server A via connections A and A.

As shown the server A includes a central processing unit CPU a network interface and a memory . The CPU may include one or more processors configured to execute computer instructions that are stored in a computer readable medium for example the memory . The network interface may be configured to allow the server A to transmit and receive data in a network e.g. network A of . The network interface may include one or more network interface cards NICs . The memory stores data or instructions. The memory may be one or more of a cache unit a storage unit an internal memory unit or an external memory unit. As illustrated the memory includes a server flash virtualization module a browser a flash player and settings .

As illustrated the server flash virtualization module includes a prerequisite check module a compression module the tunneling module A an acceleration module a redirection module and a network module . In particular embodiments redirection module includes a flash redirection proxy plugin which may support the function of a flash plugin at client computing device A that depend on scripts e.g. JavaScript or browser calls e.g. NPN calls . The proxy plugin may for example work to redirect flash parameters from the browser of the server to the flash player of the client. An example of an operation of the server flash virtualization module and the components A and thereof is provided in conjunction with .

The browser is configured to provide data from webpages for display at a client e.g. client computing device A via a remote desktop protocol client application executing at the client. Some of the webpages may include flash content. Example browsers that may correspond to browser include Microsoft Internet Explorer Mozilla Firefox or Google Chrome Browser .

The flash player executing on the server A may be configured to provide output based on flash content for display at the client via the remote desktop protocol client application executing at the client. For example the flash player may place image data based on flash content into a bitmap for transmission to the client.

The settings include settings of the server A. As shown the settings include seamless or selective flash redirection settings . At any time the seamless or selective flash redirection settings indicate either a seamless flash redirection or b selective flash redirection. Under seamless flash redirection all flash content from a webpage viewed in the browser during a remote desktop protocol session with a client is redirected to the client for playing in the flash player A of the client. Under selective flash redirection flash content selected by a user of the client e.g. via operation of a mouse on the client is redirected to the client for playing in the flash player A of the client. Under selective flash redirection flash content that is not selected by the user is rendered locally at the server A via operation of the flash player of the server and transmitted to the client within a bitmap via the remote desktop protocol connection. Selective flash redirection is described in detail in conjunction with .

As shown the client computing device A includes a central processing unit CPU a network interface and a memory . The CPU may include one or more processors configured to execute computer instructions that are stored in a computer readable medium for example the memory . The network interface is configured to allow the client computing device A to transmit and receive data in a network e.g. network A of . The network interface may include one or more network interface cards NICs . The memory stores data or instructions. The memory may be one or more of a cache unit a storage unit an internal memory unit or an external memory unit. As illustrated the memory includes a client flash virtualization module and a flash player A.

As illustrated the client flash virtualization module includes a decoding module a network module a flash redirection client module and a rendering module . In particular embodiments flash redirection client module includes a flash redirection proxy browser which may support the function of a browser at server A that depend on scripts e.g. ActionScript . The proxy browser may for example be a container for the flash player and may be independent of any browser operating at the server and be independent of the platform of the client e.g. Windows or Linux . An example of an operation of the client flash virtualization module and the components and thereof is provided in conjunction with .

As illustrated the memory of the client computing device A also includes a flash player A. The flash player A is configured to play flash content received at the client computing device A for example via the tunnel A via the connection A to the network A or via the connection A to the proxy server A. The flash player A may be for example Adobe Flash Player or any other flash player.

A computing device may be for example a client computing device A a server A a proxy server A or a flash content server A. A computing device may comprise one or more computing devices.

A computing device may include a processor . The processor may include one or more processors. The processor is capable of communication with a receiver and a transmitter through a bus or other structures or devices. It should be understood that communication means other than busses may be utilized with the disclosed configurations. The processor may generate commands messages and or other types of data to be provided to the transmitter for communication. In addition commands messages and or other types of data may be received at the receiver and processed by the processor .

The processor may operate in conjunction with a general purpose processor or a specific purpose processor for executing instructions and may further include a machine readable medium for storing data and or instructions for software programs. The instructions which may be stored in a machine readable medium and or are executable by the processor to control and manage access to the various networks as well as provide other communication and processing functions. The instructions may also include instructions executable by the processor for various user interface devices such as a display and a keypad . The processor may include an input port and an output port . Each of the input port and the output port may include one or more ports. The input port and the output port may be the same port e.g. a bi directional port or may be different ports.

The processor may be implemented using software hardware or a combination of both. By way of example the processor may be implemented with one or more processors. A processor may be a general purpose microprocessor a microcontroller a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA a programmable logic device PLD a controller a state machine gated logic discrete hardware components and or any other suitable device that may perform calculations or other manipulations of information. Those skilled in the art will recognize how best to implement the described functionality for the processor .

Software shall be construed broadly to mean instructions data or any combination thereof whether referred to as software firmware middleware microcode hardware description language or otherwise. Instructions may include code e.g. in source code format binary code format executable code format or any other suitable format of code . Instructions may be executable for example by a computing device e.g. a client computing device an HTTP server a web server or by a processing system e.g. an operating system an HTTP server or a web server . Instructions may be for example a computer program including code.

A machine readable medium may be one or more machine readable media. A machine readable medium e.g. may include storage external to an operating system such as a random access memory RAM a flash memory a read only memory ROM a programmable read only memory PROM an erasable PROM EPROM registers a hard disk a removable disk a CD ROM a DVD or any other suitable storage device. A machine readable medium may also have a volatile memory and a non volatile memory. The machine readable medium may be a non transitory machine readable medium. A non transitory machine readable medium may include one or more volatile and or non volatile memories. A machine readable medium may include storage integrated into a processing system such as might be the case with an application specific integrated circuit ASIC . A memory may be a machine readable medium e.g. or or a part thereof.

According to one aspect of the disclosure a machine readable medium is a computer readable medium encoded or stored with instructions and is a computing element which defines structural and functional interrelationships between the instructions and the rest of the computing device which permit the instructions functionality to be realized. In one aspect a machine readable medium is a non transitory machine readable medium a machine readable storage medium or a non transitory machine readable storage medium. In one aspect a non transitory machine readable medium is a computer readable medium a non transitory computer readable medium a computer readable storage medium or a non transitory computer readable storage medium.

An interface may be any type of interface and may reside between any of the components shown in . An interface may also be for example an interface to the outside world e.g. an Internet network interface . A transceiver block may represent one or more transceivers and each transceiver may include a receiver and a transmitter . A functionality implemented in a processor may be implemented in a portion of a receiver a portion of a transmitter a portion of a machine readable medium a portion of a display a portion of a keypad or a portion of an interface and vice versa. In one aspect a computing device may include only some or all of the elements shown in . A computing device may include other elements not shown in . A computing device may include more than one of the same elements.

A computer network system may include one or more client computing devices e.g. laptop computers desktop computers tablets PDAs mobile phones etc. in communication with one or more server computing devices e.g. a server such as an HTTP server a web server an enterprise server etc. via a network . In one aspect a server computing device is configured to allow remote sessions e.g. remote desktop sessions wherein users may access applications and files on the server computing device by logging onto the server computing device from a client computing device . Such a connection may be established using any of several well known techniques such as the remote desktop protocol RDP on a Windows based server or the techniques disclosed herein for a non Windows based server.

In one aspect a client computing device may be an end user computing device such as a laptop or desktop computer. The client computing device may correspond to the client computing device A of . In one aspect a server computing device may correspond to one or more of the server A the proxy server A or the flash content server A of .

By way of illustration and not limitation a client computing device may represent a computer a mobile phone a laptop computer a tablet a thin computing device a personal digital assistant PDA a portable computing device a virtual machine or a suitable device with a processor. In one example a client computing device is a smart phone e.g. iPhone Android phone Blackberry etc. . In certain configurations a client computing device may represent an audio player a game console a camera a camcorder an audio device a video device a multimedia device or a device capable of supporting a connection to a remote computing device. In an example a client computing device is mobile. In another example a client computing device is a hand held device. In another example a client computing device may be stationary. In one example a client computing device may be a device having at least a processor and memory where the total amount of memory of the client computing device is less than the total amount of memory in a server computing device . In an example a client computing device does not have a hard disk. In one example a client computing device has a display smaller than a display supported by a server computing device .

In one aspect a server computing device may represent a computer a laptop computer a computing device a virtual machine e.g. VMware Virtual Machine a desktop session e.g. Microsoft Terminal Server a published application e.g. Microsoft Terminal Server or a suitable device with a processor. In one aspect a server computing device may be stationary. In another aspect a server computing device may be mobile. In certain configurations a server computing device may be any device that may represent a computing device. In one aspect a server computing device may include one or more computing devices.

In one example a first device is remote to a second device when the first device is not directly connected to the second device. In one example a first remote device may be connected to a second device over a communication network such as a Local Area Network LAN a Wide Area Network WAN and or other network.

When a client computing device and a server computing device are remote with respect to each other a client computing device may connect to a server computing device over a network for example via a modem connection a LAN connection including the Ethernet or a broadband WAN connection including DSL Cable T1 T3 Fiber Optics Wi Fi or a mobile network connection including GSM GPRS 3G WiMax or other network connection. A network may be a LAN network a WAN network a wireless network the Internet an intranet or other network. A remote device e.g. a computing device on a network may be addressed by a corresponding network address such as but not limited to an Internet protocol IP address an Internet name a Windows Internet name service WINS name a domain name or other system name. These illustrate some examples as to how one device may be remote to another device. However the present disclosure is not limited to these examples.

According to the illustrated configuration while the device is not locally or physically connected to the server and is remote to the server the device appears to the server as if it is locally connected to the server as discussed further below. Thus the device appears to the server as a virtual device .

By way of illustration and not limitation the device may be a machine readable storage medium e.g. flash storage device a printer a scanner a camera a facsimile machine a phone an audio device a video device a peripheral device or other suitable device that may be connected to the client . The device may be an external device i.e. external to the client or an internal device i.e. internal to the client .

In one aspect of the disclosure the device is a Universal Serial Bus USB device that may be locally connected to the client using a wired USB or wireless USB connection and communicates with the client according to a USB communications protocol. In another aspect the device may be a device other than a USB device.

As used herein a local device of a system or a device locally connected to a system may be a device directly connected to the system using one or more wires or connectors e.g. physically connected to the system or a device directly connected to the system using a wireless link e.g. Bluetooth . For example device is a local device of client . Furthermore in one aspect of the disclosure a local device of a system or a device locally connected to a system may include a device within the system e.g. an internal device of client .

A remote device or a device remote to a system may be a device that is not directly connected to the system. For example the server is remote to both client and device because server is not directly connected to client or device but connected indirectly through network illustrated in which may include for example another server or the Internet.

The bus driver may be configured to allow the operating system and programs of the client to interact with the device . In one aspect when the device is connected to the client e.g. plugged into a port of the client the bus driver may detect the presence of the device and read information regarding the device device information from the device . The device information may include features characteristics and other information specific to the device. For an example of a USB device the device information may comprise a device descriptor e.g. product ID vender ID and or other information a configuration descriptor an interface descriptor an endpoint descriptor and or a string descriptor. The bus driver may communicate with the device through a computer bus or other wired or wireless communications interface.

In one aspect a program e.g. application running locally on the client may access the device . For example the device may be accessed locally when the client is not connected to the server . In this aspect the operating system e.g. Microsoft Windows of the client may use the device information to find and load an appropriate device driver not shown for the device . The device driver may provide the program with a high level interface to the device .

In one aspect the device may be accessed from the server as if the device were connected locally to the server . For example the device may be accessible from the desktop running on the server i.e. virtual desktop environment . In this aspect the bus driver may be configured to load the stub driver as the default driver for the device . The stub driver may be configured to report the presence of the device to the proxy and to provide the device information e.g. device descriptor to the proxy .

The proxy may be configured to report the presence of the device along with the device information to the agent of the server over the network illustrated in . Thus the stub driver redirects the device to the server via the proxy .

The agent may be configured to receive the report from the proxy that the device is connected to the client and the device information. The agent may provide notification of the device along with the device information to the virtual bus driver . The virtual bus driver may be configured to report to the operating system of the server that the device is connected and to provide the device information to the operating system. This allows the operating system of the server to recognize the presence of the device even though the device is connected to the client . The operating system of the server may use the device information to find and load an appropriate device driver for the device at the server an example of which is illustrated in . As a result the device is enumerated on the server . Once the presence of the device is reported to the operating system of the server the device may be accessible from the desktop running on the server i.e. virtual desktop environment . For example the device may appear as an icon on the virtual desktop environment and or may be accessed by applications running on the server .

In one aspect an application running on the server may access the device by sending a transaction request for the device to the virtual bus driver either directly or through the device driver . The virtual bus driver may direct the transaction request to the agent which sends the transaction request to the proxy over the network . The proxy receives the transaction request from the agent and directs the received transaction request to the stub driver . The stub driver then directs the transaction request to the device through the bus driver .

The bus driver receives the result of the transaction request from the device and sends the result of the transaction request to the stub driver . The stub driver directs the result of the transaction request to the proxy which sends the result of the transaction request to the agent over the network . The agent directs the result of the transaction request to the virtual bus driver . The virtual bus driver then directs the result of the transaction request to the application either directly or through the device driver .

Thus the virtual bus driver may receive transaction requests for the device from the application and send results of the transaction requests back to the application either directly or through the device driver . As such the application may interact with the virtual bus driver in the same way as a bus driver for a device that is connected locally to the server . The virtual bus driver may hide the fact that it sends transaction requests to the agent and receives the results of the transaction requests from the agent instead of a device that is connected locally to the server . As a result the device connected to the client may appear to the application as if the physical device is connected locally to the server .

In one example the client corresponds to the client computing device A and the server corresponds to the server A. The device corresponds to a device e.g. a mouse or a keyboard of the client computing device A which is virtualized on the server A as the virtual device . The connection between the client and the server may correspond to the connection A e.g. a remote desktop protocol connection .

With reference to the process begins at operation where a remote desktop protocol server e.g. server A facilitates display of a webpage. The webpage may be displayed by operation of a browser e.g. browser executing on the remote desktop protocol server. The webpage may be displayed via a remote desktop protocol client application executing on a client computing device e.g. client computing device A . The client computing device may receive from the remote desktop protocol server a bitmap that includes image data associated with the webpage via the remote desktop protocol connection. The client computing device may provide for display of the bitmap for example via a display unit e.g. a screen of the client computing device. The webpage may include flash content e.g. a single flash content item or multiple flash content items . The flash content item s may include one or more flash video s and or one or more transparent flash content item s and the flash content items may interact with scripts including for example JavaScript or ActionScript and may for example interact with NPN calls. The remote desktop protocol server and the client computing device may be connected via a remote desktop protocol connection e.g. connection A . The remote desktop protocol may be for example Microsoft Remote Desktop Protocol RDP Citrix Independent Computing Architecture ICA or VMware VMview .

In operation the remote desktop protocol server e.g. server A may determine whether a flash player e.g. Adobe Flash Player is installed on the client computing device. The remote desktop protocol server e.g. server A may determine whether the flash player is installed on the client computing device for example by sending a message to the client computing device via operation of a prerequisite check module e.g. prerequisite check module in conjunction with a network module e.g. network module . If the flash player is not installed on the client computing device the process continues to flash acceleration Subroutine A which begins at operation and is described in detail below. If the flash player is installed on the client computing device the process continues to operation .

In operation the remote desktop protocol server determines whether seamless or selective flash redirection settings are in effect. The remote desktop protocol server may determine whether seamless or selective flash redirection settings are in effect via operation of the prerequisite check module e.g. prerequisite check module . In one example the remote desktop protocol server may determine whether seamless or selective flash redirection settings are in effect based on the settings stored on the server e.g. settings which include seamless selective flash redirection settings . The settings stored on the server may be entered by an administrator of the server and may be modified by the administrator. If selective flash redirection settings are in effect the process continues to Selective Flash Redirection Subroutine B which begins at operation and is described in detail below. If seamless flash redirection settings are in effect the process continues to operation .

In operation the remote desktop protocol server renders each flash content item on the webpage via operation of Flash Redirection Subroutine C for each flash content item of the webpage. Flash Redirection Subroutine C begins at operation and is described in detail below.

With reference to the flash acceleration Subroutine A begins at operation where the remote desktop protocol server fetches via operation of the web browser e.g. browser flash data associated with a flash content item and passes the flash data to a flash player e.g. flash player which may correspond to Adobe Flash Player . The flash player executes within the remote desktop protocol server. The flash data may include for example a video file.

In operation the remote desktop protocol server decodes the flash data into a first raw bitmap via operation of the flash player e.g. flash player .

In operation the remote desktop protocol server captures or intercepts the decoded first raw bitmap by operation of a flash virtualization module e.g. server flash virtualization module . The flash virtualization module executes within the remote desktop protocol server.

In operation the remote desktop protocol server transmits the first raw bitmap to an acceleration module e.g. acceleration module of the flash virtualization module while foregoing transmission of the first raw bitmap to the client computing device.

In operation the remote desktop protocol server compresses the first raw bitmap into an image for example a JPEG image. The compression may be completed via operation of a compression module e.g. compression module of the flash virtualization module. In some examples a different image file type e.g. a GIF image may be used in place of the JPEG image.

In operation the remote desktop protocol server facilitates transmission of the image e.g. the JPEG image to the client computing device for example via operation of a redirection module e.g. redirection module or a network module e.g. network module . The image may be received on the client computing device via operation of a network module e.g. network module residing within a client flash virtualization module e.g. client flash virtualization module of the client computing device.

In operation the remote desktop protocol server facilitates decoding the image into a second raw bitmap on the client computing device. The decoding may be completed via a decoding module e.g. decoding module residing within the client flash virtualization module e.g. client flash virtualization module of the client computing device.

In operation the remote desktop protocol server facilitates rendering of the second raw bitmap on the client computing device at a location e.g. on a display of the client computing device corresponding to the flash content item. The rendering may be completed via a rendering module e.g. rendering module residing within the client flash virtualization module e.g. client flash virtualization module of the client computing device. After operation the process ends.

One example of a process of flash acceleration B is illustrated in and includes the steps B B B B B B and B.

With reference to the selective Flash Redirection Subroutine B begins at operation where the remote desktop protocol server receives a selection of a flash content item. The selection may be entered via the web browser e.g. browser of the server executing in a remote desktop protocol client application on the client computing device. For example the user of the client computing device may select a flash content item e.g. by clicking on the flash content item using a mouse or touching the flash content item on a touch screen .

In operation the remote desktop protocol server determines whether the selected flash content item is currently being redirected. The remote desktop protocol may make this determination based on a stored state of one or more of the web browser the flash virtualization module e.g. server flash virtualization module the redirection module e.g. redirection module within the flash virtualization module or the network module e.g. network module within the flash virtualization module. Initially all flash content item s on the webpage may not be redirected may have a state indicating that the flash content item s are not redirected . Alternatively initially all flash content item s on the webpage may be redirected may have a state indicating that the flash content item s are redirected . Upon selection of a flash content item the redirection state of the flash content item may be changed if the flash content item is presently not redirected the flash content item may change to being redirected if the flash content item is presently being redirected the flash content item may change to not being redirected. If the selected flash content item is not currently being redirected the process continues to operation . If the selected flash content item is currently being redirected the process continues to operation .

In operation if the selected flash content item is not currently being redirected the remote desktop protocol server applies Flash Redirection Subroutine C for the selected flash content item. Flash Redirection Subroutine C begins at operation and is described in detail below.

In operation if the selected flash content item is currently being redirected the remote desktop protocol server terminates redirection of the selected flash content item and renders the selected flash content item at the remote desktop protocol server. The rendered raw bitmap including the selected flash content item is then transmitted to the client computing device via the remote desktop protocol. The rendered raw bitmap may then be provided for display on the client computing device. After operation the process ends.

One example of a process of selective flash redirection C is illustrated in and includes the steps C C C C C and C.

With selective flash redirection a user may be able to select which flash content item s are redirected for rendering at the client computing device and which flash content item s are rendered on the remote desktop protocol server. As a result use of the memory the rendering processors e.g. processors in the central processing unit or the graphics processing unit or the network interface of the client computing device may be reduced. In some aspects flash content item s on a webpage in which the user has an interest e.g. which the user selects may be rendered more quickly on the client computing device while the flash content item s that are not selected may be rendered more slowly or more poorly via the remote desktop protocol connection.

With reference to the flash redirection Subroutine C begins at operation where the remote desktop protocol server determines whether the client computing device is connected to the Internet directly e.g. via connection A . For example the remote desktop protocol server may send a message to the client computing device inquiring whether the client computing device is connected to the Internet directly and receive a response from the client computing device based on a determination made at the client computing device . If the client computing device is connected to the Internet directly the process continues to Internet Based Flash Redirection Subroutine D which begins at operation and is described in detail below. If the client computing device is not connected to the Internet directly the process continues to operation .

In operation the remote desktop server determines whether the client computing device is connected to the Internet via a proxy server e.g. via Proxy Server A via connections A and A . The proxy server may be different from the remote desktop protocol server. For example the remote desktop protocol server may send a message to the client computing device inquiring whether the client computing device is connected to the Internet via the proxy server and receive a response from the client computing device. If the client computing device is connected to the Internet via the proxy server the process continues to Internet Based Flash Redirection Subroutine D which begins at operation and is described in detail below. If the client computing device is not connected to the Internet either directly or via the proxy server the process continues to Tunnel Based Flash Redirection Subroutine E which begins at operation and is described in detail below.

With reference to the Internet Based Flash Redirection Subroutine D begins at operation where the remote desktop protocol server fetches all flash parameters of the flash content item via operation of a redirection module e.g. redirection module of the flash virtualization module e.g. server flash virtualization module . The flash parameter s may include for example a uniform resource locator URL of the flash content item a size of the flash content item dimensions of the flash content item etc. The flash parameters of the flash content item are flash parameters associated with the flash content item.

In operation the remote desktop protocol server facilitates transmission of the flash parameters of the flash content item to the client computing device for feeding to the flash player e.g. flash player A executing on the client computing device. The flash parameters of the flash content item may include for example a uniform resource locator URL of the flash content item.

In operation the remote desktop protocol server facilitates fetching of flash data of the flash content item from a flash content server for playing of the flash content item via the flash player executing on the client computing device. The client computing device may fetch the flash data of the flash content item via its Internet connection which may be a direct Internet connection or an Internet connection via a proxy server. On the client computing device the flash redirection client module e.g. flash redirection client module may instantiate the flash player e.g. flash player A in a position of a display overlaying the browser of the remote desktop protocol client application. After operation the process ends.

With reference to the Tunnel Based Flash Redirection Subroutine E begins at operation where the remote desktop protocol server facilitates creation of a tunnel e.g. tunnel A between the remote desktop protocol server and the client computing device via operation of a tunneling module e.g. Tunneling Module A of the flash virtualization module e.g. server flash virtualization module . Upon creation of the tunnel the remote desktop protocol server may be connected to the client computing device via both the tunnel and the remote desktop protocol connection e.g. connection A . The tunnel may be different from the remote desktop protocol connection.

In operation the remote desktop protocol server fetches all flash parameters of the flash content item via operation of the redirection module e.g. redirection module of the flash virtualization module.

In operation the remote desktop protocol server facilitates fetching via operation of the network module e.g. Network Module of the flash virtualization module of flash data for the flash content item from the flash content server. The flash data may include for example a flash video.

In operation the remote desktop protocol server facilitates transmission via the tunnel of the flash data for the flash content item to the client computing device for playing of the flash content item via the flash player e.g. flash player A executing on the client computing device. The client computing device may receive the flash data. On the client computing device the flash redirection client module e.g. flash redirection client module may instantiate the flash player e.g. flash player A in a position of a display overlaying the browser of the remote desktop protocol client application. The position of the display may overlay the image data associated with the webpage. The flash player on the client computing device may play the flash data in response to receipt of the flash data. After operation the process ends.

When the browser at the server calls for the execution of an ActionScript function including e.g. any of the ActionScript functions described herein the entire ActionScript function call may be forwarded to the client e.g. by the flash redirection proxy plugin and the client e.g. the flash player at the client may execute the ActionScript function and return the result to the server e.g. to the flash redirection proxy plugin . In particular embodiments there is one result associated with each particular ActionScript function call. If for example a particular ActionScript function is called multiple times then in particular embodiments each time the function is called the call is forwarded to the client for remote execution as described herein and the result is returned and provided to the browser. In this example the same result for the same ActionScript function call is returned and provided to the browser e.g. by the flash redirection proxy plugin each time the ActionScript function is called. However in other embodiments a cache may be maintained at the server e.g. in memory for the results of ActionScript function calls returned by the client. As an example the first time a particular ActionScript function is called the ActionScript function is forwarded to the client as described above and the result is returned from the client cached at the server and provided to the browser. The next time there is a call to the same ActionScript function the cache at the server is checked to determine if a result for the same function has already been received from the client. If a result for the function call is available e.g. is in the cache then the flash redirection proxy plugin may simply return this result to the browser immediately without need of forwarding the call to the client to obtain the result. In this manner it may be possible to avoid excess bandwidth consumption from forwarding repeated ActionScript calls for the same function to the client. Additionally latencies introduced by the browser at the server waiting for the response from the flash player at the client may also be reduced potentially providing for smoother flash content playback.

In particular embodiments ActionScript code may for example be included in one or more JavaScript files executed individually or simultaneously by the browser at the server. Example code including an ActionScript function is as follows 

The code in the above example may for example appear in multiple different JavaScript files that are executed by a browser at the server. When executing each of these JavaScript files the browser invokes the ActionScript function GetAPIInterface . When this function is called the browser may call the function HasMethod GetAPIInterface on the flash redirection proxy plugin at the server and the flash redirection proxy plugin may check the cache at the server to determine if a result for this function has already been received from the client. If a result for the function call is available in the cache e.g. from execution of a different JavaScript file including the same ActionScript function then the flash redirection proxy plugin may simply return this result e.g. TRUE to the browser from the cache. If the result for the function call is not available e.g. is not in the cache the flash redirection proxy plugin may forward the entire ActionScript function call to the flash player at the client. The client e.g. the flash player may determine whether the method GetAPIInterface is available to call or not. If it is available the client may return the result e.g. the value TRUE to the server and the flash redirection proxy plugin at the server may return the result e.g. TRUE to the browser.

When the flash player at the client calls an NPN function including e.g. any of the NPN function described herein with a particular string e.g. a particular name the entire NPN function call including the string may be forwarded to the server e.g. by the flash redirection proxy browser and the server may return an identifier for the particular string from the execution of the NPN call by the browser at the server. In particular embodiments there is one identifier associated with each string. If for example a particular NPN function is called multiple times with a particular string then in particular embodiments each time the function is called the call is forwarded to the server for remote execution as described herein and the result e.g. the identifier for the string is returned and provided to the flash player. In this example the same result e.g. the same identifier for the same string is returned and provided to the flash player e.g. by the flash redirection proxy browser each time the NPN function is called with the string. However in other embodiments a cache may be maintained at the client e.g. in memory for the results e.g. the identifiers of strings of NPN calls returned by the server. As an example the first time a particular NPN function is called with a particular string the NPN function call is forwarded to the server as described above and the result e.g. the identifier for the string is returned from the server cached at the client and provided to the flash player. The next time there is a call to the same NPN function with the same string the cache at the client is checked for the string to determine if an identifier for the string has already been received from the server. If an identifier for the string is available e.g. is in the cache then the flash redirection proxy browser may simply return this identifier to the flash player immediately without need of forwarding the call to the server to obtain the identifier. In this manner it may be possible to avoid excess bandwidth consumption from forwarding repeated NPN calls with the same strings to the server. Additionally latencies introduced by the flash player at the client waiting for the response from the server may also be reduced potentially providing for smoother flash content playback.

The examples of may be applicable with either internet based flash redirection or tunnel based flash redirection.

One example of a process A for presenting flash content is illustrated in and includes the steps A A A A A A A A A A A A A A A A A A and A.

As illustrated in a client or client computing device may be for example a client implementing a Wyse TCX client application or any similar remote desktop protocol client application and a server or remote desktop server may be for example a server implementing a Wyse TCX server application or any similar remote desktop protocol server application .

In one aspect any of the clauses herein may depend from any one of the independent clauses or any one of the dependent clauses. In one aspect any of the clauses e.g. dependent or independent clauses may be combined with any other clauses e.g. dependent or independent clauses . In one aspect a claim may include some or all of the words e.g. steps operations means or components recited in a clause a sentence a phrase or a paragraph. In one aspect a claim may include some or all of the words recited in one or more clauses sentences phrases or paragraphs. In one aspect some of the words in each of the clauses sentences phrases or paragraphs may be removed. In one aspect additional words or elements may be added to a clause a sentence a phrase or a paragraph. In one aspect the subject technology may be implemented without utilizing some of the components elements functions or operations described herein. In one aspect the subject technology may be implemented utilizing additional components elements functions or operations.

In one aspect any methods instructions code means logic components blocks modules and the like e.g. software or hardware described or claimed herein can be represented in drawings e.g. flow charts block diagrams such drawings regardless of whether explicitly shown or not are expressly incorporated herein by reference and such drawings if not yet explicitly shown can be added to the disclosure without constituting new matter. For brevity some but not necessarily all of the clauses descriptions claims are explicitly represented in drawings but any of the clauses descriptions claims can be represented in drawings in a manner similar to those drawings explicitly shown. For example a flow chart can be drawn for any of the clauses sentences or claims for a method such that each operation or step is connected to the next operation or step by an arrow. In another example a block diagram can be drawn for any of the clauses sentences or claims having means for elements e.g. means for performing an action such that each means for element can be represented as a module for element e.g. a module for performing an action .

Those of skill in the art would appreciate that items such as the various illustrative blocks modules elements components methods operations steps and algorithms described herein e.g. the client computing device A the server A the proxy server A the flash content server A and the components therein may be implemented as hardware computer software or a combination of both.

To illustrate the interchangeability of hardware and software items such as the various illustrative blocks modules elements components methods operations steps and algorithms have been described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application.

In one aspect means a block a module an element a component or a processor may be an item e.g. one or more of blocks modules elements components or processors for performing one or more functions or operations. In one aspect such an item may be an apparatus hardware or a portion thereof. In one example an item may have a structure in the form of for example an instruction s for performing the function s or operation s where the instruction s are encoded or stored on a machine readable medium on another device or on a portion thereof where an instruction s may be software an application s a subroutine s or a portion thereof. In an example an item may be implemented as one or more circuits configured to perform the function s or operation s . A circuit may include one or more circuits and or logic. A circuit may be analog and or digital. A circuit may be electrical and or optical. A circuit may include transistors. In an example one or more items may be implemented as a processing system e.g. a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA etc. . Those skilled in the art will recognize how to implement the instructions circuits and processing systems.

A reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. For example a server may refer to one or more servers a tunnel may refer to one or more tunnels a connection may refer to one or more connections etc.

Unless specifically stated otherwise the term some refers to one or more. Pronouns in the masculine e.g. his include the feminine and neuter gender e.g. her and its and vice versa. Headings and subheadings if any are used for convenience only and do not limit the invention.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs. In one aspect various alternative configurations and operations described herein may be considered to be at least equivalent.

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an embodiment does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments or one or more embodiments. An embodiment may provide one or more examples. A phrase such an embodiment may refer to one or more embodiments and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A configuration may provide one or more examples. A phrase such a configuration may refer to one or more configurations and vice versa.

In one aspect of the disclosure when actions or functions are described as being performed by an item e.g. receiving determining fetching creating providing generating converting displaying playing notifying accepting selecting controlling transmitting reporting sending or any other action or function it is understood that such actions or functions may be performed by the item directly or indirectly. In one aspect when a module is described as performing an action the module may be understood to perform the action directly. In one aspect when a module is described as performing an action the module may be understood to perform the action indirectly for example by facilitating enabling or causing such an action.

In one aspect unless otherwise stated all measurements values ratings positions magnitudes sizes and other specifications that are set forth in this specification including in the claims that follow are approximate not exact. In one aspect they are intended to have a reasonable range that is consistent with the functions to which they relate and with what is customary in the art to which they pertain.

In one aspect the term coupled or the like may refer to being directly coupled. In another aspect the term coupled or the like may refer to being indirectly coupled.

Various items may be arranged differently e.g. arranged in a different order or partitioned in a different way all without departing from the scope of the subject technology. In one example the subject technology may be implemented without use of the proxy server A or without use of the tunnel A. In one aspect of the disclosure the elements recited in the accompanying claims may be performed by one or more modules or sub modules.

It is understood that the specific order or hierarchy of steps operations or processes disclosed is an illustration of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps operations or processes may be rearranged. Some of the steps operations or processes may be performed simultaneously. Some or all of the steps operations or processes may be performed automatically without the intervention of a user. The accompanying method claims if any present elements of the various steps operations or processes in a sample order and are not meant to be limited to the specific order or hierarchy presented.

The disclosure is provided to enable any person skilled in the art to practice the various aspects described herein. The disclosure provides various examples of the subject technology and the subject technology is not limited to these examples. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects.

All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for or in the case of a method claim the element is recited using the phrase step for. Furthermore to the extent that the term include have or the like is used such term is intended to be inclusive in a manner similar to the term comprise as comprise is interpreted when employed as a transitional word in a claim.

The Title Background Summary Brief Description of the Drawings and Abstract of the disclosure are hereby incorporated into the disclosure and are provided as illustrative examples of the disclosure not as restrictive descriptions. It is submitted with the understanding that they will not be used to limit the scope or meaning of the claims. In addition in the Detailed Description it can be seen that the description provides illustrative examples and the various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed subject matter requires more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed configuration or operation. The following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separately claimed subject matter.

The claims are not intended to be limited to the aspects described herein but are to be accorded the full scope consistent with the language claims and to encompass all legal equivalents. Notwithstanding none of the claims are intended to embrace subject matter that fails to satisfy the requirement of 35 U.S.C. 101 102 or 103 nor should they be interpreted in such a way. Any unintended embracement of such subject matter is hereby disclaimed.

Herein a computer readable non transitory storage medium or media may include one or more semiconductor based or other integrated circuits ICs such as for example field programmable gate arrays FPGAs or application specific ICs ASICs hard disk drives HDDs hybrid hard drives HHDs optical discs optical disc drives ODDs magneto optical discs magneto optical drives floppy diskettes floppy disk drives FDDs magnetic tapes solid state drives SSDs RAM drives SECURE DIGITAL cards or drives any other suitable computer readable non transitory storage media or any suitable combination of two or more of these where appropriate. A computer readable non transitory storage medium may be volatile non volatile or a combination of volatile and non volatile where appropriate.

Herein or is inclusive and not exclusive unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A or B means A B or both unless expressly indicated otherwise or indicated otherwise by context. Moreover and is both joint and several unless expressly indicated otherwise or indicated otherwise by context. Therefore herein A and B means A and B jointly or severally unless expressly indicated otherwise or indicated otherwise by context.

This scope of this disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. The scope of this disclosure is not limited to the example embodiments described or illustrated herein. Moreover although this disclosure describes or illustrates respective embodiments herein as including particular components elements functions operations or steps any of these embodiments may include any combination or permutation of any of the components elements functions operations or steps described or illustrated anywhere herein that a person having ordinary skill in the art would comprehend. Furthermore reference in the appended claims to an apparatus or system or a component of an apparatus or system being adapted to arranged to capable of configured to enabled to operable to or operative to perform a particular function encompasses that apparatus system component whether or not it or that particular function is activated turned on or unlocked as long as that apparatus system or component is so adapted arranged capable configured enabled operable or operative.

