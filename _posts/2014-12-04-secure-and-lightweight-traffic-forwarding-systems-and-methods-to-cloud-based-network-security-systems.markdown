---

title: Secure and lightweight traffic forwarding systems and methods to cloud based network security systems
abstract: A method implemented by an agent operating on a mobile device communicating to a cloud-based system includes opening up local listening sockets on the mobile device; redirecting outgoing traffic from all application on the mobile device except the agent to the local listening sockets; and forwarding the outgoing traffic from the local listening sockets to the cloud-based system with additional information included therein for the cloud-based system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350644&OS=09350644&RS=09350644
owner: Zscaler. Inc.
number: 09350644
owner_city: San Jose
owner_country: US
publication_date: 20141204
---
This application is a continuation in part of co pending U.S. patent application Ser. No. 14 461 790 filed Aug. 18 2014 and entitled OUT OF BAND END USER NOTIFICATION SYSTEMS AND METHODS FOR SECURITY EVENTS RELATED TO NON BROWSER MOBILE APPLICATIONS and U.S. patent application Ser. No. 13 446 856 filed Apr. 13 2012 and entitled ARCHIVING SYSTEMS AND METHODS FOR CLOUD BASED SYSTEMS the contents of which are incorporated in full by reference herein.

The present disclosure relates generally to computer networking systems and methods. More particularly the present disclosure relates to secure and lightweight traffic forwarding mechanisms to cloud based network security systems.

Conventional web and Domain Name System DNS cloud based network security solutions have problems associated with traffic forwarding user authentication device validation and application identification on mobile operating systems. In the past a majority of the web traffic was generated by browser based applications that were compliant with Hypertext Transfer Protocol HTTP protocol standards in its entirety. With the proliferation of mobile applications apps traffic forwarding mechanisms have faced numerous challenges. Mobile apps are purposely built to talk to dedicated servers using mechanisms that may not be proxy friendly may not handle HTTP redirections or may not support authentication cookies. Traditional browser based web transactions have a user agent as a source identifier but not all mobile apps support unique user agents. Similarly a DNS request does not have any application or user authentication information. Solutions other than proxy such as those that incorporate Secure Sockets Layer SSL or Internet Protocol Security IPsec Virtual Private Network VPN as a traffic forwarding mechanism can handle authentication for all traffic but lack the scalability and computational efficiency as afforded by proxy based solutions. Further conventional approaches do not provide a way for secure web gateways to identify a source application package and lack the capacity to enforce application specific organizational policies such as blocking social networking apps. Additionally conventional traffic forwarding solutions do not offer a way to locally apply device specific policies like bandwidth control that is beneficial to apply locally as request bytes going to cloud would cumulate from all devices. The conventional solutions also often lack the scalability and the ability required for supporting BYOD bring your own device model wherein only partial or containerized traffic is forwarded to a secure web gateway. Lastly conventional methods do not offer the capacity to generate security notifications in case of locally defined device level policy violations and need re routing to operating system specific push notification services.

In an exemplary embodiment a method implemented by an agent operating on a mobile device communicating to a cloud based system includes opening up local listening sockets on the mobile device redirecting outgoing traffic from all application on the mobile device except the agent to the local listening sockets and forwarding the outgoing traffic from the local listening sockets to the cloud based system with additional information included therein for the cloud based system. The local listening sockets can be a Transmission Control Protocol TCP listening socket for Web traffic and a User Datagram Protocol UDP listening socket for Domain Name System DNS traffic. The redirecting outgoing traffic can include using an Internet Protocol IP tables firewall rules based approach where the agent configures firewall rules to reroute the outgoing traffic to the local listening sockets. The redirecting outgoing traffic can include using a tunnel interface approach using a tunnel interface to reroute the outgoing traffic to the local listening sockets. The method can further include applying local policies at the mobile device through the agent prior to forwarding the outgoing traffic. The cloud based system can be configured to apply remote policies subsequent to the forwarding the outgoing traffic. The method can further include blocking an outgoing request based on the outgoing traffic based on the local policies and displaying a locally generated end user notification. The local policies can include bandwidth quota limits. The additional information can include any of app unique package name app version operating system version device model and agent app version.

In another exemplary embodiment a mobile device includes a network interface communicatively coupled to a network a processor communicatively coupled to the network interface and memory storing instructions that when executed cause the processor to open up local listening sockets on the mobile device redirect outgoing traffic from all application on the mobile device except the agent to the local listening sockets and forward the outgoing traffic from the local listening sockets to a cloud based system with additional information included therein for the cloud based system.

In yet another exemplary embodiment a cloud based security system includes one or more cloud nodes communicatively coupled to a network wherein each of the one or more cloud nodes is configured to receive outgoing traffic from local listening sockets at a mobile device with additional information included therein wherein the outgoing traffic is received subsequent to having local policies applied at the mobile device and apply remote policies on the outgoing traffic wherein the outgoing traffic is either Web traffic or Domain Name System DNS traffic from the mobile device.

In various exemplary embodiments secure and lightweight traffic forwarding systems and methods are described to cloud based network security systems. The traffic forwarding systems and methods provide lightweight and secure traffic forwarding tunnels to cloud based network security systems for Web and DNS . Traffic Web and DNS from a device including all or containerized apps can be routed through this tunnel. The tunnel handles proxy authentication transparently for all warranted apps and sends an application identifier with transactions for the cloud based network security systems to identify the app and apply application specific security policies. Further wherever beneficial like limiting mobile data quota per app a tunnel app can apply policies locally and generate security notifications locally for those events. The tunnel is a convenient mechanism to handle mobile app data and the like that is moving away from the HTTP protocol. The systems and methods provide a secure and a lightweight solution to forward Web and DNS traffic to a cloud based security and policy enforcement system a way for a secure web gateway to identify application associated with a Web and DNS transaction correctly transparently handles cloud custom authentication scheme for all apps and can apply some policies locally like 3G quota enforcement to save bandwidth with locally generated notification for those transactions.

Referring to in an exemplary embodiment a block diagram illustrates a distributed security system . The system may for example be implemented as an overlay network in a wide area network WAN such as the Internet a local area network LAN or the like. The system includes content processing nodes PN that proactively detect and preclude the distribution of security threats e.g. malware spyware viruses email spam etc. and other undesirable content sent from or requested by an external system. The processing nodes can also log activity and enforce policies. Example external systems may include an enterprise a computer device and a mobile device or other network and computing systems communicatively coupled to the system . In an exemplary embodiment each of the processing nodes may include a decision system e.g. data inspection engines that operate on a content item e.g. a web page a file an email message or some other data or data communication that is sent from or requested by one of the external systems. In an exemplary embodiment all data destined for or received from the Internet is processed through one of the processing nodes . In another exemplary embodiment specific data specified by each external system e.g. only email only executable files etc. is process through one of the processing node .

Each of the processing nodes may generate a decision vector D d1 d2 . . . dn for a content item of one or more parts C c1 c2 . . . cm . Each decision vector may identify a threat classification e.g. clean spyware malware undesirable content innocuous spam email unknown etc. For example the output of each element of the decision vector D may be based on the output of one or more data inspection engines. In an exemplary embodiment the threat classification may be reduced to a subset of categories e.g. violating non violating neutral unknown. Based on the subset classification the processing node may allow distribution of the content item preclude distribution of the content item allow distribution of the content item after a cleaning process or perform threat detection on the content item. In an exemplary embodiment the actions taken by one of the processing nodes may be determinative on the threat classification of the content item and on a security policy of the external system to which the content item is being sent from or from which the content item is being requested by. A content item is violating if for any part C c1 c2 . . . cm of the content item at any of the processing nodes any one of the data inspection engines generates an output that results in a classification of violating. 

Each of the processing nodes may be implemented by one or more of computer and communication devices e.g. server computers gateways switches etc. such as the server described in . In an exemplary embodiment the processing nodes may serve as an access layer . The access layer may for example provide external system access to the security system . In an exemplary embodiment each of the processing nodes may include Internet gateways and one or more servers and the processing nodes may be distributed through a geographic region e.g. throughout a country region campus etc. According to a service agreement between a provider of the system and an owner of an external system the system may thus provide security protection to the external system at any location throughout the geographic region.

Data communications may be monitored by the system in a variety of ways depending on the size and data requirements of the external system. For example an enterprise may have multiple routers switches etc. that are used to communicate over the Internet and the routers switches etc. may be configured to establish communications through the nearest in traffic communication time for example processing node . A mobile device may be configured to communicated to a nearest processing node through any available wireless access device such as an access point or a cellular gateway. A single computer device such as a consumer s personal computer may have its browser and email program configured to access the nearest processing node which in turn serves as a proxy for the computer device . Alternatively an Internet provider may have all of its customer traffic processed through the processing nodes .

In an exemplary embodiment the processing nodes may communicate with one or more authority nodes AN . The authority nodes may store policy data for each external system and may distribute the policy data to each of the processing nodes . The policy may for example define security policies for a protected system e.g. security policies for the enterprise . Example policy data may define access privileges for users web sites and or content that is disallowed restricted domains etc. The authority nodes may distribute the policy data to the access nodes . In an exemplary embodiment the authority nodes may also distribute threat data that includes the classifications of content items according to threat classifications e.g. a list of known viruses a list of known malware sites spam email domains a list of known phishing sites etc. The distribution of threat data between the processing nodes and the authority nodes may implemented by push and pull distribution schemes described in more detail below. In an exemplary embodiment each of the authority nodes may be implemented by one or more computer and communication devices e.g. server computers gateways switches etc. such as the server described in . In some exemplary embodiments the authority nodes may serve as an application layer . The application layer may for example manage and provide policy data threat data and data inspection engines and dictionaries for the processing nodes .

Other application layer functions may also be provided in the application layer such as a user interface UI front end . The user interface front end may provide a user interface through which users of the external systems may provide and define security policies e.g. whether email traffic is to be monitored whether certain web sites are to be precluded etc. Another application capability that may be provided through the user interface front end is security analysis and log reporting. The underlying data on which the security analysis and log reporting functions operate are stored in logging nodes LN which serve as a data logging layer . Each of the logging nodes may store data related to security operations and network traffic processed by the processing nodes for each external system. In an exemplary embodiment the logging node data may be anonymized so that data identifying an enterprise is removed or obfuscated. For example identifying data may be removed to provide an overall system summary of security processing for all enterprises and users without revealing the identity of any one account. Alternatively identifying data may be obfuscated e.g. provide a random account number each time it is accessed so that an overall system summary of security processing for all enterprises and users may be broken out by accounts without revealing the identity of any one account. In another exemplary embodiment the identifying data and or logging node data may be further encrypted e.g. so that only the enterprise or user if a single user account may have access to the logging node data for its account. Other processes of anonymizing obfuscating or securing logging node data may also be used.

In an exemplary embodiment an access agent may be included in the external systems. For example the access agent is deployed in the enterprise . The access agent may for example facilitate security processing by providing a hash index of files on a client device to one of the processing nodes or may facilitate authentication functions with one of the processing nodes e.g. by assigning tokens for passwords and sending only the tokens to a processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes may also be facilitated by the access agent . In an exemplary embodiment the processing node may act as a forward proxy that receives user requests to external servers addressed directly to the processing node . In another exemplary embodiment the processing node may access user requests that are passed through the processing node in a transparent mode. A protected system e.g. enterprise may for example choose one or both of these modes. For example a browser may be configured either manually or through the access agent to access the processing node in a forward proxy mode. In the forward proxy mode all accesses are addressed to the processing node .

In an exemplary embodiment an enterprise gateway may be configured so that user requests are routed through the processing node by establishing a communication tunnel between enterprise gateway and the processing node . For establishing the tunnel existing protocols such as generic routing encapsulation GRE layer two tunneling protocol L2TP or other Internet Protocol IP security protocols may be used. In another exemplary embodiment the processing nodes may be deployed at Internet service provider ISP nodes. The ISP nodes may redirect subject traffic to the processing nodes in a transparent proxy mode. Protected systems such as the enterprise may use a multiprotocol label switching MPLS class of service for indicating the subject traffic that is to be redirected. For example at the within the enterprise the access agent may be configured to perform MPLS labeling. In another transparent proxy mode exemplary embodiment a protected system such as the enterprise may identify the processing node as a next hop router for communication with the external servers.

Generally the distributed security system may generally refer to an exemplary cloud based security system. Cloud computing systems and methods abstract away physical servers storage networking etc. and instead offer these as on demand and elastic resources. The National Institute of Standards and Technology NIST provides a concise and specific definition which states cloud computing is a model for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction. Cloud computing differs from the classic client server model by providing applications from a server that are executed and managed by a client s web browser with no installed client version of an application required. Centralization gives cloud service providers complete control over the versions of the browser based applications provided to clients which removes the need for version upgrades or license management on individual client computing devices. The phrase software as a service SaaS is sometimes used to describe application programs offered through cloud computing. A common shorthand for a provided cloud computing service or even an aggregation of all existing cloud services is the cloud. The distributed security system is illustrated herein as one exemplary embodiment of a cloud based system and those of ordinary skill in the art will recognize the cloud based mobile device security and policy systems and methods contemplate operation on any cloud based system.

Referring to in an exemplary embodiment a block diagram illustrates various components of the distributed security system in more detail. Although illustrates only one representative component processing node authority node and logging node those of ordinary skill in the art will appreciate there may be many of each of the component nodes and present in the system . A wide area network WAN such as the Internet or some other combination of wired and or wireless networks communicatively couples the processing node the authority node and the logging node therebetween. The external systems and likewise communicate over the WAN with each other or other data providers and publishers. Some or all of the data communication of each of the external systems and may be processed through the processing node .

In an exemplary embodiment a client access agent may be included on a client computer . The client access agent may for example facilitate security processing by providing a hash index of files on the user computer to a processing node for malware virus detection etc. Other security operations may also be facilitated by the access agent . In another exemplary embodiment a server access agent may facilitate authentication functions with the processing node e.g. by assigning tokens for passwords and sending only the tokens to the processing node so that transmission of passwords beyond the network edge of the enterprise is minimized. Other functions and processes may also be facilitated by the server access agent . The computer device and the mobile device may also store information warranting security measures such as personal bank records medical information and login information e.g. login information to the server of the enterprise or to some other secured data provider server. The computer device and the mobile device can also store information warranting security measures such as personal bank records medical information and login information e.g. login information to a server of the enterprise or to some other secured data provider server.

In an exemplary embodiment the processing nodes are external to network edges of the external systems and . Each of the processing nodes stores security policies received from the authority node and monitors content items requested by or sent from the external systems and . In an exemplary embodiment each of the processing nodes may also store a detection process filter and or threat data to facilitate the decision of whether a content item should be processed for threat detection. A processing node manager may manage each content item in accordance with the security policy data and the detection process filter and or threat data if stored at the processing node so that security policies for a plurality of external systems in data communication with the processing node are implemented external to the network edges for each of the external systems and . For example depending on the classification resulting from the monitoring the content item may be allowed precluded or threat detected. In general content items that are already classified as clean or not posing a threat can be allowed while those classified as violating may be precluded. Those content items having an unknown status e.g. content items that have not been processed by the system may be threat detected to classify the content item according to threat classifications.

The processing node may include a state manager A. The state manager A may be used to maintain the authentication and the authorization states of users that submit requests to the processing node . Maintenance of the states through the state manager A may minimize the number of authentication and authorization transactions that are necessary to process a request. The processing node may also include an epoch processor B. The epoch processor B may be used to analyze authentication data that originated at the authority node . The epoch processor B may use an epoch ID to further validate the authenticity of authentication data. The processing node may further include a source processor C. The source processor C may be used to verify the source of authorization and authentication data. The source processor C may identify improperly obtained authorization and authentication data enhancing the security of the network. Collectively the state manager A the epoch processor B and the source processor C operate as data inspection engines.

Because the amount of data being processed by the processing nodes may be substantial the detection processing filter may be used as the first stage of an information lookup procedure. For example the detection processing filter may be used as a front end to a looking of the threat data . Content items may be mapped to index values of the detection processing filter by a hash function that operates on an information key derived from the information item. The information key is hashed to generate an index value i.e. a bit position . A value of zero in a bit position in the guard table can indicate for example absence of information while a one in that bit position can indicate presence of information. Alternatively a one could be used to represent absence and a zero to represent presence. Each content item may have an information key that is hashed. For example the processing node manager may identify the Uniform Resource Locator URL address of URL requests as the information key and hash the URL address or may identify the file name and the file size of an executable file information key and hash the file name and file size of the executable file. Hashing an information key to generate an index and checking a bit value at the index in the detection processing filter generally requires less processing time than actually searching threat data . The use of the detection processing filter may improve the failure query i.e. responding to a request for absent information performance of database queries and or any general information queries. Because data structures are generally optimized to access information that is present in the structures failure query performance has a greater effect on the time required to process information searches for very rarely occurring items e.g. the presence of file information in a virus scan log or a cache where many or most of the files transferred in a network have not been scanned or cached. Using the detection processing filter however the worst case additional cost is only on the order of one and thus its use for most failure queries saves on the order of m log m where m is the number of information records present in the threat data .

The detection processing filter thus improves performance of queries where the answer to a request for information is usually positive. Such instances may include for example whether a given file has been virus scanned whether content at a given URL has been scanned for inappropriate e.g. pornographic content whether a given fingerprint matches any of a set of stored documents and whether a checksum corresponds to any of a set of stored documents. Thus if the detection processing filter indicates that the content item has not been processed then a worst case null lookup operation into the threat data is avoided and a threat detection can be implemented immediately. The detection processing filter thus complements the threat data that capture positive information. In an exemplary embodiment the detection processing filter may be a Bloom filter implemented by a single hash function. The Bloom filter may be sparse table i.e. the tables include many zeros and few ones and the hash function is chosen to minimize or eliminate false negatives which are for example instances where an information key is hashed to a bit position and that bit position indicates that the requested information is absent when it is actually present.

In general the authority node includes a data store that stores master security policy data for each of the external systems and . An authority node manager may be used to manage the master security policy data e.g. receive input from users of each of the external systems defining different security policies and may distribute the master security policy data to each of the processing nodes . The processing nodes then store a local copy of the security policy data . The authority node may also store a master detection process filter . The detection processing filter may include data indicating whether content items have been processed by one or more of the data inspection engines in any of the processing nodes . The authority node manager may be used to manage the master detection processing filter e.g. receive updates from a processing nodes when the processing node has processed a content item and update the master detection processing filter . For example the master detection processing filter may be distributed to the processing nodes which then store a local copy of the detection processing filter .

In an exemplary embodiment the authority node may include an epoch manager . The epoch manager may be used to generate authentication data associated with an epoch ID. The epoch ID of the authentication data is a verifiable attribute of the authentication data that can be used to identify fraudulently created authentication data. In an exemplary embodiment the detection processing filter may be a guard table. The processing node may for example use the information in the local detection processing filter to quickly determine the presence and or absence of information e.g. whether a particular URL has been checked for malware whether a particular executable has been virus scanned etc. The authority node may also store master threat data . The master threat data may classify content items by threat classifications e.g. a list of known viruses a list of known malware sites spam email domains list of known or detected phishing sites etc. The authority node manager may be used to manage the master threat data e.g. receive updates from the processing nodes when one of the processing nodes has processed a content item and update the master threat data with any pertinent results. In some implementations the master threat data may be distributed to the processing nodes which then store a local copy of the threat data . In another exemplary embodiment the authority node may also monitor the health of each of the processing nodes e.g. the resource availability in each of the processing nodes detection of link failures etc. Based on the observed health of each of the processing nodes the authority node may redirect traffic among the processing nodes and or balance traffic among the processing nodes . Other remedial actions and processes may also be facilitated by the authority node .

The processing node and the authority node may be configured according to one or more push and pull processes to manage content items according to security policy data and or detection process filters and or and the threat data and or . In a threat data push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager may manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node .

The authority node manager in response to receiving the threat data update updates the master threat data stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager may automatically transmit the updated threat data to the other processing nodes . Accordingly threat data for new threats as the new threats are encountered are automatically distributed to each processing node . Upon receiving the new threat data from the authority node each of processing node managers may store the updated threat data in the locally stored threat data .

In a threat data pull and push implementation each of the processing nodes stores policy data and threat data . The processing node manager determines whether a content item requested by or transmitted from an external system is classified by the threat data . If the content item is determined to be classified by the threat data then the processing node manager may manage the content item according to the security classification of the content item and the security policy of the external system. If however the content item is determined to not be classified by the threat data then the processing node manager may request responsive threat data for the content item from the authority node . Because processing a content item may consume valuable resource and time in some implementations the processing node may first check with the authority node for threat data before committing such processing resources.

The authority node manager may receive the responsive threat data request from the processing node and may determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provide a reply that includes the responsive threat data to the processing node so that the processing node manager may manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager may provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager can cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager can then update the master threat data . Thereafter any future requests related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

In a detection process filter and threat data push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it may determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data may be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however may eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the content item is classified by the threat data then the processing node manager may manage the content item in accordance with the security policy data and the classification of the content item. Conversely if the processing node manager determines that the content item is not classified by the threat data or if the processing node manager initially determines through the detection process filter that the content item is not classified by the threat data then the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to one of the authority nodes .

The authority node manager in turn may update the master threat data and the master detection process filter stored in the authority node data store according to the threat data update received from the processing node . In an exemplary embodiment the authority node manager may automatically transmit the updated threat data and detection processing filter to other processing nodes . Accordingly threat data and the detection processing filter for new threats as the new threats are encountered are automatically distributed to each processing node and each processing node may update its local copy of the detection processing filter and threat data .

In a detection process filter and threat data pull and push implementation each of the processing nodes stores a detection process filter policy data and threat data . The processing node manager accesses the detection process filter to determine whether the content item has been processed. If the processing node manager determines that the content item has been processed it may determine if the content item is classified by the threat data . Because the detection process filter has the potential for a false positive a lookup in the threat data can be implemented to ensure that a false positive has not occurred. The initial check of the detection process filter however may eliminate many null queries to the threat data which in turn conserves system resources and increases efficiency. If the processing node manager determines that the content item has not been processed it may request responsive threat data for the content item from the authority node . Because processing a content item may consume valuable resource and time in some implementations the processing node may first check with the authority node for threat data before committing such processing resources.

The authority node manager may receive the responsive threat data request from the processing node and may determine if the responsive threat data is stored in the authority node data store. If responsive threat data is stored in the master threat data then the authority node manager provides a reply that includes the responsive threat data to the processing node so that the processing node manager can manage the content item in accordance with the security policy data and the classification of the content item and further update the local detection processing filter . Conversely if the authority node manager determines that responsive threat data is not stored in the master threat data then the authority node manager may provide a reply that does not include the responsive threat data to the processing node . In response the processing node manager may cause one or more of the data inspection engines to perform the threat detection processes to classify the content item according to a threat classification. Once the content item is classified the processing node manager generates a threat data update that includes data indicating the threat classification for the content item from the threat detection process and transmits the threat data update to an authority node . The authority node manager may then update the master threat data . Thereafter any future requests for related to responsive threat data for the content item from other processing nodes can be readily served with responsive threat data.

The various push and pull data exchange processes provided above are exemplary processes for which the threat data and or detection process filters may be updated in the system of . Other update processes however are contemplated with the present invention. The data inspection engines processing node manager authority node manager user interface manager logging node manager and authority agent may be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions can for example include interpreted instructions such as script instructions e.g. JavaScript or ECMAScript instructions or executable code or other instructions stored in a non transitory computer readable medium. Other processing architectures can also be used e.g. a combination of specially designed hardware and software for example.

Referring to in an exemplary embodiment a block diagram illustrates a server which may be used in the system in other systems or standalone. Any of the processing nodes the authority nodes and the logging nodes may be formed through one or more servers . Further the computer device the mobile device the servers etc. may include the server or a similar structure. The server may be a digital computer that in terms of hardware architecture generally includes a processor input output I O interfaces a network interface a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the server in an oversimplified manner and a practical embodiment may include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface may be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface may have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor may be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the server a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the server is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the server pursuant to the software instructions. The I O interfaces may be used to receive user input from and or for providing system output to one or more devices or components. User input may be provided via for example a keyboard touch pad and or a mouse. System output may be provided via a display device and a printer not shown . I O interfaces may include for example a serial port a parallel port a small computer system interface SCSI a serial ATA SATA a fibre channel Infiniband iSCSI a PCI Express interface PCI x an infrared IR interface a radio frequency RF interface and or a universal serial bus USB interface.

The network interface may be used to enable the server to communicate on a network such as the Internet the WAN the enterprise and the like etc. The network interface may include for example an Ethernet card or adapter e.g. 10BaseT Fast Ethernet Gigabit Ethernet 10 GbE or a wireless local area network WLAN card or adapter e.g. 802.11a b g n . The network interface may include address control and or data connections to enable appropriate communications on the network. A data store may be used to store data. The data store may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store may incorporate electronic magnetic optical and or other types of storage media. In one example the data store may be located internal to the server such as for example an internal hard drive connected to the local interface in the server . Additionally in another embodiment the data store may be located external to the server such as for example an external hard drive connected to the I O interfaces e.g. SCSI or USB connection . In a further embodiment the data store may be connected to the server through a network such as for example a network attached file server.

The memory may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive tape CDROM etc. and combinations thereof. Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory may have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory may include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. The software in the memory includes a suitable operating system O S and one or more programs . The operating system essentially controls the execution of other computer programs such as the one or more programs and provides scheduling input output control file and data management memory management and communication control and related services. The one or more programs may be configured to implement the various processes algorithms methods techniques etc. described herein.

Referring to in an exemplary embodiment a block diagram illustrates a mobile device which may be used in the system or the like. The mobile device can be a digital device that in terms of hardware architecture generally includes a processor input output I O interfaces a radio a data store and memory . It should be appreciated by those of ordinary skill in the art that depicts the mobile device in an oversimplified manner and a practical embodiment may include additional components and suitably configured processing logic to support known or conventional operating features that are not described in detail herein. The components and are communicatively coupled via a local interface . The local interface can be for example but not limited to one or more buses or other wired or wireless connections as is known in the art. The local interface can have additional elements which are omitted for simplicity such as controllers buffers caches drivers repeaters and receivers among many others to enable communications. Further the local interface may include address control and or data connections to enable appropriate communications among the aforementioned components.

The processor is a hardware device for executing software instructions. The processor can be any custom made or commercially available processor a central processing unit CPU an auxiliary processor among several processors associated with the mobile device a semiconductor based microprocessor in the form of a microchip or chip set or generally any device for executing software instructions. When the mobile device is in operation the processor is configured to execute software stored within the memory to communicate data to and from the memory and to generally control operations of the mobile device pursuant to the software instructions. In an exemplary embodiment the processor may include a mobile optimized processor such as optimized for power consumption and mobile applications. The I O interfaces can be used to receive user input from and or for providing system output. User input can be provided via for example a keypad a touch screen a scroll ball a scroll bar buttons bar code scanner and the like. System output can be provided via a display device such as a liquid crystal display LCD touch screen and the like. The I O interfaces can also include for example a serial port a parallel port a small computer system interface SCSI an infrared IR interface a radio frequency RF interface a universal serial bus USB interface and the like. The I O interfaces can include a graphical user interface GUI that enables a user to interact with the mobile device . Additionally the I O interfaces may further include an imaging device i.e. camera video camera etc.

The radio enables wireless communication to an external access device or network. Any number of suitable wireless data communication protocols techniques or methodologies can be supported by the radio including without limitation RF IrDA infrared Bluetooth ZigBee and other variants of the IEEE 802.15 protocol IEEE 802.11 any variation IEEE 802.16 WiMAX or any other variation Direct Sequence Spread Spectrum Frequency Hopping Spread Spectrum Long Term Evolution LTE cellular wireless cordless telecommunication protocols e.g. 3G 4G etc. wireless home network communication protocols paging network protocols magnetic induction satellite data communication protocols wireless hospital or health care facility network protocols such as those operating in the WMTS bands GPRS proprietary wireless data communication protocols such as variants of Wireless USB and any other protocols for wireless communication. The data store may be used to store data. The data store may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM and the like nonvolatile memory elements e.g. ROM hard drive tape CDROM and the like and combinations thereof. Moreover the data store may incorporate electronic magnetic optical and or other types of storage media.

The memory may include any of volatile memory elements e.g. random access memory RAM such as DRAM SRAM SDRAM etc. nonvolatile memory elements e.g. ROM hard drive etc. and combinations thereof. Moreover the memory may incorporate electronic magnetic optical and or other types of storage media. Note that the memory may have a distributed architecture where various components are situated remotely from one another but can be accessed by the processor . The software in memory can include one or more software programs each of which includes an ordered listing of executable instructions for implementing logical functions. In the example of the software in the memory includes a suitable operating system O S and programs . The operating system essentially controls the execution of other computer programs and provides scheduling input output control file and data management memory management and communication control and related services. The programs may include various applications add ons etc. configured to provide end user functionality with the mobile device . For example exemplary programs may include but not limited to a web browser social networking applications streaming media applications games mapping and location applications electronic mail applications financial applications and the like. In a typical example the end user typically uses one or more of the programs along with a network such as the system .

Referring to in an exemplary embodiment a cloud system is illustrated for implementing the systems and methods described herein. The cloud system includes one or more cloud nodes CN communicatively coupled to the Internet . The cloud nodes may include the processing nodes the server or the like. That is the cloud system may include the distributed security system or another implementation of a cloud based system. In the cloud system traffic from various locations and various devices located therein such as a regional office headquarters various employee s homes mobile laptop and mobile device is redirected to the cloud through the cloud nodes . That is each of the locations is communicatively coupled to the Internet through the cloud nodes . The cloud system may be configured to perform various functions such as spam filtering uniform resource locator URL filtering antivirus protection bandwidth control data loss prevention zero day vulnerability protection web 2.0 features and the like. In an exemplary embodiment the cloud system and the distributed security system may be viewed as Security as a Service through the cloud.

In an exemplary embodiment the cloud system can be configured to provide mobile device security and policy systems and methods. The mobile device may be the mobile device and may include common devices such as smartphones tablets netbooks personal digital assistants MP3 players cell phones e book readers and the like. The cloud system is configured to provide security and policy enforcement for devices including the mobile devices in the cloud. Advantageously the cloud system avoids platform specific security apps on the mobile devices forwards web traffic through the cloud system enables network administrators to define policies in the cloud and enforces cleans traffic in the cloud prior to delivery to the mobile devices . Further through the cloud system network administrators may define user centric policies tied to users not devices with the policies being applied regardless of the device used by the user. The cloud system provides 24 7 security with no need for updates as the cloud system is always up to date with current threats and without requiring device signature updates. Also the cloud system enables multiple enforcement points centralized provisioning and logging automatic traffic routing to a nearest cloud node geographical distribution of the cloud nodes policy shadowing of users which is dynamically available at the cloud nodes etc.

In various exemplary embodiments the cloud system and or the distributed security system can be used to perform DNS surrogation. Specifically DNS surrogation can be a framework for distributed or cloud based security monitoring as is described herein. Endpoint security is no longer effective as deployments move to the cloud with users accessing content from a plurality of devices in an anytime anywhere connected manner. As such cloud based security is the most effective means to ensure network protection where different devices are used to access network resources. Traffic inspection in the distributed security system and the cloud based system is performed in an in line manner i.e. the processing nodes and the cloud nodes are in the data path of connecting users. Another approach can include a passive approach to the data path. DNS is one of the most fundamental IP protocols. With DNS surrogation as a technique it is proposed to use DNS for dynamic routing of traffic per user authentication and policy enforcement and the like.

In conjunction with the cloud system and or the distributed security system various techniques can be used for monitoring which are described on a sliding scale between always inline to never inline. First in an always inline manner all user traffic is between inline proxies such as the processing nodes or the cloud nodes without exception. Here DNS can be used as a forwarding mechanism to the inline proxies. Second in a somewhat always inline manner all user traffic except for certain business partners or third parties is between inline proxies such as the processing nodes or the cloud nodes . Third in an inline manner for most traffic high bandwidth applications can be configured to bypass the inline proxies such as the processing nodes or the cloud nodes . Exemplary high bandwidth applications can include content streaming such as video e.g. Netflix Hulu YouTube etc. or audio e.g. Pandora etc. . Fourth in a mixed manner inline monitoring can be used for interesting traffic as determined by security policy with other traffic being direct. Fifth in an almost never inline manner simple domain level URL filtering can be used to determine what is monitored inline. Finally sixth in a never inline manner DNS augmented security can be used.

Referring to in an exemplary embodiment a network diagram illustrates a network with a distributed security cloud providing DNS augmented security. The network includes a user device connecting to the distributed security cloud via an anycast DNS server . The anycast DNS server can be a server such as the server of . Also the anycast DNS server can be the processing node the cloud node etc. The distributed security cloud includes the anycast DNS server policy data and an inline proxy . The inline proxy can include the processing node the cloud node etc. In operation the user device is configured with a DNS entry of the anycast DNS server and the anycast DNS server can perform DNS surrogation as is described herein. The distributed security cloud utilizes the anycast DNS server the policy data and the inline proxy to perform the DNS augmented security.

The network illustrates the DNS augmented security where DNS information is used as follows. First at a step the user device requests a DNS lookup of a site e.g. what is the IP address of site.com from the anycast DNS server . The anycast DNS server accesses the policy data to determine the policy associated with the site at step . The anycast DNS server returns the IP address of the site based on the appropriate policy at step . The policy data determines if the site either goes direct step to the Internet is inspected by the inline proxy step or is blocked per policy step . Here the anycast DNS server returns the IP address with additional information if the site is inspected or blocked. For example if the anycast DNS server determines the access is direct the anycast DNS server simply returns the IP address of the site. If the anycast DNS server determines the site is blocked or inspected the anycast DNS server returns the IP address to the inline proxy with additional information. The inline proxy can block the site or provide fully inline proxied traffic to the site step after performing monitoring for security.

The DNS augmented security advantageously is protocol and application agnostic providing visibility and control across virtually all Internet bound traffic. For example DNS based protocols include Internet Relay Chat IRC Session Initiation Protocol SIP Hypertext Transfer Protocol HTTP HTTP Secure HTTPS Post Office Protocol v3 POP3 Internet Message Access Protocol IMAP etc. Further emerging threats are utilizing DNS today especially Botnets and advanced persistent threats APTs . For example Fast flux is a DNS technique used to hide phishing and malware delivery sites behind an ever changing network of compromised hosts acting as proxies. The DNS augmented security provides deployment flexibility when full inline monitoring is not feasible. For example this can be utilized in highly distributed with high bandwidth environments in locations with challenging Internet Access etc. The DNS augmented security can provide URL filtering white black list enforcement etc. for enhanced security without content filtering. In this manner the network can be used with the distributed security system and the cloud system to provide cloud based security without requiring full inline connectivity.

Referring to in an exemplary embodiment a functional block diagram illustrates a web transaction archiving system . The archiving system can be based on the systems or another type of system. That is the archiving system can operate on any cloud system handling web or any other data transactions. The archiving system includes a cloud processing node a cloud management node a cloud Simple Mail Transfer Protocol SMTP node a cloud logging node and a customer SMTP server . In an exemplary embodiment the cloud processing node can be the processing node or the cloud node the cloud management node can be the authority node or part of the cloud node and the logging node can be the logging node or part of the cloud node . The cloud SMTP node can be part of any of the logging node the processing node the authority node the cloud node or a standalone device. Collectively the nodes are part of a cloud system i.e. the system etc. The customer SMTP server is a mail server located within an organization s administrative domain. For example in the customer SMTP server could be within the enterprise behind the firewalls .

In operation the cloud processing node interfaces to end users such as receiving HTTP requests or any other data e.g. collectively referred to as web transactions or app transactions . The cloud processing node is configured to perform the various functions described herein for the processing node and the cloud node . That is the cloud processing node can perform data analysis on any requests to from the end users. In context of this data analysis the archiving systems and methods seek to avoid storing any private data associated with the organization within the confines of the cloud. The cloud processing node performs the data analysis based on policy information provided by the cloud management node i.e. previously provided provided on demand etc. . Part of this policy information can include archiving rule for specific security policies. Exemplary archiving rules can include without limitation not storing data related to a security incident event e.g. a data leakage event etc. not storing data related to accessing certain Web sites not storing data related to specific users etc. Through the cloud management node the archiving rules can be modified as needed by an IT representative of an organization. The cloud logging node is used for storing notification logs related to the data analysis. In an exemplary embodiment the cloud logging node can store a log entry for any event detected at the cloud processing node . However the data in the log entry can be based on the archiving rules. For example a security incident event could just denote the specifics of the event without storing the associated data at the cloud logging node .

The cloud SMTP node is configured to handle archiving of data when there is an archiving rule in place. The cloud SMTP node is configured to receive a notification when there is an event and an archiving rule in place. For example assuming the cloud SMTP node is separated from the cloud processing node the cloud SMTP node can receive an email notification from the cloud processing node . Alternatively the cloud SMTP node can be part of the cloud processing node i.e. part of the processing node the cloud node etc. and in this exemplary embodiment the cloud processing node can simply internally notify the cloud SMTP node . The cloud SMTP node is configured to compose an email to the customer SMTP server based on the archiving rule and to securely transmit the email to the customer SMTP server . Subsequent to the email transmission the cloud i.e. the nodes no longer has the data related to the event. The data is securely within the organization s domain in the customer SMTP server . The customer SMTP server can include functionality to automatically archive the data in the email in a customer managed log. Thus the archiving systems and methods provide dual benefits i.e. limiting data storage in the cloud while honoring data privacy requirements of the customer.

Referring to in an exemplary embodiment a flow diagram illustrates an archiving method . The archiving method can be implemented with the web transaction archiving system the cloud system the distributed security system etc. The archiving method is illustrated relative to functions associated with the nodes the end user and a recipient at company X with company X being the organization associated with the end user i.e. the data belongs to company X . To start a web transaction or any data transaction with a violation is presented to the archiving method . Specifically the archiving method processes outputs from a security processing engine e.g. such as described herein in the functionality of the processing node and the cloud node . The archiving method is presented with content extract which triggers the security event or violation original content security policy etc. The archiving method can be implemented based on a setting or policy of archiving content associated with violations. The cloud processing node detects a web transaction with a violation step . Note this violation is one in which archiving rules require the data to be stored with company X s domain and not in the cloud. The cloud processing node provides a message to customer SMTP server step .

In an exemplary embodiment the message is an email notification with Transport Layer Security TLS and data including a Web User ID of the user associated with the violation and various data about the violation. Exemplary data about the violation can include the original Web content triggering the violation Data Leakage Prevention DLP violation related data DLP engines and dictionaries hit etc. Specifically the email notification can include meta information of the web transaction such as URL user of the web transaction and in case USER is not present a location type of web transaction such as Social Networking Web mail Web post names of security engine hit and the like. The email notification can also include the extracted patterns which contribute towards the triggering of a security policy i.e. the rationale for flagging the transaction as a violation. Thus original content from Web transaction is attached to the email and if the content was in file being uploaded then that file is attached to the email. In an exemplary embodiment the processing node provides the message to customer SMTP server as described above. In another exemplary embodiment the processing node provides the message to the cloud SMTP server which in turn can provide the message to the customer SMTP server . Alternatively the cloud SMTP server can be integrated with the processing node .

The customer SMTP server or the cloud SMTP server can be configured to perform numerous steps. First the SMTP server can send a notification e.g. email text message URL etc. with the original web content and security violation to a recipient at company X step . For example the recipient could be someone in IT or some other person responsible for data security and control. The purpose of this notification can be to alert the company X of the violation for any reactive measures to be taken. Next cloud SMTP server sends a notification to the cloud logging node step . This notification can also be an email message with relevant data that is stored in the cloud i.e. the relevant data does not include the data stored with company X per the archiving rule. The relevant data is data used by the cloud system for proactive security i.e. data related to the violation that can be used for subsequent detections of violations. This data may be anonymized as well as excluding the data stored with company X per the archiving rule. The SMTP server can also send a notification to a company X log step . The company X log can reside on the cloud SMTP server or a separate device and the company X log includes a database of violations. Subsequently company X through this database company X IT can search for violations view and prepare reports of violations etc. providing an integrated view for proactive security measures.

Referring to in an exemplary embodiment a flowchart illustrates an archiving method . The archiving method can be implemented with the web transaction archiving system the cloud system the distributed security system etc. In general the method can be implemented by a computer such as the server described herein through instructions on a computer readable medium that are executed by the processor to cause the server perform the method . First the method has a security incident triggered step . Exemplary security incidents can include malware spyware viruses Trojans botnets email spam policy violations data leakage etc. The incident information is sent to a policy module step . Here an analysis is performed on the incident including checking if there is an archiving rule match step . Archiving rules can be defined per organization per violation type and can generally define what information is stored in the cloud and what information is securely stored with the organization s domain i.e. not within the cloud. If there is no archiving rule in place step the method is complete step . If there is an archiving rule in place step the method evaluates associated rules and actions based on the incident and sets actions based thereon step .

The method checks if there is a notification rule step . For example the method can include two aspects 1 is there a rule preventing archiving in the cloud and 2 is there a rule requiring archiving within an organization s domain. These two aspects can be mutually applied. For example if there is no notification rule step the method can end step with the cloud system simply not storing the data related to the incident. If there is a notification rule step the method can send the incident information and content to a notification module step . The notification module constructs a message with violation information web content web transaction ID auditor contact info user info TLS etc. and sends the message to an SMTP cluster step . The SMTP cluster can be the cloud SMTP node and generally includes equipment within the cloud to create notifications to the organization. The cloud can record the original transaction with the web transaction ID step . Here the cloud e.g. the processing node the cloud SMTP node etc. can log and store information related information while adhering to the rules e.g. storing incident information without underlying content . The SMTP cluster can send the received message to a notification Application Programming Interface API step . The notification module constructs an email based on the received message and sends out the email step . The notification module in the cloud records a new transaction based on a message ID step . This transaction in the cloud can be recorded using a violation company ID and violation user ID etc. Further the transaction can be send out for notification to the company users etc. The policy module and the notification module can include physical devices hardware software firmware etc. to perform the various functions in the method .

Referring to in an exemplary embodiment a network diagram illustrates a network depicting an exemplary operation of the archiving methods . The network includes an organization s domain a cloud system and an external network e.g. the Internet . As described herein the cloud system is an intermediate layer between the domain and the network and the cloud system is configured to implement the archiving systems and methods described herein in conjunction with the domain . The domain includes users the SMTP server and optionally the company X log . The cloud system includes the cloud processing node the cloud SMTP node and the cloud logging node . The external network can include a site . In operation a user can access the site through the cloud system specifically through the cloud processing node . If there is no violation the cloud processing node simply acts as a proxy between the site and the user . If there is a violation and an associated archiving rule the cloud processing node is configured to implement the methods with the devices to ensure no private data per the archiving rule belonging the organization is stored in the cloud system but rather stored within the domain through the devices . In another exemplary embodiment private data belonging to the organization could be stored in the cloud system but with an approach that ensures this private data is only reviewable or accessible by the organization. For example the devices could include encrypted storage for storing violation information. This encrypted storage could a use key per organization and encrypt the data using that key before storing the data. Thus while private data is stored in the cloud system it is only accessible with the organization s private key.

In an exemplary embodiment a cloud based security method includes monitoring data traffic between a user and an external network wherein monitoring is performed by a processing node including a first server in a cloud based system detecting a security incident if an archiving rule exists based on the security incident providing a notification to a second server within an organization s domain wherein the user is part of the organization and wherein the notification includes private data associated with the security incident based on the archiving rule and storing non private data in the cloud based system based on the archiving rule. In another exemplary embodiment a cloud based security system includes a plurality of servers forming a cloud system a processing module executed on the plurality of servers to detect security incidents in data communications between users and an external network a policy module executed on the plurality of servers to determine archiving rules associated with detected security incidents and a notification module executed on the plurality of servers to provide notification of private data associated with the detected security incidents based on the archiving rules for storage within an associated organization s domain. In yet another exemplary embodiment a processing node in a cloud based system includes a network interface communicatively coupled to a user and an external network a processor and memory storing computer executable instructions and in response to execution by the processor the computer executable instructions cause the processing node to perform steps of monitoring data traffic between the user and the external network detecting a security incident if an archiving rule exists based on the security incident providing a notification to a server within an organization s domain wherein the user is part of the organization and wherein the notification includes private data associated with the security incident based on the archiving rule and storing non private data based on the archiving rule.

Referring to in an exemplary embodiment a flow diagram illustrates an out of band notification system and method . The notification system includes an agent a central authority CA a cloud node CN a delegate and a mobile operating system OS notification cloud . Collectively the devices can be part of the distributed security system the cloud system the distributed security cloud the cloud system etc. The agent is a software program or app that is installed and operated on the mobile device . The agent can have various functionality such as authentication with the systems end user notification EUN and the like. Additionally the agent can be distributed or installed through mobile OS specific mechanisms such as Google Play Android Marketplace Apple App Store Windows Marketplace etc. The CA is a central authority CA server which can be used by the systems to track users. The CN can be the processing node in the system or the cloud node in the system .

The method includes installing the agent such as an app on the mobile device step . This can be done via the mobile OS specific mechanisms or the like. An administrator sends a preconfigured email to the mobile device step and the user executes a preconfigured link or the like in the email on the mobile device step . These steps configure the agent with the specific user and associated policy in the system . Once configured and operating the user can perform authentication such as with the agent through the cloud node step . The authentication can be anything known in the art e.g. User ID and password etc. The cloud node responds with a cookie if successful or error if not successful step . If the authentication is successful a device posture is sent to the CA to update the last User ID for the mobile device step . This is to create a User ID to IP binding as is described herein such that the system can know who is using the mobile device .

The method can include initiating a mobile app transaction step . If the mobile app transaction complies with relevant policy does not contain malware etc. the method would end here and the mobile app transaction would be successful. If the mobile app transaction is not successful e.g. blocked cautioned etc. the CN can send a notification request URL to the delegate step . The delegate sends the request to the mobile OS notification cloud step and the message can be delivered to the mobile device out of band step .

In the context of mobile security through the systems and with the mobile device operating the agent there are various deployment and use cases. For example there are three exemplary deployments where mobile security can be enabled namely 

With surrogate IP the user on the mobile device has to login once through a browser. With this verified credential a gateway e.g. the CA creates a mapping of the user to the IP. Note the CA can be the processing node or the authority node . App traffic that does not have ability to perform cloud authentication now can be authenticated using the newly built User to IP mapping. The cloud the systems can now enforce policy on App traffic as well. In this use case there is a need for a clean login and logout feature that helps setting up User to IP binding. Once the User to IP binding is established in the CA the system can enforce policy based thereon.

Again when App traffic is blocked by the cloud such as based on configured Admin policy the block message sent in response to the blocked request is not rendered by the apps. This is not user friendly and there is a need to send some notification to user on the mobile device regarding blocked transaction. The agent solves these issued by authentication the CN creating the User to IP mapping. As a part of the EUN feature the agent will register with Apple Google and Windows Push notification services i.e. the mobile OS notification cloud .

After successful authentication app will obtain user cookie and will register with the CA the respective tokens and related device information along with user s ID. At this point the cloud has mapping of user to device token. Now when EUN has to be sent to a specific user the systems cloud can look up the userdevice mapping and send appropriate notifications using the mobile OS notification cloud e.g. the Apple or Google push notification infrastructure.

With the Global proxy each request from a mobile device will carry credentials for user identification. The EUN functionality is needed as explained in previous section of surrogate IP. In this case the function of authentication will be limited to getting the user cookie and registering with the CA the device mappings to user. These mappings will be used to send notification as explained in previous section.

With Mobile VPN user credentials are embedded in an IPSec VPN tunnel. As with other two deployments the EUN functionality is needed. In this case the function of authentication is limited to getting the user cookie and registering the device mappings to user with the CA . These mappings will be used to send EUN notification as descripted above.

The delegate is a group of application servers located outside of customer cloud that can handle two major roles. One is to maintain CCM customer cloud mapping and the other is to handle the notification to servers provided by mobile OS platform such as Apple Push Notification Service APNS Google Cloud Messaging GCM for Android and Windows Push Notification Service WPNS for the mobile OS notification cloud . The CCM is persisted as data within delegate domain and will be initially populated by the delegate . More importantly the delegate will implement the following three HTTP commands as main application programming interfaces API namely 1 CCM lookup API 2 Update CCM entry update API 3 Request Notification API.

An App specific scheme can be used to pre configure primarily. A customer admin can generate a welcome email to their user and the user will execute the link in the mobile devices. The URL is designed to launch the secure agent app and will fill the passed information accordingly. The preconfigure URL can include the following information user name and cloud info.

The secure agent can be designed to work with the latest multi user enabled mobile devices such as Nexus 10 or Surface. To do this the secure agent maintains an authorized user list called AUL as encrypted data under the app folder with the same lifetime of app. This means if app is uninstalled the user needs to be authorized again.

Authentication takes places in two steps internally although it still looks as one from the end user s point of view. The first step is authorization through the gateway of cloud to acquire cookie and IP surrogate information just like a secure browser. For example through the systems . The second step is to send cookie device ID for each mobile OS notification such as device token for APNS GCM WPNS AUL and more collected device posture information and scanned app list to the CA for update purpose. Whoever logs in the secure agent always sends the whole AUL to the CA to ensure AUL is up to date in server side too. So the CA must differentiate its own data with client data and update its database accordingly. A log out from app will also clear current user from AUL.

The CA can maintain database information for each user and each device. For the user the CA can maintain information related to User ID login name password role access list department organization restrictions updates statistics etc. For the device the CA can maintain information such as device type OS version OS type device model applications MAC address etc. The CA can also maintain a list of apps installed on the device. For example device type codes could include 

The CA will maintain last User ID LUI per device to ensure that notification is delivered only to the associated device. LUI will be maintained in device info table by upon successful authentication.

The delegate will be responsible to maintain a connection to proprietary notification servers from mobile OS such as APNS GCM and WPNS and will handle the cloud systems direct or indirect notification URL API requests. The delegate also takes suppression information originated from the cloud systems and implement the logic accordingly.

Referring to in an exemplary embodiment a block diagram illustrates a user interface UI for the out of band notification system of . The UI includes a master login U with a username that determines a login mechanism per user configuration namely either i a Lightweight Directory Access Protocol LDAP or Active Directory AD password login UI or ii a Security Assertion Markup Language SAML password login UI using an external Identity Provider IDP .

For SAML in general when client tries to open any page it redirects to a URL e.g. gateway.zscaler.net and then user should fill username and if he she is a SAML user gateway does not ask for his password but redirects to a SAML server for authentication then the custom SAML page does the authentication per company s implementation. In the secure agent after SAML detection the login UI will be dismissed and username for company SAML implementation will be entered automatically with which was entered from the previous login UI.

For the creation of device to User mapping the CA performs the functions of 1 managing LLU last login user information after user authentication 2 updating device posture information of in a device info table 3 synchronizing with the CN with additional mobile notification related information in user configuration information and 4 updating an array of app ids on the device. The CA has an API with the secure agent e.g. HTTP request with POST with contents and names and value pairs. The API can include command type and cookie information to 1 update device posture command type 01 API will contain cookie and command type 01 along with all device information of device info table except app id array 2 update installed App Ids command type 02 and 3 a hash message authentication code HMAC for security.

The secure agent uses the HTTP API to talk to the CA . All calls are made over https with POST method. The full protocol is described as follows. There are two end points defined on the CA one for provisioning and registering a device and one for logging out and de registering a device and its user . Provisioning end point will be dev api add. Method POST and on registration the CA will add the device and return the device id in the same request message format. Logout end point will be dev api del. Method POST and on logout the CA will dis associate the device and the user. Further transactions from this device will not be associated to this user for logs or notification until user does a re provisioning. All messages will be in the form of multiple type length value triads. 2 byte Type 2 byte Length Variable length value . A protocol version type will identify the protocol the secure agent is talking with the CA . In future any major changes to the message protocol and the version number will could be incremented e.g. device type becomes string from integer . The CA can return error on a version mismatch. Any unknown type will be ignored and processing will move to next type as long as versions are same so that secure agent changes can be done independently without breaking the CA protocol.

Strings can be of variable length without the 0 character. Integers can be of 4 byte length multi byte data types can use little endian format and all the command types can be defined in a shared header file and generated when the CA is built and shared by the mobile code. For example to provision a device 

 PROTOCOL VERSION 4 0x1 COOKIE TYPE 13 abcXXXxxxXXXD TS TYPE 4 0 x55051451 DEV TYPE 4 0x1 DEV NAME 12 Joe s IPhone etc.

The CA can perform the following actions when it receives the message. First the CA will parse and validate the version and timestamp the timestamp is expected to be in UNIX time format so will be an integer type and no more than 5 minutes of skew is allowed from current time on the CA . Next a cookie is validated and userID is extracted from the cookie. The message is parsed and the device is updated or newly added. The notification key will be used to check if it is an device update or a new device provisioning if notification key exists the CA will update the device with any changes needed for e.g. os type udid lastuserid jailbreak etc. or if the notification key does not exist the CA will create a new device record for this userid. It is rare for the notification key to change for the same device .

After processing the message the CA will either send a Success OK message with the device id or a 500 Internal Error with an error code. The secure agent should re try provisioning on error. For de provisioning the CA will dis associate the given userid and deviceid. A flush is sent to the CN to forget the dis associated device s notification key.

The secure agent provisioning message will also be used to provision the iOS Global Proxy user password. The device id is the identity of the device primary key in the CA database and returned by the CA after provisioning of device. The device login is the login name that will be used for iOS Global Proxy authentication. It will be of the form . This will be returned from the CA after provisioning. For example 1000 cokecce.com 1000 is device ID. cokecce.com is domain of the user . The device password is the auto generated password for the device and is generated by the CA and returned after provisioning.

The CA will define an end point for changing the device password. dev api chg Input will be the device id old device password and the new device password requested. Cookie and valid timestamp are required in the message.

In login UI flow will be two phases. Master login UI will determine the authentication mechanisms. Then either password login UI just like safe browser or SAML login UI will show. A Home UI will have copy button both for display ID and PIN. A Notification UI is be placed the second place in tab over report UI. It will show notification list grouped by app. The CN will set app name as Other App in case app mapping to user agent is not discovered yet. A Detail UI will display the detail information of the latest message among selected app group. There is a more message button that leads to show the previous list of message. Upon selection among previous ones detail information will be refreshed with selected previous message. There is also email button to share notification detail through email.

A Report UI instead of showing stat from locally stored notification it will embed UI like web UI to show stat from server. Local database will have only cached one which can be also deleted by user in setting UI so that it s not that useful stat. In setting UI Clear local notification button will remain as in your document.

Again the delegate connects to the mobile OS notification cloud . The GCM Server will register android device and send registration ID to device. This registration ID will be forwarded by device to the CA . Maximum size of registration ID can be 4 KB. For example a registration ID will look like APA91bHun4MxP5egoKMwt2KZFBaFUH 1RYqx . . . To allow connectivity with GCM Organization needs to open ports and . GCM typically only uses but it sometimes uses and . The delegate is able to fire off HTTPS requests to the GCM server. It should have API key to communicate with GCM and registration id to send notifications to particular device through GCM. API key should be included in the header of POST requests.

Referring to in an exemplary embodiment a screen shot illustrates an exemplary out of band notification to a mobile device. Note the out of band notification provides the end user information as to what was blocked and why as well as contact information if the user believes that the block was in error.

The advent of mobile applications has burgeoned forth numerous challenges for network security systems such as the cloud systems and the distributed security cloud . The conventional proxy based traffic forwarding solutions fail to identify and tag traffic to appropriate users devices and mobile applications. Further in mobile platforms forwarding all device traffic using a proxy is difficult because of limited system access. Also enforcing app specific policies such as allow block bandwidth control etc. is difficult for network security systems as apps usually do not have unique user agents as compared to conventional browser based web surfing.

In various exemplary embodiments the secure and lightweight traffic forwarding systems and methods include an agent app installed on the mobile device . This agent app can be the same as the agent . The agent app works cooperatively with a secure cloud gateway such as the cloud systems the distributed security cloud the cloud system etc. to listen for Web DNS traffic to apply organizationally defined policies per user and per device on all outbound and inbound traffic such as for example to block malware block when request violates company security policy etc. The agent app on the mobile device opens local listening sockets and reroutes outgoing requests HTTP and User Datagram Protocol UDP to local listening sockets identify apps which originates those requests and then forward requests to secure cloud gateway with pertinent user and device information and application identification such as unique app name attached to request. Based on the configuration the secure cloud gateway applies policies and sends responses to the agent that transduces the response back to the client app. In case of a remote policy violation the agent app can receive an out of the bound end user notification as described herein. In case of a local policy violation e.g. 3G quota exceed the agent app can block the requests and show locally generated end user notifications. Such a traffic forwarding solution is scalable to the BYOD Bring your own device model of computing as well where only partial device or containerized traffic is forwarded to the secure web gateways.

Referring to in an exemplary embodiment a network diagram illustrates a secure and lightweight tunnel configuration between a mobile device and a cloud system . The cloud system can be any of the cloud systems the distributed security cloud the cloud system etc. and is illustrated with two exemplary cloud nodes . The secure and lightweight tunnel configuration is configured to provide 1 user enrollment and device authorization 2 device wide or containerized traffic forwarding Web DNS to the cloud system with appropriate user device and application level information 3 handling local policy configuration such as bandwidth control and 4 handling end user notifications locally generated for a local device policy violation or remotely generated via a push notification cloud.

The secure and lightweight tunnel configuration includes a device container or selected apps on the mobile device that communicates traffic to IP tables . The device can use the IP tables to communicate the traffic to the cloud system through a web proxy or DNS proxy . For example traffic can include port 80 443 traffic i.e. HTTP or HTTPS traffic and traffic can include port 53 traffic i.e. DNS traffic . The web proxy and the DNS proxy are processes or the like executed by the mobile device to realize the secure and lightweight tunnel configuration .

For the HTTP or HTTPS traffic the web proxy transmits the HTTP connection information e.g. connect to a destination along with app information associated with the HTTP or HTTPS traffic and digest information to the cloud node which can be a processing node or the like step . The cloud node in the distributed security system can forward the HTTP or HTTPS traffic if policy allows step and enable establishment of a connection with the mobile device step .

For the DNS traffic the DNS proxy can either establish or already have established a socket passing client certificate authority information and device identification on a first DNS request step . The DNS proxy transmits a DNS request from the DNS traffic with app information and a unique request identifier to a cloud node which is acting to provide DNS augmented security step . The cloud node queries a DNS server if policy allows step and returns the DNS response from the DNS server with the same unique request identifier step .

Referring to in an exemplary embodiment a screen diagram illustrates an exemplary UI for the secure and lightweight tunnel configuration . Here an administrator can configure policies for the mobile devices such as policies including without limitation allowing or blocking transactions from apps that falls in certain categories like Malware location information leak etc. configuring SSL traffic interception for mobile devices configuring out of bound end user notifications for mobile traffic configuring 3G monthly quota for mobile devices etc.

Referring to in an exemplary embodiment a flow diagram illustrates a policy configuration sequence system and method . The system is similar to the notification system and includes an admin a UI a central authority CA a cloud node CN and a mobile operating system OS notification cloud . Collectively the devices can be part of the distributed security system the cloud system the distributed security cloud the cloud system the cloud system etc.

The policy configuration sequence system and method illustrates how the admin interacts with the secure and lightweight tunnel configuration to set policy. Note the secure and lightweight tunnel configuration is described in with reference to the user and the mobile device . The secure and lightweight tunnel configuration is configured to provide a secure and lightweight tunnel for external communications from the mobile device through the cloud system .

The admin can define or update a configuration policy through the UI step . The configuration policy can be for a user or group of users. Once defined the UI fetches device identifiers from the CA for users impacted by the configuration policy step and sends updated policy notifications based on the configuration policy through the mobile OS notification cloud step . The mobile OS notification cloud is configured to push the updated policy notifications to the associated devices through the cloud node and the secure and lightweight tunnel configuration step .

Referring to in an exemplary embodiment a flow diagram illustrates a user registration and notification system and method with the secure and lightweight tunnel configuration . Note the user registration and notification system and method is similar to the notification system with the agent being replaced with a secure and lightweight tunnel configuration app . The user registration and notification system includes the secure and lightweight tunnel configuration app at the mobile device the central authority CA the delegate and the mobile operating system OS notification cloud .

Note the configuration app may be combined with the agent . The configuration app is a software program or app that is installed and operated on the mobile device . The configuration app can have various functionality such as authentication with the systems end user notification EUN and the like. Additionally the configuration app can be distributed or installed through mobile OS specific mechanisms such as Google Play Android Marketplace Apple App Store Windows Marketplace etc. The CA is a central authority CA server which can be used by the systems to track users. The CN can be the processing node in the system or the cloud node in the system .

The method includes installing the configuration app such as an app on the mobile device step . This can be done via the mobile OS specific mechanisms or the like. An administrator c a preconfigured email to the mobile device step and the user executes a preconfigured link or the like in the email on the mobile device step . These steps configure the configuration app with the specific user and associated policy in the system . Once configured and operating the user can perform authentication such as with the configuration app through the cloud system step . The authentication can be anything known in the art e.g. User ID and password etc. The cloud system responds with a cookie if successful or error if not successful step . If the authentication is successful a device posture is sent to the CA to update the last User ID for the mobile device step . This is to create a User ID to IP binding as is described herein such that the system can know who is using the mobile device .

The method can include initiating a mobile app transaction through the secure and lightweight tunnel configuration step . If the mobile app transaction complies with relevant policy does not contain malware etc. the method would end here and the mobile app transaction would be successful. If the mobile app transaction is not successful e.g. blocked cautioned etc. the cloud system can send a notification request URL to the delegate step . The delegate sends the request to the mobile OS notification cloud step and the message can be delivered to the mobile device out of band step .

Referring to in an exemplary embodiment a flowchart illustrates a traffic rerouting method for the secure and lightweight tunnel configuration . After registering the mobile device with the cloud system the agent or the configuration app configures traffic redirection policies to forward traffic from the mobile device to the cloud system . The agent or the configuration app opens a listening socket and reroutes desired traffic to that socket. The agent or the configuration app opens a TCP listening socket for web traffic and UDP listening socket for DNS traffic step . The agent or the configuration app configures policy to redirect outgoing Web and DNS traffic from all apps except the agent or the configuration app to the local TCP and UDP ports step .

For the traffic redirection two approaches can be used an IP tables firewall rules based approach or a tunnel interface approach. For the IP tables firewall rules based approach the agent or the configuration app will configure firewall rules to reroute desired traffic to the local listening socket TCP listening socket for web traffic and UDP listening socket for DNS traffic. For example for Web HTTP tunneling the agent or the configuration app configures a forwarding rule to reroute traffic destined to port 80 and 443 to 127.0.0.1 zz where zz is agent s listening TCP socket port. For DNS tunneling the agent or the configuration app configures a forwarding rule to reroute traffic destined to port 53 to 127.0.0.1 zz where zz is agent s listening UDP socket port.

Referring to in an exemplary embodiment a flowchart illustrates a tunnel interface approach for the traffic redirection in the traffic rerouting method . The agent or the configuration app will setup a new tunnel interface ex. tun0 and with a default route 0.0.0.0 set for that interface step . The agent or the configuration app reads an IP packet from the interface step . The agent or the configuration app swaps the source and destination IP addresses step . If the packet s source port is not equal to the agent s listening socket port step the agent or the configuration app replaces the packet s destination port with the listening socket port and a key value entry is added to a mapping table step . If the packet s source port is equal to the agent s listening socket port step the agent or the configuration app gets the value corresponding to the packet destination port in the mapping table and replaces the packet source port with this value step . Subsequent to the steps the agent or the configuration app computes IP and TCP UDP checksums and overwrite the original checksums in the packet step and writes the modified packet to the interface step . The steps can be performed for every packet read from the interface.

For example let x.x.x.x be an IP address of a tunnel interface and zz be a local listening socket port.

Referring to in an exemplary embodiment a flowchart illustrates a local policy method with the secure and lightweight tunnel configuration . The local policy method can be implemented via the agent or the configuration app operating at the mobile device . When any mobile device app tries to make Web or DNS requests the agent s TCP and UDP listening sockets will receive the corresponding Web and DNS requests step . On receiving a request the agent or the configuration app reads socket parameters i.e. local and remote IP port of socket and unique identifier UID of process to which the socket belongs and the agent or the configuration app then derives app package name from the app UID step . For non Web DNS traffic step the agent or the configuration app directly relays the request out to the Internet step . For Web DNS traffic step the agent or the configuration app first applies local policies step . For example a particular app is not allowed to browse due to a bandwidth quota limit. If the request is not allowed based on the local policies step then there is a local block traffic drop at the mobile device step . Otherwise the agent or the configuration app forwards the request to the secure cloud to apply remote policies step .

After a request passes local policies the agent or the configuration app forwards request to cloud to apply remote policies. The forwarding request step can be for a Web HTTP request or a DNS request. For a Web HTTP request the agent or the configuration app opens and outgoing socket to the secure cloud gateway for each accepted local socket. The agent or the configuration app writes HTTP Connect destination IP Port to the outgoing socket and passes app identification app unique package name app version OS version device model agent app version etc. in a User Agent header and passes device login credentials for digest authentication with the secure cloud gateway. For example a request could be Example request 

The secure cloud accepts the request if digest credentials are valid and establishes the tunnel. The agent or the configuration app on receiving success reads request data from an accepted client socket and writes that data to the outgoing socket. The secure cloud reads app request applies policies and sends response back. The agent or the configuration app reads response data from the tunnel and writes the data back to client socket.

For a DNS request the agent or the configuration app opens an outgoing TLS socket tunnel with a secure cloud DNS service passing client certificate device IS authentication information security level etc. The agent or the configuration app accepts DNS requests on the local listening socket. On receiving a DNS request it accepts request and reads DNS packet data and the makes a custom DNS request by assigning a unique ID to the original DNS request adding application information to the request app unique package name app version etc. . The agent adds a mapping table entry and then writes the custom request to the outgoing tunnel. The secure cloud reads request triggers per user app policies and sends a DNS response back with same req ID. If a block is trigger the secure cloud sends its own webserver IP else it resolves the DNS request and sends the actual IP. The agent reads the response from the outgoing tunnel gets an entry from mapping table corresponding to unique req ID and sends the DNS response back to client app. The agent also parses the DNS response and in case of block response shows locally generated notification as explained below.

Referring to in an exemplary embodiment mobile screen shots illustrate a locally triggered end user notification and a remotely triggered end user notification . If a request was blocked due to local policy such as due to bandwidth quota limit the agent shows locally generated notification such as illustrated for example in . If the request was blocked by the secure cloud it sends out of bound notification to mobile device i.e. it sends notification to delegate server which sends it to appropriate server APNS GCM which then sends Push notification to device such as illustrated in .

Referring to in an exemplary embodiment a mobile screen shot illustrates a locally generated DNS block notification. If a request was blocked the secure cloud resolves DNS request to the IP of its own web server block IP . The agent checks for response IP in the DNS response. If block IP is returned the agent generates local notification data and shows End user notification UI such as shown in .

It will be appreciated that some exemplary embodiments described herein may include one or more generic or specialized processors one or more processors such as microprocessors digital signal processors customized processors and field programmable gate arrays FPGAs and unique stored program instructions including both software and firmware that control the one or more processors to implement in conjunction with certain non processor circuits some most or all of the functions of the methods and or systems described herein. Alternatively some or all functions may be implemented by a state machine that has no stored program instructions or in one or more application specific integrated circuits ASICs in which each function or some combinations of certain of the functions are implemented as custom logic. Of course a combination of the aforementioned approaches may be used. Moreover some exemplary embodiments may be implemented as a non transitory computer readable storage medium having computer readable code stored thereon for programming a computer server appliance device etc. each of which may include a processor to perform methods as described and claimed herein. Examples of such computer readable storage mediums include but are not limited to a hard disk an optical storage device a magnetic storage device a ROM Read Only Memory a PROM Programmable Read Only Memory an EPROM Erasable Programmable Read Only Memory an EEPROM Electrically Erasable Programmable Read Only Memory Flash memory and the like. When stored in the non transitory computer readable medium software can include instructions executable by a processor that in response to such execution cause a processor or any other circuitry to perform a set of operations steps methods processes algorithms etc.

Although the present disclosure has been illustrated and described herein with reference to preferred embodiments and specific examples thereof it will be readily apparent to those of ordinary skill in the art that other embodiments and examples may perform similar functions and or achieve like results. All such equivalent embodiments and examples are within the spirit and scope of the present disclosure are contemplated thereby and are intended to be covered by the following claims.

