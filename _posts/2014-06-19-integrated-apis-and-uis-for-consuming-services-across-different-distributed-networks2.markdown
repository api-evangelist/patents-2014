---

title: Integrated APIs and UIs for consuming services across different distributed networks
abstract: User interface integration across multiple clouds is achieved by hosting UI extensions for different services in the same browser window. The UI extensions are initialized by a shell with any necessary security context for the corresponding cloud. The shell provides versioning so that the newest version of the UI is presented to users for all versions of a service. A connector in a local cloud provides translation between APIs across different clouds.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09560037&OS=09560037&RS=09560037
owner: Microsoft Technology Licensing, LLC
number: 09560037
owner_city: Redmond
owner_country: US
publication_date: 20140619
---
Cloud computing services in which users run applications on virtual machines hosted a distributed network of servers are available from a number of different service providers. The cloud computing services may be hosted on a public cloud such as a remote datacenter that host numerous tenant users. Cloud computing service may also be hosted on a private cloud such as an enterprise datacenter that is available to a limited pool of users associated with the enterprise. Each cloud computing service provides its own proprietary user interface UI and application programming interfaces API that a must be used to access services on a particular public or private cloud.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Embodiments of the invention provide the ability to connect different clouds to provide an integrated UI experience and integrated API experience. UI integration is achieved by hosting multiple UI extensions each serving UIs for different cloud services in the same browser window. Each UI extension is initialized with all necessary contextual information about the corresponding cloud service such as a list of subscriptions from that cloud and the necessary security tokens for accessing data in the cloud.

At the API level a special connector service proxies calls across clouds and enables exposing all services from all clouds via a single management service. Resources usage and subscriptions on one cloud service may be accessed directly by other cloud services via the connector without requiring user action.

A single sign in experience is possible federating identity providers. Different clouds can be connected so that subscriptions from a remote cloud can be imported in a local cloud. Alternatively resources on a remote cloud may be linked into an existing subscription on a local cloud. The UI and API integration allows users to see resources and services coming from different clouds as if they came from one integrated or cloud.

Firewall provides network security system for enterprise and controls incoming and outgoing network traffic. External terminal may connect to enterprise on premises network via Internet or any public or private network. Firewall allows terminal to access on premises datacenter if terminal provides the appropriate credentials and authentication. Enterprise users at terminals and may also access public datacenter via Internet .

On premises datacenter and public datacenter may provide cloud computing services to enterprise and other users. By freeing enterprise users from managing information technology IT infrastructure cloud computing provides virtually limitless compute storage and network resources at low cost while allowing services to scale on demand.

Servers may be traditional standalone computing devices and or they may be configured as individual blades in a rack of many server devices. Servers have an input output I O connector that manages communication with other database entities. One or more host processors on each server run a host operating system O S that supports multiple virtual machines VM . Each VM may run its own O S so that each VM O S on a server is different or the same or a mix of both. The VM O S s may be for example different versions of the same O S e.g. different VMs running different current and legacy versions of the Windows operating system . In addition or alternatively the VM O S s may be provided by different manufacturers e.g. some VMs running the Windows operating system while others VMs run the Linux operating system . Each VM may then run one or more applications App . Each server also includes storage e.g. hard disk drives HDD and memory e.g. RAM that can be accessed and used by the host processors and VMs.

Cloud computing is the delivery of computing capabilities as a service making access to IT resources like compute power networking and storage as available as water from a faucet. As with any utility you generally only pay for what you use with cloud computing. By tapping into cloud services you can harness the power of massive data centers without having to build manage or maintain costly complex IT building blocks. With the cloud much of the complexity of IT is abstracted away letting you focus just on the infrastructure data and application development that really matter to your business.

Datacenter provides pooled resources on which customers or tenants can dynamically provision and scale applications as needed without having to add more servers or additional networking. This allows tenants to obtain the computing resources they need without having to procure provision and manage infrastructure on a per application ad hoc basis. A cloud computing datacenter allows tenants to scale up or scale down resources dynamically to meet the current needs of their business. Additionally a datacenter operator can provide usage based services to tenants so that they pay for only the resources they use when they need to use them. For example a tenant may initially use one VM on server to run their applications. When demand increases the datacenter may activate additional VMs on the same server and or on a new server N as needed. These additional VMs can be deactivated if demand later drops.

Datacenter may offer guaranteed availability disaster recovery and back up services. For example the datacenter may designate one VM on server as the primary location for the tenant s application and may activate a second VM on the same or different server as a standby or back up in case the first VM or server fails. Database manager automatically shifts incoming user requests from the primary VM to the back up VM without requiring tenant intervention. Although datacenter is illustrated as a single location it will be understood that servers may be distributed to multiple locations across the globe to provide additional redundancy and disaster recovery capabilities.

The datacenter operator may offer different levels of cloud computing services to tenants. With an Infrastructure as a Service IaaS offering the lower levels of the IT stack are delivered as a service which frees up developers from much of the complexity of provisioning physical machines and configuring networks. With IaaS tenants can easily provision virtual machines in a highly scalable and available cloud environment develop and test solutions then deploy applications to production. With a Platform as a Service PaaS offering everything from network connectivity through the runtime is provided. PaaS makes development easy by providing additional support for application services and management of the operating system including updates. With PaaS tenants can focus on the business logic of application and quickly move applications from concept to launch. With a Software as a Service SaaS offering a single finished application or suite of applications can be delivered to customers through a web browser thereby eliminating their need to manage the underlying components of the IT stack including application code.

Referring again to an enterprise may use a public datacenter or public cloud computing services to take advantage of cost savings reduced management requirements or particular services offered. On the other hand the enterprise may also use an on premises datacenter or private cloud services to ensure data security or to use a proprietary application for example. It will be understood that an enterprise does not have to use an on premises datacenter to take advantage of private cloud services. Instead private cloud services may be provided by a datacenter that limits access to the enterprise. The use of both public cloud services and private cloud services by an enterprise is referred to generally as a hybrid cloud.

Different cloud computing services will require different APIs and different UIs. In a hybrid cloud situation where some services are provided by private cloud computing which runs on an on premises datacenter for example and other services are provided by a public cloud enterprises must manage these different APIs and UIs and ensure they are using the correct API and UI for each cloud. Current cloud providers enable their individual cloud services can be consumed but is not currently possible to consume services from multiple clouds via a single consistent user experience and single consistent API. Instead current services are only offered in their own host cloud. As a result when the same service is offered in different clouds it is not currently possible to extend existing private cloud or on premises services into a public cloud so that the same service UI and API can be used in an integrated way to access resources across different clouds.

Embodiments of the invention integrate services coming from different clouds and allow one service to configure itself to use another service. For example a database service hosted in a private cloud may be configured to backup into a public cloud while the enterprise user only has to access one interface. Prior systems could not achieve this but instead required users to open two UI applications and make different API calls to different clouds using two different security mechanisms.

The integration of multiple clouds has two parts an integrated UI and an integrated API. The example system in illustrates providing an integrated UI on a browser . However it will be understood that an integrated UI may be provided via other applications such as an integrated development environment IDE or other tool that access services or data on both clouds.

Browser loads and initializes a shell which loads a list of the user s cloud service subscriptions. The shell may be JavaScript that is loaded from a website for example. Based upon the subscriptions the shell can determine what assets and services the user is registered to use and where those are located in public cloud or private cloud . For example the user may be registered to manage VMs websites and or SQL database services. Some of these services may be served from the public cloud and other served locally from private cloud .

Shell creates frames in the browser and points the frames to different websites that serves extensions for the different services to which the user is subscribed. Frames e.g. HTML iframe may be used in the browser to provide isolation between the cloud services. Public cloud extension serves a UI from a website for the public cloud and private cloud extension services a UI from a website for the private cloud . Each frame receives its respective information and shell coordinates the frames into a unified UI that is an assembly of the different extensions. Each extension is loaded from a different cloud and is adapted to enable a specific security context such as identification and authentication for that cloud. Shell functions as a basic operating system that expects a certain implementation or format for the cloud extensions. As long as a compliant extension can be created then shell can create a frame for any cloud. For example different extensions may be created to access cloud services running on Microsoft Azure Windows Azure Pack WAP Amazon Web Services AWS Google Cloud Platform etc. Shell provides for the converging of UIs for multiple different homogenous and or heterogeneous cloud services. The UI allows abstracting the cloud boundaries from the user to such a degree where user can be offered a mixed plan where services or service regions are offered across cloud boundaries without user even noticing visually the cloud boundary.

Shell provides a cloud management user experience can natively and seamlessly expand across cloud boundaries. Public cloud and private cloud may offer both the same and different services. Shell loads native UI extensions for managing individual services across cloud boundaries. The appropriate version for managing each cloud service is loaded by the extension. For example a newer version of a VM management service may be loaded for public cloud compared to the version of VM management service loaded for private cloud .

Although illustrates a system using a public and private cloud it will be understood that the present invention can be used with any combination of cloud services. For example browser may provide a UI to two private clouds or to two public clouds. Shell loads the appropriate extensions for the user s registered clouds services. In other embodiments more than two cloud services may be accessed using browser . The update rates for each cloud will vary so that some clouds will have a more recent version of a service than other clouds. Shell may be updated quickly using the extensions so that when a UI changes in one cloud the newest version of the UI can be served to users by shell .

Service agnostic portions of shell may load some parts from different clouds. Shell identifies which cloud has the latest version of the UI and loads that newest version. Along with the latest version the shell loads a sandbox that can load older versions of the UI. The sandbox makes the older version appear to the shell as if it is the newest version. This may be accomplished by performing appropriate API translations for the changes to the UI. While the older version of the API is used with a cloud having the old version the shell loads the newer version of the service UIs for the user. As a result users may be presented with an updated UI version even when navigating to older versions of the service on other clouds.

The theme presented on browser may be standardized across different clouds. For example when a newer version of a UI is loaded from public cloud browser may still use a local theme associated with private cloud even if that theme was created for an older version of the service. This allows styling and customizations for one cloud to be presented to the user for all clouds.

In other embodiments when the same services are offered both the public cloud and private cloud browser may use a single UI extension to manage resources across both clouds. This single UI extension may be used even when the deployed services are different versions.

Browser manages user identity so that using a log on for private cloud allows the user to also access resources on public cloud and across all cloud boundaries.

Each cloud has a portal that accessed by the extension loaded on browser . Public cloud portal provides an API framework appropriate for interfacing public cloud extension to public cloud across Internet . Firewall provides security for public cloud . Extension is configured to traverse firewall as needed to access public cloud . Private cloud portal provides an API framework appropriate for interfacing private cloud extension to private cloud across network . If browser and private cloud are in the same location then network may be a LAN or enterprise network. If browser is remote from private cloud then network may be the Internet. Firewall provides security for private cloud such as when browser accesses services over the Internet or other public network.

Portals and provide access to the resource manager usage manager and subscription manager on each cloud. The resource manager coordinates the resource providers which may provide instances of VM website and database resources for example. The usage manager monitors resource consumption for billing. The subscription manager maintains tenant subscriptions including connectors connected services and quotas.

Clouds and may use role based access control RBAC to control what administrators and tenants can do and to restrict access to authorized users based on the roles of individual users within an enterprise. Browser connects to identity authentication manager or as appropriate to verify users and to determine what access they should be provided on each cloud. The identity authentication managers can also communicate with each other. This allows users to access one portal then look at both clouds. Identity authentication manager may use Azure Active Directory in one embodiment as a comprehensive identity and access management solution for public cloud . Identity authentication manager in private cloud may be a Security Token Service STS for example that acts as a security gateway to authenticate users and to issue security tokens carrying claims that describe the user.

Like the integrated UI the integrated API provides a common interface for the clouds. This is accomplished for example using a connector resource provider in private cloud which is responsible for connecting to remote public cloud . Connector resource provider translates the native API for cloud so that it is compatible with the resource provider contract in the other cloud. The connector resource provider has the identical interface as the other resource providers on private cloud but also includes a link to the remote cloud .

Connector resource provider translates the resource manager API on private cloud to the resource manager API used on public cloud . Connector resource provider also translates the usage API on private cloud to the usage API on public cloud . This allows for example resource consumption on the remote cloud to be used at the private cloud for aggregated billing. Connector resource provider also translates the subscription management API on private cloud to the subscription management API on public cloud . This allows the private cloud to configure a quota that is enforced in public cloud via the connector resource provider .

With the connector when a user in private cloud hits the local API endpoint they will see a list of resources available from both private cloud and public cloud as if the resources were registered locally even though physically the resources are located on a remote cloud.

For example the user may have a database service on the private cloud but the public cloud may provide additional database services. Using the connector the user will have access to those additional database services on the private cloud as if they were present locally.

Using this special connector service at the API level connector proxies calls across clouds and enables exposing all services from all clouds via a single management service.

Connector federates identity across clouds and to provide a single sign on procedure for users. Each cloud may use a different identify provider to connect to the API. Connector allows the user to log in to the private cloud and to consume services from public cloud without having to log in again on public cloud . This may be accomplished in one embodiment by synchronizing identity and authentication directories and .

In one embodiment there are managed and unmanaged options for offering cross cloud connectivity. Each option establishes a relationship between different clouds so that the user can access resources on both clouds. The user has a subscription to both clouds or needs services from both clouds and needs to manage that connection.

For unmanaged access an end user is provided with un scoped ungoverned access to a subscription in a remote cloud from a local cloud s portal. The billing relationship with the remote cloud provider is owned by the end user. The remote subscription s services quotas and resources are not tied to the local subscription. The end user is privy to a subscription from the local cloud provider and a separate subscription from the remote cloud provider. The end user registers the remote subscription with the local cloud provider so that services in the remote cloud can be accessed.

For managed access the end user is provided with scoped governed access to a subscription in a remote cloud from the local cloud s portal. The billing relationship with the remote cloud is handled by the local cloud provider and the billing relationship with the provider is handled by the end user. The remote subscription s services quotas and resources are mounted or appended with the local subscription s services quotas or resources. The end user is privy only to one subscription which is from the local cloud provider.

An admin API is used to register a remote public cloud with local private cloud . The admin API is used to make private cloud aware of public cloud so that private cloud can bring in external resources from public cloud . Admin API allows the user to link existing subscriptions on private cloud to services that are available on public cloud . Alternatively private cloud portal is a tenant API that may be used to import existing subscriptions from public cloud to provide access to services available on private cloud . The imported subscriptions are registered with private cloud so that the user can access services from both clouds. This allows users to bring their own existing public cloud subscriptions to a private cloud account. The subscriptions are registered locally to allow the user to access the remote services. Usage managers on public cloud can then associate resource use from the private cloud with a particular subscription for billing.

For simplification the examples described above use only two cloud services a local or private cloud and a remote or public cloud. However it will be understood that there is no limit on how many different clouds can be connected this way. The connector or multiple instances of the connector resource provider may be used to link one cloud service to one or more additional cloud services.

Users access the cloud services using a browser . In different embodiments browser may be running on a machine that is remote from all of the cloud services or that is co located with one or more of the services such as an enterprise machine co located with a private cloud. Browser loads shell which loads a list of the user s cloud service subscriptions. Based upon the subscriptions the shell can determine what assets and services the user is registered for and where those are located in cloud services . Shell then loads native UI extensions corresponding to cloud services respectively. Shell and cloud extensions may be loaded for example from a locally hosted web page or from a remote web page hosted by one of the cloud services . Each of the cloud extensions are adapted to connect to a cloud portal for the corresponding cloud service .

Shell creates frames in browser and points the frames to cloud extensions for the cloud services to which the user is subscribed. Each frame receives its respective information and shell coordinates the frames into a unified UI for the user. The extension for each cloud is adapted to enable a specific security context for that cloud.

Cloud portals provide an API framework appropriate for interfacing their respective cloud extension and cloud service across network which may be an enterprise LAN or public Internet depending upon the location of the machine running browser and each cloud service . Portals provide access to resources usage and subscriptions on each cloud service.

Connector provides an integrated API that translates the native API for each cloud service so that it is compatible with the resource provider contract in other cloud services. Connector translates the resource manager API on cloud service to the resource manager usage and subscription management APIs used on cloud services and . This allows the user to see a list of subscribed resources that are available across all of the cloud services . Those resources appear to the user as if they were registered locally on cloud service even though the resources are physically located on a remote cloud .

Connector or multiple instances of connector may be used to link one cloud service to multiple other cloud services. In other embodiments a connector on a remote cloud service may be used to link services and resources between remote cloud services and . This would allow the resources to which the user is subscribed on cloud service to directly access related resources on cloud service without requiring action from cloud service which would be a third party to that transaction.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

