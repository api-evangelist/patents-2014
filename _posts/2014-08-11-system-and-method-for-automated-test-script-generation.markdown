---

title: System and method for automated test script generation
abstract: A system and method for automatically generating a test script includes receiving a test case flow that includes steps, nodes, and sub-nodes, wherein each sub-node is associated with a use-case based application programming interface (UC-API), for each sub-node of the test case flow retrieving a template array corresponding to the UC-API associated with the sub-node, generating a test array wherein for each node in a step, generating a node array wherein the elements of each node array includes the sub-node arrays associated with the sub-nodes of the node, for each step, generating a step array wherein the elements of each step array include references to the node arrays of the nodes in the step, and populating the test array wherein each element of the test array includes one of the step arrays.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021440&OS=09021440&RS=09021440
owner: PMC-Sierra US, Inc.
number: 09021440
owner_city: Sunnyvale
owner_country: US
publication_date: 20140811
---
The present disclosure relates to systems and methods for automated test script generation for use in an automated product testing.

Development of software and hardware products includes a development stage and a testing life cycle. The testing life cycle includes writing a test plan designing test cases to implement the test plan and executing the test cases on a target product to ensure the target product is of suitable quality. A target product may be hardware software or a combination of hardware and software. Because test case execution is a complex time consuming and resource intensive process test automation utilizing test automation frameworks TAF may be utilized to reduce the resources utilized in executing test cases. TAFs refer to the use of software and hardware to execute a test case on a target product.

Test automation includes a TAF that executes a test scripts. A test script is a programmed code that automates the test case by calling subroutines or application programming interfaces APIs exported by the TAF. The TAF provides the backend support for executing test script including the infrastructure for creating processes and tracking and controlling remote test setups.

A test case may include complex logic in which multiple processes tools and systems are utilized. The test case may include parallel and sequential processes with each process performing one or more testing functions. Generating a test script that when executed by the TAF will perform the test case includes developing reviewing and debugging the test script code which may be time intensive.

Test script code for test case automation is desirably generated by a script developer who has expertise in the target product under test including the user interface of the target product as well as expertise in test automation in a TAF environment including developing test plans and test cases utilized for the testing and programming test scripts in the scripting language utilized for testing such as for example Perl Python shell C C or Java. In practice finding a single person with the desired level of expertise in the target product and test automation in a TAF environment may be difficult. For example a product engineer may have sufficient expertise in the target product but may lack sufficient expertise in test case automation. Alternatively a software engineer may have sufficient expertise in test case automation but may lack sufficient expertise in the target product to adequately design test plans and test cases.

One aspect provides a computer implemented method of automatically generating a test script for testing a target system comprising receiving a test case flow that includes one or more steps each step including one or more nodes each node including one or more sub nodes wherein the steps are to be executed sequentially the nodes of each step are to be executed in parallel and the sub nodes of each node are to be executed sequentially wherein each sub node is associated with a use case based application programming interface UC API and wherein each step node and sub node includes a unique identifier for each sub node of the test case flow retrieving a template array corresponding to the UC API associated with the sub node and replacing a first placeholder in the template with the unique identifier of the sub node to create a unique sub node array generating a test array utilizing the test case flow wherein generating comprises for each node in a step generating a node array wherein the elements of each node array includes the sub node arrays associated with the sub nodes of the node and wherein the sub node arrays are sorted according to an order of the sub nodes in the node of the test case flow for each step generating a step array wherein the elements of each step array include references to the node arrays of the nodes in the step and populating the test array wherein each element of the test array includes one of the step arrays.

The computer implemented method may further comprise testing the target system utilizing the test array wherein testing comprises parsing the test array for step arrays for each step array parsing the step array for node array references forking a node process for each node array reference of the step array for each node process in parallel dereferencing the node array for the sub node arrays associated with the sub nodes for each sub node array executing the UC API associated with the sub node such that the sub nodes of the node process are executed sequentially according to the order of the sub nodes in the graphical representation of the node and wherein the step arrays are parsed sequentially according to the order of the associated steps.

The UC APIs associated with the sub node arrays may not rely on other UC APIs such that there is no data flow between UC APIs.

The computer implemented method may further comprise automatically generating a document including a text description of the test case flow wherein the document includes a description of the UC API associated with each sub node of the test case flow and wherein the document includes a table associated with each step wherein each table includes a column associated with each node of the step and each column includes a row associated with each sub node of the node.

The test case flow may be generated using a graphical user interface GUI such the graphical representations of the steps of the test case flow are arranged vertically to indicate that steps are performed sequentially and the graphical representations of the nodes associated with a step are arranged horizontally within the graphical representation of the step to indicate that the nodes are performed in parallel.

Selecting a graphical representation of a node may cause a node define window to be displayed wherein the node define window displays graphical representations of the sub nodes associated with the node.

A graphical representation of a sub node may include a drop down list for selecting an UC API associated with the sub node from a plurality of UC APIs.

The test case flow may be received from metadata stored in a memory wherein the metadata includes the name of the test case flow the number of steps in the test case flow the number of nodes in each step the number of sub nodes in each node the name of the UC API associated with each sub node and selected arguments for each UC API associated with each sub node.

A graphical representation of each sub node may include selected arguments for the associated UC API wherein the computer implemented method further comprises replacing an argument placeholder of the template of a sub node array with a selected argument from the graphical representation of the sub node associated with the sub node array.

Another aspect provides A system for testing a target product the system comprising a test script generator comprising a test script memory storing a plurality of templates each template corresponding to one of a plurality of use case based application programming interfaces UC APIs a test script input for receiving a test case flow that includes one or more steps each step including one or more nodes each node including one or more sub nodes wherein the steps are to be executed sequentially the nodes of each step are to be executed in parallel and the sub nodes of each node are to be executed sequentially wherein each sub node is associated with a UC API stored in the memory and wherein each step node and sub node includes a unique identifier and a test script processor in communication with the memory and the input the test script processor configured to for each sub node of the test case flow retrieve a template corresponding to the UC API associated with the sub node and replace a first placeholder in the template with the unique identifier of the sub node to create a sub node template generate a test array utilizing the test case flow wherein generating comprises for each node in a step generate a node array wherein the elements of each node array include the sub node arrays associated with the sub nodes of the node and wherein the sub node arrays are sorted according to an order of the sub nodes in the node of the graphical representation for each step generate a step array wherein the elements of each step array include references to the node arrays of the nodes in the step and populate the test array such that each element of the test array includes one of the step arrays.

The system may further comprise a test automation framework comprising a framework processor in communication with the test script generator the processor configured to parse the test array for step arrays for each step array parse the step array for node array references fork a node process for each node array reference of the step array for each node process in parallel dereference the node array for sub node arrays associated with the sub nodes of the node for each sub node array execute the UC API associated with the sub node array such that the sub nodes of the node process are executed sequentially according to the order of the sub nodes in the test case flow of the node and wherein the step arrays are parsed sequentially according to the order of the associated steps.

The UC APIs associated with the sub node arrays may not rely on other UC APIs such that there is no data flow between UC APIs.

The test script processor may be configured to automatically generate a document including a text description of the test case flow wherein the document includes a description of each UC API associated with each sub node of the test case flow and wherein the document includes a table associated with each step wherein each table includes a column associated with each node of the step and each column includes a row associated with each sub node of the node.

The test case flow may be generated using a graphical user interface GUI such the graphical representations of the steps of the test case flow are arranged vertically to indicate that steps are performed sequentially and the graphical representations of the nodes associated with a step are arranged horizontally within the graphical representation of the step to indicate that the nodes are performed in parallel.

Selecting a graphical representation of a node may cause a node define window to be displayed wherein the node define window displays graphical representations of the sub nodes associated with the node.

A graphical representation of a sub node may include a drop down list for selecting an UC API associated with the sub node from a plurality of UC APIs.

The test case flow may be received from metadata stored in the test script memory wherein the metadata includes the name of the test case flow the number of steps in the test case flow the number of nodes in each step the number of sub nodes in each node the name of the UC API associated with each sub node and selected arguments for each UC API associated with each sub node.

A graphical representation of each sub node may include selected arguments for the associated UC API and wherein the test script processor is configured to replace a parameter placeholder of the template of a sub node array with a selected argument from the graphical representation of the sub node associated with the sub node array.

The following describes a system and method for automated test script generation. The system and method disclosed herein enable a user to perform test case automation without requiring the user to code the test scripts utilized by a test automation framework to perform the testing of a target product.

For simplicity and clarity of illustration reference numerals may be repeated among the figures to indicate corresponding or analogous elements. Numerous details are set forth to provide an understanding of the examples described herein. The examples may be practiced without these details. In other instances well known methods procedures and components are not described in detail to avoid obscuring the examples described. The description is not to be considered as limited to the scope of the examples described herein.

The TAF includes a TAF processor and a TAF memory that includes a library of application programming interfaces APIs utilities and tools and other libraries .

In test automation the APIs provide one or more functional commands utilized in testing a target product . The tools and utilities and the other libraries of the TAF are databases stored in the TAF memory and include tools utilities and other libraries that may be utilized in communicating with the target product and executing a test script .

Tools that may be stored in the tools and utilities database may include for example a utility utilized by the TAF to configure modify and test various RAID volumes and features of a RAID Adapter card an input output tool used to run various workloads on RAID Volumes and test data integrity of RAID volumes and a volume performance testing tool utilized to test performance characteristics of volumes such as for example input output operations per second and central processing unity CPU utilization at various work loads.

The test script generator includes a test script generator processor and a test script generator memory that includes a use case based application programming interfaces UC APIs database a templates database an arguments database a metadata database an operating system of the test script generator and a descriptions database . The test script generator may also include a display and an input that together with the operating system provide a graphical user interface GUI on which a user may create a test case flow. As discussed in more detail below a test case flow is a graphical representation of the testing to be performed on the target product and is utilized by the test script generator as the basis for automatically generating the test script . The input may be for example a mouse a keyboard a touch sensitive overlay that overlies the display to provide a touchscreen display or other suitable input device.

The UC API database includes a list of UC APIs that are included in the test script generator . UC APIs map to one or more of the APIs of the TAF and are self sufficient functions that do not rely on the output of other UC APIs.

The templates database includes a template array for each UC API in the UC API database that is utilized by the test script generator processor to generate the test script utilized by the TAF to perform the function associated with the UC API. Each template array includes the name of the API of the TAF that the associated UC API maps to as well as an array reference including the hard coded arguments for the API and placeholders for the user defined arguments. UC APIs may be mapped to more than one API of the TAF in which case the first element of the associated template array includes name of the first API mapped to the second element includes an array reference to the arguments of the first API the third element of the includes the name of the second API that the associated UC API maps to the fourth element include array reference to the arguments of the second first API that the associated UC API maps to and so forth for additional APIs that the associated UC API maps to. Utilizing UC APIs enables a user to create and implement a test case without knowledge of programming APIs .

In an example illustrating the template arrays in the template database a UC API named CreateRaid5VolumeUsingReadyStateDrives maps to a single API of the TAF CreateRaidVolume . In this example CreateRaid5VolumeUsingReadyStateDrives is associated the following template array stored in the template database 

In this example the name of the array is CreateRaid5UsingReadyStateDrives  1 wherein the placeholder 1 is provided such that when the template array is utilized to create a test script the 1 placeholder is replaced with a unique identifier to create a unique array name even if a particular array is utilized more than once within the test script . The first element of the array is CreateRaidVolume which is the name of the API of TAF that is called by the CreateRaid5VolumeUsingReadyStateDrives UC API. The second element is an arguments array that includes the arguments accepted by the CreateRaidVolume API. In the example shown the zeroth argument which corresponds to NumberOfDrivesToUse and third argument which corresponds to a Size of Raid Volume argument are user definable and are represented by placeholders 0 and 1 respectively. The first and second elements are hard coded values based on the function performed by the UC API. In the present example the first argument which corresponds to State of Drives to Use is hard coded to ReadyState and the second argument which corresponds to Raid Level of Volume to Create is hard coded to Raid5 .

In an example that illustrates the difference between UC APIs of the test script generator and APIs of the TAF a test comprises four functions Function 1 is creating a Raid 5 Volume using 5 drives in Ready state Function 2 is creating a Raid 10 Volume using 2 drives in Ready state Function 3 is delete the Volume created in Step 2 and Function 4 is running 10 using 10 Meter tool to the volume created in Function 1.

In order to perform the test utilizing convention APIs alone a person familiar with test automation coding would have to manually write the code including calls to intermediary APIs . An example of the coding that may be generated to perform the example test is 

In the above code SelectDrives CheckVolumeExists SelectRaid and CreateIOConfigFile are intermediary APIs that are be utilized to generate values that are passed to the CreateRaidVolume DeleteVolume and RunIOMeter APIs in order to perform the four functions of the example test. These intermediary APIs are not intuitive to a person who is not familiar with test automation coding making the generation of the above code difficult.

Performing the above example testing utilizing the UC APIs of the test script generator TAF can be performed utilizing for example only three UC APIs without the need for intermediary UC APIs. The UC APIs found in the UC API Database together with the user definable arguments that may be utilized to perform the four functions of the above example test are 

In the above example the CreateRaidVolume UC API in is configured to receive the following arguments NumDrives DriveState Raid Name. The CreateRaidVolume UC API includes a call to the SelectDrives API and passes the arguments NumDrives and DriveState. The value returned from the called SelectDrive API is a list of drive identifiers. The returned list of driver identifiers is utilized by CreateRaidVolume UC API to create the Raid Volume.

In example code above a user need not understand how to utilize the SelectDrives API of the TAF because the CreateRaidVolume UC API is configured to create the raid volume without the need for the user to include intermediately APIs.

An example of the test script that is generated including sub node arrays for this example test case using Perl may be as follows 

Although the above examples are coded utilizing Perl other programming languages may be utilized such as for example Python shell C C and Java.

The arguments database includes for each UC API stored in the UC API database the arguments associated with the UC API that are user definable. When a user is creating a test case flow the arguments database is utilized to determine which arguments the user is prompted to enter when a particular UC API is included in the test case flow. Arguments that are user definable for a UC API correspond to the arguments in the associated template array that include placeholders.

The metadata database stores metadata associated with a test case flow. Metadata for a test case flow that is stored in the metadata database may include for example the name of the test the number of steps the number of nodes in each step the number of sub nodes in each node the UC API and the user defined arguments associated with each sub node. The test case flow metadata stored in the metadata database may be utilized by the test script generator processor to for example recreate a previously created test case flow to be used in recreating the test script for that test case or to serve as the basis for a user to create a new test case flow.

The description database includes a template plain text description for each of the UC APIs that includes a description of the functionality of the associated UC API the hard coded arguments of the associated UC API and placeholders for the user defined arguments of the associated UC API. The description database is utilized to create the test description document that is discussed in more detail below.

As discussed above the display the input and the operating system may provide a GUI for the test script generator . The GUI enables a user to graphically create a test case flow comprised of steps nodes and sub nodes. The test case flow is utilized by the test case generator processor to generate the test script .

Each step of a test case flow comprises one or more nodes. Each node includes one or more sub nodes. Steps within a test case flow are performed sequentially such that all nodes in a step are performed before the nodes of subsequent steps in the test case flow are performed. All nodes within a step of the test case flow are performed in parallel. Sub nodes within a node of the test case flow are performed sequentially. Graphically organizing the test case flow into steps nodes and sub nodes facilitates scheduling the various functions to be performed during the desired testing of the target product .

Each of the steps nodes and sub nodes within a test case flow are uniquely identified. For example each step may be identified as S each node may be identified as SN and each sub node may be identified as SNSN where x is an integers that represents the location of the step within the test case flow y is an integer that represents the location of the node within a particular step and z is an integer that represents the location of the sub node within a particular node. In this example SNSNidentifies the fifth sub node in the second node of the third step in the test case flow. Each sub node within the test case flow is associated with exactly one UC API stored in the UC API database of the test case generator .

Steps Sand Sare graphically represented by outer step rectangles . In the test case flow shown in three nodes SN SN and SN are included in step Sand two nodes SNand SN are included in step S. Nodes are graphically represented by inner node rectangles within the outer step rectangles of the associated step.

In the example shown steps Sand Sare vertically arranged to indicate that steps Sand Sare executed sequentially whereas the nodes SN SN and SNwithin a step Sand nodes SNand SNwithin step Sare arranged horizontally to indicate that the nodes of a step are executed in parallel. Alternatively steps may be arranged horizontally and nodes within each step arranged vertically to indicate sequential and parallel execution.

Sub nodes within a node may be configured utilizing a node define window associated with a node. shows an example of a node define window associated with node SN. The GUI may be configured such that the inner node rectangles may be selectable to cause a node define window to be displayed in which sub nodes of the selected node may be created. The inner node rectangles may be for example active hyperlinks such that a node define window associated with a node is displayed when the inner node rectangle for that node is selected via the input for example by performing a mouse click or by touching a touchscreen at a location associated with the inner node rectangle .

The node define window in includes three sub nodes SNSN SNSN and SNSN. Each sub node SNSN SNSN and SNSNis graphically represented by a combo box that is utilized to select a UC API from the UC API database that is associated with the sub node. For example the combo boxes may comprise scrollable drop down lists of the available UC APIs stored the UC API database . In the example shown in a CreateVol UC API is associated with sub node SNSN a DeleteVol UC API is associated with sub node SNSN and a Reboot UC API is associated with sub node SNSN.

A displayable arguments window may be associated each sub node to enable user definable arguments for the UC API associated with the sub node to be input. shows an example of an arguments window associated with the CreateVol UC API associated with the sub node SNSNshown in . The node define window may include a configure button associated with each combo box that when selected causes the associated arguments window to be displayed. Displaying the arguments window comprises determining the user defined arguments for the associated UC API utilizing the arguments database . A query field is displayed in the arguments window for each user defined argument.

The arguments window shown in includes two query fields for two user defined arguments that are associated with the CreateVol UC API. One or more of the query fields may comprise for example a scrollable drop down list that includes all possible values for the argument associated with the query field . One or more of the query fields may comprise for example a text box in which a user may type in a value for the argument associated with the query field . The number and type of user definable arguments and thus the query boxes that are displayed in the arguments window may vary for the different UC APIs stored in the UC API database .

Once the test case flow has been created the metadata associated with the test case flow may be stored in the metadata database . Storage of metadata may be initiated by for example receipt at the test script generator processor of a user input via the GUI. Metadata associated with the test case flow that is stored in the metadata database may include for example the name of the test case flow the number steps the number of nodes in each step the number of sub nodes in each node the UC API associated with each sub node and the user defined arguments for each sub node.

The test case flow whether created by the user utilizing the GUI or created based on previously saved metadata is utilized by the test script generator to automatically generate the test script . Generation of the test script may be initiated for example by receipt at the test script generator processor of a user input via the GUI.

A test script file is generated at for storing the automatically created test script that will be output by the test script generator .

At a unique sub node array is generated for each sub node of the test case flow. The sub node array for each sub node is generated utilizing the template array associated with the UC API of that sub node. Each sub node array includes a unique name to distinguish the arrays of different sub nodes that are associated with the same UC API. For example the sub nodes may be named by the following syntax   where is the name of the UC API associated with the sub node and is the unique identifier associated with the sub node. In the example illustrated in the associated sub node array for sub node SNSNis CreateVol SNSN. The first element of the sub node array is the name of the first API of the TAF to which the respective UC API of the sub node maps to. The second element of the sub node array is an arguments array reference that contains the arguments that are passed to the API including hard coded and user defined arguments. Additional APIs that the UC API maps to and associated arguments if any are included as subsequent elements of the sub node array.

After the sub node arrays for all of the sub nodes of the test case flow are created at an Test array is created at . As discussed in more detail below the Test array includes all of the sub node arrays created at with sub node arrays organized such that when the Test array is sent to the TAF the steps are executed sequentially the nodes of a step are executed in parallel and the sub nodes of a node are executed sequentially.

At the Test array is saved into the test script file which is output by the test script generator as the test script shown in . The test script file may then be passed to the TAF where it is utilized by for example the TAF processor to perform testing on the target product .

Referring to a flow chart illustrating a method of creating an Test array is shown. The method may be carried out by for example the test script generator processor . At the number of steps in the test case flow is determined and the value of a variable StepMax is set to the determined number of steps. At the value of a variable StepID is set to one. At the number of nodes included in step is determined and the value of a variable NodeNum is set to the determined number of nodes. At a variable NodeID is set to one.

At a node array StepNode is created for node of step . For example node array Step1Node1 is created for the first node of the first step of the test case flow. The elements of the StepNode array are the sub node arrays associated with node . The sub node arrays are included in the node array in the order that the sub nodes appear in the test case flow. For example the array created for the node SNof the example shown in would be Step1Node1 CreateVol SNSN DeleteVol SNSN Reboot SNSN . The StepNode node array is saved to the test script file.

At the value of the variable NodeID is increased by one. At a determination is made whether NodeID is greater than NodeNum. If NodeID is determined not to be greater than NodeNum then the method continues at and a node array StepNode is created for the next node in the step .

If NodeID is determined to be greater than NodeNum node arrays have been created for all of the nodes of step and the process continues at . At a step array is created with elements consisting of node array references for the StepNode node arrays. The created step node is pushed to the Test array. For example for the step Sshown in the array that would be pushed to the Test array at is Step1Node1 Step1Node2 Step1Node3 .

At the value of the variable StepID is increased by one and at a determination of whether StepID is greater than StepMax is made. If StepID is determined not to be greater than StepMax the method continues at to create node arrays for the nodes of the subsequent step of the test case flow.

If StepID is determined to be greater than StepMax step arrays for all of the steps of the test case flow have been created and the process continues where the Test array is saved to the test script file.

Once the test script is generated by the test script generator utilizing the methods illustrated in the test script may be sent to the TAF to be utilized by the TAF processor to test the target product .

Referring to a flow chart illustrating a method for testing the target product utilizing the Test array of the test script is shown. The method illustrated in may be performed by for example the TAF processor of the TAF .

At the number of elements in the Test array is determined and the value of a variable ElementMax is set to the determined number of elements. At the value of a variable ElementID is set to one.

At element of the Test array comprising the step array for the step is parsed to obtain the node arrays references for the nodes of step . As described above each element of the Test array is a step array whose elements are node array references.

At a determination is made whether or not the number of node array references parsed from the array at element of the Test array is greater than one. If the number of node array references is determined to be greater than one the method continues at in which a parallel process is forked for each node array reference. Forking a separate process for each node array reference facilitates executing each node in parallel. Once the parallel processes are forked the method continues at where the node array references of each forked process are dereferenced in parallel to obtain the sub node arrays. As described above each sub node array contains a pair of elements for each API that the UC API associated with the sub node is mapped to. The first element of each pair is the name of the API and the second element is an arguments array reference with elements comprising the arguments to be passed to the API . Each API in the sub node array is sequentially executed and the dereferenced argument array is passed as the arguments for the API for execution by the TAF .

If at the number of node array references is not greater than one the process continues directly to . In this case the step array at element of the Test array includes a single node array reference and forking parallel processes is not necessary. A person skilled in the art will understand that in the case in which the number of node array references is not greater than one a single node array reference is dereferenced at even though refers to forked processes in parallel.

At the sub node arrays of each forked process are sequentially parsed to obtain the API s and the argument array reference s associated with each sub node array. The arguments array reference is dereferenced and the API s is executed to perform the function associated function at the target product with the arguments from the arguments array passed as arguments of the API . The sequential parsing and execution of the sub node arrays is conducted for each of the forked process in parallel to ensure that nodes within a step are executed in parallel and sub nodes within a node are executed sequentially when performing the testing functions on the target product . The TAF including the APIs Utilities Tools and Other Libraries is configured to execute the API with the passed the arguments from the arguments array in order to perform testing of the target product in accordance with the test case flow.

After the UC APIs associated with the sub nodes are executed for all forked processes the value of the variable ElementID is increased by one at . A determination is made whether the value of ElementID is greater than the value of ElementMax at .

If the value of ElementID is not greater than the value of ElementMax the process returns to where the step array of the next element of the Test array is parsed. If the value of ElementID is determined to be greater than the value of Element Max then all of the elements of the Test array have been processed and the method ends.

In addition to creating the test script the test script generator may also create the test description document based on a test case flow. shows an example of a test description document that may be produced by the test script generator based on a test case flow. The example test description document shown in is a spreadsheet file that is viewable using spreadsheet software such as for example MicroSoft Excel . In other embodiments the test description document may be in any suitable document format.

The test description document includes a header section that includes the name of the test script the test description the test coverage and the author of the test case flow.

The description of the steps node and sub nodes of the test case flow are arranged in a table format. The tables associated with the steps of the test case flow are arranged vertically with nodes within each step s table arranged horizontally in adjacent columns. Sub nodes of a node are arranged vertically within the column of the associated node.

The test case flow associated with the test description document illustrated in includes two steps the first step having one node having sub node and the second step including two nodes the first node having two associated sub nodes and the second node having one associated sub node. Thus the test description document includes a Step1 description section associated with the first step of the test case flow and a Step2 description section associated the second flow. The Step1 description section includes one column entitled Process 1 for the node of Step1 which includes the description of one sub node. The Step2 description section includes two columns entitled Process 1 and Process 2 one for each of the two nodes of the second step. The first column Process 1 includes two rows of description each row associated with one of the two sub nodes of this node. The second column Process 2 includes a single row of description associated with the sub node of the second node.

As described above the text descriptions that appear in the Step1 description section and the Step2 description section are generated utilizing a template descriptions stored in the description database .

The test description document may be utilized by a user to determine whether the generated test script satisfies the intended requirements of the test case in order to verify that the test case flow was created as intended.

Although the test script generator the TAF and the target product are shown in as separate components in some embodiments any or all of the test script generator the TAF and the target product may be included within a single computer. For example test script generator and the TAF may be included within a single computer such that the functions of the test script generator processor and the TAF processor performed by a single processor and such that the test script generator memory and the TAF memory may be provided by a single memory.

In other embodiments any or all of the test script generator the TAF and the target product may be included on separate computer systems. In an example the test script generator may be implemented as a web page hosted on a web server such that users may access the test script generator over the internet rather than the user having a stand alone test script generator installed on their own computer. The test script generated by the test script generator may be sent to the user s computer via the internet to be utilized by a TAF on the user s computer or on another computer. An advantage of implementing the test script generator as a web page is that updates to the test script generator or any component stored in the test script generator memory may be made directly on the web server rather than each user updating a locally stored test script generator .

Further in some embodiments any of the components within one of the test script generator and the TAF may be included on computers that are separate from the other components. For example one or more of the UC API database the templates database the arguments database the metadata database and the description database may be located remotely from the operating system the display the input and the test script generator processor to provide centralized databases for the test script generator . An advantage of providing centralized databases is that the information stored in the databases could be updated to provide multiple users with the most current databases without the multiple uses each having to update their local databases.

The test script generator described herein automatically generates test script from a test case flow designed by a user. Utilizing the test script generator enables a user without coding experience create a test script for complex test cases that involve multiple parallel and sequential processes with each of those processes consisting of a number of API calls. The above described test script code generator utilizes an intuitive form like graphical user interface to configure APIs. Utilizing a graphical design approach the above described test script generator reduces the amount of coding knowledge as well as understanding of test automation framework and test automation framework APIs that is desired of a user in order to automate test cases.

From a test case flow the above described test script code generator will automatically generate a ready to execute test script that may be executed on a test automation framework to perform the test on a target system reducing the test script development time drastically.

Along with the test script the above described test script generator generates a test description document that describes the test script in plain text. The test description document enables a user to analyze the test case design and flow and validate that the automated test script performs the testing that is desired without having to review the actual the test script itself.

In the preceding description for purposes of explanation numerous details are set forth in order to provide a thorough understanding of the embodiments. However it will be apparent to one skilled in the art that these specific details are not required. In other instances well known electrical structures and circuits are shown in block diagram form in order not to obscure the understanding. For example specific details are not provided as to whether the embodiments described herein are implemented as a software routine hardware circuit firmware or a combination thereof.

Embodiments of the disclosure can be represented as a computer program product stored in a machine readable medium also referred to as a computer readable medium a processor readable medium or a computer usable medium having a computer readable program code embodied therein . The machine readable medium can be any suitable tangible non transitory medium including magnetic optical or electrical storage medium including a diskette compact disk read only memory CD ROM memory device volatile or non volatile or similar storage mechanism. The machine readable medium can contain various sets of instructions code sequences configuration information or other data which when executed cause a processor to perform steps in a method according to an embodiment of the disclosure. Those of ordinary skill in the art will appreciate that other instructions and operations necessary to implement the described implementations can also be stored on the machine readable medium. The instructions stored on the machine readable medium can be executed by a processor or other suitable processing device and can interface with circuitry to perform the described tasks.

The above described embodiments are intended to be examples only. Alterations modifications and variations can be effected to the particular embodiments by those of skill in the art. The scope of the claims should not be limited by the particular embodiments set forth herein but should be construed in a manner consistent with the specification as a whole.

