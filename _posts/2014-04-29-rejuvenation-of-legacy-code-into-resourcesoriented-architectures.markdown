---

title: Rejuvenation of legacy code into resources-oriented architectures
abstract: A method for building a web-based application may include defining a scope of the web-based application, via a programming module, based on a plurality of parameters of a non-web-based application, and defining an error-handling mechanism based on an error-handling mechanism of the non-web-based application. The method may further include defining a plurality of resources for the web-based application, defining the mechanism of function for each resource of the plurality of resources, and generating the web-based application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405512&OS=09405512&RS=09405512
owner: CA, Inc.
number: 09405512
owner_city: New York
owner_country: US
publication_date: 20140429
---
The disclosure relates generally to extending the reach of legacy code and more specifically to a system and method for rejuvenation of legacy code into resource oriented architectures.

According to one embodiment of the disclosure a method for building a web based application may include defining a scope of the web based application via a programming module based on a plurality of parameters of a non web based application and defining an error handling mechanism based on an error handling mechanism of the non web based application. The method may further include defining a plurality of resources for the web based application defining the mechanism of function for each resource of the plurality of resources and generating the web based application.

Other features and advantages of the present disclosure are apparent to persons of ordinary skill in the art in view of the following detailed description of the disclosure and the accompanying drawings.

As will be appreciated by one skilled in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or context including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented entirely hardware entirely software including firmware resident software micro code etc. or combining software and hardware implementation that may all generally be referred to herein as a circuit module component or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be utilized. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as JAVA SCALA SMALLTALK EIFFEL JADE EMERALD C C VB.NET PYTHON or the like conventional procedural programming languages such as the C programming language VISUAL BASIC FORTRAN 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as PYTHON RUBY and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatuses systems and computer program products according to aspects of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

While certain example systems and methods disclosed herein may be described with reference to mainframes in cloud computing systems and methods disclosed herein may be related to architecture and information technology IT service and asset management in cloud computing as well as usability and user experience in middleware and common services. Systems and methods disclosed herein may be applicable to a broad range of applications that monitor various parameters associated with various disciplines such as for example IT systems and other activities of importance to the user.

Referring now to a network allows a user to access and use an application rejuvenation module. The application rejuvenation module may be internally provided or sourced through third parties. Network may comprise one or more clouds which may be public clouds private clouds or community clouds. Each cloud may permit the exchange of information and services among users that are connected to such clouds . In certain configurations cloud may be a wide area network such as the Internet. In some configurations cloud may be a local area network such as an intranet. Further cloud may be a closed private network in certain configurations and cloud may be an open network in other configurations. Cloud may facilitate wired or wireless communications of information among users that are connected to cloud .

Network may comprise one or more servers and other devices operated by service providers and users. Network also may comprise one or more devices utilized by users. Service providers and users may provide information to each other utilizing the one or more servers which connect to the one or more devices via cloud . Servers may comprise for example one or more of general purpose computing devices specialized computing devices mainframe devices wired devices wireless devices monitoring devices infrastructure devices and other devices configured to provide information to service providers and users. Devices may comprise for example one or more of general purpose computing devices specialized computing devices mobile devices wired devices wireless devices passive devices routers switches mainframe devices monitoring devices infrastructure devices and other devices utilized by service providers and users. Example items may include network cloud servers and devices .

Moreover network may comprise one or more systems that may provide an application rejuvenation module. System may be for example one or more of a general purpose computing device a specialized computing device a wired device a wireless device a mainframe device an infrastructure device a monitoring device and any other device configured to provide the application rejuvenation module. System may also be configured to collect data from one or more data sources e.g. servers sensors networks interfaces other devices . System may collect information from network cloud servers devices and other devices connected to cloud . System may connect to cloud and monitor network cloud servers devices and other devices connected to cloud for available information. The available information may be user information legacy code information document content information information on the consequences of user operations and other information provided by service providers and users. By collecting the available information from network cloud servers devices and other devices connected to cloud system may perform one or more tasks associated with using the application rejuvenation module which is discussed in more detail below. In some configurations one or more of servers and devices may comprise system . In other configurations system may be separate from servers and devices .

In the last twenty to thirty years numerous computer applications have been developed in a wide variety of code e.g. COBOL C C JAVA C etc. . The legacy applications i.e. non web based application written in these computer languages however are presented in their own unique environments and infrastructures. For example JAVA utilizes runtime libraries but no such infrastructure is available in COBOL C or C . Thus taking these applications and transforming and or restoring them i.e. rejuvenating them to a web based environment e.g. using a Resources Oriented Architecture ROA and the associated technology behind ROA called Representational State Transfer REST is difficult. As a result of this difficulty in converting an application from a base code to a web based environment and the requisite knowledge of not only the base code but also the web based environment code i.e. REST concepts to implement this conversion developers often simply re write the legacy application in the new code environment. However this process is onerous inefficient risky and costs developers valuable time and energy that could otherwise be dedicated to other endeavors.

The teachings of the present disclosure may provide an application rejuvenation module that is useful for developers who want to re use legacy applications in a REST based i.e. web based environment. In particular the teachings of this disclosure enable developers to use the application rejuvenation module to convert legacy applications to REST based applications accessible from the web without any knowledge of the concepts of REST and how it is implemented.

Referring now to system which may provide an application rejuvenation module is now described. System may reside on one or more networks . System may comprise a memory a central processing unit CPU and an input and output I O device .

Memory may store computer readable instructions that may instruct system to perform certain processes. As discussed above memory may comprise for example RAM ROM EPROM Flash memory or any suitable combination thereof. In particular when executed by CPU the computer readable instructions stored in memory may instruct CPU to operate as one or more devices.

CPU may operate as one or more of an application rejuvenation device . Application rejuvenation device may comprise one or more of a scope defining device an error defining device a resource defining device a service mapping device and an application generating device .

I O device may receive one or more of data from networks data from other devices connected to system and input from a user and provide such information to CPU . I O device may transmit data to networks may transmit data to other devices connected to system and may transmit information to a user e.g. display the information via a display device . Further I O device may implement one or more of wireless and wired communication between system and other devices.

Referring now to processes performed by application rejuvenation device are now described. In particular application rejuvenation device may receive user selected settings and variables via I O device and may store such information in memory or another suitable memory. In S application rejuvenation device operating as scope defining device defines the scope of the web based application. For example in this step the global settings for the web based e.g. REST based application are defined within a web application programming interface API e.g. a Web API Designer for CA Gen made available by CA Technologies see www.ca.com which may include defining general settings and the scope of the application. General settings may define basic properties of the generated web API and may include the name of the application the REST framework targeted by the implementation generic Internet Media Types known as multipurpose internet mail extensions MIME prefix of MIME types provided by the web API and or namespace of the documents exchanged with the web API. The scope of the application may be defined using complex variables to best fit the specifics of the existing application i.e. the legacy application . For example the complex variables may include semantically rich variable e.g. entity types which may map to data tables in a relational database classes specification and interface types in Object Oriented languages or Component Based development approaches and variables without semantics also called work sets structures . . . . Any of these kinds of variable or subsets thereof may be used to define resources for the target web based application.

Next in S application rejuvenation device operating as error defining device may define error handling mechanisms for the target web based application based on the error handling mechanisms native to the legacy application. An issue with legacy applications is that these applications generally have different error handling mechanisms depending on different programming languages used and different mechanism set in place by developers. The legacy code s native error handling mechanisms and definitions thereof however may carry critical information and thus are important to integrate into the target web based application. Thus in this step error handling mechanism native to and considered as standard and or widespread in the native legacy code may be defined and specified. For example the set of information that may be considered important to a user and or application e.g. mobile application and which are processed by the web API include an error code which can help easily identify an error an error message which is a short description of the error and a severity which returns information that does not necessarily represent the error but more generally includes feedback about the execution of a piece of legacy logic and or code which may be converted into error codes used by the web API . In addition each error handling mechanism may map their specific information to defined web API error handling attributes. Furthermore the web API may have a default method of reporting errors and may also include user definable and or custom error handling mechanisms.

Then in S application rejuvenation device operating as resource defining device may define a plurality of resources for the target web based application. The step of defining the resources may include defining of attributes and services and may include defining the interface to the resources e.g. defining the web API that will be exposed to the World Wide Web . For example a user may via the application rejuvenation module fetch relationships between resources and attributes e.g. from the legacy application define the scope of a number of entities determine select attributes to use manipulate the attributes define the structure of the resources etc. In particular although this step may require the knowledge of how the legacy application works it does not require a user to know how the web API e.g. REST based application works. In addition this step may also include defining services a user wants to make available to an end user for each resource selected.

Next in S application rejuvenation device operating as service mapping device defines the mechanism of function of each of the resources determined in S i.e. defines how services are to be implemented . In this step the web API may define the mapping between a selected service of a resource of the web API and a piece of code of the legacy application. This mapping may occur down to the most detailed level of the legal application so that the code of the target web based application may be generated without user intervention. For example for each selected service the exact mechanism of function to be used or re used with the target web based application may be defined. In the case of certain services the user can create a custom designed function allowing for more flexibility in defining functions. In particular for example an interface type to be used to access the native legacy code may be defined potential input variables and possible mechanisms supported for provision of information to the native legacy code may labeled as inputs providing interfaces in terms of read only import potential output variables and possible mechanisms supported to use information returned by the native legacy code are labeled as outputs providing interfaces in terms of write only export and parameters that may be modified are defined. Alternatively depending on the legacy code variable may be both input and output.

Then in S application rejuvenation device operating as application generating device generates and builds e.g. converts the generated code into some executable artifact the target web based application and its documentation. Specifically application rejuvenation device may gather all information of the content of the legacy application collected in S S and automatically generate a web based application that corresponds to the legacy application and interfaces with it. After the web based application is generated built and documented the process terminates.

The flowchart and block diagrams in illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

