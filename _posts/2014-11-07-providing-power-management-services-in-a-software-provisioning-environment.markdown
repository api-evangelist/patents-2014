---

title: Providing power management services in a software provisioning environment
abstract: A software provisioning server can communicate with a power management system of the target machines to alter the power state of the target machines during actions requiring a change in the power state, such as power cycling the target machines during a software installation. The software provisioning server can communicate with the power management system of the target machines and instruct the power management systems to alter the power state of the target machines during the actions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223369&OS=09223369&RS=09223369
owner: Red Hat, Inc.
number: 09223369
owner_city: Raleigh
owner_country: US
publication_date: 20141107
---
This application is a continuation of non provisional U.S. patent application Ser. No. 12 277 518 filed Nov. 25 2008 which is incorporated herein by reference in its entirety for all purposes.

Software provisioning is the process of selecting a target machine such as a server loading the appropriate software operating system device drivers middleware and applications and customizing and configuring the system and the software to make it ready for operation. Software provisioning can entail a variety of tasks such as creating or changing a boot image specifying parameters e.g. IP address IP gateway to find associated network and storage resources and then starting the machine and its newly loaded software. Typically a system administrator will perform these tasks using various tools because of the complexity of these tasks. Unfortunately there is a lack of provisioning control tools that can adequately integrate and automate these tasks.

Typically software provisioning can include the installation or re installation of software on a target machine. Often to properly install or re install the software the target machines must be re booted powered down and restarted in order to begin the install or re install. The process can require a system administrator or user to manually re boot the system in concert with the software provisioning.

For simplicity and illustrative purposes the principles of the present invention are described by referring mainly to exemplary embodiments thereof. However one of ordinary skill in the art would readily recognize that the same principles are equally applicable to and can be implemented in all types of information and systems and that any such variations do not depart from the true spirit and scope of the present invention. Moreover in the following detailed description references are made to the accompanying figures which illustrate specific embodiments. Electrical mechanical logical and structural changes may be made to the embodiments without departing from the spirit and scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Embodiments of the present teachings relate to systems and methods for providing power management services in a software provisioning environment. More particularly a provisioning server can alter the power state of target machines in concert with performing software provisioning processes on the target machines.

In embodiments a provisioning server can be configured to perform actions on target machines such as software provisioning process e.g. installing software re installing software etc. and other actions related to software provisioning e.g. configuring hardware software configuring network parameters etc. . Often these actions require altering the power state of the target machines e.g. powering down powering up to begin a software install to allow configuration changes to take effect etc. in order to perform the actions. According to embodiments the software provisioning server can be configured to communicate with a power management system of the target machines to alter the power state of the target machines during the actions. To achieve this the provisioning server can be configured to include a power management module.

According to embodiments the power management module can be configured to communicate with the power management system of the target machines. The power management module can be configured to instruct the power management systems to alter the power state of the target machines. For example for provisioning processes the power management module can instruct the power management system to power down and power up the target machine to initiate the software installation or re installation. Additionally the power management module can instruct the target machine to power down for any action or reason and can track the power management settings regardless of the power state of the target machine.

According to embodiments the provisioning server can be configured to maintain an inventory of the target machines. The inventory can be configured to include information identifying the power management systems for the target machines. The information can include identification of the power management systems configuration of power management systems access information for the power management systems and the like.

By providing power management the provisioning server can install software on target machines and configure the target machines without independently requiring administrators or third parties to restart target machines. As such the provisioning server can fully perform software provisioning actions.

In particular the provisioning environment can manage software provisioning using a hierarchy of commands. In exemplary embodiments the hierarchy can include at least four levels of commands. The lowest level in the hierarchy can comprise distribution commands which primarily handle base operating system specific tasks of provisioning. The second level can comprise profile commands which associate a configuration file such as a kickstart file for Linux or other operating system with a distribution and optionally allow for customization. The third level comprises system commands which associate remote systems that are involved with the provisioning of the software. The fourth level comprises repository commands which address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software.

The provisioning environment provides several capabilities and advantages over the known provisioning solutions. For example the present invention is capable of handling a variety of forms of installations such as preboot execution environment PXE virtualization re installations and image installations.

In exemplary aspects the provisioning environment enables integrating virtualization into a PXE provisioning infrastructure and provides several options to reinstall running machines as well. The provisioning environment can integrate mirroring of package repositories with the provisioning process so that a provisioning server may serve as a central mirror point of contact for all of an organization s software needs. In aspects a set of remote mirrored repositories can automatically be used by provisioned systems without additional setup.

Reference will now be made in detail to the exemplary aspects the provisioning environment . The provisioning environment can be applied to provisioning any form of software such as Windows systems UNIX systems and Linux systems. In the exemplary description that follows is presented to explain the provisioning environment for provisioning software such as Linux and Linux based software such as Fedora and Red Hat Enterprise Linux by Red Hat Inc.

In provisioning of software such as Linux many system administrators use what is known as the kickstart installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use of a single or relatively few standard kickstart files to install Linux on multiple machines making it ideal for network and system administrators.

The kickstart file can be a simple text file containing a list of items each identified by a keyword. In general a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. One skilled in the art will recognize that the present invention may be applied to non kickstart files in software provisioning. For example configuration files such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstart files may also be used by the provisioning environment .

Typically a kickstart file can be copied to the boot disk or made available on the network. The network based approach is most commonly used as most kickstart installations for software provisioning such as Linux systems tend to be performed via a network using NFS FTP or HTTP on networked computers. Administrators also find it desirable that kickstart installations can be performed using a local CD ROM or a local hard drive.

Using kickstart files a system administrator can create a single file containing the parameters that are needed to complete a typical software installation. For example kickstart files specify parameters related to language selection mouse configuration keyboard selection boot loader installation disk partitioning network configuration NIS LDAP Kerberos Hesiod and Samba authentication firewall configuration and package selection.

According to exemplary aspects illustrated in the provisioning environment can include a provisioning server a code repository which provides access to distributions and a set of installation templates a set of exception plugins a helper client running on target machines in a network a provisioning database which comprises a distribution tree list and template list . Each of these components will now be further described.

The provisioning server from herein referred to as a cobbler is responsible for serving as an extensible markup language remote procedure call XMLRPC handler linking to or mirroring install distribution trees and a configuration database hosting kickstart templates hosting plugins generating installation images and the like. The cobbler server can be implemented as software such as Python code installed on a boot server machine and provide a command line interface for configuration of the boot server. In addition the cobbler server can make itself available as a Python application programming interface API for use by higher level management software not shown . The cobbler server supports provisioning via PXE image ISO installation virtualization re provisioning. As will be described later the last two modes are performed with the assistance of a helper client .

The code repository is responsible for hosting distributions and . The code repository may be implemented using well known components of hardware and software. Additionally the code repository can be include one or more repositories hosting distributions. The distributions and can include bundles of software that are already compiled and configured. The distributions and may be in the form of either rpm deb tgz msi exe formats and the like. For example as Linux distributions the distributions and are bundles of software that comprise the Linux kernel the non kernel parts of the operating system and assorted other software. The distributions and can take a variety of forms from fully featured desktop and server operating systems to minimal environments.

In exemplary aspects the installation templates are any data structure or processing element that can be combined with a set of installation configurations and processed to produce a resulting configuration file such as a kickstart file.

In exemplary aspects exception plugins are software that interact with cobbler server to customize the provisioning of software. In general the exception plugins are intended to address infrequent customization needs.

In exemplary aspects the helper client known as koan which stands for kickstart over a network can assist the cobbler server during the provisioning processes. The koan can allow for both network provisioning of new virtualized guests and destructive provisioning of any existing system. When invoked the koan can request profile information from a remote boot server that has been configured with the cobbler server . In some aspects what the koan does with the profile data depends on whether it was invoked with virt or replace self.

In exemplary aspects the koan can enable replacing running systems as well as installing virtualized profiles. The koan can also be pushed out to systems automatically from the boot server. In some aspects the koan client is also written in Python code to accommodate a variety of operating systems machine architectures etc.

In exemplary aspects the network can include a number of the target machines . The target machines can represent the particular machines to which software provisioning is directed. The target machines can represent a wide variety of computing devices such as personal computers servers laptop computers personal mobile devices and the like. In some aspects the target machines can represent distributed computing environments such as cloud computing environments. Although shows several of the target machines the provisioning environment can be capable of managing a wide range environments such as datacenters with thousands of machines or server pools with just a few machines. Additionally the cobbler server can be connected to multiple networks .

In exemplary aspects the provisioning database can serve as a data storage location for holding data used by the cobbler server . For example as shown the provisioning database can comprise the distribution tree list and the template list . The distribution tree list can provide an inventory of the distributions and that are hosted or mirrored by the cobbler server . The template list can provide an inventory of the templates that are hosted by the cobbler server .

As noted above the cobbler server can manage provisioning using a hierarchical concept of distribution commands profile commands system commands and repository commands. This framework enables the cobbler server to abstract the differences between multiple provisioning types installation reinstallation and virtualization and allows installation of all three from a common platform. This hierarchy of commands also permits the cobbler server to integrate software repositories with the provisioning process thus allowing systems to be configured as a mirror for software updates and third party content as well as distribution content.

Distributions can contain information about base operating system tasks such as what kernel and initial ramdisk initrd are used in the provisioning along with other information such as required kernel parameters. Profiles associate one of the distributions and with a kickstart file and optionally customize it further for example using plugins . System commands associate a hostname IP or machine access control MAC with a distribution and optionally customize the profile further. Repositories contain update information such as yum mirror information that the cobbler server uses to mirror repository . The cobbler server can also manage generate dynamic host configuration protocol DHCP configuration files using the templates .

In exemplary aspects the cobbler server can use a provisioning environment that is fully templated allowing for kickstarts and PXE files to be customized by the user. The cobbler server uses the concept of profiles as an intermediate step between the operating system and the installed system. A profile is a description of what a system does rather than the software to be installed. For instance a profile might describe a virtual web server with X amount of RAM Y amounts of disk space running a Linux distribution Z and with an answer file W.

In exemplary aspects the cobbler server can provide a command line interface to configure a boot server in which it is installed. For example the format of the cobbler server commands can be generally in the format of cobbler command subcommand arg1 arg2 . Thus a user can specify various aspects of software provisioning via a single interface such as a command line interface or other known interface. Examples of exemplary cobbler commands can be found in U.S. patent application Ser. No. 11 763 315 U.S. Patent Application Publication No. US8185891 and U.S. patent application Ser. No. 11 763 333 U.S. Patent Publication No. US8132166 the disclosures of which are incorporated herein in their entirety by reference.

According to exemplary aspects a user can use various commands of the provisioning environment to specify distributions and install trees hosted by the code repository such as a distribution from the distributions or . A user can add or import a distribution or import it from installation media or an external network location.

According to exemplary aspects in order to import a distribution the cobbler server can auto add distributions and profiles from remote sources whether this is an installation media such as a DVD an NFS path or an rsync mirror. When importing a rsync mirror the cobbler server can try to detect the distribution type and automatically assign kickstarts. By default in some embodiments the cobbler server can provision by erasing the hard drive setting up eth0 for DHCP and using a default password. If this is undesirable an administrator may edit the kickstart files in etc cobbler to do something else or change the kickstart setting after the cobbler server creates the profile.

According to exemplary aspects a user may map profiles to the distributions and map systems to the profiles using profile commands and systems commands of the provisioning environment . A profile associates a distribution to additional specialized options such as a kickstart automation file. In the cobbler server profiles are the unit of provisioning and at least one profile exists for every distribution to be provisioned. A profile might represent for instance a web server or desktop configuration.

According to exemplary aspects a user can map systems to profiles using system commands. System commands can assign a piece of hardware with cobbler server to a profile. Systems can be defined by hostname Internet Protocol IP address or machine access control MAC address. When available use of the MAC address to assign systems can be preferred.

According to exemplary aspects the user can map repositories and profiles using repository commands. Repository commands can address configurations and tasks related to updating the software remote installation procedures and optionally customizing the software. These repository commands can also specify mirroring of the provisioned software to remote servers. Repository mirroring can allow the cobbler server to mirror not only install the trees and but also optional packages third party content and updates. Mirroring can be useful for faster more up to date installations and faster updates or providing software on restricted networks. The cobbler server can also include other administrative features such as allowing the user to view their provisioning configuration or information tracking the status of a requested software installation.

According to exemplary aspects a user can utilize commands to create a provisioning infrastructure from a distribution mirror. Then a default PXE configuration is created so that by default systems will PXE boot into a fully automated install process for that distribution. The distribution mirror can be a network rsync mirror or a mounted DVD location.

According to exemplary aspects the administrator uses a local kernel and initrd file already downloaded and shows how profiles would be created using two different kickstarts one for a web server configuration and one for a database server. Then a machine can be assigned to each profile.

According to exemplary aspects a repo mirror can be set up for two repositories and create a profile that will auto install those repository configurations on provisioned systems using that profile.

According to exemplary aspects in addition to normal provisioning the cobbler server can support yet another option called enchant . Enchant takes a configuration that has already been defined and applies it to a remote system that might not have the remote helper program installed. Users can use this command to replace a server that is being repurposed or when no PXE environment can be created. Thus the enchant option allows the remote the koan client to be executed remotely from the cobbler server .

According to aspects if the cobbler server is configured to mirror certain repositories the cobbler server can then be used to associate profiles with those repositories. Systems installed under those profiles can be auto configured to use these repository mirrors in commands and if supported these repositories can be leveraged. This can be useful for a large install base when fast installation and upgrades for systems are desired or software not in a standard repository exists and provisioned systems desire to know about that repository.

According to exemplary aspects the cobbler server can also keep track of the status of kickstarting machines. For example the cobbler status will show when the cobbler server thinks a machine started kickstarting and when it last requested a file. This can be a desirable way to track machines that may have gone inactive during kickstarts. The cobbler server can also make a special request in the post section of the kickstart to signal when a machine is finished kickstarting.

According to exemplary aspects for certain commands the cobbler server will create new virtualized guests on a machine in accordance with the orders from the cobbler server . Once finished an administrator can use additional commands on the guest or other operations. The cobbler server can automatically name domains based on their MAC addresses. For re kickstarting the cobbler server can reprovision the system deleting any current data and replacing it with the results of a network install.

According to exemplary aspects the cobbler server can configure boot methods for the provisioning requested by the user. For example the cobbler server can configure a PXE environment such as a network card BIOS. Alternatively the cobbler server can compile and configure information for koan client . The cobbler server can also optionally configure DHCP and DNS configuration information.

According to exemplary aspects the cobbler server can serve the request of the koan client . The koan client can acknowledge the service of information of the cobbler server and then can initiate installation of the software being provisioned. Additionally the koan client can either install the requested software e.g. replace the existing operating system or install a virtual machine.

As shown in the network can include a number of target systems and . For example target systems can include a group of server computers such as blade servers. The target systems and can include computing systems such as servers personal computers laptop computers etc. The target systems and can be connected to a power management systems and respectively to control the power supplied to the target systems and and to alter the power state of one or more of the target systems and e.g. power cycled . The power management systems can be any type of system to manage the power of the target machines for example Integrated Lights Out ILO by Hewlett Packard Corporation Dell Remote Access Control DRAC by Dell Corporation WTI powerbar by Western Telematics Inc and other power system supporting network communications. The target system can be configured to include a koan client . While not shown the target system can also include a power management system such as described above.

According to embodiments the cobbler server can be configured to perform actions on the target machines and . The cobbler server can be configured to perform software provisioning actions such as installing software re installing software updating software. Likewise the cobbler server can be configured to perform other actions related to software provisioning such as configuring hardware software configuring network parameters and the like. To initiate and complete these actions a power state of the target machines and may need to be altered e.g. power cycled powered down powered up . According to embodiments the cobbler server can be configured to communicate with the power management systems and of the target machines and to alter the power state of the target machines and during the actions. To achieve this the cobbler server can be configured to include a power management module .

According to embodiments the power management module can be configured to communicate with the power management systems and of the target machines and . The power management module can be configured to instruct the power management systems and to alter the power state of the target machines and . For example during a software installation of one of the target machines the power management module can instruct the power management system to power cycle power down and power up the target machine after the software installation has completed.

In embodiments the power management module can be implemented as a portion of the code for the cobbler server . Likewise the power management module can be implemented as a separate software tool accessible by the cobbler server . The power management module can be written in a variety of programming languages such as JAVA C Python code and the like to accommodate a variety of operating systems machine architectures etc. Additionally the power management module can be configured to include the appropriate application programming interfaces APIs to communicate with and cooperate with other components of the cobbler server .

According to embodiments the cobbler server can be configured to receive a request to perform an action on one of the target machines and . The action can be initiated by an administrator of the cobbler server or received from one of the target machines and . The cobbler server can be configured to determine an alteration to the power state of the target machines and associated with the action. For example the cobbler server can maintain a record of power state alterations to be performed with the actions. Likewise the cobbler server can be configured to receive the command to alter the power state with the requested action. Once determined the cobbler server can be configured to perform the action and communicate with the power management systems and to perform the power state alteration.

According to embodiments the cobbler server can be configured to maintain an inventory of the target machines and . The inventory can be configured to include information identifying the target machines and . The information can include information that uniquely identifies the target machines and in the network such as Media Access Control MAC address Ethernet Hardware Address EHA and the like. The information can also include other information that identifies the target machines and such as specifications of the target machines and network information of the target machines and IP address host name etc. and software installed on the target machines and .

According to embodiments the cobbler server can also be configured to include in the inventory information about the power management systems and for the target machines and . The information can include identification of the power management system and type of power management systems and communication protocol or tools utilized by the power management systems and Intelligent Platform Management Interface IPMI Cluster Manager CMAN and the like access information login and password for the power management system and and the like. The information contained in the inventory can be imputed by the administrator of the cobbler server . Likewise the cobbler server can be configured to automatically detect the information and populate the inventory with the information once a target machine is added to network .

According to embodiments once the power management system is determined the cobbler server can be configured to communicate with the power management systems and to perform the power state alteration. The power management module can be configured to generate a command or instruction . The instruction can include access information for the power management systems and and the power state alteration to be performed. The power management module can be configured to form the instruction in a protocol utilized by the particular power management systems and . For example the cobbler server can be configured to utilize conventional or proprietary protocols or tools such as IPMI DRAC ILO fence agents and the like. The power management module can be configured to determine the protocol from the inventory . Once generated the cobbler server can be configured to transmit the instruction to the determined power management systems and .

According to embodiments the koan client can be configured to operate as a power management system on the target machine . As such the cobbler server can be configured to communicate with the koan client to alter the power state of the target machine as described above.

Processor further communicates with network interface such as an Ethernet or wireless data connection which in turn communicates with one or more networks such as the Internet or other public or private networks. Processor also communicates with the provisioning database and the power management module to execute control logic and perform the power management processes described above and below.

While illustrates the cobbler server as a standalone system comprising a combination of hardware and software the cobbler server can also be implemented as a software application or program capable of being executed by a conventional computer platform. Likewise the cobbler server can also be implemented as a software module or program module capable of being incorporated in other software applications and programs. In either case the cobbler server can be implemented in any type of conventional proprietary or open source computer language.

In the cobbler server determines an alteration of the power state of the target machine to be performed with the action. The cobbler server can maintain a record of power state alterations to be performed with the actions. Likewise the cobbler server can be configured to receive the command to alter the power state with the requested action.

In the cobbler server determines a power management system for the target machine. The power management module can examine the inventory to locate the power management system for the target machine as well as the information about the power management system. The information can include identification of the power management system and type of power management systems and communication protocol utilized by the power management systems and Intelligent Platform Management Interface IPMI Cluster Manager CMAN and the like access information login and password for the power management system and and the like.

In the cobbler server instructs the power management system to perform the alteration of the power state. The power management module can be configured to generate a command or instruction . The instruction can include access information for the power management systems and and the power state alteration to be performed. The power management module can be configured to form the instruction in a protocol utilized by the particular power management systems and . For example the cobbler server can be configured to utilize conventional or proprietary protocols and tools such as IPMI CMAN ILO fence agents and the like. The power management module can be configured to determine the protocol from the inventory . Once generated the cobbler server can be configured to transmit the instruction to the determined power management systems and .

In the cobbler server performs the initiated action. While illustrated as being performed after instructing the power management system the initiated actions can be performed at any time during the process depending on when the alteration of the power state needs to be performed. In the process can end but the process can return to any point and repeat.

While the invention has been described with reference to the exemplary embodiments thereof those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular although the method has been described by examples the steps of the method may be performed in a different order than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope as defined in the following claims and their equivalents.

