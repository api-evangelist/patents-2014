---

title: Automated determination of maximum service throughput
abstract: Methods, systems, and computer-readable media for determining the maximum throughput of a service are disclosed. A first sequence of load tests is initiated for a service host. Individual ones of the load tests comprise determining a respective throughput at the service host for a respective number of concurrent connections to the service host. The number of concurrent connections increases nonlinearly in at least a portion of the first sequence of load tests. The first sequence of load tests is discontinued when the throughput is not increased by a threshold from one of the load tests to the next. An estimated maximum throughput for the service host is determined based at least in part on the first sequence of load tests. The estimated maximum throughput corresponds to a particular number of concurrent connections to the service host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09647919&OS=09647919&RS=09647919
owner: Amazon Technologies
number: 09647919
owner_city: Reno
owner_country: US
publication_date: 20141204
---
Large scale computing systems such as those associated with network based production services have become widely available in recent years. Examples of such systems include online merchants internet service providers online businesses such as photo processing services corporate networks cloud computing services web based hosting services etc. These entities may maintain large numbers of computing devices e.g. thousands of hosts which are hosted in geographically separate locations and which are configured to process large quantities e.g. millions of client requests daily or even hourly. Complex systems may include many services that interact with one another in varied ways.

Tuning the configuration of a service on a computer system is typically a manual process. In other words a tuning process typically involves a user manually tweaking different attributes of the service or the underlying system in the hopes of improving the performance of the system running the service. Multiple attributes may need to be manually modified many times in an effort to improve the performance significantly especially if performance is dependent on multiple interrelated attributes. For heterogeneous multi host web services that have specific targets in terms of throughput latency or stability the tuning process may be especially complex and time consuming.

A typical approach to this manual tuning process involves trial and error. A user may making some initial guesses on optimal values test the service based on the guesses and manually analyze the resulting performance. The user may then tweak the values even further again based on guesswork. In some circumstances parts of the system will change dramatically over time thus making the original estimates outdated. However because this approach to tuning is manual and time consuming the tuning may not be performed on a regular basis. As a result outdated and inefficient settings may remain in place until they have significantly adverse effects on performance. When performance estimates are outdated or entirely absent hardware resources may be wasted on systems that are not operating optimally.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. 

Various embodiments of methods and systems for automated determination of maximum service throughput are described. Using the techniques described herein automated tuning of a service may be performed to determine the maximum throughput of the service as well as the maximum connections associated with the maximum throughput. The automated tuning may include a first sequence of load tests in which load is generated for the service using a variable number of concurrent connections to the service. The number of concurrent connections may increase nonlinearly throughout the sequence e.g. by doubling with every load test in the sequence. The first sequence of load tests may be halted when the increase in concurrent connections no longer produces an increase in throughput e.g. as measured by successful transactions per second processed by the service. The first set of load tests may determine a range of values for the maximum throughput and a second sequence of load tests may search within the range of values to determine the maximum throughput. In the second sequence of load tests the number of concurrent connections may increase or decrease from load test to load test e.g. as long as the change produces an increase in throughput. The resulting values for the maximum throughput and maximum connections may be used to optimize the configuration of a fleet of service hosts and or a load balancer for the service hosts.

The load generator module may generate a plurality of test loads for use in the load testing of a service . For example if the service is associated with an electronic commerce e commerce merchant then the service may be configured to perform one or more suitable operations such as generating a web page e.g. a product description page for a product offered for sale by the merchant completing a sale or other transaction between the merchant and a customer verifying a payment presented by the customer etc. Each test load may comprise data such as service requests associated with a plurality of transactions or other operations that are processed by the service . The test loads may be generated by sampling actual production transactions or by generating synthetic transactions.

The service may be configured to perform one or more functions upon receiving a suitable request. For example the service may be configured to retrieve input data from one or more storage locations and or from a service request transform or otherwise process the data and generate output data. In some cases a first service may call a second service the second service may call a third service to satisfy the request from the first service and so on. For example to build a web page dynamically numerous services may be invoked in a hierarchical manner to build various components of the web page. The service may be configured to process requests from various internal or external systems such as client computer systems or computer systems consuming networked based services e.g. web services . For instance an end user operating a web browser on a client computer system may submit a request for data e.g. data associated with a product detail page a shopping cart application a checkout process search queries etc. . In another example a computer system may submit a request for a web service e.g. a data storage service a data query etc. . In general the service may be configured to perform any of a variety of business processes.

The service may include but are not limited to one or more of network based services e.g. a web service applications functions objects methods e.g. objected oriented methods subroutines or any other set of computer executable instructions. In various embodiments such services may communicate through any of a variety of communication protocols including but not limited to the Simple Object Access Protocol SOAP . In various embodiments messages passed between services may include but are not limited to Extensible Markup Language XML messages or messages of any other markup language or format. In various embodiments descriptions of operations offered by one or more of the services may include Web Service Description Language WSDL documents which may in some cases be provided by a service broker accessible to the services and components. References to services herein may include components within services.

The automated configuration tuning system may be communicatively coupled to one or more other computer systems any of which may be implemented by the example computing device illustrated in over one or more network s . In one embodiment the automated configuration tuning system may be communicatively coupled to a test host . Software implementing the service may be installed on and executed by the test host . In one embodiment the automated configuration tuning system may interact with one or more service hosts in any suitable environment such as a production environment and or a test environment. The production environment may be a real world environment in which a set of production services are invoked either directly or indirectly by interactions with a real world client consumer or customer e.g. of an online merchant or provider of web based services. In one embodiment the test environment may be an environment in which a set of test services are invoked in order to test their functionality. The test environment may be isolated from real world clients consumers or customers of an online merchant or provider of web based services. In one embodiment the test environment may be implemented by configuring suitable elements of computing hardware and software in a manner designed to mimic the functionality of the production environment. In one embodiment the test environment may temporarily borrow resources from the production environment. In one embodiment the test environment may be configured to shadow the production environment such that individual test services represent shadow instances of corresponding production services. When the production environment is run in shadow mode copies of requests generated by production services may be forwarded to shadow instances in the test environment to execute the same transactions.

To determine an optimized configuration for the service the load testing module may use the test loads to perform load tests using the test host . The load testing module may be configured to measure the throughput achieved for a particular load test e.g. by determining the transactions per second successfully processed by the service. The load testing module may be configured to measure the latency of each transaction as well as percentile statistics for latency. Additionally the load testing module may be configured to determine the number of transactions that passed and the number of transactions that failed.

In one embodiment the optimized configuration determined by the load testing module may include a maximum throughput e.g. as measured in successful transactions per second. As used herein the term maximum throughput may indicate a value that is not necessarily an exact maximum but rather an estimate or approximation of a suitably high value for the throughput of a service. In one embodiment the optimized configuration may include a maximum number of concurrent connections that the test host can handle when providing the maximum throughput. As used herein the term maximum number of concurrent connections may indicate a value that is not necessarily an exact maximum but rather an estimate or approximation of a suitably high value for the number of concurrent connections to a service. In one embodiment the optimized configuration may include an optimized number of service hosts to implement the service . For example for services that scale linearly for multiple hosts the optimized number of service hosts may be determined by dividing the anticipated peak traffic by the maximum throughput for the individual host .

In many circumstances the throughput of a service may increase up to a point as the number of concurrent connections increase. In other words two concurrent connections generating transactions back to back may achieve a higher throughput than a single connection generating transactions back to back. However at some point an increase in the number of concurrent connections may be counter productive as transactions begin to fail or take too long.

In one embodiment the load testing module may perform a first sequence of load tests in which load is generated for the service using a variable number of concurrent connections to the service. The number of concurrent connections may increase nonlinearly throughout the sequence e.g. by doubling with every load test in the sequence. The period of time for each load test may be configurable by a user. In one embodiment a cooldown period between load tests or iterations in a sequence may also be configurable. In one embodiment the first sequence of load tests may be halted when the increase in concurrent connections no longer produces an increase in throughput e.g. as measured by successful transactions per second or other time period processed by the service. In one embodiment the first sequence of load tests may be halted when the increase in concurrent connections no longer produces an increase in throughput beyond a desired threshold. The success or failure of transactions over a period of time and the resulting throughput metric may be determined by the load testing module . The success or failure of transactions may be determined based on a response code generated by the service and or a timeout value for such a response. Additionally the success or failure of transactions may be determined based on compliance with any applicable service level agreements SLAs . In one embodiment other ending conditions for the first sequence of load tests may be specified by a user. For example the load tests may be terminated automatically when a particular threshold for a particular performance metric is reached e.g. when CPU utilization exceeds 80 or when the error rate exceeds a particular threshold.

The first set of load tests may determine a range of values for the maximum throughput. In one embodiment a second sequence of load tests may search within the range of values to determine the maximum throughput. In the second sequence of load tests the number of concurrent connections may increase or decrease from load test to load test e.g. as long as the changes produce an increase in throughput. In one embodiment the number of concurrent connections may oscillate up and down within the range of values until the maximum throughput is found. In one embodiment the search within the range of values may continue only if the increase in throughput from one iteration to the next is greater than a desired percentage.

In one embodiment the resulting value for the maximum throughput may be used to optimize the configuration of a fleet of service hosts. For example an optimized size of the fleet may be determined based on the maximum throughput. In one embodiment for services that scale linearly for multiple hosts the optimized number of service hosts may be determined by dividing the anticipated peak traffic by the maximum throughput for an individual service host. The anticipated peak traffic may be determined using any suitable technique s . The fleet of hosts may be automatically configured with optimized size by provisioning one or more additional service hosts and or deprovisioning one or more existing service hosts. In one embodiment an auto scaler may be used to optimize the fleet size by provisioning and or deprovisioning hosts. The auto scaler may automatically provision one or more hosts from a pool of available compute instances or automatically return one or more hosts to the pool of compute instances.

In one embodiment a fleet of hosts that implement the service may sit behind a load balancer that directs requests to individual hosts. The resulting value for the maximum connections may be used to optimize the configuration of the load balancer for a fleet of service hosts. In one embodiment the maximum connections parameter of the load balancer may be assigned the value for the maximum connections as determined by the load testing module .

In one embodiment the load testing module may operate to determine the maximum throughput and maximum connections in an automated manner. For example the automated determination of maximum service throughput may be performed upon checkin of a new build of a service or otherwise when the program code of a service is changed. In one embodiment the automated determination of maximum service throughput may be performed periodically or regularly based on a schedule.

As shown in the first sequence of load tests may continue with one or more additional load tests or iterations. The number of concurrent connections may be increased from load test to load test or iteration to iteration. In one embodiment the number of concurrent connections may be increased nonlinearly in the first sequence. For example the number of concurrent connections may be doubled from load test to load test or iteration to iteration. Again each load test may include applying load to the service for a period of time using a particular number of concurrent connections to the service and determining the throughput achieved by the service for the particular number of concurrent connections. Accordingly the operation shown in may represent at least one load test using a number of concurrent connections greater than the previous load test.

As shown in it may be determined whether the throughput achieved in the most recent load test or iteration represents an improvement over the throughput achieved in the previous load test or iteration i.e. in comparison to the load test or iteration immediately preceding the most recent one. If the throughput was improved then the method may continue with another load test or iteration at a higher number of concurrent connections as shown in . If the throughput was the same or decreased then the first sequence of load tests may be discontinued or halted. In one embodiment it may be determined whether the latest throughput metric represents an improvement by a particular predetermined threshold such as a percentage increase. For example if the threshold is a 3 improvement then the first sequence of load tests may be discontinued if the most recent load test represents only a 2 improvement in throughput.

As shown in aspects of the optimized configuration of the service may be determined after the first sequence of load tests is finished. For example the estimated maximum throughput of the service may be determined e.g. based on the first sequence of load tests. The estimated maximum number of concurrent connections that the service can handle may also be determined. In one embodiment the estimated maximum number of concurrent connections may be determined as the number of concurrent connections used in the load test having the estimated maximum throughput. In one embodiment the estimated maximum throughput and estimated maximum number of concurrent connections may be determined based at least in part on the first sequence of load tests. As will be discussed in greater detail below a second sequence of load tests may also be used to determine the estimated maximum throughput and estimated maximum number of concurrent connections.

As shown in the first sequence of load tests may continue with one or more additional load tests or iterations. The number of concurrent connections may be increased from load test to load test or iteration to iteration. In one embodiment the number of concurrent connections may be increased nonlinearly in the first sequence. For example the number of concurrent connections may be doubled from load test to load test or iteration to iteration. Again each load test may include applying load to the service for a period of time using a particular number of concurrent connections to the service and determining the throughput achieved by the service for the particular number of concurrent connections. Accordingly the operation shown in may represent at least one load test using a number of concurrent connections greater than that of the previous load test.

As shown in it may be determined whether the throughput achieved in the most recent load test or iteration represents an improvement over the throughput achieved in the previous load test or iteration i.e. in comparison to the load test or iteration immediately preceding the most recent one. If the throughput was improved then the method may continue with another load test or iteration at a higher number of concurrent connections as shown in . If the throughput was the same or decreased then the first sequence of load tests may be discontinued or halted. In one embodiment it may be determined whether the latest throughput metric represents an improvement by a particular predetermined threshold such as a percentage increase. For example if the threshold is a 3 improvement then the first sequence of load tests may be discontinued if the most recent load test represents only a 2 improvement in throughput.

As shown in a range of values for the estimated maximum number of concurrent connections may be determined. The range of values may be determined based at least in part on the first sequence of load tests. In one embodiment the upper boundary of the range may be the number of concurrent connections used in the final load test of the first sequence. In one embodiment the upper boundary of the range may be the number of concurrent connections used in the antepenultimate load test of the first sequence i.e. the next to next to last load test. In other words if the final load test is the Nth iteration then the upper boundary of the range may be based on the number of concurrent connections in the Nth iteration while the lower boundary of the range may be based on the number of concurrent connections in the N 2 th iteration.

As shown in a second sequence of load tests may be initiated for the service host. In the second sequence the number of concurrent connections may vary within the range of values determined in the operation shown in . The number of concurrent connections may vary within this range from load test to load test or iteration to iteration. The second sequence of load tests may represent a search within the range of values for the estimated maximum throughput. Each load test in the second sequence may include applying load to the service for a period of time using a particular number of concurrent connections to the service e.g. by sending service requests to the service. The load test may determine one or more performance metrics of the service host and or service such as throughput. The throughput may be measured as the number of successful transactions processed by the service per unit of time e.g. per second . Any suitable technique s may be used to determine the throughput or other metrics such as analysis of the responses from the service. The conditions that determine the success or failure of a transaction may be configurable by a user. The operation shown in may represent at least one load test or iteration using an initial number of concurrent connections.

As shown in the second sequence of load tests may continue with one or more additional load tests or iterations. The number of concurrent connections may be changed from load test to load test or iteration to iteration either by increasing or decreasing the number. In one embodiment the second sequence may represent a binary search within the range of values for the number of concurrent connections. In one embodiment the second sequence may represent a search for the estimated maximum throughput and corresponding number of concurrent connections in logarithmic time. Again each load test may include applying load to the service for a period of time using a particular number of concurrent connections to the service and determining the throughput achieved by the service for the particular number of concurrent connections. Accordingly the operation shown in may represent at least one load test using a number of concurrent connections greater than or less than that of the previous load test.

As shown in it may be determined whether the throughput achieved in the most recent load test or iteration represents an improvement over the throughput achieved in the previous load test or iteration i.e. in comparison to the load test or iteration immediately preceding the most recent one. If the throughput was improved then the method may continue with another load test or iteration at a different number of concurrent connections as shown in . If the throughput was the same or decreased then the first sequence of load tests may be discontinued or halted. In one embodiment it may be determined whether the latest throughput metric represents an improvement by a particular predetermined threshold such as a percentage increase. For example if the threshold is a 3 improvement then the second sequence of load tests may be discontinued if the most recent load test represents only a 2 improvement in throughput.

As shown in aspects of the optimized configuration of the service may be determined after the second sequence of load tests is finished. For example the estimated maximum throughput of the service may be determined e.g. based at least in part on the second sequence of load tests and indirectly on the first sequence of load tests . The estimated maximum number of concurrent connections that the service can handle may also be determined. In one embodiment the estimated maximum number of concurrent connections may be determined as the number of concurrent connections used in the load test having the estimated maximum throughput.

In one embodiment the load testing module may determine the optimal configuration by testing a single test host. In one embodiment the load testing module may validate the optimal configuration by performing additional load tests on a plurality of test hosts and or . The additional load tests may determine whether the optimal configuration is scalable from one host to many hosts. In one embodiment the load testing module may first test one host then test increasing numbers of hosts to determine the maximum throughput and corresponding number of concurrent connections of a fleet of hosts. For example the load testing module may perform a sequence of load tests in which the number of hosts increases. In one embodiment the number of hosts may increase nonlinearly e.g. by doubling the number of hosts with each successive iteration.

In one embodiment a fleet of hosts that implement the service may sit behind a load balancer that directs requests to individual hosts. The value estimated for the maximum connections may be used to optimize the configuration of the load balancer for a fleet of service hosts including the test host pool . In one embodiment the maximum connections parameter of the load balancer may be assigned the value for the maximum connections as determined by the load testing module . In one embodiment the fleet of test hosts may be subjected to load tests to validate the value for the maximum connections as determined by the load testing module . In one embodiment the fleet of test hosts may be subjected to load tests in which the maximum connections parameter for the load balancer varies within a range of values e.g. a range including the estimated maximum as determined by the load testing module . In this manner the optimized configuration determined by the load testing module for a single host may be validated and or refined for a set of test hosts.

In at least some embodiments a computer system that implements a portion or all of one or more of the technologies described herein may include a general purpose computer system that includes or is configured to access one or more computer readable media. illustrates such a general purpose computing device . In the illustrated embodiment computing device includes one or more processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may include any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store program instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code i.e. program instructions and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other devices attached to a network or networks . In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer readable i.e. computer accessible medium configured to store program instructions and data as described above for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer readable media. Generally speaking a computer readable medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer readable storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer readable medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface . Portions or all of multiple computing devices such as that illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer readable medium. Generally speaking a computer readable medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. In some embodiments a computer readable medium may also include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent examples of embodiments of methods. The methods may be implemented in software hardware or a combination thereof. In various of the methods the order of the steps may be changed and various elements may be added reordered combined omitted modified etc. Various ones of the steps may be performed automatically e.g. without being directly prompted by user input and or programmatically e.g. according to program instructions .

The terminology used in the description of the invention herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms includes including comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As used herein the term if may be construed to mean when or upon or in response to determining or in response to detecting depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected may be construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event depending on the context.

It will also be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first contact could be termed a second contact and similarly a second contact could be termed a first contact without departing from the scope of the present invention. The first contact and the second contact are both contacts but they are not the same contact.

Numerous specific details are set forth herein to provide a thorough understanding of claimed subject matter. However it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances methods apparatus or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter. Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description is to be regarded in an illustrative rather than a restrictive sense.

