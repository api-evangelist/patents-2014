---

title: Determining available screen area
abstract: A technology is described for determining an available screen area for a computing device. An example method may include referencing the dimensions of a root view associated with an application in order to determine an available screen area for a device display. The available screen area may be a portion of the device display that is not occupied by an operating system GUI (Graphical User Interface). A child view attribute associated with a child view descending from the root view may include the dimensions of the root view. The child view attribute may be referenced by an associated application component to obtain the dimensions of the root view and display properties of the application component may be calculated based at least in part on the dimensions of the root view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513783&OS=09513783&RS=09513783
owner: Amazon Technologies, Inc.
number: 09513783
owner_city: Seattle
owner_country: US
publication_date: 20140317
---
Operating systems executing on a computing device may expose APIs Application Programming Interfaces to applications that enable an application to request computing environment information for the computing device. For example an application may obtain information related to a computing device s hardware file systems processing events graphical user interface etc. For instance when an application is opened on a computing device the operating system may be queried via an API to determine screen size dimensions for the computing device s display. In some cases the screen size dimensions returned may be the actual screen size of a computing device display and not an available screen area that accounts for operating system generated graphical user interfaces e.g. a status bar a tool bar a start bar etc. that may be displayed on the computing device display.

Some computing devices may include a base operating system that provides one or more graphical user interfaces and a shell operating system that may provide additional graphical user interfaces. For example a computing device may execute a base operating system that may be the lowest level of hardware management on a computing device as well as an operating system shell that interfaces with the base operating system. Graphical user interfaces and related graphical user interface controls provided by a base operating system as well as a shell operating system that are displayed on a computing device may reduce an amount of screen space available to display an application when the graphical user interfaces are displayed in combination with an application.

A technology is described for determining an available screen area of a device display that may include one or more graphical user interfaces provided by an operating system e.g. by a base operating system and or an operating system shell by referencing a root view attribute for the dimensions of the root view and including the dimensions in descending child views. A root view attribute may be an attribute associated with a root view in an application view hierarchy where child views related to the root view descend from the root view. In one example a view root or child view may be an object that handles user interface interaction events e.g. clicks keystrokes etc. and may be included in an application s screen layout. A view may be a base class e.g. structure for application components e.g. windows drawable objects text boxes controls etc. within an application. An attribute linked to a view may be used to store information about the view e.g. the dimensions of the root view making the information available to child views that are descendants of the root view as well as available to include in the child views via a child view attribute.

A parent window in one example may be a base application component comprising a window sized to the dimensions of a root view i.e. an available screen area where other child application components may be graphically drawn on top of the parent window. A root view may be linked to a parent window and child views may be linked to application components e.g. child windows drawable objects controls control groups etc. descending from the parent window. As such a child view may be referenced to obtain information that may be included in a child view attribute.

When determining a size and or screen position of a child component descending from a parent window a child view attribute may be referenced to obtain the dimensions of the root view. Because the root view when launched may have been sized to the dimensions of the available screen area the dimensions of the root view may be equal to the available screen area. As a result the root view may be referenced to obtain the dimensions of the root view which may be used in part to calculate the size and or screen position of a child application component.

In one example configuration upon launching an application a root view may be sized to an available screen area and a parent window may then be displayed within the root view on a computing device display that may include one or more operating system GUIs Graphical User Interfaces . The dimensions of the root view may be the same as the available screen area of the computing device display i.e. the portion of the device display not occupied by an operating system GUI . For example the dimensions of the root view may be the area of the computing device display not occupied by a status bar UI User Interface and or a soft key UI. In order to make the available screen area available to application components that are descendants of the parent window dimensions of the root view i.e. the available screen size may be included in child views associated with the application components. In one example an application component e.g. a child window a drawable object a control etc. that is a descendant of the parent window can reference a child view for an attribute that contains the dimensions of the root view i.e. the available screen area which may then be used to determine display properties for the application component. For example a request to display an application component on a computing device display may be received whereupon the child view attribute may be referenced and the size and or screen position of the application component may be calculated based in part on the available screen area obtained from the child view attribute.

Also in this example an operating system shell may provide a soft key UI . A soft key UI may be a software key bar having a number of user interface controls that allows a user to navigate a computing device and access content available on the computing device . In one example configuration a soft key UI may be provided by an operating system shell that may be installed on a computing device and may execute on top of a base operating system within an operating system hierarchy. A soft key UI may in one example include a home control that allows a user to navigate to a computing device s home screen a back control that allows the user to navigate backward through a hierarchical relationship between the computing device s display windows a search control that allows a user to search content contained on the computing device and any other navigation control that may be included in a soft key UI .

A computing device may include any number of operating system GUIs that may be provided by a base operating system and any number of operating system shells. The enumerated operating system GUIs above i.e. the status bar UI and the soft key UI are merely one example configuration of a computing device and any operating system GUI that may be included in a display is within the scope of this disclosure.

In one example configuration when launching an application on a computing device an available screen area may be calculated allowing a root view of the application to be sized to the available screen area and a parent window may be constructed and displayed within the root view . The available screen area may vary depending on whether an operating system GUI e.g. a status bar UI and or a soft key UI may be displayed in combination with the parent window. For instance in one mode a status bar UI and a soft key UI may be displayed in combination with a parent window. In another mode a status bar UI may be displayed in combination with a parent window and a soft key UI may be minimized or hidden. And in another mode all operating system GUIs e.g. the status bar UI and the soft key UI may be hidden and only a parent window may be displayed. In one example application settings may determine which of the above modes may be applied when the application is launched i.e. whether an operating system GUI may be displayed in combination with a parent window .

After determining which if any operating system GUIs are displayed on the display the available screen area may be determined. For example where a status bar UI and a soft key UI are to be displayed in combination with a parent window the available screen area may be the portion of the display that is not occupied by the status bar UI and the soft key UI . After determining the available screen area the root view may be sized to the dimensions of the available screen area and the parent window may be constructed and displayed within the root view .

The available screen area can be made available to child application components by referencing a root view attribute containing the dimensions of the root view and including the dimensions in a child views e.g. in a child view attribute that descend from the root view . Because the root view was sized to the available screen area when the root view was created the root view dimensions may be equal to the available screen area . A root view may be the topmost view in an application s view hierarchy. For example where a root view may be a topmost view in an application view hierarchy the root view may be accessible to child views that descend from the root view . As such a root view attribute containing the dimensions of the root view i.e. the available screen area may be included in child views. Thereafter any child application component associated with a child view that is a descendant of the root view may reference the child view for an available screen area attribute to obtain the available screen area and calculate a size and or a screen position based in part on the available screen area .

As an illustration a first stage may include sizing a root view to an available screen area . A second stage may include referencing a root view attribute associated with the root view to obtain the dimensions of the root view i.e. the available screen area and include the dimensions in any child views that descend from the root view . And a third stage may include referencing an attribute of a child view associated with a child window and or a control to obtain the available screen area i.e. the dimensions of the root view . The child window may be sized to a defined percentage of the available screen area and the control which may be placed on the child window may be positioned on the child window based in part on the available screen area e.g. the position of the control may be offset from the parent window based on the available screen area .

The screen area module may be used to determine an available screen area of a mobile device display in which application content may be displayed. The dimensions of a mobile device display in which application content may be displayed may vary. In one example a mobile device display may include operating system GUIs such as a status bar UI provided by a base operating system and or a soft key UI User Interface provided by an operating system shell. An application parameter may specify whether certain operating system GUIs may be displayed in combination with an application. For example an application parameter may specify that a mobile device display not include any operating system GUIs when displaying an application window making an available screen area equal to the actual physical screen size of the mobile device display. Also an application parameter may specify that only certain operating system GUIs are to be displayed when displaying an application window making an available screen area equal to the portion of the mobile device display not occupied by an operating system GUI.

Because the screen area in which content may be displayed may vary the physical dimensions of a mobile device display returned by an operating system API Application programming Interface may not be sufficient for determining the available screen area for the mobile device display. For instance making an operating system API request for a screen size may result in the return of dimensions that are the actual height and width of a physical mobile device display. Thus any portion of the mobile device display that may be occupied by an operating system GUI may be included in the screen size making the screen size returned by the operating system API an inaccurate representation of an available screen area that includes an operating system GUI.

In one example configuration an accurate available screen area may be obtained by referencing a root view attribute after an associated root view is sized on a mobile device display. For example upon launching an application a system process may determine an available screen area in which to display a parent window associated with the application by referencing the application s properties and determining whether any operating system GUIs are to be displayed in combination with the parent window. A root view an object that handles user interface interaction events for the parent window may be sized to the available screen area and the parent window may then be rendered within the root view. Because the dimensions of the root view may be equal to the available screen area the dimensions of the root view which may be available in a root view attribute may be referenced and may be included in a child view descending from the root view by setting a child view attribute to the root view dimensions. Thereafter any child application component that is a descendent of the parent window may reference an associated child view attribute to obtain the available screen area. The available screen area may then be used in determining a size and or a screen position of the child application component.

The root view attribute and the child view attribute in one example configuration may be stored in a memory module such as RAM Random Access Memory . The root view attribute and the child view attribute may be included within an application component view hierarchy where a root view may be the topmost parent view in the view hierarchy and child view attributes may descend from the root view.

The orientation module may be configured to detect a change in orientation of the mobile device that results in redrawing a parent window. For instance changing the mobile device s orientation may cause the mobile device display to change display modes e.g. landscape mode and portrait mode . When the display mode changes e.g. from landscape mode to portrait mode the display e.g. application components may be redrawn on the mobile device display. The orientation of the mobile device may determine an orientation and size of an operating system GUI e.g. a soft key UI and or a status bar UI . As a result an accurate available screen area may be determined in part on a mobile device s orientation.

For example when an application is launched some UI components may be programmed to dynamically display at one edge of a mobile device display based on a display mode. As an illustration an operating system GUI such as a status bar UI may be set to display at the top of a mobile device display both in portrait mode and in landscape mode. As such the size of the status bar UI may change based on the orientation of the mobile device e.g. the status bar UI may be sized smaller in portrait mode as compared to the size of the status bar UI in landscape mode . Because the display mode of a mobile device may change the available screen area of a mobile device display due to an orientation of an operating system GUI an available screen area stored in a root view attribute and any child view attributes may need to be updated based on the orientation of the mobile device . Therefore upon detecting a change in orientation of the mobile device and or a change in the display mode the orientation module may call the screen area module . The screen area module may then be used to update the root view attribute and any child view attributes with the updated dimensions of the available screen area.

The component constructor module may be used to calculate a child application component position and or size based at least in part on a child view attribute associated with a child view. A child application component may be for example a child window a drawable object a control or other child application component descending from a parent window.

Upon an event e.g. selecting a button control a hyperlink etc. that creates a child application component a child view attribute may be referenced in order to obtain an available screen area which may then be used to calculate a size and or screen position of the child application component. As an illustration upon selecting a button control within a parent window an event may be triggered that creates a child window. The button control event may call the component constructor module whereupon a button control view associated with the button control may be referenced from which an available screen area stored in a child view attribute associated with the button control view may be retrieved.

Having obtained an available screen area from the child view attribute the size and or screen position of a child application component may be calculated. As one example dimensions of a child window size may be calculated by setting the dimensions of the child window to a defined percentage of the available screen area. As a specific example dimensions for a child window may be set to 50 or 80 of an available screen area. Further after sizing the child window the child window may be positioned within the center of the available screen area. As another specific example a screen position of a drawable object within an application window e.g. a parent window or a child window may be determined by offsetting the position of the drawable object based on the available screen area. Using the available screen area to determine in part a position for a child application component may help to avoid misalignment of the child application component within a mobile device display.

The display module may be used to render application components on a mobile device display. For example after a size and or screen position of an application component may be determined the application component may be rendered on a mobile device display. The mobile device display may be a touchscreen that displays an interactive graphical user interface . The mobile device may include hardware processor devices hardware memory devices and Input Output I O device communication to enable communication between the hardware devices and I O components. Networking devices may be provided for communication across a network with remote computing devices. The networking devices may provide wired or wireless networking access. Examples of wireless network access may include cellular network access WI FI network access or similar network access.

The computing device may include a number of modules similar to those described above in relation to . For example the computing device may include a screen area module a component constructor module a display module as well as other services processes systems engines or functionality not discussed in detail herein. The computing device e.g. a laptop may include a display such as a liquid crystal display LCD screen gas plasma based flat panel display LCD projector cathode ray tube CRT or other types of display devices etc.

A memory module may include RAM Random Access Memory that is accessible to the computing device . Data stored in the RAM may include for example a view hierarchy associated with an application executing on the computing device . The view hierarchy may include a root view from which a number of child views may branch out. The root view may be associated with a parent window and the root view may have a number of attributes that may contain information related to the root view. For example an attribute may contain dimensions of the root view. In one example the dimensions of the root view may represent an available screen area of a display for the computing device . Storage media comprising the memory module may include volatile or non volatile RAM e.g. Flash RAM optical media hard drive type media a SAN Storage Area Network etc. The memory module may be representative of a plurality of memory modules as can be appreciated.

Moving now to various example display modes for a mobile device are illustrated that may in part determine an available screen area in which an application window may be displayed. The example display modes may include a standard mode a full screen mode and a total full screen mode . A display mode may determine which if any operating system GUIs may be displayed in combination with an application window. In one example a parameter associated with an application may specify which display mode may be used when executing the application. For example the parameter may specify that a standard mode a full screen mode or a total full screen mode be used when displaying an application.

A standard mode in one example may display in combination with an application any operating system GUIs that may be available to display on a mobile device . Operating system GUIs may be user interfaces that allow a user to navigate a mobile device .

As an illustration of operating system GUIs that may be displayed on a mobile device a mobile device display may include a status bar UI and a soft key UI where the status bar UI may occupy a top portion of a display both in a portrait mode and in a landscape mode and a soft key UI may occupy a bottom portion of the display in portrait mode and a side portion of the display in landscape mode . The available screen area of the display may be the portion of the display not occupied by the status bar UI and the soft key UI . When executing an application having a parameter that specifies a standard mode the application may be sized to the available screen area . Namely the length of an application window may be sized to the length of the available screen area and the width of the application window may be sized to the width of the available screen area .

One example method for determining an available screen area for an application that includes a parameter specifying a standard mode may include launching the application whereupon any operating system GUIs available to display on a mobile device are displayed and a root view may be sized to the dimensions of the available screen area not occupied by the operating system GUIs. For example the dimensions of the root view may be calculated by first identifying a total screen size of a device display i.e. the physical width and height of the device display . Then the dimensions of any operating system GUIs may be identified and the operating system GUI dimensions may be subtracted from the total screen size. After sizing the root view to the available screen area a parent window may be rendered to the dimensions of the root view. Thereafter any child views descending from the root view may include an attribute containing the dimensions of the root view which may be available to child application components.

When in standard mode the available screen area may vary based on the orientation of the mobile device i.e. portrait mode and landscape mode . For example a status bar UI may occupy more display space while in landscape mode and less display space while in portrait mode thereby increasing or decreasing the length and width of the available screen area . As a result when the orientation of the mobile device changes a root view attribute and any child view attributes may be updated with the new available screen area .

A full screen mode in one example may hide operating system generated operating system GUIs with the exception of a handle that may be used to display an operating system GUI such as a soft key UI when selected by a user. Thus while in full screen mode an application and a handle associated with a soft key UI may be displayed. Via a touchscreen a user may select the handle and perform a sliding motion that reveals the soft key UI . While in full screen mode the soft key UI may be minimized during times of nonuse by hiding the soft key UI and displaying the handle allowing for retrieval of the soft key UI . When executing an application having a parameter that specifies a full screen mode the available screen area may be equal to a length and a width of a display for a mobile device that includes a portion of the display occupied by the handle where the handle may be displayed on top of an application. In other words the full physical dimensions of a mobile device display may be available to display an application and the handle may overlay a portion of the application. Further when selecting the handle to reveal a soft key UI the soft key UI may be displayed on top of e.g. overlaid the application rather than resizing application windows to accommodate the soft key UI .

One example method for determining an available screen area for an application that includes a parameter specifying a full screen mode may include launching the application whereupon operating system GUIs may be hidden i.e. not displayed except for one or more handles used to retrieve an operating system GUI. A root view may be sized to the dimensions of the available screen area which may be the actual physical dimensions of a mobile device screen. The dimensions of the root view may then be referenced and included in child views e.g. a child view attribute making the dimensions i.e. the available screen area available for sizing and or placing child application components.

A total full screen mode in one example may hide the operating system GUIs including any handles associated with any operating system GUIs. As a result the full dimensions of a mobile device display may be made available to display an application. While in full screen mode the available screen area may be equal to a length and a width of a display for a mobile device . An example method for determining an available screen area for an application having a parameter specifying a total full screen mode may be similar to the method described above in that a root view may be sized to the dimensions of the available screen area which may be the actual physical dimensions of a mobile device screen. It should be noted that the example display modes described above are merely illustrations of display modes that may be used to provide a user with a graphical user interface in combination with displaying an application. Therefore a method used to determine an available screen area is not limited to the example display modes presented in .

As illustrated in different operating systems may provide various operating system GUIs. For example a base operating system which may be the lowest level operating system in an operating system hierarchy may provide an operating system GUI such as a status bar UI that provides certain system information. As a specific example a status bar UI may provide network status information battery status information application status information etc. In another example an operating system shell which may be an outer layer operating system in the operating system hierarchy may provide an operating system GUI such as a soft key UI providing navigation functionality similar to hardware keys used to navigate a mobile device. As a specific example a soft key may perform the function of a home key that returns a user to a home screen. An application executing on a mobile device may display application components on a mobile device display where the application components may be sized in order to accommodate any operating system GUIs provided by an operating system.

The views within the view hierarchy may include attributes that contain information related to the view. For example a root view may include an attribute containing dimensions of the root view. Child views e.g. may include an attribute that may be used to store the dimensions of the root view making the dimensions i.e. the available screen area available to an application component associated with a child view. As an illustration a root view may be sized to an available screen area and then a parent window may be rendered on a display screen within the dimensions of the root view . The parent window may include a button control that when clicked may create an event e.g. a button control click that causes a child view to be generated and a child window to be rendered. When calculating the size and position of the child window to display on the display screen the button control view may be referenced to determine an attribute associated with the button control view that contains dimensions of the root view . The attribute may then be referenced in order to obtain the dimensions of the root view after which the size and dimensions of the child window may be calculated based in part on the dimensions.

Additional child application components that may be rendered and displayed may also reference a child view attribute using the same method. For example a drawable object may be placed on the child window . When calculating the screen position of the drawable object an associated drawable view may be referenced obtain the dimensions of the root view from a drawable view attribute.

As an illustration of how the size and or screen position of a child application component may be determined shows a child window and a drawable object that may be displayed on a display screen based in part on an available screen area . When calculating dimensions for the child window an available screen area may be retrieved from an associated child view attribute and the dimensions of the child window may be calculated based in part on the available screen area . In one example the dimensions of the child window may be based on a percentage of the available screen area . In another example a predetermined number of units e.g. points inches centimeters pixels etc. may be subtracted from the available screen area . In yet another example the child window may be sized to the available screen area making the dimensions of the child window equal to the available screen area . In addition after sizing the child window the position of the child window may be determined based in part on the available screen area . For example the child window may be positioned in the center of the available screen area or at a predetermined offset of an available screen area edge.

As illustrated a drawable object may be rendered and displayed on top of the child window . The screen position of the drawable object may be based in part on the available screen area . For example coordinates may be specified for the drawable object providing a layout engine with one or more reference points used to determine a screen position for the drawable object . If the coordinates are used in combination with the actual physical dimensions of the display screen a misalignment of the drawable object may result. Therefore in one example the coordinates may be used in combination with the available screen area . For example the edges of the available screen area may be used in determining an offset for the drawable object . In another example the available screen area may act as a reference coordinate system that is used to align the drawable object with the coordinates within the display screen . In another example case predetermined offsets may be used to determine a screen position of the drawable object based in part on an available screen area edge. As will be appreciated the available screen area may be used in part to calculate a size and or screen position of any application component that may be displayed on the display screen of a mobile device .

An operating system GUI may enable a user to navigate a computing device execute device and or software functionality view system information view user interest information social media weather news etc. as well as any other functionality that can be provided by an operating system GUI. Examples of operating system GUIs may include a status bar UI a soft key UI a GUI widget a taskbar UI a toolbar UI etc. As will be appreciated any number and or type of operating system GUIs are within the scope of this disclosure. In one example when an application is launched an available screen area may be determined. The available screen area may be a portion of a device display not occupied by one or more operating system GUIs. A root view may then be sized to the available screen size and a parent window may be constructed and displayed within the root view.

Because the dimensions of the root view may be equal to the available screen size as in block the dimensions of the root view may be included in a child view attribute associated with a child view descending from the root view where the dimensions of the root view are equal to the available screen area. Views related to the root view within a view hierarchy may inherit the attribute containing the root view dimensions which can be referenced in order to obtain the available screen size.

As in block display properties for a child application component may be determined based at least in part on referencing the child view attribute for the dimensions of the root view. For example display properties such as the dimensions of a child application component may be based in part on an amount of available screen space that is available to display the child application component on a device display. Further display properties such as the coordinates of a child application component may also be based in part on the size boundaries of an available screen size. In one example a child application component may determine an associated child view by referencing a view hierarchy associated with the child application component. An attribute containing the available screen area associated with the child view may then be referenced and the display properties for the child application component may then be calculated based in part on the available screen size.

The memory device may contain services and modules that are executable by the processor s as well as data for the modules . Examples of modules contained in the memory device may include a screen area module a component constructor module an orientation module and other modules that may be located in the memory device . The modules may execute the functions described earlier. A data store may also be located in the memory device for storing data related to the modules and other applications along with an operating system that is executable by the processor s .

Other applications may also be stored in the memory device and may be executable by the processor s . Components or modules discussed in this description that may be implemented in the form of software using high programming level languages that are compiled interpreted or executed using a hybrid of the methods.

The computing device may also have access to I O input output devices that are usable by the computing devices. An example of an I O device is a display screen that is available to display output from the computing devices. Other known I O device may be used with the computing device as desired. Networking devices and similar communication devices may be included in the computing device. The networking devices may be wired or wireless networking devices that connect to the internet a LAN WAN or other computing network.

The components or modules that are shown as being stored in the memory device may be executed by the processor s . The term executable may mean a program file that is in a form that may be executed by a processor . For example a program in a higher level language may be compiled into machine code in a format that may be loaded into a random access portion of the memory device and executed by the processor or source code may be loaded by another executable program and interpreted to generate instructions in a random access portion of the memory to be executed by a processor. The executable program may be stored in any portion or component of the memory device . For example the memory device may be random access memory RAM read only memory ROM flash memory a solid state drive memory card a hard drive optical disk floppy disk magnetic tape or any other memory components.

The processor may represent multiple processors and the memory may represent multiple memory units that operate in parallel to the processing circuits. This may provide parallel processing channels for the processes and data in the system. The local interface may be used as a network to facilitate communication between any of the multiple processors and multiple memories. The local interface may use additional systems designed for coordinating communication such as load balancing bulk data transfer and similar systems.

While the flowcharts presented for this technology may imply a specific order of execution the order of execution may differ from what is illustrated. For example the order of two more blocks may be rearranged relative to the order shown. Further two or more blocks shown in succession may be executed in parallel or with partial parallelization. In some configurations one or more blocks shown in the flow chart may be omitted or skipped. Any number of counters state variables warning semaphores or messages might be added to the logical flow for purposes of enhanced utility accounting performance measurement troubleshooting or for similar reasons.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which comprise the module and achieve the stated purpose for the module when joined logically together.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices. The modules may be passive or active including agents operable to perform desired functions.

The technology described here may also be stored on a computer readable storage medium that includes volatile and non volatile removable and non removable media implemented with any technology for the storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media include but is not limited to non transitory media such as RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tapes magnetic disk storage or other magnetic storage devices or any other computer storage medium which may be used to store the desired information and described technology.

Reference was made to the examples illustrated in the drawings and specific language was used herein to describe the same. It will nevertheless be understood that no limitation of the scope of the technology is thereby intended. Alterations and further modifications of the features illustrated herein and additional applications of the examples as illustrated herein are to be considered within the scope of the description.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more examples. In the preceding description numerous specific details were provided such as examples of various configurations to provide a thorough understanding of examples of the described technology. It will be recognized however that the technology may be practiced without one or more of the specific details or with other methods components devices etc. In other instances well known structures or operations are not shown or described in detail to avoid obscuring aspects of the technology.

Although the subject matter has been described in language specific to structural features and or operations it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features and operations described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous modifications and alternative arrangements may be devised without departing from the spirit and scope of the described technology.

