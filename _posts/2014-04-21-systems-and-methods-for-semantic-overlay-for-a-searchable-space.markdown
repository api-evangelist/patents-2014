---

title: Systems and methods for semantic overlay for a searchable space
abstract: The embodiments of the present invention provide a novel way of searching and interacting with content available via a network, such as the Internet, and the World Wide Web. In some embodiments, systems and methods provide a semantically-oriented structure for organizing and accessing content items. The semantic organization can be derived by leveraging user interactions with the content items. The systems and methods leverage the semantics of the content items to help the user find content items that are consistent with the purpose of the user's search. In addition, the embodiments provide a novel navigation paradigm of search results and content items so that the user can more intuitively and more efficiently get information form an information space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935238&OS=08935238&RS=08935238
owner: Bublup Technologies, Inc.
number: 08935238
owner_city: McLean
owner_country: US
publication_date: 20140421
---
The present application is a continuation of U.S. application Ser. No. 13 921 726 entitled SYSTEMS AND METHODS FOR SEMANTIC OVERLAY FOR A SEARCHABLE SPACE filed Jun. 19 2013 which claims priority to U.S. Provisional Application No. 61 661 708 entitled SEMANTIC SEARCH OVERLAY SYSTEM filed Jun. 19 2012 and U.S. Provisional Application No. 61 836 798 entitled SEMANTIC SEARCH OVERLAY SYSTEM filed Jun. 19 2013 which are incorporated by reference in their entirety.

The present invention relates to information systems and more particularly embodiments of the present invention relate to systems and methods for improving the accuracy of searches for information in an information space.

Information spaces such as the Internet enterprise networks etc. allow widespread access to large collections of information. For example users commonly use search engines to locate and select their desired information on the Internet. Many entities such as businesses individuals government organizations etc. now use the Internet to publish information advertise goods and services that they provide. Publishers have an interest in ensuring that theft content can be easily located. Also users performing searches have an interest in locating items that are most relevant to their search.

Depending on the information space and how it is organized a user s search may seek items containing varying types of information. Special tags may be placed on items to permit the user to make use of those tags in specifying a query to a search engine. The tags may refer to various properties of items such as the date of publication the size of the items the number of times the items have been accessed etc.

In conventional search engines the user that is searching must guess the correct combination of keywords for a desired concept. Content provider also must guess as to how the document will be searched. People are searching for words not ideas in the prior art. This guessing problem represents an issue for both content users and content providers. A variety of words can map to ideas in multiple and non unique ways making tagging and searching based on keywords difficult. However a combination of words is unlikely to be the same between two users. Search engines operate on literal matching in actual content or tags. Accordingly concept or semantic matching of search engines is still poor. Unfortunately even with the use of such tags conventional search engines simply match keywords and are ineffective at leveraging the true meaning or semantics of the search. Conventional search engines are very ineffective at leveraging the meaning that is inherent in content items. Indeed because for many items item content is expressed in natural language with no convention or structure governing the meaning of the items search engines are in general unable to locate items based on their meaning or significance.

The conventional search interface consisting of a query box and a list of search results provides a relatively poor user experience for navigation of information spaces. Furthermore attempts at providing enhanced search such as faceted metadata tags etc. have failed to significantly improve the search experience. The use and maintenance of metadata and tags is difficult to produce and can be of varying quality.

As noted search engines assist users in locating search items such as documents images videos files etc. typically based on literal keyword matching or approximate matching to the words or symbols specified in a user s query or search request. However because of the extremely large variety and arbitrary representation of search items it is not possible for conventional search engines to obtain or determine semantic information about search items. Thus with conventional technology users must search on a literal basis rather than a semantic basis. Unfortunately while this approach can locate some items that may be of interest to a user this form of searching produces numerous useless results and fails to provide the user an intuitive mechanism for browsing or navigating through the results.

In general the present invention provides a novel way of searching and interacting with content available via a network such as the Internet and the Worldwide Web. In some embodiments systems and methods provide a semantically oriented structure for organizing and accessing content items. The semantic organization can be derived by leveraging user interactions with the content items. The embodiments of the present invention provide an approach for more efficient searching knowledge discovery content discovery and browsing or navigating in an information space such as the World Wide Web or WWW on the Internet. The system leverages the semantics of the content items and the purpose of the user s search. In addition the embodiments provide a novel navigation paradigm of search results and content items so that the user can more intuitively and more efficiently get information form an information space such as the Internet. The information space may comprise various content sources.

In some embodiments a person can navigate or descend through various levels or nodes of an organized structure. This structure can be any type of data structure or graph that is cyclic acyclic as well as hierarchical or non hierarchical. In some embodiments the system employs a tree like structure such as an organized content tree OCT . In one embodiment the OCT is leveraged to support a display of folders. The folders may be structured to provide a progressively narrower scope of subject matter which helps the users search and or browser for content of a specific type.

A content source is any body of information having individual items of content. An example of such a content source is the World Wide Web or WWW where items are the resources accessible via uniform resource locators URLs via the Internet. The items of content may be web pages images files or other items that can be provided to a user such as via a browser or other type of user interface application.

Optionally the embodiments may allow the same content reference i.e. a reference to the same item in the content source to be present in the organized structure in multiple folders. Some embodiments may place a limit on the number of folders that can reference the same item while other embodiments may allow this number to be unbounded.

In some embodiments the system leverages the semantics of the items based on interpreting user interactions and organizes the content in an organized structure such as an OCT. The system may also leverage the semantics of the items for example based on user s declarations about the content items.

Some embodiments are based on systems and methods for determining the semantics of content as indicated by user derived information and attempts to improve the search results based on user derived information. User derived information may be any information that originates from an individual user such as the user requesting the search a group of users or an entire community of users. That is the embodiments provide mechanisms and algorithms for improving and capturing semantics of items as organized by users in a user community based on among other things user interactions such as a click through printing saving email etc. Accordingly in some embodiments the system leverages user interactions to determine semantics about the content items and provides an organized structure such as an OCT so that users can search and or navigate through content items.

In some embodiments a search operation with a conventional search engine is not required in many of the modes. For example a user can simply navigate through the OCT. The organization and structure of the OCT itself provides semantic information and value. Of note the embodiments capture and leverage semantic information from the user community and their interaction with the content items and OCT. The OCT uses this information to assist the user. By leveraging user information the OCT is constantly changing and responding to user interactions and feedback. For example the embodiments can provide systems and methods that enhance a user s ability to organize the raw search results from one or more search engines. The user derived information may be anonymous or identified with one or more users. Classification of the document by the system from user derived information is a key aspect of the invention. An author or creator of the content items may attempt to self declare a content item such as a document for a particular classification. This may be used in combination with the user interactions with the content item.

The embodiments provide an alternative to conventional search engines that predominantly employ index based or query based searching for users seeking specific types of content in large information repositories such as the World Wide Web. The embodiments can apply to repositories that are small or moderate in size as well as the largest distributed repositories such as the World Wide Web. Unlike conventional search engines in the embodiments the user is provided a more controlled and semantically driven approach to locating content. The known search engines do not provide a semantically oriented approach to accessing the content. The embodiments provide for various modalities of searching using queries and navigating an organized structure such as a hierarchy of interactive menus or folders in a user interface alone or in combination.

For purposes of convenience the present disclosure may refer to some embodiments of this concept as a Semantic Search Overlay System or SSOS . The SSOS generates and maintains a semantic overlay that users may use to efficiently retrieve and navigate results obtained from information spaces and content sources. The overlay may be any separate but related body of information that is displayed and or mapped to the content source and content items. The overlay facilitates access to the contents in one or more ways that is semantically intuitive to the user. In some embodiments the semantic overlay may be implemented in a tree structure or hierarchy. For example in one embodiment the SSOS comprises an organized structure or organized content base OCB of which an organized content tree or OCT is an example that is depicted to the user in the form of a hierarchically organized set of groupings stacks directories or folders and the like. As noted the SSOS and related methods may employ any type of structure or graph to organize the content items in a semantic fashion. For example the organized structure may be a graph that is cyclic or acyclic. In addition the organized structure may be a hierarchical tree and comprise progressive levels of narrower semantic scope. For purposes of illustration an OCT is provided as an example of an organized structure that is created by leveraging user interactions with the content items. Those skilled in the art will recognize that the OCT is just one form of organized structure that may be used in the embodiments. Other structures are possible and are within the principles of the present invention.

The SSOS may also comprise a content policy tree engine or CTPE to populate and maintain the OCT for example using user derived information. The figures illustrate an OCT implementation maintained by a CTPE.

In addition a result organization tool or ROT may be provided in some of the embodiments and assists the user. The ROT may be configured to collect or record the user derived information. As will be described further below the ROT may operate alone or in conjunction with conventional search tools. Optionally the ROT may then share the user derived information with the CTPE or any other type of semantic information with the CTPE. The CTPE may be implemented using well known hardware and software such as one or more servers or other form of computer system. The CTPE may then employ various algorithms and workflows to maintain the OCT based on this feedback from the ROT. The ROT can be an application a program a tool a widget etc. that assists the user with organizing content items.

As one feature the ROT provides enhanced organization of raw results obtained from existing search engines. The organization of the search items may be presented in various ways and comprise filtering sorting categorizing and grouping. The organization of the search items may be based upon an overlay of semantic information that does not require embedded semantic information in the content.

In some embodiments the ROT may operate in one or more modes. For example the present disclosure describes four 4 exemplary modes of operation to illustrate the principles of the present invention. In a first mode or pure consumer mode the ROT may operate as a stand alone client running on the user s machine. In this private stand alone mode the ROT does not request or share information about the user or the user s searches. In a second mode the ROT may selectively request information from the OCT to assist in organizing the user s search. In this private consumer mode the ROT may continue to keep private information about the user and the user s searches. In some embodiments the ROT may populate access and maintain a local OCT or other type of organized structure. The local repository could be organized in various ways such as a tree list etc. that is specific to an individual user or group of users associated with a particular client or user of the ROT. The local OCT may also be specific to particular purpose of a user or client device . The storage for the local OCT may be implemented physically on the client device such as a hard disk drive or implemented virtually using remote services over a network such as cloud based storage. In addition the local OCT may comprise a similar semantic organization as the OCT but comprises content items that are retained for the specific purposes of a user.

Alternatively the ROT may be configured to share or cooperate with other search tools of other users and the OCT. For example in a third mode the ROT shares information about the user and the user s searches with the CTPE and the OCT. The ROT may also optionally use the collective information in the OCT to improve and organize the results of searches conducted by a user. Furthermore in a fourth mode or direct search mode the ROT may leverage the information collected in the semantic information base provided by the organized structure created by leveraging the user interactions with the content items such as an OCT.

As noted the ROT may share its user derived information with the CTPE and OCT. The OCT thus becomes a collective knowledge base obtained from the community of users or a collective of users. The knowledge of users may be assembled in various ways and segregated to suit the needs and requirements of any one user or a group of users. For example the OCT may serve as an archive of users searches and their interactions with these searches. Various aspects of this semantic information may be shared with users generally or in limited fashion within groups of users.

The ROT using the OCT may also provide guidance or suggested organizations to searches being conducted by various users. The guidance may be static or depend on the behavior of various users. For example the guidance may relate to organizing search results by category where category information is derived from where documents are positioned in the OCT. Additionally organizational suggestions may be a function of date popularity subject file type etc. As noted above the OCT as an organizing structure may evolve and react to user feedback and user interactions with the content items.

In the embodiments the ROT may employ other features to help with accessing the content items. For example if an OCT comprises a large number of folders or a folder with a large number of content items the OCT and ROT may provide various ways to subdivide or provide a user interface to efficiently present such a large number of folders or content items such as by date range by tags by alphabetical order etc.

Reference will now be made the figures to illustrate various aspects and embodiments of the present invention. Referring now to an exemplary system for an implementation of the semantic search overlay system or SSOS is shown. As shown the SSOS may comprise a network one or more content sources one or more search engines clients a CTPE and OCT . These components will now be described in more detail below.

Network provides a communication infrastructure that couples together the components of the SSOS . The network may comprise one or more networks such as a local area network the Internet or other type of wide area network. In addition network may support a wide variety of known protocols such as the transport control protocol and Internet protocol TCP IP and hypertext transport protocol HTTP . In some embodiments the network may be implemented using the Internet.

Content sources or information spaces conceptually represent any collection of information provided by a publisher or other source of information. Content sources may comprise various types of content sources such as documents multimedia images etc. A content source is any body of content having individual items of content. An example of such a content source is the World Wide Web where items are any resources accessible via uniform resource locators URLs . The items of content may be web pages files or other items that can be provided to a user such as via a browser or other type of user interface application. Furthermore the embodiments may incorporate various types of storage such as direct attached storage network attached storage and cloud based storage to store and access its information.

Search engines represent any system or application that is designed to search for information available on the network . For example search engines may represent such well known conventional search engines as Google Yahoo Bing Alta Vista etc. that commonly provide only a simplistic user interface for searching and presenting search results such as with simplistic lists. In general search engines may present their results in a list format. In contrast as will be further described below the embodiments of the present disclosure may enhance a user s search by providing a semantic overlay that organizes search results based on their meaning as will be described further below.

Clients provide an interface for SSOS . Client may be implemented using a variety of devices and software. For example client may be implemented on a personal computer laptop computer mobile device such as a smartphone or tablet computer etc. In addition client may run under an operating system such as the LINUX operating system the Microsoft Windows operating system The Apple iOS operating system and the like. Client may also operate through an Internet browser application such as Firefox by Mozilla Internet Explorer by Microsoft Corporation or Netscape Navigator by Netscape Communications Corporation. provides further information regarding client . For example the client may comprise a user side application called the search assistant e.g. the ROT. The ROT may be implemented based on one more software programs employed by the user to process the search items returned by the search engines .

The client may comprise a memory and local storage not shown such as a hard disk drive an external disk drive and the like. In addition the client may utilize various types of storage systems and services such as network attached storage storage area networks and cloud based storage services via the network .

In the embodiments the SSOS attempts to leverage information about user interactions in order to determine or derive semantic information about the content. Below are some examples of the user interactions that can be leveraged by the SSOS .

One of the principal challenges addressed by the SSOS system is placing content items such as documents where the term document is used in a general sense to represent content of any kind similar to resources on the World Wide Web or enterprise network etc. in the appropriate folders within the OCT . One approach is to leverage the intelligence of human users who organize and assign properties to documents.

An additional approach for selecting folders in the OCT which is complementary to the one mentioned above is based on information that is associated with the content items in a declarative manner. The term declarative refers to the fact that someone e.g. an administrator or an individual responsible for publishing the document asserts that certain descriptive information is associated with a given document. The declaration can be made through configuration. Such configuration can be made within a content item itself or in another location that is established by convention. For example in certain types of content sources which store content in files on servers such as the Internet one possible system would be to place the declaration in a file that is stored in the same file system folder or directory as the content items itself and that has the same base name as the content item followed by a pre established suffix. Another possible approach to publishing declarations in a known location would be to place all declarations for content items within a given folder directory inside a single file within that same directory. The file could have any name that is established by convention and reserved for this purpose such as .semantic declaration . It is straightforward to create a mechanism to associate declarations with documents in the content source.

Regardless of the approach taken for storing declarations the purpose of a declaration is to provide a suggestion to the SSOS for the placement of the document within the OCT . The structure of the declaration adheres to a convention specified by the SSOS operator. In other words for the SSOS to interpret the declaration correctly it must contain certain elements and may have additional optional elements. Many structures are possible and our purpose here is not to describe all of the possible ones but rather the type of information that is needed or useful in a declaration.

Of course the declaration may identify the document of interest. The simplest and most literal form of declaration then simply states one or more pathnames specifying the location in the OCT where the document should be placed. The OCT may allow the same document to be positioned in multiple locations within it.

Additionally the SSOS may allow for a more abstract or partial suggestion for the positioning of the document within the OCT . For example a partial pathname that omits the initial folders in the path is a possible specification. In such a case the declarer is requesting that the SSOS use its own methods to determine the complete pathnames in which to position the document. One possible method could for example select any full pathname that ends with the partial path specified in the declaration. Another possible method would consider any full pathname ending with the partial path but in addition select the best complete path i.e. the lowest level folder based on an affinity between the document and other documents in that same location. Many algorithms can be used to determine affinity including commonality of content or commonality of meta data among the documents being compared.

Similarly another possible abstract form of declaration can omit trailing components of the path and allow the SSOS to select the complete pathnames based on its own automated methods. Again as an example affinity calculation methods can be used for this purpose.

Additionally the information in the declaration can be processed in conjunction with information gleaned from the SSOS user population with respect to the document of interest. In other words the declaration is treated by the SSOS as a suggestion that carries some weight but is not the sole determinant of the document s ultimate position in the OCT . For example the publisher of the document may have a desire to position the document in a location that most users do not agree is appropriate. In such a case the SSOS may choose to accept the opinion of the user population rather than the opinion of the document s publisher. It is clear that many different policies can be implemented to blend the user information with the declarative information. Furthermore these policies may offer tuning mechanisms such as weights or coefficients allowing an SSOS administrator to grant more importance to one source of information rather than another.

As discussed above for each document a declaration may contain multiple suggestions for OCT folders that would be appropriate locations to contain the document. In certain implementations the conventions for configuration may be extended to allow additional parameters. For example an additional parameter may represent a priority value associated with each suggested location. The priority value may be a number or alternatively a reserved key word such as high medium and low that indicates the strength of the suggestion. For example if two suggestions are made as part of a declaration A and B and A is assigned a priority of 10 and B is assigned a priority of 5 the Declarer i.e. the author of the declaration is stating that it is more important in his opinion to honor suggestion A than suggestion B . This may become important for example if in a particular SSOS implementation there is a limit on the number of locations that a document can occupy.

One concern with supporting a declarative approach is that publishers of documents may abuse the system and suggest that their documents be placed in the most visible locations e.g. higher level folders rather than the most appropriate locations. However the SSOS may implement mechanisms to discourage publishers of documents from committing such actions. For example one mechanism imposes a penalty on a publisher for poor suggestions. Poor suggestions may be determined based on input from the SSOS user community. For example if the vast majority of users indicate through their interactions in the ROT that a suggestion was invalid then the publisher of the document who also assumes responsibility for the declaration of the suggestion s may be penalized by the SSOS . Such a penalty may be reflected by accumulating penalty points for the publisher for example. Furthermore the effect of the penalty may be to ultimately discredit the publisher s suggestions and therefore decrease the likelihood that the SSOS will honor that publisher s suggestions. This is just one example of a feedback system that can be used to encourage good behavior by document publishers who are making declarations for their documents. For example additional penalties or outright disqualification of a publisher may be imposed if a suggestion is considered inappropriate as determined by an SSOS administrator. In general it should be clear that there are various schemes that can be used to accomplish such a purpose.

Note that the immediately preceding discussion relies on the notion of a publisher being known to the system. Indeed if a penalty is to be imposed on a publisher it is clear that the SSOS system must be able to differentiate among different publishers of different documents in order to not penalize the wrong publisher. There are several mechanisms that can be used to identify a publisher. One approach is to consider the container for the document to be the publisher. The concept of a container refers to a group of documents that belong together within a single logical sub area of the content source . For example in the Internet a container could simply be a web site identified by its domain. Every web page within that domain is part of that container and the domain becomes the publisher . In essence the administrators of that domain become responsible for the declarations that are made on behalf of the documents within it. Another possible approach is to associate publisher tags with declarations or with suggestions. These publisher tags would be unique across the entire SSOS and may be provided by a specific authority such as an SSOS administrator or registration service that grants publisher identifiers.

The CTPE is a server side component that collects user interaction information. The CTPE may be implemented using well known components of hardware and software. Alternatively the CTPE may be implemented using cloud based computing services to perform its various processing functions. In general the CTPE is configured to collect or receive a wide variety of information regarding user interactions with the content items. This information may be collected or received on an ad hoc basis or periodic basis directly from the search engines or from the various components of the SSOS the client devices the CTB the ROT etc. The CTPE may receive the user interaction information via any type of communications protocol or mechanism such as an API. For example the CTPE may receive information from the ROT running at clients . As noted in some embodiments the CTPE is configured to support and manage a semantic overlay which may be implemented in the form of an organized content tree or OCT .

In some embodiments the CTPE executes content management algorithms on the user input in order to reflect it in the OCT automatically or interactively. This can include adding new content not previously in the OCT modifying the locations of content currently in the OCT removing items from the OCT or writing new meta data into the items managed by the OCT . The CTPE can be configured to collect or request semantic information from the clients in various ways. For example the ROT may communicate user input either directly or indirectly to the CTPE in response to the user s action or actions. Also the CTPE may be configured to obtain various user derived information from clients . The CTPE may receive this information on a periodic or ad hoc basis. Alternatively the CTPE may be configured to record user derived information from the clients . The CTPE may thus receive user derived information both actively and passively.

The OCS serves as an interface or front end for the OCT . The OCS may comprise various server components that are well known. The OCS may also be implemented using cloud based processing services via the network . The OCS may support various services to the clients such as servicing queries providing organizational guidance etc. based on information from the OCT . OCS may be implemented based on well known hardware and software that provides the information processed by the OCT .

In some embodiments as users take action in their respective ROTs the ROT forwards data about those actions to the OCS which is then forwarded to the CTPE . Alternatively the ROT may be configured to communicate directly with the OCS . The data forwarded may pertain to any aspect of the decisions users are making relative to the items or their search sessions. For the purpose of illustration and to simplify the discussion consider the case in which a user operates on a single content item in the ROT.

Depending on the actions taken the data forwarded may contain the information discussed below. The data forwarded may be explicit feedback such as user s indicating the relevance directly or implicit feedback such as information derived from meta data or the user s interaction. An explicit action is where the user expresses a different semantic definition than the one provided by the OCT . For example the user may specify a category name for a content item obtained as a search result. An implicit action is where the user organizes some content and the CTPE derives semantic information from this user action. Some examples that may be leveraged in the embodiments are provided below.

Many algorithms can be implemented in the CTPE to process the many actions and combinations of actions taken by the user population. It is not the purpose of this document to describe the full scope of such algorithms but rather to describe the overall system concept architecture and operation. Therefore the ideas described below represent only an example of the CTPE processing of certain input from the ROTs .

The most basic form of input is an explicit user suggestion that a content item be positioned in a particular folder in the OCT . Upon receiving such input a possible CTPE algorithm may operate as follows.

As evident in the simple examples provided above many different policies can be devised to process user input and create a SSOS with different characteristics. Note that in this basic example it is also possible that a new folder would have to be created in the OCT or a local OCT to accommodate the user s suggestion. Here again many different policies can be devised to govern the creation of new folders in the OCT .

Below is a description of a variation of the basic case above which also entails the potential creation of new folders. In this variation the user suggests a folder or category name for an item of interest without providing an explicit pathname in the OCT whether new or existing. The OCT may also enable various functions that determine a correspondence or relation between a category and a folder.

Once again many policies and approaches are possible to handle the various cases and sub cases that may arise from user actions. Thus far the discussion has focused on categorization or equivalently placement of items within folders. However many user actions may have more subtle but nevertheless important effects on the SSOS .

For example the ranking or scoring of items within a search session provides meta data that can be used by the CTPE while making determinations about where to locate an item in the OCT . As mentioned above the search session meta data and the search terms used in a search engine may be leveraged to find the best folder in the OCT to contain a new item. However if the item is given a low score by the user then the strength of the item can be considered low and this can be accounted for by the folder selection algorithm used. In the embodiments the score may be included or determined from the meta data or provided as additional meta data.

Also a user s negations of content classifications may represent important information that the CTPE interprets. For example if a user moves an item from a category in the OCT into a different category this action is an indication to the CTPE that the user believes the item would be better classified in a different manner. This information can be used by the CTPE to modify the item s meta data. Furthermore if sufficient actions of this type are taken this may ultimately cause the CTPE to decide to remove the item from the corresponding folders in the OCT . In explicit actions the user is made aware that he or she is communicating with the CTPE via the OCS and the ROT. In contrast for implicit actions the user is not necessarily intending to communicate with the CTPE .

As another example just as the ROT allows users to suggest an explicit categorization for an item it may also allow them to explicitly suggest the removal of an item from a category. The users may take this action upon noticing an item they feel is incorrectly categorized within the ROT or directly within the CTB. Here again sufficient actions of this type may result in the item being removed from the category where it resides and potentially being moved into a different folder.

The discussion above addresses potential policies that can be implemented to address various combinations of user inputs and SSOS . However as should be understood by those skilled in the art this discussion addresses only a small combination of these possible alternatives or options and is provided to illustrate the range of approaches that SSOS enables to capture and leverage the collective intelligence of the user base while providing them with feature level benefits that encourage them to continue providing input.

In one embodiment the CTPE executes content management algorithms on this user input in order to reflect it in the OCT without human intervention. In other embodiments the CTPE can be responsive to administrator or super user input to manage some or all of the content of the OCT .

Furthermore the CTPE may secure its communications with the clients . For example the CTPE may utilize encryption or other forms of encoded communications across the network .

The organized content tree OCT serves as a repository of semantic information provided by or collected from the users of the SSOS and the clients . Thus the contents of the OCT can be used as a secondary information space which partially mirrors and enhances the content sources and itself may be searchable by the users. The OCT may contain information about just the placement of content. The content information itself may be stored in another location for example in a cloud storage service available in network or a storage system accessible by the SSOS . In other words the OCT may be a set of pointers or references to the content or the OCT may comprise copies of some of the content itself.

The system or the user can elect to store a history of their search sessions persistently. This feature may be used to provide a historical timeline of the searches search results users activities and their interactions with the data. This concept ensures persistence of the content.

As noted the SSOS may employ various organization structures to help access or search content items in a semantic fashion. In one embodiment of the SSOS the user can use a search paradigm but may also make use of a navigation paradigm to locate items of interest. In one embodiment since the OCT is organized in a hierarchical manner users may perform file system like operations to refer to items by using pathnames including wild carded portions of the path to refer to groups of items. This can be useful for example to perform an operation on a group of items of interest such as copying printing or searching through only those items for the occurrence of certain data. The OCT can even offer regular expression type search across different sub trees. The SSOS can provide programs and tools such as tools like GREP implemented on UNIX. In other words users can treat the OCT so that it appears like a file system or so that it provides a programmatic system interface. Users can perform a variety of file system like operations.

The folders depicted of the OCT may be displayed by the ROT and act as a semantic overlay on information from the content source . In other words in one embodiment it is the set of folders of the OCT their organization and their naming and their content that provides the interpretive or semantic guidance of the system and also provides a location of the content. The goal of this form of semantic display is that users encounter folder names that make sense at each level in the OCT . As users descend to more specific levels of the OCT they ultimately can see the items of interest and select them directly or use additional tools to search for the items of interest in the limited context in which they now find themselves.

In one embodiment top level folders of the OCT could be predetermined. For example the top level folders of the OCT could be specified with well known labels for various categories for Entertainment Food Politics Sports Business Travel Government Consumer Products Home Economy Art Culture Education Health Environment News History Nature Language Religion Social Services People Science Technology Geography Media Transportation Human Relations Services Literature etc. The listing above is merely exemplary and any such labels or categories may be used in the embodiments.

Further in some of the other embodiments any of the folders including the top level folders of the OCT may be dynamic or modifiable by users or administrators.

In some embodiments new candidate folders may be subject to transitional or probationary status before full entry into the OCT . The threshold for changing the status of a folder may vary depending on its position within the hierarchy. The threshold could apply to various metrics such as number of user driven confirmations that content is correctly located in that folder.

In the embodiments new folders can be introduced to the OCT in various ways. For example a first user could create a new top level folder. Then when a sufficient number of subsequent users take the same action the system could create the new top level folder. As another example a first user could create a new top level folder. Then other users such as a beta group or random or selection of other users would confirm or follow along with the new top level folder. The number of users could progressively increase as acceptance of the new top level folder gains hold. After passage of time the new top level folder could be confirmed changed or deleted based on reception by the community of users. These examples may be part of different embodiments.

The higher the level the higher the threshold and or level of trust required of the user trying to make that change. Additionally a new candidate folder may be subject to a probationary or transitional period before it is confirmed as a top level. This policy could be applied to various depths beyond the top level. Probationary folders can be viewed as experimental folders by users. In some embodiments viewing of experimental folders could be subject to user preferences or kept private.

The OCT may also support different languages or linguistic modes. For example different languages may have an independent OCT or different folders.

As noted in one embodiment the OCT may be shown and navigated as a hierarchically organized set of folders that provides a structured semantic approach to accessing all or some of the items in a content source . For example the user may run an application such as a CTB on their client device and interface and navigate the OCT . The folders may contain nested folders to provide greater specificity for a user searching for content of a particular type the content itself or content references links to items in the content source similar to URLs optionally coupled with meta data to provide users with additional information to help them decide if they have located an element of interest. Metadata can include for instance a user friendly name for a content item timestamp ratings location information etc. Any form of meta data may be used in the embodiments.

OCT may provide different levels of access to various parts of the semantic information repository. For example some semantic information may be available to any user while other information may have limited access to a specific user or group of users. This approach to managing information may be most relevant for example to a corporate network. For example if the SSOS is applied to a corporate repository of documents as opposed to the World Wide Web then the OCT may have this security measure.

Of note CTPE and OCT are illustrated as components that are co located for example at the same site or on the same platform. One skilled in the art will recognize that the server OCS and OCT may be implemented based on a distributed architecture and thus may be co located or remote from each other on different platforms. For example the SSOS may comprise multiple instances of the CTPE . Likewise the OCT may comprise a distributed database or data warehouse having storage and files located in a plurality of locations.

The browser application may be any application that allows the user to interface with items available on the network . For example the browser application may be implemented based on well known browser applications such as Firefox by Mozilla Internet Explorer by Microsoft Corporation or Netscape Navigator by Netscape Communications Corporation Chrome by Google and Safari by Apple Inc.

As a search assistant the ROT assists the user in performing searches. In general the ROT enables a user to access and interface with search results the OCT and content items in various ways. The ROT can also be a helper tool that assists a user to work with conventional search engines for example exercise one or more search engines to obtain results for search criteria of interest conduct searches within the OCT or perform a number of organizational functions upon the search results returned. For example the ROT may provide suggestions either upon request by the user or automatically about how to organize documents into categories. These suggestions may be based on the folders in which those documents were located within the OCT and also the way in which those documents were positioned relative to each other within the OCT .

Once the user has indicated an interest in one or more documents returned for example by a conventional search engine the ROT can suggest pathnames i.e. hierarchical pathnames within the OCT that would be appropriate locations for the document s . In particular if a document already exists within the OCT then the pathname s for the folders that contain it can be provided to the user by the ROT . This helps the user to understand if it is the appropriate type of document because of the context provided by the pathname. Furthermore it allows the user to easily select a pathname e.g. by clicking on a displayed pathname that he or she favors and use that for organizational purposes within the ROT . If on the other hand the user selects a document returned by a conventional search engine search that is not present anywhere in the OCT the ROT may provide suggested pathnames that would be appropriate for positioning the document. These pathnames may be determined based on the position of other documents that are already present in the OCT and are deemed to have sufficient similarity to the new document being introduced. Similarity evaluation is performed by an algorithm that would typically run on the server side of the SSOS as a result of a request by the ROT . For example the algorithm may compare documents for similar metadata or commonality of content. Upon finding a document with sufficient similarity the enclosing folder can be suggested as a potentially appropriate pathname. Multiple such suggestions may be presented to a user simultaneously so that the user can easily make a choice.

In some embodiments the ROT also comprises a content tree browser or CTB . The CTB is a tool for navigating and searching through the OCT . The CTB may be implemented as a stand alone application a browser plug in a web based application a feature or set of features within the ROT etc. The CTB may be configured to work on either global or local organized content structure. In addition to the CTB the OCT can present a programmatic interface e.g. web services interface or other programmatic API so that outside systems can leverage its organization and content. In some embodiments the ROT and CTB could be integrated or blended together as part of a common interface in a single application or tool that is running on a client device. The CTB may be any application or tool that allows the user to navigate and manipulate the OCT including actions like adding content items to the OCT browsing through various portions of the OCT indicating a desire to move items out of or into different folders in the OCT when they feel the items don t belong etc. The storage for the OCT may be implemented using various types of storage including direct attached storage network attached storage storage area networks and cloud based storage services via the network .

In some embodiments by using the ROT one or more users can compile information on a particular topic or for a particular purpose. In a user community with many users such as the Internet an enterprise network and the like it is likely that other users will have a similar search objective at some point in the future. To further leverage for example the construct of a search session in some embodiments the SSOS may support an operation allowing a user to publish one of his her search sessions for others to examine. In one model of such a system search sessions can be treated as documents and included in the set of searchable documents. In another implementation approach the set of all search sessions can be targeted as a new universe of searchable information wherein the results that are returned are search sessions and all the information contained within them.

In some embodiments the SSOS provides various administrative and user feedback features. For example some known collaborative knowledge bases today make use of user or administrator input to specifically enforce standards of relevance quality and acceptability. In the sense that SSOS is also a collaborative knowledge base leveraging the explicit and implicit actions of a user community an enhancement of some SSOS implementations may also employ various features to collect distributed feedback from users or administrators.

One possible approach for example is where the SSOS creates or provides the role of Custodians who have responsibility for maintaining the quality of the information in designated areas of the OCT. Custodians may be selected based on their expertise in the relevant area.

The enforcement policy of the SSOS may be a function of whether the end user action that triggered a change was implicit or explicit. These behaviors are all examples of options that an SSOS system may offer the administrator of the system.

Another possible feature that may be provided by some embodiments is a democratic approach. In the democratic approach a group of users are able to submit votes to the system on whether an item s placement in the OCT is valid. Rather than having the SSOS forward changes to a designated Custodian users are simply able to submit votes on the correctness of an item s placement if and when they encounter the item in the OCT . This approach can be particularly useful for removing items that are not positioned correctly or for reinforcing the initial decision to introduce an item into a particular folder. However if the voting process leads to the removal of an item the item will no longer be visible to users inspecting the OCT . Thus they will not be able to vote for its retention.

One possible mode of operation by the SSOS is to allow democratic review for a certain amount of time after an item is introduced after which time the voting process is closed by the system and a decision is made. The ratio of votes in favor of an item s positioning that is required for it to remain in place can be a system parameter. Alternatively rather than use a time interval to contain the voting process the SSOS may make the final decision after a certain number of votes have been registered. In a system that has heavy user traffic the number of required votes may be attained quickly so that the item s position is also confirmed by the SSOS shortly after it is introduced.

While the item s status is in flux the CTB or any API providing access to the OCT content may indicate the item s condition appropriately. For example in the CTB s user interface the item may appear highlighted in some typical fashion used to make items stand out within a group such as coloration background change flashing appearing next to a special icon check box etc. As a special case of this status dependent representation an end user may elect to have their CTB or viewer of the OCT show only folders and items whose status has become final.

The democratic process implemented by the SSOS may also be leveraged to generate a quality score for an item or folder and its position within the OCT . The score may be any function of the number of votes in either direction. For example a simple score could be the number of positive votes divided by the number of total votes. Regardless of how it is computed the score becomes part of the item s meta data and can then be leveraged in the presentation of the OCT either via a user interface or via APIs. For example the score may be used as a filtering mechanism whereby the end user requests to see only items whose quality scores exceed a specified threshold. Alternatively users may configure their CTB preferences to show only the top N items within a given folder so that they are presented only with the highest quality items.

For an SSOS that employs a democratic process there may be a concern that users will abuse the system by voting repeatedly either manually or by using an automated process e.g. a software robot to do so. In order to thwart such behavior the SSOS may make voting a privilege that is available only to validated users who are required to identify themselves e.g. authenticate through a log in process . Because their votes are associated with an identity the system can ensure that each such identified user votes only once for each decision that needs to be made. Furthermore various techniques may be employed to confirm that a user is in fact a human e.g. requiring the user to reproduce a word written in a form that is not machine readable .

Finally in some embodiments an SSOS may provide a feedback feature that is a combination of the custodian based approach and the democratic approach. For example the democratic process could be used initially by the SSOS and for those situations where the voting result is not overwhelmingly clear the SSOS may send a request to the custodian or other users to intervene and make the final decision. Alternatively a democratic process implemented by the SSOS could be employed among a group of custodians.

The use of the CTB to navigate within the OCT can be suited to modern user interfaces such as those commonly employed by smartphone or tablet applications where typing is minimized in favor of clicking to make selections among a handful of items. Indeed one feature of the SSOS is that at each level in the OCT a manageable set of items is presented. A reasonable number of items can fit within the screen of a simple user interface and allow the user to make a selection of either an item of interest or descend into another folder of interest to search more specifically. For example an SSOS application or app for smartphones and tablets may be provided in some embodiments that would provide such an interface allowing a user to quickly navigate to topics and items of interest.

Of note the number of folders employed in the embodiments for the SSOS may be a relatively modest amount. For example consider an embodiment that in each folder contains an average of 30 items or other folders. It is believed that a user can easily scan thirty items in order to make a selection among them. By making 8 selections the user can drill down to a specific folder or item selected among 30or over 650 billion items. The number of pages is currently estimated to exist on the worldwide web is merely in the tens of billions. Based on this example it is easy to see the power that SSOS places within the user s hands to quickly locate specific items of interest in the world s largest information repositories. In contrast conventional search engine searching approaches return large numbers of items including many items that are false positives requiring significant manual work by the user to locate items that are actually responsive to his or her intent.

As described herein a system built according to the SSOS architecture likely manages large sets of documents by dividing them into progressively smaller groups arranged in the semantically organized structure such as in a hierarchical fashion. Documents may be contained in any level of the hierarchy and it is common for leaf folders in particular folders that contain only documents but no other sub folders to contain many documents. This arises when there are a large number of documents belonging to the same category. Furthermore there may be no natural sub categories or at least none that have resulted from the mechanisms inherent to the SSOS . Unless it is addressed the presence of a very large number of documents in one folder can pose challenges for the usability of the system. In particular users browsing through the hierarchy may suddenly be confronted with a folder containing thousands or even millions of documents. Indeed the mere rendering of the folder s content in the typical fashion which lists all encompassed documents becomes impractical. Therefore it is advisable for an SSOS system to implement one or more strategies for addressing such a situation. Several possible strategies are provided below.

Some embodiments may employ two types of strategies for handling presentation of very large folders i.e. folders containing many documents. The strategies are automatic and interactive. The first automatic strategy involves breaking down a folder s content into chunks that are computed based on selected properties of the documents. If the resulting chunks are small enough then they can be presented to the user in one of the following ways 

A simulated set of folders presented in the same manner as regular folders in the CTB . This has the advantage of looking identical to the user interface users are used to when navigating in any folder.

A different presentation approach in which the chunks do not look like folders. This approach features an array of chunks presented as a list or a grid with each chunk represented in a way that the user can interpret based on the selected document properties. For example a chunk may be a group of documents that spans a certain period of time.

There are many possible strategies for dividing a set of documents into chunks. Several of them are enumerated below. In each case the presentation approach may use a fixed number of documents per chunk or alternatively use fixed partitions and place a variable number of documents in each partition. Below are some examples of partitioning.

Another automatic approach that may be used in some embodiments is to simply cap the number of documents represented for the folder. Some of the ordering criteria described above for chunking can also be used to determine which documents to include in the capped folder presentation. For example selecting the documents that are most popular or accessed most frequently can be applied for the purpose of capping.

As an alternative or in addition to automated presentation approaches the SSOS may offer an interactive approach to exploring a folder containing a very large number of documents. A common interactive approach would be to allow the user to filter the set of documents by specifying search criteria. The search criteria can be applied against the document titles content or meta data or any combination thereof. The filtering operation is applied only to the documents within the folder of interest.

Once the filtering has completed any of the previously mentioned automatic approaches may be applied for presenting the resulting documents including chunking and capping.

Furthermore the automatic approach may be used in conjunction with the interactive approach by first using an automatic approach and allowing the user to invoke a search operation at any time to narrow the set of documents. For example an initial presentation may show a capped set of documents and indicate to the user the total actual number of documents that are in the folder. Once a search is executed the filtered set of documents or a subset of the search results may be displayed.

In some embodiments the CTB provides user interfaces that are selection based rather than text based . This form of interface may be advantageous for various devices. For example the CTB may be optimized for mobile devices such as smartphone or tablet applications where typing is minimized in favor of clicking to make selections among a handful of items. This capability of the CTB is enabled because at each level in the OCT a manageable set of items can be presented by the CTB . A reasonable number of items can fit within the screen of a simple user interface and allow the user to make a selection of either an item of interest or descend into another folder of interest to search more specifically. However this selection based approach is equally applicable to any computing device. These embodiments could be modified or enhanced for disability for ADA compliance for example an audio or speech interface for a blind user.

As noted the ROT may support several modes of operation. In stand alone assistance mode the ROT provides tools for organizing the user s search results. However the ROT operates independently of the CTPE and does not use the OCT or OCS . No data is shared from the SSOS . The ROT is merely a client side application.

In consumer mode the ROT provides the same useful organizational tools but exploits information from the OCT to enable the user to better organize search results. In other words the ROT may interact with the OCS CTPE and request certain information from OCT to enhance a user s search. However none of the user s activities and preferences in the ROT are reported back to the CTPE . The user s activities may instead be stored in a client search customization database resident on the client . The client search customization database may comprise information such as session data and user actions regarding various search results. This mode may be useful for example to customize the user s view of their own data of the OCT . A user could have multiple instances of their search customization database. For example the user could have an instance for work versus a different instance for personal. 

In knowledge sharing mode there is two way communication between the ROT OCS and the CTPE . The ROT uses information from the OCT and also feeds back information to the OCT in order to enhance the OCT . The information that is sent back to the OCT relates to how the user chooses to process such as organize filter etc. the search results.

A first approach that can be used by a user involves leveraging one or more search engines to obtain an initial or raw set of search results. The user interacts with the search engines as he or she ordinarily would to conduct search queries. When the results of the search queries are returned the ROT is invoked either explicitly by the user or automatically upon detecting the completion of the query to process the results.

For example the browser may transfer the search result information to the ROT . In some embodiments the ROT may be triggered by a browser plug in or may be a plug in to the browser which is executable within the browser and which has access to the content displayed in the browser . Within the ROT the user can then perform further processing and organization of the search results.

In another approach the ROT does not need to rely on the user interacting with a search engine . Rather the user searches for desired information within the items and content accumulated and processed stored within the OCT . The OCT may serve as a useful source of information because through sufficient and ongoing feedback from its users the OCT can become populated with a subset of the information obtained from the various search engines in use by a community of users. Furthermore the OCT provides for further processing filtering through empirical selection by users and enrichment of the information. Thus the contents of the OCT can be used as a new information space for the user s search query via ROT or browser .

Once the OCT is widely populated with information the OCT itself becomes a repository of information that can support powerful search operations. Users may be provided an interface to search for folders or items that respond to any combination of item names meta data and content. Searches may be conducted against the entire OCT or against any sub tree within the OCT . Because the meta data of the SSOS includes semantically validated information this search can represent a powerful alternative to searching via a conventional search engine.

For example the meta data can include the search terms used by many users to originally discover the item. The fact that the item ultimately became categorized and committed in the OCT provides additional assurance that the item is responsive to those search terms. Thus the search terms have a greater significance than simply matching a string contained within the document.

In one embodiment indexing would be confined to the items in the OCT including their metadata and the documents they reference in the content source. In general the embodiments are capable of indexing any part of the document to support searching the OCT.

The OCT may contain the links the documents or a hybrid. For example the OCT may sense that links are very dynamic and therefore may elect to archive the content or document itself rather than relying on link.

The collection of locations in which an item is positioned within the OCT can also be considered searchable meta data of the item. In some embodiments a unique record can be maintained for every unique item and that record can contain a list of positions in the OCT where the item is referenced. Using this meta data the semantic power of the SSOS provides new types of search constructs not available in conventional search engines. For example users can shape their search through additional constructs such as Related to Not related to Related to AND not related to Related only to and Related to multiple .

The notion that item J is related to topic T corresponds to J being contained within a folder T either directly or recursively contained . Since a folder with name T may itself exist in multiple parts of the OCT it may be the user s option to provide either partial or fully qualified pathnames i.e. from the root of the OCT ending with T.

For example a user may conduct searches with commands similar or equivalent to the following Find items related to golden ratio but not related to art or Find items related to mathematics golden ratio but not related to art or Find items related to science mathematics numbers golden ratio but not related to art . In response this search finds documents e.g. web pages that discuss the golden ratio from the point of view of its mathematical properties and definition but not those documents that concentrate on discussing the application of the golden ratio for artistic purposes. Since the latter is also a topic area that is widely documented on the Web the user s inability to exclude such pages using a conventional search engine will cause their search to potentially generate significant noise i.e. documents that are not of interest.

Of note the use of the wildcard character such as may be supported in the embodiments. This is one possible way of allowing the user to express that any folder may appear in between mathematics and golden ratio in the example provided above. However support for wildcards and the form that is used to express them is an implementation specific detail of SSOS and the search interface that it provides for searching the OCT . Of course a different character may be used to represent wildcarding and full support for mechanisms like regular expressions may be provided. Regular expressions are a well known term that refers to a sequence of text characters some of which are understood to be metacharacters with symbolic meaning and some of which have their literal meaning that together can automatically identify textual material of a given pattern or process a number of instances of it that can vary from a precise equality to a very general similarity of the pattern.

Also a wildcard may represent one or more folders. Finally wildcarding could be implicit in the sense that the system interprets every nested folder as potentially being immediately within the preceding folder in the pathname or any number of levels beneath it. Thus science numbers would resolve to science mathematics numbers as well as perhaps other pathnames that include science and numbers with zero or more intervening folders in between. The examples mentioned above are just a subset of the many different constructs can be provided to allow users to express the scope of their search within the OCT .

Using a conventional search engine or non semantic search engine the user may be able to exclude documents containing the word Art . However this may in turn be overly limiting because it is possible that a document that would be of interest may briefly mention that the golden ration has been applied in the artistic field or for some other reason include the word art but still not be considered a document whose primary topic is art. Worse yet for example in terms of a false negative the document may be authored by someone whose first name is Art but have nothing to do with the topic of Art. Accordingly the example above illustrates the semantic power of the SSOS .

In some embodiments the ability to use semantic constructs of the forms described above does not preclude using simple constructs of the form contains or does not contain. These two types of constructs may be used in combination as well. For example a user may conduct a search as follows Find items containing laptops related to computers reviews 

In some embodiments the SSOS may choose to interpret the related to construct as commutative or not. For example in a commutative interpretation the SSOS would automatically ensure that two following search expressions would return the same result Find items related to Boeing and related to Airplanes and Find items related to Airplanes and related to Boeing .

In other words the user is not necessarily aware of the structure of the OCT in terms of whether Boeing is contained within airplanes or vice versa. In fact both of these may exist within the OCT . To ensure the same result is returned the SSOS may look for items within the Boeing folder that is itself within the Airplanes folder the latter may be the technology vehicles airplanes folder for example . It then looks for items that are within the Airplanes folder that is itself within the Boeing folder the latter may be the business companies aerospace Boeing folder for example . It may then take the union of the items obtained from these two steps and provide them as a result of the overall search.

In a non commutative interpretation each search may yield different results. This may be acceptable but places the responsibility on the user to understand the nuances that may arise from ordering the search expression in each way.

In conventional search engines algorithms are typically implemented to cause items that are deemed more useful or valuable in some way to be presented with greater precedence. The algorithms generally focus on the popularity of the items where popularity may relate to a the items being selected more frequently by the user population or b the items that are referenced most by other items c the items that are referenced by other items with greater importance attributed to references by popular items d combinations of a b and c . Many algorithms leveraging this type of information are possible and have been implemented by search engines. These algorithms are often used to order the found set of items in a list.

This same concept can be modified and applied to the searches performed in SSOS . For example when the user is browsing within the OCT the presentation of the items is hierarchical rather than a linear list. Therefore alternative presentation choices become useful. Some of these presentation approaches include Ordering the folders items within a folder based on popularity for example according to applicable definitions of popularity mentioned above in the context of conventional search engines Using visual indicators to indicate popularity e.g. coloring folders placing a score next to them or an icon of some kind to indicate popularity including changing the size of the folder and indicating the attractiveness of each item at the current hierarchical level specifically with respect to the user s current search effort either by ordering them or using visual indicators. 

When the user is browsing items of the OCT within the CTB this may cause the CTB to use information from the ROT in order to be aware of the user s search goals. This information can comprise a search terms employed by the user so far during the search session b items already selected by the user as being of interest c categories in which the user has positioned selected items d a statement of the search session purpose or a name given to the search session. Based on this information the SSOS can suggest which folders are more likely to lead to items of interest. For example the CTB may have to obtain a suggestion from the OCS .

As discussed earlier the ROT also provides an interface for searching using search engines or equivalently a mechanism for acquiring results from searches conducted using search engines

In some embodiments the ROT may detect a search session for the users at clients . For example the ROT may automatically begin a search session when the user accesses a conventional search engine. As another example the ROT may prompt the user to start a new session or retrieve information about an existing or past session.

A search session thus refers to any sequence of searches having an overarching purpose or meaning for the user. The ROT provides search sessions as an organizational capability that is not provided by search engines . The notion of a search session enables a user to group together an arbitrary set of individual search queries submitted to one or more search engines . More precisely because the ROT understands that the results of a set of search queries are related these can be analyzed and processed together and combined to produce the ultimate set of results desired by the user. As noted this information may be shared as semantic information back to CTPE for contribution to the OCT .

By introducing the concept of a search session the ROT addresses the needs of users to modify their search using varied approaches in order to hone in on relevant information. Furthermore the search session offers long term persistence of results e.g. that can be stored in the search database or in OCT so that additional search queries may contribute to the search session over time. These queries need not be conducted consecutively or by the same user. The ROT can support and store all required information to maintain multiple search sessions simultaneously. Search sessions may continue to be accessible to a user until the user decides to delete them from the database . User activities within a search session may be tracked and reported back to the OCS. Example the many searches executed for planning a vacation may be within a session which allows the system to unify and organize the results in the OCT accordingly. The search sessions are not required but are one way to obtain meta data about user searches and classify related user activities. Within a search session the user is likely more motivated to classify and feedback information and invest in the search session.

In some modes the ROT records decisions taken by the user and transmits that information or selected aspects of that information back to the server . For example the decision of the user to place certain search results in particular categories may be sent back to the server . Similarly the decision to filter or prioritize certain items may be of interest and sent back to server . This type of information is then processed by the server in order to enhance the OCT . This enables it to enrich the information associated with search results and also with search queries. Thus the intelligent processing at a semantic level by users and the ROT can be leveraged to associate semantic information with content from the information space . In other words taken from the perspective of a given search item in the information space when one or more users encounter and make decisions relative to that search item the item can be enhanced with semantic information based on those decisions.

In other modes the user at client may benefit from the semantic information contained in the OCT in order to improve his or her search experience. For instance the semantic information can be used to automate organization of search results including automatic or assisted categorization filtering and prioritization. The ROT can also display various types of semantic information to enrich the search result presentation.

Leveraging the concept of the search session the ROT can communicate affinities among search results that otherwise would not be known to the index based use conventional rather than index based search engines . To elaborate the multiple results of multiple search queries submitted within a single search session can be presumed to be semantically related if the user selects the result and especially if the user classifies the results in the OCT since the user typically conducts a search session for a single purpose. Relationships therefore can be inferred among search queries and also among search results. The combinations of search results that are generated by the users organizational decisions within the ROT can be communicated back to the server OCS and CTPE in order to again enrich the OCT . Enrichment may be in form of additional metadata and suggestions such as showing the user items other results selected by other users for a search session that is deemed similar or related based on matching meta data or content . One practical use of this mechanism allows a user conducting a search session to invoke an automated search enhancement feature. Example an item centric approach that shows other items that are semantically related. Such a feature can automatically return to the user related search results that were generated by the intelligent actions of prior users conducting searches with similar semantic objectives.

By observing the actions and decisions of users the OCS can infer relationships among search items. For example the ROT may be able to observe interactions such as classifying discarding sharing emailing etc. by the user with the ROT or other applications running on the client . Over the course of time and through the combination of many observations the OCS can further qualify the strength of those relationships. Instead suppose a first user searches for a concept A and second user searches for B . Once one of the user connects A and B in a single search session using the ROT then this information can be centralized in the OCS and the other user s search session can be made aware of the joint relevance of A and B. Strength of a relationship could be based on a variety of observed behavior such as the frequency with which search items appear in conjunction same search session or same classification etc. It is easy to imagine a number of scoring systems to evaluate the strength of these relationships. Given that the relationships are established and that they are optionally qualified by their strength various algorithms can be used to form groups or clusters of search items within the information space. These semantic clusters are of great significance because they provide new ways of returning related information to search users and furthermore the clustering represents vetted relationships determined by intelligent users. This type of intelligent analysis is based on the collective empirical decision making of human users and cannot otherwise be generated.

In some embodiments within a search session with ROT after submitting each query to a conventional search engine or to the native SSOS search engine the user employs the ROT features to perform various operations on the results that are returned. Some examples of operations include but are not limited to 

In some embodiments the SSOS provides an environment for delivering targeted information to a user such as advertisements banners messages and the like. For example the operator of server may offer advertisers an opportunity to deliver advertised information to the user within the ROT . Appropriate advertised information can be selected based on either the user s submitted queries or on the search results themselves. For instance one advertising model would offer the opportunity to associate advertisement information with semantic clusters. In such a model whenever a user conducts a search that retrieves information from the semantic cluster of interest one or more related advertisements can be delivered and displayed within the ROT . In other embodiments advertisements can be associated with specific folders.

As another example within the CTB targeted ads or messages can be presented as users navigate into different folders of the OCT . These can of course be driven by the topic of the folder e.g. advertising space and time to fast food restaurants such as McDonalds Burger King etc. may appear in the food fast food folder.

Leveraging the concepts of the search session and the dynamically evolving content of the OCT the SSOS can also deliver a dynamic search capability that continues to accumulate new search results over time. These newly added results can be automatically added to a user s session or the results to reflect this new content. In addition the system optionally may automatically organize those results.

For example during a typical search at any point during the session the user may enable the dynamic search capability and may then close the ROT or leave it unattended. Until otherwise directed the OCS periodically updates the search results and possibly their organization based on the evolving state of the OCT . The user may return to the search session at any time to observe an accumulation or conversely a reduction and evolving organization of the search results. Using this approach the search session results benefit from the ongoing intelligent processing that is conducted by the community of users of the information spaces .

As shown the user may submit a search request or query to the browser . Next the browser forwards the search request or query to one or more search engines . The search engines may then provide various sets of search results back to the browser . As is well known these search results are typically provided in the form of a listing on a web page having one or more formats. For purposes of this disclosure these search results from the search engines are referred to as raw search results.

The browser may provide the raw search results to the ROT in various ways. In some embodiments the browser may be configured to automatically forward any raw search results obtained from one or more search engines . In other embodiments the ROT is configured to extract the search results such as by discovering and parsing the contents of a page displayed by the browser . The extraction of the search results may be triggered automatically for example by the ROT or based on a request by the user. Alternatively the ROT may be integrated with one or more conventional search engines such that the ROT is able to use the search engines to retrieve search queries conduct searches and obtain search results. Such integration may be performed via an API provided by the search engines the browser or via an operating system interface provided by the client device .

The ROT then processes the raw search results. In particular the ROT may query its local client search customized database on the client . The ROT attempts to organize the raw search results to enhance the semantics of the search and provide an appropriate display e.g. a semantic overlay of the results.

The ROT may collect information about the interactions by the user with this overlay display. This interaction information may then be used to refine or modify the organizational guidance used by the ROT . In addition this interaction information may also be used to enhance the filtering ranking and highlighting of results within the semantic overly by the ROT . This user interaction is then used in future sessions.

As shown the user may submit a search request or query to the browser or to the ROT . Next the browser forwards the search request or query to one or more search engines and the client forwards a search request to the OCS. The search engines and the OCS may then provide various sets of search results back to the browser in a semantically organized format such as a set of folders that are arranged consistent with the OCT . As is well known these search results from the search engine are typically provided in the form of a listing on a web page having one or more formats. For purposes of this disclosure these search results from the search engines are referred to as raw search results.

The browser may provide its raw search results to the ROT in various ways. In some embodiments the browser may be configured to automatically forward any raw search results obtained from one or more search engines . In other embodiments the ROT is configured to extract the search results such as by discovering and parsing the contents of a page displayed by the browser . The extraction of the search results may be triggered automatically for example by the ROT or based on a request by the user. Alternatively the ROT may be integrated with one or more conventional search engines such that the ROT is able to use the search engines to retrieve search queries conduct searches and obtain search results. Such integration may be performed via an API provided by the search engines the browser or via an operating system interface provided by the client device .

The results from the OCS may be provided directly to the ROT . In addition to results the OCS may provide other information such as organizational information updates etc.

The ROT then processes the search results from both sources e.g. the conventional search engines such as google.com and the like and a semantically enhanced source such as the OCT . In particular the ROT may query its local client search database and select one or more organizational guidance mechanisms. Of note the local client search database may be implemented using local storage systems such as direct attached storage network attached a storage area network and the network. Alternatively some or all of the local client search database may be implemented using remote storage such as cloud based storage services via the network . The local client search database may comprise a similar semantic organization provided by the OCT but comprise content items or references to content items that are retained for specific purposes of the user. The ROT may also refer to information from the OCT to organize the search results. Once organized the ROT may provide an appropriate display e.g. a semantic overlay of the results. For example the ROT may organize the raw results based on date time subject provenance or source e.g. a website of the content file type etc. In a one embodiment the ROT organizes the information into semantic classifications such as folders.

As shown the user may submit a search request or query to the browser or to the ROT . Next the browser forwards the search request or query to one or more search engines and the client forwards a search request to the CTPE . The search engines and the CTPE may then provide various sets of search results back to the browser . As is well known these search results from the search engine are typically provided in the form of a listing on a web page having one or more formats. For purposes of this disclosure these search results from the search engines are referred to as raw search results.

The browser may provide the raw search results to the ROT in various ways. In some embodiments the browser may be configured to automatically forward any raw search results obtained from one or more search engines . In other embodiments the ROT is configured to extract the search results such as by discovering and parsing the contents of a page displayed by the browser . The extraction of the search results may be triggered automatically for example by the ROT or based on a request by the user. Alternatively the ROT may be integrated with one or more conventional search engines such that the ROT is able to use the search engines to retrieve search queries conduct searches and obtain search results. Such integration may be performed via an API provided by the search engines the browser or via an operating system interface provided by the client device .

The ROT then processes the search results from both sources for example content sources and semantically enhanced sources such as the OCT. In particular the ROT may query its local client search customized database and select one or more structures for organizing the results. The ROT may also refer to information from the OCT via the OCS to organize the search results. Once organized the ROT may provide an appropriate display e.g. a semantic overlay of the results. For example once the user has obtained a sufficient amount of search results the search results may be organized into a structure similar to the OCT albeit on a smaller scale. The OCT may further organize or refine the raw results based on date time subject source search session file type etc. In this mode the ROT may collaborate with the OCT to provide a semantically organized display of the results. Multiple approaches are possible for the ROT and OCT to collaborate with each other. In addition the ROT may use cloud based information systems that are provided over the network .

Of note the OCS also provides services telling the ROT how to organize search results. For example the ROT can provide as input a list of raw results from conventional search engines to the OCS. OCS provides the semantics to the ROT. ROT then displays the results now in semantically enhanced result. The OCS may organize the data or send enough semantic information to the ROT to have the ROT itself apply organization of the data. The information may be shared in various ways for example by communications between the ROT the OCS and or the browser . Furthermore in some embodiments the ROT may be configured to work with various cloud based or remote storage of semantic information from the OCT .

In this knowledge shared mode and the consumer mode the semantic overlay may be dynamic based on the information shared with the OCT . For example the ranking or significance of various results may be updated in real time such as recently breaking news on a particular topic. As another example the organization of the results may be updated dynamically or in real time depending on the semantic information collected from one or more users and new update may be presented to the ROT. As noted the ROT may also collect information about the interactions by the user with the items contained in the ROT regardless of their provenance. This interaction information may then be used to refine or modify the organizational guidance used by the ROT . In addition this interaction information may also be used to enhance the filtering ranking and highlighting of results within the semantic overlay by the ROT . In this shared mode the ROT may share this knowledge data with the CTPE at various intervals and points in times on an ad hoc basis or per user interaction when a user closes a session upon user request etc. The ROT may also employ various security measures such as encryption of its communications with the CTPE anonymizing data and the like.

In addition the ROT may receive organizational guidance from the CTPE . This guidance may be static or dynamic. In addition the guidance may be customized according to the user a group of users topic date file type etc.

Throughout this document various functions available to the user of the SSOS primarily via the ROT and CTB . Similar functions are available to other systems such as other programs requiring access to information stored within the SSOS . Those skilled in the art should recognize that the entire set of functions described herein may also be offered via programmatic interfaces to other systems. These interfaces provide a set of operations to interact with the SSOS in a manner that is well defined in order to obtain each type of supported data set or to cause the SSOS to modify its own internal state. The sequences and combinations of operations that produce specific types of results are defined by the SSOS as part of its system interface protocol. The protocol may be implemented in various forms including a library of classes and methods that abstract lower level mechanisms a set of web services consisting of defined messages types using a protocol such as SOAP i.e. using HTTP as the lower level transport protocol a representational state REST or RESTful API or any other form of communication to the SSOS that can provide transport for the commands comprised by the protocol.

Although the present disclosure provides certain embodiments and applications other embodiments that are apparent to those of ordinary skill in the art including embodiments which do not provide all of the features and advantages set forth herein are also within the scope of this disclosure.

