---

title: Automated generation of access control rules for use in a distributed network management system that uses a label-based policy model
abstract: An access control rule authorizing communication between a plurality of managed servers within an administrative domain is determined. Communication information describing past communication between the plurality of managed servers is obtained. A subset of managed servers from the plurality of managed servers is identified by grouping the plurality of managed servers based on the obtained communication information. A group-level label set is determined to associate with the subset of managed servers. Role labels are determined for managed servers in the subset of managed servers. A managed server is associated with one role label. Based on the group-level label set and the role labels, an access control rule is generated authorizing communication between a first managed server of the subset of managed servers and a second managed server. The access control rule is stored as part of an administrative domain-wide management policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485279&OS=09485279&RS=09485279
owner: Illumio, Inc.
number: 09485279
owner_city: Sunnyvale
owner_country: US
publication_date: 20141030
---
This application claims the benefit of U.S. Provisional Application No. 61 899 468 filed Nov. 4 2013 which is incorporated by reference herein in its entirety. This application claims the benefit of U.S. Provisional Application No. 62 066 835 filed Oct. 21 2014 which is incorporated by reference herein in its entirety. This application is related to U.S. application Ser. No. 14 249 128 filed Apr. 9 2014 which is incorporated by reference herein in its entirety. This application is related to U.S. application Ser. No. 14 249 145 filed Apr. 9 2014 which is incorporated by reference herein in its entirety.

The subject matter described herein generally relates to the field of managing servers physical or virtual of an administrative domain and in particular to managing servers according to an administrative domain wide policy that adheres to a logical multi dimensional label based policy model.

Servers physical or virtual of an administrative domain are managed according to a policy. For example a security policy might specify access control and or secure connectivity while a resource usage policy might specify usage of the administrative domain s computing resources e.g. disks and or peripherals . Conventional policies reference physical devices and are expressed in terms of low level constructs such as Internet Protocol IP addresses IP address ranges subnetworks and network interfaces. These low level constructs make it difficult to write a fine grained policy in an abstract and natural way.

The above and other issues are addressed by a method non transitory computer readable storage medium and system for determining an access control rule authorizing communication between a plurality of managed servers within an administrative domain. An embodiment of the method comprises obtaining communication information describing past communication between the plurality of managed servers. The method further comprises identifying a subset of managed servers from the plurality of managed servers by grouping the plurality of managed servers based on the obtained communication information. The method further comprises determining a group level label set to associate with the subset of managed servers. The method further comprises determining role labels for managed servers in the subset of managed servers a managed server associated with one role label. The method further comprises generating based on the group level label set and the role labels an access control rule authorizing communication between a first managed server of the subset of managed servers and a second managed server. The method further comprises storing the access control rule as part of an administrative domain wide management policy.

An embodiment of the medium stores computer program modules executable by one or more processors to perform steps. The steps comprise obtaining communication information describing past communication between the plurality of managed servers. The steps further comprise identifying a subset of managed servers from the plurality of managed servers by grouping the plurality of managed servers based on the obtained communication information. The steps further comprise determining a group level label set to associate with the subset of managed servers. The steps further comprise determining role labels for managed servers in the subset of managed servers a managed server associated with one role label. The steps further comprise generating based on the group level label set and the role labels an access control rule authorizing communication between a first managed server of the subset of managed servers and a second managed server. The steps further comprise storing the access control rule as part of an administrative domain wide management policy.

An embodiment of the system comprises one or more processors and a non transitory computer readable storage medium storing computer program modules executable by the one or more processors to perform steps. The steps comprise obtaining communication information describing past communication between the plurality of managed servers. The steps further comprise identifying a subset of managed servers from the plurality of managed servers by grouping the plurality of managed servers based on the obtained communication information. The steps further comprise determining a group level label set to associate with the subset of managed servers. The steps further comprise determining role labels for managed servers in the subset of managed servers a managed server associated with one role label. The steps further comprise generating based on the group level label set and the role labels an access control rule authorizing communication between a first managed server of the subset of managed servers and a second managed server. The steps further comprise storing the access control rule as part of an administrative domain wide management policy.

The above and other issues are addressed by a method non transitory computer readable storage medium and system for processing alerts from managed servers implementing one or more access control rules. An embodiment of the method comprises obtaining an alert from a first managed server configured to generate the alert in response to past communication with a second managed server and responsive to the first managed server determining that the one or more access control rules do not authorize the past communication between the first managed server and the second managed server. The method further comprises obtaining contextual information including communication information describing the past communication between the first managed server and the second managed server. The method further comprises classifying the past communication as being legitimate or malicious based on the communication information. The method further comprises responsive to classifying the past communication as legitimate generating an access control rule authorizing the past communication between the first managed server and the second managed server. The method further comprises storing the access control rule as part of an administrative domain wide management policy.

An embodiment of the medium stores computer program modules executable by one or more processors to perform steps. The steps comprise obtaining an alert from a first managed server configured to generate the alert in response to past communication with a second managed server and responsive to the first managed server determining that the one or more access control rules do not authorize the past communication between the first managed server and the second managed server. The steps further comprise obtaining contextual information including communication information describing the past communication between the first managed server and the second managed server. The steps further comprise classifying the past communication as being legitimate or malicious based on the communication information. The steps further comprise responsive to classifying the past communication as legitimate generating an access control rule authorizing the past communication between the first managed server and the second managed server. The steps further comprise storing the access control rule as part of an administrative domain wide management policy.

An embodiment of the system comprises one or more processors and a non transitory computer readable storage medium storing computer program modules executable by the one or more processors to perform steps. The steps comprise obtaining an alert from a first managed server configured to generate the alert in response to past communication with a second managed server and responsive to the first managed server determining that the one or more access control rules do not authorize the past communication between the first managed server and the second managed server. The steps further comprise obtaining contextual information including communication information describing the past communication between the first managed server and the second managed server. The steps further comprise classifying the past communication as being legitimate or malicious based on the communication information. The steps further comprise responsive to classifying the past communication as legitimate generating an access control rule authorizing the past communication between the first managed server and the second managed server. The steps further comprise storing the access control rule as part of an administrative domain wide management policy.

The Figures FIGS. and the following description describe certain embodiments by way of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein. Reference will now be made to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

The network represents the communication pathway between the global manager the managed servers and the unmanaged devices . In one embodiment the network uses standard communications technologies and or protocols and can include the Internet. In another embodiment the entities on the network can use custom and or dedicated data communications technologies.

A managed server is a machine physical or virtual that implements an administrative domain wide management policy shown in . In one embodiment a server is a user space instance of a virtual server sometimes referred to as a container virtualization engine virtual private server or jail according to operating system level virtualization which is a server virtualization method where the kernel of an operating system enables multiple isolated user space instances instead of only one instance. If a managed server is a physical machine then the managed server is a computer or set of computers. If a managed server is a virtual machine then the managed server executes on a computer or set of computers. The administrative domain wide management policy specifies whether and or how entities associated with the administrative domain are allowed to access or be accessed by other entities or otherwise consume or provide services. For example the administrative domain wide management policy specifies security or resource usage. A security policy might specify access control secure connectivity disk encryption and or control of executable processes while a resource usage policy might specify usage of the administrative domain s computing resources e.g. disks peripherals and or bandwidth .

A managed server includes a management module a management module configuration and a policy implementation module . The management module implements the administrative domain wide management policy . For example in the case of security the management module can be a low level network or security engine such as an operating system level firewall an Internet Protocol security IPsec engine or a network traffic filtering engine e.g. based on the Windows Filtering Platform WFP development platform . In the case of resource usage the management module can be a disk usage engine or a peripheral usage engine.

The management module configuration affects the operation of the management module . For example in the case of security the management module configuration can be access control rules applied by a firewall secure connectivity policies applied by an IPsec engine e.g. embodied as iptables entries and ipset entries in the Linux operating system or filtering rules applied by a filtering engine. In the case of resource usage the management module configuration can be disk usage policies applied by a disk usage engine or peripheral usage policies applied by a peripheral usage engine.

The policy implementation module generates the management module configuration based on a management instructions received from the global manager and b the state of the managed server . The management instructions are generated based in part on the administrative domain wide management policy . The management module configuration generated by the policy implementation module implements that administrative domain wide management policy to the extent that the policy concerns the managed server . This two step process generating management instructions and generating the management module configuration is referred to as instantiating a management policy. The policy implementation module also monitors the local state of the managed server and sends local state information to the global manager .

In one embodiment the policy implementation module is part of a larger proprietary module not shown . The proprietary module is loaded onto a device or virtual device that already has a management module and a management module configuration thereby transforming the device or virtual device from an unmanaged device to a managed server . The policy implementation module is further described below with reference to .

An unmanaged device is a computer or set of computers that does not include a policy implementation module . An unmanaged device does not implement the administrative domain wide management policy . However interaction between a managed server and an unmanaged device can be subject to the administrative domain wide management policy as implemented by the managed server . One example of an unmanaged device is a network circuit that is used by an administrative domain . Another example of an unmanaged device is a device used by a person to authenticate himself to the administrative domain e.g. a notebook or desktop computer a tablet computer or a mobile phone .

The global manager is a computer or set of computers that generates management instructions for managed servers and sends the generated management instructions to the servers. The management instructions are generated based on a the state of the administrative domain s computer network infrastructure and b an administrative domain wide management policy . The state of the administrative domain s computer network infrastructure includes descriptions of managed servers and optionally descriptions of unmanaged devices . The global manager also processes local state information received from managed servers .

The administrative domain wide management policy is based on a logical management model that can reference managed servers based on their high level characteristics referred to herein as labels. A label is a pair that includes a dimension a high level characteristic and a value the value of that high level characteristic . A management policy constructed in this multi dimensional space is more expressive than a management policy constructed according to a single characteristic network IP address based policy model. In particular expressing management policy using the higher level abstractions of labels enables people to better understand visualize and modify management policy.

The logical management model e.g. the number and types of dimensions available and those dimensions possible values is configurable. In one embodiment the logical management model includes the following dimensions and values as shown in Table 1 

The logical management model enables multiple managed servers to be grouped together by specifying one or more labels referred to herein as a label set that describe all of the managed servers in the group. A label set includes either zero values or one value for a dimension in the logical management model. A label set need not include labels for all dimensions in the logical management model. In this way the logical management model enables the segmentation and separation of an administrative domain s managed servers and the creation of arbitrary groupings of managed servers . The logical management model also allows for a single managed server to exist in multiple overlapping sets i.e. multiple overlapping groups of managed servers . The logical management model does not limit the single managed server to existing in a hierarchy of nested sets.

For example in the case of security segmentation can be used with access control policies to define groups of managed servers that are subject to particular policies. Similarly segmentation can be used with secure connectivity policies to define groups of managed servers and the policies that apply to intra group communications and inter group communications. So communications among a first group of managed servers specified by a first label set can be restricted to a first secure connection setting e.g. secure connection not required and communications between the first group of managed servers and a second group of managed servers specified by a second label set can be restricted to a second secure connection setting e.g. IPsec Encapsulating Security Payload ESP Authentication Header AH Advanced Encryption Standard AES Secure Hash Algorithm 2 SHA 2 .

Each managed server in the environment implements the administrative domain wide management policy to the extent that the policy concerns the managed server . As a result the administrative domain wide management policy is applied in a distributed fashion throughout the administrative domain and there are no choke points. Also the administrative domain wide management policy is applied at the logical level independent of the administrative domain s physical network topology and network addressing schemes.

The global manager the state of the administrative domain s computer network infrastructure and the administrative domain wide management policy are further described below with reference to .

The storage device includes one or more non transitory computer readable storage media such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . The pointing device is used in combination with the keyboard to input data into the computer system . The graphics adapter displays images and other information on the display device . In some embodiments the display device includes a touch screen capability for receiving user input and selections. The network adapter couples the computer system to the network . Some embodiments of the computer have different and or other components than those shown in . For example the global manager and or the managed server can be formed of multiple blade servers and lack a display device keyboard and other components while the unmanaged device can be a notebook or desktop computer a tablet computer or a mobile phone.

The computer is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program instructions and or other logic used to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules formed of executable computer program instructions are stored on the storage device loaded into the memory and executed by the processor .

The state of the administrative domain s computer network infrastructure includes descriptions of managed servers and optionally descriptions of unmanaged devices . A description of a managed server includes for example a unique identifier UID an online offline indicator one or more configured characteristics optional network exposure information service information and one or more labels that describe the managed server a label set .

The UID uniquely identifies the managed server . The online offline indicator indicates whether the managed server is online or offline. A configured characteristic stores a value associated with the managed server and can be any type of information e.g. an indication of which operating system is running on the managed server . A configured characteristic is used in conjunction with a rule s condition portion described below .

The network exposure information concerns the managed server s network interfaces. In one embodiment the network exposure information includes for each of the managed server s network interfaces an identifier of a bidirectionally reachable network BRN to which the network interface is attached and zero or more IP addresses and their subnets that are used for operating within the BRN. A BRN is a set of subnets within an organization or across organizations where any node within the BRN can establish communication with any other node in the BRN. For example all of the nodes in a BRN have unique IP addresses. In other words a BRN does not contain any NATs. Network exposure information e.g. a network interface s BRN identifier can be used in conjunction with a rule s condition portion.

In another embodiment the network exposure information includes routing information and or whether the managed server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N . The global manager can determine whether a managed server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N . For example the global manager determines whether a NAT exists between the global manager and the managed server by comparing a the server s IP address according to the TCP connection between the global manager and the server and b the server s IP address according to the local state information received from the server. If a and b differ then a NAT exists between the global manager and the managed server . If a NAT does exist then the global manager determines the type of NAT 1 1 or 1 N by performing data center detection. For example the global manager identifies the server s data center by the data center s public IP address. Alternatively the managed server performs data center detection by querying information that is external to the server but inside the data center. The server then sends that information to the global manager as part of the local status. Configuration information indicates which types of NATs are used by which data centers. If no NAT information is associated with a particular data center then the global manager assumes that the NAT type is 1 N.

The service information includes for example process information and or package information. Process information includes for example names of processes that the managed server is running which network ports and network interfaces those processes are listening on which users initiated those processes configurations of those processes command line launch arguments of those processes and dependencies of those processes e.g. shared objects to which those processes link . Those processes correspond to the managed server providing a service or using a service. Package information includes for example which packages executables libraries or other components are installed on the managed server the versions of those packages the configurations of those packages and the hash values of those packages.

A description of an unmanaged device includes for example network exposure information e.g. the IP address of the unmanaged device and an identifier of the BRN to which the unmanaged device is connected . An unmanaged device is part of an unmanaged device group UDG . An UDG includes one or more unmanaged devices . For example the Headquarters UDG could include the primary circuit and the backup circuit that are used by an administrative domain s headquarters where each circuit is associated with an IP address. An UDG is associated with a unique identifier UID . Information stored in the administrative domain state regarding an UDG includes the UID of the UDG and information regarding the unmanaged devices in the UDG e.g. their network exposure information .

Descriptions of managed servers and unmanaged devices can be loaded into the administrative domain state in various ways such as by interacting with the global manager via a graphical user interface GUI or an application programming interface API . Descriptions of managed servers can also be loaded into the administrative domain state based on local status information received from managed servers described below .

Regarding managed servers labels specifically and configured characteristics if any the assignment or reassignment of a value for a dimension or the setting of a configured characteristic s value can be performed in even more ways. For example the assignment setting can be performed using a deployment and configuration tool as part of provisioning a managed server . Any such tool can be used including off the shelf third party tools e.g. Puppet Labs Puppet software Opscode s Chef software or CFEngine AS CFEngine software and custom tools that an administrative domain might have.

As another example the assignment setting can be performed by a label configured characteristic engine not shown that calculates labels and or configured characteristic CC values. In one embodiment the label CC engine calculates labels CC values based on label CC assignment rules. A label CC assignment rule is a function that accesses data from the administrative domain state and assigns or suggests assignment of a label or a CC value. A label CC assignment rule can be preset or user configurable. For example the global manager includes a set of predefined rules but the end user can modify and or delete those rules and add new rules based on the user s own custom requirements. Label CC assignment rules can be evaluated for a managed server during the initialization process. Label CC value suggestions can then be made for any dimension CC and the end user can accept or reject those suggestions. For example if a managed server is executing the Postgres database or the MySQL database then the suggested label could be . If a managed server is executing the Linux operating system then the suggested value for the operating system CC could be Linux. 

In another embodiment the label CC engine calculates labels CC values based on cluster analysis. For example the label CC engine uses a combination of min cut and K means algorithms with additional heuristics of connected graphs to automatically identify a cluster of highly connected managed servers . The cluster of managed servers might correspond to an application see Table 1 in the administrative domain . The end user can choose to apply a value for the Application dimension or any other dimension to those managed servers en masse.

The administrative domain wide management policy includes one or more rules. Broadly speaking a rule specifies a relationship between one or more providers of a service and one or more consumers of that service.

Rule Function The relationship is subjected to a rule function which is the practical effect of the rule. For example in the case of security the rule function could be access control secure connectivity disk encryption or control of executable processes. A rule with an access control function specifies whether a consumer may use a provider s service. In one embodiment the access control function uses a pure whitelist model which means that only the allowable relationships are expressed and all other relationships are blocked by default. A rule with a secure connectivity function specifies over what secure channels e.g. encrypted network sessions using point to point data encryption a consumer may use a provider s service. For example a rule with a secure connectivity function could specify that usage of a provider s services must be encrypted when the provider is located in the US and the consumer is located in the EU. A rule with a disk encryption function specifies whether a provider must store its data on an encrypted file system. A rule with an executable process control function specifies whether a process is allowed to execute.

In the case of resource usage the rule function could be disk usage or peripheral usage. A rule with a disk usage function specifies an amount of data that a consumer can store on a provider. Note that a rule can specify other rule functions as well beyond just access control secure connectivity disk encryption control of executable processes disk usage and peripheral usage. For example a rule function could specify which Open Systems Interconnection OSI model Layer 7 services to apply to network traffic the amount of metadata to collect for security analytics or the triggers for capturing a complete network packet. The management policy model supports any number of rule functions that can be applied.

A rule function can be associated with one or more settings referred to herein as a function profile that specify details regarding the practical effect of the rule. For example settings associated with a secure connectivity rule function can be a list of cryptographic algorithms used to encrypt network traffic. In one embodiment a rule function is associated with multiple function profiles and a function profile includes a priority. This priority is used by the function level instruction generation module as described below.

Service In general a service is an arbitrary process executing on a specific network port using a specific network protocol. A service of a rule within the management policy is specified by a port protocol pair and optionally additional qualifications such as process information and or package information described above with respect to a description of a managed server within the administrative domain state . If a managed server has multiple network interfaces then a service can be exposed on all networks or on only a subset of those networks. The end user specifies on which networks the service is exposed. Note that depending on the rule function a service might not use any network resources. For example a service for an executable process control rule function does not execute on a network port using a network protocol.

Providers Consumers The one or more providers of the service and the one or more consumers i.e. users of the service are managed servers and or unmanaged devices .

In one embodiment a rule is represented within the administrative domain wide management policy using a set of information that includes a rule function portion a service portion a provided by portion a used by portion and an optional rule condition portion. The rule function portion describes the practical effect of the rule and can be associated with one or more settings function profiles . The service portion describes the service to which the rule applies. If the service portion indicates All then the rule applies to all services.

The provided by PB portion describes which managed servers and or unmanaged devices can provide the service i.e. who the providers are . If the PB portion indicates Anybody then anybody e.g. any managed server or unmanaged device can provide the service. If the PB portion indicates Any managed server then any managed server can provide the service. Any managed server is equivalent to specifying a label set that contains a wildcard thereby matching all managed servers . The used by UB portion describes which managed servers and or unmanaged devices can use the service i.e. who the consumers are . Similar to the PB portion the UB portion can also indicate Anybody or Any managed server. 

Within the PB portion and the UB portion a managed server is specified by using a label set i.e. one or more labels that describe the managed server or a UID. The ability to specify managed servers using label sets stems from the logical management model which references managed servers based on their dimensions and values labels . An unmanaged device is specified by using a UID of an unmanaged device group UDG . If a rule specifies an UDG then the rule includes additional information regarding the unmanaged devices in that group e.g. the devices network exposure information . The PB portion of a rule and or the UB portion of a rule can include multiple items including label sets to specify managed servers managed server UIDs and or UDG UIDs.

The rule condition portion which is optional specifies whether the rule applies to a particular managed server and or a particular network interface of that managed server. The rule condition portion is a Boolean expression that includes one or more configured characteristics CCs part of a managed server s description in the administrative domain state and or network exposure information e.g. a network interface s BRN identifier also part of a managed server s description in the administrative domain state . A CC portion of the expression specifies whether the rule applies to the particular managed server while a network exposure information portion of the expression specifies whether the rule applies to a particular network interface of that managed server. If the expression evaluates to true for a particular managed server s configured characteristics specifically for the values of that managed server s configured characteristics and a particular network interface s information then the rule applies to that managed server and that managed server s relevant network interface. If the expression evaluates to false then the rule does not apply to that managed server and that managed server s relevant network interface. For example if a configured characteristic stores an indication of which operating system is running on the managed server then a rule condition portion that includes that configured characteristic can control whether the rule applies to a particular managed server based on that server s operating system.

Rules within the administrative domain wide management policy are organized into rule lists. Specifically the management policy includes one or more rule lists and a rule list includes one or more rules and optionally one or more scopes. A scope constrains where i.e. to which managed servers a rule is applied. A scope includes a provided by PB portion and a used by UB portion that limit the application of the rules in the rule list. The PB portion of the scope limits the PB portion of the rules and the UB portion of the scope limits the UB portion of the rules. The PB and UB portions of a scope can specify a group of managed servers by using a label set. If the label set does not contain a label for a specific dimension then there is no scoping of that dimension for the resulting group of managed servers . If a rule list does not include any scopes then its rules are applied globally.

Different scopes can be applied to a single rule list. For example an end user can build a set of rules that express how the web service tier managed servers with a label consumes services from the database tier managed servers with a label how the load balancing tier consumes services from the web service tier and so on. Then if the end user wants to apply this rule list to his production environment managed servers with an label and to his staging environment managed servers with an label he does not need to copy or duplicate the rule list. Instead he applies multiple scopes to a single rule list a first scope where the PB portion and the UB portion include the label and a second scope where the PB portion and the UB portion include the label . The scope abstraction makes the rule list scale from both a usability perspective and a computational perspective.

Now that the administrative domain wide management policy has been described it is helpful to work through some examples. Consider an administrative domain with a two tier application where a user device accesses a web server the first tier and the web server accesses a database server the second tier . In the first tier the user device is the consumer and the web server is the provider. In the second tier the web server is the consumer and the database server is the provider. The administrative domain includes two instances of this application one in a production environment and one in a staging environment.

The web servers and the database servers are managed servers and their descriptions e.g. label sets are present in the administrative domain state . For example their label sets are 

 The Application dimension the Line of Business dimension and the Location dimension are not relevant to this example so their labels are omitted. 

Now consider the following administrative domain wide management policy which is a security policy that specifies access control and secure connectivity 

Note that the rules above refer to services simply as Apache and PostgreSQL for clarity. Remember that a service is a process and is specified by a port protocol pair and optionally additional qualifications such as process information and or package information described above with respect to a description of a managed server within the administrative domain state .

Rule List 1 Rule 1 allows any device e.g. a user device to connect to a web server and use the Apache service. Specifically the allowance of a connection is specified by Access Control in the Function portion. The any device is specified by Anybody in the UB portion. The web server is specified by a label set that includes only one label in the PB portion. The Apache service is specified by Apache in the Service portion.

Rule List 1 Rule 2 allows a web server to connect to PostgreSQL on a database server. Specifically the allowance of a connection is specified by Access Control in the Function portion. The web server is specified by in the UB portion. The PostgreSQL is specified by PostgreSQL in the Service portion. The database server is specified by a label set that includes only one label in the PB portion.

Rule List 1 also prevents inter environment connections. For example a web server is allowed to connect to PostgreSQL on a database server if the web server and database server are both in the same environment e.g. both in the production environment or both in the staging environment . Both servers in the production environment is specified by a label set that includes only one label in the Scope portion while both servers in the staging environment is specified by a label set that includes only one label in the Scope portion. Since the scopes in this example do not distinguish between the PB portion and the UB portion each scope s label set is applied to both the PB portion and the UB portion. As a result a web server is not allowed to connect to PostgreSQL on a database server if the servers are in different environments e.g. if the web server is in the staging environment and the database server is in the production environment .

Rule List 2 states that whenever any managed server connects to a database server that connection must be performed through an encrypted channel. Specifically the database server is specified by in the PB portion. The encrypted channel is specified by Secure Connectivity in the Function portion. The any managed server is specified by Any managed server in the UB portion. The whenever is specified by All in the Service portion.

Turning aside from the above example consider the following two managed servers Server 1 is a web server that is part of production part of app1 and owned by engineering in California. It would be labeled as 

Server 2 is a database server that is part of production also part of app1 and also owned by engineering but in Germany. It would be labeled as 

Assume that an access control rule allows all access to all managed servers that are part of app1. This rule would allow Server 1 and Server 2 to communicate with each other and would disallow a managed server in Germany that is part of app2 from communicating with Server 1 or Server 2. Now assume that a secure connectivity rule specifies that all network traffic between EU and US must be encrypted. Rule functions are independently applied. In other words the secure connectivity rule is a separate policy that is applied independent of the access control rule. As a result the network traffic from Server 1 to Server 2 would be allowed given the access control rule and encrypted given the secure connectivity rule .

Returning to the administrative domain wide management policy includes a set of access control rules which is described below in the section entitled Access Control Rules. 

The processing server generates management instructions for managed servers and sends the generated management instructions to the servers. The processing server also processes local state information received from managed servers . The processing server includes various modules such as a policy engine module a relevant rules module a function level instruction generation module an actor enumeration module a relevant actors module an administrative domain state update module and an access control rule creation module . In one embodiment the processing server includes a computer or set of computers that communicates with the repository and processes data e.g. by executing the policy engine module the relevant rules module the function level instruction generation module the actor enumeration module the relevant actors module the administrative domain state update module and the access control rule creation module .

The relevant rules module takes as input the administrative domain wide management policy and an indication of a particular managed server e.g. that server s UID generates a set of rules that are relevant to that server and outputs the set of rules. This is a filtering process by which the relevant rules module examines the management policy and extracts only the relevant rules for the given managed server . The relevant rules module performs the filtering by iterating through all of the rule lists in the management policy analyzing the scopes of each rule list to determine whether the scopes apply to this managed server and if the scopes do apply to this managed server analyzing the rules of each rule list to determine whether those rules apply to this managed server . A rule applies to a managed server if a the PB portion of the rule and or the UB portion of the rule specifies the managed server and b the condition portion of the rule if present evaluates to true for that managed server specifically for the values of that managed server s configured characteristics and network exposure information . The end result referred to herein as a management policy perspective is a collection of two sets of rules rules where this managed server provides a service and rules where this managed server consumes a service.

The function level instruction generation module takes as input a set of rules e.g. a management policy perspective generated by the relevant rules module generates function level instructions and outputs the function level instructions. The function level instructions are later sent to a managed server as part of the management instructions. A function level instruction is similar to a rule in that each one includes a rule function portion a service portion a PB portion and a UB portion. However whereas a rule can include multiple items within its PB portion and or UB portion including label sets managed server UIDs and or UDG UIDs a function level instruction includes only one item within its PB portion and only one item within its UB portion. Also whereas a rule can specify a managed server including its multiple network interfaces within its PB portion and or UB portion a function level instruction includes only one network interface within its PB portion and UB portion.

The function level instruction generation module analyzes a rule and generates one or more function level instructions based on that rule. If the rule s PB portion includes multiple items the rule s UB portion includes multiple items or a managed server referenced by the rule in the PB portion or UB portion has multiple network interfaces then the function level instruction generation module generates multiple function level instructions e.g. one function level instruction for each possible combination of a PB item a UB item and a particular network interface .

Consider a rule that includes two items in its PB portion A and B and two items in its UB portion C and D . The function level instruction generation module would generate four function level instructions with the following PB and UB portions 1 PB A UB C 2 PB A UB D 3 PB B UB C 4 PB B UB D. Now consider a rule that covers a managed server in its PB portion or UB portion e.g. by specifying a UID or a label set and that managed server has multiple network interfaces. The function level instruction generation module would generate multiple function level instructions e.g. one function level instruction for each network interface of the managed server .

The function level instruction generation module analyzes the rules the functions within those rules and the function profiles referenced by those rules. If a rule list includes multiple scopes then the function level instruction generation module applies those scopes multiple times to the rule list iteratively thereby generating a complete set of function level instructions for each scope . Recall that a rule function can be associated with multiple function profiles and a function profile can include a priority. The function level instruction generation module orders the rules based on the priorities of the various function profiles such that the function profile with the highest priority is used. The function level instruction generation module translates the ordered rules into function level instructions for the managed server to execute. Function level instructions reference the appropriate managed servers and or unmanaged devices e.g. the managed servers and or unmanaged devices that were referenced in the input rules taking into account the network exposure details of the services associated with the rules.

Note that the function level instruction generation module can generate a function level instruction for a particular managed server that turns out to be irrelevant for that server. For example that managed server is covered by the provided by PB portion of a rule so the function level instruction generation module generates a corresponding function level instruction. However the rule also includes a portion that specifies the managed server s local state e.g. a service portion that describes the provided service . Since the global manager does not know the managed server s local state e.g. whether the managed server is actually providing that service the generated function level instruction is sent to the managed server. The managed server checks its local state e.g. whether it is providing that service and processes the function level instruction accordingly as explained below with reference to the policy compilation module .

The actor enumeration module takes as input a collection of descriptions of managed servers and unmanaged device groups UDGs e.g. the state of the administrative domain s computer network infrastructure generates representations of those descriptions of servers and UDGs in an enumerated form referred to as actor sets and outputs the actor sets. For example the actor enumeration module enumerates the managed servers and the UDGs within the administrative domain state and the possible label sets and assigns each a unique identifier UID . These actor sets can then be used in conjunction with UB portions and PB portions of rules and scopes which specify actors using managed server UIDs UDG UIDs and or label sets.

Consider a logical management model that includes a set of N dimensions D i 1 . . . N and each dimension Dincludes a set Sof possible values V j 1 . . . M where the wildcard is one of the possible values . In one embodiment the actor enumeration module enumerates all label sets that are possible based on the logical management model which are equal to the Cartesian product given by S S . . . S. The size of this set is M M . . . M. The enumeration process collapses the multi dimensional label space of the managed servers into a simple enumerated form.

In another embodiment the actor enumeration module enumerates only those label sets that are possible based on the administrative domain state e.g. based on descriptions of managed servers within the administrative domain . For example consider a logical management model that includes 2 dimensions X and Y and each dimension includes 3 possible values A B and . A managed server with the label set can be a member of 4 possible label sets 1 2 3 and 4 . Note that the managed server s label set exists in 2 dimensional space X and Y while possible label sets 2 3 and 4 are projections of the managed server s label set into sub dimensional spaces label set 2 is 1 dimensional space X label set 3 is 1 dimensional space Y and label set 4 is 0 dimensional space . So the actor enumeration module enumerates those 4 possible label sets. The managed server with the label set cannot be a member of the label set so the actor enumeration module does not enumerate that label set.

In yet another embodiment the actor enumeration module enumerates only those label sets that are used in the administrative domain wide management policy e.g. in UB portions and PB portions of rules and scopes .

An actor set includes a UID and zero or more actor set records. An actor set record includes a UID either a managed server UID or an UDG UID an identifier of the actor s operating system and the IP address of the actor managed server or unmanaged device given the specific BRN. For example an actor set might include actor set records whose IP addresses correspond to all of the managed servers covered by the label set of and . As another example an actor set might include actor set records whose IP addresses correspond to all of the unmanaged devices in the Headquarters UDG. A single actor e.g. managed server or unmanaged device can appear in multiple actor sets.

Another factor in the actor set calculation is actors with multiple network interfaces plus the inclusion of network topology such as network address translation NAT . So there could be two actor sets for the label set of and one actor set with the internet facing IP addresses of those managed servers i.e. associated with a first BRN and a different actor set for those same managed servers with the private network facing IP addresses of those managed servers i.e. associated with a second BRN .

In one embodiment the actor enumeration module can also update actor sets based on changes to the administrative domain state . For example the actor enumeration module takes as input actor sets previously output by the actor enumeration module and a change to a managed server s description within the administrative domain state generates updated actor sets which are consistent with the changed server description and outputs the updated actor sets. The actor enumeration module generates the updated actor sets in different ways depending on the type of change to the managed server s description.

Offline online change If the description change indicates that the server went from online to offline then the actor enumeration module generates the updated actor sets by removing the server s actor set record from all input actor sets of which the server was a member. If the description change indicates that the server went from offline to online then the actor enumeration module generates the updated actor sets by adding the server s actor set record to any relevant input actor sets. If necessary the actor enumeration module creates a new actor set and adds the server s actor set record to that new actor set. 

Label set change If the description change indicates that the server s label set changed then the actor enumeration module treats this like a first server with the old label set going offline and a second server with the new label set coming online.

Network exposure information change If the description change indicates that the server removed a network interface then the actor enumeration module generates the updated actor sets by removing the server s actor set record from all input actor sets associated with that network interface s BRN of which the server was a member. If the description change indicates that the server added a network interface then the actor enumeration module generates the updated actor sets by adding the server s actor set record to any relevant input actor sets associated with that network interface s BRN . If necessary the actor enumeration module creates a new actor set associated with that network interface s BRN and adds the server s actor set record to that new actor set. If the description change indicates that the server changed a network interface s BRN then the actor enumeration module treats this like a first network interface with the old BRN being removed and a second network interface with the new BRN being added. If the description change indicates that the server changed a network interface s IP address but not the BRN then the actor enumeration module generates the updated actor sets by modifying the server s actor set record in all input actor sets associated with that network interface s BRN of which the server was a member.

The relevant actors module takes as input one or more actor sets e.g. the managed servers and the UDGs within the administrative domain state in enumerated form and a set of rules e.g. a management policy perspective determines which actor sets are relevant to those rules and outputs only those actor sets. This is a filtering process by which the relevant actors module examines the actor sets and extracts only the relevant actor sets for the given set of rules. The relevant actors module performs the filtering by iterating through all of the input actor sets analyzing the PB portions and UB portions of the input rules to determine whether a particular actor set is referenced by any of the rules PB portions or UB portions. The end result referred to herein as an actor perspective is a collection of actor sets. The actor perspective is later sent to a managed server as part of the management instructions.

In one embodiment the relevant actors module uses the input set of rules to generate an actor set filter. The actor set filter selects from the input actor sets only the actor sets that are relevant to the input rules. In other words the relevant actors module uses the actor set filter to filter the input actor sets into relevant actor sets.

The policy engine module generates management instructions for managed servers and sends the generated management instructions to the servers. The policy engine module generates the management instructions using the relevant rules module the function level instruction generation module the actor enumeration module and the relevant actors module based on a the state of the administrative domain s computer network infrastructure and b the administrative domain wide management policy .

For example the policy engine module executes the relevant rules module providing as input the administrative domain wide management policy and the UID of a particular managed server . The relevant rules module outputs a set of rules that are relevant to that server a management policy perspective . The policy engine module executes the actor enumeration module providing as input the administrative domain state . The actor enumeration module outputs a representation of the descriptions of the managed servers and unmanaged device groups UDGs within the administrative domain state in an enumerated form actor sets . The policy engine module executes the function level instruction generation module providing as input the management policy perspective output by the relevant rules module . The function level instruction generation module outputs function level instructions. The policy engine module executes the relevant actors module providing as input the actor sets output by the enumeration module and the management policy perspective output by the relevant rules module . The relevant actors module outputs only those actor sets that are relevant to those rules relevant actor sets . The policy engine module sends the function level instructions output by the function level instruction generation module and the relevant actor sets output by the relevant actors module to the particular managed server .

In one embodiment the policy engine module caches information that was generated during the above process. For example the policy engine module caches in association with the particular managed server the management policy perspective the function level instructions the actor set filter and or the relevant actor sets. As another example the policy engine module caches the administrative domain s actor sets which are not specific to a particular managed server .

Since an administrative domain s actor sets are based on the administrative domain state a change to the administrative domain state can require a change to the administrative domain s actor sets. Similarly since a managed server s management instructions are based on the administrative domain state and the administrative domain wide management policy a change to the administrative domain state and or a change to the administrative domain wide management policy can require a change to the managed server s management instructions. In one embodiment the policy engine module can update an administrative domain s actor sets and or update a managed server s management instructions and then distribute these changes if necessary to managed servers . The cached information mentioned above helps the policy engine module more efficiently update the administrative domain s actor sets and or the managed server s management instructions and distribute the changes.

In one embodiment the policy engine module updates an administrative domain s actor sets based on a change to the administrative domain state and distributes the changes to managed servers as follows The policy engine module executes the actor enumeration module providing as input the cached actor sets previously output by the actor enumeration module and the changed portion of the administrative domain state e.g. a changed server description . The actor enumeration module outputs the updated actor sets. In one embodiment the policy engine module then sends all of the updated actor sets to all of the managed servers within the administrative domain . However that embodiment is inefficient since not all managed servers are affected by changes to all actor sets.

In another embodiment only selected actor sets are sent to selected servers. For example a particular managed server is sent only those actor sets that a were previously sent to that server and b have changed. The cached relevant actor sets indicate which actor sets were previously sent to that server see a above . The policy engine module compares the cached actor sets to the updated actor sets to determine which actor sets have changed see b above . The policy engine module then computes the intersection of a and b . Actor sets in that intersection are sent to the particular managed server. In one embodiment for even greater efficiency actor sets are sent in diff format which describes differences between the cached actor sets and the updated actor sets. For example the diff format specifies an actor set identifier an actor identifier e.g. a managed server UID or an UDG UID and an indication of whether that actor should be added to removed from or modified within the actor set.

In yet another embodiment two tables are maintained and used to improve efficiency. A first table associates a managed server with actor sets of which that managed server is a member. A second table associates a managed server with actor sets that are relevant to that managed server e.g. as determined by the relevant actors module . In these tables a managed server is represented by e.g. that managed server s UID and an actor set is represented by e.g. that actor set s UID. The policy engine module uses the changed portion of the administrative domain state e.g. the changed server description to determine which managed server s description changed. The policy engine module uses the first table to determine which actor sets that managed server was a member of Those actor sets might change as a result of the changed server description. So the policy engine module uses the second table to determine which managed servers those actor sets are relevant to. The policy engine module performs the intersection computation described above for only those managed servers.

In one embodiment the policy engine module updates a managed server s management instructions based on a change to the administrative domain state and sends the updated management instructions to the managed server as follows The policy engine module executes the relevant rules module providing as input the administrative domain wide management policy and the UID of the managed server . The relevant rules module outputs a set of rules that are relevant to that server a management policy perspective . The policy engine module compares the management policy perspective that was just output to the cached management policy perspective to determine whether they differ. If the just output management policy perspective and the cached management policy perspective are identical then the policy engine module takes no further action. In this situation the previously generated managed server s management instructions specifically the function level instructions and relevant actor sets are consistent with the change to the administrative domain state and do not need to be re generated and re sent to the managed server.

If the just output management policy perspective and the cached management policy perspective differ then the policy engine module determines which rules should be added to the cached perspective and which rules should be removed from the cached perspective. The policy engine module executes the function level instruction generation module providing as input the rules to add and the rules to remove. The function level instruction generation module outputs function level instructions to add and function level instructions to remove relative to the cached function level instructions which were previously sent to the managed server . The policy engine module instructs the managed server to add or remove the various function level instructions as appropriate. In one embodiment for greater efficiency function level instructions are sent in diff format which describes differences between the cached function level instructions and the updated function level instructions. For example the diff format specifies a function level instruction identifier and an indication of whether that function level instruction should be added to or removed from the previously sent function level instructions.

The policy engine module also executes the actor enumeration module providing as input the cached actor sets and the changed portion of the administrative domain state e.g. the changed server description . The actor enumeration module outputs the updated actor sets. The policy engine module executes the relevant actors module providing as input the updated actor sets and the just output management policy perspective. The relevant actors module outputs only those updated actor sets that are relevant to those rules updated relevant actor sets .

The policy engine module compares the updated relevant actor sets to the cached relevant actor sets to determine whether they differ. If the updated relevant actor sets and the cached relevant actor sets are identical then the policy engine module sends no actor sets to the managed server. In this situation the previously generated relevant actor sets are consistent with the change to the administrative domain state and do not need to be re sent to the managed server. If the updated relevant actor sets and the cached relevant actor sets differ then the policy engine module determines which actor sets should be added removed or modified relative to the cached relevant actor sets. The policy engine module instructs the managed server to add remove or modify the various actor sets as appropriate. In one embodiment for greater efficiency actor sets are sent in diff format which describes differences between the cached relevant actor sets and the updated relevant actor sets. For example the diff format specifies an actor set identifier and an indication of whether that actor set should be added to removed from or modified relative to the previously sent actor sets.

Recall that the policy engine module can update a managed server s management instructions based on a change to the administrative domain wide management policy and send the updated management instructions to the managed server. A change to the management policy is for example the addition removal or modification of a rule or a rule set. In one embodiment a change to the management policy is generated by interaction with the global manager via a GUI or API. In another embodiment a change to the management policy is generated by an automated process within the global manager e.g. in response to a security threat detected by the global manager . The policy engine module updates the managed server s management instructions and sends the updated management instructions to the managed server in a similar way regardless of whether there was a change to the management policy or a change to the administrative domain state . However there are a few differences.

In the case of a change to the management policy the policy engine module does not necessarily update management instructions for all managed servers . Instead the policy engine module compares the previous management policy to the new management policy to determine which rules should be added removed or modified relative to the previous management policy . The policy engine module determines which managed servers are affected by the changed rules e.g. which managed servers are covered by a the rules and or scopes PB and or UB portions and b the rules conditional portions if any . The policy engine module executes the relevant rules module providing as input the changed rules instead of the entire new management policy and the UID of the managed server for only those servers that are affected by the changed rules .

The administrative domain state update ADSU module receives changes to the administrative domain state and processes those changes. A change to the administrative domain state is for example the addition removal or modification of a description of a managed server including the modification of a managed server s label set or configured characteristics or a description of an unmanaged device or unmanaged device group. In one embodiment a change to the administrative domain state originates in local state information received from a particular managed server . In another embodiment a change to the administrative domain state is generated by interaction with the global manager via a GUI or API. In yet another embodiment a change to the administrative domain state is generated by an automated process within the global manager e.g. in response to a security threat detected by the global manager .

For example the ADSU module receives a change regarding a particular unmanaged device . The ADSU module stores the new information in the administrative domain state e.g. as part of an unmanaged device group of which that particular unmanaged device is a member . The ADSU module then updates the administrative domain s actor sets based on the unmanaged device group change. Specifically the ADSU module instructs the policy engine module to update the administrative domain s actor sets. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets. This event can be for example receipt of a user command or occurrence of a specified maintenance window.

As another example the ADSU module receives a change regarding a particular managed server . The ADSU module stores the new information in the administrative domain state as part of the description of that particular managed server . The ADSU module then optionally analyzes that managed server s description to determine additional information regarding the server and stores that information in the description. The ADSU module then determines whether to update the administrative domain s actor sets and or the managed server s management instructions based on a change to the managed server s description. If the ADSU module determines to update the administrative domain s actor sets then the ADSU module instructs the policy engine module to update the administrative domain s actor sets. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets. If the ADSU module determines to update the managed server s management instructions then the ADSU module instructs the policy engine module to update the managed server s management instructions. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the managed server s management instructions. The aforementioned events can be for example receipt of a user command or occurrence of a specified maintenance window.

Whether or not the ADSU module determines to update the administrative domain s actor sets and or the managed server s management instructions depends on the type of change to the managed server s description. In one embodiment the ADSU module makes this determination as shown in Table 2 

In one embodiment the ADSU module determines additional information regarding the server by executing the label configured characteristic engine and providing the server s description as input. The label CC engine calculates labels CC values for the server based on the server s description and label CC assignment rules. In another embodiment the ADSU module determines whether the server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N .

The access control rule creation module is described below in the section entitled Access Control Rules. 

The policy compilation module takes as input management instructions and state of a managed server and generates a management module configuration . For example the management instructions are received from the global manager and include function level instructions generated by the function level instruction generation module and relevant actor sets output by the relevant actors module . The state of the managed server is retrieved from the local state repository . In one embodiment execution of the policy compilation module is triggered by a the managed server powering up or coming online b the managed server receiving management instructions and or c the contents of the local state repository changing.

The policy compilation module maps the function level instructions and relevant actor sets into a management module configuration . For example the policy compilation module maps an access control function level instruction which contains a port and an actor set reference into an iptables entry and an ipset entry in the Linux operating system or a Windows Filtering Platform WFP rule in the Windows operating system.

The application of management policy at a managed server can be affected by the local state of that server. In one embodiment the policy compilation module evaluates a condition associated with a received function level instruction and generates the management module configuration based on the result of that evaluation. For example the policy compilation module evaluates a condition that references the operating system of the managed server s peer i.e. the other actor in the relationship and selects function profile attributes based on the result of that evaluation where the selected function profile attributes are expressed in the management module configuration .

As another example recall that a managed server can receive a function level instruction that turns out to be irrelevant for that server. For example the rule includes a portion that specifies the managed server s local state e.g. a service portion that describes the provided service . Since the global manager does not know the managed server s local state e.g. whether the managed server is actually providing that service the generated function level instruction is sent to the managed server. The policy compilation module checks the managed server s local state e.g. determines whether the managed server is providing that service . This determination amounts to evaluating a condition that references the managed server s local state. The policy compilation module processes the function level instruction accordingly. If the policy compilation module determines that the condition evaluates to true e.g. the managed server is providing that service then the policy compilation module incorporates that function level instruction into the management module configuration . Specifically the policy compilation module incorporates function level instructions into the management module configuration only after evaluating the associated condition which concerns the local state of that server . If the evaluation of the condition is false then the policy compilation module does not express the function level instructions in the management module configuration . The specific conditions e.g. their nature and particular values are extensible. In one embodiment the conditions are related to the definition of a service and include process information and or package information described above with respect to a description of a managed server within the administrative domain state .

For example consider a function level instruction that allows access to only the Apache service inbound on port i.e. where the managed server is the provider or endpoint . The managed server expresses this function level instruction in the management module configuration to allow access on port only after evaluating the associated condition which concerns whether the application executing on that server that is listening on port is actually Apache and not some other application rogue or otherwise . The managed server expresses this function level instruction in the management module configuration only after determining that the associated condition evaluates to true. If the associated condition evaluates to false then the managed server does not express this function level instruction in the management module configuration . As a result the network traffic is blocked.

In one embodiment a managed server monitors its outbound connections. The managed server compares outbound network traffic to its internal process table to determine which processes in that table are establishing those outbound connections. The managed server can enforce a rule that allows only certain processes given a set of requirements mentioned above as process information to establish an outbound connection.

In one embodiment not shown the policy compilation module is located at the global manager instead of at the managed server . In that embodiment the global manager does not send management instructions to the managed server . Instead the managed server sends its local state to the global manager . After the policy compilation module generates the management module configuration at the global manager the management module configuration is sent from the global manager to the managed server .

The local state update LSU module monitors the local state of the managed server and sends local state information to the global manager . In one embodiment the LSU module determines an initial local state of the managed server stores appropriate local state information in the local state repository and sends that local state information to the global manager . The LSU module determines the local state of the managed server by inspecting various parts of the server s operating system OS and or file system. For example the LSU module obtains service information from the OS kernel tables networking information the OS system tables package information and the file system files and hash values . The LSU module obtains network exposure information from the OS kernel and and or OS level data structures.

After the LSU module sends the initial local state information to the global manager the LSU module monitors changes to the local state. The LSU module monitors changes by for example polling e.g. performing inspections periodically or listening e.g. subscribing to an event stream . The LSU module compares recently obtained local state information to information already stored in the local state repository . If the information matches then the LSU module takes no further action until local state information is obtained again . If they differ then the LSU module stores the recently obtained information in the local state repository executes the policy compilation module to re generate the management module configuration and re configures the management module accordingly and notifies the global manager of the change. In one embodiment the LSU module sends changes to local state information to the global manager in diff format which describes differences between the local state information that was previously stored in the local state repository and therefore previously sent to the global manager and the recently obtained local state information. For example the diff format specifies a type of local state information e.g. operating system and a new value for that information type. In another embodiment the LSU module sends the entire contents of the local state repository to the global manager .

When the method starts the state of the administrative domain s computer network infrastructure and an administrative domain wide management policy have already been stored in the repository of the global manager . At this point the method begins.

In step the administrative domain state and the administrative domain wide management policy are accessed. For example the policy engine module sends a request to the repository and receives the administrative domain state and the administrative domain wide management policy in response.

In step one or more relevant rules are determined. For example the policy engine module executes the relevant rules module providing as input the administrative domain wide management policy and the UID of the particular managed server . The relevant rules module outputs a set of rules that are relevant to that server management policy perspective .

In step actors are enumerated. For example the policy engine module executes the actor enumeration module providing as input the administrative domain state . The actor enumeration module generates a representation of the managed servers and unmanaged device groups UDGs within the administrative domain state in an enumerated form actor sets .

In step one or more function level instructions are generated. For example the policy engine module executes the function level instruction generation module providing as input the management policy perspective generated in step . The function level instruction generation module generates function level instructions.

In step one or more relevant actors is determined. For example the policy engine module executes the relevant actors module providing as input the actor sets generated in step and the management policy perspective generated in step . The relevant actors module outputs only those actor sets that are relevant to those rules relevant actor sets .

In step management instructions are sent to the particular managed server . For example the policy engine module sends the function level instructions generated in step and the relevant actor sets generated in step to the particular managed server .

Note that steps and concern generating the management policy perspective and resulting function level instructions for a particular managed server while steps and concern generating the actor perspective for that managed server. The generation of the management policy perspective and the generation of the actor perspective are minimally dependent on each other since step generates a set of rules that is used by step . Even so keeping the management policy calculations i.e. steps and and the actor set calculations i.e. steps and separate enhances the scalability of the policy engine module . Since the management policy calculations and the actor set calculations are kept mostly separate they can be performed in parallel e.g. even for the same managed server . In addition perspective calculations for different managed servers can also be performed in parallel. Also if an actor changes then only the actor sets need to be recalculated. The function level instructions do not need to be recalculated. If a rule changes then only the function level instructions and the relevant actor sets need to be recalculated. The actors do not need to be re enumerated. 

When the method starts information regarding the local state of the managed server has already been stored in the local state repository of the policy implementation module in the managed server . At this point the method begins.

In step management instructions are received from the global manager . For example the policy compilation module receives function level instructions and relevant actor sets from the global manager .

In step the local state is accessed. For example the policy compilation module accesses information regarding the local state of the managed server that is stored in the local state repository .

In step a management module configuration is generated. For example the policy compilation module takes as input the management instructions received in step and the local state accessed in step and generates a management module configuration .

In step a management module is configured. For example the policy compilation module configures the management module to operate in accordance with the management module configuration generated in step .

When the method starts information regarding local state of the managed server has already been stored in the local state repository of the managed server . At this point the method begins.

In step information regarding the current local state of the managed server is determined. For example the LSU module determines the local state of the managed server by inspecting various parts of the server s operating system OS and or file system.

In step a determination is performed regarding whether information regarding the current local state differs from information stored in the local state repository . For example the LSU module performs this determination. If the information does not differ then the method proceeds to step and ends. If the information does differ then the method proceeds to step .

In step the differing information is stored in the local state repository . For example the LSU module performs this step.

In step the management module configuration is re generated because the contents of the local state repository have changed and the management module is re configured accordingly. For example the LSU module executes the policy compilation module which re generates the management module configuration .

In step the differing information is sent to the global manager . For example the LSU module performs this step.

In step a change regarding a particular managed server is received. For example the administrative domain state update ADSU module receives an online offline indicator an operating system indicator network exposure information and or service information from the managed server as part of local state information.

In step the received information is stored. For example the ADSU module stores the received online offline indicator network exposure information and or service information in the administrative domain state specifically in the description of the managed server to which the information pertains .

In step the server description is analyzed to determine additional information regarding the server. For example the ADSU module uses a label configured characteristic engine to calculate labels CC values for the server and or determines whether the server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N and stores that information in the server description. Step is optional.

In step a determination is made regarding whether to update the administrative domain s actor sets. For example the ADSU module determines whether to update the administrative domain s actor sets based on a change to the managed server s description. If a determination is made to update the administrative domain s actor sets then the method proceeds to step . If a determination is made not to update the administrative domain s actor sets then the method proceeds to step .

In step the administrative domain s actor sets are updated. For example the ADSU module instructs the policy engine module to update the administrative domain s actor sets and notify affected managed servers accordingly. In one embodiment not shown the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets.

In step a determination is made regarding whether to update the managed server s management instructions. For example the ADSU module determines whether to update the managed server s management instructions based on a change to the managed server s description. If a determination is made to update the managed server s management instructions then the method proceeds to step . If a determination is made not to update the managed server s management instructions then the method proceeds to step .

In step the managed server s management instructions are updated. For example the ADSU module instructs the policy engine module to update the managed server s management instructions. In one embodiment not shown the ADSU module waits for an event to occur before instructing the policy engine module to update the managed server s management instructions.

Recall that the administrative domain wide management policy of the global manager includes a set of access control rules . The set of access control rules contains one or more access control rules which are rules with an access control rule function. Broadly an access control rule authorizes communication between a first managed server and either a second managed server or an unmanaged device or a device external to the administrative domain . In one embodiment an access control rule specifies whether a consumer may use a provider s service. Such an access control rule specifies a provided by PB portion a used by UB portion and a service. In one embodiment the access control rules are used in a pure whitelist model in which a consumer may access a service on a provider only if the set of access control rules includes an access control rule with matching PB UB and service portions.

An access control rule may only partially specify the PB UB and service portions by using a wildcard in place of one or more portions. For example if an access control rule has a UB portion that specifies a wildcard then any managed server unmanaged device or other device external to the administrative domain may access the service. The PB and UB portions may specify one or more particular actors e.g. using managed server UIDs or UDG UIDs one or more label sets or a combination thereof. An example access control rule has a PB portion indicating a particular managed server and a UB portion indicating the label set and . The example access control rule allows managed servers having a Database Server role and belonging to the Production environment to access the service at the particular managed server .

Recall that the policy implementation module of a managed server includes an alert generation module . The alert generation module monitors communication also referred to as network traffic between the managed server and other actors managed servers unmanaged devices or devices external to the administrative domain for compliance with access control rules contained in the management module configuration . The alert generation module generates an alert in response to detecting a communication that does not comply with the access control rules referred to as an unauthorized communication and sends the alert to the global manager where the alert is processed by the access control rule creation module specifically by the alert processing module . An unauthorized communication includes an attempt by a consumer to use a service provided by the managed server as well as an attempt by the managed server to use a service provided by another actor. For example an attempt to send network traffic to or receive network traffic from a port associated with a service can be an unauthorized communication. In an embodiment where the access control rules serve as a whitelist of permissible activities the management module allows attempted communication that matches an access control rule and denies attempted communication that does not match an access control rule.

When the management module denies or blocks communication to or from the managed server the alert generation module generates an alert. The alert describes the service the provider of the service and the consumer of the service corresponding to the communication. The alert may contain relevant service information about the service as well as network exposure information about the provider and consumer. The alert may contain communication information that describes characteristics of the communication. Communication information may include timing duration frequency protocol type data size e.g. total size packet size or data rate of the attempted communication. For example the communication information differentiates between a single attempt to access a service and repeated attempts to access the service. Communication information may also describe routing information of communication such as source address destination address and path information e.g. load balancers and NAT devices routing the unauthorized communication .

Recall that the processing server of the global manager includes an access control rule creation module . is a high level block diagram illustrating a detailed view of the access control rule ACR creation module of the global manager according to one embodiment. The ACR creation module includes a contextual information collection module a managed server grouping module a labeling engine a flow processing module an alert processing module and an access control rule ACR creation interface .

The contextual information collection module obtains context information describing actors in the administrative domain managed servers or unmanaged devices and describing communication sent or received by actors in the administrative domain . Context information includes managed server information unmanaged device information external device information communication information and administrative domain information.

Managed server information describes characteristics of a managed server . Managed server information includes service information such as process information and package information as described above with respect to the administrative domain state . Managed server information may describe identifiers e.g. UID internet protocol IP address media access control MAC address host name hardware resources e.g. processor type processor throughput processor load total memory available memory network interface devices storage device type or managed server type e.g. physical device cloud provided virtual device virtual machine Linux container . Managed server information may describe software resources such as the operating system and other software described by process information and package information.

A virtualized or cloud based managed server is also associated with environment information which describes the provider of the managed server e.g. a proprietary data center a third party private data center a cloud provider as well as the communication protocol e.g. encapsulation information network address network address translation to communicate with the provider. Managed server information about a managed server is stored in the managed server s local state repository and sent to the global manager for processing by the contextual information collection module . To retrieve managed server information from a virtualized or cloud based managed server the contextual information collection module may query the cloud service provider or the software providing the virtual server to send managed server information or other contextual information.

Unmanaged device information describes characteristics of unmanaged devices such as network exposure information as described above with respect to the administrative domain state . Unmanaged device information may include identifiers e.g. UDG UID IP address MAC address device name hardware resources software resources or network connectivity e.g. available ports mapping between ports and services of an unmanaged device . A managed server may collect unmanaged device information about unmanaged devices that communicate with the managed server and send the unmanaged device information to the global manager for processing by the contextual information collection module . Alternatively or additionally the global manager queries unmanaged devices in the administrative domain to collect unmanaged device information. Since unmanaged devices do not include a policy implementation module that reports the unmanaged device s local state unmanaged device information may be incomplete or less detailed than managed server information.

External device information describes characteristics of devices external to the administrative domain communicating with managed servers . External device information may include identifiers e.g. IP address uniform resource locator URL other web address hardware resources software resources or network connectivity of an external device. Managed servers may collect external device information and send the information to the global manager for processing by the contextual information collection module but much external device information may not be visible to managed servers . In addition external device information describes reputation information of the external device which indicates trustworthiness of the external device. In one embodiment the contextual information collection module obtains reputation information matching the external device s identifier. Using the reputation information the contextual information collection module classifies the external device as safe malicious or neutral. Reputation information may be a binary indicator e.g. whether the external device s identifier is on a blacklist or a score e.g. a relative assessment of danger associated with an identifier .

Communication information is described above with respect to the alert generation module . A managed server sends communication information to the global manager that describes communication sent or received by the managed server . In one embodiment a managed server sends communication information about communication independently of evaluating whether the communication is authorized or unauthorized. When the contextual information collection module receives duplicate communication information describing the same communication the contextual information collection module may merge or de duplicate the duplicate communication information. For example the contextual information collection module de duplicates communication information received from two managed servers one providing a service and one consuming the service.

The contextual information collection module generates administrative domain information based on contextual information received from managed servers . Administrative domain information aggregates contextual information over the administrative domain or over a subset of actors in the administrative domain . The subset of actors in the administrative domain may be managed servers described by a label set. In one embodiment administrative domain information describes communications having at least one common characteristic. The common characteristic may be a particular port process protocol or actor e.g. a managed server an unmanaged device an external device . For example the contextual information collection module generates administrative domain information indicating the number of managed servers having corrupted binaries associated with a particular service. As another example the contextual information collection module generates administrative domain information indicating a number of managed servers scanned by a particular actor. Scanning refers to sending a request e.g. probe to a managed server and using the managed server s response or lack thereof to obtain or automatically determine the configuration of the managed server and processes executing on the managed server .

In one embodiment the contextual information collection module generates administrative domain information indicating unusual activity within the administrative domain . The contextual information collection module identifies contextual information associated with a particular actor a group of managed servers e.g. characterized by a common label set a common service or some other characteristic. The contextual information collection module summarizes the contextual information using a quantity e.g. amount of communication number of corrupted files and compares the quantity to a threshold quantity. The threshold quantity may be based on a preconfigured setting or may be determined dynamically based on previous historical norms for the quantity. For example the threshold quantity is two standard deviations above the weekly moving average for the quantity. In response to the comparison to the threshold quantity the contextual information collection module determines whether the summarized contextual information is unusual. For example the contextual information collection module determines that a managed server is attempting to access an unusual number of ports unassociated with any services if the number of such ports that the managed server has accessed exceeds a threshold number.

The managed server grouping module obtains communication information describing communication between actors in the administrative domain . Based on the communication information the managed server grouping module groups the managed servers into application groups. An application group is a set of managed servers having significant volume of communication within the group compared to volume of communication with actors external to the group. In one embodiment the managed server grouping module constructs a graph where the nodes represent managed servers of the administrative domain and where the edges represent communication between the managed servers . The edges have binary values indicating presence absence of communication between the nodes or have non binary values quantifying the volume of communication e.g. frequency data size duration . For example the value of an edge connecting two nodes is the daily quantity of data exchanged between managed servers corresponding to the two nodes. The graph may be undirected with edges that disregard direction of communication or the graph may be directed with directed edges according to direction of communication. For example a directional edge pointing away from a node indicates that the corresponding managed server is a consumer of a service and a directional edge pointing towards a node indicates that a managed server is the provider of a service. The managed server grouping module partitions the graph into sub graphs each corresponding to an application group. For example the managed server grouping module applies a depth first search a k means cluster or a minimum cut algorithm to partition the graph. In other words the managed server grouping module groups the managed servers into application groups based on communication information gathered by the contextual information collection module .

The labeling engine obtains managed server information and determines labels for managed servers based at least in part on the managed server information. The labeling engine is similar to the labeling CC engine but does not determine configured characteristics. In one embodiment the labeling engine determines a group level label set i.e. one or more group level labels to associate with the managed servers in an application group. In one embodiment the group level label set includes labels with dimensions corresponding to the environment application and location of the managed servers . Labels are described further with respect to Table 1 and the administrative domain wide management policy .

The labeling engine may determine the value of a managed server s location dimension based on locations of web addresses e.g. an IP address and or a URL associated with the managed server . The labeling engine may determine the value of a managed server s label based on conditional heuristics that use contextual information and or information derived from contextual information . A conditional heuristic can be created by an administrator or can be pre configured. For example a conditional heuristic specifies that if a managed server is provided by a particular cloud service provider or located in a particular data center then the labeling engine determines a particular value for the managed server s environment dimension. As another example a conditional heuristic specifies that if a managed server contains a particular file or process or a particular set of files or processes then the labeling engine determines a particular value for the managed server s application dimension. The labeling engine may request an administrator to indicate a group level label set or to verify an automatically generated group level label set. The labeling engine modifies the group level label set in response to an indication or correction by the administrator.

Besides group level label sets applicable to an application group the labeling engine determines role labels i.e. labels with a role dimension for individual managed servers within an application group. In one embodiment the labeling engine determines a role label for a managed server based on hardware resources service information or other managed server information. For example the labeling engine determines that a managed server is a database if the total available memory exceeds a threshold. As another example the labeling engine determines that a managed server is a load balancer based on the number of network interfaces. In one embodiment the labeling engine obtains information regarding processes executing on a managed server from managed server information and determines the value of the role dimension based on the processes. Table 3 illustrates an example mapping between processes and role dimension values.

The flow processing module obtains communication information between actors in the administrative domain and generates access control rules corresponding to the communication information. In one embodiment the flow processing module identifies communication not authorized by an access control rule and generates an access control rule authorizing the communication. To generate the access control rule the flow processing module identifies the service generating the communication the provider of the service and the consumer of the service. The flow processing module generates the access control rule with a service portion indicating the identified service a PB portion indicating the identified provider and a UB portion indicating the identified consumer. In one embodiment the flow processing module assumes that there are no abnormal or malicious communications in the administrative domain and accordingly generates access control rules authorizing any communication present in the administrative domain .

In one embodiment the flow processing module generates access control rules based on group level label sets and role labels of managed servers . The flow processing module determines a target access control rule. For example the target access control rule is specified by an administrator through a GUI e.g. by indicating a particular edge of a displayed graph corresponding to the graph generated by the managed server grouping module . The generated access control rule specifies a service a first managed server as a provider of the service and a second managed server as a consumer of the service. The flow processing module identifies role labels and group level label sets of the first and second managed servers generated by the labeling engine . The flow processing module then generates additional access control rules applying to other consumer provider pairs of managed servers using the specified service corresponding to particular edges of the displayed graph . The identified managed servers that are providers of the service have group level label sets and role labels matching those of the first managed server . The identified managed servers that are consumers of the service have group level label sets and role labels matching those of the second managed server . Alternatively or additionally to generating additional access control rules covering the identified consumer provider pairs of managed servers the flow processing module broadens the target access control rule to include the identified consumer provider pairs of managed servers . For example the broadened access control rule s PB portion and UB portion are specified in terms of label sets including the role label and group level label sets rather than in terms of identifiers of particular managed servers .

In one embodiment the flow processing module generates an access control rule controlling communication between a first managed server and another actor e.g. an unmanaged device an external device outside of the administrative domain . The flow processing module identifies an existing access control rule specifying a service a first managed server and the other actor. The flow processing module identifies a second managed server having similar labels including role label and group level label set as the first managed server . The first and second managed servers are either both consumers of the specified service or both providers of the specified service. The flow processing module generates another access control rule authorizing service related communication between the second managed server and the other actor. Alternatively or additionally to generating an additional access control rule the flow processing module broadens the existing access control rule by specifying the access control rule s PB portion or UB portion in terms of the first managed server s label set including the role label and group level label set rather than in terms of an identifier of the first managed server .

In one embodiment the flow processing module generates rules to modify the server state of the managed servers within the administrative domain . The server state determines to what extent the management modules implement the access control rules. In an enforcement state the management modules block or terminate communication that is unauthorized according to the access control rules. For example in a pure whitelist policy the management modules block or terminate communications that do not match at least one access control rule. The server states also include a build state and a test state where the management modules permit communications even if the communications are not authorized by an access control rule. To initiate a build state or test state the flow processing module generates an unrestricted access control rule with PB UB and service portions that specify wildcards. In other words the unrestricted access control rule authorizes all communication because there are no restrictions on the access control rule s applicability to various services or actors. To transition to enforcement state from build state or test state the flow processing module removes the unrestricted access control rule.

The alert processing module obtains alerts from managed servers processes the alerts and if appropriate generates access control rules based on the obtained alerts. In one embodiment the alert processing module obtains alerts from managed servers when the managed servers are in an enforcement state or a test state. When a managed server is in a build state the alert processing module instructs the managed server not to generate alerts in response to detecting communication that is not authorized by an access control rule. When a managed server is in a test state the alert generation module generates alerts indicating unauthorized traffic even though the management module is not enforcing the access control rules to block the unauthorized traffic.

Before generating an access control rule in response to an alert the alert processing module classifies the communication that triggered the alert using obtained contextual information relevant to the alert. The contextual information includes communication information describing the communication managed server information about any managed servers sending or receiving the communication or administrative domain information. If the alert is generated in response to communication with an external device the contextual information includes external device information. If the alert is generated in response to communication with an unmanaged device the contextual information includes unmanaged device information. The alert processing module classifies the communication triggering the alert as being legitimate or malicious based on the obtained contextual information. For example if the external device information indicates that the external device is malicious then the communication is classified as malicious.

In one embodiment the alert processing module classifies communication as malicious if the administrative domain information indicates that the actor initiating the communication is associated with unusual activity. The contextual information collection module may generate administrative domain information summarizing the number of alerts associated with a common characteristic such as a common actor process port or protocol. If the number of alerts associated with the common characteristics exceeds a threshold number then the contextual information collection module classifies the communication as malicious. For example if the number of alerts generated in response to traffic initiated by a managed server exceeds a threshold number then communication initiated by the managed server is classified as malicious.

The alert processing module may determine that obtained administrative domain information indicates the presence of a progressive infection. In a progressive infection malicious software spreads across the administrative domain over time. If administrative domain information indicates that the number of alerts from a first managed server exceeds a threshold and if a second managed server in communication with the first managed server begins generating alerts then the alert processing module determines that the alerts are associated with a progressive infection. Accordingly the alert processing module classifies the communication triggering alerts as malicious.

Alternatively or additionally to classifying the alert according to contextual information the alert processing module notifies an administrator in response to receiving the alert. Notifying the administrator may include reporting contextual information related to the communication triggering the alert. The alert processing module may receive a classification from the administrator indicating whether the corresponding communication is legitimate or malicious.

The alert processing module processes an alert according to the classification of the corresponding communication. If the corresponding communication is classified as malicious the alert processing module does not generate an access control rule authorizing the corresponding communication. In some embodiments the alert processing module instructs the managed servers to cease communication with the originating actor that initiated the communication triggering the alert. In other words the originating actor is quarantined. The alert processing module notifies an administrator about the alert in response to classifying the corresponding communication as malicious. Alternatively or additionally the alert processing module notifies an administrator about the alert regardless of the alert s classification. If the corresponding communication is classified as legitimate then the alert processing module may instruct the flow processing module to generate an access control rule authorizing the communication. In some embodiments the alert processing module may request approval for the access control rule from an administrator before adding the access control rule to the set of access control rules .

The access control rule ACR creation interface provides an administrator an interface for reviewing contextual information application groups label sets e.g. including role labels and or group level label sets assigned to managed servers and access control rules. The ACR creation interface may receive a corrected application group of a managed server from an administrator. In response the managed server grouping module updates the managed server s application group to match the corrected application group. Additionally the labeling engine updates the group level label set of the managed server to match the group level label set of the newly selected application group. The ACR creation interface may receive a corrected label set for a managed server and the labeling engine updates the managed server s label set according to the correction. In response to the administrator modifying an application s group level label set the labeling engine modifies group level label sets of other managed servers in the application group to match the corrected group level label set.

The ACR creation interface may receive a target access control rule from an administrator e.g. by the administrator indicating a particular edge of a displayed graph . For example the administrator s target access control rule indicates a service the service s provider and the service s consumer. The flow processing module generates an access control rule according to the administrator s instructions and possibly generates additional access control rules or broadens the generated access control rule based on the service and the label sets of the provider and consumer.

The ACR creation interface may notify the administrator about alerts obtained by the alert processing module . The ACR creation interface may receive a classification of the communication triggering the alert and the flow processing module may generate an access control rule according to the classification. In one embodiment the ACR creation interface presents an administrator with an access control rule automatically generated by the flow processing module . The ACR creation interface may receive the administrator s approval modification or denial of the auto generated access control rule. The flow processing module adds the possibly modified auto generated access control rule to the set of access control rules in response to receiving approval or modification from an administrator.

In step communication information describing past communication between the plurality of managed servers is obtained. For example the communication information describes the daily amount of data transferred between each pair of the managed servers . Step is performed by for example the contextual information collection module .

In step a subset of managed servers is identified from the plurality of managed servers by grouping the plurality of managed servers based on the obtained communication information. For example the subset is determined by applying a k means clustering algorithm to a graph with nodes representing the managed servers and edges having values reflecting daily amount of data transferred between pairs of managed servers . Step is performed by for example the managed server grouping module .

In step a group level label set is determined to associate with the subset of managed servers . For example the label set includes an application label e.g. a location label e.g. and an environment label e.g. . Step is performed by for example the labeling engine .

In step role labels are determined for managed servers in the subset of managed servers. A managed server is associated with one role label. For example a first managed server is associated with a role label having a Database value and a second managed server is associated with a role label having a Web Server value based on processes executing on the respective managed servers . Step is performed by for example the labeling engine .

In step an access control rule authorizing communication between a first managed server of the subset of managed servers and a second managed server is generated based on the group level label set and the role labels. The second server may be part of the subset of managed servers or part of another subset of managed servers . For example the PB portion of the access control rule indicates that the first managed server is the provider of an sshd ssh daemon service and the UB portion of the access control rule indicates that the second managed server is the consumer of the sshd service. Step is performed by for example the flow processing module .

In step the access control rule is stored as part of the set of access control rules . Step is performed by for example the flow processing module .

In step the method ends. Later the policy engine module processes the change to the administrative domain wide management policy . The processing results in translating the access control rule to function level instructions for one or more relevant managed servers to implement the access control rule and sending the function level instructions to the relevant managed servers .

Alternatively or additionally to generating access control rules the methods described herein may be used to facilitate creation of other rules with different rule functions as part of the administrative domain wide management policy . Some rules specify both the provider of a service and a consumer of a service. One such example rule has a secure connectivity function specifying protocols encryption or channels to be used with communications for a service. For these rules the global manager obtains a target rule and identifies a label set e.g. including a role label and or group level labels describing the provider and a label set describing the consumer. The global manager then generates additional rules or broadens existing rules that apply to provider consumer pairs with respective label set pairs that match the pair of identified label sets. The additional or broadened rules apply to the same service and have the same function profile e.g. encryption protocol communication protocol type as the target rule.

Some rules specify only the provider of the service or only the consumer of the service. Example rules that specify one of a consumer or a provider may have rule functions regulating stored data encryption disk usage peripheral usage or processor usage. For these rules the global manager obtains a target rule and identifies a label set corresponding to the provider or the consumer. For rules that specify a provider the global manager generates additional rules or broadens existing rules that apply to providers of the service having label sets that match the identified label set. For rules that specify a consumer the global manager generates additional rules or broadens existing rules that apply to consumers of the service having label sets that match the identified label set. The additional or broadened rules apply to the same service and have the same function profile e.g. encryption protocol resource usage limits as the target rule.

Some rules affect a managed server regardless of the services provided by or consumed by the managed server . Example rules regulate which processes may execute on a managed server general disk encryption settings or when to capture a network packet for security analysis. The global manager obtains a target rule identifies a label set from the target rule and generates or broadens rules applying to additional managed servers with label sets matching the identified label set. The additional or broadened rules have the same function profile as the target rule. This process is similar to that described previously except the generated rule does not specify a service.

In some embodiments the flow processing module generates rules based on a different class of labels than are used for other rules e.g. access control rules . Such rules affect a service provided by or used by a managed server and may be generated based on one or more alternative or additional labels for the managed server. The labeling engine may determine multiple process specific role labels to apply to processes of a managed server . In one embodiment the flow processing module generates rules based on alternative role labels for the provider or the consumer of the service. The alternative role labels are the process specific role labels associated with the one or more processes used by the managed server to provide or consume the service specified by the rule.

In step an alert is obtained from a first managed server configured to generate the alert in response to communication with a second managed server . The alert is generated in response to the first managed server determining that the one or more access control rules implemented by the first managed server do not authorize the communication between the first managed server and the second managed server .

In step contextual information relevant to at least one of the first managed server the second managed server and the alert is obtained. For example the contextual information is administrative domain information indicating the number of ports that a first managed server has requested to connect to at a second managed server where the second managed server does not have any processes listening to the ports. As another example the contextual information is communication information indicating the frequency of communication between the first managed server and the second managed server .

In step the communication corresponding to the alert is classified as being legitimate or malicious. For example the communication is classified as being malicious in response to the number of ports identified in the administrative domain information exceeding a threshold number of ports. As another example the communication is classified as being legitimate in response to the frequency of communications not exceeding a threshold difference of an expected frequency of communication associated with the service.

In step a determination is made whether the communication is classified as legitimate. If the communication is legitimate the method proceeds to step . If the communication is not legitimate the method proceeds to step .

In step an access control rule is generated permitting the communication between the first managed server and the second managed server .

In step an administrator is notified about the alert. Notifying an administrator about an alert may include requesting the administrator approve an access control rule generated to authorize the communication corresponding to the alert if the communication is classified as being legitimate. Notifying the administrator may also include prompting the administrator to quarantine the first or second managed server if the communication is classified as malicious.

In step the method ends. Later the policy engine module processes the change to the administrative domain wide management policy . The processing results in translating the access control rule to function level instructions for one or more relevant managed servers to implement the access control rule and sending the function level instructions to the relevant managed servers .

The above description is included to illustrate the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

