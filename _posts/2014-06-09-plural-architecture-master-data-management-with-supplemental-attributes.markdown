---

title: Plural architecture master data management with supplemental attributes
abstract: According to one embodiment of the present invention, a system for managing data within a plurality of data management architectures includes at least one processor. The system persists an entity managed by a first data management architecture to a second data management architecture. The first data management architecture manages entity data within data sources and the second data management architecture manages persisted entities within a common repository. Entity attributes are mapped between the first and second data management architectures. The system further provides one or more supplemental attributes for the persisted (e.g., registration mode or fully persisted mode) entity within the second data management architecture, wherein the supplemental attributes are unmapped between the first and second data management architectures. Embodiments of the present invention further include a method and computer program product for managing data within a plurality of data management architectures in substantially the same manner described above.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384247&OS=09384247&RS=09384247
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09384247
owner_city: Armonk
owner_country: US
publication_date: 20140609
---
This application is a continuation of U.S. patent application Ser. No. 14 070 043 entitled PLURAL ARCHITECTURE MASTER DATA MANAGEMENT WITH SUPPLEMENTAL ATTRIBUTES and filed Nov. 1 2013 the disclosure of which is incorporated herein by reference in its entirety.

Present invention embodiments relate to data management and more specifically to master data management utilizing a combination of registry and centralized type architectures and enrichment of a profile managed in either of these styles with supplemental attributes.

Master Data Management MDM hubs have provided two approaches for the management of master data. Master data typically includes information pertaining to the operation of a business e.g. customers products employees materials suppliers etc. and is generally stored in different data sources across that business. Each management approach addresses different implementation styles delineated primarily on the location where the ownership and management of master data occurs.

In a registry style or virtual master data management approach source systems are the systems of record for providing master data and changes to the master data are made through these existing source systems. A virtual master data management system gets loaded with records from the source systems that are associated with entities e.g. person corporation company organization business etc. and determines similar or matching records that are associated with the same entity. The virtual master data management system stores only enough information to match and provide linkages between the similar and matching records for each of the entities. A trusted view of this information for an entity is subsequently provided to a user on demand from data within the source systems. Since a single view of an entity is not persisted to storage of the virtual master data management system modifications to master data are made via the source systems.

In a centralized style or physical master data management approach master data from source systems is loaded into a single repository of a physical master data management system and all information relevant to providing a single view of an entity is stored in that repository. Matching and collapsing of records across the source systems are performed and a single view of the entity is typically persisted in the repository. The physical master data management system becomes the system of record for managing master data from that point forward.

However these master data management styles are not always sufficient and do not always fully accommodate the breadth of master data management requirements that commonly evolve over time with the growth and adoption of master data management techniques in support of the data governance strategies within an enterprise. This typically results in the proliferation and attempts to federate multiple master data management MDM hubs of the different styles thereby incurring additional integration complexity maintenance costs and version alignment of supporting software.

According to one embodiment of the present invention a system for managing data within a plurality of data management architectures includes at least one processor. The system persists an entity managed by a first data management architecture to a second data management architecture. The first data management architecture manages entity data within one or more data sources and the second data management architecture manages persisted entities with data from the one or more data sources within a common repository. One or more entity attributes of the entity are mapped between the first and second data management architectures. The system further provides one or more supplemental attributes for the persisted entity within the second data management architecture wherein the one or more supplemental attributes are unmapped between the first and second data management architectures. Embodiments of the present invention further include a method and computer program product for managing data within a plurality of data management architectures in substantially the same manner described above.

Present invention embodiments manage master data in registry or virtual centralized or physical and co existence styles within a common platform and provide a framework for implementing style agnostic services that facilitate the management of information stored according to each of these styles. Master data typically includes information pertaining to operation of a business e.g. customers products employees materials suppliers etc. and is generally stored in different data sources across that business. However present invention embodiments may manage any type of data pertaining to any type of objects e.g. business or other entities or organizations animate or inanimate objects etc. .

A single application programming interface API enables the style of master data management e.g. registry or virtual centralized or physical etc. to be transparent to a service consumer. A subset of entity attributes is synchronized across the styles and seamless movement of master data records and or more granular data attributes from one style of management to another is performed typically from the registry style to the centralized and or co existence styles within the common platform. Master data records from a registry style system may be moved to a centralized style system in accordance with a set of rule based criteria e.g. size of entity membership data completeness etc. .

Present invention embodiments significantly reduce the need to federate out to multiple independent master data management MDM systems in order to ascertain a complete picture of master data managed in different styles e.g. registry and centralized styles . Further present invention embodiments enable seamless movement of information from one master data management style to another thereby avoiding significant extract transform load ETL efforts to move data from one system to another. Moreover as the style of master data management changes over time the application programming interfaces APIs used to access information remain the same.

In addition present invention embodiments augment entities stored in the registry or virtual master data management style with closely affiliated centrally managed attributes of the physical master data management style within and across domains.

An example computing environment for use with present invention embodiments is illustrated in . Specifically computing environment includes a master data management server system one or more client or end user systems and one or more data sources . The data sources may be implemented by any conventional or other storage structures or systems e.g. server systems databases file systems etc. that contain records with master data pertaining to various entities e.g. person corporation company organization business etc. . However data sources may contain any type of data pertaining to any type of objects e.g. business or other entities or organizations animate or inanimate objects etc. .

Master data management server system client systems and data sources may be remote from each other and communicate over a network . The network may be implemented by any number of any suitable communications media e.g. wide area network WAN local area network LAN Internet Intranet etc. . Alternatively master data management server system client systems and data sources may be local to each other and communicate via any appropriate local communication medium e.g. local area network LAN hardwire wireless link Intranet etc. .

Master data management server system provides a plural architecture master data management system including a virtual or registry type master data management system and a physical or centralized master data management system . Client systems enable users to provide information to master data management server system to configure load and or query the plural architecture master data management system. In particular the master data management server system includes virtual master data management system with virtual master data management system modules physical master data management system with physical master data management system modules a request processing framework and an entity management module . Virtual master data management system modules implement virtual master data management system . In this type of system data sources provide and maintain master data and changes to the master data are made through these data sources. The virtual master data management system modules process records from data sources to determine records associated with the same entity e.g. person corporation company organization business etc. and store only enough information to match and provide linkages between similar and matching records from the data sources for the various entities.

Virtual master data management system modules include a matching and linking engine to process records from the data sources and determine records associated with the same entity e.g. person corporation company organization business etc. . The determined records for an entity are linked and this linkage information is stored and maintained by matching and linking engine . The records for an entity may be matched based on any conventional or other suitable matching or partial matching techniques e.g. a quantity of the same or similar fields matching scores probabilistic matching etc. .

Queries may be provided directly to the virtual master data management system from users applications using the same APIs for virtual owned data whose view is not fully persisted in the physical master data management system. In this case a trusted view of entity information may be provided on demand by the virtual master data management system by utilizing the linking information to obtain records associated with the entity from the various data sources. Alternatively the virtual master data management system may process queries for entities received by services of the physical master data management system as described below.

Physical master data management system modules implement a centralized or physical master data management system. In this type of system master data from data sources is loaded into a single repository and all information relevant to providing a single view of an entity is stored in that repository. Matching and collapsing of records across the data sources are performed and a single view of an entity is persisted in the repository. Once the data is loaded in the repository the data is utilized to process requests e.g. updates queries etc. or may be associated with information from another domain e.g. product account etc. that is being centrally managed. The virtual and physical master data management systems may be implemented by any conventional or other registry and or centralized master data management systems e.g. virtual and physical master data management systems of IBM INFOSPHERE Master Data Management MDM etc. .

A database system may store various information for the data management e.g. serve as the repository for the physical master data management system metadata data models of the virtual and physical master data management systems mapping and linking information etc. . The database system may be implemented by any conventional or other database or storage unit may be local to or remote from master data management server system and may communicate via any appropriate communication medium e.g. local area network LAN wide area network WAN Internet hardwire wireless link Intranet etc. . The client systems may present a graphical user e.g. GUI etc. or other interface e.g. command line prompts menu screens etc. to solicit information from users pertaining to the data management and may provide reports including results e.g. query results configuration information etc. .

Request processing framework receives and processes requests for master data stored within the plural architecture master data management system as described below. This framework may be implemented by any conventional or other framework for processing data management requests e.g. a request processing framework of IBM INFOSPHERE Master Data Management MDM etc. .

Entity management module enables utilization of the virtual and physical master data management systems for data management and controls movement access and retrieval of master data within these data management systems as described below. In addition the entity management module enables addition of supplemental attributes within the physical master data management system and controls various operations e.g. addition deletion update etc. performed on those attributes as described below. The entity management module includes an entity event notification module a services module and an attribute control module . The entity event notification module provides notification of a modification to an entity within data sources as described below. The entity event notification module also provides extension capability so that business rules can be implemented to conditionally persist the entity view in the physical master data management system. That is metrics could be taken to establish whether the content of a view is complete or clean enough to persist that view in the physical master data management system. This can be evaluated calculated and a decision made in the event notification component.

Services module provides various services for the plural architecture master data management system e.g. persisting entities querying entities adding deleting updating retrieving supplemental attributes etc. as described below. Attribute control module controls various operations e.g. addition deletion update etc. performed on persisted entities as described below. The entity management module may be external of or fully or partially reside within the virtual master data management and physical master data management systems in any fashion. For example event notification module may reside within virtual master data management system modules while services module and attribute control module may reside within physical master data management system modules .

Master data management server system client system and data sources may be implemented by any conventional or other computer systems preferably equipped with a display or monitor a base e.g. including at least one processor one or more memories and or internal or external network interfaces or communications devices e.g. modem network cards etc. optional input devices e.g. a keyboard mouse or other input device and any commercially available and custom software e.g. server communications software virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module browser interface software etc. .

The modules of master data management server system e.g. virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module etc. may include one or more modules or units to perform the various functions of present invention embodiments described below. The various modules e.g. virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module etc. may be implemented by any combination of any quantity of software and or hardware modules or units and may reside within memory of the master data management server system for execution by processor .

Present invention embodiments may accommodate various scenarios employing virtual and physical master data management systems to manage master data. For example master data may be currently managed in a virtual master data management system but eventually some master data attributes are desired to be managed in a physical master data management system as illustrated in . Present invention embodiments enable the entity to be persisted from the virtual to the physical master data management system. By way of example an entity is managed by virtual master data management system provided by master data management server system . The entity includes several data records from various data sources that are linked and is associated with an entity identification to uniquely identify the entity within the virtual master data management system.

The entity may be persisted to physical master data management system provided by master data management server system . In this case a party identification is generated for uniquely identifying the entity or party within the physical master data management system and mapped to entity identification . The entity may be persisted in a registration mode where link information for the entity may be persisted in the physical master data management system. The link information is utilized to retrieve the entity records from the virtual master data management system. Alternatively the entity may be persisted in a fully persisted mode where the records for the entity are centrally stored in a repository of the physical master data management system e.g. database system . In this case the records for the persisted entity or party may be retrieved from the centrally stored data.

Various services are provided e.g. by entity management module that access the virtual and or physical master data management systems to provide data in response to queries. Once the entity is persisted in the physical master data management system client applications may be developed without having to face significant rework by leveraging centrally managed persisted attributes.

Another example scenario accommodated by present invention embodiments includes enhancing performance. For example virtual master data management system is initially employed. However performance degradation occurs in response to retrieving some entities due to a large number of records or members e.g. thousands etc. that belong to those entities. Retrieval may be enhanced by persisting a view of these large entities within physical master data management system .

Yet another example scenario accommodated by present invention embodiments includes conditional persistence. For example virtual master data management system is initially employed to manage and store entities. However views of these entities may be conditionally persisted within physical master data management system based on various criteria. By way of example views of entities may be conditionally persisted in response to satisfying pre configured or user specified data characteristics e.g. surpassing a particular level of data completeness or data quality etc. .

A flow diagram of plural architecture data management system is illustrated in . Initially master data management server system provides virtual master data management and physical master data management systems e.g. via virtual master data management and physical master data management system modules as described above. Data can be created and or managed using a single set of services in either data sources e.g. via the virtual master data management system or in a repository e.g. database system that is centrally managed e.g. via the physical master data management system .

Initially linking and matching engine of virtual master data management system receives and processes records of master data from various data sources and determines records associated with the same entity e.g. person corporation company organization business etc. . The determined records for an entity are linked and this linkage information is stored and maintained by matching and linking engine within virtual master data management system .

Since master data is generally stored in different data sources the master data may be duplicated and inconsistent. Thus once records for the entities are matched and linked a plurality of views may exist for the same entity with varying data. Accordingly a view for an entity is selected e.g. by a user or automatically and may be persisted to the repository of the physical master data management system e.g. database system via services e.g. persistEntity etc. provided by services module of entity management module . A party identification is generated for uniquely identifying the persisted entity or party within the physical master data management system and mapped to an entity identification for the virtual master data management system. This associates the entity of the virtual master data management system with the corresponding party in the physical master data management system. Further rules may be applied to conditionally persist certain entities based on a set of criteria e.g. completeness data quality of created entity view entity size e.g. number of members or records in the entity etc. .

A persisted entity or party may be represented in the physical master data management system in various manners. For example the entity may be persisted in a registration mode where a set of entity identifiers including an entity identification to identify the corresponding virtual representation e.g. the entity within the virtual master data management system and a corresponding set of unique record identifiers for the member records comprising the entity are stored in party records in the repository. The record identifiers uniquely identify a particular member record of an entity in a data source . The party records further include a status indicator that indicates the absence of a full persisted view of the entity in the repository of the physical master data management system.

The entity may further be persisted in a fully persisted mode where the selected view of the entity is stored in party records within the repository of the physical master data management system. The party records include the status indicator indicating that a persisted view of the entity is stored in the repository. The status indicator may include any suitable values to indicate the persistence mode. By way of example only a value of one indicates a registration mode of persistence while a value of two indicates a full persistence.

The status indicator enables the plural architecture master data management system to conditionally derive the entity view from the virtual master data management system or from a stored representation in the repository of the physical master data management system. This provides several advantages. For example generation of the selected view for large entities that include numerous e.g. thousands etc. member records may take a significant amount of time. However the time to retrieve this representation dramatically decreases by fully persisting the results of this view when first constructed. Further a single application programming interface API can be used to provide services to retrieve entities for consuming systems regardless of whether the entities are virtually managed or physically managed in the plural architecture master data management system. This enables generation of consuming client applications early in the data management process and as business needs evolve the same set of application programming interfaces APIs remain functional for both virtual and physical master data management.

As critical data e.g. used in matching and identifying duplicate records etc. changes in data sources or in the central repository of the physical master data management system entity event notification module of entity management module triggers the sharing of this information. For example a modification e.g. add update etc. to data or an entity within data sources may occur. Matching and linking engine matches and links records of the data sources in order to determine if the selected view of the entity has changed. If the selected view has changed entity event notification module triggers propagation of the modification to the persisted entity or party in the physical master data management system.

In the event that data of a fully persisted entity or party is originally changed in the repository of the physical master data management system the modification may be propagated to data sources by the virtual master data management system via a notification mechanism that each of the source systems may subscribe to in order to consume the change consistently.

Queries for the plural architecture master data management system are received by request processing framework from client systems and handled by services module of entity management module . The services module provides various application programming interfaces APIs or services e.g. getParty getPerson getOrganization getPartyByAdminSysKey getPartyByEntityId etc. to retrieve data e.g. person entity etc. based on various criteria e.g. system keys entity identifiers etc. . The queries may be applied directly against the repository when entities are fully persisted therein. However when a queried entity is persisted in a registration mode e.g. storage of entity identifiers the services module retrieves data for the queried entity from the virtual master data management system. In this case the virtual master data management system utilizes the set of entity identifiers for the entity stored in the repository in order to retrieve data from data sources and generate the selected view for the queried entity.

A manner of loading data from data sources into the plural architecture master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules and entity management module is illustrated in . Initially configuration and other data are prepared at step . The preparation typically includes defining a data model for the virtual master data management system or virtual data model and mapping data fields or entity attributes of the virtual data model to corresponding data fields or party attributes of a data model of the physical master data management system or physical data model . The physical data model employs various business objects representing parties and party attributes while the virtual model is based on entities with entity attributes that may be mapped to the business objects. The virtual and physical data models are typically maintained in database tables of database system where the mapping provides associations between corresponding fields of database tables for entities and parties of the virtual and physical data models. The mapping may be initiated using a pre defined physical data model where the pre defined model may be expanded to accommodate varying data requirements.

The mapping between the virtual and physical models further indicates the attributes of parties of the physical data model defined as business keys. Business keys are used to determine uniqueness constraints of an attribute e.g. name address etc. within the selected view and are utilized to determine when an attribute is to be updated or created in the physical master data management system as described below. A business key for an attribute includes one or more fields that identify an attribute and provide uniqueness constraints for the selected view. For example a business key for a person name attribute may be the name usage type thereby providing one name per name type in the selected view. Alternatively the business key may be name type first name last name thereby providing more than one name per name type in the selected view if the first and last names are different.

In addition the mapping may include transcoding functions to enable values of certain data within the virtual data model to be converted to compatible values within the physical data model for persistence of that data within the physical master data management system. For example a gender attribute within the virtual data model may include values of 0 e.g. indicating female and 1 e.g. indicating male while a corresponding attribute of the physical data model may include values of F e.g. indicating female and M e.g. indicating male . The transcoding function converts the values of 0 and 1 within the virtual data model to the corresponding compatible values within the physical data model of F and M for persistence of that attribute within the physical master data management system.

As a further example of a transcoding function a person name attribute in the virtual data model may be mapped to a person name business object in the physical data model. The person name attribute of the virtual data model includes an attribute code field which is mapped to a name usage type attribute within the person name business object in the physical data model. A transcoding function in this example case may read the attribute code value and look up an equivalent value for the name usage type from a look up variable or table. For example if the value of the attribute code indicates a legal name e.g. PERLEGALNAME a corresponding transcoded value for the name usage type could be a 1 representing a legal name in the physical data model .

Since master data is generally stored in different data sources the master data may be duplicated and inconsistent. Accordingly data cleansing and standardization e.g. provide a common format for data fields e.g. date time etc. processes may further be specified while a matching algorithm for associating member records of an entity may be defined and or selected. The matching algorithm assists with de duplication of data from the data sources. The virtual and physical data models mapping cleansing standardization and matching may be pre configured into the plural architecture master data management system or entered by a user via a user interface.

Source records from data sources are loaded into the virtual master data management system e.g. via virtual master data management system modules and processed in accordance with the specified data cleansing and standardization at step . The source records are cross matched at step e.g. via matching and linking engine based on the specified matching algorithm to determine records associated with the same entity. Information linking member records to their associated entity is stored without storing the actual record data . Various conventional and other matching or partial matching techniques may be employed e.g. a quantity of the same or similar fields matching scores probabilistic matching etc. .

The resulting entities are registered with the physical master data management system e.g. via entity management module at step by persisting limited link information for the entities e.g. information to map the entity between the physical and virtual master data management systems . The registration may be configured to ascertain link and other information from various sources. For example link and other information may be obtained from a bulk cross matching process or from the matching and linking entity management service performed by the virtual master data management system.

Once the entities are registered the entities may be persisted to the physical master data management system e.g. via services module e.g. persistEntity service at step e.g. as described below for . Since master data is generally stored in different data sources the master data may be duplicated and inconsistent. Accordingly several views of an entity e.g. with varying data from data sources may be generated by the virtual master data management system. A user may select a desired view via a user interface to provide a composite view to be persisted or a generated view may be selected by the virtual master data management system via various criteria to provide the composite view for persistence.

Alternatively entity persistence can be performed in batch. In the batch case batch files are prepared and may be submitted for processing either automatically as part of the registration or manually. The batch files include an entity identification and entity type and may persist entities of a common or different entity types. In addition rules may be applied to conditionally persist certain entities based on a set of criteria e.g. completeness data quality of created entity view entity size e.g. number of members or records in the entity etc. .

Entities may be persisted in a registration mode or a full persistence mode. The information persisted for an entity in a registration mode includes the entity identification entity type data source identifiers and member record identifiers. The data for the entity remains within data sources and is retrieved by the virtual master data management system to generate the selected view. Full persistence mode maintains the persisted entity e.g. entity attributes and member records in the repository of the physical master data management system. Basically the entity is converted to a corresponding business object or party of the physical data model based on the mappings for persistence in the physical master data management system.

Once the desired entities are persisted in the physical master data management system the plural architecture master data management system maintains data integrity of persisted entities with data in the virtual master data management system. This is accomplished by synchronizing modifications to data in the virtual master data management system with the persisted view of the entity in the physical master data management system. A manner of synchronizing data of the virtual master data management system with corresponding persisted entity views e.g. via master data management server system and virtual master data management system modules physical master data management system modules and entity management module is illustrated in . Initially the virtual master data management system receives data modifications e.g. updates additions deletions link alterations of records etc. at step . The modifications may include modifications e.g. addition deletion updates etc. to data within data sources and or modifications to links of records forming an entity e.g. a record of an entity may be modified to link the record with another entity . Matching and linking engine matches and links records of the data sources at step in order to determine if the selected view of the entity has changed e.g. new or different member records data within the member records has changed etc. . If the selected view has changed as determined at step entity event notification module triggers an entity change event at step .

The entity change event invokes services module e.g. persistEntity service to add update or delete the persisted entity or party in accordance with the modification e.g. modification to data or links of member records at step . The business keys of an entity attribute may be utilized to determine the presence of new information for a corresponding attribute of the persisted entity or party or the presence of updated information for the corresponding attribute of the persisted entity or party . The modified view e.g. with the added updated or deleted information is persisted in the physical master data management system at step e.g. as described below for .

Alternatively rules may be applied to conditionally persist certain entities in response to an entity change event and based on a set of criteria e.g. completeness data quality of created entity view entity size e.g. number of members or records in the entity etc. .

A manner of persisting an entity to the physical master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules and entity management module is illustrated in . Initially the selected or composite view for the entity is requested from the virtual master data management system at step . The selected view may represent a new entity for persistence or an existing persisted entity with modified data. The virtual master data management system typically generates the selected view for the entity on demand from data within data sources . This ensures the most recent data for persistence. The selected or composite view includes the business keys of the entity attributes and is generated in accordance with the constraints of those business keys e.g. indicating a quantity of unique data instances for an attribute etc. . An internal service is utilized to determine the attributes of the entity in the virtual data model that correspond to business keys in the physical data model.

When no view is returned for the entity e.g. a deleted or obsolete entity has been requested as determined at step the entity is deleted e.g. via services module at step . However when the selected or composite view is returned for the entity the mapping to the physical master data management system for the entity is applied e.g. via entity management module to convert the entity to the corresponding business object or party within the physical data model at step . In addition transcoding functions within the mappings are applied to convert values within the virtual data model to compatible values within the physical data model.

The entity identification and corresponding member record identifiers are added updated and or deleted e.g. registration persistence mode within the physical master data management system e.g. via services module e.g. persistEntity service in accordance with the action performed on the entity e.g. add modify or delete an entity or corresponding attributes at step . The action may be determined based on a comparison of the business keys of attributes for the entity and party within the virtual and physical master data management systems. For example a new business key not within the physical master data management system may indicate addition of an attribute and or entity while an existing business key value may indicate an attribute and or entity update. Removal of the business keys may indicate deletion of the attribute and or entity. The party identification may further be utilized to distinguish between actions for attributes and entities as a whole. The information for the entity within the virtual data model is updated within the converted business object or party and corresponding party records of the database tables of the physical data model indicated by the mappings.

When the entity is being fully persisted the corresponding data of the entity is added updated or deleted in the repository of the physical master data management system in accordance with the action performed on the entity e.g. via services module e.g. persistEntity service at step . The action may be determined based on a comparison of the business keys of attributes for the entity and party within the virtual and physical master data management systems as described above. The information for the entity in the virtual data model is updated within the corresponding converted business object or party and party records of the database tables of the physical data model indicated by the mappings.

A manner of processing queries for entities within the plural architecture master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules request processing framework and entity management module is illustrated in . Initially a query for an entity is received by request processing framework at step . The query is passed to services of services module e.g. getParty getPerson getOrganization getPartyByAdminSysKey getPartyByEntityId etc. to process the query. These services retrieve entities e.g. person organization etc. and or parties within the virtual and or physical master data management systems based on various criteria e.g. entity or party identification system keys etc. . The entity is initially retrieved from the repository within the physical master data management system and the status indicator is examined to determine the type of persistence. If the entity is fully persisted as determined at step the entity data is retrieved from the repository of the physical master data management system at step and the results are returned at step .

When the entity is persisted in the registration mode e.g. the entity identification and member record identifiers are persisted as determined at step the entity data is retrieved from the virtual master data management system at step and the results are returned at step . In this case the virtual master data management system utilizes the entity identification and member record identifiers to generate the selected entity view from data retrieved from data sources .

When the entity is registered and not persisted in the physical master data management system as determined at step the entity data is retrieved from the virtual master data management system at step and the results are returned at step . In this case the virtual master data management system utilizes the mapping between the virtual and physical master data management systems e.g. mapping of entity and party identifications to identify the corresponding entity within the virtual master data management system and generate the entity view from data retrieved from data sources .

Present invention embodiments may further enrich master data records of an entity e.g. data records within the selected view for the entity by adding supplemental attributes e.g. attributes that are not available in any data sources and therefore not present in the selected view . However no data in the master data records for the entity that originated from data sources and present in the selected view should be altered. This ensures that the data integrity of the master data records e.g. of the selected view is preserved for the plural architecture master data management system. In addition the enriched master data records including the supplemental attributes may be retrieved. For example no modifications to a party address in master data records for a persisted entity may be performed since the party address is available in data sources and returned in a selected view. However the master data records for the persisted entity may be enriched with privacy preference values that can be subsequently retrieved since these are supplemental attributes e.g. that are not available in the data sources and selected view .

Present invention embodiments leverage the mapping created between virtual and physical data models to identify virtually owned attributes e.g. attributes managed by the virtual master data management system of a master data record for an entity. This mapping information is utilized to control performance of a requested service and a corresponding proposed alteration to the master data record in order to preserve the value of virtually owned attributes as represented in the selected view. Inquiry service logic is employed to retrieve the enriched master data records containing both virtually owned attributes and supplemental or physically owned attributes e.g. attributes managed by the physical master data management system by a single application programming interface API .

Present invention embodiments employing supplemental attributes provide several advantages. For example clear delineation is provided between virtually owned attributes and supplemental attributes in a master data record for an entity while a single set of master data management application programming interfaces APIs enable retrieval of enriched master data records containing both virtually owned and supplemental or physically owned attributes. Further existing mapping information for the virtual and physical data models may be re used to derive dynamic behavior for physical master data management persistent transactions without requiring any ongoing maintenance or custom coding. Moreover no additional administration or operational data are required for the physical master data management system to identify the master data records for the selected view. Thus present invention embodiments enable enrichment and retrieval of master data records with minimal maintenance administration and performance impact.

Present invention embodiments may further accommodate scenarios with supplemental attributes where data records of data sources for an entity are maintained in the virtual master data management system while a master data record for that entity is persisted in the physical master data management system. A user may further enrich the master data record for the entity with supplemental attributes e.g. privacy preference data etc. and retrieve the enriched master data record for the entity containing virtually owned and supplemental or physically owned attributes. The mapping between the virtual and physical data models includes information used to identify the attributes that cannot be altered by users in the physical master data management system since their modification would affect the integrity of corresponding attributes in the virtual master data management system .

For example some master data attributes are managed in a virtual master data management system but a persisted enterprise view of the data is desired in a physical master data management system with additional centrally managed attributes and the services to maintain those attributes. Referring to present invention embodiments enable the entity to be persisted from the virtual to the physical master data management system and to be augmented with supplemental attributes. By way of example an entity is managed by virtual master data management system provided by master data management server system . The entity includes several data records from various data sources that are linked and is associated with an entity identification to uniquely identify the entity within the virtual master data management system.

The entity may be persisted to physical master data management system provided by master data management server system . In this case a party identification is generated for uniquely identifying the entity or party within the physical master data management system and mapped to entity identification . The entity may be persisted in a registration mode where link information for the entity may be persisted in the physical master data management system. The link information is utilized to retrieve the entity records from the virtual master data management system. Alternatively the entity may be persisted in a fully persisted mode where the records for the entity are centrally stored in a repository of the physical master data management system e.g. database system . In this case the records for the persisted entity or party may be retrieved from the centrally stored data.

Once the entity is persisted e.g. in either registration or full persistence mode supplemental attributes may be added via services module e.g. application programming interfaces APIs of the physical master data management system to augment the persisted entity and are stored within the repository of the physical master data management system. The supplemental attributes are any attributes to be maintained in addition to information stored for the persisted entity e.g. party privacy preference data party alerts information e.g. names addresses contacts party identifications bank accounts charge cards etc. with custom usage types not yet mapped between the virtual and physical data models etc. attributes within the business objects that are not mapped between the virtual and physical data models etc. . These attributes are stored and managed by the physical master data management system. Any attributes contained in the mapping between the virtual and physical data models described above e.g. cannot be utilized as a supplemental attribute since modification of these types of attributes would affect the integrity of corresponding attributes in the virtual master data management system .

The supplemental attributes may be retrieved through inquiry application programming interfaces APIs or services e.g. getParty etc. of services module based on a provided inquiry level or through respective fine grained transactions for those attributes. The supplemental attributes are typically not moved when an entity moves to another entity. In addition various services are provided e.g. by entity management module that access the virtual and or physical master data management systems to provide virtually owned and or supplemental attributes in response to queries. Once the entity is persisted in the physical master data management system client applications may be developed without having to face significant rework by leveraging centrally managed persisted attributes.

Present invention embodiments utilize the mapping created between virtual and physical data models to control performance of a requested service and a corresponding proposed alteration in order to preserve the value of virtually owned attributes as represented in the selected view. In other words if an attribute is virtually owned the attribute should not be modified by a physical master data management service.

By way of example only the plural architecture data management system may include within the physical master data management system 

1 a person business object mapped to a corresponding attribute in the virtual master data management system without any transcoding 

2 a person name business object mapped to a corresponding attribute in the virtual master data management system with example transcoded values of 1 2 3 4 5 6 7 and 8 for a name usage type mapping and

3 a party privacy preference object e.g. a supplemental attribute that is not mapped to an attribute of the virtual master data management system.

In this example case the master data records for an entity may be enriched by the following since these actions would not affect a virtually owned attribute 

1 adding deleting or updating a party privacy preference object e.g. a supplemental attribute e.g. since this object is not mapped to a corresponding attribute in the virtual master data management system and therefore would not affect a virtually owned attribute 

2 adding or deleting a person name business object with a name usage type of 10 e.g. since a transcoding value of 10 is not mapped to a value of a corresponding attribute in the virtual master data management system and therefore would not affect a virtually owned attribute 

3 updating a mapped attribute of a person name business object with a name usage type of 10 e.g. since a transcoding value of 10 is not mapped to a value of a corresponding attribute in the virtual master data management system and therefore would not affect a virtually owned attribute 

4 updating a non mapped attribute of a person name business object regardless of the value of the name usage type e.g. since a non mapped attribute is not mapped to a corresponding attribute in the virtual master data management system and therefore would not affect a virtually owned attribute and

5 updating a non mapped attribute of a person business object e.g. since this attribute is not mapped to a corresponding attribute in the virtual master data management system and therefore would not affect a virtually owned attribute .

In contrast the following actions would not be allowed in this example case since the action would affect a virtually owned attribute 

1 adding or deleting a person business object e.g. since this object is mapped to a corresponding attribute in the virtual master data management system and therefore would affect a virtually owned attribute 

2 adding or deleting a person name business object with a name usage type of 1 e.g. since a transcoding value of 1 is mapped to a value of a corresponding attribute in the virtual master data management system and therefore would affect a virtually owned attribute 

3 updating a mapped attribute of a person name business object with a name usage type of 1 e.g. since a transcoding value of 1 is mapped to a value of a corresponding attribute in the virtual master data management system and therefore would affect a virtually owned attribute and

4 updating a mapped attribute of a person business object e.g. since this object is mapped to a corresponding attribute in the virtual master data management system and therefore would affect a virtually owned attribute .

A manner of controlling performance of a requested service e.g. via master data management server system and virtual master data management system modules physical master data management system modules request processing framework and or entity management module for an object or persisted entity within the physical master data management system is illustrated in . Initially the mapping for entities between the virtual and physical data models is utilized to transfer the entities attributes and associated conditions e.g. transcoding to the physical master data management system. A persist operation service or transaction with a requested alteration e.g. add update delete etc. for an object or persisted entity within the physical master data management system is received e.g. via request processing framework at step and initially processed e.g. by services module of entity management module . The received transaction is intercepted e.g. via attribute control module at step and mapping information for the virtual and physical data models is retrieved at step .

The mapping information is utilized e.g. by attribute control module to validate whether the transaction e.g. for the object in the physical master data management system and a corresponding requested alteration e.g. add update delete etc. is allowed based on which e.g. virtual or physical master data management system owns or manages object attributes. If an object attribute is virtually owned the object attribute should not be modified by the transaction e.g. a physical master data management service in order to preserve the selected view. The object to be processed by the transaction and the requested alteration are examined against the mapping information and included conditions e.g. transcoded values etc. in order to determine whether the requested alteration is allowed as described below.

When the transaction is permitted as determined at step the transaction is allowed to continue at step . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the transaction . If the transaction is not permitted e.g. the transaction is attempting to modify an object with a virtually owned attribute the entire unit of work is rejected and rolled back at step . In this case the flag may be set to indicate a roll back transaction e.g. to services module to perform the roll back .

A manner of controlling performance of an addition or deletion operation for an object or persisted entity within the physical master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules request processing framework and or entity management module is illustrated in . Initially an addition or deletion operation service or transaction for an object e.g. business object etc. within the physical master data management system is received and intercepted where mapping information for the virtual and physical data models is retrieved as described above. The mapping information is examined to determine if the object has been mapped between the virtual and physical data models e.g. via attribute control module . When the object is not mapped as determined at step e.g. resides only in the physical master data management system the transaction is allowed at step since any modification e.g. addition or deletion of an object would not affect virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the operation .

If the object has been mapped as determined at step the mapping information is examined e.g. via attribute control module to determine the presence of transcoded values defined within the mapping for the object. When transcoded values are not defined within the mapping for the object as determined at step the transaction is not permitted and rolled back at step since any modification e.g. addition or deletion of an object would affect the mapped virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . In this case the flag may be set to indicate a roll back transaction e.g. to services module to perform the roll back .

If transcoded values are defined within the mapping for the object as determined at step the object is examined e.g. via attribute control module to determine the presence within the object of any of the specific transcoded values defined in the mapping. When one or more transcoded values from the mapping are present within the object the operation is not permitted and rolled back at step since any modification e.g. addition or deletion of an object would affect the mapped virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . In this case the flag may be set to indicate a roll back transaction e.g. to services module to perform the roll back .

However if none of the specific transcoded values defined in the mapping are present within the object as determined at step the transaction is permitted since any modification e.g. addition or deletion of an object would not affect the mapped virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the operation .

For example a business object of the physical master data management system may be mapped to a corresponding attribute in the virtual master data management system with example transcoded values of 1 2 3 4 5 6 7 and 8 for a mapped attribute. If the requested alteration is for a business object with a transcoded value of 10 for the mapped attribute this alteration is permitted since the requested business object e.g. with a transcoded value of 10 does not include any of the specific transcoded values from the mapping e.g. transcoded values from 1 8 . However any requested alteration for a business object with a transcoded value in the range of 1 8 defined in the mapping for the mapped attribute is blocked or prevented.

A manner of controlling performance of an update operation for an object or persisted entity within the physical master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules request processing framework and or entity management module is illustrated in . Initially an update operation service or transaction for an object e.g. business object etc. within the physical master data management system is received and intercepted where mapping information for the virtual and physical data models is retrieved as described above. The mapping information is examined to determine if the object has been mapped between the virtual and physical data models e.g. via attribute control module . When the object is not mapped as determined at step e.g. resides only in the physical master data management system the transaction is allowed at step since any modification e.g. update of the object would not affect virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the update operation .

If the object has been mapped as determined at step the mapping information is examined e.g. via attribute control module to determine the presence of transcoded values defined within the mapping for the object. If transcoded values are defined within the mapping for the object as determined at step the object is examined e.g. via attribute control module to determine the presence within the object of any of the specific transcoded values defined in the mapping. When none of the specific transcoded values from the mapping are present within the object as determined at step the transaction is allowed at step since any modification e.g. update of the object would not affect the mapped virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the transaction .

When the mapping does not define any transcoded values for the object or one or more of the specific transcoded values from the mapping are present within the object as determined at steps or the object attributes are examined e.g. via attribute control module to determine the presence of mapped attributes to be updated by the update operation. If mapped attributes are to be updated as determined at step the operation is not permitted and rolled back at step since any modification e.g. update of the object would affect the mapped virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . In this case the flag may be set to indicate a roll back transaction e.g. to services module to perform the roll back . However when no mapped attributes are to be updated the transaction is allowed at step since any modification e.g. update of the object would not affect virtually owned attributes e.g. in the selected view generated by virtual master data management system from data sources . This may be accomplished by setting a flag indicating this condition e.g. to services module performing the transaction .

A manner of processing queries for entities including any supplemental attributes within the plural architecture master data management system e.g. via master data management server system and virtual master data management system modules physical master data management system modules request processing framework and or entity management module is illustrated in . Initially a query for an entity is received by request processing framework . The query is passed to services of services module e.g. getParty getPerson getOrganization getPartyByAdminSysKey getPartyByEntityId etc. to process the query. These services retrieve entities e.g. person organization etc. and or parties and corresponding virtually and physically owned attributes within the virtual and or physical master data management systems based on various criteria e.g. entity or party identification system keys etc. . The entity is initially retrieved from the repository within the physical master data management system including any supplemental attributes at step . For example if the entity is fully persisted the entity data including any supplemental attributes is retrieved from the repository of the physical master data management system.

The mapping information and or entity information retrieved from the physical master data management system is examined to determine the presence of information e.g. virtually owned or mapped attributes etc. for the desired entity within the virtual master data management system. This may be accomplished by examining the status indicator e.g. indicating registration or fully persisted modes for the entity as described above. When no information for the entity is present within the virtual master data management system as determined at step the information retrieved from the physical master data management system including any supplemental attributes is returned at step .

However when information for the entity is present within the virtual master data management system as determined at step the virtual master data management system generates the selected entity view from data retrieved from data sources at step . For example if the entity is persisted in the registration mode e.g. the entity identification and member record identifiers are persisted the entity data is retrieved from the virtual master data management system while any supplemental attributes are or have been retrieved from the physical master data management system . In this case the virtual master data management system utilizes the entity identification and member record identifiers to generate the selected entity view from data retrieved from data sources .

Once the information is retrieved from the virtual master data management system the information from the virtual and physical master data management systems including virtually owned and physically owned or supplemental attributes are combined and or consolidated at step and returned at step .

It will be appreciated that the embodiments described above and illustrated in the drawings represent only a few of the many ways of implementing embodiments for plural architecture master data management with supplemental attributes.

The environment of the present invention embodiments may include any number of computer or other processing systems e.g. client or end user systems server systems etc. data sources and databases or other repositories arranged in any desired fashion where the present invention embodiments may be applied to any desired type of computing environment e.g. cloud computing client server network computing mainframe stand alone systems etc. . The computer or other processing systems employed by the present invention embodiments may be implemented by any number of any personal or other type of computer or processing system e.g. desktop laptop PDA mobile devices etc. and may include any commercially available operating system and any combination of commercially available and custom software e.g. browser software communications software server software virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module etc. . These systems may include any types of monitors and input devices e.g. keyboard mouse voice recognition etc. to enter and or view information.

It is to be understood that the software e.g. virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module etc. of the present invention embodiments may be implemented in any desired computer language and could be developed by one of ordinary skill in the computer arts based on the functional descriptions contained in the specification and flow charts illustrated in the drawings. Further any references herein of software performing various functions generally refer to computer systems or processors performing those functions under software control. The computer systems of the present invention embodiments may alternatively be implemented by any type of hardware and or other processing circuitry.

The various functions of the computer or other processing systems may be distributed in any manner among any number of software and or hardware modules or units processing or computer systems and or circuitry where the computer or processing systems may be disposed locally or remotely of each other and communicate via any suitable communications medium e.g. LAN WAN Intranet Internet hardwire modem connection wireless etc. . For example the functions of the present invention embodiments may be distributed in any manner among the various end user client and server systems and or any other intermediary processing devices. The software and or algorithms described above and illustrated in the flow charts may be modified in any manner that accomplishes the functions described herein. In addition the functions in the flow charts or description may be performed in any order that accomplishes a desired operation.

The software of the present invention embodiments e.g. virtual master data management system modules matching and linking engine physical master data management system modules request processing framework entity management module entity event notification module services module attribute control module etc. may be available on a non transitory computer useable medium e.g. magnetic or optical mediums magneto optic mediums floppy diskettes CD ROM DVD memory devices etc. of a stationary or portable program product apparatus or device for use with stand alone systems or systems connected by a network or other communications medium.

The communication network may be implemented by any number of any type of communications network e.g. LAN WAN Internet Intranet. VPN etc. . The computer or other processing systems of the present invention embodiments may include any conventional or other communications devices to communicate over the network via any conventional or other protocols. The computer or other processing systems may utilize any type of connection e.g. wired wireless etc. for access to the network. Local communication media may be implemented by any suitable communication media e.g. local area network LAN hardwire wireless link Intranet etc. .

The system may employ any number of any conventional or other data sources databases data stores or storage structures e.g. files databases data structures data or other repositories etc. to store information e.g. master or other data mappings persisted entities supplemental or other attributes virtual and physical data models linking information views etc. . The data sources and database system may be implemented by any number of any conventional or other databases data stores or storage structures e.g. files databases data structures data or other repositories etc. to store information e.g. master or other data mappings persisted entities supplemental or other attributes virtual and physical data models linking information views etc. . The database system may be included within or coupled to the server and or client systems. The data sources database systems and or storage structures may be remote from or local to the computer or other processing systems and may store any desired data.

The plural architecture master data management system may include any quantity of any conventional or other types of data management systems employing any suitable management approaches e.g. registry or virtual centralized or physical etc. . Any quantity of entities may be maintained in the data management systems either solely in an individual system or jointly in any combinations of the systems. Further the data management systems may be queried for information individually to retrieve information from that individual system or to retrieve information in a collective fashion e.g. retrieve information from a plurality of the data management systems from a single query etc. .

The virtual master data management system may produce any quantity of any types of views of an entity based on any desired criteria e.g. uniqueness constraints data types etc. for selection e.g. manually by a user automatically based on any desired criteria etc. . Further any quantity of the views may be persisted to the physical master data management system.

The virtual and physical data models may include any quantity of any suitable structures to accommodate the data of an application. The virtual and physical data models may be mapped in any desired fashion where any desired information may be utilized to indicate the mappings e.g. pointers foreign or other database table keys etc. . Further the virtual and physical data models may be implemented by any quantity of any desired data or storage structures e.g. database tables or objects lists or arrays queues etc. .

The repository of the physical master data management system may be implemented by any number of any conventional or other databases data stores or storage structures e.g. files databases data structures data or other repositories etc. to store information e.g. persisted entities or parties supplemental or other attributes etc. . The information for the parties and or supplemental attributes may be stored within any quantity of any desired data or storage structures e.g. database tables or objects lists or arrays queues etc. . The entity and party identifications may include any quantity of any types of characters numbers and or symbols to uniquely identify a party or identity. The party identification may be generated in any fashion e.g. based on an entity identification an independent formula or algorithm sequential or other numbering etc. . Further the member record identifiers may include any quantity of any types of characters numbers and or symbols to uniquely identify a record within the data sources. The status indicator may include any desired values and indicate any quantity of any types of states e.g. registration mode full persistence mode etc. . The values may be assigned to the states in any fashion.

The synchronization may persist any desired modifications between the virtual master data management system and the physical master data management system e.g. modification to data in the data sources modification to links of records for an entity modification to data in the physical master data management system etc. . The modifications may be detected in any fashion e.g. comparisons of data the selected view member record links business keys etc. where an entity may include any quantity of business or other keys each including any quantity of any fields of an attribute. The notification may be of any type or format and include any type of indication e.g. alert alarm data etc. to indicate the occurrence of the event. The persistence of data may be initiated manually e.g. by a user etc. or automatically and may occur in response to the event or other condition where any desired rules or criteria may be utilized to control the automatic persistence e.g. size of entity completeness of data etc. .

The names of the services to persist and retrieve information as used herein are by example only where the services may include any desired labels or names and may retrieve information based on any desired criteria e.g. keys identifiers entity names or other attributes etc. . The registration persistence mode may persist any desired information pertaining to the entity e.g. record or other identifiers identifications etc. where the information may include any portion of the entity data. Further the full persistence mode may persist any desired information pertaining to the entity e.g. record or other identifiers identifications etc. where the information may include the entirety or any portion of the entity data.

The supplemental attributes may be of any quantity or type and may be associated with any objects or entities in the physical e.g. persisted e.g. registration or full etc. and or virtual master data management systems. The supplemental attributes may be maintained and or managed entirely or partially within the virtual master data management system the physical master data management system or any combination thereof.

Any operations on objects or persisted entities or portions thereof e.g. add create delete update combine entities objects etc. may be controlled in any desired fashion based on any desired criteria e.g. effect e.g. data integrity consistency etc. on corresponding mapped attributes values transcoding or other functions etc. . The criteria may be determined from mapping or other information. The operation may be controlled in any manner e.g. prevented or blocked allowed to continue initiate other actions deferred or delayed etc. . Further any desired actions may be performed in response to an operation on an object or persisted entity that is permitted or blocked e.g. roll back work etc. . The operation may be intercepted in any desired fashion based on any types of notifications e.g. polling status flag triggering mechanism etc. . The flag indicating the operation status may include any desired values and indicate any quantity of any types of states e.g. continue operation prevent operation roll back etc. . The flag values may be assigned in any fashion.

The attributes may be retrieved from the virtual and or physical master data management systems and combined and or consolidated in any fashion e.g. remove duplicates combine all or any portion of retrieved data etc. .

The present invention embodiments may employ any number of any type of user interface e.g. Graphical User Interface GUI command line prompt etc. for obtaining or providing information e.g. queries query results configuration information selections etc. where the interface may include any information arranged in any fashion. The interface may

include any number of any types of input or actuation mechanisms e.g. buttons icons fields boxes links etc. disposed at any locations to enter display information and initiate desired actions via any suitable input devices e.g. mouse keyboard etc. . The interface screens may include any suitable actuators e.g. links tabs etc. to navigate between the screens in any fashion.

The present invention embodiments are not limited to the specific tasks or algorithms described above but may employ any quantity of any types of data management systems to be utilized for management of any types of data corresponding to any objects e.g. entities animate or inanimate objects etc. . The entities may represent any desired corporate business legal personal or other entities e.g. person corporation company organization business animate or inanimate object etc. . Further any quantity of any types of attributes may be utilized to supplement or enrich the data where any operations on persisted objects may be controlled to preserve the integrity of a view.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes including has have having with and the like when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible systems of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative systems the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

