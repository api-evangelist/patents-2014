---

title: Camera control interface extension bus
abstract: System, methods and apparatus are described that offer improved performance of a serial bus used for Inter-Integrated Circuit (I2C) and/or camera control interface (CCI) operations. CCI extension (CCIe) devices are described. CCIe devices may be configured as a bus master or as a slave. In one method, a CCIe transmitter may generate a transition number from a set of bits, convert the transition number into a sequence of symbols, and transmit the sequence of symbols in the signaling state of a two-wire serial bus. Timing information may be encoded in the transitions between symbols of consecutive pairs of symbols in the sequence of symbols. For example, each transition may cause a change in the signaling state of at least one wire of the two-wire serial bus. A CCIe receiver may derive a receive clock from the transitions in order to receive and decode the sequence of symbols.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639499&OS=09639499&RS=09639499
owner: QUALCOMM Incorporated
number: 09639499
owner_city: San Diego
owner_country: US
publication_date: 20140611
---
The present application for patent claims priority to Provisional Application No. 61 834 151 entitled Increasing Data Transfer Rate Over I2C Bus filed Jun. 12 2013 to Provisional Application No. 61 836 777 entitled Camera Control Interface Extension Bus filed Jun. 19 2013 and to Provisional Application No. 61 886 002 entitled Simplifying Symbol Transcoding And Transmission Over CCIe Bus filed Oct. 2 2013 which applications are all assigned to the assignee hereof and hereby expressly incorporated by reference herein.

The present disclosure relates generally to an interface between a host processor and a peripheral device such as a camera and more particularly to multimode operations in which a clock signal is embedded in symbols transferred on a multi wire shared bus.

The Inter Integrated Circuit serial bus which may also be referred to as the I2C bus or the IC bus is a serial single ended computer bus that was intended for use in connecting low speed peripherals to a processor. The I2C bus is a multi master bus in which each device can serve as a master and a slave for different messages transmitted on the I2C bus. The I2C bus can transmit data using only two bidirectional open drain connectors including a Serial Data Line SDA and a Serial Clock Line SCL . The connectors typically include signal wires that are terminated by pull up resistors.

Protocols governing I2C bus operations define basic types of messages each of which begins with a START and ends with a STOP. The I2C bus uses 7 bit addressing and defines two types of nodes master and slave. A master node is a node that generates the clock and initiates communication with slave nodes. A slave node is a node that receives the clock and responds when addressed by the master. The I2C bus is a multi master bus which means any number of master nodes can be present. Additionally master and slave roles may be changed between messages i.e. after a STOP is sent .

Original implementations of the I2C bus supported data signaling rates of up to 100 kilobits per second 100 kbps in standard mode operation with more recent standards supporting speeds of 400 kbps in fast mode operation and 1 megabit per second Mbps in fast mode plus operation. In some systems and apparatus however even higher bandwidths are required to support communications between certain types of devices. For example mobile communications devices such as cellular phones may employ multiple devices such as cameras displays and various communications interfaces that consume significant bandwidth. Higher bandwidths may be difficult to obtain when conventional I2C protocols are used to maintain compatibility with legacy devices.

There exists an ongoing need for providing optimized communications on serial interfaces configured as a bus connecting master and slave components within a mobile device.

The following presents a simplified summary of one or more aspects of the present disclosure in order to provide a basic understanding of such aspects. This summary is not an extensive overview of all contemplated features of the disclosure and is intended neither to identify key or critical elements of all aspects of the disclosure nor to delineate the scope of any or all aspects of the disclosure. Its sole purpose is to present some concepts of one or more aspects of the disclosure in a simplified form as a prelude to the more detailed description that is presented later.

Embodiments disclosed herein provide systems methods and apparatus that can improve the performance of a communications interface using a serial bus that supports both conventional I2C bus operations and enhanced communications interfaces using a common I2C bus. A camera control interface CCI may be deployed using a two wire bi directional half duplex serial interface configured as a bus connecting a master and one or more slaves where the CCI operations are compatible with I2C bus operations. In one example disclosed herein CCI extension CCIe devices may be deployed using the I2C bus to provide a two wire bi directional half duplex serial interface. CCIe devices may be configured as a bus master or as a slave. CCIe devices can be compatible with or coexist with I2C devices on the I2C bus such that a CCIe device may communicate with one or more other CCIe devices using CCIe protocols and signaling specifications even when I2C devices are monitoring the I2C bus. One example disclosed herein provides an interface that can handle multiple slaves on the bus with a single master when both CCIe and I2C devices deployed on the same bus. In the latter example two or more CCIe devices may communicate using CCIe protocols and any communication transaction with an I2C device is conducted using I2C bus protocols.

In one aspect of the disclosure the disclosure provides a method of data communication operable on a transmitting device. The method includes generating a transition number from a set of bits converting the transition number into a sequence of symbols transmitting the sequence of symbols on a two wire serial bus when the two wire serial bus is operated in a first mode of operation. Timing information may be encoded in transitions between symbols in the sequence of symbols. Each transition may cause a change in a signaling state of the two wire serial bus. The sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation. The sequence of symbols may include 12 symbols.

In another aspect the transition number includes a multi digit ternary number. The ternary number may have twelve digits for example. The transition number may be converted into the sequence of symbols by providing the ternary number to a transcoder. In one example a most significant digit of the ternary number is provided to the transcoder first a least significant digit of the ternary number is provided to the transcoder last and intermediate digits between the most significant digit and the least significant digit are provided to the transcoder in order of decreasing significance. In another example a most significant digit of the ternary number is provided to the transcoder last. Four signaling states may be defined for the two wire serial bus. Each digit of the ternary number may select a next symbol to be transmitted on the two wire serial bus from one of three available symbols. Each of these three available symbols is different from a current symbol being transmitted on the two wire serial bus Timing information encoded in the sequence of symbols enables a receiver to generate a receive clock from the sequence of symbols.

In another aspect the two wire serial bus may be a multi purpose bus that supports communications using CCIe protocols when the two wire serial bus is operated in the first mode of operation. The two wire serial bus may support communications using I2C protocols in the second mode of operation. The sequence of symbols may be transmitted on the two wire serial bus by providing an I2C start condition between sequences of symbols transmitted on the two wire serial bus in the first mode of operation. The start condition may cause a reset of receive logic in a device configured for communications using the I2C protocols. The sequence of symbols may be transmitted on the two wire serial bus after a first I2C start condition is transmitted on the two wire serial bus. The sequence of symbols may be followed on the two wire serial bus by a second I2C start condition. An I2C receiver monitoring the two wire serial bus may perceive a maximum of 6 clock cycles on a SCL of the two wire serial bus after the first I2C start condition and before the second I2C start condition.

In one aspect of the disclosure an apparatus includes a bus interface adapted to couple the apparatus to a two wire serial bus operable to be shared with a plurality of other apparatus and devices and a processing circuit coupled to the bus interface. The processing circuit may be configured to generate a transition number from a set of bits convert the transition number into a sequence of symbols and transmit the sequence of symbols on a two wire serial bus when the two wire serial bus is operated in a first mode of operation. Timing information may be encoded in transitions between symbols in the sequence of symbols. Each transition causes a change in a signaling state of the two wire serial bus. The sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation.

In one aspect of the disclosure a method operable on a data communication receiving device includes deriving a receive clock from transitions in signaling state of a two wire serial bus when the two wire serial bus is operated in a first mode of operation using the receive clock to receive a sequence of symbols that is transmitted on the two wire serial bus in accordance with the first mode of operation generating a transition number from the sequence of symbols and decoding data from the transition number. The transitions in signaling state of the two wire serial bus may correspond to transitions between symbols in the sequence of symbols. The sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation. The sequence of symbols may include 12 symbols.

In another aspect the transition number may have multiple digits with each digit representing a transition between a pair of consecutive symbols in the sequence of symbols. The transition number may include a twelve digit ternary number. Four signaling states may be defined for the two wire serial bus. Each digit of the ternary number may represent a relationship between a pair of consecutive signaling states on the two wire serial bus. Each symbol in the sequence of symbols may be one of four symbols defined by the signaling state of the two wire serial bus. Each digit of the ternary number may define a relationship between a pair of consecutive symbols in the sequence of symbols.

In another aspect the two wire serial bus may be a multi purpose bus that supports CCIe communications when the two wire serial bus is operated in the first mode of operation. The two wire serial bus may support I2C communications in the second mode of operation. The sequence of symbols may be received from the two wire serial bus by determining occurrence of an I2C start condition on the two wire serial bus and receiving 12 symbols from the two wire serial bus according to timing defined by the receive clock.

In one aspect of the disclosure an apparatus includes a bus interface adapted to couple the apparatus to a two wire serial bus operable to be shared with a plurality of other devices a clock recovery circuit configured to derive a receive clock from transitions in signaling state of a two wire serial bus and a processing circuit coupled to the bus interface. The processing circuit may be configured to derive a receive clock from transitions in signaling state of the two wire serial bus when the two wire serial bus is operated in a first mode of operation use the receive clock to receive a sequence of symbols that is transmitted on the two wire serial bus in accordance with the first mode of operation generate a transition number from the sequence of symbols and decode data from the transition number. The transitions in signaling state of the two wire serial bus may correspond to transitions between symbols in the sequence of symbols. The transition number may have multiple digits with each digit representing a transition between a pair of consecutive symbols in the sequence of symbols. The sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation.

Various aspects are now described with reference to the drawings. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of one or more aspects. It may be evident however that such aspect s may be practiced without these specific details.

As used in this application the terms component module system and the like are intended to include a computer related entity such as but not limited to hardware firmware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a computing device and the computing device can be a component. One or more components can reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. In addition these components can execute from various computer readable media having various data structures stored thereon. The components may communicate by way of local and or remote processes such as in accordance with a signal having one or more data packets such as data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems by way of the signal.

Moreover the term or is intended to mean an inclusive or rather than an exclusive or. That is unless specified otherwise or clear from the context the phrase X employs A or B is intended to mean any of the natural inclusive permutations. That is the phrase X employs A or B is satisfied by any of the following instances X employs A X employs B or X employs both A and B. In addition the articles a and an as used in this application and the appended claims should generally be construed to mean one or more unless specified otherwise or clear from the context to be directed to a singular form.

Certain aspects of the invention may be applicable to communications links deployed between electronic devices that may include subcomponents of an apparatus such as a telephone a mobile computing device an appliance automobile electronics avionics systems etc. depicts an apparatus that may employ a communication link between IC devices. In one example the apparatus may include a wireless communication device that communicates through an RF transceiver with a radio access network RAN a core access network the Internet and or another network. The apparatus may include a communications transceiver operably coupled to processing circuit . The processing circuit may have one or more IC devices such as an application specific IC ASIC . The ASIC may include one or more processing devices logic circuits and so on. The processing circuit may include and or be coupled to processor readable storage such as a memory that may maintain instructions and data that may be executed by processing circuit . The processing circuit may be controlled by one or more of an operating system and an application programming interface API layer that supports and enables execution of software modules residing in storage media such as the memory device of the wireless device. The memory device may include read only memory ROM or random access memory RAM electrically erasable programmable ROM EEPROM flash cards or any memory device that can be used in processing systems and computing platforms. The processing circuit may include or access a local database that can maintain operational parameters and other information used to configure and operate apparatus . The local database may be implemented using one or more of a database module flash memory magnetic media EEPROM optical media tape soft or hard disk or the like. The processing circuit may also be operably coupled to external devices such as antenna display operator controls such as button and keypad among other components.

According to one aspect an improved mode of operation may be implemented over the multi mode control data bus to support camera operation. The improved mode of operation may enable data to be transferred at a rate greater than 1 MHz and the improved mode may be referred to as a CCI extension CCIe mode.

In one example a CCIe bus may be used to provide higher data rates for devices that are compatible with CCIe bus operations. Such devices may be referred to as CCIe devices and the CCIe devices can attain higher data rates when communicating with each other by encoding data as symbols transmitted using both the SCL line and the SDA line of a conventional CCI bus. CCIe may be used for camera applications. CCIe devices and I2C devices may coexist on the same CCIe bus such that in a first time interval data may be transmitted using CCIe encoding and other data may be transmitted in a different time interval according to I2C signaling conventions and protocols.

When the device is configured for CCIe mode the baseband processor includes a master node and the image sensor includes a slave node with both the master node and slave node operating in accordance with CCIe mode protocols over the control data bus without affecting the proper operation of any legacy I2C devices coupled to the control data bus . The control data bus may support CCIe mode operations without a bridge device between CCIe devices and legacy I2C slave devices.

In one example during a first exchange on the control data bus the legacy I2C devices may operate in a first mode having a first clock first bus speed and or first signal protocol while during a second exchange on the control data bus CCIe capable devices may operate in a second mode having a second clock second bus speed and or second protocol. The first clock first bus speed and or first signal protocol may be distinct from the second clock second bus speed and or second protocol. For example the second clock and or second bus speed may be faster or have greater speed than the first clock and or first bus speed respectively.

In another example all slave devices may be CCIe capable devices so that there is no need to switch between the first mode and second mode of operation. That is all signaling and or communications over may be performed according to the second mode using the second clock and or second bus speed and using the second protocol. There is no need or advantage to switch between the first mode and second mode when all slave devices are CCIe capable devices because the second mode may provide a greater bit rate than the first mode. In some instances a third mode of operation may be implemented which provides an even greater bit rate than the second mode but is not compatible with I2C devices when the first mode need not be accommodated.

The CCIe capable master device may also establish CCIe mode communications with CCIe capable slave devices . CCIe mode permits a single master operation and multiple masters are not supported. In CCIe mode the CCIe master device communicates only with CCIe capable slave devices on the control data bus . The CCIe capable devices and may communicate at significantly higher data rates in CCIe mode than in I2C modes. For example CCIe capable devices and may communicate at data rates of 6.4 Mbps or 16.7 Mbps.

A default start up mode may be configured or defined for the bus . In one example the bus may be configured to operate in a CCIe mode of operation after power on reset and or other type of start up condition. In another example the bus may be configured to initially operate in legacy I2C mode. A CCIe capable master device may cause the mode of operation of the bus to switch from I2C mode to CCIe mode through an I2C general call transmitted when for example access to CCIe capable slave device is desired. The CCIe capable master device may switch from CCIe mode to I2C mode by through a combination of a CCIe exit protocol and an I2C general call in order to access I2C slave devices on the bus .

In the example illustrated in an imaging device is configured to operate as a slave device on the CCIe bus . The imaging device may be adapted to provide a sensor control function that manages an image sensor for example. In addition the imaging device may include configuration registers and or other storage devices a processing circuit and or control logic a transceiver and line drivers receivers and . The processing circuit and or control logic may include a processor such as a state machine sequencer signal processor or general purpose processor. The transceiver may include a receiver a transmitter and certain common circuits including timing logic and storage circuits and or devices. In some instances the transceiver may include encoders and decoders clock and data recovery circuits and the like.

A transmit clock TXCLK signal may be provided to the transmitter where the TXCLK signal can be used to determine data transmission rates for a CCIe communication mode. The TXCLK signal may be embedded within sequences of symbols transmitted on the CCIe bus when both the SDA wire and the SCL wire are used to encode transmitted data. In one example the TXCLK signal may be embedded using transition clock transcoding whereby data to be transmitted over the physical link is transcoded such that a change of state of at least one wire and or occurs between each pair of consecutive symbols transmitted on the CCIe bus .

In a CCIe system the receiver may include or cooperate with a clock and data recovery CDR circuit . The receiver may include line interface circuits that provide a stream of raw 2 bit symbols to the CDR circuit . The CDR circuit extracts a receive clock from the raw symbols and provides a stream of 2 bit symbols and the receive clock to other circuits and of the receiver . In some examples the CDR circuit may produce multiple clocks . In one example the CDR circuit includes logic that detects transitions on the SCL signal wire and or on the SDA signal wire and toggles the state of the receive clock upon such detection. The CDR circuit may include time sensitive circuitry such as one shots delay circuits or other such elements in order to preclude multiple toggles of the state of the receive clock when transitions on the SCL signal wire and SDA signal wire at the same symbol boundary are delayed with respect to one another. A decoder may use the receive clock to decode the stream of symbols into sequences of 12 ternary digits each sequence representing a transition number. Each digit of the 12 digit transition number may be represented as a two bit ternary digit. A transcoder and or converter may then convert each sequence of 12 ternary digits into 19 bit or 20 bit output data elements .

According to certain aspects conversions between input binary data and a sequence of ternary digits representing a transition number and or between transition numbers and output data bits are performed by converters and . In one example conversion from data bits to transition numbers at a transmitter and then from transition numbers to data bits at a receiver involves 12 transition symbols for a 2 wire interface . The resultant r possible symbol transition states for each transition number T in the set or sequence T T . . . T T T provides a total of rdifferent states for the 12 transition numbers. For a 2 wire bus the number of transition states available from each signaling state r 2 1. Consequently the sequence of transitions T T . . . T T T can encode data that has 2 1 3 531441 different states. In this latter example each transition Tin the 12 digit ternary number T T . . . T T T is selected from 0 1 2.

For example for T11 T10 . . . T2 T1 T0 2 1 0 0 1 1 0 1 0 1 2 1 the ternary number representing the 12 transition sequences is 

In the example of a 2 wire system illustrated in 12 symbol transition numbers may be generalized to an n wire system and m symbol transition numbers. When there are r possible symbol transition states for each transition number T in the set or sequence T . . . T T the m transition sequence can encode rdifferent states where r 2 1. Consequently the sequence T . . . T T may encode data that has up to 2 1 different states.

In one example a ternary number representative of a symbol transition number in a 2 wire 12 symbol interface can be converted to a binary number output data bits as follows 

At the transmitter an algorithm for converting data bits to a ternary number that may be encoded as symbols for transmission on the SCL wire and SDA wire in a 2 wire 12 symbol interface. The algorithm may iteratively calculate decreasing order transition number T values with their corresponding remainder M . That is each digit can be calculated by dividing the remainder of a modulo operation used in a higher digit calculation with 3 to the power of the digit number discarding decimal points numbers as follows 

In this example conversion starts with T. illustrates the 12 digit ternary number being sent in order of T T T . . . T while relates to an example in which the 12 digit ternary number is sent in order of T T T . . . T. Certain differences are identifiable between the example logic and of and the circuit in . The circuit of includes 24 flip flops and is quite complex in comparison to the circuit of which includes a multiplexer 20 flip flops and logic devices. Accordingly the logic and circuitry involved is simplified in complexity and is less expensive when the most significant bit is sent first because of a reduction in logic gates.

As noted the logic of illustrates least significant symbol first LSS first logic and circuitry because the least significant symbol is transmitted to the receiving device first while the logic of illustrates an example where the most significant symbol is transmitted to the receiving device first MSS first . As used herein least significant symbol refers to the transcoded symbol corresponding to the least significant digit of the ternary number. For example when Tis transcoded into a sequential symbol that symbol is the least significant symbol because it originated from the least significant ternary digit. And when the symbol to transition number converter e.g. decoder of then converts the transcoded sequential symbol to a transition number i.e. one ternary digit number it will be the least significant digit. Similarly as used herein most significant symbol refers to the transcoded symbol corresponding to the most significant digit of the ternary number.

The selection between most significant symbol first and least significant symbol first modes of operation may be controlled by the direction in which a counter counts. For example most significant symbols may be handled first when the counter is configured or controlled to operate as a down counter that decrements from hexadecimal 0xB i.e. decimal 11 . Least significant symbols may be handled first if the counter is configured or controlled to operate as an up counter that increments from hexadecimal 0x0 i.e. decimal 0 . Alternatively or additionally the order of the inputs to the multiplexer may be configured such that the multiplexer responds to the output DELCNT of the counter to produce a desired order of output ternary transition numbers.

The counter may provide the DELCNT output using a register or latch synchronized to a clock that may be derived from a system clock and or an output of the CDR circuit . The register receives a four bit input from first multiplexer logic that selects between a next value or a start value based on a control signal START signal that initializes the counter . The start value may be set to 0xB when the converter operates in a most significant symbol first mode and may be set to 0x0 when the converter operates in a least significant symbol first mode. The first multiplexer logic receives the next value from second multiplexer logic that selects between a modified version of the DELCNT output and the DELCNT output based on the detection of an end condition by end detection logic . The modified input of the second multiplexer may be the result of a function which may be provided by subtraction logic for count down operation or from addition logic for count up operation. As depicted the second multiplexer logic repeats the DELCNT output after the DELCNT output is decremented from 0x0 to 0xF indicating the end of the current conversion. For a count down mode of operation end detection logic may be configured to detect a 0xF value on DELCNT and the end detection logic switches the second multiplexer logic output to cause DELCNT to remain at 0xF until the START signal causes a start value to be loaded. For a count up operation end detection logic may be configured to detect a 0xC decimal 12 or binary 1100 value on DELCNT .

According to certain aspects disclosed herein the three available transitions are assigned a transition number T for each Ps symbol . The value of T can be represented by a ternary number. In one example the value of transition number is determined by assigning a symbol ordering circle for the encoding scheme. The symbol ordering circle allocates locations on the circle for the four possible symbols and a direction of rotation between the locations . In the depicted example the direction of rotation is clockwise. The transition number may represent the separation between the valid current symbols and the immediately preceding symbol . Separation may be defined as the number of steps along the direction of rotation on the symbol ordering circle required to reach the current symbol Cs from the previous symbol . The number of steps can be expressed as a single digit base 3 number.

It will be appreciated that a three step difference between symbols can be represented as 0. The table in summarizes an encoding scheme employing this approach. In this example the transition number T may be assigned according to 

A similar approach may be used for an n wire system by constructing a mapping of sequential symbol to transition number table for any n e.g. n 4 5 6 . . . that guarantees that the raw symbols will change. For example in the case of an n wire system the transition number T may be assigned according to 

Conversely in the case of an n wire system the current sequential symbol Cs may be assigned according to 

At the transmitter the table may be used to lookup a current symbol to be transmitted given knowledge of the previously generated symbol and an input ternary number which is used as a transition number . At the receiver the table may be used as a lookup to determine a transition number that represents the transition between the previously received symbol and the currently received symbol . The transition number may be output as a ternary number.

Specifications for conventional I2C protocol implementations define a minimum duration for the high period t of each pulse on the SCL signal wire where the pulse corresponds to the time in which the SCL signal wire is in a High logic state. The I2C Specifications also define minimum durations for a setup time t and a hold time t during which the signaling state of the SDA signal wire must be stable before and after the pulse during which the SDA signal wire is in the high logic state. The setup time defines a maximum time period after a transition between signaling states on the SDA signal wire until the arrival of the rising edge of a pulse on the SCL signal wire . The hold time defines a minimum time period after the falling edge of the pulse on the SCL signal wire until a next transition between signaling states on the SDA signal wire . The I2C Specifications also define a minimum duration for a low period t for the SCL signal wire when the signaling state of the SDA signal wire may change. The data on the SDA signal wire is typically captured for the period of time t when the SCL signal wire is in the High logic state after the leading edge of the pulse .

The second timing diagram of illustrates signaling states on the SDA signal wire and the SCL signal wire between data transmissions on a conventional I2C bus. The I2C protocol defines a start condition or sequence in which the SDA signal wire transitions from high to low while the SCL signal wire is maintained in a high state. The I2C protocol defines a stop condition or sequence in which the SDA line transitions from low to high signaling states while the SCL line is high. As noted herein the signaling state of the SDA signal wire is expected to remain stable during the high period of a pulse transmitted on the SCL signal wire when data is being transmitted. Accordingly a transition of the SDA signal wire while the SCL signal wire is in a logic high state may be interpreted by slave devices as a Start Condition or a Stop condition .

The Start condition is defined to permit the current bus master to signal that data is to be transmitted. I2C compatible slave nodes must reset their bus logic on receipt of a Start condition . The Start condition occurs when the SDA signal wire transitions from high to low while the SCL signal wire is high. The I2C bus master initially transmits the Start condition followed by a 7 bit address of an I2C slave device with which it wishes to exchange data. The address is followed by a single bit that indicates whether a read or write operation is to occur. The addressed I2C slave device if available responds with an ACK bit. The master and slave I2C devices then exchange bytes of information in frames in which the bytes are serialized such that the most significant bit MSB is transmitted first and the least significant bit is transmitted last. The transmission of the byte is completed when a Stop condition is transmitted by the I2C master device. The Stop condition occurs when the SDA signal wire transitions from low to high while the SCL signal wire is high. The I2C Protocols require that all transitions of the SDA signal wire occur when the SCL signal wire is low and exceptions may be treated as a Start condition or a Stop condition .

When legacy I2C protocols are used only 1 bit information is sent per cycle with 2 wires of the shared serial bus . That is only 0.5 bit information are transmitted per cycle per wire. According to aspects disclosed herein improved data rates i.e. greater than 0.5 bit information per cycle per wire may be obtained by transmitting data on both the SDA line and the SCL line while embedding the clock within the transmitted symbols. Clock information may be extracted at the receiver without using a phase locked loop PLL .

The timing between consecutive sequences of symbols and may be dominated by time periods required to satisfy the protocols governing the operation of I2C devices. In one example a Start condition precedes each transmission and has a duration t of at least 260 ns. The Start condition may be defined by a symbol value of 1 such that the SDA signal is held low while the SCL signal remains high. The Start condition may follow a minimum setup period t when both signals and are in a high state as defined by a symbol value of 3. The minimum setup period t may commence after a transmission or terminates and the minimum setup period t may be maintained for at least 260 ns. Accordingly the minimum elapsed time between the start of a first transmission and the start of a second transmission may be calculated as 12 260 260 12 50 ns 1120 ns. An additional nominal 20 ns may be included for signal fall time t between setup and start time. The signal fall time may be calculated as 

Accordingly 19 bits of data may be transmitted in a minimum of 1140 ns with a corresponding raw bit rate of approximately 16.7 Mbps and a useful bit rate of approximately 14.04 Mbps since 16 bits are transmitted in the 12 symbols.

The minimum required time between the transmissions and is significantly greater when I2C devices are accommodated on the bus than when only CCIe devices are involved in the communication. includes a timing diagram that illustrates the increased time of adding I2C setup and start periods in order to provide backwards compatibility for I2C devices.

In the example depicted in the timing diagram data may be encoded in a stream of symbols transmitted in 12 symbol sequences or intervals . Each 12 symbol sequence includes a Start symbol and a termination or Setup symbol . The combination of the Setup symbol and the Start symbol forms a sequence of symbols 3 1 between sequences of 12 symbols transmitted on the CCIe bus. As described herein any two consecutive symbols in a sequence of symbol produce different signaling states on the shared bus such that a receiver may derive the RXCLK from the symbol transitions occurring at symbol boundaries in the 12 symbol sequence . Transitions between symbols may be identified from transition numbers as described herein. A CCIe encoder may generate a sequence of 12 symbols the start symbol and the setup symbol

According to certain aspects a serial bus can support both I2C devices and CCIe devices at the same time. As noted herein clock information that would be transmitted as a clock signal on the SCL signal wire for I2C modes of communication can be embedded within symbol transitions thereby permitting the use of the SCL signal wire to be used to carry symbol information. Certain signaling characteristics of the I2C protocol may be leveraged to enable operability of the shared bus for I2C and CCIe modes. For example the I2C protocol requires that all I2C compatible slave nodes must reset their bus logic on receipt of a Start condition which occurs when a high to low transition on the SDA line occurs while the SCL line is high.

Transitions occurring on the SDA line coincident with a transition on the SCL line are inconsequential to legacy I2C devices which may interpret such transitions as a Start condition. However the legacy I2C device detects a later occurring valid Start condition which resets the bus logic detection of the I2C slave node. The I2C slave nodes may also interpret some SDA transitions occurring during the CCIe transmissions as a Stop condition but detection of such a Stop condition within the CCIe transmissions merely causes earlier termination of the incomplete SID . Similarly detection of a Start condition during the CCIe transmissions causes performance of a bus logic reset by the I2C function of the slave nodes.

Therefore it is apparent that the legacy I2C slave nodes can be expected to ignore the 12 symbol CCIe transmissions associated with a 6 SCL pulse sequence as an incomplete I2C slave ID . Therefore during the 12 SCL toggles available between Start conditions and twelve 12 symbols may be transmitted on the SCL line and or the SDA line .

The SCL line and or the SDA line of an I2C bus may be utilized for data transmission in CCIe mode when a clock signal has been embedded within symbol transitions. Consequently the SDA line and SCL line can be used to transmit any arbitrary 12 symbols between two consecutive Start conditions and or without affecting legacy I2C slave node functionality and without using a bridge device to segregate legacy I2C slave nodes from the CCIe capable nodes. In I2C mode a Start condition is sent only by an I2C master while a Start condition is sent by whichever node transmits the 12 symbol word in CCIe mode.

In the simplified example depicted an I2C slave device may be capable of communications in accordance with I2C protocols a bus master device is capable of communications in accordance with I2C and CCIe protocols and a CCIe slave device is capable of communications in accordance with CCIe protocols and possibly in accordance with both CCIe and I2C protocols. In some instances a CCIe device and or may operate as either a slave or master on the serial bus during CCIe modes of operation. It will be appreciated that the two wire serial bus may couple other devices as illustrated in . The apparatus may be embodied in a wireless mobile device a mobile telephone a mobile computing system a wireless telephone a notebook computer a tablet computing device a media player a gaming device an appliance a wearable computing device or the like.

The CCIe devices may serve one or more particular or designated functions in the system . For example the CCIe devices may include peripheral modules or circuits that control or include elements of a user interface such as a display image sensor camera keyboard touchscreen sensor mouse or other pointer audiovisual codec modem global positioning sensor motion detector and other devices or components of an apparatus employing the system . In addition the CCIe devices may include a storage a processing circuit and or control logic a transceiver and line drivers receivers . The processing circuit and or control logic may include a processor such as a state machine sequencer signal processor or general purpose processor. The transceiver may include receiver Rx and transmitter Tx circuits together with certain circuits and modules including timing control logic general logic CDR encoding and decoding circuits and or devices. The transceiver may include storage used to maintain status configuration and to provide data buffers.

Clock generation circuitry may be provided within or external in the transceiver and or may provide a transmit clock TXCLK signal that can be used to determine data transmission rates for I2C and a CCIe communication modes. The SCL connector may carry a clock provided by the clock generation circuitry in I2C modes of operation while timing information may be embedded within sequences of symbols transmitted using the SCL connector and the SDA connector in CCIe modes of operation.

The storage may include a processor or computer readable medium that can be used to store data configuration information status and or software code or instructions. The data may be stored in buffers that supply transmitter circuits and or buffers that handle incoming data from receiver circuits. The software code or instructions may configure and or be executed by the processing circuit and or control logic such that the processing circuit and or control logic manages or operates the various constituent elements of the device and handles communications protocols in accordance with the current mode of operation of the two wire serial bus .

The master device may be responsible for controlling modes of operation of the two wire serial bus and for switching between modes of operation as necessary to permit devices coupled to the two wire serial bus to communicate with other devices. Accordingly the master device may implement one or more protocols that can identify a slave device requiring or requesting access to the two wire serial bus . The master device may initiate an I2C mode communications transaction when the I2C slave is to be addressed and may initiate a CCIe mode communications transaction when the CCIe slave is to be addressed. In some circumstances two or more devices may be addressed in the same transaction and the master device may determine a mode of communication for such transaction.

As illustrated in the first timing diagram the protocol may define procedures and signaling that causes the shared bus to switch between CCIe and I2C modes.

In one example the master device may transmit a CCIe mode entry command to establish maintain or transition to CCIe mode communications using the shared serial bus . The CCIe mode entry command may be addressed to a CCIe capable device while in I2C mode and the addressed device may reconfigure its transmit and receive circuitry to support CCIe communications. Based on the type of communication transaction involved the CCIe capable device may encode or decode data for transmission on both wires of the shared serial bus with clock information embedded in sequences of symbols transmitted on the shared serial bus . An I2C slave device coupled to the shared serial bus typically ignores the CCIe transaction. The I2C slave device may perceive an incomplete slave ID transmission but will reset its receive circuitry when an I2C start condition is transmitted on the shared serial bus between CCIe transmissions. In some circumstances other unaddressed CCIe devices see may monitor the CCIe communications.

The master device may transmit a CCIe mode exit command to return to I2C mode communications on the shared serial bus . In one example the shared bus remains in the CCIe mode of operation after entry to CCIe mode is executed until and unless an exit from CCIe mode is executed.

Another timing diagram includes an example showing an entry sequence that may be used to effect entry into CCIe mode. A CCIe mode entry may be accomplished as part of a general call transmitted while the shared bus is operating in I2C mode. After CCIe mode is entered an appropriate slave identifier SID may be transmitted followed by an address identifying one or more CCIe capable slaves followed by data transmissions. The address may be a multi word address and each address word and each data word may be separated by an I2C start command that causes any I2C slave device to remain inactive on the shared serial bus .

Similarly the CCIe mode exit may be accomplished by a CCIe mode exit sequence provided as part of a general call transmitted while the shared bus is operating in CCIe mode. The CCIe exit command may cause all CCIe devices and or to return to I2C mode of operation. Accordingly CCIe enabled nodes and or may respond to general calls that include entry exit sequences by switching from I2C mode to CCIe mode and from CCIe mode to I2C mode respectively.

In some instances a CDR calibration protocol may be used by the CCIe master node to cause an indicated CCIe node including the master node itself to calibrate its CDR logic and to maximize the link rate. For this purpose the CCIe master node may also have its own SID. CCIe words may be sent in 12 symbols that carry 19 bits information. Except for the CDR calibration protocol the 16 least significant bits of the 19 bits carry data while 3 most significant bits of the 19 bits may be used for other information such as control information.

Data rates of the CCIe interface may be improved by selection and or use of push pull drivers. Referring again to which illustrates one example of CCIe symbol timing on an Fm capable I2C bus . The timing of a CCIe signal that is driven by the same physical driver used for I2C Fm mode may be limited by the rise time of the drivers where rise time is the time it takes the line voltage to change from 30 to 70 of VDD level. is a diagram illustrating one example of CCIe symbol timing on Fm capable I2C bus when the CCIe signal is driven by the same physical driver used for I2C Fm mode. The rise time for I2C Fm is 120 ns and the time for signal voltage level from 0V to 70 may be calculated as 170 ns. While such rise times may be satisfactory in I2C mode where signaling is often handled by microcontroller based operations in CCIe mode signaling operations are typically implemented in hardware. Furthermore microcontroller based or software operated I2C devices may need many cycles to process data especially while the SCL wire is in logic low state. Accordingly a minimum low period of SCL may be 1300 ns or more for Fm while a minimum high period of 600 ns may be specified by I2C protocols.

According to certain aspects disclosed herein CCIe mode devices may not attach meaning to the durations or the differences in durations of logic 1 or logic 0 on each line . CCIe communications requires only that a receiver can correctly decode logic 1 and 0 using hardware techniques and CCIe does not require long high or low periods to perform several actions. Accordingly the CCIe system may use a clock of 125 MHz or more producing an 8 ns period. In order for a receiver to correctly detect asynchronous input values the receiver may sample the same value at least 3 times. In one example a minimum high period of CCIe signal tmay be set to 30 ns which is well above the minimum required 24 ns associated with a 125 MHz clock. Thus the 0 to 70 rise time of 170 ns 30 ns 200 ns High time is the minimum possible symbol time and the resultant maximum symbol rate is 5 MHz.

The maximum CCIe link rate achievable over an I2C compatible bus may be affected by the type of drivers used by CCIe capable devices. In one example open drain drivers see may be used by CCIe devices coupled to the I2C compatible bus . In this example each symbol of the 12 symbols may be sent in a minimum symbol time of 200 nanoseconds ns such that the 12 symbols may be transmitted in 2400 ns. Additionally Start conditions that comply with I2C timing specifications are necessary when legacy I2C slave devices are coupled to the shared bus . A minimum Start condition setup time and a minimum Start condition hold time have a specified minimum duration of 260 ns for 12C fast mode plus Fm operation. Furthermore the maximum fall time permitted for the SDA line operation is 120 ns for I2C Fm which corresponds to the maximum rise time of a pull up resistor even when the SDA line is pulled down by transistor of the transmitter . For a CCIe device the fall time for the SDA line may be assumed to have a significantly faster fall time the I2C maximum fall time. For example the CCIe device may provide a nominal fall time of 20 ns for the SDA line for a Start condition. Thus the CCIe device may transmit a CCIe word with start condition in 2940 ns. The raw bit rate for a CCIe word carrying 19 bits of information may be calculated as 19 bits 2940 ns 6.4 Mbps. However each CCIe word may include 16 bits of data and 3 bits of overhead providing a net data rate calculated as 5.4 Mbps 16 bits 2940 ns . 16 bits 2940 ns 5.4 Mbps.

In another example CCIe devices may use push pull drivers instead of open drain drivers to transmit the 12 symbol CCIe word Improved performance may result and a link rate of at least 16.7 Mbps can be achieved at a 20 MHz symbol rate. The CCIe devices may use CMOS push pull drivers that can imitate open drain driver behavior during I2C operations including Start conditions in CCIe mode. The CCIe devices may imitate open drain driver behavior by selectively disabling PMOS transistors of the push pull drivers. Alternatively or additionally the CCIe devices may actively drive a high signal state from the PMOS transistors of the push pull drivers during the 12 symbols in CCIe mode. As a result a 50 ns symbol period may be used enabling transmission of the 12 symbol CCIe words in 600 ns. A Start condition duration of t t 540 ns period setup time and hold time is maintained. In this configuration it is possible to send one word in 1140 ns for CCIe mode transmissions which is equivalent to a raw bit rate calculated as 19 bits 1140 ns 16.7 Mbps. However each CCIe word may include 16 bits of data and 3 bits of overhead providing a net data rate calculated as 16 bits 1140 ns 14.0 Mbps.

In a third example CCIe capable devices may use CMOS push pull drivers for all transmissions when only CCIe capable devices are coupled to the bus . As a result the symbol period can conservatively be shortened to 50 ns and transmission of the 12 symbol CCIe words in 600 ns can be sent in 600 ns. Because the I2C compliant Start condition is not required the Start condition period can be implemented by providing a setup period for a duration equivalent to the 50 ns symbol period and the hold period for the duration equivalent to the 50 ns symbol period thereby shortening the Start Condition to a duration of 100 ns. In this example one 19 bit word can be transmitted in 700 ns which is equivalent to a bit rate of 27.1 Mbps 19 bits 700 ns which is equivalent to a raw bit rate calculated as 19 bits 700 ns 27.1 Mbps. However each CCIe word may include 16 bits of data and 3 bits of overhead providing a net data rate calculated as 16 bits 700 ns 22.9 Mbps.

With reference again to a system or apparatus may employ a plurality of devices and that are interconnected by a multimode bus . The multimode bus may include a two wire serial bus that includes a first line and a second line . The first mode of operation implements a first protocol for data transmissions over the serial bus and the second mode implements a second protocol for data transmissions over the serial bus . The serial bus may operate in I2C and CCIe modes of operation. The bus may be an I2C compatible bus. In one example the first line may serve as an SCL line when the serial bus operates as an I2C bus and the second line may serve as an SDA line when the serial bus operates as an I2C bus.

A first set of the devices and or that are coupled to the bus may be configured to use the first line for data transmissions and use the second line for a first clock signal in a first mode of operation and in a second mode of operation a second set of devices and or that are coupled to the bus may be configured to use both the first line and the second line for data transmissions while embedding a second clock signal within symbol transitions of the data transmissions. The second clock signal may have a greater frequency than the first clock signal.

The first set of devices and or and the second set of devices and or may concurrently monitor at least the first line in both the first mode and second mode of operation. The first set of devices and or and the second set of devices and or may concurrently monitor at least the second line in both the first mode and second mode of operation.

In the first mode of operation a master device from the first set of devices and or may transmit data to a slave device from the first set of devices and or over the first line of the bus.

In the second mode of operation a master device from the second set of devices and or may transmit data to a slave device from the second set of devices and or over the first line of the bus.

In the second mode of operation the first set of slave devices may receive a reset indicator over the first line and second line inhibiting detection of a valid slave node address. The reset indicator may be an I2C start condition for example. In the second mode of operation data transmissions may be periodically interrupted when a reset indicator is inserted in the first line and second line thereby causing the first set of devices to reset their bus logic prior to detecting a valid sequence of bits.

In the first mode of operation a master node may send a first bit sequence over the first line indicating to the second set of devices a switch to the second mode of operation. The master node may send an exit symbol sequence over the bus indicating to the second set of devices a switch to the first mode of operation.

The second mode of operation may have a higher bit rate of transmission over the bus than the first mode of operation. For example the first mode of operation may support a maximum bit rate of 1 megabits per second over the bus and the second mode of operation may support a maximum bit rate of 6.4 megabits per second. In another example the first mode of operation may support a maximum bit rate of 1 megabits per second over the bus and the second mode of operation may support a maximum bit rate of 16.7 megabits per second.

The second set of devices may be capable of operating in both the first mode of operation and the second mode of operation.

In one example the bus couples to a baseband processor including a first device from the second set of devices and to an image sensor including a second device from the second set of devices . The bus may control data signals between the baseband processor and image sensor.

In some instances each device in the second set of devices is adapted to convert a sequence of data bits into a plurality of M transition numbers convert each transition number into a sequential number from a set of sequential numbers and transmit the sequential number over the bus. The M transition numbers may be expressed as ternary digits. The sequential number may be selected from the transition number based on a transition from an immediately previous sequential number to guarantee that no two sequential numbers are the same. Each transition number may be converted into a sequential number from a set of sequential numbers by converting a plurality of transition numbers into a sequential number.

With continued reference to a system or apparatus may employ a plurality of devices and that are interconnected by a multimode bus . The bus may include a two wire serial bus having a first line and a second line . The bus may be an I2C compatible bus. A first set of devices may use the first line for data transmissions and use the second line for a first clock signal in a first mode of operation while a second set of devices and coupled to the bus may be configured to use both the first line and the second line for data transmissions in a second mode of operation while embedding a second clock signal within symbol transitions of the data transmissions.

The first set of devices and the second set of devices and may concurrently monitor at least the first line in both the first mode of operation and the second mode of operation. The first set of devices and the second set of devices may concurrently monitor at least the second line in both the first mode and second mode of operation.

In one example a master device from the first set of devices transmits data to a slave device over the first line of the bus in the first mode of operation. In another example a master device from the second set of devices transmits data to a slave device over the first line of the bus in the second mode of operation. The second mode of operation may have a higher bit rate of transmission over the bus than the first mode of operation. In one example the first mode of operation may have a maximum bit rate of 1 megabits per second over the bus and the second mode of operation may have a maximum bit rate of 6.4 megabits per second over the bus . In a second example the first mode of operation may have a maximum bit rate of 1 megabits per second over the bus and the second mode of operation may have a maximum bit rate of 16.7 megabits per second over the bus . The second clock signal may have a greater frequency than the first clock signal.

The first mode of operation may implement a first protocol for data transmissions over the bus and the second mode implements a second protocol for data transmissions over the bus .

The first set of devices may receive a reset indicator over the first line and second line inhibiting detection of a valid slave node address in the second mode of operation. Data transmissions may be periodically interrupted by inserting a reset indicator in the first line and second line that causes the first set of devices to reset their bus logic prior to detecting a valid sequence of bits in the second mode of operation.

During the first mode of operation a master node may send a first bit sequence over the first line indicating to the second set of devices that a switch is being made to the second mode of operation. During the second mode of operation the master node may send an exit symbol sequence over the bus indicating to the second set of devices that a switch is being made to the first mode of operation.

In one example the second set of devices may be capable of operating in both the first mode of operation and the second mode of operation.

In some instances the bus couples to a baseband processor including a first device from the second set of devices and to an image sensor including a second device from the second set of devices . The bus may carry control data signals between the baseband processor and image sensor. Each device in the second set of devices may be adapted to convert a sequence of data bits into a plurality of M transition numbers convert each transition number into a sequential number from a set of sequential numbers and transmit the sequential number over the bus . The sequential number may be selected from the transition number based on a transition from an immediately previous sequential number to guarantee that no two sequential numbers are the same. Each transition number may be converted into a sequential number from a set of sequential numbers by converting a plurality of transition numbers into a sequential number.

With continued reference to a system or apparatus may employ a plurality of devices and that are interconnected by a multimode bus . The bus may include a two wire serial bus having a first line and a second line . The bus may be an I2C compatible bus. A first set of devices may use the first line for data transmissions and use the second line for a first clock signal in a first mode of operation while a second set of devices and coupled to the bus may be configured to use both the first line and the second line for data transmissions in a second mode of operation while embedding a second clock signal within symbol transitions of the data transmissions.

In operation a processing circuit may be configured to send and receive data to and from a transmitter and receiver circuit and the transmitter and receiver circuit may be configured to communicate over a bus including a first line and a second line . The transmitter and receiver circuit may be configured to use the first line for data transmissions and the second line for a first clock signal in a first mode of operation and to use both the first line and the second line for transmitting data in a second mode of operation such that a second clock signal is embedded within symbol transitions of the data transmissions.

The device may coexist with a set of other devices coupled to the bus but operate only in the first mode while constantly monitoring at least the first line during both the first mode and second mode of operation. The device may coexist with a set of other devices coupled to the bus but operate only in the first mode while constantly monitoring at least the second line during both the first mode and second mode of operation.

The device may transmit data to a slave device over the first line of the bus in a first mode of operation. The device may transmit data to a slave device over the first line and second line of the bus in the second mode of operation. The first mode of operation may implement a first protocol for data transmissions over the bus and the second mode may implement a second protocol for data transmissions over the bus .

The transmitter and receiver circuit may be configured to send a reset indicator over the first line and second line during the second mode of operation to inhibit other devices operating in the first mode from detecting a valid slave node address. The data transmissions during the second mode of operation may be periodically interrupted by inserting a reset indicator in the first line and second line that causes the other devices operating in the first mode to reset their bus logic prior to detecting a valid sequence of bits.

In some examples the transmitter and receiver circuit is configured to send a first bit sequence over the first line in the first mode of operation indicating a switch to the second mode of operation to the other devices capable of operating in both the first mode and second mode. The master node may send an exit symbol sequence over the bus in a second mode of operation indicating a switch to the first mode of operation to the other devices capable of operating in both the first mode and second mode.

The second mode of operation may have a higher bit rate of transmission over the bus than the first mode of operation. In one example the first mode of operation has a maximum bit rate of 1 megabits per second over the bus and the second mode of operation has a maximum bit rate of 6.4 megabits per second. In another example the second clock signal may have a greater frequency than the first clock signal.

With continued reference to a system or apparatus may employ a plurality of devices and that are interconnected by a multimode bus . The bus may include a two wire serial bus having a first line and a second line . The bus may be an I2C compatible bus. A first set of devices may use the first line for data transmissions and use the second line for a first clock signal in a first mode of operation while a second set of devices and coupled to the bus may be configured to use both the first line and the second line for data transmissions in a second mode of operation while embedding a second clock signal within symbol transitions of the data transmissions.

According to certain aspects disclosed herein a master device may ascertain whether all devices coupled to the bus are capable of operating according to the third mode of operation that uses both the first line and the second line for data transmissions while embedding a second clock signal within symbol transitions of the data transmissions line for a first clock signal and causes the devices and to be operated in the third mode of operation only if all devices coupled to the bus are capable of operating in the third mode. In one example the third mode of operation may provide reduced signaling overhead with respect to the second mode. The set of devices and are configured to operate in the third mode so long as all devices and coupled to the bus are able to operate in the third mode or so long as all active devices and coupled to the bus are able to operate in the third mode. An active device may be a device that is powered on coupled to the bus and or monitoring the bus . The devices and may concurrently monitor at least the first line in both the first mode and second mode of operation. The first set of devices and second set of devices and may concurrently monitor at least the second line in both the first mode and second mode of operation.

In one aspect the first mode of operation implements a first protocol for data transmissions over the bus the second mode implements a second protocol for data transmissions over the bus and the third mode implements a third protocol for data transmissions over the bus . The second mode of operation may permit legacy devices to receive a reset indicator over the first line and second line inhibiting detection of a valid slave node address. In the second mode of operation data transmissions may be periodically interrupted by inserting a reset indicator in the first line and second line that causes legacy devices coupled to the bus to reset their bus logic prior to detecting a valid sequence of bits. In the third mode of operation no reset indicator is sent in the first line and second line .

The third mode of operation may have a higher bit rate of transmission over the bus than the second mode of operation. The third mode of operation may have a maximum bit rate of 27.1 megabits per second over the bus .

In an aspect a master may ascertain that all devices coupled to the bus can operate according to the third mode and send a command to all devices and coupled the bus to operate in the third mode.

In the illustrated example the processing circuit may be implemented with a bus architecture represented generally by the bus . The bus may include any number of interconnecting buses and bridges depending on the specific application of the processing circuit and the overall design constraints. The bus links together various circuits including the one or more processors storage . Storage may include memory devices and mass storage devices and may be referred to herein as computer readable media. The bus may also link various other circuits such as timing sources timers peripherals voltage regulators and power management circuits which are well known in the art and therefore some of which may not be described any further. A bus interface may provide an interface between the bus and line interface circuits . The line interface circuits provides a means for communicating with various other apparatus over a transmission medium such as a serial bus. Depending upon the nature of the apparatus a user interface e.g. keypad display speaker microphone joystick may also be provided and may be communicatively coupled to the bus directly or through a bus interface .

A processor may be responsible for managing the bus and for general processing that may include the execution of software stored in a computer readable medium that may include the storage . In this respect the processing circuit including the processor may be used to implement any of the methods functions and techniques disclosed herein. The storage may be used for storing data that is manipulated by the processor when executing software and the software may be configured to implement any one of the methods disclosed herein.

One or more processors in the processing circuit may execute software. Software shall be construed broadly to mean instructions instruction sets code code segments program code programs subprograms software modules applications software applications software packages routines subroutines objects executables threads of execution procedures functions algorithms etc. whether referred to as software firmware middleware microcode hardware description language or otherwise. The software may reside in computer readable form in the storage or in an external computer readable medium. The computer readable medium and or storage may be a non transitory computer readable medium. A non transitory computer readable medium includes by way of example a magnetic storage device e.g. hard disk floppy disk magnetic strip an optical disk e.g. a compact disc CD or a digital versatile disc DVD a smart card a flash memory device e.g. a flash drive a card a stick or a key drive a random access memory RAM a read only memory ROM a programmable ROM PROM an erasable PROM EPROM an electrically erasable PROM EEPROM a register a removable disk and any other suitable medium for storing software and or instructions that may be accessed and read by a computer. The computer readable medium and or storage may also include by way of example a carrier wave a transmission line and any other suitable medium for transmitting software and or instructions that may be accessed and read by a computer. Computer readable medium and or the storage may reside in the processing circuit in the processor external to the processing circuit or be distributed across multiple entities including the processing circuit . The computer readable medium and or storage may be embodied in a computer program product. By way of example a computer program product may include a computer readable medium in packaging materials. Those skilled in the art will recognize how best to implement the described functionality presented throughout this disclosure depending on the particular application and the overall design constraints imposed on the overall system.

The storage may maintain software maintained and or organized in loadable code segments modules applications programs etc. which may be referred to herein as software modules . Each of the software modules may include instructions and data that when installed or loaded on the processing circuit and executed by the one or more processors contribute to a run time image that controls the operation of the one or more processors . When executed certain instructions may cause the processing circuit to perform functions in accordance with certain methods algorithms and processes described herein.

Some of the software modules may be loaded during initialization of the processing circuit and these software modules may configure the processing circuit to enable performance of the various functions disclosed herein. For example some software modules may configure internal devices and or logic circuits of the processor and may manage access to external devices such as the line interface circuits the bus interface the user interface timers mathematical coprocessors and so on. The software modules may include a control program and or an operating system that interacts with interrupt handlers and device drivers and that controls access to various resources provided by the processing circuit . The resources may include memory storage processing time access to the line interface circuits the user interface and so on.

One or more processors of the processing circuit may be multifunctional whereby some of the software modules are loaded and configured to perform different functions or different instances of the same function. The one or more processors may additionally be adapted to manage background tasks initiated in response to inputs from the user interface the line interface circuits and device drivers for example. To support the performance of multiple functions the one or more processors may be configured to provide a multitasking environment whereby each of a plurality of functions is implemented as a set of tasks serviced by the one or more processors as needed or desired. In one example the multitasking environment may be implemented using a timesharing program that passes control of a processor between different tasks whereby each task returns control of the one or more processors to the timesharing program upon completion of any outstanding operations and or in response to an input such as an interrupt. When a task has control of the one or more processors the processing circuit is effectively specialized for the purposes addressed by the function associated with the controlling task. The timesharing program may include an operating system a main loop that transfers control on a round robin basis a function that allocates control of the one or more processors in accordance with a prioritization of the functions and or an interrupt driven main loop that responds to external events by providing control of the one or more processors to a handling function.

At block the device may generate a transition number from a set of bits. The transition number may include a twelve digit ternary number. In one example the device may generate a transition number from a set of bits. The transition number may be a twelve digit ternary number.

At block the device may convert the transition number into a sequence of symbols Timing information may be encoded in transitions between symbols in the sequence of symbols. Timing information encoded in the sequence of symbols enables a receiver to generate a receive clock from the sequence of symbols. The transition number may be converted into the sequence of symbols by providing the ternary number to a transcoder.

In one example the transcoder receives the most significant digit of the ternary number first the least significant digit of the ternary number may be received by the transcoder last and intermediate digits between a most significant digit to the least significant digit are provided to the transcoder in order of decreasing significance. In another example the transcoder receives the least significant digit of the ternary number first the most significant digit of the ternary number may be received by the transcoder last and intermediate digits between a most significant digit to the least significant digit are provided to the transcoder in order of increasing significance.

At block the device may transmit the sequence of symbols on a two wire serial bus when the two wire serial bus is operated in a first mode of operation. The sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation. Four signaling states may be defined for the two wire serial bus. Each digit of the ternary number may select and or indicate a next symbol to be transmitted on the two wire serial bus from one of three available symbols. Each of these three available symbols may be different from a current symbol being transmitted on the two wire serial bus. Accordingly each transition between consecutive symbols causes a change in a signaling state of the two wire serial bus.

In one example the two wire serial bus may be a multi purpose bus that supports CCIe communications when operated in the first mode of operation. For the second mode of operation the two wire serial bus may support I2C and or CCI modes of communication. The device may be configured or adapted to cause a change from the first mode of operation to the second mode of operation when a control sequence is transmitted on the two wire serial bus. In the CCIe mode of operation an I2C start condition may be provided between sequences of symbols transmitted on the two wire serial bus in the CCIe mode of operation. Certain aspects of the timing of the start condition may cause a reset of receive logic in another device configured for I2C modes of operation including devices that can only communicate using I2C protocols.

In one example a first I2C start condition is transmitted on the two wire serial bus before the sequence of symbols is transmitted on the two wire serial bus. After the sequence of symbols has been transmitted on the two wire serial bus a second I2C start condition may be transmitted on the two wire serial bus. The time elapsed between the first and second I2C start conditions may be less the time required by I2C protocols to receive an address word in I2C modes of operation. Accordingly an I2C receiver monitoring the two wire serial bus typically perceives a maximum of 6 clock cycles on an SCL signal wire of the two wire serial bus after the first start condition and before the second I2C start condition.

The processor is responsible for general processing including the execution of software stored on the computer readable storage medium . The software when executed by the processor causes the processing circuit to perform the various functions described supra for any particular apparatus. The computer readable storage medium may also be used for storing data that is manipulated by the processor when executing software including data decoded from symbols transmitted over the multi lane CCIe bus . The processing circuit further includes at least one of the modules and or circuits and . The modules and or circuits and may be software modules loaded configured and running in the processor resident stored in the computer readable storage medium one or more hardware modules coupled to the processor or some combination thereof. The modules and or circuits and may include microcontroller instructions state machine configuration parameters or some combination thereof.

In one configuration the apparatus for wireless communication includes a module and or circuit that is configured to generate a transition number from a set of bits a module and or circuit that is configured to convert the transition number into a sequence of symbols and a module and or circuit that is configured to transmit the sequence of symbols in the signaling state of a two wire serial bus. The apparatus may include additional module and or circuits including for example a module and or circuit that controls the mode of operation of the serial bus and or the apparatus . For example the mode control module and or circuit may include or cooperate with a command generation module that transmits control sequences on the serial bus . In another example the mode control module and or circuit may cause a reconfiguration of the line interface circuits to enable open drain line drivers or equivalents thereof in an I2C mode of operation and push pull drivers in a CCIe mode of operation.

At step the device may derive a receive clock from transitions in signaling state of a two wire serial bus when the two wire serial bus is operated in a first mode of operation. The two wire serial bus may be a multi purpose bus that concurrently supports CCIe communications when the two wire serial bus is operated in the first mode of operation. The two wire serial bus may support I2C communications in the second mode of operation. The two wire serial bus may support communications with devices compatible with one or more of I2C CCI and or CCIe protocols.

At step the device may use the receive clock to receive a sequence of symbols that is transmitted on the two wire serial bus in accordance with the first mode of operation. Transitions in a signaling state of the two wire serial bus may correspond to transitions between symbols in the sequence of symbols. The sequence of symbols may be received from the two wire serial bus by determining an I2C start condition on the two wire serial bus and receiving 12 symbols from the two wire serial bus according to timing defined by the receive clock.

In one aspect the sequence of symbols may be ignored by a device configured for communicating on the two wire serial bus when the two wire serial bus is operated in a second mode of operation.

At step the device may generate a transition number from the sequence of symbols. The transition number may have multiple digits with each digit representing a transition between a pair of consecutive symbols in the sequence of symbols.

At step the device may decode data from the transition number. The transition number may be a twelve digit ternary number. Four 4 signaling states may be defined for the two wire serial bus. Each digit of the ternary number may represent a relationship between a pair of consecutive signaling states on the two wire serial bus. Each symbol in the sequence of symbols may be one of four symbols defined by the signaling state of the two wire serial bus. Each digit of the ternary number may define a relationship between a pair of consecutive symbols in the sequence of symbols.

The processor is responsible for general processing including the execution of software stored on the computer readable storage medium . The software when executed by the processor causes the processing circuit to perform the various functions described supra for any particular apparatus. The computer readable storage medium may also be used for storing data that is manipulated by the processor when executing software including data decoded from symbols transmitted over the multi lane CCIe bus . The processing circuit further includes at least one of the modules and or circuits and . The modules and or circuits and may be software modules running in the processor resident stored in the computer readable storage medium one or more hardware modules coupled to the processor or some combination thereof. The modules and or circuits and may include microcontroller instructions state machine configuration parameters or some combination thereof.

In one configuration the apparatus for wireless communication includes a CDR circuit that is configured to derive a receive clock from transitions in signaling state of a two wire serial bus and to receive a sequence of symbols from the two wire serial bus using the receive clock a module and or circuit that is configured to generate a transition number from the sequence of symbols and a module and or circuit that is configured to decode data from the transition number. The transitions in the signaling state of the two wire serial bus may correspond to transitions between symbols in the sequence of symbols. The transition number may have multiple digits with each digit representing a transition between a pair of consecutive symbols in the sequence of symbols.

At step the first set of devices coupled to the bus may be configured to use the first line for data transmissions and use the second line for a first clock signal in a first mode of operation.

At step the second set of devices coupled to the bus may be configured to use both the first line and the second line for data transmissions while embedding a second clock signal within symbol transitions of the data transmissions in a second mode of operation.

In some instances the bus may be operable in a third mode. In such instances it may be determined at step whether all active devices coupled to the bus are capable of operating in the third mode. In one example the determination is made based on configuration information maintained by a bus master device. The configuration information may include predefined configuration information and or information obtained by a discovery protocol or the like. The configuration information may include descriptions of the capabilities of devices coupled to the bus that have been identified as currently active. A currently active device may be a device that has been identified in a start up procedure a device that has responded to a broadcast transmitted on the bus and or a device that has been engaged in a communication transaction on the bus. An inactive device may be a dormant device and or a device that has not responded to a communication transmitted on the bus that included the device s SID or that included a broadcast that would be expected to a prompt a response from the device.

If it is determined at step that all active devices coupled to the bus are capable of operating in the third mode of operation then at step the bus may be caused to operate in a third mode of operation. In the third mode of operation one or more devices are configured to use both the first line and the second line for data transmissions while embedding a clock signal within symbol transitions of the data transmissions.

In some instances the first set of devices and second set of devices concurrently monitor at least one line of the bus in both the first mode and second mode of operation. A master device in the first set of devices may transmit data over the first line of the bus to a slave device in the first set of devices in the first mode of operation. A master device in the second set of devices may transmit data over the bus to a slave device in the second set of devices in the second mode of operation. Devices in the second set of devices are capable of operating in both the first mode of operation and the second mode of operation. A master device may be capable of operating in the first and second modes of operation. A device may serve as a master device in both the first and second modes of operation. A device that can serve as a master device in both the first and second modes of operation may be considered to a member of both the first and second sets of devices. A master device may be capable of operating in the first second and third modes of operation. A device may serve as a master device in each of the first second and third modes of operation.

In one aspect the first mode of operation implements a first protocol for data transmissions over the bus and the second mode implements a second protocol for data transmissions over the bus. The first protocol may correspond to or be compatible with an I2C mode of operation. The second protocol may correspond to or be compatible with a CCIe mode of operation.

The first set of devices may receive a reset indicator over the first line and second line inhibiting detection of a valid slave node address in the second mode of operation. In one example data transmissions in the second mode of operation are periodically interrupted by inserting a reset indicator in the first line and second line that causes the first set of devices to reset their bus logic prior to detecting a valid sequence of bits. The reset indicator may correspond to a Start condition when the first mode of operation corresponds to or is compatible with an I2C mode of operation.

According to certain aspects disclosed herein a master node in the second set of devices sends a first bit sequence over the first line during the first mode of operation where the first bit sequence indicates a switch to the second mode of operation to the second set of devices. During the second mode of operation a master node may send an exit symbol sequence over the bus indicating to the second set of devices indicating a switch to the first mode of operation.

According to certain aspects disclosed herein the bus is an I2C compatible bus. In one example the first mode of operation may have a maximum bit rate of 1 megabits per second over the bus and the second mode of operation may have a maximum bit rate of 6.4 megabits per second. In another example the first mode of operation has a maximum bit rate of 1 megabits per second over the bus and the second mode of operation has a maximum bit rate of 16.7 megabits per second.

In some instances the first mode of operation implements a first protocol for data transmissions over the bus the second mode of operation implements a second protocol for data transmissions over the bus and the third mode of operation implements a third protocol for data transmissions over the bus. The third mode of operation may have a maximum bit rate of 27.1 megabits per second over the bus.

In one example the bus is coupled to a first device in the second set of devices that includes a baseband processor and to a second device in the second set of devices that includes an image sensor. The bus may carry control data signals between the baseband processor and image sensor.

According to certain aspects disclosed herein each device in the second set of devices may be adapted to convert a sequence of data bits into a plurality of M transition numbers convert each transition number into a sequential number from a set of sequential numbers and transmit the sequential number over the bus. The sequential number may be selected from the transition number based on a transition from an immediately previous sequential number to guarantee that no two sequential numbers are the same. Each transition number may be converted into a sequential number from a set of sequential numbers by converting a plurality of transition numbers into a sequential number.

It is understood that the specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the processes may be rearranged. The accompanying method claims present elements of the various steps in a sample order and are not meant to be limited to the specific order or hierarchy presented.

The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects. Thus the claims are not intended to be limited to the aspects shown herein but is to be accorded the full scope consistent with the language claims wherein reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. Unless specifically stated otherwise the term some refers to one or more. All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed as a means plus function unless the element is expressly recited using the phrase means for. 

