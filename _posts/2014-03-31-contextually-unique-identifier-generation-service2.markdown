---

title: Contextually unique identifier generation service
abstract: Random numbers or unique identifiers may be generated up receiving an API call from a remote system requesting such numbers or identifiers. The API call may specify characteristics desired in the provided number or identifier, such as numeral system, length, character types, lifespan, etc. The number or identifier generation system may track the numbers to ensure that each requesting system receives numbers or identifiers unique to that system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09641598&OS=09641598&RS=09641598
owner: Amazon Technologies, Inc.
number: 09641598
owner_city: Reno
owner_country: US
publication_date: 20140331
---
Random numbers and unique identifiers are commonly used in computing systems for various tasks. One of the most common is identification of information and objects. For example unique identifiers or random numbers may be used to identify interfaces controls files objects database keys or any other generated item or construct that a computing system may need to track. A unique identifier or random number may be combined with other data to form an identifier for an identified item. Such other data may provide additional information such as a date item ownership context etc. Random numbers and unique identifiers are not typically truly unique and or random as there are only finite computing resources available at any system but most implementations of random number and unique identifier generators can produce numbers and identifiers that are virtually unique and very unlikely to be the same as other numbers and identifiers generated. Random numbers and unique identifiers are currently generated locally by the device or system that desires a random number or unique identifier thereby using local resources and requiring that the device maintain records where identifier and or number tracking is needed. This results in the diversion of resources that may be better directed to the main functions of such a device or system.

Computing systems often have a need for random numbers or identifiers that are unique or relatively unique. Unique or relatively unique identifiers are commonly based on random numbers or random strings of characters. Generating unique identifiers or random numbers used interchangeably herein locally may overburden a computing system or divert resources away from more essential tasks. In an embodiment such a computing system may request one or more random numbers or unique identifiers from a remote system such as a cloud based service by sending a request to an application programming interface API . This request may be referred to as an API call . The API may allow the requesting system to specify a type and or quantity of random numbers or unique identifiers requested using parameters provided with the API call. The random number or unique identifier generation system may track the numbers or identifiers provided to particular systems or applications to ensure that the numbers or identifiers provided to that system or application are unique to that system or application.

User system may be communicatively connected to network . Network represents any type and number of networks including the Internet and any combination thereof that facilitate communication between devices. The communication links between user system and network and any communication link and any means that may be used to facilitate communication between two or more devices described herein may be any type and number of communications links capable of facilitating communication between two or more devices including a wired communications link a wireless communications link and a combination thereof using any protocol or other means of enabling communication between devices. All such embodiments are contemplated as within the scope of the present disclosure.

HTTP server may also be communicatively connected to network by any type and number of communications links. HTTP server may be any type and number of servers or devices that perform the functions of a hypertext transfer protocol HTTP server. HTTP server may be communicatively connected to unique identifier random number generator also referred to herein as identifier generation system or simply generator that may be any type and number of devices that are capable of generating unique identifiers and or random numbers as set forth herein. Note that generator represents any one or more servers co located or remote from one another that may execute services and applications that may be referred to herein as generators . Any number and type of generator servers are contemplated as within the scope of the present disclosure. Generator may be communicatively connected to database that represents any type and number of devices that may implement host or otherwise provide database services for one or more generator applications or services.

HTTP server may exchange data with user system . For example user system may perform an API call that generates API call that is transmitted to HTTP server . API call represents one or more messages frames packets etc. that are generated as a result of user system performing an API call. API call may be a request for generation of one or more random numbers and or unique identifiers allowing user system to request that generator generate such numbers and or identifiers rather than generating them locally at user system . API call may include zero or more parameters that may specify required or optional data that may be provided in API call to the called API as set forth below in more detail. API call may also include any other data necessary for relaying API call to a device and data for providing a response such as source and destination addresses port number s etc. Alternatively such data may be included in a frame packet and or any other structure in which API call may be encapsulated or otherwise transported. All such embodiments are contemplated as within the scope of the present disclosure.

Upon receiving API call in some embodiments via network HTTP server may determine that API call is intended for generator and in response may relay or otherwise convey API call and or the data therein to generator . HTTP server may determine that generator is the appropriate destination for API call using any means or methods known to those skilled in the art. Upon receipt of API call generator may process API call and generate response that may be transmitted to user system via HTTP server and in some embodiments network . Response may include one or more requested unique identifiers random numbers and other data as described in more detail herein. Response represents one or more messages frames packets etc. that are generated as a result of generator processing API call . Response may also include any other data necessary for relaying response to user system such as source and destination addresses port number s etc. Alternatively such data may be included in a frame packet and or any other structure in which response may be encapsulated or otherwise transported. All such embodiments are contemplated as within the scope of the present disclosure.

In some embodiments generator may track unique identifiers and or random numbers provided to requesting systems using database . For example to ensure that no duplicate unique identifiers or random numbers are provided to the one system or device generator may store unique identifiers or random numbers sent to a particular system or device in database with an identifier of the particular system associated with each of the unique identifiers or random numbers.

In some embodiments generator may be a distributed system with several generators that may be used to generate random numbers and or unique identifiers. For example generator may distribute generation load across generators and . In such an embodiment generator may serve as a management layer to a random number unique identifier system and handle the management of generators and communications with other devices.

According to the disclosed embodiments a random number or unique identifier API may specify parameters that may be provided by the requesting entity that indicate the type of response requested or other preferences of the requesting entity. The API may be defined using any means or methods in any programming language or abstraction. Shown below is an example definition of an API call for in pseudocode. Any means or methods of defining an API are contemplated as within the scope of the present disclosure 

Shown below is an example API call using HTTP format. Any means or methods of constructing and transmitting an API call are contemplated as within the scope of the present disclosure 

Table 1 below lists parameters that may be defined by an API and included in an API call according to the embodiments set forth herein. Any zero or more of these parameters may be required or optional as defined by the API. In some embodiments no parameters are used and an API call simply returns a random number or an identifier unique or otherwise in a default form and format as defined by the API. In some embodiments a context is determined by a generator implicitly. For example a generator may use an IP address in some embodiments in combination with a port number to determine a system that is requesting a random number or unique identifier. The generator may then track the identifiers or random numbers provided to that system using an identifier of that system based on the IP address and or other contextual information. In other embodiments a context may simply refer to a user defined parameter that a requesting system provides. For example a requesting system may be executing several applications and may assign some type of label to each application. This label may then be provided by the requesting system as a context parameter in a request for a random number or unique identifier. Any type of label name identifier string data or any other information may be used as a context parameter defined by a requesting system and or used by a generator to track the issuance of a random number or unique identifier. Default values may also be used for any or all of the parameters below or any other possible parameters such as expiration times whether to track issued numbers or identifiers numbers of bits of returned numbers or identifiers format of returned numbers or identifiers alphanumeric property of returned numbers or identifiers etc.

In some embodiments some or all parameters may be determined indirectly for an API call based on data associated with the requesting system a context a default configuration or any other criteria. For example the requesting system may be associated with a policy established or requested by a customer operating the requesting system. The policy may specify any zero or more of the parameters disclosed herein. Upon receipt of a request a generator may determine the related policy or the parameters associated therewith and use that data in some embodiments in combination with one or more other parameters received with the request to generate the requested numbers or identifiers. The determination of the related policy or the parameters associated therewith may be based on an identifier of the customer customer account requesting system a parameter included in the request e.g. one parameters identifies a policy or any other means. All such embodiments are contemplated as within the scope of the present disclosure.

Examples of parameters associated data and returned identifiers are set forth below for illustrative purposes only. Any form order notation and other types of data used for returned numbers or identifiers are contemplated as within the scope of the present disclosure.

Note that rather than a more generic API call with a variety of possible parameters e.g. getUniqueID parameter1 parameter2 . . . parameter N multiple API calls providing various results associated with the particular API call are contemplated for other embodiments. For example one API call may request a ten digit decimal numeric unique identifier or random number e.g. getTenDigDec while another may request a set of five 128 bit unique identifiers or random numbers in hexadecimal e.g. get128Hex5Set . Alternatively or in addition some embodiments may support a combination of more specific calls and parameters. For example an API call may request a ten digit decimal numeric unique identifier or random number and permit parameters indicating context and expiration date or time e.g. getTenDigDec context parameter expiration parameter . All such embodiments are contemplated as within the scope of the present disclosure.

At operation a response that includes one or more unique identifiers or random numbers may be received as well as any additional data that may be provided beyond the requested unique identifiers or random numbers. For example an expiration time and or date may be included in the response and or tracking information for the generated unique identifiers or random numbers context information allowing the user system to confirm that the appropriate context was initially provided etc. At operation the user system may make use of the received unique identifiers or random numbers and any associated data. After operation operating procedures move to operation where they end.

At operation a response may be received at the HTTP server from the generator. Alternatively the HTTP server may be associated with a service that detects the storage of data indicating that the requested unique identifiers or random numbers have been generated and in response may retrieve such unique identifiers or random numbers and generate a response for the requesting system. The response may contain any requested one or more unique identifiers or random numbers as well as any associated data that may be provided with such unique identifiers or random numbers. At operation this response or the data contained therein including the requested unique identifier s or random number s may be transmitted to the user system that requested it. After operation operating procedures move to operation where they end.

At operation the generator may generate the one or more requested unique identifiers or random numbers using the provided or acquired parameters if applicable. If applicable the generator may also ensure that the generated number or identifier is not one that has already been provided to the requesting user system. This may be accomplished by for example querying a database with tracking information for such numbers and identifiers that are not expired. Alternatively the generator may determine a pool of available numbers or identifiers by excluding those not listed in a database containing the unexpired numbers or identifiers provided to the requesting user system. Any other actions may be taken at operation to generate a unique identifier or random number that complies with the parameters and any requirements on the generator for generating unique identifiers or random numbers for the requesting user system. A complete response may also be generated at this operation if such a response includes data beyond the requested unique identifiers or random numbers. For example an expiration time and or date may be provided tracking information for the generated unique identifiers or random numbers context information allowing the requesting user system to confirm that the appropriate context was initially provided etc.

At operation the generator may store in some embodiments in a database any tracking information that may be associated with the request in the API call and or the context of the request e.g. requesting user system etc. . For example in order to ensure that the requesting user system receives numbers or identifiers that are unique to the requesting user system the generator may track such numbers or identifiers for example by storing them in a database with associated identifying information. When a number or identifier is requested by a user system the generator may query this database in the generation process to determine a pool of numbers or identifiers from which to select a requested number or identifier. Alternatively the generator may generate a number or identifier and then compare it to those associated with the context e.g. user system etc. to ensure that it is not a same unexpired number or identifier as provided previously. Other means and methods of tracking and determining relatively unique numbers or identifiers are contemplated as within the scope of the present disclosure. Other data associated with the user system or requested number or identifier may also be stored such as an expiration time or date or a lifespan of a requested number or identifier. In some embodiments the generator may track a number of requested numbers or identifiers in an example within a period of time in order to ensure proper billing for the operator of the user system e.g. where the operator pays for a certain number of numbers or identifiers per time period . Any other means or methods of determining and storing data associated with a generated unique identifier or random number are contemplated as within the scope of the present disclosure.

At operation a response with the one or more unique identifiers or random numbers as well as any associated data that may be provided with such unique identifiers or random numbers may be transmitted to the requesting user system. Also at in some embodiments charging and or billing information associated with a customer account identifier may be stored or transmitted to a billing system. After operation operating procedures move to operation where they end.

At operation generator may generate a response including one or more unique identifiers or random numbers and any data that may be provided with such unique identifiers or random numbers. At operation generator may also store any tracking data update a database or otherwise store data related to the request and response. The response may be sent to HTTP server in communication . HTTP server may forward the response or otherwise convey the content of the response to user system in communication .

Note that the instant embodiments may be used with any systems that may request one or more unique identifiers or random numbers generate responses including one or more unique identifiers or random numbers and or relay such requests and responses. Such systems may be operated by but are not limited to service providers and cloud based servers and systems. One skilled in the art will appreciate that the disclosed embodiments can be readily applied to a variety of systems and all such applications are contemplated as embodiments that are within the scope of the present disclosure.

It may be appreciated that these operating environments of may be used to implement aspects of the operating environments of . For example HTTP server database and generator may each or all be implemented in a datacenter of or across multiple datacenters of . Likewise network of may be wide area network of and user system of may be customer computing system of .

Within a datacenter of HTTP server database and generator may each be a server computer or of which itself may be computer of . The communications links between these devices in may be portions of local area network of .

Turning now to details of this figure depicts an example of a suitable computing environment in which embodiments described herein may be implemented. A cloud service provider such as computing service platform may configure the illustrated computing environment to host virtual clouds of entities and to enable communication paths between these virtual clouds that may otherwise be isolated. In particular is a system and network diagram that shows an illustrative operating environment that includes a computing service platform for implementing virtual clouds and for providing on demand access to computing resources such as virtual machine instances. Computing service platform may provide computing resources for executing applications on a permanent or an as needed basis and may be configured as a private network. These computing resources may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances. The instances may be configured to execute applications including unique identifier or random number generators mail servers web servers HTTP servers storage servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Entities may choose to allocate a number of small processing resources such as web servers HTTP servers and or one large processing resource as a database server for example.

The computing resources provided by computing service platform may be enabled by one or more datacenters A N which may be referred herein singularly as datacenter or in the plural as datacenters . Datacenters may be facilities that house and operate computer systems and associated components and may include redundant and backup power communications cooling and security systems. Datacenters may be located in a same geographical area such as in a same facility and may be interconnected using private networks such as high speed fiber optic networks controlled and managed by a service provider of computing service platform . Datacenters may also be distributed across geographically disparate locations and may be interconnected in part using public networks such as the Internet. One illustrative configuration for datacenter that implements the concepts and technologies disclosed herein is described below with regard to .

Entities of computing service platform may access the computing resources provided by datacenters over a wide area network WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects datacenters to remote entities and other users may be utilized. It should also be appreciated that combinations of such networks may also be utilized.

An entity or other entities that are customers of computing service platform may utilize a customer computing system to access the computing resources provided by datacenters . Customer computing system may include a computer capable of accessing computing service platform such as a server computer a desktop or laptop personal computer a tablet computer a wireless telephone a PDA an e reader a game console a set top box or any other computing device.

As is described in greater detail below customer computing system may be utilized to configure aspects of the computing resources provided by computing service platform . In this regard computing service platform may provide a web interface through which aspects of its operation may be configured through the use of a web browser application program executing on customer computing system . Alternatively a stand alone application program executing on customer computing system may access an application programming interface API exposed by computing service platform for performing the configuration operations. Other mechanisms for configuring the operation of computing service platform including launching new virtual machine instances on computing service platform may also be utilized.

According to embodiments disclosed herein capacities of purchased computing resources provided by computing service platform may be scaled in response to demand. In this regard scaling refers to the process of instantiating which may also be referred to herein as launching or creating or terminating which may also be referred to herein as de scaling instances of computing resources in response to demand.

Auto scaling may be one mechanism for scaling computing resources in response to increases or lulls in demand for the resources. Auto scaling may allow entities of computing service platform to scale their purchased computing resources according to conditions defined by the entity. For instance rules may be defined for scaling up capacity in a particular manner in response to the occurrence of specified conditions such as a spike in demand. Similarly rules may also be defined to scale down capacity in a particular manner in response to the occurrence of other conditions such as a lull in demand. The mechanisms disclosed herein for launching virtual machine instances may be utilized when instances are manually launched by an entity or when instances are launched by an auto scaling component in computing service platform .

Computing service platform may also be configured with a deployment component to assist entities in the deployment of new instances of computing resources. The deployment component may receive a configuration from an entity that may include data describing how new instances should be configured. For example the configuration may specify one or more applications or software components that should be installed in new instances provide scripts and or other types of code to be executed in new instances provide cache warming logic specifying how an application cache should be prepared and other types of information. The deployment component utilizes the entity provided configuration and cache warming logic to launch configure and prime new instances of computing resources.

Instances A N which may be referred herein singularly as instance or in the plural as instances may be virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. In the example of virtual machine instances each server computer may be configured to execute an instance manager capable of executing the instances. Instance manager may be a hypervisor or another type of program configured to enable the execution of multiple instances on a single server computer for example. Each of instances may be configured to execute all or a portion of an application. In an embodiments generators as described herein may be instances. For example server computer A may be configured with generator instance that may perform any or all of the functions described herein in regard to any disclosed generator.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of instances can be utilized with the concepts and technologies disclosed herein. For instance the technologies disclosed herein may be utilized with instances of storage resources instances of data communications resources and with other types of resources. The embodiments disclosed herein may also execute all or a portion of an application directly on a computer system without utilizing virtual machine instances.

Datacenter shown in may also include a server computer reserved for executing software components for managing the operation of datacenter server computers and instances . In particular server computer may execute a management component . As discussed above an entity of computing service platform may utilize customer computing system to access management component to configure various aspects of the operation of computing service platform and instances purchased by the entity. For example the entity may purchase instances and make changes to the configuration of the instances. The entity may also specify settings regarding how the purchased instances are to be scaled in response to demand. The entity may also provide requests to launch instances to management component .

As also described briefly above an auto scaling component may scale instances based upon rules defined by an entity of computing service platform . For example auto scaling component may allow an entity to specify scale up rules for use in determining when new instances should be instantiated and scale down rules for use in determining when existing instances should be terminated.

Auto scaling component may execute on a single server computer or in parallel across multiple server computers in computing service platform . In addition auto scaling component may consist of a number of subcomponents executing on different server computers or other computing devices in computing service platform . Auto scaling component may be implemented as software hardware or any combination of the two. Auto scaling component may monitor available computing resources in computing service platform over an internal management network for example.

As discussed briefly above datacenter may also be configured with a deployment component to assist entities in the deployment of new instances of computing resources. Deployment component may receive a configuration from an entity that includes data describing how new instances should be configured. For example the configuration may specify one or more applications that should be installed in new instances provide scripts and or other types of code to be executed for configuring new instances provide cache warming logic specifying how an application cache should be prepared and other types of information.

Deployment component may utilize the entity provided configuration and cache warming logic to configure prime and launch new instances . The configuration cache warming logic and other information may be specified by an entity using management component or by providing this information directly to deployment component . Other mechanisms may also be utilized to configure the operation of deployment component .

In the example datacenter shown in an appropriate LAN may be utilized to interconnect server computers A N and server computer . LAN may also be connected to WAN illustrated in . It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules may also be utilized for balancing a load between each of datacenters A N in computing service platform of between each of server computers A N in datacenter and between instances purchased by each entity of computing service platform . These network topologies and devices should be apparent to those skilled in the art.

It should be appreciated that datacenter described in is merely illustrative and that other implementations may be utilized. In particular functionality described herein as being performed by management component auto scaling component and deployment component may be performed by one another may be performed by other components or may be performed by a combination of these or other components. Additionally it should be appreciated that this functionality may be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

Computer may include a baseboard or motherboard that is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. One or more central processing units CPUs may operate in conjunction with a chipset . CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of computer .

CPUs may perform the necessary operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

Chipset may provide an interface between CPUs and the remainder of the components and devices on the baseboard. Chipset may provide an interface to a random access memory RAM used as the main memory in computer . Chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that may help to start up computer and to transfer information between the various components and devices. ROM or NVRAM may also store other software components necessary for the operation of computer in accordance with the embodiments described herein.

Computer may operate in a networked environment using logical connections to remote computing devices and computer systems through LAN . Chipset may include functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter. NIC may be capable of connecting the computer to other computing devices over LAN . It should be appreciated that multiple NICs may be present in computer connecting the computer to other types of networks and remote computer systems.

Computer may be connected to a mass storage device that provides non volatile storage for the computer. Mass storage device may store system programs application programs other program modules and data including requests for unique identifiers or random numbers and tracking data for unique identifiers or random numbers which have been described in greater detail herein. Mass storage device may be connected to computer through a storage controller connected to chipset . Mass storage device may consist of one or more physical storage units. Storage controller may interface with the physical storage units through a serial attached SAS Small Computer System Interface SCSI interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

Computer may store data on mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of a physical state may depend on various factors and on different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether mass storage device is characterized as primary or secondary storage and the like.

For example computer may store information to mass storage device by issuing instructions through storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. Computer may further read information from mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to mass storage device described above computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It will be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile transitory and non transitory removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

Mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises a version of the LINUX operating system. According to another embodiment the operating system comprises a version of the WINDOWS SERVER operating system from the MICROSOFT Corporation. According to further embodiments the operating system may comprise a version of the UNIX operating system. It should be appreciated that other operating systems may also be utilized. Mass storage device may store other system or application programs and data utilized by computer such as management component and or the other software components described above.

Mass storage device or other computer readable storage media may also be encoded with computer executable instructions that when loaded into computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform computer by specifying how CPUs transition between states as described above. Computer may have access to computer readable storage media storing computer executable instructions that when executed by computer may perform operating procedures depicted in .

Computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

It should be appreciated that the network topologies illustrated in the figures have been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that the systems in the figures are merely illustrative and that other implementations might be used. Additionally it should be appreciated that the functionality disclosed herein may be implemented in software in hardware or in a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware and or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

Each of the operations processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and sub combinations are intended to fall within the scope of this disclosure. In addition certain method or process operations may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the operations or states relating thereto can be performed in other sequences that are appropriate. For example described blocks operations and states may be performed in an order other than that specifically disclosed and multiple blocks or states may be combined in a single block or state. The example blocks operations and states may be performed in serial in parallel or in some other manner. Blocks operations and states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms. Furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

