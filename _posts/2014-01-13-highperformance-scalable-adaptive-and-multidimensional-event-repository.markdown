---

title: High-performance, scalable, adaptive and multi-dimensional event repository
abstract: A High-Performance, Scalable, Adaptive and Multi-dimensional Event Repository is described and utilized in a method for publishing an event in a database. The present method includes transparently intercepting a request to a database to publish an event. A messaging system operable with the database intercepts the request. The present method further includes examining an event repository for a template of the event. The event repository is operable with the database and the messaging system. The present method additionally includes retrieving the event template from the event repository. The present method also includes marshaling the event template to create the event. The present method also includes publishing the event in an event queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063961&OS=09063961&RS=09063961
owner: Oracle International Corporation
number: 09063961
owner_city: Redwood Shores
owner_country: US
publication_date: 20140113
---
This application is a continuation of U.S. Pat. No. 8 631 024 filed Dec. 29 2009 titled HIGH PERFORMANCE SCALABLE ADAPTIVE AND MULTI DIMENSIONAL EVENT REPOSITORY which is a Divisional of U.S. Pat. No. 7 664 784 filed on Jan. 11 2006 titled HIGH PERFORMANCE SCALABLE ADAPTIVE AND MULTI DIMENSIONAL EVENT REPOSITORY the contents of each are hereby incorporated in their entirety by reference.

Embodiments of the present disclosure are related to database systems. More particularly the present disclosure relates to event storage operable in and associated with a database.

In a computer system or in a network of computer systems a common mechanism for storing and sharing units of information data is through the utilization of a database. A database is a collection of information that has been organized to facilitate accessing managing and updating. Commonly implemented database types can include but are not limited to flat model network model distributed model and relational databases.

Many database types can be a combination of instance and data storage in which an instance may consist of a set of operating system processes and memory structures that interact with the storage. PMON process monitor and SMON system monitor are typical system processes. The memory structure is commonly called the SGA System Global Area which typically retains cache information including but not limited to user data data buffers and SQL structured query language . In addition to instance and data storage many databases may include redo logs. Redo logs retain transactional history e.g. an online redo log and can be archived into archive logs e.g. an off line redo log both of which are critical for the recovery of data.

Included in some database types is a database messaging system that enables propagating managing and sharing of data and units of information. The propagating managing and sharing can be within a database or from one database to another database. A unit of information also referred to as an event may be a database change or an application generated message. The messaging system or event notification system provides a unified framework for processing events. Events generated in applications in workflow or implicitly captured from redo logs or database triggers can be captured in a queue. These events can be consumed in a variety of ways. Events can be automatically applied with a user defined function or database table operation can be explicitly de queued or a notification can be sent to the consuming application. If the consuming application is located on another database then the messaging system automatically propagates the events to the appropriate database.

Publishers subscribers to the database can share these events through utilization of a messaging system. The publisher subscriber can control what events are put into the messaging system how the messaging system flows or is routed from database to database what happens to messages in the messaging system as the messages flow into each database and how the messaging system terminates.

Predicated upon publisher subscriber specifications a messaging system may capture stage and manage messages in the database automatically including but not limited to data manipulation language DML changes and data definition language DDL changes. A publisher subscriber can also enter user defined messages in the messaging system and the messaging system can propagate the messages to other databases or applications automatically. When messages reach a destination database the messaging system can consume them based on publisher subscriber specifications.

In such a publish subscribe environment there is a constant inflow of published events which are then consumed by the subscribers. These events may be transformed into other events depending upon the subscriber s expressed intent. The lifetime of an event may be described as event creation event consumption and optionally event transformation. The shape and size of the events are dependent upon the data that is flowing through the messaging system.

Database changes are logged persistently to redo log files. It is noted that in many databases the redo log can be quite substantial in size and volume. These redo log files are continually mined to extract new changes construct a corresponding event for the change and then publish the event in a database queue for interested subscribers. Additionally the number or volume of events in the redo log from which the messaging system retrieves an event may cause the messaging system to utilize substantial system resources in the publication and consumption of these events.

In a high performance environment in which a messaging system is implemented the critical stages of event processing e.g. creation consumption and optionally transformation need to be optimal. In particular when event throughput is varied and high volume thousands of events per second the critical stages of event processing can consume substantial system resources including but not limited to processor usage memory usage and bandwidth. Further in a high performance environment that deals with thousands of events per second the creation transformation and consumption of events can be a significant portion of the lifetime of the event. Specifically creation and marshaling e.g. transformation may cause the bulk of the event processing time. These critical stages can adversely affect the scalability of the messaging system.

Further events can be arbitrarily complex and they can be nested such that an event may be comprised of sub events within sub events within the event e.g. having a hierarchical form. An event can also have a subdivided form including sub events that can include a collection of sub events taking a large hierarchical form. During an event creation process the messaging system examines the entire structure of the event creates the event each time a value is to be set for that event and performs a memory allocation for that event. During an event destroy process the messaging system has to examine the entire memory allocation for that event.

When there is a constant allocation and de allocation of small pieces of RAM it can lead to memory fragmentation. This may prevent the database messaging system from allocating contiguous blocks of RAM. Memory fragmentation can cause but is not limited to elevated central processing unit CPU usage and increased retrieval time leading to higher latency in marshaling events. This can cause a chain reaction in other modules and introduce significant latencies into the entire event processing framework.

Thus many current databases and associated messaging systems may not provide an efficient mechanism for event storage and or retrieval of the events. Accordingly there exists a need for a high performance scalable adaptable multi dimensional event repository for utilization in conjunction with a database messaging system s storing and retrieving of events.

Accordingly embodiments of the present disclosure are drawn to providing a method and system employing a high performance scalable adaptable multi dimensional event repository. In one example the event repository stores events that have expired and or have been destroyed by the event notification architecture. Rather than being destroyed these events are kept in the event repository. The events are then available for use in efficiently generating new events of like kind. Embodiments of the present disclosure further provide for scalability of the event repository in response to the volume of events and system traffic. Embodiments of the present disclosure also provide for adaptability of the event repository in response to various types of events. Embodiments of the present disclosure additionally provide multi dimensionality in response to the differing shapes and sizes of various events.

In an embodiment of the present disclosure a method for publishing an event in a database is described. The present method includes transparently intercepting a request to a database to publish an event. The request is intercepted by a messaging system operable with the database. The present method further includes examining an event repository for a template of the event. The event repository is operable with the database and the messaging system. The present method additionally includes retrieving a matching event template from the event repository. The present method additionally includes retrieving the event template from the event repository. The present method also includes marshaling the event template to create the event. The present method also includes publishing the event in an event queue.

It is appreciated that the event repository becomes populated with events as they are destroyed from the event notification infrastructure of the database.

In another embodiment of the present disclosure a method for utilizing an event repository is described. The present method includes receiving an indication that all subscribers of a database expressing an interest in the event have consumed the event. The present method further includes removing the event from an event queue in response to receiving the indication. The present method also includes placing the event in an event repository upon removing the event from the event queue. The event is placed in the event repository to facilitate publication of a subsequent request similar to the event.

As described further below the event repository is adaptive scalable multidimensional and high performance.

Advantages of embodiments of the present disclosure as will be shown below may include but is not limited to an event repository which provides a more rapid creation and publication of an event by virtue of the database retrieving the event from an event repository compared to normal event creation. Another advantage is that by virtue of the event repository enabled to logically organize events e.g. by type shape and or duration similar types of events are more readily retrieved. Yet another advantage is that the volume of events that are stored can be autonomously adapted depending upon the load of the system in which embodiments of the present disclosure are implemented. Still another advantage is that the event repository can automatically remove those events experiencing minimal requests for publishing and or remove those events receiving fewer requests during periods of high volume event throughput. Another advantage is that the event repository can reduce processor usage memory usage and bandwidth usage consumed by the database during high volume throughput. An additional advantage is that by virtue of storing an event in and retrieving an event from an event repository fragmentation and wasted memory are reduced thereby increasing the available space for additional usage.

Embodiments for a high performance scalable adaptive multi dimensional event repository are described. Reference will now be made in detail to the preferred embodiments of the present disclosure examples of which are illustrated in the accompanying drawings. While the disclosure will be described in conjunction with the preferred embodiments it will be understood that they are not intended to limit the disclosure to these embodiments. On the contrary the disclosure is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the disclosure as defined by the appended claims. Furthermore in the following detailed description of the present disclosure numerous specific details are set forth in order to provide a thorough understanding of the present disclosure.

Embodiments of the present disclosure are discussed primarily in the context of a database application having a messaging or event notification system operable therewith. However it is noted that embodiments of the present disclosure can be utilized by other software applications having database like functionalities that may be configured to utilize a messaging system including but not limited to a database application.

Still referring to shown in client computer system is a database shown in client computer system is a database and shown in server computer system is a database in an embodiment of the present disclosure. In accordance with embodiments of the present disclosure database may be different from database and database and database may be different from database . It is noted that in another embodiment of the present disclosure databases and may be analogous. In an alternative embodiment server computer system may have a database or and client computer systems and may not include a database or such that client computer systems or may access a database remotely.

In an embodiment of the present disclosure database of client system may be a source database e.g. the database where changes are generated and database of client computer system may be a destination database the database where events are consumed. Further database of server computer system may be an intermediate database through which events being propagated are routed from the source database to the destination database . Alternatively database in server computer system may be the source database and databases and of client computer systems and respectively may both be destination databases. In yet another scenario database of server computer system may be a source database database of client computer system may be an intermediate database and database of client computer system may be a destination database. It is noted that depending on the flow of data each database and can be a source database an intermediate database and or a source database. It is also noted that each database and can be both a source database and a destination database.

Computer system of also includes a data storage device coupled with bus for storing information and instructions e.g. database or . Data storage device can be for example an HDD hard disk drive an FDD floppy disk drive a compact memory device a CD RW compact disk with write functionality a DVD RW or DVD RW digital versatile disk with or write functionality a dual layer DVD a tape drive etc. and furthermore device can be in multiples or in a combination thereof. Data storage device may also be plurally instanced removable and or hot swappable connected or unconnected while computer system is powered .

With reference still to computer system also includes a network communication device which is coupled to bus for providing a communication link between computer system and a network environment e.g. network environment of . As such network communication device enables central processor unit to communicate with other electronic systems coupled to the network e.g. network of . It should be appreciated that the present embodiment of network communication device is well suited to be implemented in a wide variety of ways. In one example network communication device is coupled to an antenna and provides the functionality to transmit and receive information over a wireless communication interface e.g. Bluetooth IR infra red RF radio frequency satellite and the like. In another example network communication device could be implemented as a modem wired or wireless. In yet another example network communication device could be configured as a NIC network interface card wired or wireless.

Still referring to network communication device in an embodiment includes an optional digital signal processor DSP for processing data to be transmitted or data that are received via network communication device . Alternatively processor can perform some or all of the functions performed by DSP .

Also included in computer system of is an optional alphanumeric input device . In an implementation device is a keyboard. Device can be physically coupled to computer system . Alternatively device may be wirelessly coupled to computer system . Alphanumeric input device can communicate information and command selections to processor .

Computer system of also includes an optional cursor control or directing device on screen cursor control coupled to bus for communicating user input information and command selections to processor . In another common implementation on screen cursor control device is a mouse or similar pointing device.

Computer system also contains a display device coupled to the bus for displaying information to the computer user.

Still referring to shown coupled to bus are a messaging system and a queuing mechanism . Messaging system looks at changes to data accumulating in redo files located in a redo log redo log of and and or redo log of examines the redo files and publishes the database changes as events in a queue queue of and and or queue of . In accordance with embodiments of the present disclosure it is noted that messaging system is enabled to logically organize event templates within event repository as described in according to or in a combination of and which is not limited to event type event shape and event duration. Logically organizing the event templates enables messaging system to but is not limited to rapidly retrieve events of similar type shape and or duration. Messaging system is also enabled to intercept requests to publish an event in accordance with embodiments of the present disclosure. Additionally messaging system can determine the optimal location in event repository where an event template is to be stored. For example stock quotes events would be stored with other stock quotes event templates football results events would be stored with other football results event templates commodity futures events would be stored with other commodity futures event templates and so on as shown in . Alternatively events having a particular duration e.g. one week may be stored with other events having analogous durations or events having a particular shape may be stored with other events having analogous shapes and so on.

In an embodiment of the present disclosure Oracle Streams by Oracle International Corporation of Redwood City Calif. USA may be used as messaging system . It is noted that embodiments of the present disclosure are well suited to be implemented in conjunction with other messaging systems including but not limited to Oracle Streams.

Queuing mechanism commonly but not always a product separate from the database and or the messaging system allows for publishing and subscribing of an event. The queuing mechanism further allows different users to publish different events to a queue and subscribers can express their interest in those events. In an embodiment of the present disclosure a queuing mechanism may be but is not limited to Oracle Streams Advanced Queuing by Oracle International Corporation of Redwood City Calif. USA. It is noted that embodiments of the present disclosure are well suited for implementation in conjunction with other queuing mechanisms including but not limited to Oracle Streams Advanced Queuing.

Referring collectively to and shown are functionalities provided by and processes performed in conjunction with embodiments of the present disclosure. With reference to shown is a client computer system analogous to client computer system of . Coupled to client computer system is a database . It is noted that database may reside within client computer system . In an alternative embodiment database may be externally disposed and coupled to client computer system . Upon activating a database e.g. database messaging system operable in conjunction with database allocates a portion of RAM volatile memory of in client computer system for utilization as an event repository e.g. event repository of and in an embodiment of the present disclosure.

In accordance with embodiments of the present disclosure for each database that is activated an associated event repository is locally created by messaging system and is operable in conjunction with the local database . In an embodiment of the present disclosure event repository can be located entirely within volatile memory of client computer system in which database is operable. Alternatively event repository may be combinationally disposed in volatile memory of client computer system and in a file swap function utilization of hard disk space as RAM not shown provided by the operating system in client computer system . When utilized in a file swap function event repository may be disposed in part in a data storage device e.g. data storage device in addition to volatile memory RAM of client computer system in an embodiment of the present disclosure.

In an embodiment of the present disclosure event repository is configured to store therewithin one or more event templates in which each event template may or may not represent a different event. An event template is a template of an event which enables messaging system to reconstruct the event. An event may be reconstructed from the associated event template when all subscribers that expressed an interest in that particular event have consumed the event and the event is therefore removed from an event queue and placed in an event repository in accordance with embodiments of the present disclosure. In other words once an event has run its course in the messaging system rather than being destroyed it is deposited into the event repository where its use as a template for other events is used to make event publication more efficient.

In an embodiment of the present disclosure event repository retains each event template as an event structure. An event structure contains necessary information regarding the event so that messaging system can reconstruct the event in accordance with a publisher s criteria relative to that event. An event structure can include but is not limited to type of event shape of the event size of the event and duration of the event. Examples of types of events include but is not limited to stock price quotes events commodities price events airline schedules events sports scores events and or standing events fuel prices events and so on. It is noted that nearly anything that can have a value can be a type of event. The shape of the event can be simple or complex e.g. one event simple or multiple sub events within sub events within the event complex . Size of the event can include but is not limited to e.g. in a stock quote the stock symbol four digits current price six digits previous high and or low six digits and so on. Accordingly the size of a stock quote event that includes ticker symbol current price previous high and previous low could have a size of twenty two bits. Using a stock price the duration may be for five minutes ten minutes or any period of time depending upon a publishers and or subscribers desires. Sports scores e.g. football scores and standings events may have a one week duration. Airline schedules events may have a three month duration. It is noted that any event can be of any type can have any shape can have any size and can have any duration. The event structure is predicated upon the publisher s intent and the subscriber s desire relative to the publisher s intent.

An event can be an explicit event in which a publisher subscriber can place messages and or events into a queue e.g. queue . The same publisher subscriber can perform work on the message or event from the local database e.g. database or across multiple databases e.g. database and or database . An explicit event can also be utilized for information integration where it is desired to have one database communicate with another differing database. Additionally an explicit event can allow a publisher subscriber to perform work on a message or an event in which other associated parties are not required to be active at the time the publisher subscriber is performing their work.

An event can also be an implicit event in which a publisher subscribe performs a modification of data e.g. an update or a database table operation. In an embodiment of the present disclosure messaging system can capture the modification transform the modification into an event and place the transformed modification into a queue.

For example a request to publish a new event e.g. event is received by database operable in client computer system via a communicative coupling e.g. communication line and or via bus . It is noted that the request to publish event may be generated local to database or remote to database . In the present example event is a stock quote event for Oracle International Corporation that contains the ticker symbol ORCL the current price the previous high and the previous low stock price.

In accordance with embodiments of the present disclosure when a request to publish a new event e.g. event is received by database messaging system intercepts the request and examines event repository for a match with a stored event therein. When a match to event is found in event repository messaging system reconstructs the new event from the matching event in event repository . By using an existing template e.g. event template rather that creating the new event from scratch the event generation process is made much faster.

Continuing upon messaging system reconstructing event from the matching event stored in event repository the publisher who requested the publishing of a new event similar to event is then able to marshal the event such that pertinent values for the new event are updated. Subsequent to marshaling the event e.g. event is then placed in event queue of database .

When no match is found for event the event is created afresh in memory e.g. RAM . It is noted that data and or events may be changed or formatted by a predetermined set of rules before an event is packaged into a logical change record LCR . Event now packaged into an LCR is then placed in a queue e.g. queue in accordance with embodiments of the present disclosure. LCR s e.g. event is are stored in queue until a subscriber expressing interest in event obtains event for use by or to be consumed by the subscriber. It is noted that when a subscriber of database that expressed interest in event consumes event event remains in queue until all subscribers expressing an interest in event have consumed event .

In accordance with embodiments of the present disclosure a subscriber can be but is not limited to a user another staging environment an application process an apply process in which the subscriber can subscribe to any or all events. Regarding an apply process an apply process de queues all those events coming into the queue removing it from the queue. An apply process is commonly but not always utilized for database changes. However an apply process can also be used to handle other messages as well.

The subscriber user can also utilize rules to define those events that are desired and those events that are not desired. Additionally a subscriber user may be locally coupled to the database or a subscriber user may be remotely coupled to the database enabling remote access to the database. In addition a queuing mechanism e.g. queuing mechanism operable in conjunction with database allows communication to be asynchronous meaning that it is not necessary for the other database to be running when attempting to communicate. Further a subscriber user can consume the event from another queue located in an alternative database. In many instances messaging system can propagate the message event to whichever database the subscriber user is located.

In accordance with embodiments of the present disclosure a publisher can be but is not limited to an application process or a user.

Currently events are classified as an explicit event or an implicit event. An explicit event is where an end user publisher subscriber can place messages and events into a queue. The same publisher subscriber end user can do work across databases. Explicit events are used for information integration where it is desired to have one application in communication with another application. An implicit event is where an event is captured by changes made to a database. The end user is not en queuing some data into the queue the end user is actually modifying data e.g. a data update or a database table operation. Implicit events are implicitly captured transformed into an event and put into the queue.

Within events there are currently two messaging types persistent and non persistent messaging. In persistent messaging when a user places an event in a persistent queue it is persistent saved in a non volatile manner on the disk. In this manner even when the event is placed into the queue the event will not be lost upon a network system or database crash. Persistent messaging is utilized for but not limited to critical data for data that is not easily retrieved because there may not be anyway to reconstruct the events into the queue and for explicit events. In non persistent messaging the events are stored in a non persistent queue that may be located in volatile memory e.g. RAM such that in the event of a crash the event is lost. Database changes are written to a redo log file. Because the redo log is persistent when a network computer or database crashes the event is recoverable from another source of persistency and the lost event is re en queued into the queue. Non persistent messaging is commonly utilized for but is not limited to non critical data easily retrieved events and implicit events. It is noted that explicit events may be placed in a non persistent message and implicit messages may be placed in a persistent message.

Subsequent to event being formatted and placed into queue messaging system and or queuing mechanism propagates event to all subscribers expressing interest in a stock quote event e.g. event . Event may be propagated via bus via communication connection or a combination thereof. Messaging system is enabled to dictate the manner in which event is propagated and to whom subscribers event is to be propagated in an embodiment of the present disclosure. A publisher associated with database marshals event e.g. applies changes to event . Subsequently messaging system or queuing mechanism or a combination thereof then readies event for propagation to all the subscribers of the database that have expressed an interest in the event e.g. event .

Continuing and with reference to database of computer system has initiated messaging system operable therein to propagate event to all the subscribers who have expressed interest in event . In this implementation client computer system which has operable therein database is the destination database and to which a plurality of subscribers have expressed an interest in event .

In accordance with embodiments of the present disclosure event having been propagated to database from database is then copied by messaging system of database and placed in queue of client computer system shown as event . In an embodiment of the present disclosure messaging system causes propagation of event to those subscribers of database expressing an interest in event . Alternatively queuing mechanism similar to queuing mechanism as described in propagates the event to subscribers of database having expressed an interest in event . As such event is placed in a queue of database for such propagation.

Subsequent to event being queued all the subscribers of database that expressed an interest in event are then able to consume the event in a manner dictated by the subscriber. When a subscriber of database consumes event the event is de queued for that subscriber. It is particularly noted that all remaining subscribers having expressed an interest in event but have yet to consume the event are still able to access event in queue . It is also particularly noted that until all the subscribers that expressed an interest in event have consumed event or if the duration of event has yet to expire event remains in queue of database of client computer system . In accordance with embodiments of the present disclosure it is noted that event also remains in queue of database .

Referring still to upon all subscribers to database that expressed an interest in event having consumed event event is de queued from queue . Alternatively if event has expired in accordance with its duration event is set to expired status in queue . Event is removed from queue and a template of event is placed in event repository shown as event template in accordance with embodiments of the present disclosure. Once messaging system has determined that all subscribers to database that expressed an interest in event have consumed event or event has expired messaging system operable in conjunction with database messages database indicating that all subscribers to event have consumed event shown as event consumption confirmation . In accordance with embodiments of the present disclosure upon receipt of confirmation messaging system places a template of event shown as event template in event repository . Once the messaging system has placed event template in event repository messaging system operable in conjunction with database messages messaging system operable in conjunction with database of computer system indicating that all subscribers to database expressing an interest in event have consumed event shown as event consumption confirmation message of in accordance with embodiments of the present disclosure.

Referring to upon receiving an event consumption confirmation message e.g. message from those databases coupled to database and or from those subscribers expressing an interest in event or event has expired messaging system operable in conjunction with database de queues event from queue in accordance with embodiments of the present disclosure. Instead of destroying event messaging system creates a template of event shown as event template analogous to event template of in accordance with embodiments of the present disclosure.

In accordance with embodiments of the present disclosure when a re request to publish event messaging system operable in conjunction with database intercepts the request and examines event repository for the template associated with event e.g. event template . If the template associated with event is located in event repository messaging system reconstructs event from its associated template e.g. event template reconstructs the event the publisher of the event marshals the event messaging system in conjunction with queuing mechanism propagates the newly re requested to publish event to all subscribers to database that expressed an interest in event .

Alternatively if the template associated with event e.g. event template is not found in event repository messaging system causes database to create event .

It is particularly noted that an event that is reconstructed via the messaging system and event repository consumes substantially less time and fewer system resources than it takes for an event to be created in response to a request to publish an event.

It is particularly noted that the number of templates of events that may be stored in an event repository e.g. event repository may increase or decrease dependent upon in part and is not limited to event throughput number of subscribers number of publishers and so on. An objective of the present disclosure is to provide an event repository with which rapid publication of an event can be achieved regardless of the number of events or associated templates stored within an event repository. In accordance with embodiments of the present disclosure an indexing mechanism not shown operable with messaging system has been configured to provide a constant event creation when requested by messaging system and a constant event destroy requested by messaging system when all subscribers expressing an interest in an event have consumed the event.

It is particularly noted that threshold level may be increased or decreased in accordance with system requirements and event traffic throughput and as such event repository is scalable. Thus when an alternative application or other computing entity requires system RAM of which some may be utilized for allocation for event repository embodiments of the present disclosure provide a mechanism for adjusting threshold level when RAM used in the allocation of an event repository is required for alternative purposes. Therefore in accordance with embodiments of the present disclosure an application programming interface API can be invoked called to perform the adjustment of the threshold level . In an embodiment the API can calculate for a period of time e.g. five minutes fifteen minutes etc. the traffic for various types of events in which the events may have differing dimensions. The API can determine how many requests for this event and how many requests for that type of event and the API can cause an event destroy for those events less requested and can ensure readily retrievable events for those events that receive elevated numbers of requests for publication. It is noted that various well known techniques can be utilized to invoke the API. Alternatively other mechanisms providing similar functionality may be employed as an alternative to an API.

Shown within event repository are examples of event repository types in which are stored corresponding event templates. In an embodiment of the present disclosure types of events can be grouped using criteria. Examples of criteria for grouping types of events may include its shape type of data which may include but is not limited to a string number s or data. Criteria related to size of the event and related to the duration of an event may also be utilized in determining the grouping of the event. Events within the event repository may be stored predicated on the criteria type of data size and duration. Alternatively other criteria may be implemented for grouping of events with an event repository. In an embodiment an event may be hashed to provide a matching reference from which a subsequent event may be reconstructed.

Within each event repository type shown in there are disposed one or more associated event templates. In stock price event repository shown are event templates for a stock price for Oracle Acme and WMHP. Weather event repository includes event templates for Redwood City San Jose and Capitola. Metals price event repository includes event templates for Copper Silver and Gold. Commodities price event repository includes event templates for Cotton Frozen Concentrate Orange Juice and Coffee. Bay area gas price event repository includes event templates for North Bay Area and South Bay Area. Football standings event repository includes event templates for AFC East NFC West and NFC Central. It is noted that event repository may contain a greater number of event repository types or a fewer number of event repository types. It is noted that each event repository type may contain more event templates or fewer event templates. It is further noted that the event repository types and event templates shown in are exemplary in nature and should not to be construed as a limitation.

Shown in stock price event repository is an event template for the stock price of Oracle International Corporation an event template for stock price of Acme Manufacturing and an event template for the stock price of WMHP. It is noted that stock price event repository may contain tens hundreds thousands or tens of thousands stock price events for each company that may be listed on a stock exchange e.g. The New York Stock Exchange The American Stock Exchange NASDAQ or any other stock exchange.

In accordance with embodiments of the present disclosure messaging system operable with database to which event repository is associated may adjust the volume of event templates in each event repository type. For example assume that database has thousands of subscribers who have expressed an interest in the stock quote for Oracle e.g. event template . Further assume that database has hundreds of subscribers that have expressed an interest in a stock quote for ACME manufacturing e.g. event template . Additionally assume that tens of subscribers have expressed an interest in a stock quote for WHMP event template . In an embodiment of the present disclosure messaging system is able to remove from stock price event repository or other stock price event repositories those stock price event templates that are requested less frequently that other stock price event templates. In this example event template WMHP has been requested less frequently that event template or . In accordance with embodiments of the present disclosure messaging system may remove event template WHMP from stock price event repository . It is noted that messaging system may increase or decrease the volume of event templates in any event repository type in accordance with available allocated RAM and with system requirements of the computer system in which database is operable e.g. computer system . Messaging system may also adjust the volume of event templates in accordance with constraints pertaining to and the associated transactional traffic of a database e.g. database .

In accordance with embodiments of the present disclosure messaging system is further enabled to remove an event repository type when messaging system determines that a particular event repository type when the event templates stored therein are requested less frequently than other event templates in other event repository types. For example assume that tens of thousands of subscribers have expressed an interest in various daily stock prices e.g. those event templates within stock price event repository e.g. event templates and . Further assume that a few hundred subscribers have expressed interest in a weekly football standings event e.g. those event templates within football standings event repository . In accordance with embodiments of the present disclosure when the volume of event repository types stored in event repository reaches threshold messaging system may remove football standings event repository . Alternatively messaging system may remove particular event templates that are requested less frequently that other event templates e.g. removing event template when requests for NFC Central standings event template are less frequent that other event templates e.g. event templates and .

Thus as described above embodiments of the present disclosure provide for a multi dimensional event repository in which various events having different dimensions e.g. type shape size or duration may be stored in a logical manner. For example and as described above like events such as stock price quotes football scores and the like may be stored together. Additionally events of a similar shape or size e.g. football scores baseball scores hockey scores etc. may be stored together in an event repository. Further events of a similar duration may also be stored together e.g. events with a duration of minutes stored with other events with a duration of minutes events with a duration of days stored with other events with a duration of days and so on. Accordingly embodiments of the present disclosure provide an event repository in which events having differing dimensions can be logically stored expediting publishing of an event.

It is noted that as messaging system removes event repository types and or event templates the space within event repository consumed by the removed repository types or event templates is returned to available space within the allocated portion of RAM in which event repository is disposed.

Additionally the messaging system may also adjust the number of event templates in event repository without regard for event repository type.

In operation of process a request to a database to publish an event e.g. database and event of database and event of respectively is intercepted by a messaging system e.g. messaging system operable in conjunction with the database to whom the request is intended in an embodiment of the present disclosure. It is noted that the request can come from a publisher local or remote to database .

In operation of process messaging system examines an event repository e.g. event repository of to determine if an event matching the requested to publish event e.g. event template is present in event repository as shown in and or in accordance with embodiments of the present disclosure.

In operation of process if an event that matches event e.g. event template is not found in event repository the process proceeds to operation . If an event that matches event is found in event repository process proceeds to operation .

In operation of process when no match for event e.g. event template is found within event repository embodiments of the present disclosure provide for conventionally creating a template of event in accordance with functionality within database as described in . Subsequent to completion of operation process proceeds to operation in accordance with embodiments of the present disclosure.

In operation of process if the associated template for the request event e.g. event template is found in event repository messaging system retrieves and uses the associated template e.g. event template from event repository shown in and or as a template for rapidly creating the requested event e.g. event .

In operation of process the event that was associated with the located event template e.g. event is reconstructed from that template and in accordance with criteria dictated by the publisher has pertinent values associated therewith the new event updated e.g. marshaling. In an embodiment of the present disclosure the publisher requesting to publish event marshals event .

In operation of process subsequent to a publisher performing the marshaling of event e.g. updating pertinent values event is published to event queue as shown in in accordance with embodiments of the present disclosure. Once an event e.g. event is published to a queue e.g. event queue event can be propagated from queue to all the subscribers of database that expressed an interest in event . It is noted that event may also be propagated to additional databases e.g. database when subscribers to those additional databases e.g. have expressed an interest in event as shown in .

In operation of process upon a database e.g. database or database receiving an indication e.g. event consumption confirmation and respectively that all subscribers expressing an interest in a particular event e.g. event have consumed event event is removed de queued from the event queue event queue in which event was stored as shown in in accordance with embodiments of the present disclosure.

In operation of process upon removing event from event queue a template of the particular event e.g. event template is then placed in an event repository e.g. event repository in an embodiment of the present disclosure. In an embodiment of the present disclosure and as shown in event template may be placed in event repository based on event type. In another embodiment event template may be placed in event repository based on event shape. In still another embodiment event template may be placed in event repository based on duration. In yet another embodiment event template may be placed in event repository based on event type and event shape. In an additional embodiment event template may be placed in event repository based on a combination of event type event shape and event duration.

In operation of process when particular events in event repository are less frequently requested than other events and or when the number of requests for a particular event is are below a threshold minimum and or the volume of event templates stored therein exceed a maximum threshold embodiments of the present disclosure provide removing those events from the event repository. In an embodiment an event template may be removed from an event repository based on the event associated with the event template receiving fewer requests to publish compared to other events as described in . In another embodiment an event template may be removed from an event repository based on requests for that event falling below a minimum threshold number of requests also described in .

Thus embodiments of the present disclosure are drawn to providing a method for a high performance scalable adaptable multi dimensional event repository. Further by virtue of the event repository enabled to retain events in a logical manner retrieval of those events in the event repository consumes less time and fewer system resources when compared to creating a new analogous event. Additionally the event repository is enabled to adjust the volume of events stored therein such that system performance is not compromised.

The foregoing descriptions of specific embodiments of the present disclosure have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the disclosure to the precise forms disclosed and many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the disclosure and its practical application to thereby enable others skilled in the art to best utilize the disclosure and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the disclosure be defined by the Claims appended hereto and their equivalents.

For the Examiner s convenience Applicants note that this application is a continuation of U.S. application Ser. No. 12 649 209 and U.S. Pat. No. 7 664 784. The claims of the present application are different and possibly at least in some aspects broader in scope than the claims pursued in the parent applications. To the extent any prior amendments or characterizations of the scope of any claim or cited document made during prosecution of the parent could be construed as a disclaimer of any subject matter supported by the present disclosure Applicants hereby rescind and retract such disclaimer. Accordingly the references previously presented in the parent applications may need to be revisited.

