---

title: Method and computer program product for allowing a software application to interact with a product
abstract: The functionality of a networked physical product is defined as an abstraction, or a virtual product, in such a way that the product functionality can be interpreted and managed by a business enterprise system. A software application and data model spans isolated databases to store and maintain the functional data and contextual information of a networked physical product and the associated business data needed to manage the product. The functional and contextual data is managed by a purpose-built and optimized heterogeneous database environment, and the associated business data is managed separately in another purpose-built and optimized database environment. An electronic template, similar to a bill of materials, describes the functional and interactive elements of a networked virtual product that represents the networked physical products as they are created. A business enterprise system links business management software to the data and information generated by the networked product.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075840&OS=09075840&RS=09075840
owner: Intuitive Control Systems, LLC
number: 09075840
owner_city: State College
owner_country: US
publication_date: 20141027
---
Portions of the documentation in this patent document contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but otherwise reserves all copyright rights whatsoever.

This invention generally relates to the design creation use and management of networked products physical devices and sensors heterogeneous data and information derived from the devices and associated computer applications and systems for effective human or machine interactions decision making and business purposes.

Intelligent device networking sometimes referred to as the Internet of Things is a rapidly evolving technological revolution. Intelligent device networking refers to physical devices products and sensors with varying levels of digital intelligence that can be connected to networks of varying scale from a local area network to the Internet. Millions of such physical intelligent devices are connected to the Internet with billions more anticipated as the Internet of Things evolves. The sheer volume of these types of devices and the huge amounts of data derived from the devices will require significant changes in current technological approaches to ensure that human users and computing systems can access integrate manage and use the devices and their data in real time.

The evolution of intelligent device networking requires connected product providers to reconsider and investigate new methods for designing connected products. A connected product retains either a continuous or an intermittent network connection to a server in a way that current stand alone and unconnected products do not. The server and associated infrastructure may be hosted directly by the provider or the provider may contract the infrastructure and services from a third party. The data collected from the product via this connection gives the provider extensive new opportunities to better understand how customers make use of the product and how the product is performing. The connection also lets the connected product provider manage or control the product to offer product data remote management and analysis as an additional service to customers or to design optional services and features into the product that can be initiated at any time requested. The networking of intelligent devices will lead to sharing of data and information among the devices and other web services new and unforeseen business models information services and applications and product features that producers of connected products will need to implement at the design stage.

Technology solutions for the Internet of Things tend to focus on the connectivity of the products via typical client server device management systems that usually store only the data and information that can be derived from and are specific to the connected product. These data can be made available to other separate computing applications and systems including business systems but normally by Application Programming Interfaces API s requiring significant complex custom software development. In many cases the custom software solutions are rigid lack robustness and are not portable between different systems and applications. Furthermore implementing this kind of custom software is expensive and time consuming. Linking disparate systems by API is problematic for many reasons. Changes in one area of the system do not automatically propagate to all other parts of the systems which can cause parts of the system to break when other areas are upgraded or modified. Some capabilities not inherently known by the business systems may require significant duplication of the system functionality which also leads to a much less robust and overly complicated system. This also leads to a duplication of the API calls as multiple areas of one system may call the same data from another system.

The value of intelligent networked devices is best realized by unifying the connected products management system and the data and information that the system provides with complementary information contained in the enterprise systems of entities that manufacture or use the connected products. Unification of these systems and data allows the manufacturer to manage monitor and control their connected products within the same enterprise system that they use to manage their customer orders inventory billings service and relationship information. Currently these disparate systems are not unified and are generally not interoperable. Intelligent networked devices require flexible and scalable databases and servers that can accommodate heterogeneous and highly unstructured data. On the other hand most enterprise systems are designed to provide rigid relational structure for the data and information that they manage. As a result current technology effectively places the unstructured data from networked devices in one silo and the structured data for an enterprise system in another separate silo. This silo effect slows and limits the resulting collective intelligence that can be obtained to drive innovation create new products and services and enhance the design and value of intelligent networked devices.

These are serious limitations of current systems for intelligent device networking. The emergence of intelligent device networking requires more flexible scalable and compatible data and information technologies and software applications that can be unified with enterprise system software applications so that innovative new business models can emerge and drive the evolving Internet of Things forward. The present invention fulfills such a need.

Methods software applications and systems for integrated intelligent device networking are disclosed that define the functionality of a networked physical product as an abstraction or a virtual product in such a way that the product functionality can be interpreted and managed by an enterprise system. The methods utilize a software application and data model that spans isolated databases to store and maintain the functional data and contextual information of a networked physical product and the associated business data needed to manage the product. The functional and contextual data can be managed by a purpose built and optimized heterogeneous database environment and the associated business data can be managed separately in another purpose built and optimized database environment. An electronic template similar to a bill of materials describes the functional and interactive elements of a networked virtual product that will represent the networked physical products as they are created. An enterprise software system can be included that links business management software to the data and information generated by the networked product. User interface and web application development tools can be included for access to and use of the networked product and business data.

Certain terminology is used herein for convenience only and is not to be taken as a limitation on the present invention.

This patent application includes an Appendix having a file named Appendix681672 8US.txt created on Oct. 2 2014 and having a size of 15 799 bytes. The Appendix is incorporated by reference into the present patent application. One preferred embodiment of the present invention is implemented via the source code in the Appendix. The Appendix is subject to the Copyright Notice and Authorization stated above.

The source code includes five code snippets. The functionality of the respective code snippets is summarized as follows 

Code1 is a portion of the code that uses the first attribute record as the basis to create the corresponding second attribute record.

Code2 is a portion of the code that uses the first template record as the basis to create the corresponding second template record.

Code4 is a portion of the code that uses a referenced template to determine the relevant attributes and property values to create and associated with a subsequently created virtual product.

Code5 is a portion of the code that identifies a corresponding property in a second database when a change to the value of a property is detected in a first database.

The present invention is described in the context of a software application that can interact with and control a physical product that is electronically connected to a network such as the Internet. The software application retains specific information that describes the networked product collects data and information from the networked product and stores and manages the data in a fashion that spans a pair of isolated databases. One database is purpose built to store and manage the data generated by the networked product while the other is purpose built to store and manage business management data associated with the networked product. The software application links the networked product data with the business management data and makes the data available to enterprise software systems that manage the networked product and to user interfaces displaying specific data generated by the networked product.

The interaction between the networked product and the software application is represented by and the interaction includes at least the following steps 

1. Provide a physical networked product capable of sensing and generating data relevant to the function of the product. The product connects electronically to a computer or server running the software application to receive commands from the software application and to send data to the software application. Conversely the product connects electronically to a computer or server running the software application to receive commands from the software application and to make changes to the software installed in the product thus causing changes to the function of the product.

2. The software application spans isolated databases and retains data and information specific to the business management of the networked product in a first or second database and data and information specific to the networked product in a first or second database.

3. The software application creates records in each database that share unique identifiers so that the business information associated with the networked product and the data collected by the networked product are synchronized and act as a single unified record spanning two purpose built databases.

4. The software application makes the product data and information available to other enterprise software system applications that need the data and information in order to manage a business function related to the networked product. The software application also provides the product data and information to other web applications and user interfaces for reporting analysis and monitoring of the networked product and its data.

Attributes associated with the template include but are not limited to the physical components and features that are functional parts of the product that are capable of interaction with the software application via an electronic connection. Examples of physical components include but are not limited to sensors printed circuit boards that contain a microprocessor actuators and the like. Examples of features include but are not limited to the ability to turn components on or off the ability to change the degree of performance of components services associated with the data generated by the product the ability of the product to respond in a defined way to certain conditions or events and the like. Some features have a time association that can define their status and their type of function based on the current date. The properties included in the template are used by both the software application and the software installed in the product for communication the exchange of commands and information and for control of the product and its attributes.

When a template is completed unique records for the template are created in each of database and database alternatively referred to herein as first database and second database respectively. Collectively the records include the attributes properties and unique identifiers and labels associated with that product family and its capabilities. For example the unique records created in database will include the attributes and properties needed for the business management of the product and the unique records created in database will include the attributes and properties needed to manage and control the product and the data that originates with the product. Included in each record is a unique identifier common between the pair of records. The software application uses the unique identifiers to synchronize or link the record in database and database so that the linked records act as if they are single record created in a single database. Linking the records in this fashion eliminates the silo effect common in intelligent device networking and minimizes the need for API programming to allow the two disparate databases to communicate and exchange data and information.

The physical product is connected to a server via a communications module that supports cellular transmission satellite Ethernet WiFi and other forms of electronic transmission. The software application retains data and information about the networked product that are data normally associated with the business function and use of the product in database . Such information may include but is not limited to the name of the product owner the features included with the product anticipated data transmission for the product etc. The software application also collects and stores data and information associated with the networked product in database . These data are typically outputs from sensors and other sensing components embedded in the networked product. The software application synchronizes or links the data stored in the databases and makes the product data available to the enterprise software system either by exposing data in a manner and organization that is consistent with typical enterprise software system applications or normalizing the device data so it is more easily consumed. The software application supports a user interface that is accessible from a Web browser or other application interface so that data from the networked product can be viewed reports can be generated or other applications requiring the data can be launched.

Enterprise software supports many processes and recording purposes in an organization. Among those most likely to interface with the software application is inventory or item management . These could be any software tool that stores or manages the inventory or catalog items .

The physical product has a corresponding virtual product which is an abstraction or digital representation within the software application of the product s current identity attributes and properties. The physical product includes a microprocessor or memory component which contains and or executes software installed in the product that imparts some functionality to the physical product. This product software contains properties that can be interpreted by the software as variables used by the product to perform its function. Those properties can be dynamic variable with names and values used to adjust settings or capabilities such as Temperature Monitoring Enabled Yes No as well properties with names and values that can log or accumulate data collected by the product such as Current Temperature temperature degrees F. .

The attributes includes two attribute records or that exist in a first and second database. In creating an attribute an attribute record is created in one of the databases and includes some properties or and default values or if any for those properties . The application will create Code1 the corresponding attribute record in the other database using a common value for the attribute label property or and some additional properties or and default values or if any for those properties. Some properties and their default values may exist in both databases and are synchronized or linked by the application by using the common value for the attribute label property or to identify the proper counterpart to update.

In a dashed line is used to delineate the portions of the Software Application that exist in database versus database .

The template includes two template records . . and some number of attributes that exist in a first . and second . database.

In creating a template a template record . or . is created in one of the databases and includes certain properties . or . and any default values . or . for those properties. The application will create Code2 a corresponding record in the other database using a common value for the template ID property . or . and some additional properties . or . and default values . or . if any for those properties.

A sense of functionality is assigned to each template by associating one or more attributes with the template Screen . The attribute record . or . in both databases has a property value for the template ID . or . that associates it with the template to which it belongs.

The virtual product Screen includes two virtual product records . . and some number of virtual product attributes that exist in a first . and second . database. In creating a virtual product an appropriate source template is referenced thereby allowing the following 

A virtual product record . . is created Code4 in one of the databases and inherits certain properties . or . including any default values . or . from the referenced template . The application will create a corresponding record in the other database using a common value for the virtual product record ID property . and . and some additional properties . or . and default values . or . if any for those properties 

A sense of functionality is applied to each virtual product by reproducing the referenced template s attributes as the resulting virtual product s virtual product attributes . A virtual product attribute record . or . is created in one of the databases for each attribute from the template . Each virtual product attribute record . or . inherits properties . or . including any default values . or . from the corresponding template . The application may create corresponding virtual product attribute records in the other database using a common value for the attribute label property . or . .

The virtual product attribute record . or . in both databases has a property value . or . that references the virtual product to which it belongs in the event the common attribute label is not unique across the database.

When a change is detected in the value of a synchronized property such as the attribute value . or . of a virtual product attribute in one of the databases the software application will update the corresponding property in the other database. If the value of the attribute label . or . common between both portions of the virtual product attribute record . or . is unique across each corresponding database . or . then the software application can directly identify a matching attribute label . or . and update its corresponding value . or . .

If the value of the attribute label . or . common between both virtual product attribute records . or . is not unique across each corresponding database . or . but is unique within each virtual product then the software application can identify the corresponding virtual product using a value for the virtual product record ID . or . that matches the virtual product attribute s . or . virtual product record ID value . and . then identifying the portion of the virtual product attribute in the other database . or . that shares the same value for the virtual product record ID and attribute label value . or . then updating that attribute s corresponding attribute value . or . .

1. Between enterprise software system and software application . From the inventory or catalog items within the inventory or catalog application within the enterprise software system the information can pass between a corresponding attribute in the software application . This relationship between inventory or catalog item and attribute is a one to one relationship allowing the software application to share information with the enterprise software system .

2. Within the software application . From the attributes on the template within the software application information can pass between the virtual product attributes on the virtual product that referenced the template at the time the virtual product was created. This relationship between attribute and virtual product attribute is one to many relationship allowing the attributes to serve as a concentration and distribution point for information from or to any number of individual virtual products attributes .

3. Between software application and physical product . Information flows between the virtual product attributes on the virtual product within the software application and a corresponding product property within the software within the physical product . This relationship between virtual product attribute and product property is a one to one relationship allowing the software application to interact with the physical product . The effect of the interface is independent of the transport path method or technology used.

An important consequence of the information flow and the updates of property values in the present invention is the ability of the software application to define conditions or rules that are based on property values and to respond to those conditions or rules by automatically providing notifications to users of the product initiating responses or workflows in the databases or changing the state or performance of the product. Since the software application spans both databases changes in property values that violate the conditions or rules set by the software application can be detected and recorded in one database thereby prompting a type of response appropriate for that database. Simultaneously the software application can create a new record in the other database indicating a violation of the conditions that can be detected and used to initiate a response appropriate for that database.

The various entities in the figures e.g. physical product software application web browser enterprise software system may communicate with one another via any appropriate wired or wireless electronic communication medium.

1. Assume the connected physical product is a piece of rental equipment or a physical attachment to the equipment that permits its operation.

2. Assume the business record or process is a Sales Document that reflects payment for the use of the product.

In the case of information originating from the enterprise software the disclosed method provides a communication path for existing business processes that utilize the traditional inventory or catalog items transforming those items into a functional representation of the capabilities of the resulting virtual product then further transforming those items into the properties that can be interpreted by the physical product s software as software variables thereby allowing standard business processes access to the functional behavior of connected products.

1. Assume a customer wants to use a piece of rental equipment they have on site at their facility. The rental terms were pre negotiated and would be pay per use but the payment would have to be executed before each use.

In the case of information originating from the physical product this method provides a communication path that organizes and accumulates the data not only by the devices but also by the inventory and catalog items that comprise the device providing consistency with conventional product design or configuration frameworks including bills of material.

1. Assume a customer wants to use a piece of rental equipment they have on site at their facility. The rental terms were pre negotiated and would be pay per use with the use being unpredictable but high priority when it occurred.

The present invention may be implemented with any combination of hardware and software. If implemented as a computer implemented apparatus the present invention is implemented using means for performing all of the steps and functions described above.

When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

The present invention can also be included in an article of manufacture e.g. one or more tangible computer program products having for instance non transitory computer readable storage media. The storage media has computer readable program code stored therein that is encoded with instructions for execution by a processor for providing and facilitating the mechanisms of the present invention. The article of manufacture can be included as part of a computer system or sold separately.

The storage media can be any known media such as computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other tangible computer storage medium. The storage media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The computer s used herein may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer.

Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable mobile or fixed electronic device.

The computer s may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

The various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. The computer program need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or distributed as desired in various embodiments.

Data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Preferred embodiments of the present invention may be implemented as methods of which examples have been provided. The acts performed as part of the methods may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though such acts are shown as being sequentially performed in illustrative embodiments.

