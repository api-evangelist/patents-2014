---

title: Event recognition
abstract: A method executes software including a view hierarchy with a plurality of views which displays one or more views of the view hierarchy. The method executes software elements associated with a particular view, wherein each particular view includes event recognizers. Each event recognizer has an event definition based on sub-events, and an event handler that specifies an action for a target, and is configured to send the action to the target in response to an event recognition. The method detects a sequence of sub-events, and identifies one of the views of the view hierarchy as a hit view that establishes which views in the hierarchy are actively involved views. The method delivers a respective sub-event to event recognizers for each actively involved view, wherein each event recognizer for actively involved views in the view hierarchy processes the respective sub-event prior to processing a next sub-event in the sequence of sub-events.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09285908&OS=09285908&RS=09285908
owner: APPLE INC.
number: 09285908
owner_city: Cupertino
owner_country: US
publication_date: 20140213
---
This application is a continuation of U.S. application Ser. No. 13 620 390 filed Sep. 14 2012 which is a continuation of U.S. patent application Ser. No. 12 566 660 filed Sep. 24 2009 entitled Event Recognition now U.S. Pat. No. 8 285 499 which claims priority to U.S. Provisional Patent Application No. 61 210 332 Event Recognition filed on Mar. 16 2009 which are incorporated by reference herein in their entirety.

The disclosed embodiments relate generally to user interface processing. More particularly the disclosed embodiments relate to apparatuses and methods for recognizing user interface events.

A computing device typically includes a user interface that may be used to interact with the computing device. The user interface may include a display and or input devices such as a keyboard mice and touch sensitive surfaces for interacting with various aspects of the user interface. In some devices with a touch sensitive surface as an input device a first set of touch based gestures e.g. two or more of tap double tap horizontal swipe vertical swipe pinch depinch two finger swipe are recognized as proper inputs in a particular context e.g. in a particular mode of a first application and other different sets of touch based gestures are recognized as proper inputs in other contexts e.g. different applications and or different modes or contexts within the first application . As a result the software and logic required for recognizing and responding to touch based gestures can become complex and can require revision each time an application is updated or a new application is added to the computing device. These and similar issues may arise in user interfaces that utilize input sources other than touch based gestures.

Thus it would be desirable to have a comprehensive framework or mechanism for recognizing touch based gestures and events as well as gestures and events from other input sources that is easily adaptable to virtually all contexts or modes of all application programs on a computing device and that requires little or no revision when an application is updated or a new application is added to the computing device.

To address the aforementioned drawbacks some embodiments provide a method which at an electronic device configured to execute software that includes a view hierarchy with a plurality of views displays one or more views of the view hierarchy executes one or more software elements each software element being associated with a particular view wherein each particular view includes one or more event recognizers. Each event recognizer has an event definition based on one or more sub events and an event handler wherein the event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition. The method also detects a sequence of one or more sub events and identifies one of the views of the view hierarchy as a hit view wherein the hit view establishes which views in the view hierarchy are actively involved views. The method also delivers a respective sub event to event recognizers for each actively involved view within the view hierarchy wherein each event recognizer for actively involved views in the view hierarchy processes the respective sub event prior to processing a next sub event in the sequence of sub events.

Some embodiments provide a method which at an electronic device configured to execute software that includes a view hierarchy with a plurality of views displays one or more views of the view hierarchy executes one or more software elements each software element being associated with a particular view wherein each particular view includes one or more event recognizers. Each event recognizer has an event definition based on one or more sub events and an event handler wherein the event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition. The method also detects a sequence of one or more sub events and identifies one of the views of the view hierarchy as a hit view wherein the hit view establishes which views in the view hierarchy are actively involved views. The method also delivers a respective sub event to event recognizers for each actively involved view within the view hierarchy and makes a sub event recognition decision while processing the respective sub event at event recognizers for the actively involved views in the view hierarchy.

Some embodiments provide a computer readable storage medium storing one or more programs for execution by one of more processors of a computer system or device the one or more programs including one or more application programs for displaying one or more views of a view hierarchy with a plurality of views. The one or more application programs include one or more software elements each software element being associated with a particular view wherein each particular view includes one or more event recognizers. Each event recognizer has an event definition based on one or more sub events and an event handler wherein the event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition event management instructions which when executed by the one or more processors of the computer system or device cause the computer system or device to detect a sequence of one or more sub events identify one of the views of the view hierarchy as a hit view wherein the hit view establishes which views in the view hierarchy are actively involved views and deliver a respective sub event to event recognizers for each actively involved view within the view hierarchy wherein each event recognizer for actively involved views in the view hierarchy processes the respective sub event prior to processing a next sub event in the sequence of sub events.

Some embodiments provide an apparatus comprising a display one or more processors memory and one or more programs stored in the memory which are configured to display one or more views of a view hierarchy with a plurality of views. The one or more programs include one or more software elements each software element being associated with a particular view wherein each particular view includes one or more event recognizers. The event recognizers have an event definition based on one or more sub events and an event handler wherein the event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition. The apparatus s programs also include an event delivery program which when executed by the one or more processors of the apparatus cause the apparatus to detect a sequence of one or more sub events identify one of the views of the view hierarchy as a hit view wherein the hit view establishes which views in the view hierarchy are actively involved views and make a sub event recognition decision while event recognizers for the actively involved views in the view hierarchy process the respective sub event.

In some embodiments an apparatus is provided that comprises one or more processors memory and one or more programs stored in the memory which are configured to manage execution of one or more programmatic layers of a programmatic hierarchy with a plurality of programmatic layers. The one or more programs include one or more software elements each software element being associated with a particular programmatic layer wherein each particular programmatic layer includes one or more event recognizers. The event recognizers have an event definition based on one or more sub events and an event handler wherein the event handler specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition. The apparatus also includes an event delivery program which when executed by the one or more processors of the apparatus cause the apparatus to detect a sequence of one or more sub events identify one of the programmatic layers of the programmatic hierarchy as a hit layer wherein the hit layer establishes which programmatic layers in the programmatic hierarchy are actively involved programmatic layers and deliver a respective sub event to event recognizers for each actively involved programmatic layer within the programmatic hierarchy wherein each event recognizer for actively involved layers in the programmatic hierarchy processes the respective sub event prior to processing a next sub event in the sequence of sub events.

Reference will now be made in detail to embodiments examples of which are illustrated in the accompanying drawings. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components circuits and networks have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.

It will also be understood that although the terms first second etc. may be used herein to describe various elements these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example a first contact could be termed a second contact and similarly a second contact could be termed a first contact without departing from the scope of the present invention. The first contact and the second contact are both contacts but they are not the same contact.

The terminology used in the description of the invention herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

As used herein the term if may be construed to mean when or upon or in response to determining or in response to detecting depending on the context. Similarly the phrase if it is determined or if a stated condition or event is detected may be construed to mean upon determining or in response to determining or upon detecting the stated condition or event or in response to detecting the stated condition or event depending on the context.

As noted above in some devices with a touch sensitive surface as an input device a first set of touch based gestures e.g. two or more of tap double tap horizontal swipe vertical swipe are recognized as proper inputs in a particular context e.g. in a particular mode of a first application and other different sets of touch based gestures are recognized as proper inputs in other contexts e.g. different applications and or different modes or contexts within the first application . As a result the software and logic required for recognizing and responding to touch based gestures can become complex and can require revision each time an application is updated or a new application is added to the computing device.

In the embodiments described below touch based gestures are events. Upon recognition of a predefined event e.g. an event that corresponds to a proper input in the current context of an application information concerning the event is delivered to the application. In the context of this document all touch based gestures correspond to events. Furthermore each respective event is defined as a sequence of sub events. In devices that have a multi touch display device often herein called screens or other multi touch sensitive surface and that accept multi touch based gestures the sub events that define a multi touched based event may include multi touch sub events requiring two or more fingers to be simultaneously in contact with the device s touch sensitive surface . For example in a device having a multi touch sensitive display a respective multi touch sequence of sub events may begin when a user s finger first touches the screen. Additional sub events may occur when one or more additional fingers subsequently or concurrently touch the screen and yet other sub events may occur when all of the fingers touching the screen move across the screen. The sequence ends when the last of the user s fingers is lifted from the screen.

When using touch based gestures to control an application running in a device having a touch sensitive surface touches have both temporal and spatial aspects. The temporal aspect called a phase indicates when a touch has just begun whether it is moving or stationary and when it ends that is when the finger is lifted from the screen. A spatial aspect of a touch is the set of views or user interface windows in which the touch occurs. The views or windows in which a touch is detected may correspond to programmatic levels within a programmatic or view hierarchy. For example the lowest level view in which a touch is detected may be called the hit view and the set of events that are recognized as proper inputs may be determined based at least in part on the hit view of the initial touch that begins a touch based gesture.

In some embodiments the electronic devices and include a touch screen display. In these embodiments the user interface i.e. A or B may include an on screen keyboard not depicted that is used by a user to interact with the electronic devices and . Alternatively a keyboard may be separate and distinct from the electronic devices and . For example a keyboard may be a wired or wireless keyboard coupled to the electronic devices or .

In some embodiments the electronic device includes a display and one or more input devices A e.g. keyboard mouse trackball microphone physical button s touchpad etc. that are coupled to the electronic device . In these embodiments one or more of the input devices A may optionally be separate and distinct from the electronic device . For example the one or more input devices may include one or more of a keyboard a mouse a trackpad a trackball and an electronic pen any of which may optionally be separate from the electronic device. Optionally the device or may include one or more sensors such as one or more accelerometers gyroscopes GPS systems speakers infrared IR sensors biometric sensors cameras etc. It is noted that the description above of various exemplary devices as input devices or as sensors is of no significance to the operation of the embodiments described herein and that any input or sensor device herein described as an input device may equally well be described as a sensor and vice versa. In some embodiments signals produced by the one or more sensors are used as input sources for detecting events.

In some embodiments the electronic device includes a touch sensitive display i.e. a display having a touch sensitive surface and one or more input devices B that are coupled to the electronic device . In some embodiments the touch sensitive display has the ability to detect two or more distinct concurrent or partially concurrent touches and in these embodiments the display is sometimes herein called a multitouch display or multitouch sensitive display.

In some embodiments of the electronic device or discussed herein the input devices are disposed in the electronic device or . In other embodiments one or more of the input devices is separate and distinct from the electronic device or for example one or more of the input devices may be coupled to the electronic device or by a cable e.g. USB cable or wireless connection e.g. Bluetooth connection .

When using the input devices or when performing a touch based gesture on the touch sensitive display of an electronic device or respectively the user generates a sequence of sub events that are processed by one or more CPUs of the electronic device or . In some embodiments the one or more CPUs of the electronic device or process the sequence of sub events to recognize events.

The electronic device or typically includes one or more single or multi core processing units CPU or CPUs as well as one or more network or other communications interfaces respectively. The electronic device or includes memory and one or more communication buses respectively for interconnecting these components. The communication buses may include circuitry sometimes called a chipset that interconnects and controls communications between system components not depicted herein . As discussed briefly above the electronic devices and optionally include user interfaces that include a display and multitouch display respectively. Further the electronic devices and typically include input devices e.g. keyboard mouse touch screens touch sensitive surfaces multitouch screens keypads etc. . In some embodiments the input devices include an on screen input device e.g. a touch sensitive surface of a display device . Memory may include high speed random access memory such as DRAM SRAM DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices optical disk storage devices flash memory devices or other non volatile solid state storage devices. Memory may optionally include one or more storage devices remotely located from the CPU s . Memory or alternately the non volatile memory device s within memory comprise a computer readable storage medium. In some embodiments memory stores the following programs modules and data structures or a subset thereof 

Each of the above identified elements may be stored in one or more of the previously mentioned memory devices and corresponds to a set of instructions for performing functions described herein. The set of instructions can be executed by one or more processors e.g. the one or more CPUs . The above identified modules or programs i.e. sets of instructions need not be implemented as separate software programs procedures or modules and thus various subsets of these modules may be combined or otherwise rearranged in various embodiments. In some embodiments memory may store a subset of the modules and data structures identified above. Furthermore memory may store additional modules and data structures not described above.

A driver or a set of drivers communicates with the hardware . The drivers can receive and process input data received from the hardware . A core Operating System OS can communicate with the driver s . The core OS can process raw input data received from the driver s . In some embodiments the drivers can be considered to be a part of the core OS .

A set of OS application programming interfaces OS APIs are software procedures that communicate with the core OS . In some embodiments the APIs are included in the device s operating system but at a level above the core OS . The APIs are designed for use by applications running on the electronic devices or apparatuses discussed herein. User interface UI APIs can utilize the OS APIs . Application software applications running on the device can utilize the UI APIs in order to communicate with the user. The UI APIs can in turn communicate with lower level elements ultimately communicating with various user interface hardware e.g. multitouch display .

While each layer input output processing stack can utilize the layer underneath it that is not always required. For example in some embodiments applications can occasionally communicate with OS APIs . In general layers at or above the OS API layer may not directly access the Core OS driver s or hardware as these layers are considered private. Applications in layer and the UI API usually direct calls to the OS API which in turn accesses the layers Core OS driver s and hardware .

Stated in another way one or more hardware elements of the electronic device or and software running on the device such as for example drivers depicted in core OS operating system depicted in operating system API software depicted in and Application and User Interface API software depicted in detect input events which may correspond to sub events in a gesture at one or more of the input device s and or a touch sensitive display and generate or update various data structures stored in memory of the device or used by a set of currently active event recognizers to determine whether and when the input events correspond to an event to be delivered to an application . Embodiments of event recognition methodologies apparatus and computer program products are described in more detail below.

In this example each subordinate view includes lower level subordinate views. In other examples the number of view levels in the hierarchy may differ in different branches of the hierarchy with one or more subordinate views having lower level subordinate views and one or more other subordinate views not have any such lower level subordinate views. Continuing with the example shown in search results panel contains separate subordinate views subordinate to the panel for each search result. Here this example shows one search result in a subordinate view called the maps view . Search field includes a subordinate view herein called the clear contents icon view which clears the contents of the search field when a user performs a particular action e.g. a single touch or tap gesture on the clear contents icon in the view . Home row includes subordinate views and which respectively correspond to a contacts application an email application a web browser and an iPod music interface.

A touch sub event is represented in outermost view . Given the location of touch sub event over both the search results panel and maps view the touch sub event is also represented over those views as and respectively. Actively involved views of the touch sub event include the views search results panel maps view and outermost view . Additional information regarding sub event delivery and actively involved views is provided below with reference to .

Views and corresponding programmatic levels can be nested. In other words a view can include other views. Consequently the software element s e.g. event recognizers associated with a first view can include or be linked to one or more software elements associated with views within the first view. While some views can be associated with applications others can be associated with high level OS elements such as graphical user interfaces window managers etc.

To simplify subsequent discussion reference will generally be made only to views and the view hierarchy but it must be understood that in some embodiments the method may operate with a programmatic hierarchy with a plurality of programmatic layers and or a view hierarchy.

Hit view and hit level determination modules and respectively provide software procedures for determining where a sub event has taken place within one or more views e.g. the exemplary view hierarchy depicted in which has three main branches.

The hit view determination module of receives information related to a sub event e.g. a user touch represented as on the outermost view on a search result map view and the search results panel view . The hit view determination module identifies a hit view as the lowest view in the hierarchy which should handle the sub event. In most circumstances the hit view is the lowest level view in which an initiating sub event i.e. the first sub event in the sequence of sub events that form an event or potential event occurs. Once the hit view is identified it will receive all sub events related to the same touch or input source for which the hit view was identified.

Active event recognizer determination modules and of event recognizer global methods and respectively determine which view or views within a view hierarchy should receive a particular sequence of sub events. depicts an exemplary set of active views and that receive the sub event . In the example of the active event recognizer determination module would determine that the top level view search results panel and maps view are actively involved views because these views include the physical location of the touch represented by sub event . It is noted that even if touch sub event were entirely confined to the area associated with map view search results panel and top level view would still remain in the actively involved views since the search results panel and the top level view are ancestors of map view .

Sub event delivery module delivers sub events to event recognizers for actively involved views. Using the example of a user s touch is represented in different views of the hierarchy by touch marks and . In some embodiments sub event data representing this user s touch is delivered by the sub event delivery module to event recognizers at the actively involved views i.e. top level view search results panel and maps view . Further the event recognizers of a view can receive subsequent sub events of an event that starts within the view e.g. when an initial sub event occurs within the view . Stated in another way a view can receive sub events associated with user interactions beginning in the view even if it continues outside of the view.

In some embodiments sub event delivery module delivers sub events to event recognizers for actively involved programmatic levels in a process analogous to that used by sub event delivery module .

In some embodiments a separate event recognizer structure or is generated and stored in memory of the device for each actively involved event recognizer. Event recognizer structures and typically include an event recognizer state respectively discussed in greater detail below when referring to and event recognizer specific code respectively having state machines respectively. Event recognizer structure also includes a view hierarchy reference while event recognizer structure includes a programmatic hierarchy reference . Each instance of a particular event recognizer references exactly one view or programmatic level. View hierarchy reference or programmatic hierarchy reference for a particular event recognizer are used to establish which view or programmatic level is logically coupled to the respective event recognizer.

View metadata and level metadata may include data regarding a view or level respectively. View or level metadata may include at least the following properties that may influence sub event delivery to event recognizers 

Event recognizer structures and may include metadata respectively. In some embodiments the metadata includes configurable properties flags and lists that indicate how the event delivery system should perform sub event delivery to actively involved event recognizers. In some embodiments metadata may include configurable properties flags and lists that indicate how event recognizers may interact with one another. In some embodiments metadata may include configurable properties flags and lists that indicate whether sub events are delivered to varying levels in the view or programmatic hierarchy. In some embodiments the combination of event recognizer metadata and view or level metadata respectively are both be used to configure the event delivery system to a perform sub event delivery to actively involved event recognizers b indicate how event recognizers may interact with one another and c indicate whether and when sub events are delivered to various levels in the view or programmatic hierarchy.

It is noted that in some embodiments a respective event recognizer sends an event recognition action to its respective target as specified by fields of the event recognizer s structure . Sending an action to a target is distinct from sending and deferred sending sub events to a respective hit view or level.

The metadata properties stored in a respective event recognizer structure of a corresponding event recognizer includes at least 

In some embodiments the exception list can also be used by non exclusive event recognizers. In particular when a non exclusive event recognizer recognizes an event subsequent sub events are not delivered to the exclusive event recognizers associated with the currently active views except for those exclusive event recognizers listed in the exception list of the event recognizer that recognized the event.

In some embodiments event recognizers may be configured to utilize the touch cancellation flag in conjunction with the delay touch end flag to prevent unwanted sub events from being delivered to the hit view. For example the definition of a single tap gesture and the first half of a double tap gesture are identical. Once a single tap event recognizer successfully recognizes a single tap an undesired action could take place. If the delay touch end flag is set the single tap event recognizer is prevented from sending sub events to the hit view until a single tap event is recognized. In addition the wait for list of the single tap event recognizer may identify the double tap event recognizer thereby preventing the single tap event recognizer from recognizing a single tap until the double tap event recognizer has entered the event impossible state. The use of the wait for list avoids the execution of actions associated with a single tap when a double tap gesture is performed. Instead only actions associated with a double tap will be executed in response to recognition of the double tap event.

Turning in particular to forms of user touches on touch sensitive surfaces as noted above touches and user gestures may include an act that need not be instantaneous e.g. a touch can include an act of moving or holding a finger against a display for a period of time. A touch data structure however defines the state of a touch or more generally the state of any input source at a particular time. Therefore the values stored in a touch data structure may change over the course of a single touch enabling the state of the single touch at different points in time to be conveyed to an application.

Each touch data structure can comprise various fields. In some embodiments touch data structures may include data corresponding to at least the touch specific fields in or input source specific fields in .

For example a first touch for view field in for first touch for level in can indicate whether the touch data structure defines the first touch for the particular view since the software element implementing the view was instantiated . A time stamp field can indicate the particular time to which the touch data structure relates.

Optionally an info field can be used to indicate if a touch is a rudimentary gesture. For example the info field can indicate whether the touch is a swipe and if so in which direction the swipe is oriented. A swipe is a quick drag of one or more fingers in a straight direction. API implementations discussed below can determine if a touch is a swipe and pass that information to the application through the info field thus alleviating the application of some data processing that would have been necessary if the touch were a swipe.

Optionally a tap count field in event count field in can indicate how many taps have been sequentially performed at the position of the initial touch. A tap can be defined as a quick pressing and lifting of a finger against a touch sensitive panel at a particular position. Multiple sequential taps can occur if the finger is again pressed and released in quick succession at the same position of the panel. An event delivery system can count taps and relay this information to an application through the tap count field . Multiple taps at the same location are sometimes considered to be a useful and easy to remember command for touch enabled interfaces. Thus by counting taps the event delivery system can again alleviate some data processing from the application.

A phase field can indicate a particular phase the touch based gesture is currently in. The phase field can have various values such as touch phase began which can indicate that the touch data structure defines a new touch that has not been referenced by previous touch data structures. A touch phase moved value can indicate that the touch being defined has moved from a prior position. A touch phase stationary value can indicate that the touch has stayed in the same position. A touch phase ended value can indicate that the touch has ended e.g. the user has lifted his her finger from the surface of a multi touch display . A touch phase cancelled value can indicate that the touch has been cancelled by the device. A cancelled touch can be a touch that is not necessarily ended by a user but which the device has determined to ignore. For example the device can determine that the touch is being generated inadvertently i.e. as a result of placing a portable multi touch enabled device in one s pocket and ignore the touch for that reason. Each value of the phase field can be a integer number.

Thus each touch data structure can define what is happening with a touch or other input source at a particular time e.g. whether the touch is stationary being moved etc. as well as other information associated with the touch such as position . Accordingly each touch data structure can define the state of a particular touch at a particular moment in time. One or more touch data structures referencing the same time can be added in a touch event data structure that can define the states of all touches a particular view is receiving at a moment in time as noted above some touch data structures may also reference touches that have ended and are no longer being received . Multiple touch event data structures can be sent to the software implementing a view as time passes in order to provide the software with continuous information describing the touches that are happening in the view.

The ability to handle complex touch based gestures optionally including multi touch gestures can add complexity to the various software elements. In some cases such additional complexity can be necessary to implement advanced and desirable interface features. For example a game may require the ability to handle multiple simultaneous touches that occur in different views as games often require the pressing of multiple buttons at the same time or combining accelerometer data with touches on a touch sensitive surface. However some simpler applications and or views and their associated software elements need not require advanced interface features. For example a simple soft button i.e. a button that is displayed on a touch sensitive display may operate satisfactorily with single touches rather than multi touch functionality. In these cases the underlying OS may send unnecessary or excessive touch data e.g. multi touch data to a software element associated with a view that is intended to be operable by single touches only e.g. a single touch or tap on a soft button . Because the software element may need to process this data it may need to feature all the complexity of a software element that handles multiple touches even though it is associated with a view for which only single touches are relevant. This can increase the cost of development of software for the device because software elements that have been traditionally easy to program in a mouse interface environment i.e. various buttons etc. may be much more complex in a multi touch environment.

It shall be understood however that the foregoing discussion regarding the complexity of evaluating and processing user touches on touch sensitive surfaces also applies to all forms of user inputs to operate electronic devices and with input devices and respectively not all of which are initiated on touch screens e.g. coordinating mouse movement and mouse button presses with or without single or multiple keyboard presses or holds user movements taps drags scrolls etc. on touch pads pen stylus inputs oral instructions detected eye movements biometric inputs detected physiological change in a user and or any combination thereof which may be utilized as inputs corresponding to sub events which define an event to be recognized.

Regardless of event type the event recognizer state machine begins in an event recognition begins state and may progress to any of the remaining states depending on what sub event is received. To facilitate discussion of the event recognizer state machine the direct paths from the event recognition begins state to the event recognized state the event possible state and event impossible state will be discussed followed by a description of the paths leading from the event possible state .

Starting from event recognition begins state if a sub event is received that by itself comprises the event definition for an event the event recognizer state machine will transition to event recognized state .

Starting from state event recognition begins if a sub event is received that is not the first sub event in an event definition the event recognizer state machine will transition to event impossible state .

Starting from event recognition begins state if a sub event is received that is the first and not final sub event in a given event definition the event recognizer state machine will transition to event possible state . If the next sub event received is a second sub event but not the final sub event in the given event definition the event recognizer state machine will remain in state event possible . The event recognizer state machine can remain in state event possible for as long as the sequence of received sub events continues to be part of the event definition. If at any time the event recognizer state machine is in event possible state and the event recognizer state machine receives a sub event that is not part of the event definition it will transition to state event impossible thereby determining that the current event if any is not the type of event that corresponds to this event recognizer i.e. the event recognizer corresponding to state . If on the other hand the event recognizer state machine is in the event possible state and the event recognizer state machine receives the last sub event in an event definition it will transition to the event recognized state thereby completing a successful event recognition.

Starting from input sequence begin if an input is received that by itself completes an input sequence input source handling process will transition to input sequence ended .

Starting from input sequence begin if an input is received that indicates the input sequence terminated input source handling process will transition to input sequence cancelled .

Starting from input sequence begin if an input is received that is the first and not final input in a input sequence input source handling process will transition to state input sequence continues . If the next input received is the second input in an input sequence the input handling process will remain in state input sequence continues . Input source handling process can remain in state input sequence continues for as long as the sequence of sub events being delivered continue to be part of a given input sequence. If at any time input source handling process is in state input sequence continues and input source handling process receives an input that is not part of the input sequence it will transition to state input sequence cancelled . If on the other hand input source handling process is in input sequence continues and the input handling process receives the last input in a given input definition it will transition to the input sequence ended thereby successfully receiving a group of sub events.

In some embodiments input source handling process may be implemented for particular views or programmatic levels. In that case certain sequences of sub events may result in transitioning to state input cancelled .

As an example consider which supposes an actively involved view represented only by actively involved view input source handler hereafter view . View includes a vertical swipe event recognizer represented only by vertical swipe event recognizer hereafter recognizer as one of its event recognizers. In this case the recognizer may require as part of its definition detecting 1 a finger down 2 an optional short delay 3 vertical swiping of at least N pixels and 4 a finger liftoff .

For this example the recognizer also has its delay touch began flag and touch cancellation flag set. Now consider delivery of the following sequence of sub events to recognizer as well as the view 

Here recognizer would successfully recognize sub events and as part of its event definition and accordingly would be in state event possible immediately prior to the delivery of sub event . Since recognizer has its delay touch began flag set the initial touch sub event is not sent to the hit view. Correspondingly the view s input source handling process would still be in state input sequence begin immediately prior to the delivery of sub event .

Once delivery of sub event to recognizer is complete recognizer s state transitions to event impossible and importantly the recognizer has now determined that the sequence of sub events does not correspond to its specific vertical swipe gesture event type i.e. it has decided the event is not a vertical swipe. In other words recognition as a vertical swipe does not occur in this example. . The input source handling system for view input source handler will also update its state. In some embodiments the state of the view input source handler would proceed from the input sequence begins state to the input sequence continues state when the event recognizer sends status information indicating that it has begun recognizing an event. The view input source handler proceeds to the input sequence cancelled state when the touch or input ends without an event being recognized because the touch cancellation flag of the event recognizer has been set. Alternately if the touch cancellation flag of the event recognizer had not been set the view input source handler proceeds to the input sequence ended state when the touch of input ends.

Since event recognizer s touch cancellation flag is set when the event recognizer transitions to the event impossible state the recognizer will send a touch cancellation sub event or message to the hit view corresponding to the event recognizer. As a result the view input source handler will transition to the state input sequence cancelled .

In some embodiments delivery of sub event is not germane to any event recognition decisions made by recognizer though view input source handler s other event recognizers if any may continue to analyze the sequence of sub events.

The following table presents in summarized tabular format the processing of this exemplary sub event sequence as related to the state of event recognizer described above along with the state of view input source handler . In this example the state of the view input source handler proceeds from input sequence begin to input sequence cancelled because recognizer s touch cancellation flag was set 

Turning to attention is directed to an example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in scrolling event recognizer and tap event recognizer . For purposes of illustration the view search results panel in will be related to the reception of the sub event sequence and the state transitions in scrolling event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a tap finger gesture on a touch sensitive display or trackpad but the same event recognition technique could be applied in myriad contexts e.g. detecting a mouse button press and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to view search results panel event recognizers and are in the event recognition begins states and respectively. Following touch which is delivered as sub event detect finger down to actively involved event recognizers for view search results panel as touch sub event as well as to actively involved event recognizers for map view as touch sub event scrolling event recognizer transitions to state event possible and similarly tap event recognizer transitions to state event possible . This is because the event definition of a tap and a scroll both begin with a touch such as detecting a finger down on a touch sensitive surface.

Some definitions of tap and scroll gestures may optionally include a delay between an initial touch and any next step in the event definition. In all examples discussed here the exemplar event definitions for both tap and scroll gestures recognize a delay sub event following the first touch sub event detect finger down .

Accordingly as sub event measure delay is delivered to event recognizers and both remain in the event possible states and respectively.

Finally sub event detect finger liftoff is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the event definitions for tap and scroll are different. In the case of scrolling event recognizer the next sub event to remain in state event possible would be to detect movement. Since the sub event delivered is detect finger liftoff however the scrolling event recognizer transitions to state event impossible . A tap event definition concludes with a finger liftoff sub event though. Accordingly tap event recognizer transitions to state event recognized after sub event detect finger liftoff is delivered.

Note that in some embodiments as discussed above with respect to the input source handling process discussed in may be used for various purposes at the view level. The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and input source handling process 

Turning to attention is directed to another example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in scrolling event recognizer and tap event recognizer . For purposes of illustration the view search results panel in will be related to the reception of the sub event sequence and the state transitions in scrolling event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a scroll finger gesture on a touch sensitive display but the same event recognition technique could be applied in myriad contexts e.g. detecting a mouse button press mouse movement and mouse button release and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to actively involved event recognizers for view search results panel event recognizers and are in the event recognition begins states and respectively. Following delivery of sub events corresponding to touch as discussed above scrolling event recognizer transitions to state event possible and similarly tap event recognizer transitions to state event possible .

As sub event measure delay is delivered to event recognizers and both transition to the event possible states and respectively.

Next sub event detect finger movement is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the event definitions for tap and scroll are different. In the case of scrolling event recognizer the next sub event to remain in state event possible is to detect movement so the scrolling event recognizer remains in the event possible state when it receives sub event detect finger movement . As discussed above however the definition for a tap concludes with a finger liftoff sub event so tap event recognizer transitions to the state event impossible .

Finally sub event detect finger liftoff is delivered to event recognizers and . Tap event recognizer is already in the event impossible state and no state transition occurs. Scrolling event recognizer s event definition concludes with detecting a finger liftoff. Since the sub event delivered is detect finger liftoff the scrolling event recognizer transitions to state event recognized . It is noted that a finger movement on a touch sensitive surface may generate multiple movement sub events and therefore a scroll may be recognized before liftoff and continue until liftoff.

The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and input source handling process 

Turning to attention is directed to another example of a sub event sequence which is being received by a view that includes a plurality of event recognizers. For this example two event recognizers are depicted in double tap event recognizer and tap event recognizer . For purposes of illustration the map view in will be related to the reception of the sub event sequence and the state transitions in double tap event recognizer and tap event recognizer . Note that in this example the sequence of sub events defines a double tap gesture on a touch sensitive display but the same event recognition technique could be applied in myriad contexts e.g. detecting a mouse double click and or in embodiments utilizing programmatic hierarchies of programmatic levels.

Before the first sub event is delivered to actively involved event recognizers for map view event recognizers and are in the event recognition begins states and respectively. Following delivery of sub events related to touch sub event to map view as described above double tap event recognizer and tap event recognizer transition to states event possible and respectively. This is because the event definition of a tap and a double tap both begin with a touch such as detecting a finger down on a touch sensitive surface.

As sub event measure delay is delivered to event recognizers and both remain in states event possible and respectively.

Next sub event detect finger liftoff is delivered to event recognizers and . In this case the state transitions for event recognizers and are different because the exemplar event definitions for tap and double tap are different. In the case of tap event recognizer the final sub event in the event definition is to detect finger liftoff so the tap event recognizer transitions to the event recognized state .

Double tap recognizer remains in state event possible however since a delay has begun regardless of what the user may ultimately do. The complete event recognition definition for a double tap requires another delay followed by a complete tap sub event sequence though. This creates an ambiguous situation as between the tap event recognizer which is already in state event recognized and the double tap recognizer which is still in state event possible .

Accordingly in some embodiments event recognizers may implement exclusivity flags and exclusivity exception lists as discussed above with respect to . Here the exclusivity flag for tap event recognizer would be set and additionally exclusivity exception list for tap event recognizer would be configured to continue permitting delivery of sub events to some event recognizers such as double tap event recognizer after tap event recognizer enters the state event recognized .

While tap event recognizer remains in state event recognized sub event sequence continues to be delivered to double tap event recognizer where sub events measure delay detect finger down and measure delay keep the double tap event recognizer in the state event possible delivery of the final sub event of sequence detect finger liftoff transitions double tap event recognizer to state event recognized .

At this point the map view takes the event double tap as recognized by event recognizer rather than the single tap event recognized by tap event recognizer . The decision to take the double tap event is made in light of the combination of the tap event recognizer s exclusivity flag being set the tap event recognizer s exclusivity exception list including a double tap event and the fact that both the tap event recognizer and the double tap event recognizer both successfully recognized their respective event types.

The following table presents in summarized tabular format the delivery of sub event sequence as related to event recognizers and and sub event handling process 

In another embodiment in the event scenario of the single tap gesture is not recognized because the single tap event recognizer has a wait for list that identifies the double tap event recognizer. As a result a single tap gesture is not recognized until if ever the double tap event recognizer enters the event impossible state. In this example in which a double tap gesture is recognized the single tap event recognizer would remain in the event possible state until the double tap gesture is recognized at which point the single tap event recognizer would transition to the event impossible state.

Attention is now directed to which are flow diagrams illustrating an event recognition method in accordance with some embodiments. The method is performed at an electronic device which in some embodiments may be an electronic device or as discussed above. In some embodiments the electronic device may include a touch sensitive surface configured to detect multi touch gestures. Alternatively the electronic device may include a touch screen configured to detect multi touch gestures.

The method is configured to execute software that includes a view hierarchy with a plurality of views. The method displays one or more views of the view hierarchy and executes one or more software elements. Each software element is associated with a particular view and each particular view includes one or more event recognizers such as those described in as event recognizer structures and respectively.

Each event recognizer generally includes an event definition based on one or more sub events where the event definition may be implemented as a state machine see e.g. state machine . Event recognizers also generally include an event handler which specifies an action for a target and is configured to send the action to the target in response to the event recognizer detecting an event corresponding to the event definition.

In some embodiments at least one of the plurality of event recognizers is a gesture recognizer having a gesture definition and a gesture handler as noted in step of .

Alternatively event recognizers have a set of event recognition states . These event recognition states may include at least an event possible state an event impossible state and an event recognized state.

In some embodiments the event handler initiates preparation of its corresponding action for delivery to the target if the event recognizer enters the event possible state. As discussed above with respect to and the examples in the state machines implemented for each event recognizer generally include an initial state e.g. state event recognition begins . Receiving a sub event that forms the initial part of an event definition triggers a state change to the event possible state . Accordingly in some embodiments as an event recognizer transitions from the state event recognition begins to the state event possible the event recognizer s event handler may begin preparing its particular action to deliver to the event recognizer s target after an event is successfully recognized.

On the other hand in some embodiments the event handler may terminate preparation of its corresponding action if the event recognizer enters the state event impossible . In some embodiments terminating the corresponding action includes canceling any preparation of the event handler s corresponding action.

The example of is informative for this embodiment since tap event recognizer may have initiated preparation of its action but then once the sub event detect finger movement is delivered to the tap event recognizer the recognizer will transition to the event impossible state . At that point tap event recognizer may terminate preparation of the action for which it had initiated preparation .

In some embodiments the event handler completes preparation of its corresponding action for delivery to the target if the event recognizer enters the event recognized state. The example of illustrates this embodiment since a double tap is recognized by actively involved event recognizers for the map view which in some implementations would be the event bound to selecting and or executing the search result depicted by map view . Here after the double tap event recognizer successfully recognizes the double tap event comprised of the sub event sequence map view s event handler completes preparation of its action namely indicating that it has received an activation command.

In some embodiments the event handler delivers its corresponding action to the target associated with the event recognizer. Continuing with the example of the action prepared i.e. the activation command of the map view would be delivered to the specific target associated with the map view which may be any suitable programmatic method or object.

Alternatively the plurality of event recognizers may independently process the sequence of one or more sub events in parallel.

In some embodiments one or more event recognizers may be configured as exclusive event recognizers as discussed above with respect to FIGS. B and C s exclusivity flags and respectively. When an event recognizer is configured as an exclusive event recognizer the event delivery system prevents any other event recognizers for actively involved views except those listed in the exception list of the event recognizer that recognizes the event in the view hierarchy from receiving subsequent sub events of the same sequence of sub events after the exclusive event recognizer recognizes an event. Furthermore when a non exclusive event recognizer recognizes an event the event delivery system prevents any exclusive event recognizers for actively involved views in the view hierarchy from receiving subsequent sub events except for those if any listed in the exception list of the event recognizer that recognizes the event.

In some embodiments exclusive event recognizers may include an event exception list as discussed above with respect to FIGS. B and C s exclusivity exception lists and respectively. As noted in the discussion of above an event recognizer s exclusivity exception list can be used to permit event recognizers to continue with event recognition even when the sequence of sub events making up their respective event definitions overlap. Accordingly in some embodiments the event exception list includes events whose corresponding event definitions have repetitive sub events such as the single tap double tap event example of .

In some embodiments one or more event recognizers may be adapted to delay delivering every sub event of the sequence of sub events until after the event is recognized.

The method detects a sequence of one or more sub events and in some embodiments the sequence of one or more sub events may include primitive touch events . Primitive touch events may include without limitation basic components of a touch based gesture on a touch sensitive surface such as data related to an initial finger or stylus touch down data related to initiation of multi finger or stylus movement across a touch sensitive surface dual finger movements in opposing directions stylus lift off from a touch sensitive surface etc.

Sub events in the sequence of one or more sub events can include many forms including without limitation key presses key press holds key press releases button presses button press holds button press releases joystick movements mouse movements mouse button presses mouse button releases pen stylus touches pen stylus movements pen stylus releases oral instructions detected eye movements biometric inputs and detected physiological changes in a user among others.

The method identifies one of the views of the view hierarchy as a hit view. The hit view establishes which views in the view hierarchy are actively involved views. An example is depicted in where the actively involved views include search results panel and maps view because touch sub event contacted the area associated with the maps view .

In some embodiments a first actively involved view within the view hierarchy may be configured to prevent delivery of the respective sub event to event recognizers associated with that first actively involved view. This behavior can implement the skip property discussed above with respect to and respectively . When the skip property is set for an event recognizer delivery of the respective sub event is still performed for event recognizers associated with other actively involved views in the view hierarchy.

Alternately a first actively involved view within the view hierarchy may be configured to prevent delivery of the respective sub event to event recognizers associated with that first actively involved view unless the first actively involved view is the hit view. This behavior can implement the conditional skip property discussed above with respect to and respectively .

In some embodiments a second actively involved view within the view hierarchy is configured to prevent delivery of the respective sub event to event recognizers associated with the second actively involved view and to event recognizers associated with ancestors of the second actively involved view. This behavior can implement the stop property discussed above with respect to and respectively .

The method delivers a respective sub event to event recognizers for each actively involved view within the view hierarchy. In some embodiments event recognizers for actively involved views in the view hierarchy process the respective sub event prior to processing a next sub event in the sequence of sub events. Alternately event recognizers for the actively involved views in the view hierarchy make their sub event recognition decisions while processing the respective sub event.

In some embodiments event recognizers for actively involved views in the view hierarchy may process the sequence of one or more sub events concurrently alternatively event recognizers for actively involved views in the view hierarchy may process the sequence of one or more sub events in parallel.

In some embodiments one or more event recognizers may be adapted to delay delivering one or more sub events of the sequence of sub events until after the event recognizer recognizes the event. This behavior reflects a delayed event. For example consider a single tap gesture in a view for which multiple tap gestures are possible. In that case a tap event becomes a tap delay recognizer. In essence when an event recognizer implements this behavior the event recognizer will delay event recognition until it is certain that the sequence of sub events does in fact correspond to its event definition. This behavior may be appropriate when a recipient view is incapable of appropriately responding to cancelled events. In some embodiments an event recognizer will delay updating its event recognition status to its respective actively involved view until the event recognizer is certain that the sequence of sub events does not correspond to its event definition. As discussed above with respect to delay touch began flag delay touch end flag and touch cancellation flag are provided to tailor sub event delivery techniques as well as event recognizer and view status information updates to specific needs.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

