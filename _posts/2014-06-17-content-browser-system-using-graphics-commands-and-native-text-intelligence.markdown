---

title: Content browser system using graphics commands and native text intelligence
abstract: Server systems are disclosed that receive content requests and respond with hardware-independent graphics commands instead of, or in addition to, unprocessed content items. The server systems can also generate text information regarding text in the requested content items, and provide the text information to user devices so that the user devices can have knowledge of the text in the content item. The user device can use the text information to handle user interactions with the content item, including copy, paste and search commands and other similar commands. Accordingly, the hardware-independent graphics commands-based representation may provide text interactivity and effects not otherwise available to content representations based on graphics commands or images of content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454515&OS=09454515&RS=09454515
owner: Amazon Technologies, Inc.
number: 09454515
owner_city: Seattle
owner_country: US
publication_date: 20140617
---
Computing devices can retrieve and display network accessible content pages such as web pages that are hosted by or otherwise provided by other computing devices. In a common scenario the computing device that requests and displays the content may be referred to as the client computing device or user computing device and the computing device that hosts or otherwise provides the content may be referred to as the server computing device.

The content pages retrieved and displayed by user computing devices may include text images video executable code and the like. When the content pages include text users can often perform interactive operations on the text such as initiating automatic searches for specific text with the page. When the search text is found within the page it is typically highlighted for the user. When content pages include images of text e.g. images with rasterized text the text in the images may not be searchable. Some servers provide content searching capabilities in such cases by allowing users to submit search terms. The servers can then highlight the search terms in an updated version of an image and provide the updated image with the highlighted text to the client devices.

The present disclosure involves an architecture in which the functions of a network content browsing system e.g. a web browser application are distributed among a browser component running on a server and a browser component running on a user device. The browser component running on the server also referred to as the server side browser can obtain content and generate graphics commands that can be executed by the browser component running on the user device also referred to as the client side browser to display a representation of the content. The graphics commands may not be markup commands such as Hypertext Markup Language HTML commands but may instead be hardware independent graphics commands for painting to a display such as vector graphics commands that are not device specific or graphics processing unit GPU specific e.g. they can be executed on a variety of different devices and in different operating environments as long as the appropriate graphics library is present . For example the hardware independent graphics commands may be software based graphics commands targeted at a particular multi platform software library or application programming interface API that provides abstraction from specific hardware requirements. Examples of server side browsers that generate hardware independent graphics commands and provide them to client side browsers in lieu of conventional content files are described in commonly owned U.S. patent application Ser. No. 14 285 477 titled Distributed Content Browsing System Using Transferred Hardware Independent Graphics Commands and filed on May 22 2014 the disclosure of which is hereby incorporated by reference. Hardware independent graphics commands may be used by a client side browser to present a complete or substantially complete visual representation of a content page including text and images. However users may not be able to interact with the text in the representation of the content page e.g. perform copy paste and search operations because the response sent to the user device the hardware independent graphics commands may not include the text itself. Rather the graphics commands cause display of graphical image representations or glyphs that correspond to the individual characters of text on the content page. Therefore a client side browser that has received hardware independent graphics commands in lieu of conventional content files may not have knowledge of the text e.g. the actual letters numbers and other textual characters that corresponds to the displayed glyphs.

Some aspects of the present disclosure relate to providing information regarding textual characters that correspond to images or other non textual graphical representations of text displayed in a representation of content page. The non textual graphical representations of text may be images or graphics e.g. glyphs rasterized images vector graphics etc. of the visual symbols for particular textual characters. However the non textual graphical representations of text may not be treated by or recognized by a computing device as a data type or data structure for character strings or individual characters e.g. string char char and equivalent data types and structures in many programming languages . Computing devices may use various operations for text manipulation searching regular expression matching etc. on data internally represented as a data type or data structure recognized as text such as an array of char data types used to store ASCII or Unicode values for a particular string of characters. Those same text based operations may not be used with graphical representations of the text because the graphical representations are typically images or vector graphics that happen to be used to display text symbols. As such the graphical representations of text may be internally represented using data structures for image or graphics data rather than data types or data structures on which the computing device may perform text manipulation searching regular expression matching etc.

Providing additional information regarding the text e.g. information represented using data types or data structures for character strings or individual characters to the client side browser can facilitate user interaction with the text e.g. copy paste search etc. that would not be possible with only images or other non textual graphical representations of text. In some embodiments a server side browser or some other server side system may generate an invisible textual overlay in addition to the hardware independent graphics commands. The textual overlay can include a copy of the text that corresponds to the glyphs displayed by execution of the hardware independent graphics commands. In addition the text in the textual overlay may be formatted such that it can be searched added to a system clipboard in response to a user copy command etc. For example the text in the textual overlay may be Unicode or ASCII text arranged such that the location of a given portion of text corresponds to the location of the corresponding glyph s . When a user attempts to highlight or otherwise interact with text displayed on the screen the operating system or some other module or component can provide the screen coordinates or some other positional information regarding the user interaction to the client side browser. The client side browser can use the positional information to identify the text at the location of user interaction to e.g. copy the text to the system clipboard. The client side browser can also use the positional information to apply a visual effect to the display at those coordinates e.g. apply highlighting . In this way user interactions with the displayed images of text can appear to produce results that are similar or identical to those produced for user interactions with content pages that include native text received and rendered locally.

Additional aspects of the present disclosure relate to providing text interaction features using hardware independent graphics commands without the use of a separate textual overlay or other layer that includes the text of the content page. In some embodiments hardware independent graphics commands can generate a visual representation of glyph identified by a particular glyph identifier. When a user interacts with representation of a content page generated by the hardware independent graphics commands the client side browser can identify the particular graphics commands that correspond to the coordinates associated with the user interaction. The particular graphics commands may include or reference glyph identifiers for the glyphs to be displayed at those coordinates. A cross reference or conversion function may be used to determine which textual character e.g. which Unicode letter number or symbol is represented by the glyph s at those coordinates. In this way the text at the coordinates that correspond to the user interaction can be e.g. copied onto a temporary clipboard for future pasting. In addition hardware independent graphics commands can be executed to alter the display of the glyphs at the coordinates that correspond to the user interaction such as to apply highlighting.

Further aspects of the present disclosure relate to searching for text within a content page that is displayed using hardware independent graphics commands. In conventional browser applications that obtain copies of content files e.g. copies of the resources that define the content such as HTML files images etc. rather than graphics commands users can search for text on a page because the browser application has rendered the text from the content files and therefore has knowledge of the display location of each piece of text. In browser applications that obtain graphics commands in lieu of the resources that define the content page such searching may be difficult because the browser application does not have direct knowledge of the display location of each piece of text. In some embodiments when a textual overlay is provided with the hardware independent graphics commands the client side browser can search the textual overlay and obtain coordinates for any matches. In other embodiments when a textual overlay is not provided the client side browser can inspect the graphics commands for the page and determine the textual content at each coordinate or range of coordinates in advance of searching e.g. before during or shortly after the rendering process . When a user subsequently searches for specific pieces of text the client side browser can search the previously generated listing mapping hash table etc. to obtain coordinates for any matches.

Although aspects of the embodiments described in the disclosure will focus for the purpose of illustration on a distributed browsing system with separate server side browser and client side browsers designed specifically to work in conjunction with one another one skilled in the art will appreciate that the techniques disclosed herein may be applied to any number of services processes or applications. In some embodiments an existing browser application that runs on a user device may be configured to receive hardware independent graphics commands from a server in lieu of unprocessed content files. For example a browser plug in or extension may be installed on a user device to facilitate communication with a server side browser receive hardware independent graphics commands and execute the commands thereby bypassing the parsing and rendering processes that would normally be performed by the client side browser. In some embodiments browsers executing on user devices may be designed to receive either conventional content files or hardware independent graphics commands or a combination thereof . For example the browser may determine whether to request content files or hardware independent graphics commands based on current conditions and performance metrics data regarding prior browsing sessions or the like. Alternatively or in addition an intermediary system may determine whether to provide content files or hardware independent graphics commands based on current conditions performance metrics prior browsing sessions or the like.

Furthermore although the examples in the present disclosure focus on the generation transmission and execution of Skia commands the systems and processes herein may be used with any hardware independent graphics commands or other non device specific non GPU reliant graphics commands as long as both the client browser or browser extension and headless browser each have access to the necessary graphics processing components and libraries.

Various aspects of the disclosure will now be described with regard to certain examples and embodiments which are intended to illustrate but not limit the disclosure.

As will be appreciated by those of skill in the relevant art the network environment may include any number of distinct user devices and or content sources . In addition multiple e.g. two or more intermediary systems may be used. For example separate intermediary systems may be located so that they are close in either a geographical or networking sense to groups of current or potential user devices or content sources . In such a configuration a user device may request content via the intermediary system to which it is closest rather than all user devices requesting content via a single intermediary system .

The user devices can include a wide variety of computing devices including personal computing devices terminal computing devices laptop computing devices tablet computing devices electronic reader devices mobile devices e.g. mobile phones media players handheld gaming devices etc. wearable devices with network access and program execution capabilities e.g. smart watches or smart eyewear wireless devices set top boxes gaming consoles entertainment systems televisions with network access and program execution capabilities e.g. smart TVs and various other electronic devices and appliances. Individual user devices may execute a client side browser to communicate via the network with other computing systems such as the intermediary system or content sources and in order to request and display content.

Illustratively a user may use a client side browser to request network accessible content e.g. content pages images video etc. hosted or provided by a content source such as an origin content server or a CDN server . The user device or client side browser may be associated with the intermediary system or otherwise configured to request the content through and receive hardware independent graphics commands from the intermediary system rather than communicating directly with the content source. The client side browser may include a remote graphics module that receives remotely generated hardware independent graphics commands such as Skia commands generated by the intermediary system . The remote graphics module or some other module of the client side browser can execute the remote generated hardware independent graphics commands to display a representation of the requested content on the user device . Advantageously the remote graphics module may facilitate the display of graphical representations of requested content on the user device without requiring the user device to receive content files e.g. HTML files JPEG images etc. directly or indirectly from content sources and . In addition the remote graphics module or some other module or component may facilitate user interactions with representations of text displayed by the client side browser similar to interactions that may be performed using browser that obtain and render content files such as HTML files.

In some embodiments the browser application running on the user device may be a conventional web browser that is not specifically designed or configured to execute remotely generated graphics commands and other display commands. For example the browser may use or otherwise be associated with a remote graphics module that is not integrated with the browser such as a browser add in or extension. In some embodiments applications other than a browser may include or use a remote graphics module or some similar module to execute graphics commands generated by an intermediary system . For example content aggregators or other specialized content display applications for mobile devices e.g. Flipboard may utilize a remote graphics module .

The intermediary system can be a computing system configured to retrieve content on behalf of user devices and generate hardware independent graphics commands for execution by the user devices . For example the intermediary system can be a physical server or group of physical servers that may be accessed via the network . In some embodiments the intermediary system may be a proxy server a system operated by an internet service provider ISP and or some other device or group of devices that retrieve content on behalf of user devices .

The intermediary system may include various modules components data stores and the like to provide the content retrieval and processing functionality described herein. For example the intermediary system may include a server based browser application or some other content rendering application to process content retrieved from content sources. Such a content rendering application may be referred to as a server side browser or a headless browser. A server side browser does not or is not required to cause display of content by a graphical display device of the server on which the server side browser is executing. In some embodiments the server side browser can provide hardware independent graphics commands to separate user devices . Illustratively the server side browser may obtain requested content from an origin content server and or CDN server obtain additional items e.g. images and executable code files referenced by the requested content execute code e.g. JavaScript that may be included in or referenced by the content generate hardware independent graphics commands to display a graphical representation of the content and transmit the hardware independent graphics commands to the user device . By performing some or all of these operations on the intermediary system rather than the user device the substantial computing resources and high speed network connections typically available to network based server systems may be leveraged to perform the operations much more quickly.

The server side browser may include various modules to provide the functionality described above and in greater detail below. For example the server side browser may include a content processing module that parses content files and generates a DOM tree and or render tree representation of the content a graphics processing module that receives the DOM render tree representation and generates hardware independent graphics commands e.g. Skia commands to render a graphical representation of the content on a user device a text processing module that generates textual overlays or otherwise provides information regarding the text of a content page and an interaction processing module that communicates with the client side browser to receive information regarding interactions with the content on the user device and to update the graphical representation of the content if necessary. In some embodiments a server side browser may include additional or fewer modules than those shown in .

The intermediary system may be a single computing device or it may include multiple distinct computing devices such as computer servers logically or physically grouped together to collectively operate as an intermediary system. The components of the intermediary system can each be implemented as hardware such as a server computing device or as a combination of hardware and software. In addition the modules and components of the intermediary system can be combined on one server computing device or separated individually or into groups on several server computing devices. In some embodiments the intermediary system may include additional or fewer components than illustrated in .

In some embodiments the features and services provided by the intermediary system may be implemented as web services consumable via the communication network . In further embodiments the intermediary system is provided by one more virtual machines implemented in a hosted computing environment. The hosted computing environment may include one or more rapidly provisioned and released computing resources which computing resources may include computing networking and or storage devices. A hosted computing environment may also be referred to as a cloud computing environment.

The origin content servers and CDN servers can correspond to logical associations of one or more computing devices for hosting content and servicing requests for the hosted content over the network . For example a content server or CDN server can include a web server component corresponding to one or more server computing devices for obtaining and processing requests for content such as content pages from user devices the intermediary system or other devices or service providers. In some embodiments one or more content servers may be associated one or more CDN service providers e.g. entities that manage multiple CDN servers application service providers etc.

The content page representations shown in and described below with respect to are illustrative only and are not intended to be limiting. In some embodiments the content page may correspond to a base resource e.g. an HTML page and any number of embedded resources e.g. images videos executable code files and or any other resources referenced by the HTML page retrieved by the server side browser or some other module or component of a server system. For example the content page representation displayed by the client side browser may correspond to hardware independent graphics commands generated by the intermediary system in response to a request from a user device retrieved from a client side or server side cache etc.

The process begins at block . At block the intermediary system or other server system executing the process can receive a request for network content such as a content page from a user device . The intermediary system may instantiate a server side browser instance to process and respond to the request or the intermediary system may assign the request to an existing server side browser instance. In some embodiments the client side browser may be assigned to a particular server side browser instance for an entire browsing session or some portion thereof or the client side browser may be reconnected to a server side browser instance after a period of inactivity

At block the server side browser or some other module or component may obtain the requested content item. For example the server side browser can retrieve a base resource such as an HTML page at a network address included in the request from the user device from a server side cache etc. The server side browser can retrieve additional resources associated with the base resource such as resources referenced within the base resource.

At block the server side browser or some other module or component may segment the content page into multiple e.g. two or more layers. Each layer may correspond to a different visual portion of the content page such as portion of the content page within a particular markup tag e.g. etc. . If the server side browser were to generate a single set of hardware independent graphics commands to display a representation of the entire content page then hardware independent graphics commands would need to be generated for the entire content page including all objects displayed on the content page each time a change to the display of one object is processed e.g. each time a visual characteristic of a single object changes in response to user interaction executable code or some other event . This may be the case even if the display of no other object of the content page is to be changed. For example if an image on a content page is the first image of a multi image slide show then hardware independent graphics commands may need to be generated for the entire representation of the content page each time a new image is to be displayed. As another example if a textual content area is to be scrollable while other objects are to remain stationary e.g. a header then hardware independent graphics commands may need to be generated for the entire representation of the content page each time the textual content area is scrolled.

To avoid unnecessary processing by the server side browser and to reduce network traffic to the user device one or more of the objects of the content page can be separated into a discrete layer. Different layers of a content page can encompass different two dimensional areas of the content page e.g. cover different ranges of coordinates without overlapping . In some cases one layer may partially or completely overlap another layer e.g. a background layer may be partially overlapped by any number of other layers each of which may partially or completely overlap other layers etc. . Hardware independent graphics commands for individual layers can be generated such that they can be combined into a single representation by the client side browser while also allowing repainting of a single layer separately from the other layers of the content page. In this way the representation of a single object can be updated separately from other objects and without re processing and or re painting of the other objects. In some embodiments as described above the hardware independent graphics commands may be Skia commands. Each individual layer may correspond to a different SkPicture which includes Skia commands that can be executed to display a representation of the object. Individual SkPictures can be generated stored transmitted executed and updated independently from other SkPictures even when multiple SkPictures are used to generate a single display on a user device .

The example content page shown in includes a header various images and various textual content areas and . Each of these distinct areas may correspond to a different layer as shown in . For example the server side browser may segregate the header into its own layer the images into another layer and each textual content area into its own layer .

At block of the process shown in the server side browser or some other module or component can generate hardware independent graphics commands for the various layers determined at block . For example layers may be produced by generating graphics commands operative to display graphic representations or glyphs of the textual characters in the corresponding textual content areas . A single letter number punctuation mark or other character may correspond to any number of different glyphs depending upon the font in which the character is to be displayed formatting effects to be applied e.g. bold underline etc. and the like. A hardware independent graphics command e.g. a Skia drawText command can be generated for each individual textual character or group of characters. In this way a client side browser in receipt of the hardware independent graphics commands can paint an accurate image of the requested content page including the textual portions of the content page without receiving either the content page itself or an image of the content page.

Examples of systems and methods for segmenting a content page into layers and producing graphics commands for the individual layers are described in U.S. patent application Ser. No. 14 285 477 incorporated by reference above. In some embodiments the server side browser may not separate the visual portions of the content page into multiple layers but may instead generate a single discrete set of graphics commands such as a single SkPicture for the entire visual portion of the page or for a substantial portion thereof .

At block the server side browser or some other module or component can generate a textual overlay . In contrast to the layers of hardware independent graphics commands generated in block above the textual overlay may include text in a format e.g. Unicode or ASCII that may be searched copied and otherwise used by the client side browser in response to text based interactions. The term overlay refers to the position of the textual overlay with respect to the other layers when processed for display at the user device . Even though the textual overlay may be invisible it may still be logically positioned as the top most layer e.g. the layer with the highest z index when the content page representation is presented on the user device . Therefore the textual overlay may be the first or primary layer that handles user interactions with the representation of the content page such as drag interactions to select text. In this way the textual overlay may provide or facilitate functionality similar to the textual interaction functionality provided by browser applications that retrieve conventional content files including text and render the text locally.

In some embodiments the textual overlay may be a layout aware invisible overlay that includes each textual character of the content page or some subset thereof arranged to correspond to the display location of the glyph for the character or otherwise associated with location information to determine the location of the corresponding glyph. For example the location information in the overlay may identify the coordinate s at which each text character or group of characters is displayed. When a user interacts with the content page representation to e.g. select text the operating system or some other module or component of the user device can provide location information of the user interaction e.g. coordinates of where the user tapped dragged etc. to the client side browser . The client side browser may then use the location information of the user interaction determine which text characters in the textual overlay correspond to the location of the user interaction. In some embodiments the textual overlay may group text for individual layers such that handling of cursor dragging and other interactions may appear to the to the user in the same or substantially the same way that such interactions appear in browser applications that receive conventional content files and render text locally. For example individual portions of a content page enclosed in tags in an HTML file may be separated into different layers above at block . In the content page shown in textual areas and may be enclosed in different tags or tags or tags etc. . Accordingly these textual areas and may be segmented into different layers and . The textual overlay may arrange the text or include information that separates the text from layers and into different regions . Such a layout aware textual overlay can be generated so that a user interaction such as dragging a finger or mouse pointer across text in one layer e.g. layer corresponding to region of the textual overlay does not inadvertently cause text to be selected in other layers corresponding to other tags located in the path of the drag e.g. layer corresponding to region of textual overlay or to layers located behind the layer in which the user initiated the drag. In this way any highlighting effect and or copied text may be predictable and conform to user expectations for such interactions.

Although the term overlay is used throughout the present disclosure in some embodiments text and location information may be generated by the server side browser and used by the client side browser without being logically layered on top of the content page representation displayed by the hardware independent graphics commands. For example text and location information may be provided as a data package or stream that is transmitted to client side browser along with or independently of the hardware independent graphics commands for a requested content page and may not be processed as the top most layer of the content page. The client side browser may be programmed to use the text and location information to facilitate text based interactions as described herein.

At block the server side browser or some other module or component can provide a response to the content request received above at block . The response can include the hardware independent graphics commands generated for the individual layers of the content page or for the entire page and the textual overlay generated above at block . The process may then terminate at block . In some embodiments the server side browser may maintain an instance of the content page after providing the response to the user device . The instance can be used to generate updated layers in response to changes in visual portions of the page such as changes caused by user interaction executable code e.g. JavaScript and other events.

The process begins at block . At block the client side browser can send a request for network accessible content to a server system such as the intermediary system . At block the client side browser can receive a response from the intermediary system . The response may include hardware independent graphics commands in lieu of conventional content files for the requested content page. At block the client side browser can execute the hardware independent graphics commands to display a representation of the requested content page.

At block the client side browser can apply or otherwise associate a textual overlay received with the hardware independent graphics commands to the content page representation. Applying or associating the textual overlay may include logically positioning the overlay on top of the rest of the content page representation. In this way the overlay is the first or primary layer used to handle user interactions with the representation of the content page. For example user interactions such as drag operations may initially be processed by the operating system of the user device . The operating system can notify the application that is active at the time of the user interaction in this example the application is the client side browser . The client side browser may then determine how to handle certain interactions such as touch tap mouse clicks drags etc. by determining which layer is the top most layer at the location of the interaction.

At decision block the client side browser can determine whether a current user interaction to select highlight or otherwise interact with text has been received. Illustratively the interaction may include a user tapping on a portion of the display and dragging a finger across a line of text. shows one example of such an interaction. As shown a user s hand has tapped a portion of the screen in which textual content area is displayed. The user has dragged the hand across a line of text . The operating system or some other module or component of the user device can notify the client side browser of the interaction and the process may proceed to block .

At block the client side browser can determine the location of the user interaction such as the coordinates that correspond to the selected text . For example the coordinates can be obtained from the operating system or some other module or component of the user device e.g. in connection with the notification described above .

At block the client side browser can use the location information regarding the user interaction to identify the text in the textual overlay that corresponds to the user interaction. The client side browser can then add the identified text to the system clipboard or perform some other textual operation. In some embodiments the text in the textual overlay that corresponds to the user interaction may be the text that is located at or otherwise associated with location information that is equivalent or substantially equivalent to the location of the user interaction. In other embodiments the text in the textual overlay that corresponds to the user interaction may be the text that is located at or otherwise associated with location information equivalent or substantially equivalent to the location of the glyphs or other graphical representations of text displayed at or near the location of the user interaction.

At block the client side browser can apply highlighting to the glyphs at the location that corresponds to the user interaction. For example the client side browser can swap the background and font colors for the selected region or otherwise apply highlighting by modifying a parameter of the hardware independent graphics commands used to display the glyphs e.g. by modifying or substituting the paint object passed to a Skia drawText command . In some embodiments highlighting may be generated by the server side browser . For example the client side browser may provide information regarding the user interaction and the location thereof to the server side browser and the server side browser may generate updated hardware independent graphics commands for the entire page or some portion thereof e.g. the layer associated with the user interaction operable to display highlighted text when received and executed by the client side browser .

At decision block the client side browser can determine whether a de selection interaction has been made. For example a user may click or tap on a display location away from the highlighted text. In this example the process can proceed to block where the highlighting is removed from the glyphs by e.g. executing the graphics commands for the highlighted location as previously received above at block . However the previously selected highlighted text may remain in the clipboard until replaced or until the occurrence of some other event. Therefore the user may paste the previously selected text even after de selecting it.

The process begins at block . At block the client side browser can send a request for network accessible content to a server system such as the intermediary system . At block the client side browser can receive a response from the intermediary system . The response may include hardware independent graphics commands in lieu of conventional content files for the requested content page. At block the client side browser can execute the hardware independent graphics commands to display a representation of the requested content page.

At decision block the client side browser can determine whether a current user interaction to select highlight or otherwise interact with text has been received such as one of the interactions described above. If so the process can proceed to block .

At block the client side browser can determine the graphics commands that correspond to the coordinates of the user interaction. For example the client side browser can receive location information from the operating system or some other module or component of the user device as described in detail above. The client side browser can use the interaction location information to inspect the graphics commands received in block and identify the commands used to paint the portion of the display with which the user has interacted.

At block the client side browser can determine the characters that correspond to the glyphs painted in the portion of the display with which the user has interacted. The client side browser may execute a function provided by the hardware independent graphics command library to determine the character that corresponds to a given glyph ID. In some embodiments the client side browser can use a cross reference list or data store to determine which character corresponds to a given glyph ID.

At block the client side browser can perform some action using the character s determined above. For example the client side browser can place the determined character s into a temporary clipboard to be pasted in the future. As another example the client side browser may apply or remove highlighting to the glyphs that correspond to the user interaction as described in detail above.

Depending on the embodiment certain acts events or functions of any of the processes or algorithms described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described operations or events are necessary for the practice of the algorithm . Moreover in certain embodiments operations or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

The various illustrative logical blocks modules routines and algorithm steps described in connection with the embodiments disclosed herein can be implemented as electronic hardware or combinations of electronic hardware and computer software. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or as software that runs on hardware depends upon the particular application and design constraints imposed on the overall system. The described functionality can be implemented in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the disclosure.

Moreover the various illustrative logical blocks and modules described in connection with the embodiments disclosed herein can be implemented or performed by a machine such as a general purpose processor device a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor device can be a microprocessor but in the alternative the processor device can be a controller microcontroller or state machine combinations of the same or the like. A processor device can include electrical circuitry configured to process computer executable instructions. In another embodiment a processor device includes an FPGA or other programmable device that performs logic operations without processing computer executable instructions. A processor device can also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. Although described herein primarily with respect to digital technology a processor device may also include primarily analog components. For example some or all of the signal processing algorithms described herein may be implemented in analog circuitry or mixed analog and digital circuitry. A computing environment can include any type of computer system including but not limited to a computer system based on a microprocessor a mainframe computer a digital signal processor a portable computing device a device controller or a computational engine within an appliance to name a few.

The elements of a method process routine or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor device or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of a non transitory computer readable storage medium. An exemplary storage medium can be coupled to the processor device such that the processor device can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor device. The processor device and the storage medium can reside in an ASIC. The ASIC can reside in a user terminal. In the alternative the processor device and the storage medium can reside as discrete components in a user terminal.

For example the processes and described with respect to may be embodied in a set of executable program instructions stored on one or more non transitory computer readable media such as one or more disk drives or solid state memory devices of the user device or a computing system with which the intermediary system is associated. When a process or is initiated the executable program instructions can be loaded into memory such as RAM and executed by one or more processors of the user device or computing system. In some embodiments the computing system may include multiple computing devices such as servers and the processes or portions thereof may be executed by multiple servers serially or in parallel.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without other input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

Disjunctive language such as the phrase at least one of X Y Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it can be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. As can be recognized certain embodiments described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of certain embodiments disclosed herein is indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

