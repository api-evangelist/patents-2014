---

title: Object-relational mapping based on virtual columns
abstract: A server system allows object relational mapping. Objects of an object type are stored as records in a table corresponding to the object type. The server system allows new attributes to be added to an object type without altering the corresponding table. The object type comprises a set of mapped attributes that correspond to distinct columns of the associated table. The object type further comprises unmapped attributes that fail to map to distinct columns of the table. The table is associated with a virtual column for storing the unmapped attributes. The unmapped attributes of an object of the object type are encoded into a value and stored in the virtual column. The virtual column may be a column of the same table or a column of an auxiliary table. The unmapped attributes may also be stored as name value pairs in an auxiliary table associated with the table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430554&OS=09430554&RS=09430554
owner: Weebly, Inc.
number: 09430554
owner_city: San Francisco
owner_country: US
publication_date: 20140828
---
This invention relates generally to database applications and in particular to database applications that use object relational mapping.

Applications typically store data in databases. For example e commerce applications store information describing products orders transactions and so on in databases. Data is often stored in databases as tables or relations. A relational model describes the representation of the data stored in the database. Applications typically use an object representation of entities for example products orders and so on. The object representation is manipulated using instructions provided using a programming language. The object representation of the data model is mapped to a relational representation of the data model to allow transformation between the two representations.

A relational model is typically modified less often compared to the object model. Modification of the relational model corresponds to modification of a database schema. A database may store large amount of data and modifying the database schema may require reorganizing existing data. This may require movement of large amount of data stored on a persistent storage. As a result modifying the relational model may consume large amount of resources and may slow down the database as well as applications using the database. As a result database administrators often do not allow modifications to database schema used by an application.

In contrast the object representation of the data model changes more frequently. For example the object model may be modified as developers make modifications to the applications add new features fix defects and so on. Conventional object relational mapping techniques require the relational model to be modified to match any changes to the object model. As a result the database system may have to be upgraded to match the modifications to the object model thereby disrupting the applications using the databases. Alternatively the developers may be required to limit the amount of modifications they make to the object model for example to major releases of software. As a result conventional techniques are inadequate to handle the changes required in a fast paced development environment.

Embodiments of the invention map operations on an object model to operations of a relational model. The object model includes a plurality of object types and the relational model includes a plurality of tables. Object types of the object model are associated with tables of the relational model. Embodiments of the invention allow new attributes to be added to an object type without requiring new columns to be added to the corresponding table. The data corresponding to these new attributes is stored in a virtual column associated with the table. The virtual column may be a column of the table or a column of an auxiliary table.

The object type includes a set of mapped attributes that are associated with distinct columns of the table. The object type also includes a set of unmapped attributes that fail to map to distinct columns of the table. An object of the object type is stored as follows. The mapped attributes of the object are stored as a record of the table such that each mapped attribute is stored as the corresponding column value in the record. The unmapped attributes are encoded into a value. The encoded value is stored in the virtual column.

In some embodiments the unmapped attributes of the object are stored in an auxiliary table configured to store name value pairs. The object is stored in the database by performing the following operations. Each mapped attribute of the object is stored as a value of a corresponding column of the table. The set of unmapped attributes are stored as name value pairs in the auxiliary table.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims.

The Figures FIGS. and the following description describe certain embodiments by way of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein. Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures.

In one embodiment the client devices are conventional computer systems executing for example a Microsoft Windows compatible operating system OS Apple OS and or a Linux distribution. In another embodiment the client devices can be devices having computer functionality such as a personal digital assistant PDA mobile telephone video game system etc. The client device includes a client application configured to interact with the server system via the network . The client application may be an internet browser application. Network may comprise any combination of local area and or wide area networks using both wired and or wireless communication systems. In one embodiment the network uses standard communications technologies and or protocols.

The server system includes a database that stores data processed by the server system . The data stored in database is read and processed by the server system for sending to the client device for presentation via the client application . Furthermore the server system may receive data or instructions from the client device that cause modifications to data stored in the database . The modifications to the data stored in the database includes insertion of new data records updates to existing data records deletion of data records and so on.

The server system typically includes a database server not shown in which is a computer program that interacts with the database and provides database services for example access to the data stored in the database. Database servers include commercially available programs for example database servers included with database management systems provided by ORACLE SYBASE MICROSOFT SQL SERVER IBM s DB2 MYSQL and the like.

The computing system used for hosting the server system is typically a server class system that uses powerful processors large memory and fast input output systems compared to a typical computing system used for example as a client device . The server typically has large secondary storage for example using a RAID redundant array of independent disks array.

An example server system may implement the backend of an e commerce application that interacts with users via the client application . New data records may be inserted in the database representing orders requested by users. Data may be updated for example inventory information as users purchase items. Furthermore the enterprise managing the e commerce system may update data by providing information describing new products by modifying information describing existing products or by removing certain products.

The server system maintains an object model representing entities used by applications. The object model represents entities as objects O O O and so on. For example the server system implementing an e commerce system may represent products orders images transactions and so on as objects. The objects in the object model may have relations between them. For example an object representing an order may be related to an object representing one or more products associated with the order. Each product object may be associated with one or more SKU stock keeping unit objects image objects and so on. The object model includes executable instructions that may be obtained by compiling or executing programs implemented using a programming language for example JAVA PYTHON PHP hypertext processor and so on.

The server system includes an object relational mapping module that maps data represented in the relational model to objects in the object model and vice versa. As an example the server system receives a request to read data corresponding to a particular object for example an object representing a product identified by name. The object relational mapping module generates database queries to read the record corresponding to the identified product and generates an object based on the data obtained from the record. The database query may be a SELECT statement of SQL language.

As another example the server system receives a request to update an object for example the product object. The server system performs an update to the object representation in the object model . In response to the update to the object representation the object relational mapping generates the corresponding update statements and executes the update statements to modify the corresponding records of the database .

Similarly the server system may receive a request to create a new object for example an order object. The server system creates the requested object in the object model . In response to the new object created in the object model the object relational mapping generates an insert statement and executes the insert statement to add a new record in the database corresponding to the object created.

As another example the server system may receive a request to delete an object. The server system deletes the requested object in the object model . In response to the deletion of the object in the object model the object relational mapping generates a delete statement and executes the delete statement to delete one or more record s of the database corresponding to the object deleted.

If every attribute of an object in the object model is mapped to columns of a table in the relational model the object relational mapping module can generate the appropriate database statements for processing create read update and delete requests of objects. However in conventional systems if the object model gets modified and the relational model has not been updated to match the modified object model the object relational mapping module cannot store the object in a database table by mapping each attribute of the object to a column of the table.

Therefore embodiments of the invention include an additional column in tables of the relational model that represent objects of the object model . The additional column is referred to herein as a virtual column. The virtual column is a placeholder column that stores data corresponding to any of the object type attributes that fail to match a corresponding column in the table. The virtual column is configured to store different types of attributes and is capable of holding data of variable sizes. The following figures illustrate how a table with a virtual column is used to store data corresponding to objects.

As shown in object has various attributes including attrA attrB attrC attrD attrE and attrF The table has columns including columnA columnB columnC and virtual column There may be additional columns of the tables shown in that are not shown for purposes of clarity. For example table may include an id identifier column to store a unique identifier for identifying an object.

Attributes attrA attrB and attrC of the object are mapped to distinct columns of table . For example attribute attrA is mapped to columnA attribute attrB is mapped to columnB and attribute attrC is mapped to columnC However the table does not include a distinct column for holding attributes attrD attrE and attrF These attributes are referred to as unmapped attributes.

The table includes the virtual column that is used by the object relational mapping module to store the values of all unmapped attributes i.e. attrD attrE and attrF. The object relational mapping module uses an encoding to represent these unmapped attributes as value of a single type for example a binary array or a character array. In an embodiment the value of the single type used to hold the unmapped attributes is obtained by serializing an object comprising the unmapped attributes attrD attrE and attrF The serialized representation of the single object encoding all the unmapped attributes of object is stored in the virtual column

To read an object corresponding to a record in the table the object relational mapping module creates an instance of the object type associated with the table . The object relational mapping module assigns values from columns of the table to attributes of the object for example the value from columnA is assigned to attribute attrA the value from columnB is assigned to attribute attrB and the value from columnC is assigned to attribute attrC. Furthermore the object relational mapping module reads the value in the virtual column and decodes or deserializes the value to obtain the values of the three unmapped attributes attrD attrE and attrF

In some situations the virtual column for storing the unmapped attributes is included in a table different from the table . Accordingly the database stores an auxiliary table corresponding to the table comprising the virtual column. This auxiliary table is used to store the encoded value of all the unmapped attributes. An auxiliary table may include multiple virtual columns one for each table associated with an object type.

As shown in some of the attributes of the object are mapped to distinct columns of table . For example attribute attrA is mapped to columnA attribute attrB is mapped to columnB and attribute attrC is mapped to columnC . The remaining unmapped attributes attrD attrE and attrF are stored in the auxiliary table .

The auxiliary table includes a column name and a column value Each unmapped attribute from the object is stored as a separate row in the auxiliary table . Each row of the auxiliary table stores a representation of name of the attribute for example a character string representation and the value of the attribute. The value of the attribute may be converted to the type of the name column of the auxiliary table .

The value column is configured to hold values of different types. In an embodiment the value column stores all values as a generic type that can store different types of values for example binary type. In some embodiments the auxiliary table includes a type column not shown in to specify the type of the attribute. In other embodiments the object relational mapping module stores metadata describing the types of various attributes and uses the information to convert from the generic type of value column to the specific type of the attribute. For example the metadata may specify that attrD is of type integer and attrE and attrF are of type string.

If the object relational mapping module receives a read request the object relational mapping module converts the data from the value column to the appropriate type before storing the values in the object . Similarly while storing or updating the data in the relational model the object relational mapping module converts the value of each unmapped attributes to the generic type of the value column for example binary type.

The processor is an electronic device capable of executing computer readable instructions held in the memory . In addition to holding computer readable instructions the memory also holds data accessed by the processor . The storage device is a non transitory computer readable storage medium that also holds computer readable instructions and data. For example the storage device may be embodied as a solid state memory device a hard drive compact disk read only memory CD ROM a digital versatile disc DVD or a BLU RAY disc BD . The input device s may include a pointing device e.g. a mouse or track ball a keyboard a touch sensitive surface a camera a microphone sensors e.g. accelerometers or any other devices typically used to input data into the computer . The graphics adapter displays images and other information on the display . In some embodiments the display and an input device are integrated into a single component e.g. a touchscreen that includes a display and a touch sensitive surface . The network adapter couples the computing device to a network such as the network .

As is known in the art a computer can have additional different and or other components than those shown in . In addition the computer can lack certain illustrated components. In one embodiment a computer acting as a server may lack input device s a graphics adapter and or a display . Moreover the storage device can be local and or remote from the computer . For example the storage device can be embodied within a storage area network SAN or as a cloud storage service.

As is known in the art the computer is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program logic utilized to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment computer program modules are stored on the storage device loaded into the memory and executed by the processor .

As used herein a computer program product comprises one or more computer program modules that operate in conjunction to provide the functionality described herein. Thus a computer program product may be stored on the storage device loaded into the memory and executed by the processor to provide the functionality described herein.

Embodiments of the physical components described herein can include other and or different modules than the ones described here. In addition the functionality attributed to the modules can be performed by other or different modules in other embodiments. Moreover this description occasionally omits the term module for purposes of clarity and convenience.

The object model processor analyzes information describing the object model to build a representation of the object model comprising information used for performing the object relational mapping. In an embodiment the information describing the object model is available as comments included in source code that defines the corresponding objects for example using PHP language. In other embodiments the information describing the object model is available as a markup language for example XML extensible markup language . The object model processor generates a data structure describing the different types of objects available in the object model their attributes and information describing each attribute. The specification may define the table that corresponds to a particular type of object and the columns that correspond to different attributes of the object. The specification may also identify the name of the virtual column of the corresponding table. In some embodiments the name of the virtual column may be predefined for example virtual. 

The relational model processor analyzes information describing the relational model and builds a representation of the relational model comprising information used for performing the object relational mapping. In an embodiment the relational model processor uses application programming interface API provided by database that allows the relational model processor to retrieve metadata describing different tables of the database . The relational model processor obtains the list of tables that correspond to object types of the object model from the object model processor . In an embodiment the representation of the relational model identifies different tables used by the object model processor and columns of each table corresponding to mapped attributes of the object types as well as any virtual column of the table.

The model comparison module compares the representation of the object model build by object model processor with the representation of the relational model built by the relational model processor . The model comparison module identifies unmapped attributes of object types defined in the object model processor as the attributes that do not have a mapping specified to a distinct column of the relational model . The model comparison module marks these attributes as virtual. In other words the model comparison module identifies the unmapped attributes of each object that does not have a direct mapping specified to a particular column of a table and marks them as virtual. The attributes marked virtual are identified for being stored in a virtual column. In some embodiments the model comparison module performs the functionality of relational model processor by directly fetching the metadata describing the tables and comparing the metadata to the representation of the object model instead of building a separate representation of the relational model.

The model comparison module generates an annotated data model that is based on the result of comparison of the representation of object model with the relational model and stores the annotated data model in the annotated data model store . The annotated data model includes the information describing the tables corresponding to each object the mappings of attributes to columns including mapping from attributes to the virtual column. Accordingly the annotated data model store includes all the information to generate database statements corresponding to operations performed on the objects.

The migration module allows migration of data from the virtual column to other columns of the table if at some stage the table is altered to add columns for representing data of the attributes that were previously unmapped. For example assume that a set X of attributes are stored in the virtual column of a table. Assume that the table is altered to add columns directly mapping to at least of subset Y of attributes from the set X. The migration module processes the values stored in the virtual column to determine the values of the attributes of the set X selects the values of the subset Y and writes them to their corresponding columns. The migration module then selects the attributes of set X remaining after attributes of subset Y are removed and encodes them to store them back in the virtual column. In an embodiment the migration module executes an offline process that migrates all the rows of a table.

In some embodiments the migration module migrates records in response to requests received by the object relational mapping module from the application using the object relational mapping module . For example if the object relational mapping module receives a request to read a particular object the object relational mapping module uses this opportunity to also migrate the corresponding database record. In some embodiments the table storing the object data also includes a column to determine whether a particular row has been migrated or not.

The database operations module generates database statements corresponding to operations performed on objects in the object model . The database operations module executes these generated database statements to either retrieve data from the database or to update data in the database so as to ensure that the data of the relational model corresponds to the data of the object model .

The database operations module comprises modules object creation module object update module object read module and object delete module . The object creation module generates and executes database statements in response to creation of a new object in the object model . The object update module generates and executes database statements in response an update to an existing object in the object model . The object delete module generates and executes database statements in response a deletion of an existing object in the object model . The object read module generates and executes database statements that read data from the database and populate data in objects in the object model for example in response to a request to read a particular object identified by a unique attribute of the object or in response to a request to search for objects satisfying certain criteria. The details of various processes executed by these modules are further described herein.

The specification of the object model associates object types with corresponding tables in the relational model. At least some of the attributes of an object type are mapped to distinct columns of the corresponding table. These attributes are called mapped attributes. In other words there is a one to one mapping between mapped attributes of an object type and columns of the corresponding table. Some object types may have attributes that are not mapped to distinct columns of the corresponding table. These are referred to as unmapped attributes. The object relational mapping module identifies the unmapped attributes of an object type as follows.

The relational model processor retrieves metadata describing tables of the relational model. In an embodiment the relational model processor identifies the tables that map to object types in the object model and uses database APIs to retrieve metadata describing the identified tables. The relational model processor generates a representation of the relational model. The representation the relational model comprises description of various tables and columns of the tables.

The model comparison module compares the representation of metadata of the object model with the representation of the relational model. The model comparison module builds an annotated data model that stores associations between attributes of object types and columns of the corresponding table. The annotated data model is stored in the annotated data model store .

The model comparison module marks the attributes of each object type that do not map to a distinct column of a corresponding table as unmapped attributes. The model comparison module identifies unmapped attributes of an object type as attributes to be stored in a virtual column. The database operations module uses the annotated data model to perform mapping of the object model to the relational model for generating appropriate database queries or statements corresponding to different types of operations on objects. illustrate how some of the operations on objects in the object model are mapped to corresponding operations in the relational model.

The object read module identifies the table corresponding to the object type and identifies a record of the table corresponding to the object specified in the read request. In an embodiment the object read module builds a database query for example a select statement of SQL to retrieve one or more rows of the table. The database query includes the criteria specified in the read request to identify the object. For example if the read request identifies the object by a particular object identifier the database query includes a where clause specifying a value of a column corresponding to the object identifier.

The object read module populates the values of the mapped attributes of the object using the values of corresponding columns from the record. The object read module retrieves the value of the virtual column corresponding to the object. The object read module decodes the value of the virtual column for example by performing a deserialize operation that generates an auxiliary object comprising the unmapped attributes of the requested object from the value of the virtual column. The object read module assigns values of the unmapped attributes of the object being read using the decoded values of the attributes obtained from the value of the virtual column. The object read module returns the object with various attributes populated to the requestor of the object. If only a subset of the attributes of an object are being read the object read module checks if any of the unmapped attribute is requested for the object being read. If no unmapped attribute is requested the object read module does not load any value from the virtual column.

If the virtual column is a column of the table corresponding to the object type the value of the virtual column is read as another column of the record. If the virtual column is stored as a value in an auxiliary table the object read module performs a second read operation to read the value from the auxiliary table. If the unmapped attributes are stored as name value pairs in an auxiliary table the object read module may perform multiple read operations one for each name value pair associated with an unmapped attribute of the object being retrieved.

The object creation module executes the database statement generated to insert a record in the table. The inserted record comprises the values of the mapped attributes of the new object as the values of the corresponding columns. The object creation module encodes the unmapped attributes of the object to determine a single value. The object creation module uses the determined single value as the value for the virtual column corresponding to the new object created.

If the virtual column is a column of the table corresponding to the object type the object creation module can perform a single insert operation that inserts a record in the table comprising values for the columns corresponding to mapped attributes and the encoded value for the virtual column. If the virtual column is stored as a value in an auxiliary table the object creation module performs a second insert operation to insert the encoded value in the auxiliary table. If the unmapped attributes are stored as name value pairs in an auxiliary table the object creation module may perform multiple insert operations one for each name value pair associated with an unmapped attribute of the new object.

The object update module generates a database statement to update the values of the record. For example the object update module generates an UPDATE statement of SQL. The object update module executes the database statement generated to update the record corresponding to the object. In an embodiment the object update module ensures that the update statement updates only the mapped attributes of the object that were modified. If any unmapped attribute of the object was modified the object update module encodes all the unmapped attributes of the object to generate a new value for the virtual column. Accordingly if any unmapped attribute of an object is modified the object update module loads all unmapped attributes so they can be reserialized together. The object update module updates the value of the virtual column for the object based on the encoded value.

If the virtual column is a column of the table corresponding to the object type the object update module can perform a single update operation that updates any mapped attributes that need to be updated along with the encoded value for the virtual column. If the virtual column is stored as a value in an auxiliary table the object update module performs a second update operation to update the encoded value in the auxiliary table. If the unmapped attributes are stored as name value pairs in an auxiliary table the object update module may perform multiple update operations one for each name value pair associated with an unmapped attribute of the object that was modified.

If the object relational mapping module receives a request to delete an object of an object type the object delete module maps the delete request to delete the appropriate records from the tables corresponding to the object type from the database. If the virtual column is a column of the table corresponding to the object type the object delete module performs a single delete operation to delete the record of the table corresponding to the object being deleted. If the virtual column is stored as a value in an auxiliary table the object delete module performs a second delete operation to delete the corresponding row storing the encoded value in the auxiliary table. If the unmapped attributes are stored as name value pairs in an auxiliary table the object delete module may perform multiple delete operations one for deleting each row corresponding to a name value pair associated with an unmapped attribute of the object being deleted.

Some portions of above description describe the embodiments in terms of algorithmic processes or operations. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs comprising instructions for execution by a processor or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of functional operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example some embodiments may be described using the term connected to indicate that two or more elements are in direct physical or electrical contact with each other. In another example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the disclosure. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for systems disclosed herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the present invention is not limited to the precise construction and components disclosed herein and that various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope as defined in the appended claims.

