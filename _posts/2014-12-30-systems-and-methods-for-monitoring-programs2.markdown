---

title: Systems and methods for monitoring programs
abstract: A computer-implemented method for monitoring programs may include (1) placing a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing, (2) hooking an application programming interface call within the program in the enclave to monitor the behavior of the program, (3) inserting an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call, and (4) monitoring the behavior of the program by executing the program within the enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside the enclave. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552481&OS=09552481&RS=09552481
owner: Symantec Corporation
number: 09552481
owner_city: Mountain View
owner_country: US
publication_date: 20141230
---
Individuals and organizations often seek to protect their computing resources from attackers and malicious software. To protect their computing resources these individuals may install and use security software including anti malware software. The security software that individuals use to protect their computing resources may work in a variety of ways. For example security vendors may identify malicious programs and generate digital fingerprints that uniquely identify those programs. At client computing systems security software agents may generate digital fingerprints for newly encountered software and then compare the new digital fingerprints with the digital fingerprints known to be malicious.

To determine that a software program is malicious the security vendors may also perform a behavioral analysis of the program s behavior. For example the security vendors may monitor the actions and instructions that the program performs in a controlled environment on a backend server. More specifically the security vendors may monitor particular application programming interface calls that the program makes to external operating system resources. Based on an analysis of these calls the security vendors may more accurately categorize the program as safe or malicious. Nevertheless as disclosed in the present application attackers are developing techniques for bypassing the monitoring of application programming interface calls while still performing malicious functions. For example the programs may bypass one or more lines at the entry point of the application programming interface call thereby avoiding hooking and monitoring of the call as discussed further below. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for monitoring programs.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for monitoring programs by for example placing programs under evaluation within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing. By placing the programs within the enclave security vendors may force the programs to either use traditional application programming interface calls which may be hooked and monitored or else trigger an exception which will enable the security vendors to revise the program to enable hooking and monitoring as discussed further below.

In one example a computer implemented method for monitoring programs may include 1 placing a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing 2 hooking an application programming interface call within the program in the enclave to monitor the behavior of the program 3 inserting an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call and 4 monitoring the behavior of the program by executing the program within the enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside the enclave.

In some examples executing the program may include attempting by the program to bypass at least one instruction at an entry point of the application programming interface call. In further examples bypassing the instruction at the entry point of the application programming interface call further causes the program to bypass an enclave exit instruction.

In some examples bypassing the enclave exit instruction triggers an exception. In further examples triggering the exception invokes an exception handler that enables hooking of the application programming interface call. In one embodiment the exception handler replaces the application programming interface call with a call to another function that includes another instance of the application programming interface call wrapped by code that hooks the application programming interface call.

In some examples monitoring the behavior of the program may include altering the program during execution to enable further monitoring of application programming interface calls. In one embodiment prior to inserting the enclave entry instruction the program may already contain an enclave exit instruction.

In some examples the computer implemented method may further include evaluating whether the program is digitally signed. In further examples the computer implemented method may further include lowering a safety score for the program based on a determination that the program already contains an enclave exit instruction and a determination that the program is not digitally signed. In some examples the computer implemented method may further include performing static analysis to identify application programming interface calls within the program prior to executing the program within the enclave.

In one embodiment a system for implementing the above described method may include 1 a placement module stored in memory that places a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing 2 a hooking module stored in memory that hooks an application programming interface call within the program in the enclave to monitor the behavior of the program 3 an insertion module stored in memory that inserts an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call 4 a monitoring module stored in memory that monitors the behavior of the program by executing the program within the enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside the enclave and 5 at least one physical processor configured to execute the placement module the hooking module the insertion module and the monitoring module.

In some examples the above described method may be encoded as computer readable instructions on a non transitory computer readable medium. For example a computer readable medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 place a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing 2 hook an application programming interface call within the program in the enclave to monitor the behavior of the program 3 insert an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call and 4 monitor the behavior of the program by executing the program within the enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside the enclave.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for monitoring programs. As will be explained in greater detail below the systems and methods herein may effectively prevent malware programs from bypassing application programming interface call monitoring. More specifically the systems and methods herein may force the malware programs to use conventional application programming interface calls which may be hooked and monitored or else trigger an exception that enables security vendors to edit the programs to further enable hooking and monitoring.

The following will provide with reference to detailed descriptions of exemplary systems for monitoring programs. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the device illustrated in e.g. server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as database . In one example database may be configured to store programs as discussed further below. Programs may include newly encountered programs that are under evaluation. Similarly programs may include previously analyzed programs which may be further categorized as either safe or malicious or unknown . One or more of modules may further generate a digital fingerprint to identify previously categorized programs as discussed above. In some examples security vendors may then propagate these digital fingerprints to client side security agents to enable clients and customers to identify newly encountered programs as either safe or malicious.

Database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example database may represent a portion of server in computing system in and or portions of exemplary network architecture in . Alternatively database in may represent one or more physically separate devices capable of being accessed by a computing device such as server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a server . In one example server may be programmed with one or more of modules and or may store all or a portion of the data in database . Additionally or alternatively server may be programmed with one or more of modules and or may store all or a portion of the data in database .

In one embodiment one or more of modules from may when executed by at least one processor of server enable server to monitor programs. For example and as will be described in greater detail below placement module may place a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing. Hooking module may hook an application programming interface call within the program in enclave to monitor the behavior of the program. Insertion module may insert an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call . Monitoring module may monitor the behavior of the program by executing program within enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside enclave .

Server generally represents any type or form of computing device that is capable of monitoring and or evaluating programs for potential malware behavior as discussed further below. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

As illustrated in at step one or more of the systems described herein may place a program within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing. For example placement module may as part of server in place program within enclave that includes a protected address space that code outside of the protected address space is restricted from accessing.

As used herein the term enclave generally refers to a protected address space that e.g. some most and or all code outside of the protected address space is restricted from accessing. In some examples restricting the code from accessing the protected address space may include enabling the code to access the protected address space using only a special instruction. In some examples the term enclave may refer to the SOFTWARE GUARD EXTENSION functionality and CPU instructions provided by INTEL CORPORATION.

Placement module may place the program within the enclave in a variety of ways. For example placement module may create a copy of the program. Placement module may then insert the copy of the program within the enclave. Similarly in some examples placement module may revise or edit the program to enhance the evaluation of the program during execution within the enclave. In further examples placement module may use one or more special or enclave specific CPU instructions to place the program within the enclave.

In the example of placement module may place program within enclave . As further shown in program may further include call to an external application programming interface. For example a malware program may have limited functionality without making calls to external application programming interfaces thereby gaining access to operating system resources. The systems and methods described herein may monitor these attempts to access operating system resources thereby enabling the systems and methods to monitor the behavior of the program and ascertain whether the program engages in malicious functionality as discussed further below.

At step one or more of the systems described herein may hook an application programming interface call within the program in the enclave to monitor the behavior of the program. For example hooking module may as part of server in hook application programming interface call within program in enclave to monitor the behavior of the program.

Hooking module may hook the application programming interface call in a variety of ways. As used herein the phrase hooking generally refers to the practice of intercepting or otherwise modifying the functionality of a computing program to thereby arrest the function of the program and enable a security program to perform additional functionality such as program behavior and function call analysis as discussed further below. In some examples hooking an application programming interface call may include triggering an exception. In further examples hooking the application programming interface call may include redirecting function calls modifying or replacing function calls and or inserting new or additional function calls and or program code beyond the original function calls and code of the unmodified program. Notably as used herein the term hooked application programming interface call generally refers to the modified or unmodified call command after the performance of the hooking functionality.

At step one or more of the systems described herein may insert an enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of the application programming interface call. For example insertion module may as part of server in insert enclave entry instruction into code outside of the protected address space that the program accesses through the hooking of application programming interface call .

As used herein the term enclave entry instruction generally refers to a special or enclave specific command e.g. a CPU instruction that enables code outside of the enclave to gain entry inside of the enclave. Accordingly if program uses conventional calls to application programming interfaces e.g. without skipping lines as discussed above such that the calls are hooked and monitored instruction may enable execution to return within the enclave after exiting the enclave and gaining access to the application programming interface as well as corresponding operating system resources. Without executing the enclave specific command all code outside of the enclave may be restricted e.g. entirely restricted from accessing any code or data within the enclave.

Insertion module may insert the enclave entry instruction in a variety of ways. As further shown in program without modification may originally attempt to access API through call . Instead the attempt to call API may trigger an exception because placement module placed program within enclave . In some embodiments attempts e.g. all attempts by code within enclave to access data outside of enclave may trigger an exception unless the code uses a special or enclave specific enclave exit function as mentioned above and as further discussed below.

Because hooking module hooked call to API the systems and methods herein e.g. insertion module may redirect functionality of program from first accessing API . Instead insertion module may redirect functionality of program to code prior to accessing API through a call . In other words insertion module may insert code including an entry hooking code call and or instruction e.g. an enclave entry instruction as discussed above . Insertion module may insert these items upon program first triggering an exception upon an initial execution or upon any subsequent triggering of an exception.

In one embodiment prior to insertion module inserting the enclave entry instruction the program may already contain an enclave exit instruction. For example within program attackers may have already inserted an enclave exit instruction in an attempt to enable program to exit enclave without undermining the malware behavior of the program and without enabling hooking and monitoring of application programming interface calls. In these cases security vendors and any of modules may take further action to categorize program as malware potentially malware and or at risk for engaging in malware behavior. Specifically in some examples the systems and methods herein including insertion module may evaluate whether the program is digitally signed. In other words the inclusion of enclave entry and or exit instructions within a program should be regarded as a strong indicator that the program is at risk for engaging in malware behavior. Accordingly to compensate for that risk the authors and creators of these programs should digitally sign them with digital signatures that have known good reputations thereby reassuring security vendors and others that the programs are safe despite the use of risky enclave entry and or exit instructions. Consequently the systems and modules herein including insertion module may lower a safety score for the program based on a determination that the program already contains an enclave exit instruction and a determination that the program is not digitally signed. In these examples the systems and methods herein may omit one or more of steps and or may delete the preexisting enclave exit instruction prior to performing one or more of steps .

Returning to at step one or more of the systems described herein may monitor the behavior of the program by executing the program within the enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside the enclave. For example monitoring module may as part of server in monitor the behavior of the program by executing program within enclave in an attempt to force the program to use the hooked application programming interface call in order to access data outside enclave . As used herein the phrase force the program to use the hooked application programming interface call generally refers to executing the program in a manner that triggers an exception if the program attempts to access data outside of the enclave without using a hooked application programming interface call i.e. without the hooking having inserted enclave entry exit instructions .

Monitoring module may monitor the behavior of the program in a variety of ways. For example monitoring module and or another one of modules may perform static analysis to identify application programming interface calls within the program prior to executing the program within the enclave. During the static analysis and or dynamic analysis as discussed further below monitoring module may identify call to API . Accordingly after identifying application programming interface calls one or more of modules such as insertion module may hook call such as by performing any or all of the actions that an outside handler and an enclave handler perform as discussed below.

As first mentioned above one or more of modules such as insertion module and or monitoring module may monitor behavior of the program by inserting outside handler within external code as well as by inserting enclave handler within enclave . further shows both outside handler and enclave handler . Outside handler and or enclave handler may be invoked upon the triggering of an exception such as an exception triggered by program . Outside handler may insert code entry hooking code call and or instruction within external code . Instruction may return execution to within enclave beginning for example at a remainder of program . Similarly enclave handler may insert a function and call within enclave while also modifying and or redirecting call as discussed below. In some embodiments the triggering of the exception may first invoke outside handler followed by enclave handler .

In some examples program may attempt to bypass at least one instruction at an entry point of the application programming interface call. For example instead of jumping to a first line or command of API program may attempt to jump to a second or subsequent line or command while still obtaining all or substantially all of the functionality of API . In further examples attempting to bypass the instruction at the entry point of the application programming interface call further causes the program to bypass an enclave exit instruction. For example during a process of outside handler and enclave handler hooking call e.g. by replacing call to API with a call to function and or a call to entry which may be inserted by insertion module and or enclave handler insertion module may insert an enclave exit instruction such as call that jumps to entry instead of calling API directly. Accordingly if program attempts to call API directly while bypassing an entry point of API and or bypassing hooking of the call to API program will also effectively or necessarily bypass the enclave exit instruction e.g. call . In other words prior to hooking the unmodified call to external code without using an enclave exit instruction such as call will trigger an exception. Moreover triggering the exception will further invoke outside handler and or enclave handler as mentioned above and as discussed further below.

In some embodiments enclave handler may replace the application programming interface call e.g. call with a call to another function e.g. function and or code that invokes directly or indirectly another instance of the application programming interface call e.g. call wrapped by code e.g. hooking code that hooks the application programming interface call. In other words enclave handler may replace or modify call with another call that calls an additional function that directly or indirectly calls API while enabling hooking and monitoring of the application programming interface call. In general monitoring module may monitor the behavior of the program by altering the program during execution to enable further monitoring of application programming interface calls as discussed above regarding the functioning of outside handler and or enclave handler .

In view of the above the systems and methods described herein may force a dilemma upon attackers and the authors of malicious software. First the attackers may attempt to bypass hooking and monitoring of application programming interface calls by skipping conventional and hooked calls thereby triggering exceptions that prevent the program from successfully completing while enabling security software to revise the program to enable further hooking and monitoring. Second alternatively the attackers may simply use conventional and hooked calls which ensures that the security vendors and the analyses performed by their backend servers will be able to identify the application programming interface calls and analyze the behavior of the program. In this manner security vendors may repeatedly execute programs within an enclave thereby triggering an exception revise the code to hook the application programming interface call for the triggered exception and repeat this process until the program executes without any exceptions and all API calls are hooked and monitored.

In other words the systems and methods described herein prevent attackers and authors of malicious software from successfully engaging in malware functionality while also avoiding the hooking monitoring and analyzing of the malware functionality. Moreover by analyzing which specific application programming interface calls the program makes software vendors and their security analysis software may identify what operating system resources the program is attempting to access. Some of these resources such as a text file may be relatively innocuous and benign. Other resources such as a registry entry that specifies security settings for the operating system and or administrator or user privileges may be known as sensitive and high value resources that are likely targets of malware software. Similarly security vendors and or their security analysis software may associate based on frequencies derived from previously classified safe and malicious software different application programming interface calls and or operating system resources with varying levels of suspicion sensitivity and or association with malware activity.

As described above the instant disclosure generally relates to systems and methods for monitoring programs by for example placing programs under evaluation within an enclave that includes a protected address space that code outside of the protected address space is restricted from accessing. By placing the programs within the enclave security vendors may force the programs to either use traditional application programming interface calls which may be hooked and monitored or else trigger an exception which will enable the security vendors to revise the program to enable hooking and monitoring as discussed further above.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of physical processing unit e.g. a hardware implemented central processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable medium. The phrase computer readable medium as used herein generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives tape drives and floppy disks optical storage media e.g. Compact Disks CDs Digital Video Disks DVDs and BLU RAY disks electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for monitoring programs.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example the modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

In some examples all or a portion of exemplary system in may represent portions of a mobile computing environment. Mobile computing environments may be implemented by a wide range of mobile computing devices including mobile phones tablet computers e book readers personal digital assistants wearable computing devices e.g. computing devices with a head mounted display smartwatches etc. and the like. In some examples mobile computing environments may have one or more distinct features including for example reliance on battery power presenting only one foreground application at any given time remote management features touchscreen features location and movement data e.g. provided by Global Positioning Systems gyroscopes accelerometers etc. restricted platforms that restrict modifications to system level configurations and or that limit the ability of third party software to inspect the behavior of other applications controls to restrict the installation of applications e.g. to only originate from approved application stores etc. Various functions described herein may be provided for a mobile computing environment and or may interact with a mobile computing environment.

In addition all or a portion of exemplary system in may represent portions of interact with consume data produced by and or produce data consumed by one or more systems for information management. As used herein the phrase information management may refer to the protection organization and or storage of data. Examples of systems for information management may include without limitation storage systems backup systems archival systems replication systems high availability systems data search systems virtualization systems and the like.

In some embodiments all or a portion of exemplary system in may represent portions of produce data protected by and or communicate with one or more systems for information security. As used herein the phrase information security may refer to the control of access to protected data. Examples of systems for information security may include without limitation systems providing managed security services data loss prevention systems identity authentication systems access control systems encryption systems policy compliance systems intrusion detection and prevention systems electronic discovery systems and the like.

According to some examples all or a portion of exemplary system in may represent portions of communicate with and or receive protection from one or more systems for endpoint security. As used herein the phrase endpoint security may refer to the protection of endpoint systems from unauthorized and or illegitimate use access and or control. Examples of systems for endpoint protection may include without limitation anti malware systems user authentication systems encryption systems privacy systems spam filtering services and the like.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a program and or security setting to be transformed transform the program and or setting based on a malware analysis of the program e.g. by placing the program within an enclave and or modifying the program or external code as discussed above to facilitate the malware analysis output a result of the transformation to a security database and or backend server use the result of the transformation to identify malware and or protect end users from malware and store the result of the transformation to a database output device and or display. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms connected to and coupled to and their derivatives as used in the specification and claims are to be construed as permitting both direct and indirect i.e. via other elements or components connection. In addition the terms a or an as used in the specification and claims are to be construed as meaning at least one of. Finally for ease of use the terms including and having and their derivatives as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

