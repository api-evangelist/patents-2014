---

title: Dynamic role-based view definitions in a repository system
abstract: The present disclosure relates generally to techniques for displaying information in a repository system. In certain embodiments, techniques are described for dynamically determining a view, based on a role of a user, to display information stored in a repository system about one or more objects in a computing environment. An object can include an application, a process, a service, an endpoint device, a method, etc., which can exist in a computing environment. An object can include a resource (e.g., a data structure or a database) in a computing environment. The repository system can store information about an object and its attributes. The information stored in the repository system about an object can be dynamically displayed to a user based on the role associated with the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544198&OS=09544198&RS=09544198
owner: Oracle International Corporation
number: 09544198
owner_city: Redwood Shores
owner_country: US
publication_date: 20140916
---
The present application claims priority and benefit from U.S. Provisional Application No. 61 880 816 filed Sep. 20 2013 entitled DYNAMIC ROLE BASED VIEW DEFINITIONS IN A REPOSITORY SYSTEM the entire contents of which are incorporated herein by reference for all intents and purposes.

The present disclosure relates generally to computing systems and more generally to techniques for displaying information stored in a repository system.

Repository systems can perform various functions including storing and managing information about objects e.g. an application a process a service or an endpoint in a computing environment. The information stored in a repository system can be displayed in many different ways. In organizations that have many users accessing a repository system to view information about objects many different roles are generally defined and assigned to the users for viewing the information. In response to a user request to view information stored in the repository system the type of information and the manner in which that information is displayed to the user can vary based on the role s associated with the user when the user requests to view such information stored in the repository system. The content and the type of information viewable by a user in a role even varies between the roles defined in the repository system.

To display information in a repository system to different users associated with different roles preferences are typically configured for individual users and are used to determine the information shown to the users. The preferences for a user may be managed in a profile or a persona and are used to determine criteria for displaying information stored in a repository system to the user. Each profile is administered individually to adjust the manner in which information is presented to a user with respect to that user s role. As such a profile or a persona for each user may be have to be managed individually to control presentation of information in a repository based on the role s associated with the user.

The present disclosure relates generally to techniques for displaying information stored in a repository system. In certain embodiments dynamic views are used to determine what information stored in the repository system is to be displayed to a user and the manner in which the information is to be displayed.

In certain embodiments a repository system may store information for various objects and their associated metadata such as attributes of the objects. An object may correspond to an application a process a service an endpoint device a resource e.g. a database or a data structure a method etc. which can exist in a computing environment. An object can include a resource e.g. a data structure or a database in a computing environment. Information stored in the repository system about an object can be dynamically displayed to a user based on the role associated with the user. In one embodiment a view is dynamically determined based on a role of the user and the view is then displayed to the user. Information is displayed to the user based on the determined view and the view indicates the manner in which the information is displayed to the user.

In certain embodiments the repository system can store information about objects including their attributes in various different data structures or entities . An entity may include without restriction a linked list a record a hash table an array any data structure or the like. Information about an object may be stored in one or more entities within the repository. A single entity may store information about one or more objects in a computing environment. An entity may be associated with an entity type which corresponds to one or more types of objects. A type of an object may be based on an attribute of an object a function associated with an object information about the object a group to which an object belongs or combinations thereof. The repository system can retrieve at least one entity based on an object and or a type of object requested by a user.

In certain embodiments a user may send a request to the repository system requesting information for an object or object type. In response the repository system may configured to identify one or more entities storing information for the requested object or type of object. Information stored by the retrieved one or more entities may then be displayed to the user based on a role associated with a user. Information may be dynamically displayed by being presented in a format based on the role of the user requesting the information. The user s role i.e. the role associated with the requesting user determines what information from the determined one or more entities the requesting user is permitted to view. Accordingly a right to view information stored in an entity corresponding to an object or object type may be defined based on a user s role. The right may be defined for a role with respect to an object one or more attributes of an object and or a type of an object.

A role is thus used to determine what information in a repository system to display to a user and how to display the information. In certain embodiments one or more viewing rights can be associated with a role. A user associated with a particular role has the viewing rights associated with that particular role. A user can be associated with one or more roles. Examples of roles may include a developer an architect a guest an integrator or a leader. In some embodiments a user may indicate a preference for a default role when accessing the repository system. In some embodiments a default role may be defined for the repository system and the default role may be assigned to a user or the user may indicate a preference for the default role when accessing the repository system. In some embodiments a role may be associated with a user based on particular functions and or operations performed using the repository system.

In some embodiments information that can be viewed by a role associated with a user may be dynamically displayed in a particular manner e.g. layout arrangement format style or the like for the role. By dynamically determining based on a user s role a view of information in the repository system the information displayed to a user may be displayed in a manner that is useful to the role. The view of information may improves the user s ability and visualize objects that exist in a computing environment in a manner useful to the role. A view determined dynamically based on a user s role further reduces a burden on managing profiles or personas for each individual user and enables the repository system to determine the type of information about an object that may be relevant a user associated with a particular role.

There are various ways in which roles may be assigned to users. In one embodiment assignments may be done by a system administrator of the repository system or of the computing environment of which the repository system is a part. In some embodiments a role may be assigned to a user based on particular functions and or operations performed using the repository system.

In some embodiments a role associated with a user not only determines what information the user is permitted to view but also determines the manner in which the information is displayed to the user. For example a role associated with a requesting user may determine the layout arrangement format style etc. used for displaying the information to the user.

By determining based on a user s role a view of information in the repository system the information displayed to a user may be displayed in a manner that is useful to the role. The view of information may improves the user s ability and visualize objects that exist in a computing environment in a manner useful to the role. A view determined dynamically based on a user s role further reduces a burden on managing profiles or personas for each individual user and enables the repository system to determine the type of information about an object that may be relevant a user associated with a particular role.

In certain embodiments a repository system may use one or more view definition records to dynamically determine a view to display to a user. A view definition record can be associated with one or more different roles for accessing the repository system. A view definition record may indicate the types of objects and or the information about an object that can be displayed to a user associated with a role. A view definition record can identify a layout for displaying to a user associated with one or more roles information in an entity corresponding to an object. A view definition record can identify functions and or operations that can be performed by the one or more roles with respect to the entity.

In certain embodiments a view definition record can indicate one or more related types of entities for which information can be displayed to a user associated with a particular role. A type of an entity may correspond to a type of object. The view definition record can be dynamically customized by a user with a particular role e.g. an administrator who has access to managing and creating a view definition record. The role may not correspond to any of the roles indicates by the view definition record. The view definition record can indicate one or more user interface formats for displaying information in an entity to a user having a role associated with the view definition record. This is different from conventional techniques in which the information to be displayed to a user has to be determined upon the individual user s profile which can vary from user to user. The user interface format e.g. user interface layouts and or user interface components used to determine a manner by which to present information to a user may enable information to be presented in a similar format to users associated with a particular role.

Some embodiments can perform one or more techniques for dynamically determining a view to display about information corresponding to an object in a computing environment. One such technique can be a method which can be performed by a computing system or a computing device. The computing system or the computing device may implement a repository system or may be associated with a repository system. The method includes retrieving from a repository system an entity corresponding to an object. The object may be indicated in a request by a user to display information about the object. The method includes determining a type of object associated with the object. In some embodiments the method may include retrieving a plurality of entities corresponding to a type of object. The type of object may be indicated in a request by a user to display information about one or more objects associated with the type of object. The method includes determining a role associated with the user. The method includes identifying based on the type of object a view definition record. The view definition record may indicate a type of information to display from an entity based on the type of object. The view definition record may identify a user interface format for displaying the type of information to a particular role. The method includes determining based on the view definition record whether the determined role matches the particular role. The method includes upon determining that the determined role matches the particular role retrieving the identified user interface format. In some embodiments the method includes retrieving criteria from the identified view definition record. The criteria may indicate the type of information to display from an entity for the type of object. In some embodiments the method includes identifying information to display from an entity of the plurality of entities. The information may be identified based on the criteria. The method includes retrieving the identified user interface format when the particular role matches the determined role associated with the user. The method includes generating a graphical user interface to display information corresponding to the type of information from the retrieved entity. The graphical user interface may be generated based on the retrieved user interface format. In some embodiments the graphical user interface format is generated to display the information identified from an entity of the plurality of entities. The method includes displaying the generated graphical user interface. In some embodiments the method includes upon determining that the determined role of the user does not match the particular role identifying based on the type of object a default view definition record where the default view definition record indicates a default type of information to display from an entity based on the type of object and where the default view definition record identifies a default user interface format for displaying the default type of information retrieving the identified default user interface format and generating a graphical user interface to display information corresponding to the default type of information from the retrieved entity where the graphical interface is generated based on the retrieved default user interface format.

In certain embodiments the method performed by the computing system further includes retrieving criteria from the identified view definition record where the criteria indicates the type of information to display from an entity for the type of object.

In certain embodiments the method performed by the computing system further includes retrieving an additional user interface format identified based on information in an additional view definition record associated with an additional type of object. The additional type of object may be associated with the object. The additional type of object may be different from the type of object. The graphical user interface may be generated to display the information included in an additional entity corresponding to the object. The object may be associated with the additional type of object. The graphical user interface may be generated using the retrieved user interface format and the retrieved additional user interface format.

In certain embodiments the method performed by the computing system further includes determining using the identified view definition record a relationship between the additional type of object and the type of object and identifying the additional view definition record based on the relationship between the additional type of object and the type of object.

In certain embodiments the method performed by the computing system further includes receiving information indicating a change in the role of the user to a new role determining that the new role associated with the user does not match the particular role and updating the generated graphical user interface to display information corresponding to the type of information from the retrieved entity. The generated graphical user interface may be updated using a new user interface format.

In certain embodiments the method performed by the computing system further includes identifying based on the type of object a new view definition record to display information from the retrieved entity to the new role and retrieving the new user interface format identified by the new view definition record.

The following detailed description together with the accompanying drawings will provide a better understanding of the nature and advantages of embodiments of the present invention.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that various embodiments may be practiced without these specific details. The figures and description are not intended to be restrictive.

Systems depicted in some of the figures may be provided in various configurations. In some embodiments the systems may be configured as a distributed system where one or more components of the system are distributed across one or more networks in a cloud computing system.

The present disclosure relates generally to techniques for displaying information stored in a repository system. In certain embodiments dynamic views are used to determine what information stored in the repository system is to be displayed to a user and the manner in which the information is to be displayed.

In certain embodiments a repository system may store information for various objects and their associated metadata such as attributes of the objects. An object may correspond to an application a process a service e.g. a composite service an endpoint device e.g. a terminal computer a resource e.g. a database or a data structure a method etc. which can exist in a computing environment. An object can include a resource e.g. a data structure or a database in a computing environment. Information stored in the repository system about an object can be dynamically displayed to a user based on the role associated with the user. In one embodiment a view is dynamically determined based on a role of the user and the view is then displayed to the user. Information is displayed to the user based on the determined view and the view indicates the manner in which the information is displayed to the user.

In certain embodiments the repository system can store information about objects including their attributes in various different data structures or entities . An entity may include without restriction a linked list a record a hash table an array any data structure or the like. Information about an object may be stored in one or more entities within the repository. A single entity may store information about one or more objects in a computing environment. An entity may be associated with an entity type which corresponds to one or more types of objects. A type of an object may be based on an attribute of an object a function associated with an object information about the object a group to which an object belongs or combinations thereof. The repository system can retrieve at least one entity based on an object and or a type of object requested by a user.

In certain embodiments a user may send a request to the repository system requesting information for an object or object type. In response the repository system may be configured to identify one or more entities storing information for the requested object or type of object. Information stored by the retrieved one or more entities may then be displayed to the user based on a role associated with a user. Information may be dynamically displayed by being presented in a format based on the role of the user requesting the information. The user s role i.e. the role associated with the requesting user determines what information from the determined one or more entities the requesting user is permitted to view. Accordingly a right to view information stored in an entity corresponding to an object or object type may be defined based on a user s role. The right may be defined for a role with respect to an object one or more attributes of an object and or a type of an object.

A role is thus used to determine what information in a repository system to display to a user and how to display the information. In certain embodiments one or more viewing rights can be associated with a role. A user associated with a particular role has the viewing rights associated with that particular role. A user can be associated with one or more roles. Examples of roles may include a developer an architect a guest an integrator or a leader. In some embodiments a user may indicate a preference for a default role when accessing the repository system. In some embodiments a default role may be defined for the repository system and the default role may be assigned to a user or the user may indicate a preference for the default role when accessing the repository system. In some embodiments a role may be associated with a user based on particular functions and or operations performed using the repository system.

In some embodiments information that can be viewed by a role associated with a user may be dynamically displayed in a particular manner e.g. layout arrangement format style or the like for the role. By dynamically determining based on a user s role a view of information in the repository system the information displayed to a user may be displayed in a manner that is useful to the role. The view of information may improves the user s ability and visualize objects that exist in a computing environment in a manner useful to the role. A view determined dynamically based on a user s role further reduces a burden on managing profiles or personas for each individual user and enables the repository system to determine the type of information about an object that may be relevant a user associated with a particular role.

There are various ways in which roles may be assigned to users. In one embodiment assignments may be done by a system administrator of the repository system or of the computing environment of which the repository system is a part. In some embodiments a role may be assigned to a user based on particular functions and or operations performed using the repository system.

In some embodiments a role associated with a user not only determines what information the user is permitted to view but also determines the manner in which the information is displayed to the user. For example a role associated with a requesting user may determine the layout arrangement format style etc. used for displaying the information to the user.

By determining based on a user s role a view of information in the repository system the information displayed to a user may be displayed in a manner that is useful to the role. The view of information may improves the user s ability and visualize objects that exist in a computing environment in a manner useful to the role. A view determined dynamically based on a user s role further reduces a burden on managing profiles or personas for each individual user and enables the repository system to determine the type of information about an object that may be relevant a user associated with a particular role.

In certain embodiments a repository system may use one or more view definition records to dynamically determine a view to display to a user. A view definition record can be associated with one or more different roles for accessing the repository system. A view definition record may indicate the types of objects and or the information about an object that can be displayed to a user associated with a role. A view definition record can identify a layout for displaying to a user associated with one or more roles information in an entity corresponding to an object. A view definition record can identify functions and or operations that can be performed by the one or more roles with respect to the entity.

In certain embodiments a view definition record can indicate one or more related types of entities for which information can be displayed to a user associated with a particular role. A type of an entity may correspond to a type of object. The view definition record can be dynamically customized by a user with a particular role e.g. an administrator who has access to managing and creating a view definition record. The role may not correspond to any of the roles indicates by the view definition record. The view definition record can indicate one or more user interface formats for displaying information in an entity to a user having a role associated with the view definition record. This is different from conventional techniques in which the information to be displayed to a user has to be determined upon the individual user s profile which can vary from user to user. The user interface format e.g. user interface layouts and or user interface components used to determine a manner by which to present information to a user may enable information to be presented in a similar format to users associated with a particular role.

The computing environment can include a client system a repository system and one or more data stores. The data stores can include a view definitions store a format store and a repository store . The client system and the repository system can be implemented in different computing systems or a single computing system. The client system and the repository system can communicate with each other via a communication network not shown . Examples of communication networks can include the Internet a mobile network a wireless network a cellular network a local area network LAN a wide area network WAN other communication networks or combinations thereof.

The client system can include a computing system or a computing device. For example the client system can be implemented in a personal digital assistant PDA a tablet computer a laptop computer a desktop computer a wearable computer a pager etc. The client system can include one or more memory storage devices and one or more processors. A memory storage device can be accessible to the processor s and can include instructions stored thereon that when executed by the processor s cause the processor s to implement one or more operations disclosed herein. In various embodiments the client system can be configured to execute and operate a client application such as a web browser proprietary client applications or the like. The client applications can be accessible or operated via one or more network s .

The client system can be configured to communicate one or more requests e.g. a request to the repository system . A request can indicate at least one object or a type of object for which to display information e.g. metadata stored by the repository system . A request can be received from a user in response to interaction with the client system . The client system can receive one or more responses e.g. a response from the repository system . A response can include information about one or more objects requested by a user. The information about an object can include one or more attributes about the object. An attribute about an object can indicate information such as a location of the object in the computing environment an identifier of the object a type of the object and or a relationship to other types of objects.

In certain embodiments the client system can display a graphical user interface GUI e.g. a GUI . A GUI can facilitate access to information from the repository system . The GUI can display a view including one or more additional GUIs. The view can enable a user to specify criteria for the request such as an object or a type of object for which information is being requested from the repository system. The view can enable users to search browse view or edit information managed by the repository system . The information displayed in the view can display information including attributes about objects stored by the repository system.

The responses received by the client system can include one or more UI elements and or one or more GUIs to present the view . In some embodiments a response can include one or more UI formats and or UI elements which can be used to dynamically generate the view . Dynamic generation of the view is described below and further with reference to . The view can be generated based on a role associated with the user that sends a request e.g. the request to the repository system . The view can be displayed to present information about objects stored in the repository system . In certain embodiments information about an object may be chosen to be displayed based on a role associated with a user.

A right to view information about an object may be defined based on a user s role. The right may be defined for a role with respect to an object one or more attributes of an object and or a type of an object. A role may be a way by which to manage information corresponding to objects displayed from a repository system. One or more viewing rights can be associated with a role. A role can then be associated or assigned to a user requesting information from the repository system. A user can be assigned or associated with multiple roles. The information about the objects displayed in the view can be accessible based on users associated with one or more roles enabling access to the information about an object. Examples of roles may include a developer an architect a guest an integrator a leader an administrator a tester or other types of roles for accessing the repository system .

The repository system can include a computing system or a computing device. The repository system can be implemented using hardware firmware software or combinations thereof. The repository system can manage access to and retrieval of information stored in one or more data stores e.g. the view definitions store the format store or the repository store . In certain embodiments the repository system can be implemented with one or more computing devices e.g. a server computer which can perform operations for the repository system .

In certain embodiments the server computer can be configured to support deployment of different types of applications to one or more client systems e.g. the client system in a distributed manner. For example the server computer can support the execution of one or more applications which can be accessed by one or more client systems e.g. the client system . The applications can be provided to the client system to enable a user to operate the repository system . The one or more applications can be accessed and operated via the GUI . In certain embodiments the server computer can exchange communication with the client system to provide the client system with information about objects stored in the repository system .

The server computer can implement a repository manager to manage information in the repository store . The repository manager can store and manage information about objects including their attributes in various different data structures or entities . An entity may include without restriction a linked list a record a hash table an array any data structure or the like. Information about an object may be stored in one or more entities within the repository. A single entity may store information e.g. attributes about one or more objects in a computing environment. An attribute can include information such as a location of the object an identifier of the object a type of object and or a relationship to other objects or types of objects. An entity may be associated with an entity type which corresponds to one or more types of objects. A type of an object may be based on an attribute of an object a function associated with an object information about the object a group to which an object belongs or combinations thereof. The repository system can identify and retrieve an entity based on the object requested by a user.

In certain embodiments the entities can be managed in the repository store based on a hierarchical metadata model derived from one or more formalized metadata models. The resource manager can generate an entity corresponding to an object that is discovered or identified in a computing environment. In certain embodiments the resource manager can generate one or more entities based on information about an object provided by a user via the client system .

In certain embodiments the repository manager can use the repository store to store other information associated with the entities . For example the repository manager can store in the repository store one or more data structures corresponding to an entity type. An entity type can correspond to a type of object and can store information e.g. attributes about the type of object. A structure of an entity can be based on one or more of the entity types. As such an entity can store information corresponding to an entity type. The repository manager can identify one or more entities for an object based on a type of the object corresponding to an entity type.

The repository manager can process the requests received from the client to obtain information about an object corresponding to an entity. The repository manager can perform operations to access the repository store based on the request . Access to the entities can be based on the role of the user sending the request . The request can include criteria indicating the objects for which the user is requesting information to be displayed in the view .

The server computer can include or implement a view manager . The view manager can generate and manage a view of information stored by the repository system . The view manager can dynamically determine one or more views e.g. the view to be displayed in the GUI . The view can be generated based on a view definition record . The view manager can store and manage one or more view definition records in the view definitions store . A view definition record can be a data structure which can be without restriction a linked list a record a hash table an array any data structure or the like. A view definition record can include information to identify one or more UI formats for dynamically generating the view for entities having one or more entity types indicated in the request from a user. In some embodiments the view can be dynamically generated by the view manager and then communicated in the response to the client system for display in the GUI . In some embodiments the repository system can include with the response the view definition record and the information about one or more entities corresponding to an object requested by the user. The client system can include a view manager that can dynamically generate the view based on the information included in the response .

A view definition record e.g. any one of the view definition records can include information indicating one or more UI formats for displaying information in an entities having one or more of the entity types associated with the view definition record . A view definition record can include a criterion which may indicate one or more different roles permitted to view information generated for display using that view definition record . In some embodiments a different view definition record can correspond to one or more roles which are enabled to request information for an entity type. A view definition record can indicate one or more different UI formats tailored for one or more roles. In this manner different views based on an entity type can be displayed to a user based on a role associated with a user that requests information from the repository system . The repository system can determine a specific UI format to present users with information about an object stored in one or more entities. The format of a view definition record is described further below with reference to . In certain embodiments one or more view definition records can be generated based on information e.g. criteria received from a user e.g. an administrator or predefined criteria. For example the criteria for a view definition record can be received via a GUI such as one or more of the GUIs described with reference to .

The view manager can manage and store one or more UI formats in the format store . A UI format can indicate one or more other attributes for displaying information stored in the repository store . A UI format can include or indicate one or more UI elements or components to be displayed in a view generated based on the UI format . The format store can store one or more UI elements and or components of the one or more UI formats . In some embodiments the one or more UI elements components can be identified by the view definition record . The format store can store one or more default UI formats that can be used to generate the view . The default UI formats can be used to generate the view for any type of role and or any entity type. The view manager can use a default UI format to generate the view upon determining that criteria for the UI formats is not satisfied for information to be displayed for a requested object.

The present disclosure may alleviate a burden on administrators of a repository system by determining a view of information an object based on the role of a user and the object for which information is being requested. In doing so an administrator of a repository system may not have to manage profiles and or personas for individual users to determine the information to display from the repository system and the manner in which to display the information. By storing records e.g. a view definition record which may indicate a UI format for displaying information based on a relation between a type of an object and a type of role customization of individual profiles or personas can be reduced or eliminated. Further a view definition record can be easily modified by an administrator to add or remove different roles that presented with a view based on the view definition record. An administrator can modify or create a view definition record to provide a view for similar entity types such as those which can be displayed in a similar UI format. With little effort an administrator can update a view definition record to add or remove roles and or entity types to accommodate for frequent changes in roles and the types of information managed by the repository system.

As explained above the repository system can dynamically determine a view to display information stored by the repository system based on a role of a user accessing the repository system . The repository system can be implemented as one or more functional blocks or modules configured to perform various operations for accessing information stored by the repository system . The repository manager can include a store manager to manage information about objects stored in one or more entities in the repository store . The repository manager can include a request handler to manage requests received from a client system e.g. the client system . The view manager can include a user profile manager a view definition manager a view definition generator a view generator and a role manager .

The request handler can manage receiving requests e.g. the request from a client system. The request handler can process a request and provide information to the store manager to process a request for an entity.

The store manager can manage e.g. create update or delete information e.g. the entities stored in the repository store about objects that are discovered or identified in a computing environment. For example the store manager can create update or delete one or more entity types for one or more of the entities . In certain embodiments the entities can be updated or deleted based on changes in the entities themselves. In some embodiments the store manager can store information indicating relationships between the entity types. The entities can be updated or deleted based on changes in the information stored in association with the entities . Such information may include entity types or relationships between entity types. The store manager can retrieve information in an entity based on the object and or a type of object requested by a user. The store manager can retrieve information from an entity in the repository store .

The view generator can dynamically generate one or more views e.g. the view displayed in the GUI . A view e.g. the GUI in can display information about an object indicated by the request . The view generator can generate a view of information for an object based on one or more view definition records identified based on the object or the type of object requested by a user. The view generator can generate the view for the object based on a view definition record that indicates a role of the user making the request . For an entity corresponding to a requested object the view generator can generate the view of information permitted for the role based on a criterion in the identified view definition record.

The role manager can manage rights of a user associated with a role to view information stored by the repository system . For example the role manager can determine whether a user based on a role associated with the user has access to view information about an object stored in the repository system . The role manager can determine the information about an object that can be viewed. In certain embodiments a view definition record may include a criterion that indicates one or more roles which can view the information. In some embodiments a view definition record may indicate particular attributes that can be viewed by a role. Based on the criterion the role manager can determine whether a role associated with a user matches a role indicated by the criterion in the view definition record .

The user profile manager can manage one or more profiles corresponding to one or more roles for viewing information in the repository system . A profile can indicate one or more roles for viewing information in the repository system . In some embodiments a profile can indicate attributes for using the repository system . The user profile manager can determine a role of the user based on a profile associated with the user. In some embodiments each role can correspond to a user profile defined for that role.

In some embodiments a view can include one or more of the GUIs e.g. the GUIs in that enable a user e.g. an administrator to create update and or delete a view definition record . In some embodiments a view can includes a repository preferences GUI e.g. the GUI in to enable a user to select a profile corresponding to a role for operating the repository system . The selected profile may be used to determine the role of a user operating the repository system .

The view generator can process one of the view definition records to determine one or more UI formats for displaying information in an entity corresponding to a requested object. In some embodiments a UI format can be determined based on one or more data structures identified in a view definition record . In specific embodiments a view definition record can indicate one or more regions to present in a view of information corresponding to one or more entity types indicated in the view definition record . Each region can correspond to a task flow which can indicate a set of activities that can be performed for the entity types displayed for the region. In some embodiments the view definition record can indicate one or more UI layouts to display information in each entity that are related to a requested entity type.

Based on the regions and associated layouts included on those regions the view generator can generate a view model used to generate a graphical user interface to display information about an object. A view model can provide a mapping that defines a UI format which can be used to dynamically generate a view of information. The structure and format of a view definition record is described below with reference to . In certain embodiments determination of the view model and the mapping of the view model to a UI format are described with reference to . In certain embodiments the view generator can generate all or a portion of the view to be displayed by the GUI . One of ordinary skill in the art may appreciate that performance for generating the view may be enhanced by generating all or a portion of the view at the client system .

In some embodiments the view generator can determine the UI elements and or components to include in the view based on a selected one of the view definition records . The view definition record can indicate locations to UI elements e.g. a widget a control a button an input field etc. to be included in the dynamic view. The locations can correspond to one or more locations in a data store e.g. the format store that can contain UI elements. The UI elements in the data store can include locations of UI artifacts e.g. a wrapper task flow a page definition file and or a page fragment . The view definition record can indicate the locations e.g. a region within a UI format to display the UI elements. In some embodiments the UI elements in the selected view definition record can correspond to the functions associated with the region.

The view definition generator can generate a view definition record based on one or more criteria provided by a user through one or more GUIs e.g. the GUIs in . A criterion can indicate an attribute to be associated with a view. An attribute can be used to determine information in an entity that can be displayed. A criterion can indicate one or more entity types and or one or more entities accessible to a user presented with a view displayed based on the view definition record . Information can be displayed based on the view definition record for an entity that satisfies the criterion. In some embodiments a criterion can indicate one or more roles that can access information displayed based on the entities that can be viewed according to the view definition record . A view definition record can be generated in a format as described with reference to .

In some embodiments a default view definition record can be created for one or more attributes that are chosen by default for a user having a particular role e.g. a default role . The default view definition record can be used to display information included in an entity when no view definition record exists for displaying information in the entity. In some embodiments the default view definition record can be created for a role e.g. a default role that a user can be assigned by default when accessing the repository system.

The view definition manager can manage access to configure e.g. create read update and delete one or more of the view definition records . In some embodiments the view definition manager can permit access to create read update and or delete one or more view definition records based on a role of the user of the repository system . For example the view definition manager can permit an administrator to create and update view definition records . In such embodiments certain roles may be permitted to prevent unauthorized users from creating modifying or deleting view definition records. In some embodiments the view definition manager may obtain information determined by the role manager with respect to information in a view definition record that can be accessed by a role associated with a user.

The view definition manager can manage access to information stored in the view definition records . Upon receiving a request e.g. the request from a user the view definition manager can identify and retrieve view definition records . The view definition manager can search the view definitions store to identify a view definition record that is associated with an entity corresponding to an object requested by a user. The view definition manager can analyze attributes and or criterion in the view definition records in any order or any manner. The criterion may be analyzed to determine attributes about an object that can be displayed to a user associated with a role.

The view definition record can include a view definition . The view definition e.g. a data structure or a flat file can include general information about a dynamic view that can be generated based on the view definition record . The general information can include information displayed in a main UI of the dynamic view. The view definition can include information used to determine how to generate the dynamic view. The view definition can include at least one attribute and or at least one criterion indicating one or more entities from which information can be displayed in a dynamic view e.g. the view based on the view definition record . The view definition can include information identifying a name and or a description for the dynamic view generated based on the view definition record . A dynamic view can be generated based on the view definition record for entities that are associated with one or more of the entity types . In some embodiments information in different entities having the same entity type may be dynamically displayed in different views such that information corresponding to certain entities having entity types can be displayed based on the view definition record .

The view definition can include target criteria which can provide one or more additional criterion to determine entities based on which information can be displayed using the view definition record . For example entities such as a Web Services WS Service and a Representational State Transfer REST Service can have the same entity type however information in one of these entities can be displayed based on the view definition record for the entity that satisfies the target criteria . In some embodiments the target criteria can include criteria in a query language such as a Java Persistence Query Language JPQL . The entity type along with the target criteria can be used to determine which entities can be displayed based on the view definition record .

The view definition record can include one or more UI formats e.g. the UI format which can be used to generate the dynamic view e.g. the view for information corresponding to an entity that satisfies the criteria of the view definition record . In certain embodiments the view definition can indicate one or more UI locations of UI elements e.g. a widget a control a button an input field etc. to be included in the dynamic view. The UI locations can include one or more locations in a data store e.g. the format store which can contain UI elements. The UI elements in the data store can include locations of UI artifacts. A UI artifact can include one or more of any of the following a wrapper task flow a page definition file and or a page fragment. A UI format can be determined based on the UI elements stored at the UI locations and one or more UI components e.g. regions displayed in the dynamic view. Each region can display information based on a task flow definition corresponding to a task flow. Information about the task flows can be stored in a data store e.g. the format store . A task flow provides a modular approach for defining control flow in a GUI. The task flow can relate to a set of activities that can be performed in the GUI for entities that are presented based on the view definition record .

The view definition record can include one or more region definitions . Each region definition can correspond to a task flow. The region definition can indicate criteria for displaying UI elements corresponding to a region of a GUI. The region definition can include attributes corresponding to a UI format of the region. Generating a view dynamically from a UI format can be described further with reference to .

The region definition can include information that defines at least one attribute and or at least one criterion of a region of a UI format determined based on the view definition record . A region identifier in the region definition can indicate a region corresponding to the region definition . The region definition can include a description of a region. The region definition can include one or more UI attributes of a UI generated for a region in a dynamic view.

The UI attributes of the region definition can include a UI layout type that indicates a type of layout of a region. For example the UI layout type can indicate a function layout or a generic layout. The region definition can include one or more UI layout identifiers that identify a portion of a UI layout for the region corresponding to the region definition . The region definition can indicate one or more UI configuration files that can store additional information about a UI configuration of the region. In some embodiments the UI configuration files can include one or more extended markup language XML configuration files that indicate UI display properties for the region. The UI display properties can indicate style display properties control types list of values other types of display properties or a combination thereof.

The region definition can include information about one or more relationship configurations . The relationship configuration can indicate one or more relationship configurations. A relationship configuration can be a data structure that provides information for displaying within a region information corresponding to entities that have the entity type s and that satisfy the target criteria . For example the region definition can identify a relationship configuration and a relationship configuration . Each of the relationship configurations can be represented as a node e.g. a location or an area within a region identified by the region definition e.g. the region definition .

A relationship configuration e.g. the relationship configuration can provide a configuration for displaying information corresponding to entities for a node of a region in a dynamic view. A relationship configuration can be defined for each node in a region. A node can be defined for each distinct type of data identified as having the entity type and an associated entity type. For example the associated entity type can include an interface an endpoint a deployment or other type of resource or object that can be associated with the entity type e.g. composite . The view definition record can include the relationship configuration for a node corresponding to an entity type associated with the entity type and the relationship configuration for another node corresponding to another entity type associated with the entity type .

In the relationship configuration can include an entity type for an entity that has one of the entity types and that satisfies the target criteria . The entity type of an entity can be associated with the entity type . The relationship configuration can indicate a node name corresponding to a node which is displayed in a portion of a region. The relationship configuration can include a type path associated with the entity type . The type path can indicate a path in a hierarchical data model from a root entity type to the entity type . The type path can be used to identify a data structure corresponding to the entity type in the hierarchical data model. The data structure corresponding to the entity type can provide attributes of the entity type . The attributes for the entity type can be used to determine what information to display about the entities having the entity type and how to display the information about those entities. The relationship configuration may indicate one or more UI attribute configuration files . A UI attribute configuration file may indicate UI attributes for generating a UI corresponding to a node for the relationship configuration .

The relationship configuration can include attribute configuration information . The attribute configuration information may indicate one or more attribute configuration s . The attribute configuration s can identify one or more attributes configurations . Each of the attribute configurations can be associated with a data structure. Each attribute configuration can indicate a configuration for displaying information about attributes related to the entities having an entity type e.g. the entity type of a relationship configuration e.g. the relationship configuration .

An attribute configuration e.g. the attribute configuration can include a name e.g. a name of the attribute configuration. The attribute configuration can include UI display properties . The UI display properties can indicate information about displaying information about one or more attributes corresponding to an entity type e.g. the entity type of the relationship configuration e.g. the relationship configuration . In some embodiments the UI display properties can indicate a UI configuration file e.g. a UI configuration XML file . The UI display properties can indicate properties for displaying UI elements for presenting the attributes corresponding to the entity type. For example the UI display properties can indicate a style display properties control type s list of values other types of display properties or a combination thereof.

The UI display properties can identify one or more UI components such as a UI component . The UI component can include a UI layout and or one or more UI page components . The UI layout and or the UI page components can be used to generate a portion of a UI corresponding to a node identified by a relationship configuration . Each of the attribute configurations can be associated with one or more other attribute configurations and . Each of the attribute configurations and can identify configurations for displaying information in each attribute e.g. extended attributes related to an attribute for an attribute configuration e.g. the attribute configuration . The attributes displayed for the attribute configurations and can be attributes that are extended from the entity type .

By determining a format for displaying information based on stored task flows corresponding to an entity type the repository system can dynamically determine UI elements to display a feature and or a function available an entity associated with the entity type. The stored task flows can indicate the type of activities and or features for accessing the entity type. By indicating UI elements and or attributes in a view definition record with respect to displaying information about an object corresponding to an entity having a certain entity type a display presented based on the entity type can be customized without a need to modify individual profiles to specify display attributes for those entity types. The UI format identified based on the view definition record can enable a repository system to selectively determine the features to display information in entities to certain types of roles. Identification of the properties and UI elements for each region enable an administrator to modify a source of UI components and elements rather than having to modify a specific display profile. Further a view definition record can enable the repository system to determine a layout that is most effective for certain roles when viewing entities having one or more of the entity types indicated by the view definition record.

In certain embodiments the view model can be used to determine the UI format for displaying information in one or more entities in a dynamic view e.g. the view . The layout of the view model can be generated based on the view definition record e.g. the view definition record for the one or more entities requested to be displayed for the dynamic view. The view model can be determined based on a predetermined format that is modified based on the view definition record. In some embodiments the view model can be generated dynamically based on the view definition record.

The view model can be associated with an identifier e.g. UUID corresponding to information each of the entities that can be displayed based on UI format determined from the view model . The view model can be associated with a view name. The view name can correspond to a name associated with the view definition record. The view model can indicate attributes for the UI format . For example the attributes e.g. a view name or a UUID associated with a main view in the view model can be used to determine a entity view task flow to be displayed in the UI format . The task flow of the UI format can display general information from an entity in a dynamic view. For example the general information can include information in the view definition of the view definition record .

Using the view definition record the task flow can be identified and selected from a UI store e.g. the format store associated with the repository system. The task flow can indicate a method and or layout for displayed information in entities that have the entity type e.g. the entity type and that satisfy the target criteria for a view definition record corresponding to the view model . The view definition can be used to populate the task flow of the UI format . The dynamic view can be generated based on the UI format and the information indicated in the view definition record.

The view model can include one or more region models . Each region model can correspond to a region ID. The region ID can be used to identify each region in the UI format . Each region model can correspond to a region definition e.g. the region definition of a view definition record. The UI format can include one or more regions . Each region can be an area in the UI format . The region can be generated for the dynamic view based on the corresponding region definition indicated by the region model .

The view model can include one or more nodes . Each node can correspond to a different node indicated by the view definition record. For example each node can correspond to a node identified in a relationship configuration e.g. the relationship configuration or the relationship configuration . Each node can map to a page fragment within a region . Each node can include a node entity . Each node entity can correspond to a different entity in the node . Each node entity can include one or more entity attributes . The entity attributes can be used to present information for the node . The entity attributes can correspond to attributes indicated by an attribute configuration in the view definition record .

Each region can contain one or more page fragments . Each page fragment can correspond to a task flow of activities corresponding to the node . The task flow corresponding to the page fragment can be part of a single larger task flow that for the region . In some embodiments the page fragment can be a document that can be rendered as content in a page. For example the page fragment can be a Java server page JSP document that can be rendered as content in another JSP e.g. a JSP of the region .

The page fragment can be retrieved from a data store e.g. the format store . The page fragment can be identified based on the attributes of the node in the view model . The page fragments can contains one or more components to include in the UI format for the node. A component can indicate a format for presentation of the node in the region . In some embodiments the page fragment can be identified based on one or more of the entity attributes of the node .

The resulting UI format determined based on the view model can be used to dynamically generate a view e.g. the view to display to a user in response to a request to view information about entities. The task flows and the page fragments can all be used to generate the view. Described below with reference to is an example of a dynamic view that can be generated based on the UI format determined from the mapping .

In a dynamic view of entities generated based on a view definition record e.g. the view definition record is shown according to an embodiment of the present invention. In certain embodiments the view can be generated based on a UI format e.g. the UI format determined based on a view definition record. The view can be generated by the repository system or the client system of . The view can be displayed in response to a request to access e.g. create read update or delete one or more objects which correspond to one or more entities that are associated with one or more entity types. In the example shown in the view presents a dynamic view of an object having a composite type. The view can be displayed based on criteria provided by a user to access entities associated with the composite type. The view can display information in an entity such as a BPEL process1 that has one or more of the types of objects chosen for the view such as the composite type.

To generate the view a view definition record e.g. the view definition record can be identified corresponding to the entity types requested by a user having a role for accessing the repository system. Upon identifying a view definition record a UI format e.g. the UI format may be determined and used to generate the view . The UI format can be determined based on a mapping such as the mapping described with reference to .

The view can present an entity view that provides information about the entity types to be displayed in the view . The entity view can be generated based on the entity view wrapper task flow e.g. the entity view wrapper task flow of a UI format e.g. the UI format mapped based on a view definition record associated with the entity types. The entity view can include a name an entity type a status and a categorization . Each of the attributes can be obtained from the view definition record and or from a view model e.g. the view model determined based on the view definition record . The name of the entity view can corresponds to a view name associated with a view model e.g. the view model . The entity type can indicate one or more entity types e.g. a composite entity type that are presented in the entity view . The status can indicate a status of a user s access. The categorization can indicate a categorization of the entity types shown in the view .

The view can include one or more regions such as . Each of the regions can correspond to a region e.g. the region in a UI format . As explained above the region in a UI format can be mapped based on a region definition e.g. the region definition indicated in a view definition record associated with the entities having the entity type e.g. the entity type presented in the view .

Each of the regions can display information about entities having an entity type corresponding to one or more nodes included in a region. For example the region can include one or more nodes each of which can have information about entities corresponding to an entity type of the corresponding node. In the region a node can have entities associated with a first entity type e.g. a service deployment a node for entities associated with a second entity type e.g. an endpoint and a node having entities associated with a third entity type e.g. an interface . The information from the entities displayed in the nodes can include one or more UI element for the entities. For example the node can display UI elements associated with one or more entities . The UI elements associated with the entities can display information about attributes of those entities .

Beginning at block a view definition record is created to define a view for displaying information about a type of object or an object in the repository system to one or more roles. The view definition record may include at least one criterion indicating the type of information about a type of object or an object that can be displayed. A criterion may be specified in the view definition record by identifying one or more entities and or one or more entity types in the repository system that can be viewed by a user and more specifically the information that can be viewed from the entity or the entities satisfying the criterion. The criterion can specified with respect to one or more roles for accessing the repository system. A view definition record may be used to identify a UI format for displaying information about an object or a type of object to user with a particular role. In some embodiments a UI format may be specified with respect to an entity type corresponding to a type of object. The view definition record can be generated as described above with references to .

In one example the process can create the view definition record of to include one or more criteria defining the type of object s corresponding to an entity type e.g. the entity type that can be viewed in a repository system. The view definition record can include a UI format such as the format defined based on one or more region definitions e.g. the region definition . The view definition record can indicate one or more roles such as target roles which are permitted to view information included in entities that satisfy the criteria of the view definition record .

At block a request is received to display a view of information about an object e.g. Composite Service A . In some embodiments the request may include a type of object e.g. a composite service to indicate one or more objects in a repository system. The request can be made by a user associated with a role. The role may correspond to a role for operating or using the repository system. For example a role may be a developer role in which the user is requesting to view attributes about a composite service stored in the repository system.

At block a type of object may be determined for the request. The type of object may be indicated by the request. In some embodiments the type of object of an object may be determined by locating an entity corresponding to the object in the repository system. The type of object may be determined based on an entity type of an entity corresponding to the object.

At block one or more entities are retrieved from the repository system. An entity may be retrieved for an object or the type of object of an object requested by a user.

At block a role associated with the user may be determined. For example a role may be determined based on information e.g. login information identifying a user submitting the request. In some embodiments a user may be identified based on information identifying a client system used to submit a request. The information identifying the client system may be used to identify the user and determine the role associated with the user. The repository system may store information identifying a user in association with one or more roles for the user.

At block the process can include identifying based on the type of object a view for displaying information about one or more objects associated with the type of object. For example one or more view definition records can be identified based on the type of object. A view definition record may be identified based on an entity type corresponding to the type of object e.g. a composite service . A view may be defined based on a view definition record. A view definition record may indicate a type of information to display e.g. an attribute of an entity from an entity corresponding to entity type. A view definition record may identify a format e.g. a user interface format for displaying the type of information corresponding to an entity. The format may be identified at a data source which stores information about the format. In some embodiments a view definition record may include one or more criteria for displaying information about objects associated with the type of object. For example a criterion may indicate one or more attributes of an object that can be displayed. The criteria can be associated with a role for viewing information in the repository system.

At block process may include determining whether a determined role associated with a user matches the particular role for which a view is identified. In some embodiments the determined role associated with the user may be compared to the particular role indicated by a view definition record identified at block . Upon determining that the determined role matches the particular role process may proceed to blocks and to generate the identified view of information about one or more objects requested by a user. Upon determining that the determined role does not match the particular role process may proceed to blocks and to generate a default view of information about one or more objects requested by a user.

At block to retrieve a default UI format identified by a default view definition record. A default view definition record may include information to generate a default view for displaying a default type of information about one or more objects associated with a type of object. A default view definition record may be identified based on the type of object. A default view definition record may be identified based on an entity type corresponding to the type of object e.g. a composite service .

A default view may be defined based on a default view definition record. A default view definition record may indicate a default type of information to display e.g. an attribute of an entity from an entity corresponding to entity type. A default view definition record may identify a default format e.g. a user interface format for displaying the type of information corresponding to an entity. The default format may be located a data source which stores information about the format. In some embodiments a default view definition record may include one or more criteria for displaying information about objects associated with the type of object. For example a criterion may indicate one or more attributes of an object that can be displayed. The criteria can be associated with a default role for viewing information in the repository system.

At block the process can generate a default GUI based on the default UI format identified by the default view. The default UI format may indicate a manner in which to display the default type of information from the retrieved entity entities. The GUI based on the default UI format.

Returning to block when the determined role associated with the user matches the particular role for an identified view at block a UI format can be retrieved for the identified view. For example the process can retrieve a UI format e.g. the UI format identified by a view definition record as explained above with reference to .

At block the process can generate a GUI e.g. the GUI to display the type of information from the retrieved entity. The GUI can be generated based on the UI format retrieved at block .

Then at block the default GUI generated at block or the GUI generated at block may be displayed. The process can proceed to end at block .

In certain embodiments the process can be implemented by certain embodiments of the repository system . The repository system can implement the process to determine a UI format to display a type of information in an entity corresponding to an object or a type of object requested by a user associated with a role. In certain embodiments block can be performed during design time portion that is different from run time portion when blocks can be performed. Design time and run time may occur in any order. In some embodiments run time may occur subsequent to e.g. immediately after design time . For example block can be performed during the design time when one or more view definition records can be created.

Process can be performed in an iterative manner for design time the run time or both. For example block can be iteratively performed during design time for each view definition record based on criteria associated with one of a plurality of roles. In another example blocks can be iteratively during run time for each request e.g. the request received from a user of the repository system. It will be appreciated that process is illustrative and that variations and modifications are possible. Action or operations described for process as sequential may be executed in parallel and or order of operations may be varied and operations may be modified combined added or omitted.

The GUI can include one or more interactive elements which can receive input indicating one or more preferences to operate the repository system. For example the GUI can include a repository preferences element to cause the GUI to display one or more interactive elements that enable the user to specify preferences for operating the repository system. The GUI can include a page size element which can receive input indicating preferences for a display page size to display information accessed from the repository system. The GUI can include a profile element which can receive input indicating selection of a view profile or a role for operating the repository system. Input received from selection of the profile element can be provided in the request to the repository system . The repository system can use the role to determine how to display information in an entity in response to a request as explained above.

The GUI can include one or more interactive elements to receive input indicating criteria for a view definition record. An interactive element may receive input indicting a name to be associated with a view definition record. An interactive element may receive input indicating a description of the view definition record. An interactive element may receive input indicating a title for the view definition record. The GUI can include an interactive element to receive input indicating one or more roles to be associated with a view definition record created for the criteria indicated by the GUI . Interaction with the interactive element may cause a different GUI e.g. the GUI described with reference to to be displayed that enables a user to choose one or more roles from a list of roles identified for the repository system.

The GUI can include one or more interactive elements to indicate criteria for determining one or more types of entities that can be viewed in a GUI for a user having a role indicated by the interactive element . In some embodiments the GUI can include an interactive element to receive input that indicates one or more entity types. The entity types can be used to determine the entities that can be presented to a user. In some embodiments the GUI can include an interactive element to receive input that indicates target criteria for presenting entities to a user. The target criteria can be in a query language which can be used to determine entities that can be viewed by a user. As explained above the criteria received via the GUI can be used for criteria to generate a view definition record.

In certain embodiments the GUI can include an interactive element . The interactive element can receive input which indicates one or more view definition templates. A view definition template can provide criteria to create a view definition record for one or more roles for accessing a repository system. In certain embodiments interacting with the interactive element can cause one or more additional GUIs to be displayed e.g. the GUI of . The additional GUI s can enable a user to indicate one or more view definition templates stored by a repository system.

The GUI can include one or more interactive elements such as interactive elements and . The interactive element can enable a user to choose from a list of one or more roles for accessing a repository system. Interaction with the interactive element can cause one or more roles to be chosen for a view definition record. The selected roles can be displayed in the GUI via the interactive element . One or more roles that are selected can be removed from selection for the view definition record. Roles that are removed may be removed from display with the interactive element .

The GUI enables a user to choose view definition records to manage e.g. update or delete for the chosen role. In certain embodiments the GUI can display one or more interactive elements to choose the view definitions associated with the role.

In certain embodiments the interactive element can display information about a name of one or more view definitions that include the chosen role. Each of the view definitions may correspond to a view definition record stored by a repository system.

The interactive element may display information about one or more view definition records chosen to for management. The interactive element may be configured to enable a user to choose view definition records to be displayed by the interactive element . The GUI may include other interactive elements to choose view definition records to be displayed by the interactive element . In some embodiments the interactive element may be configured to enable a user to remove one or more view definition records identified by the interactive element . The GUI may include other interactive elements to remove one or more view definition records identified by the interactive element .

The GUI may include an interactive element corresponding to a name of a view definition record. The interactive element may indicate a name of a view definition record the details of which are displayed in the GUI . In some embodiments the interactive element may enable a user to indicate or choose a view definition name of a view definition record to edit. Subsequently the GUI may be refreshed to display a view definition record and its attributes or criteria.

The GUI may include an interactive element that enables a user to choose and or edit an entity type of a view definition record. The GUI may include an interactive element that enables a user to choose and or edit a title of a view definition record.

The GUI may include an interactive element that enables a user to choose and or edit a role for a view definition record. The GUI may include an interactive element that enables a user to choose and or edit a description for a view definition record. The GUI may include an interactive element that enables a user to choose and or edit target criteria for a view definition record.

In certain embodiments the GUI may include additional content such as descriptive information for a view definition. For example the GUI may include an interactive element to enable a user to add content to a view definition record. In another example the GUI may include an interactive element to choose and or edit an entity overview of a view definition record. Other interactive elements may enable a user to choose and or edit product release s and solution component attachment s related to components identified for a view definition record.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. The services or software applications can include nonvirtual and virtual environments. Virtual environments can include those used for virtual events tradeshows simulators classrooms shopping exchanges and enterprises whether two or three dimensional 3D representations page based logical environments or otherwise. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. Server can include one or more virtual machines running virtual operating systems or other computing architectures involving virtualization. One or more flexible pools of logical storage devices can be virtualized to maintain virtual storage devices for the server. Virtual networks can be controlled by server using software defined networking. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands. The view definitions store the format store and or the repository store of can be included in the one or more databases and .

It should be appreciated that cloud infrastructure system depicted in the figure may have other components than those depicted. Further the embodiment shown in the figure is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. For example the cloud infrastructure system can include or implement the repository system of . In some other embodiments cloud infrastructure system may have more or fewer components than shown in the figure may combine two or more components or may have a different configuration or arrangement of components.

Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

Network s may facilitate communications and exchange of data between clients and and cloud infrastructure system . Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including those described above for network s .

Cloud infrastructure system may comprise one or more computers and or servers that may include those described above for server .

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

In some examples a service in a computer network cloud infrastructure may include protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and a script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

In certain embodiments cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

Large volumes of data sometimes referred to as big data can be hosted and or manipulated by the infrastructure system on many levels and at different scales. Such data can include data sets that are so large and complex that it can be difficult to process using typical database management tools or traditional data processing applications. For example terabytes of data may be difficult to store retrieve and process using personal computers or their rack based counterparts. Such sizes of data can be difficult to work with using most current relational database management systems and desktop statistics and visualization packages. They can require massively parallel processing software running thousands of server computers beyond the structure of commonly used software tools to capture curate manage and process the data within a tolerable elapsed time.

Extremely large data sets can be stored and manipulated by analysts and researchers to visualize large amounts of data detect trends and or otherwise interact with the data. Tens hundreds or thousands of processors linked in parallel can act upon such data in order to present it or simulate external forces on the data or what it represents. These data sets can involve structured data such as that organized in a database or otherwise according to a structured model and or unstructured data e.g. emails images data blobs binary large objects web pages complex event processing . By leveraging an ability of an embodiment to relatively quickly focus more or fewer computing resources upon an objective the cloud infrastructure system may be better available to carry out tasks on large data sets based on demand from a business government agency research organization private individual group of like minded individuals or organizations or other entity.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model in which cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model in which cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system and the services provided by cloud infrastructure system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

In some embodiments the services provided by cloud infrastructure system may include one or more services provided under Software as a Service SaaS category Platform as a Service PaaS category Infrastructure as a Service IaaS category or other categories of services including hybrid services. A customer via a subscription order may order one or more services provided by cloud infrastructure system . Cloud infrastructure system then performs processing to provide the services in the customer s subscription order.

In some embodiments the services provided by cloud infrastructure system may include without limitation application services platform services and infrastructure services. In some examples application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example the SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations.

In some embodiments platform services may be provided by the cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by the cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of platform services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by the PaaS platform customers can employ programming languages and tools supported by the cloud infrastructure system and also control the deployed services. In some embodiments platform services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services. In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications and Java cloud services may provide a platform for customers to deploy Java applications in the cloud infrastructure system.

Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system may also include infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment infrastructure resources may include pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In some embodiments resources in cloud infrastructure system may be shared by multiple users and dynamically re allocated per demand. Additionally resources may be allocated to users in different time zones. For example cloud infrastructure system may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re allocation of the same resources to another set of users located in a different time zone thereby maximizing the utilization of resources.

In certain embodiments a number of internal shared services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support an email service a notification service a file transfer service and the like.

In certain embodiments cloud infrastructure system may provide comprehensive management of cloud services e.g. SaaS PaaS and IaaS services in the cloud infrastructure system. In one embodiment cloud management functionality may include capabilities for provisioning managing and tracking a customer s subscription received by cloud infrastructure system and the like.

In one embodiment as depicted in the figure cloud management functionality may be provided by one or more modules such as an order management module an order orchestration module an order provisioning module an order management and monitoring module and an identity management module . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination.

In exemplary operation a customer using a client device such as client device or may interact with cloud infrastructure system by requesting one or more services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access a cloud UI cloud UI cloud UI and or cloud UI and place a subscription order via these UIs. The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to.

After an order has been placed by the customer the order information is received via the cloud UIs and or .

At operation the order is stored in order database . Order database can be one of several databases operated by cloud infrastructure system and operated in conjunction with other system elements.

At operation the order information is forwarded to an order management module . In some instances order management module may be configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order.

At operation information regarding the order is communicated to an order orchestration module . Order orchestration module may utilize the order information to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances order orchestration module may orchestrate the provisioning of resources to support the subscribed services using the services of order provisioning module .

In certain embodiments order orchestration module enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. At operation upon receiving an order for a new subscription order orchestration module sends a request to order provisioning module to allocate resources and configure those resources needed to fulfill the subscription order. Order provisioning module enables the allocation of resources for the services ordered by the customer. Order provisioning module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. Order orchestration module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

At operation once the services and resources are provisioned a notification of the provided service may be sent to customers on client devices and or by order provisioning module of cloud infrastructure system .

At operation the customer s subscription order may be managed and tracked by an order management and monitoring module . In some instances order management and monitoring module may be configured to collect usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time.

In certain embodiments cloud infrastructure system may include an identity management module . Identity management module may be configured to provide identity services such as access management and authorization services in cloud infrastructure system . In some embodiments identity management module may control information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. Identity management module may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include UI input devices and UI output devices. UI input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. UI input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural UI using gestures and spoken commands. UI input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally UI input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Siri navigator through voice commands.

UI input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally UI input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. UI input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

UI output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example UI output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible non transitory computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. When specified this can also include nontangible transitory computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social media networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

In the foregoing specification aspects of the invention are described with reference to specific embodiments thereof but those skilled in the art will recognize that the invention is not limited thereto. Various features and aspects of the above described invention may be used individually or jointly. Further embodiments can be utilized in any number of environments and applications beyond those described herein without departing from the broader spirit and scope of the specification. The specification and drawings are accordingly to be regarded as illustrative rather than restrictive.

