---

title: User interface widget unit sharing for application user interface distribution
abstract: Embodiments of the invention address deficiencies of the art in respect to application sharing and provide a method, system and computer program product for user interface widget unit based application sharing. In a first embodiment, a data processing system for user interface widget unit based application sharing, can include a dynamic widget server communicatively linked to a dynamic widget browser. The dynamic widget browser can include program code enabled to render a user interface including one or more remote dynamic widgets peered to corresponding dynamic widgets for a dynamic view for an application launched by the dynamic widget server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09549007&OS=09549007&RS=09549007
owner: International Business Machines Corporation
number: 09549007
owner_city: Armonk
owner_country: US
publication_date: 20141117
---
This application is a Continuation of U.S. application Ser. No. 11 243 424 filed Oct. 4 2005 now allowed which is incorporated herein by reference in their entirety.

The present invention relates to the field of collaborative computing and more particularly to user interface sharing in a collaborative environment.

The rapid development of the Internet has led to advanced modes of communication and collaboration. Using the Internet as a backbone individuals worldwide can converge in cyberspace to share ideas documents and images in a manner not previously possible through conventional telephony and video conferencing. To facilitate collaboration over the Internet a substantial collection of technologies and protocols have been assembled to effectively deliver audio video and data over the single data communications medium of the Internet. These technologies include instant messaging Internet telephony and application sharing.

In conventional application sharing an application host can distribute imagery of an application operating in the host to one or more application viewers distributed about the computer communications network. The imagery can include not only the screens rendered in association with the operation of the shared application but also the visual presentation of mouse pointer movements and the like. Generally speaking however the imagery can include only discrete snap shots of the actual display of the operating application in the host system. In this way the application viewers can be given the appearance of sharing an application though each viewer merely views a shadow rendering of only a portion of the operation of the shared application.

Pixel based application sharing technology allows the capturing of a series of images which represent the display of an application. The images can be transmitted across the computer communications network which when rendered can provide the illusion of duplicating the display of the application in its host environment. Nevertheless the underlying technology used to support application sharing in this manner includes substantial limitations in that an entire application user interface or complete desktop user interface must be shared. For example pixel based solutions like virtual network computing VNC provide facilities to share only portions of a user interface. In VNC the pixels of a screen region are captured and transmitted to a remote station. However VNC provides mere coarse grained control over the user interface to be shared while the user interface gratuity is a screen region which brings some substantial limitations.

More particularly pixel based screen sharing requires more network bandwidth for example the size of data representing a fifty 50 by thirty 30 button is approximately one kilobyte. Secondly it is very hard for the pixel based screen sharing to understand the content of the user interface to be shared to meet the requirements of advanced operations for example to re arrange the layout of the user interface to be shared to fit the form factor of the remote station or to remove some of the private information from the user interface before transmitting the information. In consequence sharing an application in a heterogeneous environment where the form factors of devices are diverse network capability is widely different and people have their personal privacy concerns becomes a great challenge for the traditional pixel based application sharing technologies.

Embodiments of the present invention address deficiencies of the art in respect to application sharing and provide a novel and non obvious method system and computer program product for user interface widget unit based application sharing. In a first embodiment a data processing system for user interface widget unit based application sharing can include a dynamic widget server communicatively linked to a dynamic widget browser. The dynamic widget browser can include program code enabled to render a user interface including one or more remote dynamic widgets peered to corresponding dynamic widgets for a dynamic view for an application launched by the dynamic widget server.

In another embodiment of the invention a method for user interface widget unit based application sharing can include separating an application user interface for a shareable application into movable and non movable graphical user interface widgets distributing remote peer instances of the movable graphical user interface widgets to a client host for incorporation in a synchronized dynamic view for the application and synchronizing the remote peer instances with corresponding instances of the movable graphical user interface widgets in a server host.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for user interface widget unit based application sharing. In accordance with an embodiment of the present invention an application user interface for a shareable application can be separated into movable and non movable graphical user interface widget units. Each movable graphical user interface widget unit can correspond to a different portion of the application where the application has been distributed across different server hosts.

The movable graphical user interface widget units can be distributed to different client hosts for incorporation in a client user interface for the application. The state of each instance of a distributed movable graphical user interface widget in different ones of the client hosts can be synchronized with the state of the application. In this way the user interface for an application can be shared regardless of whether the application resides in a single server host or whether the portions of the application are distributed across different server hosts.

To facilitate user interface widget unit based application sharing a distributed view server can provide a framework which allows a client host to discover the movable user interface widgets for an application on a server host and allows end users to operate on the movable user interface widgets for distributed rendering. Also a distributed dynamic standard widget library can be included which provides applications with standard graphic Application Programming Interface API but implements each API in a distributed fashion. As a result an application built upon the library enjoys the option to show a portion or the entire user interface within a broad range of remote hosts and to receive events from the remote hosts. For example the dynamic standard widget library can implement APIs of the standard widget toolkit SWT known in the art and can extend behaviors of the SWT to permit the distributed rendering of SWT widgets in remote client hosts and the receipt of user interface events from the remote hosts for distributed SWT widgets in a server host to acquire a user s input in the user interface and to keep synchronization among the source user interface and its distributed copies.

In further illustration is a schematic illustration of a data processing system configured for user interface widget unit based application sharing. The data processing system can include a server host coupled to one or more client hosts over a computer communications network which can exist within one computing device or across multiple computing devices only one client host shown for simplicity of illustration . Each client host can include a dynamic widget browser configured to browse applications and corresponding views available for distribution to the client host and to render user interface widgets within selected views for selected applications.

The server host can include one or more applications . The applications can be coupled to a registry which can include a listing of applications and dynamic application views available for distribution to remote ones of the client hosts . The applications further can be coupled to a dynamic view server . The dynamic view server can include user and policy logic A listener logic B session logic C and application builder logic D. Finally the dynamic widget server can be coupled to a dynamic workbench factory configured to produce one or more dynamic views in a container based upon one or more dynamic widgets in a dynamic widget library . Notably the dynamic widget browser can acquire user input over a distributed user interface and can detect any change to the distributed user interface. The user input and change events can be provided to the dynamic view server for the purpose of synchronization.

In operation applications can be registered with the dynamic view server specifying the identity of the application and associated dynamic views for storage in the registry . Once the applications have been registered with the dynamic view server listener logic B can receive requests from the client hosts . The requests can include discovery requests to identify available applications and corresponding dynamic views application control requests to launch or close selected ones of the applications and dynamic view control requests to copy move multicast and broadcast a selected dynamic view to fit into a broad wide of use cases. For example a user can broadcast a dynamic view to a group of people in the case of conference.

An end user can use the dynamic widget browser to interact with the dynamic view server . As part of end user interactions the dynamic view server can validate requests of client hosts using user and policy logic A. The interactions available to the end user can include browsing available applications and corresponding dynamic views listed in the registry . The interactions further can include launching selected ones of the applications and requiring that portions of the user interface for the selected ones of the applications are rendered in the dynamic widget browser . For each one of the applications launched in a dynamic widget browser session management logic C can create a corresponding session.

Once the corresponding session has been created the dynamic widget browser can report to the dynamic view server with its capability and characteristics for rendering a distributed dynamic view. The capability and characteristics can be used by the application builder logic D for dynamic view construction. The corresponding session further can maintain the dynamic state of the dynamic widget browser for example a list of active distributed dynamic view shown within the widget browser . The dynamic state can be used by the distributed view server to restore content within the dynamic widget browser in the case of an unexpected network exception.

Notably for each user interface request received from a client host the application builder logic D can create a user interface layout for the request. Specifically the application builder logic D can call the dynamic workbench factory to create a background container for the response. The application builder logic D further can create one or more dynamic views for the container . When the application builder logic D constructs a dynamic view the application builder logic D can consult user and policy logic A to remove selected widgets that contain privacy information for example e mail address and mobile phone numbers from the source view. The application builder logic D further can re arrange the layout of the source view to adapt to the characteristics of the target distributed view browser . For example if the size of the source view is much larger than the physical size of the window of the distributed view browser the application builder logic D can separate the source view into several pages. Finally the user interface layout can be transferred to the client host via the dynamic widget library . The dynamic widget browser in turn can receive the user interface layout and can call the local widget library for rendering. The local widget library in turn can call native user interface API to render the user interface layout in the client host .

To facilitate the distribution and synchronization of each user interface widget in a shared view an underlying user interface toolkit can be extended to permit peering with remotely disposed and rendered widgets. For example as shown in an SWT widget defined within a dynamic SWT library can be extended to include an init . . . method and an add listener . . . method . The init . . . method can include program code enabled to create a remote peer widget coupled to a local widget . The init . . . method can called when the application attempts to create a new instance of an SWT widget . The init . . . method in response can transmit a notification to the distributed view browser that consequently creates an instance of the remote peer widget .

The add listener . . . method in turn can include program code enabled to create a remote peer listener B and add the remote peer listener B to the remote peer widget . An application can use the add listener . . . method to add an event listener A to a widget instance . The add listener . . . method in turn can create a peer listener B within the distributed view browser. Next the peer listener can register itself to the remote peer widget by calling the add listener . . . method B of the remote peer widget .

In operation calls to the public methods A of the SWT widget can be forwarded to corresponding methods B of the remote peer widget . Moreover events occurring in the local widget can be routed to the widget through communications between a listener for the widget and the peer listener B. To support multiple users a listener table A clone factory B and synchronization engine C can be included in dynamic SWT library used to produce SWT widgets . Finally matched dynamic SWT sessions A B can be established to facilitate communications between remote and local SWT libraries.

In more particular illustration is an event diagram illustrating a process for user interface widget unit based application sharing in the architecture of . As shown in a client can forward a request to the dynamic view server to launch an application. The dynamic view server in turn can create a user session for the application. Subsequently the created user session can forward a request to create a view to the application builder. Thereafter the application builder can create a widget workbench and the application builder can repeatedly create one or more dynamic views. Each of the created dynamic views in turn can create and initiate local widgets which can in turn create remote peer widgets. Finally the workbench can open the view for even processing.

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

