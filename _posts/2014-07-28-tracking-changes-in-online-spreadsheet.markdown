---

title: Tracking changes in on-line spreadsheet
abstract: A computer-implemented method for method for tracking changes in an internet-accessible document is disclosed. The method includes providing, with a presentation server system, data for producing a display of a document at a client computing device; receiving, at the presentation server system from a data server system, a timestamp that is sent by the data server system in response to an indication by a user of the client computing device to record changes to the document, wherein the timestamp indicates a time after which changes have been made to the document; and providing from the presentation server system to the data server system data indicating changes made to the document since a time corresponding to the timestamp.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286342&OS=09286342&RS=09286342
owner: GOOGLE INC.
number: 09286342
owner_city: Mountain View
owner_country: US
publication_date: 20140728
---
This nonprovisional patent application is a continuation of U.S. patent application Ser. No. 12 764 501 currently pending filed Apr. 21 2010 which claims the benefit of priority to U.S. Provisional Application No. 61 171 420 filed on Apr. 21 2009 each of which is expressly incorporated herein by reference in its entirety.

Internet based data services can provide users with access to enormous amounts of information. For example search engines can identify relevant information in unstructured data such as web pages and images in response to search queries submitted by users. Users can also be provided access to structured data such as pricing data for purchases products or services data for allowing advertisers to manage on line advertising programs e.g. by selecting keywords and bid amounts and other such applications. Often such large groups of data are managed and presented via a dedicated user interface such as a storefront for shopping data and other similar mechanisms.

One approach by which many people interact with large amounts of structured data is the spreadsheet application. A spreadsheet arranges data in rows and columns that define spreadsheet cells and users may be given various options for interacting with and editing the data. For example users may type in new data values in a cell may globally replace data may make computations on the data and may perform a number of other functions. Thus many people may prefer to use a spreadsheet as an interface component because they can use the spreadsheet flexibly without the need for special training.

This document discusses system and techniques for providing access to data to users over a network. An application that manages a large data store may rely on a separate spreadsheet presentation application to present data from the data store to a user via a spreadsheet on a web page. The web page can be served by the main application and the spreadsheet presentation application can serve the spreadsheet and related data into a frame or similar structure that is defined on the web page. The application that manages the data store can pass data that a user requests to the spreadsheet presentation application which can populate the spreadsheet with the data so that the user can see the data and manipulate it.

In one particular implementation the system and techniques can be used to allow advertisers to see data regarding on line targeted advertising programs. Such programs may allow advertisers to set bid prices they are willing to pay for their advertisements and also to identify keywords that will trigger the display of their advertisements. As advertisers learn the keywords that are most effective for them they may want to change their chosen triggering keywords in various manners. The systems and techniques described here can allow such advertisers to review and manipulate keyword and other data across a large number of advertisements in one or more advertising campaigns.

In certain implementations the systems and techniques described here can provide one or more benefits. For example certain systems and techniques can be used to provide bulk data entry updates and deletions for a web based application. As another example systems and techniques can be used to provide user customizable reporting data analysis and data export. Applications such as contact lists calendars and e mail to name a few possibilities can benefit from providing advanced data manipulation and data presentation services. Such services may be provided in certain implementations by a sub system that does not have advanced presentation capabilities by passing data from a data store to a sub system that does have such capabilities. As a result an information provider can provide improved interaction to users of the system without having to fully implement a new presentation system so that the users benefit and the provider benefits.

In one implementation a computer implemented method for tracking changes in an internet accessible document is disclosed. The method comprises providing with a presentation server system data for producing a display of a document at a client computing device. The method also comprises receiving at the presentation server system from a data server system a timestamp that is sent by the data server system in response to an indication by a user of the client computing device to record changes to the document wherein the timestamp indicates a time after which changes have been made to the document. In addition the method comprises providing from the presentation server system to the data server system data indicating changes made to the document since a time corresponding to the timestamp.

In another implementation a computer implemented system for tracking changes in internet accessible document is disclosed. The system comprises a data server system programmed to communicate with a client computing device and a data storage system and to serve one or more web pages to the client computing device and a presentation server system in communication with the data server system to receive data from the data server system and to format the data for presentation in a document on the one or more web pages. The presentation server system is arranged to provide a timestamp for the document to the data server system to receive the timestamp back from the data server system and to provide data representing changes made to the document by a user of the client computing device in response to receipt of the date stamp.

In yet another implementation a computer implemented system for tracking changes in internet accessible documents is disclosed. The system comprises a data server system programmed to communicate with a client computing device and a data storage system and to serve one or more web pages to the client computing device a presentation server system in communication with the data server system to receive data from the data server system and to format the data for presentation in a document on the one or more web pages and means for communicating changes in the data between the presentation server system and the data server system.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

This document describes systems and techniques by which a user may access documents and use such documents to edit data that is stored in a central data store. Such access may be provided by a client device running a browser application that loads a web page from the Internet. For example the web page may include one or more embedded documents e.g. spreadsheets calendars text based documents etc. for providing data access. The embedded documents may be populated with data from the data store and a user may interact with the documents and their related data. The user may also perform data operations including bulk operations such as adding editing updating and deleting. Embedded documents may thus provide general functionality for providing access to a variety of data sources.

An embedded document may be modular in that it may be incorporated easily in various web pages and may include computer code for providing data access and interaction. For example the computer code may be executed by a browser application a client device or a server device associated with the embedded document. Using computer code the embedded document may communicate with a web page containing the document with other embedded documents included by the web page or with a server application.

In some implementations the embedded document may be provided from a domain that differs from the domain of the provider of the main document. For example the document may be provided from data.example.com while an embedded spreadsheet may be provided by spreadsheet.example.com. The top level domain of the providers may be different in certain circumstances also. Using such an approach a server system that focuses on managing access to data but has limited capabilities for presenting the data to user can rely on another server service that has rich mechanisms for presenting data such as a spreadsheet server system. Such splitting of responsibilities may be achieved by having each server system communicate directly with a web page with one server system communicating with the page or a frame in the page and the other server system communicating with a different frame in the page.

The client computing device in this example may take a variety of forms such as personal computer laptop computer and mobile devices such as personal digital assistants notebooks and smart phones. From the various servers that provide data for the device a data server communicates with a data store and can in turn communicate with a spreadsheet server . The data server can respond to a user request for information by gather data from the data store providing certain data to the device and providing all or some of the data either in its original form or a reformatted form to the spreadsheet server which may in turn insert the data into the document and server the document to the device . For the purpose of illustration the type of document provided by the system is described as a spreadsheet although other types of documents can also be provided. Components in the system can also be connected by any appropriate kind of network such as a network that includes the Internet.

For example by using a web browser the client computing device can load a container document form the data server which may be one or more servers that make up a sub system but are shown for clarity here as a single server . The container document may include information e.g. user specific data scripting code etc. supplied by the data server . The container document may also include one or more frames e.g. iframes for embedding documents as illustrated by a frame displayed on the page. In the present example code running in the frame may reference a document server e.g. the spreadsheet server and the document server may supply a document for presentation in he frame where the document is represented in he figure by a set of visible spreadsheet cells and a set of hidden spreadsheet cells where each set of cells in this example is defined by one or more spreadsheet columns .

In some implementations the client computing device may provide an embedded document with data. For example upon receiving the document the container document can request for the data server or some other server to retrieve data from the data store . For example a user of device may request to see a presentation of a large amount of structured data relating to their account on an internet service associated with data server .

In some implementations the document server e.g. the spreadsheet server may serve the document and then may supply data to the document. For example code in the container document can request data from the data server which may cause the data server to provide data from the data store to the spreadsheet server . The spreadsheet server can create a spreadsheet document populated with data provided by the data server corresponding with the request from the container document . Upon populating the spreadsheet either the data server or the spreadsheet server can provide a document key to the web browser that displays the container document . In that manner the web browser may accompany futures requests with the key so that the data server can respond to such requests without having to track the most recent state of the container document . The container document may display the spreadsheet document in the frame as it is populated or in some implementations after it is populated.

Where the data server is configured to be stateless in regard to the spreadsheet displayed in the frame spreadsheet interactions may be relatively independent of the data server . For example user interaction with the spreadsheet may involve direct communication between the code in the frame with the spreadsheet server and need not involve the data server . In most situations communication between the client computing device and data server may be handled by the container document and communication between the client computing device and the spreadsheet server may be handled by the frame . Communication may be performed using any kind of data transfer protocol e.g. HTML XML JSON etc. .

A user of the system can interact with a document e.g. a spreadsheet contained in the frame in various ways. For example changes adds edits deletes etc. can be made to data associated with one or more of the visible spreadsheet cells . One or more of the hidden spreadsheet cells may be associated with metadata or control data related to the data in the visible spreadsheet cells . For example data contained in each spreadsheet row may be identified by one or more associated data record keys contained in the hidden spreadsheet cells . As another example each spreadsheet row may be associated with a timestamp contained in the hidden spreadsheet cells representing a modification date of row data. In some implementations as a spreadsheet row data is updated the corresponding modification timestamp can be updated by the spreadsheet document embedded in the frame . The data for tracking changes to a row need not relate to time and may use other techniques e.g. by providing codes that are like hashes for the data in a row to determine when changes have been made to data. Other possible types of metadata or control data include data type information data validation rules and data related scripting code to name a few possibilities.

A user of the system can elect to save changes to an embedded document e.g. a spreadsheet contained in the frame by pressing the save button . In this example the save button resides in the container document rather than in the frame . Pressing of the save button may cause a communication to be made from the browser to the data server in this example to start a series of operations so that changes to data in the spreadsheet. Such operations may occur in certain circumstances even where the data server which may be more generally a data server system does not store state information for the spreadsheet.

In some implementations state information for a spreadsheet may be tracked by providing to the client computing device a timestamp that reflects when the spreadsheet server was last synchronized with the data server . The client computing device when it wants to execute a function such as a save function may pass information to the data server including the synchronization timestamp. The data server may forward the information to the spreadsheet server which can use the document key to identify the corresponding spreadsheet document. Changes to data associated with the spreadsheet document can be identified by the spreadsheet server for example by comparing the synchronization timestamp with the timestamp corresponding to the initiation of a save operation. In some implementations changes may be identified and validations may be performed by the spreadsheet server or by the spreadsheet server in coordination with the data server using control data included in any of the cells from the hidden spreadsheet columns

Information related to data changes may be passed from the spreadsheet server to the data server . The data may be passed according to an application programming interface to which the two servers are programmed so that the data server can properly handle the data that it is passed. The data server for example can convert the data that indicates changes to the spreadsheet document and can update the data in the data store . For example data identifiers e.g. record keys can be used by the data server for locating and updating data in the data store . The data server can use such keys to map changes in the spreadsheet to corresponding data in the data store that may be stored in a substantially different format.

In some implementations the container document e.g. a web page and the frame may reference servers associated with different Internet domains. For example the container data server may operate through and communicate with the browser via a domain such as data.example.com. The embedded document may in turn communicate with the spreadsheet server via the domain spreadsheet.example.com.

Where the container document and the frame reference two different domains communication between the container document and the frame may be accomplished by using one or more cross domain communication techniques. Any appropriate kind of cross domain communication technique may be used including but not limited to JavaScript Object Notation with Padding JSONP a JavaScript Client Library a relay file served from a client domain or a combination of techniques.

Although the relationship between data presentations at the client computing device by the data server and the spreadsheet server as shown in could be described as a parent child relationship for example the information received by the client computing device from the data server may be displayed by the container document and information received by the client computing device from the spreadsheet server may be displayed by the frame belonging to the container document in some implementations the relationship may assume a different form. For example information from the data server and the spreadsheet server may be presented in frames on a common web page representing a sibling relationship between the frames. Any appropriate number of frames may be included on a web page representing any relevant number of data sources. As cross domain communication techniques may be used for communication between a web page and a frame similar techniques may be used for communication between frames. For example a calendar embedded into a webpage may communicate with a spreadsheet embedded in the webpage. In the present example interaction or data modification related to one embedded document can be reflected in the other embedded document. For instance as a user selects a date from the embedded calendar information related to the user and the selected date can be communicated to the embedded spreadsheet which can load data associated with the user and selected date into spreadsheet cells. For example a user may drag across a range of dates in a calendar application and the selected range may be communicated to the spreadsheet application so that the spreadsheet server causes the data it serves to be filtered to the relevant selected date range.

In one particular implementation the system can be used to permit on line advertisers to interacts with their advertising data such as to change their bids for targeted advertisements or to change their keywords for triggering hits for such advertisements. For example data such as advertising keywords and destination URLs can be provided by the data store . Because a customer may associate thousands of keywords with an advertising program and because a customer may be familiar with spreadsheet operations a spreadsheet interface for bulk manipulation of the data may be useful. A web page e.g. the container document can include an embedded spreadsheet document e.g. within the frame for bulk manipulation of the data. For example the data server can provide keyword related data from the data store and the spreadsheet server can provide the embedded spreadsheet document and also populate the document with the relevant data. Common spreadsheet operations such as editing cells clearing cells adding rows removing rows copying down copy paste undo and redo to name a few examples may be provided to a user for data manipulation. Modified keyword related data can be sent to and updated by the data server and the data store .

The system can include a client application e.g. a browser a main data application a macro control module a spreadsheet server a data store manager and a data store . In some implementations components included in the system may run on computing devices and servers similar to the computing devices and servers shown in . For example the client application may run on a client similar to the client computing device the main data application and the data store manager may run on a server similar to the data server the macro control module and the spreadsheet server may run on a server similar to the spreadsheet server and the data store may be similar to the data store . In some implementations the main data application and the data store manager may run on different servers. In some implementations the macro control module may run on a server or server sub system that is separate from the spreadsheet server .

In some implementations components in the system can be hosted on one or more servers associated with different Internet domains. For example a server hosting the main data application and the data store manager can be associated with a domain such as data.example.com and a server hosting the macro control module and the spreadsheet server can be associated with a domain such as spreadsheet.example.com . In the present example the server associated with the data.example.com domain may perform as a data subsystem and the server associated with the spreadsheet.example.com domain may perform as a spreadsheet presentation subsystem. As shown in the system both the data subsystem and the spreadsheet presentation subsystem may communicate with components included in the client application without having to communicate through the other application. Components in the system can communicate with each other using any appropriate kind of data transfer protocol e.g. HTML XML JSON etc. by making remote procedure calls e.g. Java RMI PHPRPC CORBA etc. or by using a combination of protocols and techniques.

The client application can include a web browser or other kind of Internet enabled application configured to run on a client computing device. Here the client application includes a basic data view and an embedded spreadsheet . The basic data view can be a web page or web application operating within a browser for example. In some implementations the basic data view can manage interactions between the client application and one or more services hosted by other applications including applications running on the same or on a different computing device and applications in the same or in a different Internet domain. The embedded spreadsheet for example may be an Internet accessible document that can handle interactions with a user for making changes to data. The embedded spreadsheet can include visible and hidden columns rows and cells.

The main data application can be an application configured to run on a server. The main data application can handle or forward requests from other applications and other services in the system including user interface related requests. For example the main data application can serve as a conduit or pass through application between components in an application framework.

Here the main data application can include a spreadsheet service . The spreadsheet service can comprise code that has been added to the main data application so as to permit the main data application to provide spreadsheet functionality to the client application . The spreadsheet service can handle requests and interactions related to a spreadsheet document for example. In some implementations the spreadsheet service can translate or format a request from a system component and can route the translated or formatted request to another system component. For example a data request from the basic data view can be processed by the spreadsheet service translated into a corresponding request for data and routed to the data retrieval service . Such translating and formatting services can allow components in the system using different protocols or different programming environments to communicate with each other.

The macro control module can provide a set of application programming interfaces APIs for interacting with one or more components in the system . For example the set of APIs provided by the macro control module can allow an application or service to create and control the presentation of data documents such as spreadsheets. The control can include such operations as data population retrieval and validation to name a few examples. In some implementations the macro control module can perform as an interface to a portable program module server such as the spreadsheet server . The spreadsheet server can provide spreadsheet documents that may be embedded in a web browser page for example.

The macro control module can act in effect as an abstraction layer between the spreadsheet server and other server systems such as the main data application . In such a manner the main data application may communicate with the macro control module using a simple and easy to implement command set and language and need not concern itself with potentially more difficult interaction that would otherwise be required to communicate directly with the spreadsheet server. The macro control module can thus translate control commands for controlling the operation of spreadsheet server and can also pass data back and forth between the main data application and the spreadsheet server either with or without making modifications to the data.

The data store manager can be an application configured to run on a server. For example the data store manager can handle requests from other applications and other services in the system including data related requests such as for retrieving or storing data. Here the data store manager can include a data retrieval service . For example the data retrieval service can interact with a data store . In some implementations the data retrieval service may provide business logic services e.g. validation processing data mapping etc. . The data store can be any appropriate kind of database including but not limited to a relational database an object database or a file server. The data store can provide and store any relevant kind of data including data provided for editing in an Internet accessible document such as a spreadsheet and control data that can be used for tracking and validating changes to data in a spreadsheet.

One example information flow that reflects an initial request for data from the client application is shown in by a series of lettered process arrows A I. Editing data related to on line targeted advertising programs using an embedded spreadsheet document is described as an example here however other kinds of data may be edited and other kinds of Internet accessible documents may be used for data presentation and editing.

As shown by process arrow A the basic data view can make a request to the spreadsheet service hosted by the main data application . The request can include a request for data and a request for a data display medium. For example the requested data may be keyword related data for an advertising program such as when a user who managers an advertising portfolio wants to review their current crop of keywords and may want to make changes to the keywords to make their advertising more effective. The requested data display medium for example may be a spreadsheet document or another type of document such as a word processing document. Initially however the spreadsheet document may be displayed in an empty state and the user may make selections in the main web page as a container document to indicate the parameters for advertising data that they would like to have retrieved and shown to them.

As shown by process arrow B the spreadsheet service can make a request to the data retrieval service hosted by the data store manager . The request shown by process arrow B can be related to the request shown by process arrow A. For example the spreadsheet service can perform as a communications conduit and can reformat and relay requests. The request for example may be a request for keyword related data for an advertising program.

As shown by process arrow C the data retrieval service can return requested data to the spreadsheet service . The returned data for example can be retrieved by the data retrieval service from the data store by using one or more data identifiers e.g. data record keys record modification date ranges query parameters etc. associated with a data request. The returned data for example may be advertising program related data e.g. keywords destination URLs bid amounts match types statuses etc. and data identifiers e.g. data record keys record modification timestamps data group information etc. .

As shown by process arrow D the spreadsheet service can pass the data returned by the data retrieval service to the macro control module and may also pass control information or meta data with the data. In some implementations the returned data can be reformatted by the spreadsheet service to prepare the data for presentation by a display document. For example the spreadsheet service can convert non string data types e.g. objects enumerations money etc. to string representations. In some implementations the spreadsheet service can use one or more APIs provided by the macro control module to invoke the module to instantiate a new display document and to populate the display document. For example the spreadsheet service may request that the macro control module create a spreadsheet document and may request that the module populate the spreadsheet document with formatted advertising program related data. In some implementations the created and populated spreadsheet document can be provided to the client application using the spreadsheet server .

As shown by process arrow E the macro control module can inform the spreadsheet service upon populating the display document. For example the macro control module can send a message to the spreadsheet service after setting advertising program related data values in the spreadsheet document. In some implementations the macro control module can inform a component in the system when data population has initiated and such information can include a timestamp. In some implementations the macro control module can inform a component in the system when data population has completed. In some implementations the macro control module can provide a key associated with a created or populated display document so that other applications can provide the key to the spreadsheet server in order to identify the document that they would like the spreadsheet server to perform operations on.

As shown by process arrow F the spreadsheet service can provide the basic data view with a document key associated with the created display document. For example the document key can enable a component in the system to retrieve a display document e.g. the spreadsheet document including advertising program related data from the spreadsheet server .

As shown by process arrow G the basic data view can provide the embedded spreadsheet with the document key. For example the basic data view may use any appropriate kind of cross data communication technique to provide the document key. In some implementations the basic data view can store the document key in the client application . For example the document key may be stored as an Internet cookie associated with a web browser.

As shown by process arrow H the embedded spreadsheet can use the document key to retrieve data from the display document from the spreadsheet server . For example advertising program related data associated with the spreadsheet document on the spreadsheet server may be loaded into the embedded spreadsheet . In some implementations once a document key is created for a display document the same key can be used by the client application for subsequent data manipulation sessions.

As shown by process arrow I a user can interact with the embedded spreadsheet . For example a user may add edit update and delete advertising program related data associated with the embedded spreadsheet . Spreadsheet functions such as copying down and copy past to name a couple of examples may be used to enable bulk data edits. In some implementations a user of the embedded spreadsheet may sort filter or search spreadsheet data. In some implementations user interactions with the embedded spreadsheet data can be synchronized in real time with the associated display document stored on the spreadsheet server . At this point the user has manipulated data that was retrieved from the data store but the data has not yet been saved back to the data store and the changes are reflected only on the spreadsheet server .

As shown by process arrow A the basic data view can make a request to the spreadsheet service hosted by the main data application . The request can include a document key associated with a previously edited display document. For example the previously edited display document can be the spreadsheet document including advertising program related data as described in . The document key may be supplied by the client application . For example the document key may be retrieved by the client application from a data file such as a web cookie accessible by a browser. As another example the document key may be retrieved from a key repository hosted on a computer device running the client or a key repository hosted on another server in the system . The request may also include a request for data e.g. keyword related data for an advertising program and a display medium e.g. a spreadsheet document. 

As shown by process arrows B and C a request and response from the data retrieval service can be made via the spreadsheet service . For example data retrieval by the spreadsheet service upon a primary edit shown by process arrows B and C in and a subsequent edit shown here may be similar.

As shown by process arrow D the spreadsheet service can pass the data returned by the data retrieval service to the macro control module along with the document key. In some implementations the retrieved data can be formatted by the spreadsheet service . In some implementations the spreadsheet service can use one or more APIs provided by the macro control module to instruct the module to locate a previously created data display document and propagate the document with data. For example the previously created display document may be the spreadsheet document associated with advertising program data located on the spreadsheet server . The data used for propagating the spreadsheet document for example may be the data retrieved from the data retrieval service and formatted by the spreadsheet service .

As shown by process arrow E data can be automatically propagated to the embedded spreadsheet . For example because the display document e.g. the spreadsheet document including advertising program data may already be associated with the embedded spreadsheet in the client application in some implementations the data propagation process upon a subsequent edit can be asynchronous with other operations of the system . In some implementations a timestamp identifying a time when the data propagation process has been initiated can be associated with the embedded spreadsheet . As shown by process arrow F the macro control module can inform the spreadsheet service when the data propagation process to the embedded spreadsheet has completed.

As shown by process arrow G the spreadsheet service can return the document key to the basic data view . Although in some implementations the basic data view may already have a copy of the document key returning the key can be a mechanism for informing the basic data view that data propagation to the embedded spreadsheet has completed. In some implementations the basic data view can use this information to control user access to the embedded spreadsheet while it loads. For example as shown by process arrow H the basic data view can make the embedded spreadsheet visible. Other methods of restricting user access to the embedded spreadsheet can include locking the spreadsheet while providing a visual indicator associated with a locked status or allowing a user to interact with loaded spreadsheet rows while blocking access to partially loaded rows to name a couple of examples.

As shown by process arrow I a user can interact with the embedded spreadsheet . For example user interaction with the embedded spreadsheet upon a primary edit shown process arrow I in and a subsequent edit shown here may be similar.

As shown by process arrow A the basic data view can initiate a save operation. For example after interacting with a display document e.g. performing edits adds or deletes to advertising program data included in a spreadsheet document a user may elect to save the document. A save operation for example may be triggered by a user clicking a button associated with the client application . In some implementations the basic data view can be programmed to handle the button click. For example the basic data view may recognize the button click and send a save request to the spreadsheet service . In some implementations periodic saves may be performed by the basic data view for example by monitoring a timer control.

As shown by process arrow B the spreadsheet service can process the save request and generate a request from the macro control module to retrieve changes made to the embedded spreadsheet since the last time data was propagated to the embedded spreadsheet . For example a timestamp related to the time that the embedded spreadsheet was last populated can be associated with the spreadsheet and can be used by the macro control module for determining changes to spreadsheet rows or cells. Control data for example a hidden modification timestamp can be associated with editable spreadsheet data upon a user edit. For example a user of the embedded spreadsheet may perform a bulk edit operation on a column of data such as a column listing bid amount information. In the present example the embedded spreadsheet may associate a modification timestamp indicating that the column or each of the cells included in the column or all of the rows in the spreadsheet were edited at a certain time. By comparing the spreadsheet data population timestamp with the data modification timestamp s for example the macro control module or the spreadsheet server may determine which spreadsheet data values have been modified since the last time data was propagated to the embedded spreadsheet . As another example one or more flags may be maintained by the embedded spreadsheet indicating whether a data or spreadsheet element is dirty has been edited or clean has not been edited .

As shown by process arrow C the macro control module can return data changes made to a data display document. For example cell values modified by a user of the embedded spreadsheet e.g. modifications to bid amounts associated with an advertising program etc. can be provided by the macro control module to the spreadsheet service . In some implementations the spreadsheet service can map the data associated with the document to corresponding entities in the data store . For example the spreadsheet service may determine that a column included in a spreadsheet document e.g. a spreadsheet column for bid amounts corresponds with a field included in a table managed by the data store .

As shown by process arrow D the spreadsheet service can send the mapped data changes to the data retrieval service . For example the spreadsheet service may indicate to the data retrieval service that a set of values associated with bid amounts for a particular advertising program are to be updated in the data store . The data retrieval service can perform a validation process on the mapped data changes before attempting to save the changes to the data store . If one or more data elements pass the validation process for example the data retrieval service can update the data store with mapped changes. If one or more data elements fail the validation process for example the data retrieval service can compile a list of errors associated with the failed validation. For example a subset of bid amounts modified in the embedded spreadsheet may fall outside of a required range and these bid amounts may fail a validation process performed by the data retrieval service .

As shown by process arrows E and F the data retrieval service can return the list of errors to the spreadsheet service and the spreadsheet service can communicate the list of errors to the basic data view . If no errors were determined during the data validation process for example the error list may be empty. As another example one or more designated codes or messages may be provided instead of or in addition to the empty error list.

As shown by process arrow G in the case of no validation errors the basic data view can hide the embedded spreadsheet indicating a successful save. In some implementations a successful save may be indicated to a user by another technique such as by displaying a message for example e.g. changes saved successfully . If validation errors are returned to the basic data view the errors can be presented to a user such that the user may visually identify the errors fix the errors and attempt to re save the data display document. For example if a subset of cells in the embedded spreadsheet are determined to include bid amounts falling outside of a required range those cells may be superimposed with a visual indicator such as a color or border distinguishing invalid cells from valid ones. In some implementations instructions pertinent to fixing data validation errors can be presented to a user for example in the form of a tool tip or other text area that may be displayed when the user interacts with the invalid cells.

The mechanisms that show the validation errors may be provided for example from the basic data view to the embedded spreadsheet such as by using cross domain communication techniques in appropriate circumstances. Also such exception data may be provided by the spreadsheet service to the spreadsheet server along with a document key which may then change the manner in which the spreadsheet is displayed to a user.

The process begins in this example at box where spreadsheets are prepared from a data store using hidden tracking data. For example a vendor may make a request for a list of product data e.g. product descriptions prices discounts available quantities etc. related to available products e.g. baseballs bats gloves etc. to be displayed in an editable spreadsheet displayed in a frame in a web browser application. Relevant data may be retrieved from a data store and used to populate the spreadsheet. For example spreadsheet rows and columns may be based on database table rows and columns. The spreadsheet may contain hidden columns and cells for each row including metadata for tracking and identifying row data. Additionally the spreadsheet itself may include hidden metadata associated with the spreadsheet. Such metadata may include keys modification timestamps and validation rules to name a few possibilities. For example data keys corresponding to each row in the spreadsheet e.g. a data key for baseballs another for bats another for gloves etc. can be included in hidden spreadsheet columns.

The request may be made from a browser to a main data server sub system which may retrieve the data. The main data sub system may then pass the data to a separate sub system on separate servers including servers that communicate over a network from a different domain than the domain of the main data sub system. Such other sub system may operate to prepare a document and pass whatever data it receives in a proper format into the document such as a spreadsheet.

One or more timestamps associated with changes to spreadsheet data can returned at box . For example modification timestamps corresponding to each row in the spreadsheet e.g. a modification timestamp associated with the last change to baseball data another for bats another for gloves etc. can be included in hidden spreadsheet columns. As another example a timestamp associated with a previous change to the spreadsheet itself may be included in a hidden spreadsheet location or sent from a spreadsheet application to a data application.

The timestamp and document key can be sent to the client at box . As the vendor interacts with the spreadsheet one or more modification timestamps can be updated. For example as the vendor edits the spreadsheet row that lists baseballs and changes the number of available units from 100 to 1000 the spreadsheet may update the hidden modification timestamp for that row to reflect the time of the data change. The vendor may save changes to the spreadsheet when the editing session is complete. For example the vendor can initiate the save operation by clicking a save button associated with the spreadsheet such as a save button on a portion of the spreadsheet that is served by a data application that is separate from a spreadsheet application that updates the spreadsheet.

At box a timestamp associated with the spreadsheet can be received from the client. For example a server hosting spreadsheet functionality can receive the timestamp related to the time of loading of the spreadsheet and in certain embodiments can receive the information from a separate data application that communicates with a web page that hosts the spreadsheet. Changes since the timestamp can be requested at box . For example an application can compare the time that the spreadsheet had loaded e.g. the beginning of the editing session with the modification times for each row in the spreadsheet. Rows having a modification time more recent than the loading time may be considered to have changed. For example the number of available units for baseballs may be determined to have changed.

At box changes and keys to rows with changes can be returned. For example a server application that handles spreadsheet functionality can return data changes and data keys to a server that handles access to a data store. At box changes can be mapped back to the data store. For example using the returned data key a server application that handles access to the data store can determine that the modified number of available units is applicable to baseballs and the server application can update the data store to reflect the change.

In this manner a vendor can be provided with the ability to interact with and edit data that is stored in a large data store of formatted data. The user can do so using a familiar spreadsheet application that they might otherwise employ to keep their own checkbook via an on line service that is associated with the service discussed here e.g. the services may be provided by the same organization . The vendor may thus be previously familiar with the particular spreadsheet program and may thus find it convenient to edit his or her vending information using the familiar interface. As a result the work of the vendor is made easier and the information provider can more easily add a happy customer.

At box the data sub system receives a timestamp from the presentation sub system and may also receive a document key or other mechanism for identifying a document that has been opened by the presentation sub system and made available to the browser such as via a frame in a web page being displayed by the browser. The timestamp may represent a time at which known data has been provided to the presentation server sub system so that changes to such data may be tracked accurately.

After some time the data server subsystem may receive a command and a document key from the client device box . The command may include for example a command to save changes that the user of the client has made to the document. Such changes may have been occurring between the client and the spreadsheet server sub system without the data server sub system being notified in any manner of the changes and the data server sub system not having to save state information for the client or the spreadsheet. The state may instead be reflected by the timestamp that the client returns to the data server sub system with the command. Alternatively the state information may be stored with the servers and the provision by the client of a document identifier such as a document key may trigger the retrieval of such information.

At box the document key and timestamp may be provided by the data server sub system to the presentation server sub system. The timestamp may take the form for example of a literal time representation e.g. with a date hours minutes and seconds or may take other appropriate forms that permit the systems to determine what changes have been made to the document since the last time the changes were permanently recorded by the system. The data server sub system may then wait while the presentation server sub system uses the provided information to determine which document is to be saved to identify the changes that have been made to the document since it was last called up or saved and to return data to the data server sub system that reflects those changes.

At box the data server sub system receives the data and at box it reformats the data and saves it to a central data store. For example the presentation server sub system may communicate according to a particular API and may define data types or arrangements of data that differ from those defined by a database that operates the data store. The data server sub system in this step may thus act as an translator for the data. In addition the data server sub system may perform validation checks on the data and may cause any questionable or invalid data to be highlighted on the web page for the user either by communicating with the web page directly or by communicating through the presentation server sub system.

The process begins at box where a call from the data server sub system is received and requests that a document be established. The presentation server sub system may then establish an empty document such as a spreadsheet and may serve that document either immediate or after receiving a request for the document from a frame in a web page that has been served by the data server sub system or an associated sub system box . The sub system may record the time at which the document was created and may pass a timestamp and a document key to the data server sub system. The presentation server sub system may then wait. At box the presentation server sub system receives a request from the browser at the client to display the document. Before or at the same time the presentation server sub system may have been provided with data for populating the document such as data passed by the data server sub system at the same time as or after the data server sub system provided the call to establish the document.

The spreadsheet server sub system then may interact with the user via standard mechanisms for the sub system box . For example the user may add delete edit and rearrange data in the document and the spreadsheet server sub system may reflect such changes in the display provided to the user in the frame on the web page. At box the presentation server sub system receives the document key and timestamp from the data server sub system box . Such data may also be accompanied by a command that causes the presentation server sub system to identify changes to the document in the interim since the generation of the timestamp. For example the presentation server sub system may have marked certain fields when changes were made to data associated with those fields and the markings may be removed each time the document is saved may have provided hash like representations of the data in the fields and may check those representations to identify changes that may have occurred or may timestamp fields as they are changed. Such changes may be translated into a data group that may be sent back to the data server sub system box so that the data server sub system may reflect the changes in a central data store.

At box a client e.g. the client can request a spreadsheet. For example a vendor may request that a list of product data e.g. product descriptions product codes prices discounts available quantities etc. related to available products e.g. baseballs bats gloves etc. be displayed in an editable spreadsheet. At box a data server system e.g. the data server can retrieve data e.g. product data and provide the data with instructions. For example the data can be prepared for display in a spreadsheet. Data types may be converted and metadata e.g. keys modification timestamps validation rules presentation rules etc. can be associated with the data.

At box a spreadsheet server system e.g. the spreadsheet server can populate the spreadsheet with data and hidden metadata. Editable data such as product descriptions prices discounts and available quantities to name a few examples may be loaded in visible editable spreadsheet columns. Non editable data such as product codes to name an example may be loaded in visible non editable spreadsheet columns. For example editable and non editable columns may be determined and set by the spreadsheet server system based on presentation rules included in the metadata. Metadata such as data keys modification timestamps validation rules and presentation rules to name a few examples may be loaded in hidden columns.

At box the spreadsheet server system can provide a timestamp. For example a timestamp can be provided that is associated with the time of populating the spreadsheet. The data server system can supply the timestamp and document key at box and the client can receive the timestamp and document key at box .

At box the client can interact with the spreadsheet. For example the vendor can use a bulk spreadsheet operation to change the discount for all products to 25 . The spreadsheet server system can interact with the client and record changes to the spreadsheet at box . For example as a bulk change to the discount rate had been performed by the vendor affecting all rows in the spreadsheet across a single column the spreadsheet server system may update modification timestamp metadata associated with all the data rows in the spreadsheet or may update metadata associated with the discount column or may update metadata associated with the spreadsheet document itself.

Other changes like the reordering of rows in the spreadsheet may not be associated with a change and so the metadata may not be updated when such an operation occurs. In particular the data may be stored in a data store regardless of the order in which it may be displayed so it may be desirable to not store such changes which would otherwise result in the expenditure of substantial resources to track such changes and save all of the rearranged data to the data store.

At box the client receives a save command. For example upon completing an editing session the vendor may interact with a button included in a client application associated with computer code that can trigger a save operation. As another example the client may trigger periodic saves. The save command can be transmitted by the client at box .

At box the data server system can request changes to the spreadsheet. For example changes since the last time data had been loaded into the spreadsheet or changes since the last time a save operation had been performed or changes since the previous request may be requested from the spreadsheet server system. The request can be received by the spreadsheet server system at box . At box the spreadsheet server system can deliver changes since the last request. For example timestamps associated with spreadsheet loading spreadsheet save requests or spreadsheet change requests may be compared with spreadsheet modification timestamps for determining data changes.

At box the data server system can apply changes to a data store e.g. the data store and return errors. Validation rules for example may be applied to data to determine errors. For example a business logic application running on the data server system may apply business logic or validation rules to determine that the maximum allowable discount for gloves is 10 . A message for informing the vendor of the rule may be generated by the business logic application. Errors can be reported by the data server system to the spreadsheet server system at box . For example the data server system may send one or more error messages along with instructions for associating the error messages with data on the spreadsheet. Alternatively the errors may be reported by the data server system directly to the client.

The spreadsheet can be updated by the spreadsheet server system to reflect errors at box the spreadsheet server system can report new data showing errors at box and the client can display the spreadsheet with errors at box . For example the spreadsheet can provide the spreadsheet cell associated with discounts for gloves with a visual indicator such as a distinguishing color or border to name a couple of possibilities. The error message may also be associated with the cell for example as a tool tip or message bubble to be displayed when the vendor interacts with the cell.

In the figure a system includes a web page and a spreadsheet server system communicating over a network e.g. the Internet . In some implementations components included in the system may run on computing devices and servers similar to the computing devices and servers shown in . For example the web page may be displayed in a web browser running on a client similar to the client computing device and the spreadsheet server system may run on a server similar to the spreadsheet server . In some implementations the web page can be directed to an Internet domain different than the Internet domain associated with the spreadsheet server system . For example the web page may be directed to a domain such as data.example.com and the spreadsheet server system may be associated with a domain such as spreadsheet.example.com .

In general the system can provide computer code to a client device for interacting with and managing an embedded document at the client device. For example the web page may include an embedded spreadsheet document in an iframe. The web browser can download computer code from the spreadsheet server system enabling the web page to interact with the embedded spreadsheet document . In some implementations the computer code may also enable cross domain communications between the web page and the embedded spreadsheet document .

In some implementations the computer code can be included in a portable program module e.g. a web gadget or widget that may be included as an add on for the web browser . For example the portable program module may provide an API for a web scripting language e.g. JavaScript VBScript etc. executed by the web browser . In some implementations the API can include API stubs that define the interface. For example when a web developer instructs the API to create a range object associated with the embedded spreadsheet document the API may create a nearly stateless stub object having a reference to data on the spreadsheet server system . The range object for example may recognize its start and end rows and columns and its associated spreadsheet document. Other state information may be maintained on the spreadsheet server system . For example when an API method is invoked on a client side object such as the range object the web browser may create a representation of the invoked method and send the representation to the spreadsheet server system .

Information flow in the system related to an invocation of an API method is shown by a series of lettered process arrows A G. Such interactions between subsystems in a broader system may e.g. between data server and spreadsheet server can occur via mechanisms such as remote procedure calls and may occur over a back end network operated by a service provider rather than over a main network like the internet.

As shown by process arrow A code may be executed within the web page for interacting with the embedded spreadsheet document . For example a range object may be instantiated and a method for retrieving values from the spreadsheet may be invoked. The method for example may take its arguments and its name and create a proto representation a compact representation of a macro command to be executed by the spreadsheet server system .

As shown by process arrow B a cross domain communication technique can be used to pass the macro command from the web page to the embedded spreadsheet document . Any appropriate kind of cross domain communication technique may be used including but not limited to JavaScript Object Notation with Padding JSONP a JavaScript Client Library a relay file served from a client domain or a combination of techniques. For example to send messages from the web page to the spreadsheet server system communications may be tunneled through the frame containing the embedded spreadsheet document .

As shown by process arrow C an instance of a dispatcher associated with the embedded spreadsheet document can receive the message from the web page and forward the message to the spreadsheet server system . In some implementations the embedded spreadsheet document may forward the message without inspecting it and may call an executor on the client device to run the command asynchronously.

As shown by process step E the spreadsheet server system can receive and run the command. In some implementations the spreadsheet server system may convert the representation of the command for example by using one or more deserialization libraries. For example the spreadsheet server system may run the command as a macro command. From the perspective of the spreadsheet server system in some implementations the handling of the command may be independent of its source. For example the spreadsheet server system may handle a command provided by the web browser in a similar manner as if it were provided by a component running on the system .

As shown by process arrows F and G the spreadsheet server system can provide a response to the embedded spreadsheet document while controlling the document . For example if a request is made through code to update a range of cells included in the embedded spreadsheet document the response shown by arrow F may be an Asynchronous JavaScript XML AJAX response associated with the macro command and the document control shown by arrow G may be a visual updating of spreadsheet contents.

As shown by process arrow H the response value may be provided by the embedded spreadsheet document to the web page using a cross domain communication technique. For example as a range of spreadsheet values may be requested by the web page from the embedded spreadsheet document the values may be returned by the document to the page .

In the user has chosen to add keywords. Such actions may also be performed by embedding a spreadsheet into a page and accepting user input as described above. Separately some user interface issues may not require the assistance of a spreadsheet program and may thus be handled directly by the advertising server system. In a separate pop up box is shown that may be displayed as part of a user s process of adding keywords for an advertising campaign. In certain circumstances a user may want to think up effective keywords once and then to store them where they can be redeployed as needed. Thus for example in this figure the user is displayed a file access dialog box where the user can identify a keyword list that can be readily imported into a spreadsheet on which the user is currently working.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device memory on processor or a propagated signal.

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD Thin Film Transistor Liquid Crystal Display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provide in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provide as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory memory on processor or a propagated signal that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smartphone personal digital assistant or other similar mobile device.

Device may also include one or more different devices that are capable of sensing motion. Examples include but are not limited to accelerometers and compasses. Accelerometers and compasses or other devices that are capable of detecting motion or position are available from any number of vendors and can sense motion in a variety of ways. For example accelerometers can detect changes in acceleration while compasses can detect changes in orientation respective to the magnetic North or South Pole. These changes in motion can be detected by the device and used to update the display of the respective devices according to processes and techniques described herein.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of embodiments have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example much of this document has been described with respect to messaging and mapping applications but other forms of graphical applications may also be addressed such as interactive program guides web page navigation and zooming and other such applications.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other embodiments are within the scope of the following claims.

