---

title: Automatically generating volume images and launching virtual computing instances
abstract: In an embodiment, a method comprises using a first server computer, executing a process that is configured to generate virtual computer instances; receiving a request to generate a first custom virtual computer instance, wherein the request identifies one or more software packages to install on the first custom virtual computer instance; copying a first pre-configured volume image onto a volume of a data storage device, wherein the volume includes one or more base software packages in a file system; mounting the volume to the first server computer, in response to receiving the request; installing each of the one or more software packages on the volume; unmounting the volume; creating a snapshot of the volume; registering the snapshot as a registered custom volume image.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430212&OS=09430212&RS=09430212
owner: Netflix, Inc.
number: 09430212
owner_city: Los Gatos
owner_country: US
publication_date: 20140210
---
The present disclosure generally relates to techniques for launching custom virtual computing instances and relates more specifically to techniques for generating customized volume images that can be used to launch customized virtual computers on one or more elastic virtual computer cloud systems.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Networked data centers managed by independent parties and having large numbers of reconfigurable computer processors memory and storage sometimes termed cloud computing facilities in which computing resources conceptually reside in an elastic virtual cloud are commercially available from AMAZON RACKSPACE and others. A user may allocate or deallocate computing resources in an elastic virtual computer cloud by launching and or destroying virtual computer instances. A virtual computer instance may be launched using a snapshot of a previously configured volume with a basic operating system OS such as a UNIX distribution. After the virtual computer instance is launched the user may manually configure the virtual computer instance by logging in to the instance from a client computer and configuring the instance as desired. For example the user may log in to a launched virtual computer instance and install one or more software packages setup one or more user profiles and define one or more networking routes.

Manually launching and configuring virtual computer instances may be time consuming and prone to error. As an alternative a user may store a snapshot of a virtual computer instance after the user configures the virtual computer instance. After the snapshot is stored the user may generate and launch a new virtual computer instance from the stored snapshot. Since the new virtual computer instance is generated from the stored snapshot the user need not configure the new virtual computer instance.

In many cases however a user may want to launch a new virtual computer instance that is configured differently from any snapshots that were previously stored. For purposes of illustrating a clear example assume that a particular software package is installed on a virtual computer instance and a snapshot of the virtual computer instance is stored. Also assume that a new version of the particular software package is released. If the user wants to generate a new virtual computer instance with the new version of the software package then the user may still have to manually launch and configure a new virtual computer instance with the new version of the software package.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of illustrating a clear example each figure may be described with reference to one or more other figures but using the particular arrangement s illustrated in other figures are not required in other embodiments.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual computer instances or virtual computer elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

A virtual computer may be software which when executed manages one or more software packages and or processes as if a physical computer. A virtual computer may comprise a file system that includes one or more installed software packages such as an OS. One or more computers may be allocated to execute an instance of a virtual computer. Additionally or alternatively a computer may be allocated to execute more than one virtual server instance.

 Launching a virtual computer instance may mean causing a virtual computer instance to begin executing on a computer.

A virtual computer image or snapshot may be a copy of the state of a computer volume and or file system at a particular point in time. The system and or file system at the time of the snapshot may be stored in transitory and or non transitory memory.

A base software package may be a software package installed on a volume before a computer and or virtual computer instance mounts the volume. Additionally or alternatively a base software package may be a software package included in a snapshot.

A custom virtual computer instance may be a virtual computer instance that is generated in response to one or more requests for a virtual computer instance. A custom virtual computer instance may include one or more configurations and or software packages identified in the one or more requests.

An elastic virtual computer cloud may comprise one or more computers executing one or more virtual computer instances. The one or more computers may be located in one or more particular regions.

A process means a process thread and or instance of a program implemented as software and executed by a computer and or virtual computer instance.

A long running process may mean a process that receives and or processes one or more requests and waits to receive additional requests. A long running process need not terminate merely because the received requests have been processed. For example a long running server process may be a process that runs on a server computer and or a virtual computer which receives a request from a client computer to perform one or more operations and or return a result. After processing the request instead of terminating the long running process may wait for additional requests.

A long running process need not perform a request. For example upon receiving a request the long running server process may assign the request to a process in a pool of other processes and or a child process. The process that is assigned the request need not be a long running process. The process assigned the request may terminate after processing the request. However for convenience of expression a long running process processing a request and or performing an operation may mean a long running process and or a process managed by the long running process processing a request and or performing an operation. The one or more processes managed by the long running process need not be executed on the same one or more computers as the long running process.

In an embodiment a method comprises using a first server computer executing a process that is configured to generate virtual computer instances receiving a request to generate a first custom virtual computer instance wherein the request identifies one or more software packages to install on the first custom virtual computer instance copying a first pre configured volume image onto a volume of a data storage device wherein the volume includes one or more base software packages in a file system mounting the volume to the first server computer in response to receiving the request installing each of the one or more software packages on the volume unmounting the volume creating a snapshot of the volume registering the snapshot as a registered custom volume image.

In an embodiment the method comprises launching the first custom virtual computer instance from the volume communicating data indicating that the first custom virtual computer instance is instantiated receiving at the process a second request to generate a second custom virtual computer instance determining that the second request identifies the one or more software packages installed on the registered custom volume image in response to determining the one or more software packages are installed on the registered custom volume image copying the registered custom volume image to a second volume launching the second custom virtual computer instance from the second volume without mounting the second volume onto the first server computer installing the one or more software packages and unmounting the second volume from the first server computer.

In an embodiment the method comprises receiving a commit request at a source code version control server computer to commit a set of source code to a version control system committing the set of source code to the version control system determining that the set of source code was committed successfully and in response compiling the set of source code and generating a compiled software package sending the request to the process to generate the first custom virtual computer instance wherein the request identifies the one or more software packages that should be installed on the first custom virtual computer instance and includes the compiled software package installing the compiled software package running a set of tests against the compiled software package on the first custom virtual computer instance generating a notification specifying which tests failed if any.

In an embodiment wherein the process is a first long running process of a plurality of long running processes and each long running process of the plurality of long running processes is being executed on a different server computer in a particular geographic region and is capable of launching one or more custom virtual computer instances at the particular geographic region the request identifies a geographic region and the method comprises executing a master process at a master server computer receiving the request at the master process determining that the first server computer is located in the geographic region identified in the request sending the request to the first long running process executed by the first server computer to instantiate the first custom virtual computer instance at the geographic region.

In an embodiment the method comprises communicating data indicating a progress state of the process while the process is copying the first pre configured volume image onto the volume mounting the volume installing the one or more software packages unmounting the volume and or launching the first custom virtual computer instance.

In an embodiment the long running process is a long running process that runs on server computer and receives one or more requests from client computer to launch one or more custom virtual computer instances such as instances . In response to receiving a request to generate a custom virtual computer instance long running process performs and or manages processes that perform one or more of the methods discussed herein to launch a custom virtual computer instance on one or more server computers in virtual computer pool .

In long running process is illustrated as a single long running process running on a single computer. In other embodiments long running process may comprise a plurality of long running processes working in concert on one or more computers to receive requests and launch custom virtual computer instances as discussed herein. Additionally or alternatively long running process may spawn a child process when a request for a custom virtual computer instance is received. The single long running process may assign the received request to the child process. The child process may terminate after the child process launches the requested custom virtual computer instance according to one or more of the methods discussed herein.

Server computer is a computer and or a virtual computer hosted on elastic virtual computer cloud . In the embodiment illustrated in server computer is not included in virtual computer pool . However in some embodiments server computer may be included in virtual computer pool . In an embodiment functional units of server computer may be implemented using any of the techniques further described herein in connection with for example the server computer may comprise a general purpose computer configured with one or more stored programs which when executed cause performing the functions described herein for the long running process or a special purpose computer with digital logic that is configured to execute the functions or digital logic that is used in other computing devices. The use of a long running process such as process to implement the functions herein is merely one example that is not strictly required and other embodiments may use logic programs functional units or processes that are short lived or active for any appropriate duration. The use of a long running process is merely convenient for certain kinds of applications or contexts and may be inappropriate for others.

Virtual computer pool includes a plurality of virtual computers custom virtual computer instance and custom virtual computer instance . Virtual computer instances in virtual computer pool are executed on one or more real computers which are part of elastic virtual computer cloud .

Virtual image pool includes a plurality of virtual computer images . Virtual computer images in virtual image pool may be copied to virtual volumes . Typically the virtual computer images can be executed to provide a substantive application or service that is useful to client computer . For example the virtual computer images may include a web application server with stored pages and programs database server or other elements that cooperate to provide a web based service to the client computer .

Virtual computer image and virtual computer image may be snapshots of previously configured virtual computer instances. For example virtual computer image may be a file system that has a first OS installed and virtual computer image may be a file system that has a second different OS installed. Virtual computer image and virtual computer image may have other differences. For example virtual computer image may be a snapshot of a file system with a particular base software package. Virtual computer image may be a snapshot of a file system without the particular base software package. Also for example virtual computer image may be a snapshot of a virtual computer instance with one or more user profiles and or login credentials stored. However virtual computer image may be a snapshot of a virtual computer instance without the same one or more profiles and or login credentials stored. Therefore a virtual computer image launched from virtual computer image may have the user profiles and or login credentials stored and or configured. However a virtual computer image launched from virtual computer image may not have the user profiles and or login credentials stored and or configured.

Virtual volumes may store one or more volumes. Each of the volumes stored on virtual volumes may be mounted by server computer and accessed by long running process as an attached device. Each of the volumes stored on virtual volumes may be mounted by custom virtual computer instance custom virtual computer instance and or a computer executing a custom virtual computer instance on elastic virtual computer cloud as an attached device and or drive.

Client computer is a computer separated from the cloud and coupled thereto directly or indirectly using one or more networks and typically is operated by a user. Client computer is illustrated as if external to elastic virtual computer cloud however client computer need not be external to elastic virtual computer cloud . For example client computer may be a virtual computer in virtual computer pool . In some embodiments client computer and cloud are associated with different entities which may be different business entities but such an association is not required and these elements may be co located or part of the same entity.

Package repository includes one or more software packages stored on one or more computers. The software packages stored on package repository may be installed on a virtual volume in virtual volumes and or a server computer in virtual computer pool . In the embodiment illustrated in package repository is external to elastic virtual computer cloud however package repository need not be external to elastic virtual computer cloud .

To generate a custom virtual computer instance a long running process may perform one or more of the following steps receive a request to generate a custom virtual computer instance with one or more software packages select a snapshot generate and configure a volume based the snapshot take a snapshot of the configured volume register the snapshot and launch an custom virtual computer instance based on either the registered snapshot and or the configured volume. The registered snapshot may be used to generate and or launch subsequent custom virtual computer instances on one or more elastic virtual computer clouds in one or more geographic regions. Additionally the long running process may be implemented as a service over HTTP SPDY and or any other networking protocols.

In step the process selects a virtual computer image. For purposes of illustrating a clear example assume that virtual computer image is a snapshot of a virtual computer s file system that has the particular version of the OS and two of the three additional software packages identified in the request. Further assume that virtual computer image is a snapshot of a virtual computer s file system that has the particular version of the OS but only one of the three additional software packages identified in the request. Long running process may select virtual computer image since the base software packages the particular OS and two of the three additional requested software packages included in virtual computer image are a closer match to the request than the base software packages the particular OS and one of the three additional requested software packages included in virtual computer image .

Additionally or alternatively long running process may select the virtual computer image that has the fewest number of additional unrequested software packages installed. For purposes of illustrating a clear example assume that virtual computer image and virtual computer image includes the particular OS and the same three software packages in the previous example. Also assume that virtual computer image has twenty other software packages installed that are not identified in the request. Long running process may select virtual computer image if virtual computer image has fewer additional unnecessary base software packages installed than virtual computer image .

In step the process generates a volume based on the selected virtual computer image. For purposes of illustrating a clear example assume long running process selected virtual computer image in step . Accordingly long running process may generate a volume on virtual volumes by copying virtual computer image onto virtual volumes .

In step the process determines whether the software packages enumerated in the request are installed on the volume. Again long running process may perform the test of step . If the result is positive or true then long running process may proceed to step and skip steps through which comprise configuring the volume taking a snapshot of the configured volume and registering the snapshot. Otherwise if the test of step is negative or false then the process may proceed to step .

In step the process mounts the volume onto a server computer. For example long running process mounts or causes to mount the volume in step onto server computer . Mounting a volume on an already running server computer may reduce the amount of time to configure the volume because long running process need not wait for a new computer to load and or virtual computer instance to be launched.

In step the process configures the volume based on the request. Continuing with the previous example in one embodiment long running process may change the root directory of server computer to be a directory on the volume mounted in step . Long running process may install the software packages enumerated in the request on the mounted volume relative to the new root directory on the volume. Long running process need not install the software packages enumerated in the request that are already installed on the mounted volume.

Long running process may use a package manager to download and or install one or more software packages from package repository . Additionally the package manager and or other software may attempt to cause the installed software package s to be executed. However for purposes of generating a volume the installed software packages need not be executed while the volume is mounted on server computer . Accordingly long running process may prevent the installed software package s from being executed while mounted on server computer .

A process may perform additional operations on the volume. For example long running process may copy authentication keys that allow users to login to a custom virtual computer instance based on the volume without having to setup an additional login and or user profile each time a custom virtual computer instance based on the volume is launched.

Different mounted volumes may have different OSs installed. To support multiple OSs long running process may maintain a plurality of plugins wherein each plugin is associated with a particular OS. Thus in the previous example long running process may select a particular plugin associated with the OS pre installed on the mounted volume. Long running process may use the selected plugin to configure the mounted volume set the root directory install software packages configure user profiles delete one or more log files create and or delete files and or directories and or perform any other operations to configure the mounted volume.

In step the process unmounts the volume. For example long running process causes the volume mounted in step to unmount by calling an OS Application Programming Interface API .

In step the 1 process creates a customized snapshot of the unmounted volume. For example long running process may generate virtual computer image from the unmounted volume in virtual volumes from step .

In step the process registers the new customized snapshot. For example long running process may store virtual computer image in virtual image pool . Additionally or alternatively elastic virtual computer cloud server computer long running process and or virtual image pool may maintain a database that describes base software packages installed on each virtual computer image stored in virtual image pool . Long running process may create one or more entries in the database which indicate that virtual computer image has base software packages identified in the request.

In step the process launches a custom virtual computer instance from the volume. For example long running process may mount the volume generated in step to a computer in elastic virtual computer cloud . Additionally or alternatively long running process may generate a volume from custom virtual computer image and mount the volume on a particular computer in elastic virtual computer cloud . Long running process may launch custom virtual computer instance on the particular computer using the mounted volume.

In step the process sends data to the user indicating that the custom virtual computer instance is launched. For example long running process may send data indicating that custom virtual computer instance is launched to the computer from which the request was received from. The data may include the internet protocol address of custom virtual computer instance login information and or any other information helpful to use and or managing virtual computer instance .

In an embodiment one or more virtual computer images and or one or more custom virtual computer instances may be generated and or launched concurrently. For example long running process may spawn multiple processes and each process may concurrently perform one or more of the steps discussed herein on a volume to which the process is assigned.

In some embodiments virtual computer instances may be created and launched automatically. For example illustrates a computer system for automatically generating custom virtual computers according to an embodiment. System is similar to system in however system includes application server computer which is communicatively coupled to long running process through server computer . While application server computer is illustrated as if outside elastic virtual computer cloud application server computer may be a computer that is part of elastic virtual computer cloud .

Application server computer may send one or more requests to launch custom virtual computer instances to long running process . In response to a request from application server computer long running process may generate and custom virtual computer instance. Additionally or alternatively application server computer may send long running process a request to generate a custom virtual computer instance based on data received from client computer .

In step the repository process may determine whether the source code was committed successfully. If so then control may proceed to step otherwise control may proceed to step . For example if repository process is unable to commit the received source code because of a merge conflict then repository process may proceed to step and generate a notification of failure to commit. Repository process may send the notification to client computer .

In step the repository process may compile the source code. For example repository process may compile the most recent version of the source code in the repository which may include the code received in step to produce a compile software package.

In step the repository process determines whether the source code was compiled successfully. If so then control may proceed to step otherwise control may proceed to step . For example if repository process fails to compile the source code then repository process may generate a failure notification. Repository process may send the failure notification to the client computer .

In step the repository process sends a request to a long running process to launch a custom virtual computer instance with the compiled software package. For example repository process may send a request to long running process to launch a custom virtual computer. The request may include data that identifies one or more software packages to install including the compiled software package from step . The data may include the code version number. In response to the request long running process may perform one or more of the methods discussed herein to launch custom virtual computer instance with the compiled software package. In an embodiment long running process installs the compiled software package by retrieving the compiled software package from application server computer . In an embodiment long running process installs the compiled software package by retrieving the compiled software package from a package repository such as package repository .

In step a process runs tests against the compiled software package on the launched custom virtual computer instance. For purposes of illustrating a clear example assume that a process executed by custom virtual computer instance runs one or more tests against the particular software package installed from the checked in code. The one or more tests may be included in the particular compiled software package. Additionally or alternatively the tests may be retrieved as a separate software package from package repository or application server computer . Additionally or alternatively the one or more tests may be one of or part of one of the base software packages installed on the volume used by custom virtual computer instance . Additionally or alternatively the test may be retrieved and or executed in response to a request by a user or another process. Step broadly represents performing any of a variety of validation operations on the compiled package.

In step the process generates a notification relating to the test results. For example the test results may be sent to the user that checked in the source code in step . Additionally or alternatively the test results may be sent to the development team and or team leader s responsible for the code in the repository. Additionally or alternatively the test results may be sent to a quality and assurance team. Additionally or alternatively the custom virtual computer instance that is generated in response to committing code to a repository on application server computer may be removed after the results are determined and or sent to an administrator.

A virtual computer instance may have higher throughput and lower latency with a client computer that is topologically closer in the network. Networks that are geographically close may also be topologically close. Thus a client computer downloading content from a custom virtual computer instance that is running on a geographically close computer may experience higher throughput and lower latency than if the custom virtual computer instance was running on a computer geographically further away from the client computer. Accordingly custom virtual computer instances may be deployed on one or more regions on one or more elastic virtual computer clouds.

Master long running process is a long running process that runs on master server computer and receives one or more requests to launch custom virtual computer instances from client computer . Master long running process may cause to one or more launch custom virtual computer instances on elastic virtual computer cloud and or elastic virtual computer cloud through server computer and server computer respectively. Thus master long running process is communicatively coupled with client computer server computer and server computer .

Master server computer is illustrated as if remotely coupled to client computer elastic virtual computer cloud and elastic virtual computer cloud . However master server computer may be located on elastic virtual computer cloud or elastic virtual computer cloud . Furthermore master server computer may be the same computer as client computer server computer or server computer . Further still master long running process may be the same process as long running process and or long running process .

Shared storage may be used to store snapshots or exchange other data between elastic virtual computer cloud elastic virtual computer cloud and or master server computer . Shared storage is illustrated as if remotely coupled to elastic virtual computer cloud elastic virtual computer cloud and master server computer . However shared storage may be local to and or part of elastic virtual computer cloud elastic virtual computer cloud and or master server computer . Furthermore shared storage may be the same computer as any computer in system .

In an embodiment functional units of master server computer may be implemented using any of the techniques further described herein in connection with for example the server computer may comprise a general purpose computer configured with one or more stored programs which when executed cause performing the functions described herein for the master long running process or a special purpose computer with digital logic that is configured to execute the functions or digital logic that is used in other computing devices.

In step the master long running process sends a request to a server computer in each region specified in the request. For purposes of illustrating a clear example assume that elastic virtual computer cloud comprises one or more computers located in Chicago elastic virtual computer cloud comprises one or more computers located in San Jose and master long running process maintains a mapping between the elastic virtual computer clouds and and the regions s at which each cloud has one or more server computers located at. Based on the mapping master long running process may send a first request to long running process to generate a custom virtual computer instance in Chicago as defined in the request received in step . Master long running process may send a second request to long running process to generate a custom virtual computer instance in San Jose as defined the request received in step .

In step each long running process that receives a request sent in step generates a custom virtual computer instance at the region specified in the received request. For example long running process may perform one or more of the methods discussed herein to generate a custom virtual computer instance on a computer that is in Chicago and is in elastic virtual computer cloud . Furthermore long running process may perform one or more of the methods discussed herein to generate a custom virtual computer instance on a computer that is in San Jose and is in elastic virtual computer cloud .

Additionally or alternatively in response to receiving the first request long running process may generate and take a snapshot of a volume according to one or more of the methods discussed herein. Long running process may receive the snapshot generated by long running process and generate a custom virtual computer instance using the snapshot. For example long running process may store the snapshot on shared storage . Additionally or alternatively long running process may send the snapshot to long running process .

An elastic virtual computer cloud may span more than one geographic region. For example assume elastic virtual computer cloud has computers that execute custom virtual computer instances in Chicago and Miami. In response to a request from client computer to generate a custom virtual computer instance in Miami or in the Southern US region master long running process may launch a custom virtual computer instance on a computer in Miami using one or more of the methods discussed herein.

Regions may be based on cities states countries and or continents. For example one elastic virtual computer cloud may support a European region an Eastern United States region a Western United States region and an Asia region.

4.4 Providing a Service for Launching Custom Virtual Computer Instances and Generating Custom Snapshots

Launching custom virtual computer instances and storing custom snapshots may be provided as a service. For example a long running process and or another process on a server computer may provide an API such as a REpresentational State Transfer RESTful API to launch one or more custom virtual computer instances generate custom snapshots check on the status of a custom virtual computer instance being launched and or check on the status of a custom snapshot being generated. Additionally or alternatively an autonomous application and or process such as a source code repository and or source code repository process executing on client computer and or application computer may cause a long running process on a server computer to generate one or more custom virtual computer instances through the API. Additionally the API may allow users and or applications to launch generate cancel pause and or destroy one or more custom virtual computer instances and or one or more custom snapshots.

As part of the service the long running process may report the progress and or status of launching a new custom virtual computer instance and or generating a custom snapshot. illustrates an example graphical user interface that may be presented by a client computer in an example embodiment. In the example of interface may be generated by a long running process and provided to a client computer for rendering in a browser at the client computer. Additionally or alternatively interface may be part of a locally installed application program or app on the client computer.

In interface includes progress indicator and status label . Progress indicator may visually indicate the progress that one or more long running processes have made in launching one or more custom virtual computer instances and or generating a snapshot. Status label may describe the particular stage the one or more long running processes are at. For example if a long running process is mounting a volume to install one or more software packages then progress indicator may be partially filled and status label may display the words Mounting Volume as illustrated.

The service may provide statistics to an administrator. For example an administrator may query master long running process for statistics on how long one or more long running processes on one or more server computers are taking to launch custom virtual computer instances and or generate custom snapshots.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

1. A method comprising using a first server computer executing a process that is configured to generate virtual computer instances receiving a request to generate a first custom virtual computer instance wherein the request identifies one or more software packages to install on the first custom virtual computer instance copying a first pre configured volume image onto a volume of a data storage device wherein the volume includes one or more base software packages in a file system mounting the volume to the first server computer in response to receiving the request installing each of the one or more software packages on the volume unmounting the volume creating a snapshot of the volume registering the snapshot as a registered custom volume image wherein the process is performed using one or more computing devices.

2. The method any of clause 1 comprising launching the first custom virtual computer instance from the volume communicating data indicating that the first custom virtual computer instance is instantiated receiving at the process a second request to generate a second custom virtual computer instance determining that the second request identifies the one or more software packages installed on the registered custom volume image in response to determining the one or more software packages are installed on the registered custom volume image copying the registered custom volume image to a second volume launching the second custom virtual computer instance from the second volume without mounting the second volume onto the first server computer installing the one or more software packages and unmounting the second volume from the first server computer.

3. The method any of clause 1 2 comprising receiving a second request to generate a second custom virtual computer instance and identifying the one or more software packages installed on the first custom virtual computer instance in response to receiving the second request copying the first pre configured volume image to a second volume mounting the second volume that is a copy of the first pre configured volume image to the first server computer wherein the second volume includes the one or more base software packages installing each of the one or more software packages on the second volume unmounting the second volume launching the second custom virtual computer instance from the second volume communicating data indicating that the second custom virtual computer instance is instantiated.

4. The method any of clause 1 3 wherein the request identifies at least a base software package and the one or more base software packages and the method comprises maintaining a pool of pre configured volume images comprising the first pre configured volume image wherein each pre configured volume image of the pre configured volume images includes a unique set of base software packages that are installed determining that the one or more base software packages are installed on the first pre configured volume image selecting the first pre configured volume image to copy to the volume based at least in part on determining that the one or more base software packages are installed on the first pre configured volume image.

5. The method any of clause 1 4 comprising receiving a commit request at a source code version control server computer to commit a set of source code to a version control system committing the set of source code to the version control system determining that the set of source code was committed successfully and in response compiling the set of source code and generating a compiled software package sending the request to the process to generate the first custom virtual computer instance wherein the request identifies the one or more software packages that should be installed on the first custom virtual computer instance and includes the compiled software package installing the compiled software package running a set of tests against the compiled software package on the first custom virtual computer instance generating a notification specifying which tests failed if any.

6. The method any of clause 1 5 wherein the process is a first long running process of a plurality of long running processes and each long running process of the plurality of long running processes is being executed on a different server computer in a particular geographic region and is capable of launching one or more custom virtual computer instances at the particular geographic region the request identifies a geographic region and the method comprises executing a master process at a master server computer receiving the request at the master process determining that the first server computer is located in the geographic region identified in the request sending the request to the first long running process executed by the first server computer to instantiate the first custom virtual computer instance at the geographic region.

7. The method any of clause 1 6 comprising communicating data indicating a progress state of the process while the process is copying the first pre configured volume image onto the volume mounting the volume installing the one or more software packages unmounting the volume and or launching the first custom virtual computer instance.

8. A non transitory computer readable data storage medium storing one or more sequences of instructions which when executed cause one or more processors to perform any of the methods recited in clauses 1 7

9. A computer program product including instructions which when implemented on one or more processors carries out any of the methods recited in clauses 1 7.

10. A computing device having a processor configured to perform any of the methods recited in clauses 1 7.

