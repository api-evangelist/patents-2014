---

title: Location and time based application management
abstract: An application manager on a user device determines a current location of the user device and determines that the current location is a recognized location where the user device has previously been used to access one or more applications. The application manager identifies previous state information for the user device corresponding to a previous state of the user device at the recognized location and restores a current state of the user device to the previous state based at least in part on the previous state information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09479630&OS=09479630&RS=09479630
owner: Amazon Technologies, Inc.
number: 09479630
owner_city: Seattle
owner_country: US
publication_date: 20141208
---
A large and growing population of users enjoys entertainment through the consumption of media items including electronic media such as electronic books also referred to herein as ebooks electronic newspapers electronic magazines other electronic publications audio books and digital video. Users employ various electronic devices to consume such media items. Among these electronic devices are electronic book readers cellular telephones personal digital assistants PDAs portable media players tablet computers electronic pads netbooks desktop computers notebook computers and the like. These electronic devices also offer a platform for the execution of applications such as entertainment applications productivity applications business applications social networking applications or other types of applications.

Embodiments are described for location and time based application management on a user device. The particular applications or application files that a user may access on their user device e.g. smartphone tablet laptop may vary depending on the location where the device is used. For example a user may access a particular set of applications e.g. email calendar word processor when he is at his office but a different set of applications when he is at home e.g. video game media player . In one embodiment in response to some trigger event including a wake up event such as activating the user device unlocking the user device turning on the user device powering up the user device waking the user device from a sleep or low power mode or launching a particular application an application manager on the user device may determine the current location of the user device and identify stored state information corresponding to the current location. The stored device state information may include records indicating which applications were accessed on the user device recognized locations at which the applications were accessed and time periods during which the applications were accessed. Using the state information the application manager can automatically restore the state of the user device to the previous state including launching any applications and loading any application files that were previously or typically used at the same location. In one embodiment the automatic restoring of the device state may occur without any intervention from the user. Thus the user may not have to specifically request that the previously used applications be launched. Rather the application manager may initiate the restoring simply as a result of the user device returning to a previous recognized location.

In another embodiment the application manager may present a user interface that includes previous locations where the device was used and previous time periods when the device was used. The user may select one of these locations or time periods even if it is different than the current location and the application manager may restore the state of the device to that of the selected location or time period. In another embodiment the application manager may recommend applications or programs to the user based on the location of the user device. For example the application manager may provide a list of applications that are popular among other users at the same location. These recommendations may include applications already on the user device or new applications that the user can obtain from an application provider.

By providing the ability to restore the device state to a previous state based on location or time the application manager can improve the user experience on the device by preventing the user from constantly having to open and close applications. Similarly the user may also be notified of new and potentially useful or entertaining applications used by others at the same location of which the user may not have previously been aware.

Subsequently in one embodiment the user closes Application on user device and travels to Location B. Location B for example may be the user s home. At Location B the user accesses Application on user device . Application for example may be a media player application or other entertainment application. At that time the application manager running on user device records state information of the user device for Location B including an indication that Application was accessed at Location B and a time period during which Application was accessed at Location B.

In one embodiment at some later time e.g. the next day the user closes Application and returns to the previously visited Location A. Upon returning to Location A and perhaps in response to some trigger event including a wake up event such as activating the user device unlocking the user device turning on the user device powering up the user device waking the user device from a sleep or low power mode or launching a particular application the application manager on user device may determine the current location i.e. Location A of user device and identify any stored device state information corresponding to the current location. The stored device state information may include records indicating which applications e.g. Application were previously accessed on user device at Location A. Using the device state information the application manager can automatically restore the state of the user device to the previous state including relaunching Application and loading any application files identified in the device state information without any intervention from the user.

User device may be any type of computing device including a server computer gateway computer desktop computer laptop computer mobile communications device cell phone smart phone hand held computer tablet computer or similar computing device. User device may be variously configured with different features to enable viewing of content and resources and the execution of one or more applications. In one embodiment user device includes an operating system an optional standalone application manager program one or more other applications and internal data store .

Operating system may include a set of programs that manage hardware resources of user device and provide common services for applications such as applications running on user device . In one embodiment operating system may include a kernel to control low level processes such as how memory is read and written the order in which processes are executed how information is received and sent by user device to control any peripheral devices such as a monitor keyboard mouse touch screen etc. and how to interpret information received over networks. Operating system may additionally include a user interface to interact with a user of user device allowing the user to control and use applications . In one embodiment the user interface may be graphical with icons and a desktop or home screen such as a launcher which may be accessed by the user for example using a touch screen display. In one embodiment the available applications may be displayed as part of the launcher. In addition operating system may include application programming interfaces APIs to provide services and code libraries that let application developers write modular code reusing well defined programming sequences in user space libraries or in the operating system itself. In one embodiment where user device is a mobile computing device such as a tablet the operating system may be the ANDROID operating system from Google Inc. of Mountain View Calif. In other embodiments operating system may be some other mobile or non mobile operating system such as iOS from Apple Inc. or Windows Phone from Microsoft.

Applications may include software programs that cause user device to perform useful tasks beyond the running of the computer itself. Applications may include various types of programs including for example content access applications such as media players entertainment applications such as video games general productivity and information retrieval applications such as email calendar contacts stock market or weather information applications social networking applications or other types of applications.

In one embodiment operating system includes application manager . In other embodiments application manager may be a standalone application. The description that follows will be provided with respect to the embodiment where application manager is integrated into operating system . It should be understood however that the description may apply equally to the embodiment where application manager is a standalone application running on top of user device . Application manager may be designed to maintain a database of information such as device state information in internal data store . When one of applications is launched or otherwise activated or when one of applications loads a particular application file application manager may record an indication of the application or application file an indication of the location of the user device and an indication of the time period when the access occurred.

In response to some trigger event such as a wake up event occurring at a given location application manager may determine the current location of user device and identify state information corresponding to the current location that is stored in internal data store . The stored device state information may include records indicating which applications were accessed on user device recognized locations at which the applications were accessed and time periods during which the applications were accessed. Using the state information application manager can automatically restore the state of user device to the previous state including launching any applications and loading any application files that were previously or typically used at the same location. Additional details of application manager are provided below.

In one embodiment trigger detection module detects a trigger event that initiates an application management process. The trigger event may be configurable but may include for example unlocking the user device turning on the user device powering up the user device waking the user device from a sleep or low power mode activation of the user device the launch of a particular application the arrival at a given location etc. In one embodiment trigger detection module monitors user device to determine whether a triggering condition has occurred.

In one embodiment location module obtains location information from a positioning system on user device . The positioning system may include a receiver to communicate with a navigation system such as the Global Positioning System GPS to determine a location of the user device . In other embodiments the positioning system may determine the location of user device based on an Internet Protocol IP address a Message Authentication Code MAC address radio frequency identification RFID Wi Fi connection location or by some other means. The positioning system may determine the location of user device using a set of universal coordinates such as latitude and longitude. In one embodiment user device may be a device that the user has with them most of the time e.g. a smartphone such that the location of user device can usually be associated with the location of the user.

In one embodiment local data store interface module manages application manager database in internal data store . Local data store interface module can create entries in application manager database for device state information or other information associated with a given application . In one embodiment local data store interface module may use location information determined by location module to identify a corresponding entry or record in application manager database . For example local data store interface module may consult application manager database to determine using the current location whether an entry or record corresponding to the location is present. Furthermore local data store interface module may add remove or modify data in the entries of application manager database . One example implementation of application manager database is shown in . Additional details of application manager database are provided below.

In one embodiment device state module can set or restore the state of user device using state information obtained from application manager database . In one embodiment setting or restoring the state of user device may include relaunching previously used applications and loading previously accessed application files identified in the device state information that are associated with the current location of user device .

In one embodiment user interface module generates and presents a user interface to enable interaction between application manager and a user of user device . In one embodiment user interface module receives user input such as a selection of a location time period application application file etc. entered using an input device e.g. a touchscreen . User interface module may provide that information to local data store interface module for storage in application manager database or to device state module for use in setting or restoring the device state. In one embodiment user interface module may present user selectable options including for example locations where and time periods when user device was previously used to access certain applications and may receive a user selection of one or more of those options.

In one embodiment synchronization module controls synchronization of application manager database with a copy on server data store . In one embodiment once local data store interface module makes changes to application manager database local data store interface module notifies synchronization module of the changes. In response to this notification synchronization module may propagate the changes to server data store over network . In one embodiment synchronization module provides only the entries in application manager database that were changed e.g. an incremental update . In another embodiment synchronization module may provide a copy of the entire application manager database . In one embodiment synchronization module may synchronize with server data store in response to changes to application manager database or after some threshold period of time has passed since the last synchronization. The synchronization may include any process such as the copy or transfer of data to ensure consistency between application manager database and server data store .

Referring to at block method detects a management trigger event. In one embodiment trigger detection module detects a trigger event that initiates an application management process. The trigger event may be configurable but may include for example unlocking the user device turning on the user device powering up the user device waking the user device from a sleep or low power mode activation of the user device the launch of a particular application the arrival at a given location etc. In one embodiment trigger detection module monitors user device to determine whether a triggering condition has occurred.

At block method determines the current location of user device . In one embodiment location module obtains location information from a positioning system on user device . The positioning system may include a receiver to communicate with a navigation system such as the Global Positioning System GPS to determine a location of the user device . In other embodiments the positioning system may determine the location of user device based on an Internet Protocol IP address a Message Authentication Code MAC address radio frequency identification RFID Wi Fi connection location or by some other means.

At block method determines whether the current location of user device is recognized. In one embodiment local data store interface module may consult application manager database to determine using the current location whether an entry corresponding to the current location is present. If an entry corresponding to the current location is already present in application manager database application manager determines that the current location is a recognized location.

Returning to if the current location is a recognized location at block method identifies device state information associated with the recognized location. In one embodiment local data store interface module reads the other fields such as application field for the entry having a value representing the current location in location field . The device state information may include for example an indication of which applications were accessed on user device recognized locations at which the applications were accessed and time periods during which the applications were accessed.

At block method restores a current state of the user device to a previous state using the identified device state information. In one embodiment device state module restores the device state for example by relaunching any applications and reloading any application files that were previously or typically used at the same location. In one embodiment the restoring of the device state may occur without any intervention from the user.

If at block method determines that the current location is not a recognized location at block method creates a new location. In one embodiment local data store interface module creates a new entry in application manager database corresponding to the new location and at block method monitors and records device state information corresponding to the new location. In one embodiment device state module keeps track of what applications and application files are accessed at the new location and local data store interface module records an indication of such in the new entry in application manager database corresponding to the new location. In one embodiment method continues to monitor the device state information even after restoring the device state at block . In this manner if the device state continues to change the recorded device state information will be up to date and accurate and can be used the next time the device state is restored.

Referring to at block method detects a management trigger event. In one embodiment trigger detection module detects a trigger event that initiates an application management process. The trigger event may be configurable but may include for example unlocking the user device turning on the user device powering up the user device waking the user device from a sleep or low power mode activation of the user device the launch of a particular application the arrival at a given location etc. In one embodiment trigger detection module monitors user device to determine whether a triggering condition has occurred.

At block method presents a management interface. In one embodiment user interface module generates and presents a user interface to enable interaction between application manager and a user of user device . In one embodiment user interface module may present user selectable options including for example locations where and time periods when user device was previously used to access certain applications and may receive a user selection of one or more of those options.

In one embodiment user interface module further receives user input such as a selection of a location time period application application file etc. entered using an input device e.g. a touchscreen .

Referring again to at block method determines if a location interface is selected. In one embodiment the location interface displays one or more locations where user device was previously used. At block method identifies and displays one or more recognized locations. In one embodiment local data store interface module accesses application manager database and determines all of the locations which have a corresponding entry in application manager database . User interface module generates a user interface to present the identified locations to the user. The locations may be presented in different formats such as in a list on a map etc. At block method receives a user selection of one of the presented locations and at block method identifies and displays stored device state information corresponding to the selected location. In one embodiment local data store interface module accesses the entries in corresponding application manager database corresponding to the selected location and identifies the applications and application files that were accessed at the location as well as the time periods during which they were accessed. In one embodiment method automatically restores the device state based on the determined state information. In another embodiment at block method receives a user selection of one or more applications or application files to restore and relaunches them accordingly.

At block method determines if a time interface is selected. In one embodiment the time interface displays one or more time periods when user device was previously used. At block method identifies and displays one or more recognized time periods. In one embodiment local data store interface module accesses application manager database and determines all of the time periods which have a corresponding entry in application manager database . User interface module generates a user interface to present the identified time periods to the user. The time periods may be presented in different formats such as in a list on a timeline etc. At block method receives a user selection of one of the presented time periods and at block method identifies and displays stored device state information corresponding to the selected location. In one embodiment local data store interface module accesses the entries in corresponding application manager database corresponding to the selected time period and identifies the applications and application files that were accessed during the time period as well as the locations at which they were accessed. In one embodiment method automatically restores the device state based on the determined state information. In another embodiment at block method receives a user selection of one or more applications or application files to restore and relaunches them accordingly.

At block method determines if an application discovery interface is selected. In one embodiment at block the application discovery interface displays one or more recommended applications or application files based on the location of user device . For example application manager may provide a list of applications that are popular among other users at the same location. These recommendations may include applications already on the user device or new applications that the user can obtain from an application provider. At block method receives a user selection of one or more applications or application files and launches or loads them accordingly.

Referring to at block method monitors the current state of user device . In one embodiment device state module keeps track of what applications are accessed on user device the locations where those applications are accessed and the time periods during which they are accessed.

At block method determines if a snapshot time has been reached. The snapshot time may be a configurable parameter that occurs periodically to indicate that the current device state information should be recorded. In one embodiment the period between snapshot times is set to one hour. In other embodiments the snapshot time may be configured to some other value. If the snapshot time has been reached at block method records the current state information. In one embodiment device state module may provide this state information to local data store interface module to be recorded in a corresponding entry of application manager database .

If the snapshot time has not yet been reached at block method determines if an incremental update time has been reached. The incremental update time may be a configurable parameter that occurs periodically to indicate that an incremental update to the device state information should be recorded. In one embodiment the period between incremental update times is set to one minute. In other embodiments the incremental update time may be configured to some other value. If the incremental update time has been reached at block method determines if the state information has changed. In one embodiment device state module determines if there has been any change to the location of the device or the applications or application files that have been accessed. If this state information has changed at block method records a differential update to the device state information. In one embodiment local data store interface module modifies an existing entry of application manager database with the new state information.

If the incremental update time has not yet been reached at block method determines if a server backup time has been reached. The server backup time may be a configurable parameter that occurs periodically to indicate that the state information in application manager database on internal data store should be synchronized with server data store . In one embodiment the period between backup times is set to 24 hours. In other embodiments the backup time may be configured to some other value. If the backup time has been reached at block method synchronizes the server data store with internal data store . In one embodiment synchronization module may provide a copy of the entire application manager database . The synchronization may include any process such as the copy or transfer of data to ensure consistency between application manager database and server data store .

The user device includes one or more processing devices such as one or more CPUs microcontrollers field programmable gate arrays or other types of processors. The user device also includes system memory which may correspond to any combination of volatile and or non volatile storage mechanisms. The system memory stores information which provides an operating system component various program modules and or other components. The user device performs functions by using the processing device s to execute instructions provided by the system memory .

The user device also includes a data storage device that may be composed of one or more types of removable storage and or one or more types of non removable storage. The data storage device includes a computer readable storage medium on which is stored one or more sets of instructions embodying any one or more of the methodologies or functions described herein. As shown the instructions may reside completely or at least partially within the computer readable storage medium system memory and or within the processing device s during execution thereof by the user device the system memory and the processing device s also constituting computer readable media. The user device may also include one or more input devices keyboard mouse device specialized selection keys etc. and one or more output devices displays printers audio output mechanisms etc. .

The user device further includes a wireless modem to allow the user device to communicate via a wireless network e.g. such as provided by the wireless communication system and or with other computing devices such as remote computers including server and so forth. The wireless modem may allow the user device to handle both voice and non voice communications such as communications for text messages multimedia messages media downloads web browsing etc. over network . The wireless modem may provide network connectivity using any type of mobile network technology including for example cellular digital packet data CDPD general packet radio service GPRS enhanced data rates for GSM evolution EDGE universal mobile telecommunications system UMTS 1 times radio transmission technology 1 RTT evaluation data optimized EVDO high speed downlink packet access HSDPA WiFi etc. The wireless modem may generate signals and send these signals to power amplifier amp for amplification after which they are wirelessly transmitted via antenna . In addition to sending data antenna also receives data which is sent to wireless modem and transferred to processing device s .

In one embodiment user device includes an optical sensor . The optical sensor may be a low resolution camera e.g. having 0.2 or 0.3 Megapixels that takes images e.g. of a user s eyes on a periodic basis. Alternatively the optical sensor may have a higher resolution such as 1 Megapixel up to 10 or more Megapixels. In one embodiment user device includes one or more additional sensors including sensors that aid in location and time determination.

The processing device s may include sensor circuitry e.g. sensor device drivers that enables the processing device s to interpret signals received from the optical sensor s and or additional sensors . In one embodiment the optical sensors and or additional sensors output raw sensor data. In another embodiment the optical sensors and or additional sensors output fully processed signals to the processing device s . In either instance the processing device may use the sensor circuitry to process and or interpret the received data. If data is received from multiple sensors processing the data may include averaging the data identifying a maximum from the data or otherwise combining the data from the multiple sensors.

The example computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM a static memory e.g. flash memory static random access memory SRAM and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the application manager for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable medium on which is stored one or more sets of instructions e.g. instructions of application manager embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within processing logic of the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable media. The instructions may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an example embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

The preceding description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several embodiments of the present invention. It will be apparent to one skilled in the art however that at least some embodiments of the present invention may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present invention. Thus the specific details set forth are merely examples. Particular implementations may vary from these example details and still be contemplated to be within the scope of the present invention.

In the above description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that embodiments of the invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the description.

Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as determining identifying adding selecting or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

