---

title: Client/server security by an intermediary executing instructions received from a server and rendering client application instructions
abstract: In an embodiment, a method comprises intercepting, from a server computer, a first set of instructions that define a user interface; executing, using a headless browser, the first set of instructions without presenting the user interface; rendering a second set of instructions, which when executed by a client application on a client computer, cause the client computer to present the user interface, wherein the second set of instructions are different than the first set of instructions; sending the second set of instructions to the client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544329&OS=09544329&RS=09544329
owner: Shape Security, Inc.
number: 09544329
owner_city: Mountain View
owner_country: US
publication_date: 20140318
---
The present disclosure generally relates to security techniques applicable to client server systems and relates more specifically to techniques for improving the security of client computers interacting with server computers through an intermediary computer.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Browsers are powerful computer program applications that may execute instructions received from a web server to generate complex user interfaces that are presented to a user through one or more devices such as a display monitor or speakers. Perpetrators of fraud or theft fraudsters may inject malicious instructions which when executed by a browser may cause among other things sensitive data to be sent to an unknown party the client computer to be used for a cyber attack or malware to be installed on the client computer.

Browsers prevent some malware from being installed on a client computer by limiting functionality. For example a browser executing on a client computer may restrict a JavaScript run time environment from accessing files stored on the client computer. However fraudsters regularly find new ways to embed malicious software through a browser. For example a fraudster may embed a key logger program into an image file. After a browser downloads an image file referenced in a web page the browser may store the image on the client computer. Opening the image file may cause executing the key logger on the client computer. The key logger may record data indicating each keystroke a user makes regardless of which program the user is currently using on the computer. The key logger can send the recorded data back to the fraudster.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of illustrating clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement illustrated in the one or more other figures is not required in other embodiments. Furthermore while the instructions discussed in many example embodiments are HTML JavaScript and CSS instructions in other embodiments the instructions intercepted and generated by the headless browser need not be HTML JavaScript and or CSS instructions.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

For certain embodiments some of the terms used herein may have some of the following meanings among others 

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

A browser may be one or more computer programs or other software elements stored in electronic digital memory and running on a computer that receives instructions from a server computer performs one or more of the received instructions causes to display content provides a user interface UI to receive user inputs and or receives and responds to one or more inputs from a user based on or according to the one or more performed instructions. A browser and or components of a browser may be implemented into an application. For example a browser and or components of a browser may be implemented into a mobile application as part of a web view and or web view controller to send and or receive data over HTTP and or other protocol. A user may use a browser to send data to a server computer. The server computer may respond with additional instructions.

A web browser may be a browser that receives instructions comprising HTML CSS and or JavaScript over HTTP or some derivative thereof such as HTTPS.

A headless browser may be one or more computer programs or software elements executed on a computer that receives a set of instructions from a server computer performs one or more of the received instructions generates a different set of instructions and or sends the different set of instructions to a client application executed on a separate computer. Additionally or alternatively a headless browser need not cause presenting a UI to a user at the computer that the headless browser is running on according to the received set of instructions and or the rendered set of instructions. Additionally or alternatively a headless browser need not provide a user interface UI to receive user inputs and or respond to user inputs according to the set of received executed instructions. Additionally or alternatively a headless browser may receive and or respond to data received from a client application. The data received from the client application may be generated by the client application in response to a user input. Additionally or alternatively a headless browser may implement one or more security mechanisms to verify the integrity of one or more communicatively coupled client applications.

A client application may be one or more computer programs or software elements executed on a computer which when executed causes the computer to present a UI to a user based on instructions received from a server computer and or headless browser.

A hardened client application may be a client application that presents a UI to a user based on specialized instructions received from a headless browser. A hardened client application may comprise a browser and or components of a browser. A hardened client application may implement one or more one or more security mechanisms to verify the validity of a headless browser.

 Specialized instructions or application instructions may mean one or more instructions sent from a headless browser to a client application which the client application is programmed to process.

 Presenting a UI or providing a UI may mean visually displaying or rendering graphical images of objects that are defined in a set of received instructions according to the received set of instructions. Additionally or alternatively presenting may mean playing audio or other multimedia content to a user according to a received set of instructions. Additionally or alternatively presenting an UI or providing a UI may mean providing a UI to receive user inputs and or respond to user inputs according to a set of received executed instructions.

 Sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using HyperText Transfer Protocol. Additionally or alternatively sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using a subset of the HTTP such as secure HTTP HTTPS . Additionally or alternatively one or more other protocols may be used such as SPDY and or a long running socket.

A long running socket between may be a socket that remains open for either a client computer and or a server computer to send and or receive data over an indefinite period of time. For example after a server computer sends instructions to a client computer using a long running socket the server computer need not close the long running socket. Additionally or alternatively after the client computer sends data to server computer the client computer need not close the long running socket. Accordingly using a long running socket a client computer and server computer need not open a new socket to each time either sends and or receives data from the other. A long running socket may implement a standard protocol such as web sockets or a proprietary protocol.

An object may be a data structure that can be identified by an identifier and or a relationship with another object. For example an object may have a unique identifier that is a string such as a document customer number username address and or offset. Accordingly the object may be referenced and or retrieved using the identifier. Also for example if a particular object is the first child object of a parent object then the particular object may be referenced and or retrieved using a pointer to the parent object and then retrieving a pointer to the first child object. A method of referencing objects by identifier and or relationships is called XPath. An object may be a particular type of object. For example one object may be a button another object may be an input or specifically a text field and another object may be an image.

An attribute may be data that identifies and or describes the appearance behavior and or content of an object. For example an attribute may be a unique identifier such as a name. An attribute may indicate that an object is a type of input such as a text field text area checkbox and or radio button. An attribute may indicate that an object is a password text field accordingly a client application rendering the text field object on a monitor need not cause the characters that are entered into the field object to be displayed. An attribute associated with the text field object may be updated to include the value entered in the text field. Other attributes may define or describe dimension position color visibility value and any other functional or visual aspect of an object.

A document object model DOM may be a cross platform and language independent representation of one or more objects that are interrelated. For example a DOM may represent one or more objects in an object tree and or hierarchy. An object within the hierarchy may be a parent object which has one or more child objects. A child object may also have one or more child objects.

 Creating updating and or removing an object may mean creating updating and or removing a data structure in memory that represents an object an object s attributes and or relationships between an object and one or more other objects because these processes directly or indirectly involve changing the state of registers or other structures in electronic digital memory circuits the processes necessarily involve using a computer to transform the state of tangible things.

An operation may be any function method script and or any other code which when executed operates on an object.

 Operating on an object may mean creating removing and or updating an object. Additionally operating on an object may mean performing one or more operations that use an object attribute and or relationship between an object and one or more other objects as input.

 Instructions may mean one or more codes and or data that define one or more objects and or one or more operations. For example instructions may comprise HyperText Markup Language HTML eXtensible Markup Language XML cascading style sheets CSS JavaScript and or any other standard or proprietary languages or codes that define objects attributes relationships between objects and or operations.

 Performing instructions or executing instructions may mean creating one or more objects and or performing one or more operations defined by the instructions.

 Rendering instructions may mean generating one or more instructions. The rendered instructions may be based on objects and or operations stored in memory such that when the generated one or more instructions are executed the same objects and or same operations are created in memory.

A first object may be the same as a second object if the first object maintains the same one or more values attributes and or relationships as the second object. The underlying representation of the first object in memory need not be the same as the underlying representation of the second object in memory. For purposes of illustrating a clear example assume that a first program is allocated a first memory segment a second program is allocated a second segment the first program maintains a first object in the first memory segment the second program maintains a second object in the second memory segment the first object comprises a value six the second object comprises a value six. In this situation the first object and the second object may be the same object because the first object maintains the same value as the second object even though the first object and the second object are located in different memory segments.

If the value stored in the first memory segment is stored as an 8 bit integer and the value stored in the second memory segment is stored as an American Standard Code for Information Interchange ASCII string then the first object and the second object may be the same object because the first object maintains the same value as the second object even though the underlying representation of the value in the first memory segment is stored differently than the representation of the value in the second memory segment.

As another example assume that the first program is running on a first computer that comprises a 32 bit processor and addresses memory using 32 bit addresses the second program is running on a second computer that comprises a 64 bit processor and addresses memory using 64 bit addresses the first object is a parent object and comprises a pointer to a child object stored in the first memory segment the second object is a parent object and comprises a pointer to a child object stored in the second memory segment. In this situation the first object and the second object may be the same object because the first object maintains the same values and relationships as the second object even though the pointer to the child stored in the first memory segment may be a 32 bit pointer and the pointer in the second memory segment may be a 64 bit pointer.

If the first program stores the data that represents the first object contiguously in the first memory segment and the second program stores the data that represents the second object scattered throughout the second memory segment then the first object and the second object may be the same object even though the underlying data structure that represents the first object is stored differently than the underlying data structure that represents the second object.

Or for example assume the first program is a first HTTP browser the second program is a second different HTTP browser the first object may have an attribute id the second object may have an attribute id the value for the id attribute is MyObject for both the first object and the second object is. In this situation the underlying representation of the first object in the first browser may be drastically different than the underlying representation of the second object in the second browser. However the operations that operate on the two objects may be programmatically identical. For example the same JavaScript executed by the first HTTP browser and the second HTTP browser may retrieve the first object maintained by the first HTTP browser and the second object respectively document.getElementById MyObject .

Other factors that may result in a different underlying representation of the same object may include the endianness of a processor amount of memory available different applications and or any other different hardware and or software configurations.

An attribute map may be a map from one attribute name and or value to one or more other names and or values. For example assume an object has an attribute id which defines a unique identifier MyObject . An attribute map may associate MyObject with a different unique identifier such as tcejbOyM . Additionally an attribute map may be used to map a modified attribute name and or value to an original name and or value. An attribute map may be an operation hash map and or any other method or associative data structure.

A DOM map may be a map from a first DOM to a second different DOM. For example a DOM map may be a collection of attribute maps. Each attribute map in the DOM map may be an attribute map for an attribute of an object in a first DOM with a modified attribute in a second DOM. Additionally or alternatively a DOM map may map one hierarchy to another different hierarchy and back again. For example a DOM map may modify a relationship between a first object and a second object such that a first object is not related to a second object in a first DOM and the first object is a parent object to the second object in the second DOM.

A bot may mean a computer and or software executed by a computer that automates sending and or receiving data. For example a bot may be a web scraper web crawler automatic web browser and or any other tool designed to submit and or receive data from one or more web servers. A bot may comprise complex logic designed to respond to data received from one or more web servers.

In an embodiment a data processing method comprises intercepting from a server computer a first set of instructions that define a user interface executing using a headless browser the first set of instructions without presenting the user interface rendering a second set of instructions which when executed by a client application on a client computer cause the client computer to present the user interface wherein the second set of instructions are different than the first set of instructions sending the second set of instructions to the client computer.

In an embodiment the method comprises executing using the headless browser the first set of instructions to produce one or more data structures in memory rendering the second set of instructions which when executed by the client application cause the client computer to generate the one or more data structures in memory on the client computer.

In an embodiment the method comprises executing using the headless browser the first set of instructions to produce one or more data structures in memory updating the one or more data structures based at least in part on a configuration to produce one or more updated data structures rendering the second set of instructions which when executed by the client application cause the client computer to generate the one or more updated data structures in memory on the client computer.

In an embodiment the method comprises receiving at an intermediary computer a first request for a first intermediary credential to verify that the intermediary computer is a valid intermediary computer sending the first intermediary credential to the client application receiving at the intermediary computer a second request for a second intermediary credential wherein the first request is different than the second request sending the second intermediary credential to the client application wherein the first intermediary credential is different than the second intermediary credential.

A web browser may be a tool through which application programs can provide client computers with content in a dynamic custom UI. For example in response to receiving a request for data from a web browser a web server responds with a set of instructions. The instructions may define object that include data organized into objects. The instructions may also define how the data and or objects may be presented in a UI.

Unfortunately attackers may install malicious instructions on a client computer by exploiting features of a vulnerable web browser. For example an attacker may embed malicious instructions in content hosted on a web server such as a web page image or other media. After a vulnerable web browser receives and performs the instructions included in the content from the web server then the web browser may install and or execute the malicious instructions on the client computer running the vulnerable web browser. Thus an attacker may infect a client computer by including instructions in a web page which when executed by a web browser causes the web browser to execute the malicious instructions on the client computer.

Separating the frontend of a browser browser frontend from the backend of a browser browser backend may protect a client computer. The browser frontend as discussed in detail herein may present a UI to a user using a client computer. The browser backend as discussed in detail herein processes content received from a web server. For purposes of illustrating a clear example assume a browser backend is executed on a server computer a browser frontend is executed on a client computer and an attacker has embedded malicious instructions in one or more JavaScript instructions. If the browser backend performs the JavaScript on the server computer not the client computer then the client computer need not execute the JavaScript with the embedded malicious instructions.

A headless browser which may include a browser backend may apply additional transformations which prevent malicious instructions and or other data from being installed and or executed on a client computer. For example a headless browser may use a browser backend to perform instructions received from a web server. In response the headless browser may generate one or more data structures that correspond to the objects defined in the received instructions but need not include the instructions received from the web server. The headless browser may modify the data structures. The headless browser may render and send one or more application instructions to a client application which when executed by the client application on a client computer recreate the data structures in memory on the client computer. The client application which may include a browser frontend may process the application instructions and present a user interface with the browser frontend based at least in part on the in memory data structures.

Browser backend comprises protocol module domain name server DNS module local storage module image parser CSS parser HTML parser JavaScript parser extension execution environment document object model DOM module and JavaScript execution environment . Other embodiments may use other protocols modules and or parsers.

Protocol module DNS module and local storage module may send and or receive data through OS System API layer . For example protocol module may send and or receive data over any protocol such as HTTP to from a server computer through OS system API layer . Data received through protocol module may reference data sources by one or more domain names. DNS module may resolve the one or more domain names referenced by interfacing with one or more remote domain name servers through OS system API layer . Local storage module may store and or recall data from memory through OS system API layer .

Image parser CSS Parser HTML parser and JavaScript parser may parse data received through protocol module . HTML parser may parse HTML data. CSS parser may parse CSS data. JavaScript parser may parse JavaScript data. Image parser may parse image data. Each parser may generate and or update objects in a DOM maintained by DOM module .

Browser backend may comprise sets of program logic implementing one or more programmable engines such as extension execution environment and JavaScript execution environment . Extensions may be written one or more programming languages include JavaScript Python Ruby and or any other language. Each programmable engine may have access to DOM module and may operate on one or more objects from a DOM maintained by DOM module . For example JavaScript execution environment may execute JavaScript parsed by JavaScript parser and in response create update and or delete one or more objects managed by DOM module .

Browser frontend comprises rendering engine interactivity module and user interface . Each of the components may cause through OS frontend API layer one or more objects to be presented to a user using a client computer.

Rendering engine may determine how objects are presented to a user. For example rendering engine may determine the color shape orientation position and or any other visual and or audio attribute of an image text field button and or any other object defined by a set of received instructions. Furthermore rendering engine may cause a button to be displayed on a monitor coupled to a client computer through OS frontend API layer .

User interface may determine what may be presented to a user. For example user interface may determine that a submit button should be hidden until data has been entered in one or more text fields. After data has been entered in the one or more text fields user interface may notify rendering engine to render the submit button accordingly.

Interactivity module may receive one or more inputs through OS Frontend API layer . For example in response to a user pressing a button on a mouse coupled to a client computer the OS running on the client computer may send a message to interactivity module through OS frontend API layer to indicate that a user pressed a button on a mouse. Interactivity module may determine that a user selected a particular button currently presented on a monitor. Interactively module may notify user interface and or rendering engine to update to update the UI accordingly.

While each of the components listed above is illustrated as if running on a separate remote computer from each other one or more of the components listed above may be part of and or executed on the same computer. For example headless browser data store and or web infrastructure may be executed on the same computer local area and or wide area network. Additionally or alternatively intermediary computer and or headless browser may be a proxy server and or layer for web infrastructure . Additionally or alternatively intermediary computer and or headless browser may be in line between a router and web infrastructure such that intermediary computer and or headless browser may intercept all network data sent to and or sent from web infrastructure over one or more protocols. Additionally or alternatively headless browser may be a software layer between web infrastructure and or a component of web infrastructure and hardened client application .

Referring again to web infrastructure may be one or more server computers that receive requests for data from users through one or more browsers such browser and or headless browser . Web infrastructure may respond by sending data to the browser that sends the request. As illustrated in the data sent from web infrastructure may include instructions HTML JavaScript and CSS .

Original web server computer may be a server computer that receives requests for data and responds with data. For example original web server computer may be an HTTP based web server that receives HTTP requests and responds with data comprising HTML CSS and or JavaScript instructions. Additionally or alternatively original web server computer may respond with data that references data on other server computers such as third party web server computers .

Third party web server computers may store additional data referenced by instructions sent from original web server computer . For example data from original web server computer may include a reference to a JavaScript file stored on third party web server computers . Accordingly a headless browser and or a browser backend such as a browser backend and or headless browser may request the referenced JavaScript file from third party web server computers . Also for example data from original web server computer may include a reference to an image stored on third party web server computers . Accordingly a headless browser and or a browser backend such as browser backend and or headless browser may request the referenced image from third party web server computers .

Returning now to headless browser may be an intermediary that may intercept instructions sent from web infrastructure execute one or more of the intercepted instructions generate new specialized instructions and send the specialized instructions to a client application. For example headless browser may intercept HTML JavaScript and CSS generate application instructions and send application instructions to hardened client application . Application instructions may comprise proprietary and or standard instructions. If application instructions include HTML JavaScript and or CSS instructions then application instructions may include different HTML JavaScript and or CSS instructions than HTML JavaScript and CSS . Additionally headless browser may intercept a request from hardened client application generate a new and or modified request and send the new and or modified request to web infrastructure .

In headless browser may be an HTTP or SPDY intermediary that intercepts executes and or processes HTML JavaScript and CSS instructions. Additionally or alternatively headless browser may intercept requests for data and or instructions from a client application generate an HTTP request and send the generated HTTP request to one or more HTTP and or SPDY based web servers. However headless browser may be an intermediary for any other standard and or proprietary protocol. Furthermore each of the components discussed which headless browser is comprised of may be configured to perform any of the processes and or methods discussed herein for any standard and or proprietary protocol.

Intermediary computer may be a server computer that one or more domain name servers or other elements of the domain name system DNS identify in DNS records as a destination network address associated with one or more internet domain names. Accordingly intermediary computer and or headless browser may receive requests sent to the one or more domains from hardened client application . Based on using DNS to resolve the domain name in a request to a network address intermediary computer and or headless browser may forward the request or a modified request to a server computer in web infrastructure such as original web server computer .

In headless browser is programmed to receive instructions from and send requests to a particular server computer or a particular set of server computers such as a set of one or more web servers that are owned and or managed by a single entity like a particular bank. However in an embodiment headless browser may be programmed to receive instructions from and send requests to more than one particular server computer and or particular set of computers.

In headless browser is programmed to send application instructions to and receive requests from a particular type of client application hardened client application . However in an embodiment headless browser may be programmed to send application instructions to receive requests from and or open sockets with one or more types of client applications.

Protocol client module may intercept data over any standard or proprietary protocol. For example protocol client module may intercept data over HTTP. Accordingly protocol client module may be communicatively coupled with web infrastructure original web server computer and third party web server computers .

Browser backend may be an HTTP based headless browser similar to browser backend . Additionally or alternatively browser backend may be based on one or more other standard and or proprietary protocols.

Browser backend may perform instructions intercepted by protocol client module which cause browser backend to generate one or more objects. After performing the instructions browser backend may notify forward transformer to begin rendering instructions based on the data structures created by browser backend that are currently in memory. Accordingly browser backend and forward transformer may be communicatively coupled.

Browser backend may make requests for additional data. For example if instructions received from Protocol client module reference additional instructions stored on a third party web server browser backend may request the additional instructions through protocol client module . Accordingly browser backend and protocol client module are communicatively coupled.

Forward transformer may render a new set of instructions based on the one or more objects and or operations in memory. Additionally or alternatively forward transformer may operate on the objects created by browser backend and generate one or more attribute maps and or DOM maps. Forward transformer may store the one or more attribute maps and or DOM maps in data store . Accordingly forward transformer may be communicatively coupled to data store .

Forward transformer may operate on objects and or render instructions based on one or more configurations specified in configuration . Accordingly forward transformer may be communicatively coupled to configuration .

Forward transformer may send the rendered instructions to protocol server module . Accordingly forward transformer may be communicatively coupled to protocol server module .

Protocol server module may receive the instructions generated by forward transformer and send the generated instructions to hardened client application . Additionally or alternatively protocol server module may intercept requests from hardened client application and forward the requests to transaction module . Accordingly protocol server module may be communicatively coupled to hardened client application forward transformer and transaction module .

Transaction module may receive requests intercepted by protocol server module from hardened client application . Transaction module may retrieve one or more attribute maps and or DOM maps based on data in the request and forward the request with the retrieved one or more attribute maps and or DOM maps to reverse transformer . Accordingly transaction module may be communicatively coupled with reverse transformer and data store .

Reverse transformer may translate requests intercepted by protocol server module which are based on instructions generated by forward transformer into requests that would have been generated by hardened client application had hardened client application been a web browser and had received the original instructions sent from original web server computer . Reverse transformer may translate requests based on the one or more attribute maps and or DOM maps retrieved by transaction module . Reverse transformer may send the translated request to original web server computer through protocol client module . Accordingly reverse transformer may be communicatively coupled with protocol client module .

Configuration may be a database a configuration file and or any other system that stores configurations settings preferences and or protocols. Configuration may store more than one configuration for one or more web servers in web infrastructure and or one or more headless browsers.

Returning to in an embodiment hardened client application may be a client computer program application executed on client computer . illustrates functional units in a hardened client application in an example embodiment. In hardened client application comprises specialized protocol module specialized parser security module DOM module specialized execution environment rendering engine interactivity module and user interface module . Hardened client application and or one or more of its components may be communicatively coupled with an intermediary such as intermediary computer and or headless browser through OS system APIs .

Specialized protocol module may send requests to and or receive application instructions from an intermediary such as headless browser . Specialized protocol module may send and or receive data over a standard protocol such as HTTP. Additionally or alternatively specialized protocol module may receive instructions using a proprietary protocol such as a proprietary long running socket connection.

Specialized parser may process application instructions received by specialized protocol module . The application instructions may be one or more standard and or proprietary instructions. Application instructions may be a limited set of instructions that cause hardened client application to perform one or more methods that have been tested or otherwise deemed secure and or non harmful by the author s and or distributor s of hardened client application .

Specialized execution environment may have access to DOM module and may operate on one or more objects from a DOM maintained by DOM module . For example specialized execution environment may execute the application instructions parsed by specialized parser and in response create update and or delete one or more objects managed by DOM module .

Rendering engine interactivity module and or user interface may performed the methods and or features discussed regarding rendering engine interactivity module and user interface respectively. Rendering engine interactivity module and or user interface may cause a UI to be presented to a client using client computer through OS fronted APIs .

In an embodiment a client application may be isolated by the underlying OS on the client computer. For example the data stored on client computer may be encrypted by the hardened client application such that no other application may read the data stored on the device by hardened client application . Additionally or alternatively the operation system may limit the locations on client computer where the hardened client application may store data. In an embodiment the OS need not allow the hardened client application to store and or install any data and or instruction in persistent memory and or a file system used by one or more other applications installed on client computer .

Security module may respond to requests from a headless browser to verify that hardened client application is a secure and valid hardened client application and may perform a security validation of the application. Additionally or alternatively security module may send a request to a headless browser such as headless browser to verify that headless browser is a secure and valid headless browser. Security module may be programmed to expect a particular correct response which may change over time from a secure and valid headless browser. If the response from the headless browser is incorrect then security module may cause the hardened client application to disconnect from the headless browser. Additionally or alternatively if the response from the headless browser is incorrect then security module may cause hardened client application to disregard and or not perform application instructions received from the headless browser. Additionally or alternatively security module may be a watchdog process that limits the functionality and or operations performed by hardened client application to reinforce security.

Security module may be a watchdog process that monitors other processes and or applications executed by client computer as the processes are instantiated and executed ending monitoring when the processes terminate. For example security module may detect if an outside process a process and or application other than hardened client application is instantiated or accesses and or attempts to access memory allocated to hardened client application on client computer . If so security module may terminate hardened client application and or the outside process. Additionally or alternatively security module may prevent hardened client application from accessing memory outside of the memory allocated to hardened client application on client computer .

Security module may encrypt and or decrypt data stored and or read by hardened client application in volatile or non volatile memory on client computer . Additionally or alternatively security module may encrypt and or decrypt data and or instructions sent between hardened client application and headless browser .

Security module may store data on intermediary computer and or data store . For example instead of storing a user s credential granting access to a bank account on client computer security module may upload the user s credential to headless browser . Headless browser and or one of its modules may store the user s credential in data store . Additionally or alternatively security module may upload the user s credential to data store without using headless browser .

Security module may prevent hardened client application from installing and or storing executable content on client computer . For example executable code may be embedded in an image file which when installed and or used causes a key logger to be executed by client computer . The key logger may log a user s input such as key strokes and report what a user typed to a fraudster. In this example security module may prevent hardened client application from storing opening and or using an image file and or any other content that may be or may potentially be malicious and or insecure. Additionally or alternatively security module may also simulate keyboard signal to inject false data in a running key logger.

Security module may implement one or more polymorphic methods and or protocols that prevent a bot automated script and or process from reading data caused to be presented by rendering engine interactivity module and or user interface . Security module may implement one or more polymorphic methods and or protocols that prevent an automated script and or process from inputting data into rendering engine interactivity module and or user interface .

Security module may perform one or more integrity checks to ensure that all the data intended to be sent and or received between hardened client application and headless browser is actually received by the intended recipient. For example security module may perform a checksum on a set of application instructions sent by headless browser . Security module may compare the checksum with a checksum embedded in the received application instructions by headless browser . Additionally or alternatively security module may embed a checksum in data and or instructions set to headless browser . Headless browser may compute a checksum and compare the computed checksum with the checksum embedded in the received data and or instructions. If data and or instructions are received by headless browser and or hardened client application that include checksum that does not match a computed checksum then headless browser and or hardened client application may ignore the data and or instructions.

In an embodiment a data processing method may be configured to intercept instructions from a server computer that are directed toward a client computer execute the intercepted instructions within the server computer without providing the original instructions to the client computer generate different instructions and or send the different instructions to a client application to present a UI based on the intercepted instructions. In an embodiment a data processing method may be configured to receive requests from a client application cache data from the request modify the request send the modified request to a web server receive data from the web server in response to the modified request and or send a response to the client application. Various embodiments may use standard web protocols such as HTTP and or standard web based instructions such as HTML CSS and or JavaScript. Additionally or alternatively other standard and or proprietary protocols may be used. Additionally or alternatively other standard and or proprietary instructions may be used.

In step the headless browser executes the intercepted instructions. For example protocol client module may send the HTML CSS and or JavaScript to browser backend . Browser backend may execute the instructions.

Returning now to in step the headless browser performs one or more operations which operate on the objects. For example JavaScript execution environment may execute one or more operations in state info which operate on the one or more objects in DOM . Additionally or alternatively JavaScript execution environment may execute one or more JavaScript instructions in received HTML JavaScript and CSS . Additionally or alternatively extension execution environment or JavaScript execution environment may perform one or more other operations that update DOM and or one or more objects in DOM .

Returning now to in step the headless browser renders a second set of specialized instructions for the client application. As discussed earlier the originally received instructions may but need not be HTML CSS and or JavaScript instructions. Furthermore the rendered instructions may but need not be HTML CSS and or JavaScript instructions. For purposes of illustrating a clear example assume that the originally intercepted instructions in step comprise HTML CSS and JavaScript instructions HTML JavaScript and CSS . Furthermore assume that forward transformer is configured to generate proprietary application instructions that hardened client application is programmed to parse and perform such as application instructions .

In an embodiment application instructions may be limited to methods and or functions that have been deemed to be safe by hardened client application . For example hardened client application may support one or more instructions to display a button at a particular location on a display. However hardened client application need not support one or more instructions that install and or persistently store a image pdf flash file data and or executable code on a client computer.

In an embodiment application instructions do not include the headers in the originally intercepted instructions. For example forward transformer may render application instructions without the HTTP headers included in HTML JavaScript and CSS . Additionally or alternatively the headers in application instructions may be different than the headers in the intercepted instructions HTML JavaScript and CSS .

In an embodiment the UI may be partially predetermined by hardened client application . The rendered application instructions may comprise data objects encoded in one or more standard and or proprietary data formats that populate a UI. For example application instructions may include a string for a button label. Also for example application instructions may include data that indicates the dimensions and or placement of the button. Application instructions need not contain executable instructions.

The rendered application instructions need not comprise the same programming language s scripting language s and or data interchange format s as the original instructions intercepted in step . For example the rendered instructions may comprise one or more other standard languages formats and or codes that are not included in the originally intercepted instructions Dynamic HTML XML eXtensible Stylesheet Language VBScript Lua YAML Ain t Markup Language YAML JavaScript Object Notation JSON shell script Java Ruby Python and or Lisp. Also for example rendered application instructions may comprise one or more proprietary bit packed and or binary encoded instructions and or data formats.

In an embodiment before forward transformer renders application instructions forward transformer may modify one or more in memory objects and or operations based on one or more polymorphic protocols. Additionally or alternatively after forward transformer renders application instructions forward transformer may modify the rendered application instructions . Accordingly the content and or format of the content from the headless browser to a client application may vary over time. For example according to a polymorphic protocol forward transformer may modify one or more of the identifiers of the objects and or operations. Also for example one or more supervisor operations may be added which intercept calls to originally defined objects and or operations. The one or more supervisor operations may allow the caller method to operate on the reference object and or operation based on one or more factors such as which method and or operation called an originally defined object and or operation or whether access to the called object and or operation is allowed.

Forward transformer may use configuration to determine which polymorphic method s and or protocol s to use. Accordingly configuration may define one or more polymorphic protocols. Additionally or alternatively configuration may define which objects operations and or instructions may be modified. Additionally or alternatively configuration may define which objects operations and or instructions need not be modified.

Headless browser may select a configuration in configuration based on any number of factors. For example headless browser may select a configuration in configuration based on a domain associated with the server computer that the instructions were intercepted from. Additionally or alternatively headless browser may select a configuration in configuration based on a random variable seeded by time. Additionally or alternatively headless browser may select a configuration in configuration based on attributes and or properties of hardened client application . For example headless browser may select a configuration based on what types of instructions hardened client application is capable of interpreting and or processing.

In step the headless browser may include an intermediary credential to validate the headless browser. An intermediary credential may include a particular code and or other data to validate the authenticity of the headless browser. For example forward transformer may include an intermediary credential in application instructions . After hardened client application receives the intermediary credential security module may verify that the intermediary credential is valid. In response hardened client application may execute client application instructions otherwise hardened client application may discard the received application instructions.

The intermediary credential may be dynamic. For example a dynamic credential may be based on time and or any other factor s . A client application may be programmed to expect and or validate the correct intermediary credential from headless browser . If the intermediary credential is dynamic then a fraudster may have a harder time spoofing the intermediary credential and thus a harder time spoofing a headless browser.

A headless browser may send an intermediary credential to a client application in other cases. For example a headless browser may send an intermediary credential to a client application when the client application and the headless browser are opening a long running socket. Also for example in response to a request from a first client application a headless browser may respond with an intermediary credential.

In step the headless browser may include one or more instructions to validate the client application. For example forward transformer may include one or more instructions which when processed by a client application may cause security module to return a client application credential to validate that hardened client application is a valid uncompromised client application. The one or more instructions may be based on an account username password internet protocol address clock and or any other factor s or input. If hardened client application fails to provide a valid client application credential then headless browser may terminate the connection and or ignore requests from hardened client application .

The client application credential may be dynamic and or change periodically. For example the one or more instructions to validate the client application may be based on a clock time causing a client application credential to change over time. Additionally or alternatively security module may be programmed to give one of a preset number of client application credentials. Headless browser may be programmed to expect the correct client application credential from hardened client application . The client application credential may be encrypted using one or more encryptions schemes. If the client application credential is dynamic then a fraudster may have harder time spoofing a client application credential and thus a comprising and or spoofing a client application.

Headless browser may request to validate the client application from time to time without sending a corresponding set of application instructions. For example forward transformer may send a request to validate hardened client application when hardened client application and the headless browser are opening a long running socket.

After headless browser receives a client application credential headless browser or a module such as protocol server module transaction module and or reverse transformer may verify that the received client application credential is valid. If the client application credential is valid then headless browser may continue to interact with hardened client application . If not then headless browser may close any connection to hardened client application until hardened client application provides a valid application credential.

Returning to in step the headless browser may send the second set of specialized instructions to the client application over a secure socket. For example headless browser may open a long running encrypted socket between headless browser and hardened client application . In an embodiment hardened client application may open the secure socket with headless browser before headless browser intercepts the first set of instructions from a server computer to the client computer in step . Headless browser may send the rendered instructions from step to hardened client application .

A client application may perform the one or more received application instructions and present a UI accordingly. For example hardened client application may perform application instructions which cause hardened client application to generate the same in memory data structures that headless browser generated and or modified in step and or step . Hardened client application may generate and or populate a UI based on application instructions and or the generated in memory data structures. Security module may validate headless browser based on the intermediary credential included in the received instructions. Security module may also perform the one or more instructions to generate a client application credential. Security module may send the client application credential to headless browser .

In an embodiment a headless browser may send application instructions over time based on validation of the headless browser by the client application and validation of the client application by the headless browser. For example headless browser may send hardened client application a portion of the application instructions. The portion of application instructions may include an intermediary credential and application instructions which when processed by hardened client application may cause hardened client application to produce a client application credential and send the client application credential to headless browser . After hardened client application receives the portion of application instructions and validates headless browser then hardened client application may produce the client application credential and send the client application credential to headless browser . After headless browser receives and validates the client application credential then headless browser may send the remainder of the application instructions generated in step and or step to hardened client application .

In step the headless browser may receive a request from the client application over the open secure socket. For example hardened client application may receive input indicating that a user selected a particular button that is a link to additional content that hardened client application does not have. In response hardened client application may submit a request to headless browser for the additional content.

In step the headless browser caches data based on the request. For example protocol server module may receive the request and pass the request to transaction module . The request may include user credentials to login and control a bank account. Transaction module may store the credentials in data store . Additionally or alternatively protocol server module may store the credentials in data store .

In step the headless browser determines whether data is needed from a remote server computer. For example if the request received in step is for data stored in data store then control may proceed to step otherwise control may proceed to step .

In step the headless browser requests and receives data from a server computer. For example transaction module may forward the request received in step to reverse transformer . Reverse transformer may generate a new request based on the request received in step . For example reverse transformer may generate a new request by modifying the received request based on the changes made by forward transformer including any attribute maps and or DOM maps stored in data store . After the new request is generated by reverse transformer reverse transformer sends the request through protocol client module . The new request may be sent to original web server computer and or any other server that stores the requested data and or instructions. Protocol client module may receive the requested data from original web server computer .

In step the headless browser sends a response to hardened client application. For example if transaction module determines that the data requested by hardened client application is stored in data store in step then transaction module may collect the requested data from the data store and send the data to forward transformer . Forward transformer may render application instructions based on the collected data and send the application instructions through protocol server module to hardened client application . Additionally or alternatively if additional data and or instructions were received from a server computer in step then browser backend and or forward transformer may render application instructions based on the received data and or instructions. Forward transformer may send the application instructions to hardened client application through protocol server module .

The computer systems logic and processes described herein may be applied in many tangible concrete contexts with the result and benefit of improving machine efficiency by preventing the unnecessary execution of non secure and or unexpected machine operations. As an example the techniques herein may be used to manage a bank account through a hardened client application and a headless browser according to an embodiment. For purposes of illustrating a clear example this example process may be described with reference to one or more figures but using the particular arrangement illustrated in the one or more other figures is not required in other embodiments. While this process describes managing a bank account for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements discussed.

An account holder at a particular bank using a web browser such as browser running on client computer may request account data from the particular bank. In response the particular bank may send HTML CSS and or JavaScript instructions which when executed by the browser may present the account holder with a link to open download and or install a hardened client application. An option to continue using the browser may also be presented. The account holder may select the link and the browser may download and or install the hardened client application . Additionally or alternatively the account holder may download hardened client application through another service such as an application repository that stores applications compatible with client computer . For example hardened client application may be a mobile application that a mobile device may download and or install from a mobile application store. The account holder may cause client computer to begin executing hardened client application .

Hardened client application may open a long running secure socket with headless browser . Hardened client application and headless browser may exchange credentials such that hardened client application may validate headless browser and headless browser may validate hardened client application . If the long running secure socket is closed then hardened client application and or headless browser may open a new long running secure socket between each other. Hardened client application and headless browser may validate each other again. Additionally or alternatively hardened client application and headless browser may validate each other periodically to make sure neither one has been corrupted and or compromised. Additionally or alternatively the client application credential may be a particular hard coded credential provided by the bank such that only a hardened client application provided by the bank may use headless browser to access a bank account held at the bank. Furthermore headless browser may submit the particular hard coded credential to the bank to indicate that it is handling a request on the behalf of a hardened client application provided by the bank.

The account holder may enter bank account credentials such as a user name and password into fields that hardened client application may cause to be displayed. Hardened client application may send headless browser the bank account credentials.

Headless browser may generate a request to send to the bank s web server s web infrastructure . Headless browser may store the account credentials in data store .

In response to sending the account credentials to the banks web server s headless browser may receive from web infrastructure HTML CSS and or JavaScript instructions. The instructions may include a security token that identifies the account holder data that describes the state of the account and or instructions that define a UI to present at least a portion of the data. Headless browser may store the security token in data store .

Headless browser may execute the instructions and render application instructions that hardened client application is programmed to perform. Headless browser may send the application instructions to hardened client application . Headless browser may include an intermediary credential that hardened client application may use to validate headless browser . Headless browser may include one or more instructions to validate hardened client application .

Hardened client application may receive the application instructions. In response hardened client application may execute the application instructions and present a UI accordingly. The UI may present the account holder with data describing the state of the bank account. Additionally or alternatively hardened client application may validate headless browser using the included intermediary credential. Hardened client application may perform the one or more instructions to validate hardened client application . Hardened client application may produce a client application credential accordingly. Hardened client application may send the client application credential to headless browser . Headless browser may validate hardened client application accordingly.

Hardened client application may receive data from client computer indicating that the account holder selected a button in the UI requesting a list of recent transactions. In response hardened client application may send a request to headless browser for the list of recent transactions through the long running socket. Hardened client application need not include the security token received from web infrastructure because in this example headless browser stored the security token in data store .

Headless browser may receive the request for the list of recent transactions. If headless browser already had the list of recent transactions stored in data store then headless browser may generate and respond with application instructions that include the list of recent transactions from data store . However for this example assume that data store does not include the list of recent transactions for the account holder s account. Thus headless browser may send a request for the list of recent transactions to web infrastructure . Headless browser may identify the particular account by including the security token received from web infrastructure which was stored in data store .

Headless browser may receive HTML CSS and or JavaScript instructions describing the list of recent transactions. Headless browser may execute the instructions and produce a new set of application instructions. Headless browser may send the new application instructions to hardened client application .

Hardened client application may present the list of recent transactions to the account holder through client computer . The list of recent transactions may be presented in a UI according to the received new application instructions.

In the above example an account holder uses a hardened client application to securely control a corresponding bank account with a credential that identified the account holder. Additionally or alternatively one or more users may use a hardened client application to browse one or more web servers anonymously and or securely through the same headless browser. In all cases a benefit of these techniques is that machine efficiency is improved because the computers involved in a transaction or process are not required to execute unnecessary instructions or operations that would otherwise occur as a result of the influence of malware or fraudsters. In some cases transactions or processes may execute more rapidly because such unnecessary operations are avoided.

Groups such as companies that allow members such as employees to use their own personal client computers on a company network may risk internal server computers being infected with malicious programs installed on personal client computers. A group may reduce the risk by requiring members using personal devices to access an internal server computer through a hardened client application and a headless browser running on a local intermediary computer.

The internal server computer may be configured to accept connections between headless browsers running on local intermediary computers but need not accept other connections. For example if an employee wants access to a company s local server computer then the employee may install a hardened client application. The employee may interface with the company s local server computer through the installed hardened client application and a headless browser executed on a local intermediary.

The hardened client application may be distributed by the group internally. The hardened client application may be a proprietary client application developed by and or for the group and its members. The hardened client application and or the internal intermediary computer may be configured to perform operations that the group has deemed to be safe. The headless browser may be a proprietary headless browser developed by and or for the group and its members. The headless browser may be configured to send data requests and or instructions to the group s internal server computer that the group has deemed to be safe. Thus an exclusive group such as a company may mitigate risk by using internally the techniques discussed herein.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Using the networked computer arrangements intermediary computer and or processing methods described herein security in client server data processing may be significantly increased. In particular the use of browser programs becomes significantly more secure. Forward transforming and reverse transforming techniques herein effectively permit obfuscating data field and or container identifiers and DOM modification for data that is financial personal or otherwise sensitive so that attackers cannot determine which fields and or containers in a web page include the sensitive data. Consequently one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities are frustrated because all fields and or containers appear to the attacker to be gibberish or at least cannot be identified as indicating credit card data bank account numbers personally identifying information confidential data sensitive data proprietary data and or other data.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

