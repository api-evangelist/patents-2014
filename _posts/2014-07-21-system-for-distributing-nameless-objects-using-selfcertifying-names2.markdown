---

title: System for distributing nameless objects using self-certifying names
abstract: A content replication system can cache nameless Content Object across multiple replica servers in a Content Centric Network (CCN). During operation, a CCN client can obtain a nameless Content Object from one or more content-hosting services by disseminating an Interest for a data collection, and receives a Content Object that includes a manifest for the data collection. The manifest can include Content Object hash (COH) values for a set of other Content Objects of the data collection. The client then determines a name prefix for a content-hosting service that hosts the data collection, and generates another Interest for a Content Object of the data collection. This Interest's name includes the name prefix for the content-hosting service, and also includes a COH value for the respective Content Object. The client disseminates the new Interest over CCN to obtain the respective Content Object of the data collection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535968&OS=09535968&RS=09535968
owner: PALO ALTO RESEARCH CENTER INCORPORATED
number: 09535968
owner_city: Palo Alto
owner_country: US
publication_date: 20140721
---
The subject matter of this application is related to the subject matter in a co pending non provisional application by the same inventors as the instant application and filed on the same day as the instant application entitled AGGREGATE SIGNING OF DATA IN CONTENT CENTRIC NETWORKING having Ser. No. 14 231 515 and filing date 31 Mar. 2014.

This disclosure is generally related to a content centric network CCN . More specifically this disclosure is related to replicating nameless Content Objects across various content hosting services.

The proliferation of the Internet and e commerce continues to fuel revolutionary changes in the network industry. Today a significant number of information exchanges from online movie streaming to daily news delivery retail sales and instant messaging are conducted online. An increasing number of

Internet applications are also becoming mobile. However the current Internet operates on a largely location based addressing scheme. The most ubiquitous protocol the Internet Protocol IP is based on location based address. That is a consumer of content can only receive the content by explicitly requesting the content from an address e.g. IP address closely associated with a physical object or location. A request that has a URL with an IP address for a specific organization causes the request to go to that organization s servers and not to those of another organization.

Recently content centric networking CCN architectures have been proposed in the industry. CCN brings a new approach to content transport. Instead of having network traffic viewed at the application level as end to end connections over which content travels content is requested or returned based on its unique name and the network is responsible for routing content from the provider to the consumer.

With content centric networks an Interest message includes a name for a Content Object and a client can disseminate the Interest over CCN to obtain the Content Object from any CCN node that hosts the Content Object. The Interest is forwarded toward a CCN node that advertises at least a prefix of the Interest s name. If this CCN node can provide the Content Object this node can return the Content Object along the Interest s reverse path to satisfy the Interest.

Publishers oftentimes want to replicate their content across various host servers. Unfortunately doing so in CCN requires these host servers to advertise the content s name or name prefix so that CCN routers can know how to forward Interests for this content toward the third party servers. If a host server stores Content Objects for a large number of publishers the host server s neighboring nodes may need to update their forwarding tables to include entries for each name prefix associated with the Content Objects stored by the host server. This places a significant burden across CCN routers. To make matter worse if CCN routers do not implement a large enough forwarding table it is possible that these CCN routers may not be able to forward Interests to a host server for all Content Objects available from the host server.

One embodiment provides a client that can obtain a nameless Content Object from one or more content hosting services. During operation the client can disseminate an Interest for a data collection and receives a Content Object that includes a manifest for the data collection. The manifest can include Content Object hash COH values for a set of other Content Objects of the data collection. The client then determines a name prefix for a content hosting service that hosts at least a portion of the data collection and generates a second Interest for a respective Content Object of the data collection. The second Interest s name includes the name prefix for the content hosting service and also includes a COH value for the respective Content Object. The client disseminates over a Content Centric network CCN the second Interest to obtain the respective Content Object of the data collection.

In CCN each piece of content is individually named and each piece of data is bound to a unique name that distinguishes the data from any other piece of data such as other versions of the same data or data from other sources. This unique name allows a network device to request the data by disseminating a request or an Interest that indicates the unique name and can obtain the data independent from the data s storage location network location application and means of transportation. The following terms describe elements of a CCN architecture 

In some embodiments the name can include an identifier such as a hash value that is derived from the Content Object s data e.g. a checksum value and or from elements of the Content Object s name. A description of a hash based name is described in U.S. patent application Ser. No. 13 847 814 entitled ORDERED ELEMENT NAMING FOR NAME BASED PACKET FORWARDING by inventor Ignacio Solis filed 20 Mar. 2013 which is hereby incorporated by reference. A name can also be a flat label. Hereinafter name is used to refer to any name for a piece of data in a name data network such as a hierarchical name or name prefix a flat name a fixed length name an arbitrary length name or a label e.g. a Multiprotocol Label Switching MPLS label .

A description of a CCN architecture is described in U.S. patent application Ser. No. 12 338 175 entitled CONTROLLING THE SPREAD OF INTERESTS AND CONTENT IN A CONTENT CENTRIC NETWORK by inventors Van L. Jacobson and Diana K. Smetters filed 18 Dec. 2008 which is hereby incorporated by reference.

In some embodiments the other Content Objects of the data collection do not include a name and are accessed based on their Content Object hash value.

In some embodiments the manifest includes a root manifest that specifies a name prefix for one or more content hosting services that host at least a portion of the data collection.

In some variations to these embodiments the root manifest includes a signature for the root manifest.

In some variations to these embodiments while determining the name prefix for the content hosting service the client obtains the name prefix from the root manifest.

In some variations to these embodiments the non root manifest does not include a signature for the non root manifest.

In some variations to these embodiments while obtaining the name prefix for the content hosting service the client obtains the name prefix from a root manifest associated with the data collection.

In some embodiments the other Content Objects of the data collection include a set of non root manifests or a set of data Content Objects.

One embodiment provides a content hosting server that can store nameless Content Objects and can process an Interest that includes a Content

Object hash COH value to return a nameless Content Object whose hash value matches the COH value. During operation the server can receive an Interest whose name includes a name prefix for the content hosting service and also includes a COH value for a Content Object hosted by the content hosting service. The server obtains the Content Object whose hash matches the COH value and returns the Content Object along a face from which the Interest was received to satisfy the Interest.

In some embodiments the Content Object includes a manifest for a data collection such that the manifest includes COH values for a set of other Content Objects of the data collection.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

Embodiments of the present invention provide a content replication system that solves the problem of caching a Content Object across multiple replica servers that do not advertise a common name prefix. To solve this problem the content replication system allows a publisher to create nameless Content Objects which are addressed by a Content Object hash COH self certifying name.

These nameless Content Objects are truly placeless objects as they do not include a name and thus don t have an implied routing. The publisher can host these nameless Content Objects across various replica servers or hosting services even when these replica servers advertise only their own name prefix to other CCN nodes. The publisher can create a Manifest for a nameless Content Object or a hierarchy of Manifests for a collection of nameless Content Objects and can provide the Manifest or a root Manifest to a client that requests these Content Objects so that the client can generate Interests to request the nameless Content Objects directly from the replica server s . The Manifest or root Manifest includes name prefixes for the replica servers that host the nameless Content Objects and includes Content Object hash COH values that can be used to uniquely identify nameless Content Objects or other non root Manifests.

For example a publisher may want to store a collection of Content Objects on any hosting service e.g. a replica server that can cache and serve these Content Objects for a specific geographic location. These hosting services can include clusters of cache servers distributed across the globe and each cluster can have a unique name prefix to allow load balancers to redirect requests to a specific cluster or geographic region. However if the Content Objects were to have a name embedded into them and their signature with the publisher s name prefix these Content Objects could only be hosted by nodes or services that advertise the publisher s name prefix. The problem is that some of these services may host Content Objects for a large set of publishers and may only be storing a small number of Content Objects from each publisher. It would place an undesirable burden on the neighboring routers to map name prefixes for all these publishers to these services. In many cases it may not be possible for a router to create entries in a routing table for all these name prefixes as doing so may require more routing table entries than are available.

One option is for the publisher to change the name of these Content Objects so that each replica Content Object has a name with a prefix of the hosting service that is caching the replica Content Object. This allows redirecting an Interest specifically to a desired hosting service e.g. a replica server for a given geographic region . However doing so causes the replica Content Object with a new name to become a completely different Content Object than the original Content Object as these two Content Objects have different names and different signatures.

Another possible solution is encapsulation which involves encapsulating the publisher s Content Object whose name includes the publisher s name prefix into a Content Object whose name includes the replica server s name prefix. For example a publisher with a name prefix marc can encapsulate a Content Object marc foo into a Content Object with a name alice foo to allow a replica server having a name prefix alice to host the Content Object marc foo. A network node that performs load balancing e.g. a router or a gateway can redirect an Interest for marc foo to the replica server alice by generating and disseminating a new Interest for alice foo. Also when the replica server returns the Content Object this network node can decapsulate the Content Object marc foo from the Content Object alice foo and returns the decapsulated Content Object.

However encapsulation results in additional computation overhead at this network node as the network node needs to redirect Interests by generating new Interests and needs to keep state information for the Interests are being redirected. This network node would also need to be able to detect which Content Objects include an encapsulated Content Object and needs to spend precious processing time to decapsulate the Content Object marc foo from the replica Content Object alice foo before returning the decapsulated Content Object to the client. To make matters worse allowing a Content Object s name to change can allow for off path attacks that inject malicious or undesired content into an Interest s return path.

Hence embodiments of the present invention use a named and signed root Manifest and a collection of nameless and unsigned non root Manifests to identify nameless Content Objects in the collection as well as the name prefixes from wherein the data collection can be obtained. A description of Manifests also referred to as Aggregate Signing Objects is described in U.S. patent application Ser. No. 14 231 515 entitled AGGREGATE SIGNING OF DATA IN CONTENT CENTRIC NETWORKING by inventors Ersin Uzun Marc E. Mosko Michael F. Plass and Glenn C. Scott filed 31 Mar. 2014 which is hereby incorporated by reference.

For example network can be managed by an Internet service provider ISP and can include an edge node . that provides network access to a plurality of client devices. Network can also include edge nodes . and . that provide network access to a plurality of content hosting services e.g. directly or via a back haul network that can host or cache Content Objects for various content producers. A publisher e.g. a content producer can store a collection of nameless Content Objects at a content hosting service e.g. a content delivery network or a replication server as well as a content hosting service . Alternatively content hosting services and or may each correspond to a promiscuous caching service run by the ISP so that each caching service hosts nameless Content Objects using a different name prefix e.g. a name prefix associated with a particular geographic location .

Note that content hosting services and do not need to advertise a name prefix associated with the collection. Also publisher does not need to change a name prefix of the Content Objects to match a name prefix associated with content hosting service and or prior to providing the collection to content hosting services and . Rather publisher can generate a hierarchy of Manifests such that the root Manifest can include name prefixes for a set of content hosting services for the collection e.g. services and as well as Content Object hash COH values for a set of nameless Content Objects e.g. for other Manifests or for the data objects in the collection .

Device can request the collection by generating and disseminating an Interest that includes the collection s name such as a name prefix associated with publisher and a name suffix associated with the collection. When device disseminates the Interest edge nodes and or routing nodes can forward the Interest to publisher at which point publisher can return the root Manifest to device . Alternatively if a CCN node in network e.g. edge node . has cached the root Manifest this CCN node can return the root Manifest to device without having to forward the Interest to publisher .

Device can use the root Manifest to select a content hosting service from which to request the individual nameless Content Objects of the collection and uses the COH self certifying names to generate a request for each nameless Content Object in the collection. For example device can generate an Interest that includes the name prefix to the selected content hosting service and that includes the COH self certifying name for a respective nameless Content Object. Edge nodes and or routing nodes can use the name prefix in the Interest s name to forward the Interest to the appropriate content hosting service and the content hosting service can use the COH self certifying name to select the nameless Content Object that needs to be returned to device .

In some embodiments a publisher can partition a large data object e.g. a movie stream into a large collection of data segments and creates a nameless Content Object for each of these segments. The publisher can also create a hierarchy of Manifests for the collection which allows a client to obtain any replica of the Content Objects from any content hosting service that is named in the collection s root Manifest.

In some embodiments if the existing e.g. original root Manifest does not include a name prefix for a content hosting service that hosts one or more nameless Content Objects in a collection the content hosting service can create a new root Manifest that incorporates the existing root Manifest by reference or by inclusion. Device or any other consumer can use the new root Manifest and thus the content hosting service s name prefix to obtain the collection because the nameless Content Objects in the collection still have hash values that match the COH self certifying names as the existing trusted root Manifest. If device needs to validate the collection s authenticity device can still use the original root Manifest which is signed by the publisher to ensure the received Content Objects all have hash values that match the COH self certifying names specified in the original root Manifest or in a non root Manifest referenced by the root Manifest either directly or indirectly.

For example the publisher can create a set of p Manifests for the n Content Objects . If the publisher generates each Manifest to include COH self certifying names for up to m nameless Content Objects the publisher generates p n m Manifests that together include COH values for all n Content Objects .

For example the underlying data may include a 2 GB video stream. The publisher may partition the video stream into n 2 million nameless Content Objects and may generate p 100 000 first level Manifests that each includes a COH value for nameless Content Objects . The publisher can add non root Manifests to the collection and proceeds to generate another level of Manifests for non root Manifests . The publisher can iteratively create additional layers of Manifests until the publisher generates a root Manifest for the collection. If all Manifests include an equal number of COH values the final set of hierarchical Manifests can include logn Manifest levels.

In some embodiments the publisher can provide nameless Content Objects that include the partitioned data object and the non root Manifests to the various content hosting services that are to host the collection. The publisher can host the root Manifest and or can provide the root Manifest to any CCN node that has or will advertise the collection s name prefix. This allows a client to obtain the root Manifest from the publisher or any CCN node associated with the collection s name prefix and the client uses the root Manifest to access the non root Manifests and Content Objects from the content hosting services.

In some embodiments a client obtains content objects by first obtaining root Manifest from the publisher or any other CCN node that caches root Manifest and uses name prefixes and COH self certifying names in root Manifest to obtain a next level of non root Manifests . The client then uses the name prefixes in root Manifest and the COH self certifying names in Manifests to obtain the next level of non root Manifests. The client can continue to process the Manifests e.g. in a breadth first order until the client has obtained nameless Content Objects .

Payload of root Manifest can include a set of host prefixes that can be used to request the nameless Content Objects in the collection from a content hosting service. The content hosting service can host the partitioned Content Objects as well as the nameless non root Manifests. Payload can also include a set of Content Object hash COH values which a content hosting service can use to match against a nameless Content Object s hash value.

The publisher then provides the data collection or a portion thereof to each content hosting service referenced in the root manifest operation . These content hosting services may be a replica server operated by the publisher or a third party service or they may include any CCN device that volunteers to host the data collection. The publisher can provide to these hosts the nameless Content Objects that make up the data as well as the Manifests for these nameless Content Objects e.g. the hierarchy of nameless non root Manifests .

In some embodiments if the publisher receives an Interest for the piece of data e.g. an Interest whose name or name prefix matches the piece of data operation the publisher returns the root Manifest to satisfy the Interest operation . For example the publisher can return the root Manifest via a face from which the Interest was received at which point the root Manifest is forwarded along the Interest s path traversed in the reverse direction toward the client that disseminated the Interest. The client can use the root Manifest to select a content hosting service from which to obtain the data collection and generates Interests to obtain the data collection using a name prefix for the content hosting service and the Content Object hash values specified in the root Manifest as well as in any non root Manifest in the data collection .

Recall that the data collection includes a plurality of nameless Content Objects and a root Manifest that includes both a name and a signature. Hence when the Interest reaches a network node associated with the data collection s name prefix e.g. the publisher or a peer node this network node can return a Content Object that includes the root Manifest to satisfy the Interest. This Content Object is then forwarded along the path traversed by the Interest but in the reverse direction at which point the client receives the Content Object that includes the root Manifest for the data collection operation .

The root Manifest includes Content Object hash values for one or more nameless Content Objects such as the data objects or the non root Manifests and also includes name prefixes for one or more content hosting services that host at least a portion of the data collection. The client then obtains from the root manifest a name prefix for a content hosting service for the data collection operation and selects a Content Object hash COH self certifying name from the Manifest operation . The client then obtains a nameless Content Object whose hash matches the selected COH value by generating and disseminating an Interest that includes the name prefix for the content hosting service and that also includes the COH value e.g. appended to the name prefix for the content hosting service operation .

In some embodiments it is possible that the content hosting service s which have advertised the current name prefix may not be caching a nameless Content Object whose hash value matches the selected COH value. If this is the case the client may need to use a different name prefix to reach other content hosting services that may be caching the nameless Content Object. For example the client can generate the Interest for the COH value using the first name prefix in the root Manifest and proceeds to use the other name prefixes in the root Manifest whenever the client fails to obtain a Content Object for the Interest e.g. in the order in which they appear in the root Manifest . Hence if the client does not receive a Content Object that satisfies the Interest from operation e.g. within a predetermined timeout period operation the client can select a name prefix for another content hosting service from the root Manifest for the data collection operation and can return to operation to generate and disseminate another Interest for the COH value using this new name prefix.

If the client does receive the nameless Content Object that corresponds to the COH value the Content Object can proceed to disseminate Interests for other nameless Content Objects referenced in the Manifest. For example the client can determine whether there exist more COH values in the Manifest operation . If so the client can select another COH self certifying name from the Manifest operation and returns to operation to generate and disseminate another Interest for this other COH self certifying name. In some embodiments the client can generate the Interest for this other COH self certifying name using the first name prefix in the root Manifest. Alternatively the client can generate the Interest for the other COH using the same name prefix that was used to request the last nameless Content Object in the data collection.

Recall that some of the nameless Content Objects in the data collection can include non root Manifests. These non root Manifests include additional COH self certifying names for Content Objects in the data collection but may not include additional name prefixes for other content hosting services. Hence the client can repeat operations to process each additional non root Manifest that it receives which may form a hierarchy of Manifests using the COH names from each additional non root Manifest and the name prefixes from the root Manifest. For example if the client determines that there are no more COH names in the current Manifest operation the client can proceed to determine whether there exists a non root Manifest to process operation . If so the client can return to operation to process this next non root Manifest.

In some embodiments CCN nodes can process an Interest for a nameless Content Object by forwarding the Interest toward a content hosting service associated with the Interest s name prefix. The content hosting service can include for example a replica server or collection of servers that replicate data collections for one or more publishers or any third party service e.g. a promiscuous caching service run by an Internet Service Provider ISP that stores and hosts one or more nameless Content Objects. A third party service can receive the nameless Content Objects directly from the publisher from another third party service or can cache the nameless Content Objects as they are in transit along a return path to client devices that request these nameless Content Objects e.g. a CCN routing node or gateway .

In some embodiments the publisher provides one or more nameless Content Objects of a collection to the third party service the publisher may generate the root Manifest for the collection of Content Objects to include a name prefix for the third party service. In this case the third party service may also receive the root Manifest which includes a name prefix for the collection from the collection s publisher. The third party service can provide this root Manifest to any entity that may wish to obtain the collection of Content Objects from the third party service or any of the other servers listed in the root Manifest.

However the third party service may not always receive the collection from the publisher. In some variations the third party service can create its own root manifest for the collection so that the root Manifest includes a name prefix associated with the third party service. The third party service can incorporate an existing root Manifest e.g. the original root Manifest by reference or inclusion. A consumer can use the third party service s name prefix to request the collection because the nameless Content Objects in the collection still have hash values that match the COH values as in the existing trusted root Manifest. After receiving the collection the consumer can use the original trusted root Manifest to validate the collection. Thus a third party service can host nameless Content Objects using its own name prefix even if the third party service is not an official trusted source for the collection and even if the third party service was not included in the original root Manifest.

If incorporating the existing root Manifest by reference the third party service can generate the new root Manifest to have a payload that includes a name prefix for the root Manifest as well as the Content Object hash COH self certifying name for the existing root Manifest. Note that the name prefix to the root Manifest can include the third party service s own name prefix if hosted locally the publisher s name prefix and or the name prefix for any other third party service that hosts the existing root Manifest. On the other hand if incorporating the existing root Manifest by inclusion the third party service can generate the new root Manifest to have a payload that includes the name prefix for the third party service as well as the existing root Manifest which includes other name prefix and the COH values for the collection .

For example a client can use the original root Manifest to download the collection and to validate the authenticity of the collection. If the client or its user wants to re publish host the collection the client can generate publish its own root Manifest with a signature signed by the client and incorporates the original Manifest so that other clients can validate the authenticity of the nameless Content Objects served by the local client. The client can share this new root Manifest with others such as via email a Web link or a peer to peer tracker. Other clients can download the collection or a portion thereof from the local client via that new root Manifest even though the local client s name prefix is not listed in the official or trusted root Manifest.

Servers of the content hosting service can process the Interest by matching the Interest s Content Object hash COH self certifying name to a cached Content Object s hash regardless of the Interest s name prefix. presents a flow chart illustrating an exemplary method for processing an Interest message that requests a nameless object in accordance with an embodiment. During operation a server of the content hosting service can receive an Interest whose name includes a name prefix for the content hosting service and also includes a COH value a self certifying name of a nameless Content Object operation . The server then obtains from a local Content Store a nameless Content Object whose hash matches the COH value in the Interest without regard to the Interest s name prefix operation . The server then returns the matching nameless Content Object to satisfy the Interest operation .

In some embodiments the server returns the nameless Content Object via a face from which the server received the Interest. Also other CCN nodes forward the nameless Content Object along the path traversed by the Interest in the reverse direction based on the nameless Content Object s hash. For example when a CCN node receives the nameless Content Object the CCN node can determine a face to use to forward the nameless Content Object by performing a lookup in a Pending Interest Table PIT to match the nameless Content Object s hash to a COH value in a pending Interest regardless of the name prefix in these pending Interests.

In some embodiments communication module can disseminate and or receive CCN Interests and Content Objects. Collection managing module can add data to a collection by generating nameless Content Objects for the data and inserting these nameless Content Objects to the collection. Manifest generating module can generate Manifests e.g. a hierarchy of Manifests for the nameless Content Objects and can add these Manifests to the collection. Manifest processing module can process a Manifest for a data collection to generate and disseminate Interests that request nameless Content Objects in the collection based on their hash value.

Content replication system can include instructions which when executed by computer system can cause computer system to perform methods and or processes described in this disclosure. Specifically content replication system may include instructions for disseminating and or receiving CCN Interests and Content Objects communication module . Further content replication system can include instructions for adding data to a collection by generating nameless Content Objects for the data and inserting these nameless Content Objects to the collection collection managing module . Content replication system can also include instructions for generating Manifests e.g. a hierarchy of Manifests for the nameless Content Objects and adding these Manifests to the collection manifest generating module . Content replication system can also include instructions for processing a Manifest for a data collection to generate and disseminate Interests that request nameless Content Objects in the collection based on their hash value manifest processing module .

Data can include any data that is required as input or that is generated as output by the methods and or processes described in this disclosure. Specifically data can store at least a collection of nameless Content Objects a hierarchy of Manifests for the nameless Content Objects.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described above can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

