---

title: System and method of consuming and integrating with rest-based cloud and enterprise services
abstract: Techniques are disclosed for consuming and integrating with representational state transfer (REST) based services. In one embodiment, a multiple-step extract, transform, load (ETL) job includes one or more REST steps. Each step in the ETL job performs a particular well-defined task, and the REST step in particular constructs REST requests, invokes REST services, and retrieves REST responses. The REST step may be mapped to a vector of inputs such that multiple REST service calls are made for each of the inputs. Further, a reusable connection may be employed so that one connection can be used to make multiple REST service calls. URLs used to make REST service calls may be dynamically constructed based on input data parameters and ETL job parameters. Additionally, a graphical user interface (GUI) allows users to configure aspects of a REST step.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600547&OS=09600547&RS=09600547
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09600547
owner_city: Armonk
owner_country: US
publication_date: 20140530
---
The present invention relates to integrating data and more specifically techniques for consuming and integrating with representational state transfer REST based cloud and enterprise services.

Representational state transfer REST is a web design model used by many cloud service providers enterprises and social media companies to define interfaces with their services. A cloud service provider may offer scalable computing resources as services over networks such as provisioning virtual machine instances which can run enterprise applications for customers. Many NoSQL databases and cloud storage service providers use REST to define data integration APIs that may be invoked to extract and load data among other things.

One approach for integrating with REST services is embodied in the open source RestClient tool a debugger for RESTful web services and similar applications which allow users to make individual REST service calls. However such applications are not designed for making multiple REST service calls to cloud enterprise NoSQL and or other REST services which is often required to implement typical use cases. As used herein a use case defines a sequence of actions that yield an observable result of value and use cases provide a structure to express functional requirements within the context of business and system processes. For example one use case may include logging into a NoSQL database retrieving a number of documents based on document IDs and retrieving a number of attachments for the documents. In a NoSQL database stored documents may include documents that encapsulate and encode data using various formats or encodings such as XML JSON URL encoded and other documents. Traditional applications such as RESTClient are typically unable to parse and compose such documents. In addition traditional applications are generally not flexible enough to support the multitude of customizations REST service providers often define in their REST services.

One embodiment of the invention provides a computer implemented method for executing a computing job having a plurality of steps. The method generally includes for one or more of the steps subsequent to an input step receiving events from a previous step building one or more REST requests based on information collected from the received events transmitting the REST requests to REST service providers and receiving corresponding REST responses extracting information from the REST responses generating new events based on the extracted information and sending the new events to a next step.

Other embodiments include without limitation a computer readable medium that includes instructions that enable a processing unit to implement one or more aspects of the disclosed method as well as a system configured to implement one or more embodiments of the disclosed method.

Embodiments disclosed herein provide techniques for consuming and integrating with representational state transfer REST based services. The REST services may include cloud enterprise and NoSQL REST services. In one embodiment a multiple step extract transform load ETL job includes one or more REST steps. Each step in the ETL job performs a particular well defined task such as extracting data from a source transforming the data to fit operational needs e.g. composing a particular file such as an XML file and loading the data into a target. The REST step in particular constructs REST requests invokes REST services and retrieves REST responses. For example an ETL job to load a document to a cloud NoSQL database may include one REST step for logging into the NoSQL database by invoking a particular log in REST service API which returns an authentication cookie as well as another REST step which takes as input the authentication cookie and uses the authentication cookie to send multiple documents to the NoSQL database. As another example an ETL job to for enhancing enterprise data with data from cloud services may include steps to retrieve enterprise data from a data warehouse or database systems one or more REST steps to log in to the cloud storage system and extract documents steps to parse and transform the retrieved documents and to integrate data from the documents with enterprise data and steps to save the transformed results into target database tables such as DB2 tables. Note although discussed herein with reference to ETL jobs and REST as reference examples of computing jobs invoking a web service interface one of ordinary skill in the art will recognize that embodiments of the invention may be adapted for a broad variety of computing jobs that need to integrate with services accessed through service interfaces.

In one embodiment the REST step may be mapped to a vector of inputs such that REST service calls are made for each of the inputs. Continuing the above example one input vector may describe the multiple documents to be loaded to the NoSQL database and a REST step may make multiple REST service calls to load each of the documents. In another embodiment a reusable connection may be employed so that one connection can be used to make multiple REST service calls. URLs used to make REST service calls may also be parameterized so that the URLs are dynamically constructed based on input data parameters and ETL job parameters. Yet another embodiment provides a graphical user interface GUI that allows users to specify different aspects of an ETL job and REST steps therein. The GUI may dynamically generate input and output schemas that represent REST invocations based on user configurations of the REST step.

To execute an ETL job an ETL engine running in the engine server retrieves the job from the repository based on e.g. a job ID and performs ETL processes in the job which may include extracting data from various sources transform the data to other data and loading the data into a desired target. For example particular data may be extracted from the source target databases transformed into an appropriate format JSON format required by one of the cloud services and loaded into that cloud service . As discussed in greater detail below the ETL job may include one or more REST steps which invoke REST APIs provided by the cloud and enterprise services to perform the ETL processes.

Note while described herein using a hierarchal schema as an example of a schema that includes inputs outputs and tasks to be performed in each step of a job embodiments of the invention may be adapted for use with a variety of schema structures used to describe inputs outputs and or tasks to be performed as part of job steps. In one embodiment the input schema describes the data format or structure of the data that an ETL job step will accept and process while the output schema describes the data format or structure of the data that the step will produce for next step. Further the output schema of a step may enhance the input schema of the step with the processing result of the step. For example the processing result of a step for logging in to a cloud database may include an authorization session cookie returned upon successful log in and such an authorization session cookie may be input to the next step which may then use the cookie to extract or load documents from the cloud database. Each step in the ETL job produces events such as a stream of events describing retrieved data which are consumed by a next step. That is the method is event driven with each step consuming a stream of events from a previous step and producing its own stream of events for a next step. A mapping within an ETL job step defines the association between source data items job parameters local parameters data items from previous step and target data items that are needed to execute the ETL job step.

In one embodiment one or more ETL job steps may be REST steps discussed in greater detail below. Providing REST steps allows the tasks of invoking REST services to be separated from other tasks e.g. composing and parsing data payloads which may be performed in other steps. This divide and conquer approach allows users who are designing ETL jobs to focus on one problem at a time. For example if a cloud service returns documents in XML the user may add an XML parser step to parse the documents without modifying steps that invoke REST services to retrieve the XML documents.

At step the ETL engine sends events generated at step to the next step if any. As discussed a number of steps may be included in an ETL job including steps for extracting data transforming data and loading data. Each step may take certain data as source data items such as job parameters local parameters and data items from a previous step and map the source items to target data items that are required to execute the step. The ETL job itself may stretch across cloud and non cloud data sources targets. That is the ETL job may extract transform and load data from to both cloud and non cloud sources and targets such as cloud storage systems NoSQL databases data warehouses database systems etc.

As an example of a multiple step ETL job an ETL job for loading data into a cloud storage system may include steps to extract relevant data from various sources such as DB2 database tables steps to transform the extracted data into a REST request payload format suitable for the cloud storage system such as the JSON data form one or more REST steps configured to log in to the cloud storage system and load the payloads into the cloud storage system and steps to check REST responses and make sure the load operations are successful.

As another example an ETL job for extracting and processing data from a cloud storage system and integrating such data with other enterprise data may include one or more REST steps configured to log in to the cloud storage system and extract documents from the cloud storage system steps to parse and transform the documents received from the cloud storage system and steps to save the transformed results into database tables such as DB2 tables.

As yet another example an ETL job for enhancing enterprise data with data from cloud services may include steps to retrieve enterprise data from a data warehouse or database systems one or more REST steps configured to log in to the cloud storage system and extract documents from the cloud storage system steps to parse and transform the documents retrieved from the cloud storage system steps to transform and integrate the enterprise data with the data from the cloud services and steps to save the transformed results into target database tables such as DB2 tables.

Returning to the ETL engine determines at step whether there are more steps in the ETL job having tasks pending to be executed and if so the method returns to step .

At step the ETL engine validates the events received from the previous ETL job step. Validation of the event data is performed based on the hierarchical input schema discussed above and is required to ensure that the inputs needed to execute the current ETL job step have been received. For example one ETL job step which includes accessing a NoSQL database may take as input an authentication cookie and the ETL engine may validate at step that a received event is a valid authentication cookie event. As another example REST payloads may be loaded in multiple ways and the events received at a REST step may include data that is read from sources such as flat files text input data items binary input data items references to large objects in a database system etc. In such a case ETL engine may validate that the received event provides data having an expected format.

At step the ETL engine collects information from the received events as needed to construct REST service calls. Once again the input hierarchical schema and mappings may specify the particular information to be extracted. Continuing the examples from above the ETL engine may extract the authentication cookie from the event received from the previous step or extract the data read from the flat files text input data items binary input data items references to large objects in a database system etc.

At step the ETL engine builds a REST request based on the information collected at step . The REST requests may be built based on the input hierarchical schema and mappings which indicates among other things where data for the REST request body comes from e.g. from a text data item from a binary data item from files from a data item that contains references to large objects in a database etc. As an example the ETL engine may invoke a JSON composer to compose a REST body in JSON format based on data retrieved from a text data item. The input hierarchical schema may further indicate headers and cookies to include in the REST request. That is users are permitted to customize REST request headers and cookies by e.g. applying default values or mapping the headers or cookies to input data items so that the values of the input data items are in the headers or cookies. This permits the REST request to support different security mechanisms and customized service features.

In one embodiment the information collected at step may be in the form of a vector and the ETL engine may build multiple REST requests to e.g. access different REST services or access a REST service multiple times. For example the vector may define a list of documents with each document containing a list of attachments another vector in a cloud storage service. In such a case a first REST step may select the vector for a list of documents as its context node and build and make REST requests for retrieving the documents identified by the vector one at a time. Then another REST step may select the vector for a list of attachments as its context node and build and make REST requests for retrieving the attachments for each document based on document ID and attachment name.

In another embodiment the information collected at step may include data that is used to construct URLs for the REST service calls. More specifically the URLs may be parameterized so that the URLs can be constructed from input data items and job parameters that are mapped to different parts of the URL. The job parameters are replaced by the real value of the parameters at runtime. The input data items are mapped to local parameters whose values are replaced by the values of the data input items. The job parameters and local parameters may then be inserted into appropriate places in the URL to construct the URL for a REST service call.

At step the ETL engine sends the REST request to the REST service provider. As discussed REST service provides typically define REST APIs which the ETL engine may invoke to call REST services. In one embodiment the ETL engine may use a reusable connection that can be shared to invoke multiple different REST services hosted on the same web application. As discussed experience has shown that it is often necessary to make multiple REST service calls in typical use cases defining sequences of actions that yield an observable result of value. The reusable connection is a REST connection that is reused to call different REST services in one or more REST steps that share the reusable connection. The reusable connection is also responsible for passing common cookies among different REST services so that different REST steps are grouped into one session. That is the reusable connection groups REST steps that are sharing the same connection into one web session which is commonly managed through cookies. The alternative to using a reusable connection would require manually configuring connections for each REST step which is more labor intensive.

At step the ETL engine extracts desired headers cookies and bodies from a REST response that is received from the REST service provider. In one embodiment the user may also specify which headers and cookies to extract from REST responses as well as give default values to headers or cookies.

At step the ETL engine validates and parses the headers cookies and bodies extracted at step . Similar to the validation of step the ETL engine validates the headers cookies and bodies to ensure that the REST response has returned expected data. For example the ETL engine may validate during a logging in REST step that an authentication cookie has been returned in the REST body. The ETL engine may further parse the headers cookies and bodies to extract output data items specified in the output hierarchical schema. Continuing the previous example the ETL engine may extract the authentication cookie from the REST body so that it can be used in a later ETL job step. As another example the REST body may be in JSON format and include a list of document IDs of documents stored in a cloud database. In such a case the ETL engine may parse the REST body to extract the document IDs. In general users may be allowed to map headers cookies and bodies to output data items so that information can be extracted from any part of REST services.

At step the ETL generates events based on the extracted REST response headers cookies and bodies. Thereafter the events may be consumed by a next step in the ETL job. For example if the REST step extracts data from a cloud database the next step may parse the data and transform the data to another format which can be loaded to another database.

As shown the GUI is also configured to displays multiple tabs including a general tab a security tab a request tab a response tab a mapping tab an input tab and an output tab . The input and output tabs display input and output hierarchical schemas which describe the inputs and outputs. Each ETL job step takes the output schema from the previous step and enhances this schema with data items that describe the processing results of the current step. illustrates example input output schemas. The general tab the security tab the request tab the response tab and the mapping tab are examples of tabs for configuring a REST step in an ETL job and are discussed in greater detail below with respect to .

The CPU retrieves and executes programming instructions stored in the memory . Similarly the CPU stores and retrieves application data residing in the memory . The interconnect facilitates transmission such as of programming instructions and application data between the CPU I O device interface storage network interface and memory . CPU is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. And the memory is generally included to be representative of a random access memory. The storage may be a disk drive storage device. Although shown as a single unit the storage may be a combination of fixed and or removable storage devices such as magnetic disk drives flash drives removable memory cards or optical storage network attached storage NAS or a storage area network SAN . Further system is included to be representative of a physical computing system as well as virtual machine instances hosted on a set of underlying physical computing systems. Further still although shown as a single computing system one of ordinary skill in the art will recognized that the components of the system shown in may be distributed across multiple computing systems connected by a data communications network.

As shown the memory includes an operating system e.g. Microsoft s Windows and an ETL engine . Note in the application server the memory would include the ETL job creation application discussed above which is configured to allow a multiple step ETL job with REST steps to be created via a GUI. The ETL engine is configured to load and execute ETL jobs. In one embodiment the ETL engine may execute ETL jobs according to the method discussed above with respect to and to execute REST steps according to the method discussed above with respect to .

Advantageously techniques disclosed herein permit consumption and integration with REST based cloud and enterprise services using a multiple step ETL job. The ETJ job may include one or more REST steps thereby allowing users to create a job that invokes a number of related REST service calls. A reusable connection may be employed so that a connection can be shared to invoke multiple different REST services hosted on the same web application. Further the URL for a REST service may be parameterized and constructed dynamically. In addition an intuitive GUI is presented that allows users to configure the REST step in various ways so that among other things the REST step can be configured to customize headers cookies and content types and to support customized requirements that REST service providers may define in their REST services.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the invention may be provided to end users through a cloud computing infrastructure. As discussed cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present invention a user may access applications e.g. ETL job creation application or related data available in the cloud. For example the ETL job creation application could execute on a computing system in the cloud and be used to design and modify ETL jobs with one or more REST steps.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

