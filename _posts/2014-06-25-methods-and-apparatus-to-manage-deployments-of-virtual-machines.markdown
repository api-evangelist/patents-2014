---

title: Methods and apparatus to manage deployments of virtual machines
abstract: Methods and apparatus to manage virtual machines are disclosed. An example method includes storing an indication that a first system resource is associated with a first service level, storing an indication that a second system resource is associated with a second service level, during deployment of a virtual machine, determining that the virtual machine is associated with the first service level, and in response to the determining, deploying the virtual machine utilizing the first resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336266&OS=09336266&RS=09336266
owner: VMware, Inc.
number: 09336266
owner_city: Palo Alto
owner_country: US
publication_date: 20140625
---
This patent claims the benefit of U.S. Provisional Patent Application Ser. No. 61 889 971 filed on Oct. 11 2013 entitled METHODS AND APPARATUS TO MANAGE A VIRTUAL CLOUD ENVIRONMENT. U.S. Provisional Patent Application Ser. No. 61 889 971 is hereby incorporated herein by reference in its entirety.

This disclosure relates generally to virtual computing and more particularly to methods and apparatus to manage virtual machines.

Virtualizing computer systems provides benefits such as the ability to execute multiple computer systems on a single hardware computer replicating computer systems scalability moving computer systems among multiple hardware computers and so forth. Example systems for virtualizing computer systems and or managing virtualized computer systems are described in U.S. Patent Application Ser. No. 11 903 374 entitled METHOD AND SYSTEM FOR MANAGING VIRTUAL AND REAL MACHINES filed Sep. 21 2007 and granted as U.S. Pat. No. 8 171 485 U.S. Provisional Patent Application Ser. No. 60 919 965 entitled METHOD AND SYSTEM FOR MANAGING VIRTUAL AND REAL MACHINES filed Mar. 26 2007 and U.S. patent application Ser. Nos. 14 105 066 14 105 069 and 14 105 072 entitled METHODS AND APPARATUS FOR VIRTUALIZED COMPUTING filed Dec. 12 2012 all of which are hereby incorporated herein by reference in their entirety.

 Infrastructure as a Service also commonly referred to as IaaS generally describes a suite of technologies provided by a service provider as an integrated solution to allow for elastic creation of a virtualized networked and pooled computing platform sometimes referred to as a cloud computing platform . Enterprises may use IaaS as a business internal organizational cloud computing platform sometimes referred to as a private cloud that gives an application developer access to infrastructure resources such as virtualized servers storage and networking resources. By providing ready access to the hardware resources required to run an application the cloud computing platform enables developers to build deploy and manage the lifecycle of a web application or any other type of networked application at a greater scale and at a faster pace than ever before.

Cloud computing platforms provide many powerful capabilities for performing computing operations. However taking advantage of these computing capabilities manually may be complex and or require significant training and or expertise. Methods and apparatus disclosed herein facilitate the management of virtual machine resources in for example cloud computing platforms. For example as disclosed in detail herein methods and apparatus disclosed herein provide for automation of management tasks such as provisioning multiple virtual machines in parallel for a multiple machine computing system e.g. a group of servers that inter operate sharing configuration information among virtual machines as they are provisioned storing configuration information linking virtual machines with their designated workload and dynamically attaching services to virtual machines based on a selected profile or service level. The improvements to cloud management systems e.g. the vCloud Automation Center vCAC from VMware interfaces portals etc. disclosed herein may be utilized individually and or in any combination. For example all or a subset of the described improvements may be utilized.

The cloud computing platform provider provisions virtual computing resources e.g. virtual machines or VMs first virtual machine A second virtual machine B third virtual machine C that may be accessed by users of the cloud computing platform e.g. users associated with an administrator and or a developer and or other programs software device etc.

An example application of includes multiple VMs . The example VMs of provide different functions within the application e.g. services portions of the application etc. . One or more of the VMs of the illustrated example are customized by an administrator and or a developer of the application relative to a stock or out of the box e.g. commonly available purchased copy version of the services and or application components. Additionally the services executing on the example VMs may have dependencies on other ones of the VMs .

As illustrated in the example cloud computing platform provider may provide multiple deployment environments for example for development testing staging and or production applications. The administrator the developer other programs and or other devices may access services from the cloud computing platform provider for example via REST Representational State Transfer APIs Application Programming Interface and or via any other client server communication protocol. Example implementations of a REST API for cloud computing services include a vCloud Administrator Center vCAC API and a vCloud Director API available from VMware Inc. The example cloud computing platform provider of provisions virtual computing resources e.g. the VMs to provide the deployment environments in which the administrator and or developer can deploy multi tier application s . An example implementation of a deployment environment that may be used to implement the deployment environments of is vCloud Datacenter cloud computing services available from VMware Inc.

The example application director of which may be running in one or more VMs orchestrates deployment of multi tier applications onto one of the example deployment environments . As illustrated in the example application director includes a topology generator a deployment plan generator and a deployment director .

The example topology generator generates a basic blueprint that specifies a logical topology of an application to be deployed. The example basic blueprint of generally captures the structure of an application as a collection of application components executing or to be executed on virtual computing resources. For example the basic blueprint generated by the example topology generator for an online store application may specify a web application e.g. in the form of a Java web application archive or WAR file comprising dynamic web pages static web pages Java servlets Java classes and or other property configuration and or resources files that make up a Java web application executing on an application server e.g. Apache Tomcat application server that uses a database e.g. MongoDB as a data store. As used herein the term application generally refers to a logical deployment unit comprised of one or more application packages and their dependent middleware and or operating systems. Applications may be distributed across multiple VMs. Thus in the example described above the term application refers to the entire online store application including application server and database components rather than just a particular web application itself e.g. a database application . In some instances the application may include the underlying hardware e.g. virtual computing hardware utilized to implement the components.

The example basic blueprint of may be assembled from items e.g. templates from a catalog . The example catalog of is a listing of available virtual computing resources e.g. VMs networking storage that may be provisioned from the cloud computing platform provider and available application components e.g. software services scripts code components application specific packages that may be installed on the provisioned virtual computing resources. The example catalog may be pre populated and or customized by an administrator e.g. IT or system administrator that enters in specifications configurations properties and or other details about items in the catalog . Based on the application the example blueprints may define one or more dependencies between application components to indicate an installation order of the application components during deployment. For example since a load balancer usually cannot be configured until a web application is up and running the developer may specify a dependency to execute the load balancer from an Apache service to an application code package.

The example deployment plan generator of the example application director of generates a deployment plan based on the basic blueprint that includes deployment settings for the basic blueprint e.g. virtual computing resources cluster size CPU memory networks and an execution plan of tasks having a specified order in which virtual computing resources are provisioned and application components are installed configured and or started. The deployment plan may be referred to as a global deployment plan. The example deployment plan of provides an IT administrator with a process oriented view of the basic blueprint that indicates discrete actions to be performed to deploy the application. Multiple different deployment plans may be generated from a single basic blueprint to test prototypes e.g. new application versions to scale up and or scale down deployments and or to deploy the application to different deployment environments e.g. testing staging production . Once the VMs are created portions of the deployment plan are separated and distributed to the VMs as a plurality of local deployment plans. Each of the local deployment plans comprises one or more e.g. a series of tasks to be executed by one or more of the VMs provisioned from the deployment environment . Each VM coordinates execution of its respective task s with a centralized deployment module e.g. the deployment director to ensure that tasks are executed in an order that complies with dependencies specified in the application blueprint .

The example deployment director of executes the deployment plan by communicating with the cloud computing platform provider via a cloud interface to provision and configure the VMs in the deployment environment . The example cloud interface of provides a communication abstraction layer by which the application director of the illustrated example communicates with a heterogeneous mixture of cloud provider and deployment environments . The deployment director of the illustrated example provides each VM with a respective local deployment plan specifying series of tasks specific to the receiving VM . Tasks are executed by the VMs to install configure and or start one or more application components. For example a task may be a script that when executed by a VM causes the VM to retrieve and install particular software packages from a central package repository . The example deployment director of coordinates with the VMs to execute the tasks in an order that observes installation dependencies if any between the VMs according to the global deployment plan . After the application has been deployed the application director of the illustrated example may monitor and or modify e.g. scale the deployment.

The example cloud manager of interacts with the components of the system e.g. the application director and or the environment of use e.g. the cloud provider to facilitate the management of the resources of the cloud provider . In the example of the cloud manager includes a dependency controller a dependency database a configuration controller a configuration repository and a service manager . In some examples the cloud manager additionally includes other components for managing a cloud environment. In some examples components of the cloud manager and more generally the cloud manager are utilized to manage virtual machine systems that are not associated with a cloud.

When virtual machines are deployed as part of a group e.g. an e commerce application comprising a web server virtual machine a financial virtual machine and a database virtual machine the deployment of a first virtual machine may depend upon the deployment of a second virtual machine. For example if the first virtual machine A is a web server virtual machine and the second virtual machine B is a database virtual machine the first virtual machine A needs to await information e.g. network location authentication parameters etc. about the second virtual machine B before provisioning can be completed. Accordingly provisioning of the first virtual machine A will be delayed until the second virtual machine is provisioned. The example dependency controller of the illustrated example stores information about the dependency of virtual machine resources in the dependency database and coordinates the provisioning of the resources based on the stored dependency information to facilitate the parallel deployment of dependent virtual machines. In other words according to this example the deployment of the first virtual machine and deployment of the second virtual machine may be performed in parallel e.g. deployment of the first and second virtual machines may be initiated at substantially the same time and the deployments may be halted as needed to ensure that the second virtual machine is sufficiently deployed by the time that the first virtual machine requires the second virtual machine to exist be accessible provide information etc. e.g. because the first virtual machine is dependent on the second virtual machine .

According to the foregoing example the first virtual machine A is instrumented with an instruction to await availability of a deployed database e.g. the second virtual machine B in the identified example by sending a wait request to the dependency controller . The dependency controller of the illustrated example stores information about the wait request in the example dependency database . The instruction causes the deployment of the first virtual machine A to be automatically placed on hold at the point e.g. just prior to in the deployment where the database information is needed or about to be needed . Thus deployment of the first virtual machine A can be started without regard for the status of the deployment of the second virtual machine B. For example the deployment of the first virtual machine A can be started at the same time as the deployment of the second virtual machine B can be started prior to the deployment of the second virtual machine B etc. Accordingly when deployment of the first virtual machine A and deployment of the second virtual machine B are handled by different persons these persons do not need to coordinate the start of deployment. Additionally regardless of how many persons are involved in the deployment of the virtual machines under the global deployment plan by starting deployment of the first virtual machine A prior to completion of the deployment of the second virtual machine B any deployment tasks that can be completed without the need for information about the second virtual machine B can be started such that many deployment tasks can be completed prior to the completion of the deployment of the second virtual machine B. Parallelizing deployment in this fashion saves time and thus costs.

According to the foregoing example the second virtual machine B is instrumented with an instruction to send a notify request to the example dependency controller of when deployment of the second virtual machine B is completed or reaches a point at which the deployment controller can allow the deployment of the first virtual machine A to continue . When the example dependency controller receives the notify request the dependency controller locates a matching wait request in the dependency database of the illustrated example and sends a notification to the first virtual machine A that it may continue deploying e.g. may continue executing a deployment plan e.g. a local deployment plan .

The dependency database of the illustrated example stores information about wait requests and notify requests for deployments of virtual machines. The example dependency database is a database that includes a table of wait requests a table of notify requests and a table of master keys that link wait requests with a corresponding notify requests. Alternatively the dependency database may be implemented by any other type of data storage. For example the dependency database may be implemented by multiple databases by one or more files and or by any combination of data storage components.

The configuration controller of the illustrated example collects and stores configuration information about virtual machines in the configuration repository . When virtual machines are deployed the virtual machines transmit an asset tracking request to the configuration controller . In response to the asset tracking requests the example configuration controller captures asset information from the requesting virtual machine and stores the information in the configuration repository . In the illustrated example the configuration controller retrieves a virtual machine name a network address a role for the virtual machine a unique identifier for the virtual machine a deployment number for the virtual machine and an identification of a workload for the virtual machine. A workload as used herein is an abstraction of the work that an application instance or a set of applications instances are to perform. For example a workload may be implementing a web server implementing a web server farm implementing a multilayer application etc.

The configuration controller of the illustrated example provides configuration information retrieved from the configuration repository to requesting virtual machines. For example if the first virtual machine A is dependent on the deployment of the second virtual machine B once the first virtual machine A is notified by the dependency controller that the claimant of the second virtual machine B has completed the first virtual machine A sends a request for configuration information of the second virtual machine B to the configuration controller . In response the configuration controller retrieves configuration information for the second virtual machine B from the configuration repository and transmits the retrieved configuration information to the first virtual machine A.

The example configuration controller of the illustrated example additionally provides a user interface e.g. a graphical user interface identifying the assets for which configuration information is included in the configuration repository . According to the illustrated example the configuration controller generates a graphical user interface listing the assets in the configuration repository e.g. in a tree structure based on the workload of each of the assets. The example graphical user interface generated by the configuration controller of displays a workload followed by a collapsible list of the assets associated with that workload. For example if the first virtual machine A and the third virtual machine C are associated with a web server and the second virtual machine B is associated with a database server the configuration controller may display a first node for the web server followed by a collapsible list including the first virtual machine A and the third virtual machine C and a second node for the database server followed by a collapsible list including the third virtual machine B.

The configuration repository of the illustrated example stores configuration information for virtual machines that is collected by the configuration controller . The example configuration repository is implemented by a lightweight directory access protocol LDAP database. Alternatively the configuration repository may be implemented by any other type s of data storage. For example the configuration repository may be implemented by any other type s of database by multiple databases by one or more files and or by any combination of data storage components.

The service manager of the illustrated example manages the deployment of virtual machines e.g. virtual machine blueprints according to assigned service levels identified in a profile. Example profiles identify various services to be utilized by deployed virtual machines and associate levels of those services to profiles. A service may be any task resource or plugin to be utilized by a virtual machine e.g. network services plugins and or resources storage services plugins and or resources domain name services plugins and or resources database services plugins and or resources monitoring services plugins and or resources load balancing services plugins and or resources security services plugins and or resources etc. . Levels of the services may be associated with various costs and or resource utilization levels. For example three profiles may be utilized gold silver and bronze. For each of the profiles services of different levels e.g. different costs may be assigned. For example a gold profile may be linked to 10 gigabit network services e.g. most expensive services a silver profile may be linked to 1 gigabit network services e.g. mid priced services and a bronze profile may be linked to 100 megabit network services e.g. lowest cost services . The example service manager of provides a user interface for creation of the profiles adding services resources and or plugins to the profiles and displaying information about the profiles e.g. cost utilization information etc. . Access to the profile configuration of the service manager may be limited by authorization levels. For example a highest level of access may allow the design and configuration of profile s a mid level access may allow the assignment of virtual machines e.g. by linking blueprints with a profile and a lowest level access may allow deployment of blueprints linked to a profile. Accordingly at the lowest level of access the profile for a blueprint may not be changed and thus the deployment will be limited to the services resources and or plugins assigned to that blueprint. Thus the service manager may facilitate cost and resources control in a cloud environment or other distributed deployment of virtual machines.

The wait request manager of the illustrated example receives wait requests sent during the provisioning of virtual machines. The wait request manager transmits the received requests to the wait datastore manager . The example wait request manager additionally requests inventory information about virtual machine assets from the inventory manager . For example when a wait request is received the wait request manager of the illustrated example requests that the inventory manager provide information about a virtual machine asset stored in the configuration repository that matches the wait request. For example the wait request may include information identifying a workload and or a key field that identifies a virtual machine asset that can fulfill the wait request e.g. a key identifying a type of database server that must be provisioned prior to completing provisioning of the virtual machine that sent the wait request . When the example wait request manager of determines that a matching provisioned asset already exists or the wait request manager determines that a notification for a matching provisioned asset is available by querying the notify datastore manager the wait request manager of the illustrated example notifies the virtual machine that sent the wait request that provisioning may continue.

The wait datastore manager of the illustrated example receives information about wait requests from the wait request manager and stores the wait request information in a table of wait requests in the example dependency database . The wait datastore manager of the illustrated example additionally retrieves information about pending wait requests so that the wait request manager can query the inventory manager and or the notify datastore manager to determine if any wait requests have been fulfilled. When a wait request has been fulfilled the wait datastore manager of the illustrated example removes the wait request from the dependency database .

The inventory manager of the illustrated example receives and processes requests for asset information in the example configuration repository . In the illustrated example the inventory manager receives query parameters such as a workload name and or key field from the wait request manager and performs an LDAP query of the example configuration repository using the received query parameters. Alternatively the inventory manager may perform any other type s of query s to retrieve available information from the configuration repository .

The example notify request manager of receives notify requests during the provisioning of virtual machines that have been instrumented to transmit the notify request. The notify request manager of the illustrated example sends the notify requests to the notify datastore manager for storage in the dependency database . The example notify request manager may additionally validate the notify request. For example if the notify request indicates that a particular service is provisioned e.g. a database service the notify request manager may validate that the database service is available by attempting to access the database service may verify that information about the database service has been entered into the configuration repository etc.

The notify datastore manager of the illustrated example receives notify requests from the notify request manager and stores the notify requests in a table of notify requests in the dependency database . Additionally the notify datastore manager of this example queries the dependency database for notify requests in response to a request from the wait request manager attempting to determine if a wait request has been satisfied by a notify request. According to the illustrated example when a wait request has been fulfilled the corresponding notify request remains in the dependency database e.g. where further virtual machines may rely on the notify request . Alternatively when a wait request has been fulfilled the notify datastore manager may remove the corresponding notify request from the dependency database e.g. once the notify datastore manager determines that there are no further virtual machines that rely on the notify request .

The asset notice receiver of the illustrated example receives reports of new virtual machine assets. For example during provisioning of virtual machines the virtual machines may be instrumented with an instruction to transmit an asset notice to the asset notice receiver . The asset notice receiver sends the asset notice to the information collector of the illustrated example.

In response to receiving an asset notice from the example asset notice receiver the information collector of the illustrated example retrieves asset information e.g. configuration information settings identification information etc. from the virtual machine that transmitted the asset notice. Alternatively asset information may be retrieved from any other location or device that carries the asset information. For example the information collector may retrieve a name for the virtual machine a workload associated with the virtual machine a network address of the virtual machine the unique identifier for the virtual machine a deployment identifier user credentials information about services available at the virtual machine etc. The example information collector transmits the collected information to the inventory interface for storage in the configuration repository .

The inventory interface of the illustrated example receives information collected by the example information collector and stores the information in the example configuration repository . The example inventory interface of retrieves information from the example configuration repository in response to requests from the example configuration retriever and or the example inventory user interface generator . The inventory interface of the illustrated example interfaces with the configuration repository using LDAP. Alternatively any other interface and or protocol may be utilized for accessing the configuration repository .

The configuration retriever of the illustrated example receives requests for configuration information on virtual machines and retrieves the requested configuration information via the example inventory interface . For example after the first virtual machine A has been notified that the second virtual machine B has been provisioned the first virtual machine A transmits a request to the configuration retriever requesting configuration information for the second virtual machine B. For example the first virtual machine A may request configuration information that includes a network address for the second virtual machine B so that the first virtual machine A may configure installed applications and or services to access a resource at the second virtual machine B once the first virtual machine A has been provisioned.

The inventory user interface generator of the illustrated example receives user requests for asset inventory information and provides a user interface to provide the asset information. The example inventory user interface generator of lists asset information in a hierarchical tree e.g. as nodes nested in other nodes . According to the illustrated example asset information is displayed in a graphical user interface that provides a collapsible list of virtual machine assets e.g. graphically displayed nodes underneath e.g. nested in an identification of the workload e.g. a graphically displayed node for the workload to which the asset is assigned. Accordingly even if the virtual machine name is not descriptive or is unknown to the user the workload to which the virtual machine belongs is readily ascertainable.

While example manners of implementing the dependency controller and the configuration controller of the cloud manager are illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example wait request manager the example wait database manager the example inventory manager the example notify request manager the example notify datastore manager of the example dependency controller the example asset notice receiver the example information collector the example inventory interface the example configuration retriever the example inventory user interface generator of and or the example configuration controller may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example wait request manager the example wait database manager the example inventory manager the example notify request manager the example notify datastore manager to of and or the example dependency controller the example asset notice receiver the example information collector the example inventory interface the example configuration retriever the example inventory user interface generator of and or the example configuration controller could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example wait request manager the example wait database manager the example inventory manager the example notify request manager the example notify datastore manager to of the example dependency controller the example asset notice receiver the example information collector the example inventory interface the example configuration retriever the example inventory user interface generator of and or the example configuration controller is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example cloud manager the example dependency controller and or the example configuration controller of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and or devices.

A flowchart representative of example machine readable instructions for implementing the cloud manager the dependency controller and or the configuration controller of are shown in . In these examples the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowcharts illustrated in many other methods of implementing the example cloud manager the example dependency controller and or the example configuration controller may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable storage medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein tangible computer readable storage medium and tangible machine readable storage medium are used interchangeably. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable storage device and or storage disk and to exclude propagating signals and to exclude transmission media. As used herein when the phrase at least is used as the transition term in a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

If a matching virtual machine asset is located block the example wait request manager queries the dependency database for a notify request for the virtual machine asset identified in the query of the inventory block . For example the notify request may be stored once the identified virtual machine asset has successfully deployed and or sufficiently deployed to fulfill the wait request. When a matching notify request is not found block control returns to block to continue waiting e.g. the wait request manager periodically retrieves pending wait requests via the wait datastore manager and checks for a matching asset and notify request .

When a matching notify request is found block the wait request manager notifies the waiting virtual machine deployment that the wait request has been fulfilled and that deployment of the virtual machine may continue. The instructions of are then complete.

If a dependency trigger has been reached block the virtual machine sends a wait request to the example wait request manager of the example dependency controller block . The example wait request of the illustrated example includes a timeout indicating a maximum duration to wait before proceeding with provisioning. The example wait request includes a key value that may be utilized to identify a matching notify request that includes the same key value. The wait request may additionally include other parameters such as for example a name for an environment for the deployment an identification of a choke file that may be used to trigger the waiting to cease the name of a user that initiated the deployment a profile name indicating a service level for the deployment an indication of whether a timeout and or choke file should cause an error to be issued or if deployment should continue without error etc.

After sending the wait request block deployment is paused while the virtual machine awaits a response from the example wait request manager that a notify request corresponding to the wait request has been received block . When a notify request has been received block the virtual machine deployment sends a pull request for configuration information for the virtual machine dependency via the configuration retriever of the configuration controller block . Alternatively the configuration retriever may transmit the configuration information to the virtual machine in response to the notify request without receiving a pull request. Control then proceeds to block . Additionally or alternatively control may proceed to block when a manual request is received and or when a timeout is reached.

After the virtual machine deployment pulls configuration information block or the deployment determines that a dependency trigger has not been reached block the virtual machine deployment determines if deployment has completed block . If deployment has not completed control proceeds to block and the deployment continues until the next dependency trigger block and deployment completes block . If deployment has completed the instructions of are complete.

The example program of may be performed by the deployed virtual machine the deployment director and or any other component that is responsible for deploying virtual machines. The example program of begins at block when deployment of the virtual machine is initiated and the virtual machine transmits an asset tracking request to the example asset notice receiver of the example configuration controller of . The virtual machine begins installation and configuration according to the tasks assigned to the virtual machine deployment e.g. the deployment director may initiate installation and configuration block . The virtual machine deployment e.g. the virtual machine deployment plan causes the deployment director to determines if a notify trigger node has been reached in the set of tasks for deployment block . If a notify trigger node has not been reached control proceeds to block .

If a notify trigger has been reached block the virtual machine sends a notify request to the example notify request manager of the example dependency controller block . The example notify request includes an identification of a key that corresponds to a key identified in a wait request that is fulfilled by the notify request. The notify request may additionally include a name of an environment for the deployment a name of a user that initiated the deployment a name of a profile indicating a service level for the deployment etc. The virtual machine deployment e.g. the deployment plan causes the deployment director to then pushes configuration information for the virtual machine to the configuration repository via the information collector of the configuration controller block . Control then proceeds to block .

After the virtual machine deployment pushes the configuration information block or the deployment determines that a notify trigger has not been reached block the virtual machine deployment determines if deployment has completed block . If deployment has not completed control proceeds to block and the deployment continues until the next notify trigger block and deployment completes block . If deployment has completed the instructions of are complete.

While the examples of illustrate instructions in which virtual machine deployments check for either a dependency trigger or a notify trigger a single set of instructions may check for both dependency triggers and notify triggers and virtual machines may include one or both of dependency triggers and notify triggers.

The example inventory user interface generator of the illustrated example displays the virtual machines identified at block under an identification of the first function block . The example user interface generator of then determines if additional functions are included in the configuration repository block . If additional functions are included in the configuration repository the inventory user interface generator then selects the next function block and control proceeds to block to process the next selected function. If there are no additional functions block the instructions of are complete.

In the foregoing examples wait requests are sent by virtual machines notices that wait requests have been fulfilled are sent to virtual machines and notify requests are sent by virtual machines. Additionally or alternatively requests and or notifications may be sent to by any other component. For example an application director managing the deployment of virtual machine resources may send requests and or receive notifications that requests have been fulfilled.

The request receiver of the illustrated example receives requests for information associated with a service from a virtual machine during deployment. In the illustrated example the request includes an identification of a profile assigned to the virtual machine deployment which is transmitted to the example profile retriever . Alternatively the request may identify the virtual machine and or a blueprint for the virtual machine and the request receiver may send the identification to the example profile retriever to identify the profile assigned to the virtual machine based on information stored in the example profile datastore .

The profile retriever of the illustrated example receives requests for profile information from the example request receiver and queries the example profile datastore for information to fulfill the requests. The example profile retriever of provides information about the retrieved information to the example service executor which performs tasks on the virtual machine that sent the request using the retrieved information. For example if a virtual machine being deployed is associated with a mid level profile e.g. a silver profile the profile retriever of the illustrated example may determine that the virtual machine is to receive mid level network service mid level storage service and a monitoring plugin. In such an example the profile retriever sends a notification of the mid level services to the example service executor .

The profile datastore of the illustrated example stores profile information for virtual machines that is designed via the example profile designer . The example profile information links services resources plugins etc. that are utilized with virtual machines with profile levels. The example profile information may additionally include information about costs and resource utilization associated with the various profile levels. The example profile datastore of is implemented by a database. Alternatively the profile datastore may be implemented by any other type of data storage. For example the profile datastore may be implemented by multiple databases by one or more files and or by any combination of data storage components.

The profile designer of the illustrated example provides an interface to facilitate user creation of and or updating of profiles. The example profile designer provides a graphical user interface that receives input of a new profile name and services resources and or plugins to be assigned to the new profile. The example profile designer may additionally receive input of cost information for profiles security and or access information for profiles etc. The profile designer of this example stores the profile information in the example profile datastore .

The service executor of the illustrated example receives profile information associated with a virtual machine that sent a request to the example request receiver and executes the tasks associated with the profile on the virtual machine. The service executor may assign network resources e.g. attach the virtual machines to a particular network allocate access to network elements etc. may assign storage resource may configure security restrictions may install plugins in the virtual machines and or perform any other task associated with the identified profile.

While an example manner of implementing the service manager of the cloud manager is illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example request receiver the example profile retriever the example profile designer the example service executor of and or the example service manager may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example request receiver the example profile retriever the example profile designer the example service executor of and or the example service manager could be implemented by one or more analog or digital circuit s logic circuits programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s . When reading any of the apparatus or system claims of this patent to cover a purely software and or firmware implementation at least one of the example request receiver the example profile retriever the example profile designer the example service executor of and or more generally the example service manager is are hereby expressly defined to include a tangible computer readable storage device or storage disk such as a memory a digital versatile disk DVD a compact disk CD a Blu ray disk etc. storing the software and or firmware. Further still the example cloud manager and or the example service manager of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions for implementing the cloud manager and or the service manager of are shown in . In these examples the machine readable instructions comprise a program for execution by a processor such as the processor shown in the example processor platform discussed below in connection with . The program may be embodied in software stored on a tangible computer readable storage medium such as a CD ROM a floppy disk a hard drive a digital versatile disk DVD a Blu ray disk or a memory associated with the processor but the entire program and or parts thereof could alternatively be executed by a device other than the processor and or embodied in firmware or dedicated hardware. Further although the example program is described with reference to the flowchart illustrated in many other methods of implementing the example cloud manager and or the example service manager may alternatively be used. For example the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated or combined.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a tangible computer readable storage medium such as a hard disk drive a flash memory a read only memory ROM a compact disk CD a digital versatile disk DVD a cache a random access memory RAM and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information . Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer and or machine readable instructions stored on a non transitory computer and or machine readable medium such as a hard disk drive a flash memory a read only memory a compact disk a digital versatile disk a cache a random access memory and or any other storage device or storage disk in which information is stored for any duration e.g. for extended time periods permanently for brief instances for temporarily buffering and or for caching of the information .

The example program of begins at block when the profile designer receives a request to create a new profile. For example the request to create the new profile may include a name for the profile cost parameters for the profile resource usage parameters for the profile etc. The example profile designer of the illustrated example retrieves a list of tasks for provisioning a virtual machine block . For example the profile designer may retrieve a network provisioning task a storage provisioning task etc. The example profile designer maps services for the profile with the provisioning tasks block . For example the profile designer may map a particular level of storage service to the storage provisioning task e.g. a low cost storage service may be mapped to a storage provisioning task in a low cost profile . The example profile datastore stores the assigned profile information in the profile datastore block .

The example program of begins at block when the example request receiver receives a provisioning request for a virtual machine. The example request receiver determines a selected profile for the virtual machine block . For example the request receiver may determine the selected profile based on an identification of the selected profile in the provisioning request and or by retrieving information about the selected profile from the example profile datastore . The example profile retriever of the illustrated example retrieves a service for a first task in the retrieved profile block . The example service executor then executes the first task for the service identified in the profile block . The profile retriever determines if there are additional tasks to be executed block . If there are additional tasks to be executed control returns to block to process next task. If there are no additional tasks to be executed block the instructions of are completed.

The processor platform of the illustrated example includes a processor . The processor of the illustrated example is hardware. For example the processor can be implemented by one or more integrated circuits logic circuits microprocessors or controllers from any desired family or manufacturer.

The processor of the illustrated example includes a local memory e.g. a cache . The processor of the illustrated example is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is controlled by a memory controller.

The processor platform of the illustrated example also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a PCI express interface.

In the illustrated example one or more input devices are connected to the interface circuit . The input device s permit s a user to enter data and commands into the processor . The input device s can be implemented by for example an audio sensor a microphone a camera still or video a keyboard a button a mouse a touchscreen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit of the illustrated example. The output devices can be implemented for example by display devices e.g. a light emitting diode LED an organic light emitting diode OLED a liquid crystal display a cathode ray tube display CRT a touchscreen a tactile output device a printer and or speakers . The interface circuit of the illustrated example thus typically includes a graphics driver card a graphics driver chip or a graphics driver processor.

The interface circuit of the illustrated example also includes a communication device such as a transmitter a receiver a transceiver a modem and or network interface card to facilitate exchange of data with external machines e.g. computing devices of any kind via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processor platform of the illustrated example also includes one or more mass storage devices for storing software and or data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives Blu ray disk drives RAID systems and digital versatile disk DVD drives.

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory and or on a removable tangible computer readable storage medium such as a CD or DVD.

While several graphical user interfaces are provided as example interfaces for obtaining user input any other type of user interface and or control may be provided e.g. a command line interface text based interface slider text box etc. . Additionally or alternatively any of the methods and apparatus described herein may be accessed programmatically e.g. using an API of the cloud manager e.g. a vCAC API by another program or device.

Although certain example methods apparatus and articles of manufacture have been disclosed herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims of this patent.

