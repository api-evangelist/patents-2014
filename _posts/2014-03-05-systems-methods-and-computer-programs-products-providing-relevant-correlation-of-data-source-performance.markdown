---

title: Systems, methods, and computer programs products providing relevant correlation of data source performance
abstract: A method performed by a monitoring tool in a computer system, the method including: for a set of network nodes in a computer system: applying a correlation formula on an input based on performance data of the set, and determining a correlation score based on applying the correlation formula, the correlation score indicating a correlation between network nodes in the set; determining, based on the correlation scores, a first list including a first plurality of network nodes having a correlation score that satisfies a first threshold; identifying a second plurality of network nodes included in the first list, the second plurality of network nodes having a correlation score that satisfies a second threshold, which indicates a correlation that is higher than the first threshold; analyzing the performance data of the second plurality against a constancy metric; and removing, based on the analyzing, the second plurality from the first list.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367421&OS=09367421&RS=09367421
owner: NETAPP, INC.
number: 09367421
owner_city: Sunnyvale
owner_country: US
publication_date: 20140305
---
The present application claims the benefit of U.S. Provisional Patent Application No. 61 919 487 filed Dec. 20 2013 and entitled System method and computer program product for monitoring infrastructure and assets the disclosure of which is incorporated by reference herein in its entirety.

The present disclosure relates generally to computing system monitoring and more particularly to the correlation of topologically related network nodes in computing systems.

Information storage systems may include a variety of different hardware and software components. For instance a storage system may include one or more storage controllers where each of the storage controllers provides the low level control for a plurality of physical storage drives. The storage system may also include network connections and other items that are ancillary to the storage functionality of the system. Storage systems continue to become more and more complex with storage controllers hosting an increasing number of logical storage volumes and storage controllers being clustered rather than simply standing alone. There is currently a need for a management application that monitors assets of storage systems in an efficient and intuitive manner.

A human user acting as an administrator for a storage system may have to investigate errors or other undesirable performance issues from time to time. Conventional monitoring and management applications exist that allow the administrator to view the performance of a particular system asset usually by examining performance data logs. However current monitoring and management applications rely on the skills and knowledge of the administrator to understand whether performance of one system asset affects the performance of another system asset. For instance undesirable performance of a network interface card at a storage controller may affect the latency of a storage volume and the administrator would be expected to know the interrelationships of the different storage assets and to trouble shoot perceived problems at one storage asset by looking to related storage assets. Nevertheless current monitoring and management applications do not provide much or any assistance in identifying important relationships among performance of storage assets.

In the following description specific details are set forth describing some embodiments consistent with the present disclosure. It will be apparent however to one skilled in the art that some embodiments may be practiced without some or all of these specific details. The specific embodiments disclosed herein are meant to be illustrative but not limiting. One skilled in the art may realize other elements that although not specifically described here are within the scope and the spirit of this disclosure. In addition to avoid unnecessary repetition one or more features shown and described in association with one embodiment may be incorporated into other embodiments unless specifically described otherwise or if the one or more features would make an embodiment non functional.

Various embodiments of the present disclosure provide monitoring of a computer system that is both efficient and easy to understand for a human user. One embodiment includes the application of a correlation formula to a variety of different and related network nodes. This type of information may be useful to an administrator to analyze the network as described in more detail below.

In a system with a variety of different network nodes the performance of a given network node may be related to the performance of another network node. One example would be the I O Operations per Second IOPS of an application and the IOPS of a virtual storage volume used by that application. Statistical correlation may be used to calculate a number that scores the relationship. An example of a statistical correlation formula that may be used by some embodiments includes calculating the Pearson s population correlation coefficients. The population correlation coefficient between two random variables X and Y with expected values and and standard deviations and is defined as 

Correlation scores may be quite useful to an administrator of a system. Typically the higher a correlation score between performance metrics of two different nodes the more related the performance is between those two different nodes. Thus high correlation may indicate that performance problems of one node are related to performance problems of another node. Therefore if an administrator had for a given node comprehensive correlation data between that node and other nodes e.g. for ten other nodes ten correlation scores indicating a relationship between the given node and the respective other node that administrator could use that information for system troubleshooting. For instance an unexpectedly high correlation score for one of the other nodes may indicate to the administrator to look to the other node to investigate a performance issue when the administrator would not have looked to the other node otherwise.

In a computer system with tens or hundreds of nodes correlating each node with each other node may be unworkable. Also correlating each node with each other node may generate mostly irrelevant information. For instance within a given system some nodes may be so unrelated that correlating their performance metrics may not provide much value. Also some correlation scores may be so low or even misleading that their inclusion in user presented information may be less than helpful.

Therefore various embodiments provide enhanced techniques for providing correlation scores for nodes in a computer system. For instance some embodiments include logic to determine communicative relationships among various nodes. For example the monitoring tool may extract data from switches and storage controllers regarding configured ports and volumes as well as directed traffic. The logic then uses this information to determine that a given Virtual Machine VM accesses particular volumes through particular switches and the like. Thus the logic can derive topology information from the extracted configuration and communication data. The monitoring tool can then use the topology information to decide which devices to correlate. For instance when calculating correlations for the VM the monitoring tool knows to omit calculating correlations for volumes which the VM does not access and switch ports which the VM does not use.

In another example the monitoring tool limits a list of correlation values by applying a threshold. For instance correlation values below a certain level such as 15 may be omitted. Of course any appropriate thresholds may be set as 15 is merely an example. Also some correlations may be very high nearly 100 but indicative of nothing valuable. For instance when two nodes have nearly zero activity for a period of time they may show very high correlation during that period of time even if they have no real relationship. Thus in various embodiments the monitoring tool double checks very high correlation scores by going back to raw data and eliminating scores that appear to be the result of constancy in performance.

The example of below is directed to a network storage system and the scope of embodiments is applicable to a wide variety of computer systems other than storage systems. Accordingly the concepts described herein for monitoring and analyzing system data may be applied to computing systems generally.

The system includes server system connected to server system and client system via a network . The system also includes server system connected to server system and client system via a network .

Network may be any kind of network including a local area network LAN such as an Ethernet and or a wide area network WAN such as the internet. In some examples server and or may be a standalone workstation a cluster a production server within a virtual machine and or the like. The servers include a processor coupled to memory. In some examples a processor may control operation and or execution of hardware and or software on the server. The server may include multiple processors CPUs multi core processors field programmable gate arrays FPGAs application specific integrated circuits ASICs and or the like. Memory may include one or more types of machine readable media. Some common forms of machine readable media may include floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read.

A server system may access storage subsystems that are connected to the server system via a network . The storage subsystems are included in a cluster . Each storage system in the cluster includes a set of storage devices for storing client data the storage devices of the cluster providing the shared storage of the storage system . Each storage subsystem also includes a storage controller . Each storage controller exercises low level control over physical storage devices to provide virtualized storage to the server system s and client . Examples of storage hardware that can be used as physical storage devices includes e.g. hard disk drives and solid state drives though the scope of embodiments is not limited to any particular storage hardware.

Each storage device may store data from logical storage entities such as one or more storage volumes where each volume has a file system implemented on the volume. A file system implemented on the logical storage entity may provide multiple directories in a single volume each directory containing various filenames each of which may be mapped to a multitude of storage devices .

Client system may run one or more applications e.g. word processing or database programs typified by application that utilize the storage system. Client system includes a computer system that interacts with server system for submitting read write access requests and for receiving or transmitting data from or to the server system over the network . In a virtual server environment application on client system may interact over the network with one or more virtual machines VMs executing on server system and application on client system may interact over the network with one or more virtual machines VMs executing on server system . Application may be for example a database or email server.

As mentioned above various embodiments include a system monitoring tool that determines a correlation between network nodes in a computer system. An embodiment may provide an administrator with an easy mechanism to look at different components of the computer system and determine which network nodes in the computer system have related behavior. The administrator may be able to perform troubleshooting on the network with more ease. A network node for example may include any system asset such as a virtual volume storage drive storage controller server host machine virtual machine application and or the like.

System includes a system monitoring tool that is implemented as an application. For instance a system monitoring tool can be implemented as application at client . Additionally or alternatively the system monitoring tool may be implemented as one of applications . For the purposes of this example application is described as the system monitoring tool. The system monitoring tool receives system data by communicating with storage operating systems at each storage controller . For instance system monitoring tool may communicate via API to receive system information such as hardware names volume names usage data read and write operations per second and the like. Various types of system information are described in more detail below. In short the system information of this example includes any type of information that allows the monitoring tool to construct a comprehensive description of the architecture and performance of system .

Server system includes a computer system that executes applications and interacts with the client system for receiving read write access requests and receiving or transmitting data from or to the client system over the network . Server system in this example is connected to the client system over a network such as a local area network LAN an Ethernet subnet a PCI or PCIe subnet a switched PCIe subnet a wide area network WAN a metropolitan area network MAN the Internet or the like.

The server may include any appropriate computer hardware and software. In one example server includes a general purpose computer configured to execute any of a variety of operating systems including the Unix Linux and Microsoft Windows operating systems.

Server system includes hypervisor which creates and manages one or more Virtual Machines VMs in this case VM . The present example shows only a single VM though in other embodiments the server includes multiple VMs not shown each VM being used by and connected with a client through computer network . Thus systems with more than one client may include more than one VM each client being supported by at least one VM. VM includes an encapsulation or instance of an operating system and applications and executing on top of that instance. Briefly application provides read write access to the clients to data stored in cluster . Application is a system monitoring tool described in more detail below. In some embodiments different types of VM hypervisors may be used e.g. VMware ESX Microsoft Hyper V etc. .

Each storage system is configured to allow server to access its data for example to read or write data to the storage system. The server executes application that connects to storage systems over computer network to send an access request read or write request to storage system for accessing particular data stored on the storage system . The VM application executing on the server services the connected client by receiving the client access requests and submitting the access requests to the storage system for execution.

The scope of embodiments is not limited to the particular architecture of system . For instance other systems may include additional servers each server being similar to server . While the example of shows only one client it is understood that any appropriate number of clients may be supported by the system . Moreover while cluster shows two storage subsystems and it is understood that any appropriate number of controllers and storage drive arrays may be used with various embodiments. For instance some embodiments may include only a single storage subsystem whereas other embodiments may include three or more storage subsystems. In other words the scope of embodiments is not limited to a single storage cluster.

System monitoring tool monitors the network nodes of system where the network nodes include any hardware or software component that is included in the architecture of system or affects the performance of the system . Examples of network nodes include the underlying storage drives e.g. HDDs and SSDs virtual volumes storage controllers storage subsystems aggregates of storage subsystems network connections virtual machines hypervisors applications and the like.

System monitoring tool includes the ability to determine communicative and architectural relationships among the different nodes in the system. For instance monitoring tool includes a discovery function that uses communication protocols defined by Application Programming Interfaces APIs to communicate with the nodes to receive data regarding the nodes. Monitoring tool receives a variety of information types including but not limited to hardware and software counter raw data configuration data for switch ports volumes and the like and network communication data. Monitoring tool then builds an architectural and topological understanding of the system by examining the received data. For instance in one embodiment monitoring tool assumes that nodes that communicate with each other are related. Thus when a VM reads and writes to a specific virtual volume through a specific switch port monitoring tool is aware of this communication relationship by its collected configuration data and network communication data. Monitoring tool creates a data structure not shown for instance in RAM or in nonvolatile memory at server that stores the communication relationships and consults the communication relationships when performing correlation calculations.

Put another way monitoring tool identifies which network nodes communicate with each other by for example identifying different paths and accesses between network nodes. Network nodes that communicate with each other are considered related. In an example VM may access a particular virtual volume and system monitoring tool may determine that VM is related to the virtual volume by observing network traffic and configuration data. Some network nodes in the computer system may not be related to each other. In an example a fiber channel port at one storage controller may be unrelated to another fiber channel port at a different storage controller because they do not communicate with each other. In such an example system monitoring tool may understand that these two network nodes are unrelated and thus not attempt to perform correlation calculations between the two.

Application is a system monitoring application that provides for data collection and analysis of correlation aspects of system and may provide for display of the correlation aspects of system . As explained above with respect to tool may be run in a VM in a storage server additionally or alternatively a performance management tool may be embodied as an application run on a client not shown or on any appropriate computer in communication with cluster .

Storage Operating Systems OSs run on storage controllers . The scope of embodiments may include any appropriate storage OS that provides low level control to implement virtual storage on storage drives. Storage OS instances run on one or more processors at storage controllers . Also communication between storage OSs and system monitoring tool go through communication links such as network .

Network topology extraction module processes network data received from a set of network nodes in the computer system and implements business logic to sort the network data . In an example switches and may send network data to network topology extraction module . Switch sees one part of the network and switch sees another part of the network. Network topology extraction module may then analyze the received data to determine a network topology of the computer system as described above with respect to . The network topology may be useful in determining which network nodes communicate with each other and are related. For example network topology extraction module may be able to determine that VM accesses virtual volume .

Network topology extraction module analyzes the network data and determines sets of related network nodes . A set of related network nodes includes network nodes that are related to each other e.g. by communicating with each other by being physically or logically integral and or the like. In an example network topology extraction module determines that application on client system interacts over the network with VM and switch . In such an example network topology extraction module may determine that application client system VM and switch are related network nodes because they have directly or indirectly communicated with each other within a given time period.

A network node sends raw data based on one or more operations at the network node. A network node may maintain its own native performance counter which may be a software or hardware counter based on one or more operations at the network node. A network node that maintains a native performance counter may be referred to as a native counter network node. Network data may come in many forms. In an example a network node s native performance counter may count one or more operations at the network node e.g. one or more input output I O operations I O Operations per second IOPS total maximum IOPS or average IOPS as well as other performance data e.g. latencies based on one or more I O operations .

A network node that does not maintain a native performance counter may be referred to as a non native counter network node. The non native counter network node may be the node of interest and it may be difficult to determine which network nodes have a high correlation to the node of interest because it does not maintain a native performance counter that is useable as an input into the correlation formula. Embodiments may provide a solution to this problem by using the configuration and network topology data to identify network nodes that are closely related to the non native counter network node. In an example the non native counter network node is composed of the closely related network nodes. Correlation information for the closely related network nodes may be used as a proxy for correlation information of the non native counter network node as described in more detail below.

Network topology extraction module receives network data and determines the configuration and network topology of the computer system based on the network data . In an example one of more servers hosts VMs and and application runs on top of these three VMs. Each of VMs and maintains a native performance counter. No useful statistics may be available from the application itself because it does not maintain any native performance counters that are useful . It may be desirable to know the correlation between application and another network node such as virtual volume which is accessed by application . In such an example network topology extraction module determines that application runs on top of VMs and and thus that these three VMs are closely related to application .

Network data may be received in many forms by network topology extraction module . For example network data may include data from different data sources different types of data sources and or data sources provided by different vendors. In such an example switches and may be from different vendors and each of these switches may send network data in raw form that is different from the other. The raw data may include native performance counters maintained by a network node. Network topology extraction module stores and manipulates the raw data to make it more useable e.g. remove noise . In an example network data includes too much data for network topology extraction module to practically process within a given time period. To reduce processing time network topology extraction module samples the raw data and generates summary data that derives from the raw data for network nodes. Summary data is data that is in a more useful form compared to the raw form. In an example virtual volume records its behavior and sends it to system monitoring tool in raw form. Network topology extraction module may take samples of the raw data hourly and produce an hourly summary of the virtual volume s behavior by producing totals averages and other processed information. In such an example summary data may include the sampled data of the virtual volume s behavior.

System monitoring tool is programmed to know which performance metrics are useful to determine the correlation between particular network nodes and performance metrics vary from device to device. Example performance metrics of a network node include CPU cycles IOPS latency port traffic network traffic may map to latencies in a VM average IOPS and maximum IOPS. A performance metric that is useful to determine such a correlation between application and virtual volume nodes is TOPS. As discussed application does not maintain a native performance counter. In keeping with the above example of VMs and being closely related to application network topology extraction module may receive IOPS data from virtual volume and VMs and and process this data into more useful information e.g. by averaging it over time or performing other smoothing operations thereby generating summary data . Summary data may include the network nodes performance metrics that are useful to determine the correlation of a network node of interest to other network nodes in the computer system.

Correlation module is preprogrammed with information to indicate which performance metrics of different types of network nodes provide valuable correlation information. For example the performance metrics to apply to a correlation calculation between a VM and a particular storage pool e.g. virtual volume may include the VM s latency and I O and the virtual volume s utilization or storage drive IOPS. Another set of performance metrics that may be valuably related includes traffic in GB second at a port and latency in milliseconds of a VM. Module may be pre programmed with a priori knowledge of valuable relationships between performance metrics so that it applies the correlation formula to the pairs of performance data that are most valuable.

Another example of performance metrics that tend to provide valuable correlation data include the same metric applied to different nodes. For example the maximum IOPS of one network node and the maximum IOPS of another network node may produce valuable correlation information. In another example the average IOPS of one network node and the average IOPS of another network node may produce valuable correlation information. Another example of performance metrics that tend to provide valuable correlation data include different metrics applied to different nodes. For example the maximum IOPS of one network node and the average IOPS of another network node may produce valuable correlation information. In any event module may be pre programmed with tables of appropriate matches between performance metrics. Module then accesses the table to apply formula to appropriate performance metrics.

Correlation module may obtain set of related network nodes and summary data from network topology extraction module . In an embodiment for a set of network nodes in the computer system correlation module applies a correlation formula on an input based on performance data of the set of network nodes and determines a correlation score based on applying correlation formula . For a given node of interest and a plurality of its related nodes module calculates a correlation score for each related node with respect to the node of interest. An example of a correlation formula for use in some embodiments is the Pearson equation formula above. Correlation module applies correlation formula to the performance data of the network nodes to calculate correlation scores for each of the network nodes for relevant performance metrics. Each of the correlation scores indicates a correlation of performance data between two network nodes of the plurality of topologically related network nodes.

In an example if the set of network nodes includes a first network node and a second network node applying the correlation formula on the first and second network nodes determines a performance correlation between the first network node and the second network node. In such an example the first network node may be of a first type and the second network node may be of a second type. Applying the correlation formula may include applying a first performance metric for the first network node of the first type and applying a second performance metric for the second network node of the second type. The first and second performance metrics may be the same or different from each other. A performance metric may include at least one of a central processing unit CPU counter I O operations counter port traffic average I O operations and maximum I O operations. Various examples were given above of performance metrics that are usually assumed to be related enough that a correlation score between the two would be valuable. Additionally the first network node may be from a different vendor than the second network node.

Correlation module may obtain summary data as an input. Summary data is an input of correlation formula . Various embodiments may use any correlation formula appropriate for the resources. For instance a conventional statistical correlation formula such as the Pearson formula given above may be used to correlate performance metric numbers over the time period of interest. For a given node of interest correlation module may apply the correlation formula to its known related nodes to generate correlation scores between the node of interest and its known related nodes. In one example correlation module applies the correlation formula for at least a subset of latency IOPS throughput I O throughput CPU usage and memory usage to generate correlation coefficients for appropriate performance metrics. Of course and as noted above module is pre programmed to select performance metrics of the related nodes that are appropriate for correlation.

Correlation module may also obtain the set of related network nodes as an input. A network system may have hundreds of network nodes and to reduce the processing power required to apply the correlation formula correlation module may apply the correlation formula to the set of related network nodes for a given node of interest. Each node in the network may include its own set of related nodes and module would apply correlation formula to those related nodes and omit generating correlation calculations for unrelated nodes when generating correlation scores for the node of interest. For example for a given node of interest that has ten related nodes module would generate correlation scores between the node of interest and each of the respective related nodes for any appropriate relatable performance metrics.

An advantage may provide for less processing time and power consumed. In other words by omitting performing correlation operations for unrelated nodes the system may conserve resources and provide results more quickly.

In an example the network node of interest is application which runs on top of VMs and . Correlation module may receive set of related network nodes e.g. application VMs and and virtual volume and summary data e.g. summarized data on application VMs and and virtual volume . Correlation module applies correlation formula to VM and virtual volume separately applies correlation formula to VM and virtual volume and separately applies correlation formula to VM and virtual volume . In an example the correlation score for VM and virtual volume is 30 the correlation score for VM and virtual volume is 50 and the correlation score for VM and virtual volume is 50. In an example the correlation score of application can be determined by applying a weighted average to the correlation scores of the closely related network nodes. In such an example the correlation score of application and virtual volume is 43.3 e.g. 30 50 30 3 .

Correlation module determines a first list including correlation scores between network nodes in the set of network nodes. First list includes correlation scores for the set of network nodes e.g. set of related network nodes with respect to a given node of interest. It may be desirable to filter out those network nodes that do not have a high correlation to the given node of interest based on the correlation score. In an example correlation module sorts first list such that the network nodes at the top of first list have the highest correlation.

First filter module obtains first list and determines based on the correlation scores second list including a first plurality of network nodes having a correlation score that satisfies a first threshold. In an example if the correlation score exceeds the first threshold the correlation score satisfies the first threshold. For instance in one embodiment the first threshold is a correlation score of 15 percent and first filter module removes the correlation scores for network nodes having a correlation score that is less than 15 percent. First filter module filters first list by removing from first list network nodes having a correlation score that does not satisfy the first threshold thereby creating second list .

Although first filter module has generated second list such that it includes only network nodes having a correlation score that satisfies the first threshold second list may still have misleading information. For example network nodes may show high performance correlations when in actuality their performance is not related. For instance two network nodes both showing zero value for a metric e.g. performance metric over a long time period may show nearly one hundred percent correlation so it may be desirable to eliminate such suggestions to avoid providing useless information.

Second filter module may filter the misleading entries out of second list . In an embodiment second filter module obtains second list and identifies a second plurality of network nodes included in second list . In an example the second plurality of network nodes has a correlation score that satisfies a second threshold and the second threshold e.g. 99 percent indicates a correlation that is higher than the first threshold. Second filter module analyzes the raw or summarized performance data of the second plurality of network nodes against a constancy metric. In an example second filter module determines based on a constancy metric of the performance data whether to remove ones of the nodes within the second plurality of network nodes.

The constancy metric may be determined by looking at the raw data. For example second filter module may be able to determine whether the correlation is high because the constancy within the raw data of some of the network nodes is high. For instance a network node may be running at zero percent while another network node is running at one hundred percent without being meaningfully related. In such an example the two network nodes may be at a steady operation which may be indicated in the raw data by a lack of dips and spikes in the performance of the network node. In an example second filter module removes the second plurality of network nodes from second list in response to determining that constancy values of each of the network nodes of the second plurality exceed a constancy threshold. Second filter module removes based on analyzing the raw data e.g. performance data the second plurality of network nodes from second list thereby creating a third list . An example of a constancy metric includes a statistical formula quantizing the amount of variation in a performance metric over time where lower variation results in a higher constancy.

Selector obtains third list and selects the top N correlation scores included in third list where N is an integer equal to or greater than one. The selected N correlation scores may indicate the top N correlations in third list . For each of the N correlation scores selector may identify the plurality of network nodes having the respective correlation score and send the identified plurality of network nodes along with the applicable correlation score to a display engine . Display engine may display identities for the plurality of network nodes and their respective correlation scores. Thus in one example an administrator is viewing a page for a given node of interest e.g. an application running on one or more VMs . The administrator requests correlation information and monitoring tool performs the techniques described above to generate correlation data between the node of interest and each of its respective related nodes. The result is a list of a few other nodes related nodes and their correlation scores with respect to the node of interest where those correlation scores were not filtered out. An example of a display is that shown and discussed in related provisional patent application 61 919 487.

As discussed above and further emphasized here are merely examples which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations alternatives and modifications.

At a process for a set of network nodes in a computer system a correlation formula is applied on an input based on performance data of the set of network nodes. In an example for a set of network nodes in a computer system correlation module applies correlation formula on an input based on performance data of the set of network nodes. At a process for the set of network nodes in a computer system a correlation score is determined based on applying the correlation formula the correlation score indicating a correlation between network nodes in the set of network nodes. In an example for the set of network nodes in the computer system correlation module determines a correlation score based on applying correlation formula the correlation score indicating a correlation between network nodes in the set of network nodes. In one example the correlation formula is applied to a set of related nodes with respect to a particular node of interest.

At process a first list including a first plurality of network nodes having a correlation score that satisfies a first threshold is determined based on the correlation scores. In an example first filter module determines based on the correlation scores second list including a plurality of network nodes having a correlation score that satisfies a first threshold. An example includes a first filter that eliminates entries having a correlation score that is assumed to be too low to be of use in troubleshooting. At a process a second plurality of network nodes included in the first list is identified the second plurality of network nodes having a correlation score that satisfies a second threshold the second threshold indicating a correlation that is higher than the first threshold. In an example second filter module identifies a second plurality of network nodes included in second list the second plurality of network nodes having a correlation score that satisfies a second threshold the second threshold indicating a correlation that is higher than the first threshold.

At process the performance data of the second plurality of network nodes is analyzed against a constancy metric. In an example second filter module analyzes the performance data of the second plurality of network nodes against a constancy metric. At process the second plurality of network nodes is removed from the first list based on the analyzing thereby creating a second list. In an example second filter module removes based on the analyzing the second plurality of network nodes from second list thereby creating third list . An example includes a second filter that eliminates entries having high correlation scores due to high constancies. Process may include removing ones of the nodes in the second plurality on an individual basis. Method may also include displaying the results of the correlation calculation as in .

It should be noted that the examples above are given in the context of a network storage system through the scope of embodiments is not so limited. Rather the concepts described above may be implemented in any type of computing cluster wherein performance data is sampled and analyzed. One example embodiment includes a cluster of server nodes where performance data for the server nodes themselves as well as for the applications running on the server nodes is sampled according to a workload of each node or application. Process would transfer the sampled data to an analysis application for further processing.

When implemented via computer executable instructions various elements of embodiments of the present disclosure are in essence the software code defining the operations of such various elements. The executable instructions or software code may be obtained from a non transient tangible readable medium e.g. a hard drive media optical media RAM EPROM EEPROM tape media cartridge media flash memory ROM memory stick network storage device and or the like . In fact readable media can include any medium that can store information.

In the embodiments described above example clients server storage controllers include processor based devices and may include general purpose processors or specially adapted processors e.g. an Application Specific Integrated Circuit . Such processor based devices may include or otherwise access the non transient tangible machine readable media to read and execute the code. By executing the code the one or more processors perform the actions of the processes of .

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. One of ordinary skill in the art would recognize many variations alternatives and modifications. Thus the scope of the invention should be limited only by the following claims and it is appropriate that the claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

