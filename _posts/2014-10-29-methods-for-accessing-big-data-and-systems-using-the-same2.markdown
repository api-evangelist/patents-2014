---

title: Methods for accessing big data and systems using the same
abstract: An embodiment of the invention introduces a method for accessing big data, which contains at least the following steps. A data access request is received from one of a plurality of database frontends of different kinds. A data access operation is performed for the data access request by using an API (Application Programming Interface) to manipulate one of a plurality of cloud file systems of different kinds.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600491&OS=09600491&RS=09600491
owner: Wistron Corp.
number: 09600491
owner_city: New Taipei
owner_country: TW
publication_date: 20141029
---
This Application claims priority of Taiwan Patent Application No. 103126348 filed on Aug. 1 2014 the entirety of which is incorporated by reference herein.

The present invention relates to data access and in particular to methods for accessing big data and systems using the same.

More and more enterprises establish an environment of cloud computing with big data storage. However the big data is so large and complex that it becomes difficult to process using on hand database management tools or traditional data processing applications. Thus it is desirable to have methods for accessing big data and systems using the same to improve scalability.

An embodiment of the invention introduces a method for accessing big data which contains at least the following steps. A data access request is received from one of a plurality of database frontends of different kinds. A data access operation is performed for the data access request by using an API Application Programming Interface to manipulate one of a plurality of cloud file systems of different kinds.

An embodiment of the invention introduces a system for accessing big data which contains at least a SVH Secure Verification Hashing module. The SVH module is coupled between database frontends of different kinds and cloud file systems of different kinds. The SVH module receives a data access request from one of the database frontends and performs a data access operation for the data access request by using an API to manipulate one of the cloud file systems.

A detailed description is given in the following embodiments with reference to the accompanying drawings.

The following description is of the best contemplated mode of carrying out the invention. This description is made for the purpose of illustrating the general principles of the invention and should not be taken in a limiting sense. The scope of the invention is best determined by reference to the appended claims.

The present invention will be described with respect to particular embodiments and with reference to certain drawings but the invention is not limited thereto and is only limited by the claims. It will be further understood that the terms comprises comprising includes and or including when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having the same name but for use of the ordinal term to distinguish the claim elements.

The reception module the virtual server the proxy module   and the database frontend   may be integrated in a single computer apparatus or distributed over several computer apparatuses. Similarly a pairing of the proxy module   with the database frontend   may be integrated in a single computer apparatus or distributed over several computer apparatuses. A pairing of the proxy module  with the database frontend  may be integrated in a single computer apparatus or distributed over several computer apparatuses. Any of the big data storage nodes     to  may contain many computer apparatuses to complete the big data retrieval and computation. is the system architecture of a computer apparatus according to an embodiment of the invention. A processing unit can be implemented in numerous ways such as with dedicated hardware or with general purpose hardware e.g. a single processor multiple processors or graphics processing units capable of parallel computations or others that is programmed using microcode or software instructions to perform the functions recited herein. The system architecture further includes a memory for storing necessary data in execution such as variables data tables or others and a storage unit for storing a wide range of electronic files such as Web pages documents video files audio files or others. A communication interface is included in the system architecture and the processing unit can communicate with other electronic devices thereby. The communications interface may be a LAN local area network communications module a WLAN wireless local area network communications module a Bluetooth communications module or others. The system architecture further includes one or more input devices to receive user input such as a keyboard a mouse a touch panel or others. A user may press hard keys on the keyboard to input characters control a mouse pointer on a display by operating the mouse or control an executed application with one or more gestures made on the touch panel. The gestures include but are not limited to a one click a double click a single finger drag and a multiple finger drag. A display unit such as a TFT LCD Thin film transistor liquid crystal display panel an OLED Organic Light Emitting Diode panel or others may also be included to display input letters alphanumeric characters and symbols dragged paths drawings or screens provided by an application for the user to view.

The SVH module reads data from a corresponding file system by using an API provided by the document oriented database the distributed batch database or the distributed real time database according to a data read request sent by the ULDSFS or . The SVH module verifies the integrity of data read from the document oriented database the distributed batch database or the distributed real time database and attempts to correct when the read data contains error bits. When the read data has no error or the error bits of the read data have been corrected the SVH module transmits the error free or corrected data to the erasure coding module and then the erasure coding module replies with the error free or corrected data to the ULDSFS or . In addition the SVH module writes the corrected data back to the corresponding file system by using an API provided by the document oriented database the distributed batch database or the distributed real time database and sends an event containing one or more meta tags of the corrected data fragments to a SIA Security Intelligence Analytics module. After receiving a specified number of events regarding the same meta tag the SIA may publish fake documents as honeypots to attract and thus pinpoint malware. Or the SIA may predict what categories of data are hotspots for hackers by machine learning and take a proper action such as rectifying the security breaches. When the read data contains too many error bits to be corrected the SVH module notifies the erasure coding module that the data has failed to be read so that the erasure coding module replies to the ULDSFS or with the failure of the data read request. The SVH module may use a well known error correction algorithm to attempt to correct a tolerable number of error bits that occur in the data and parity fragments.

Although the embodiment has been described as having specific elements in it should be noted that additional elements may be included to achieve better performance without departing from the spirit of the invention. While the process flow described in includes a number of operations that appear to occur in a specific order it should be apparent that these processes can include more or fewer operations which can be executed serially or in parallel e.g. using parallel processors or a multi threading environment .

While the invention has been described by way of example and in terms of the preferred embodiments it is to be understood that the invention is not limited to the disclosed embodiments. On the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art . Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

