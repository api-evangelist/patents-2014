---

title: Detection of rogue software applications
abstract: Software applications are analyzed to determine if they are legitimate applications and warnings are provided to users to avoid installation and/or purchases of unnecessary and/or potentially harmful software based on comparisons of user-interface characteristics of the software applications to visual characteristics of authentic applications to determine to what extent they match (or do not match) or are attempting to mirror the legitimate application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09288226&OS=09288226&RS=09288226
owner: AVG Netherlands B.V.
number: 09288226
owner_city: Amsterdam
owner_country: NL
publication_date: 20141223
---
This application is a continuation in part of copending U.S. patent application Ser. No. 14 280 096 filed May 16 2014 entitled DETECTION OF ROGUE SOFTWARE APPLICATIONS which is a continuation of U.S. patent application Ser. No. 13 182 652 which issued as U.S. Pat. No. 8 732 831 entitled DETECTION OF ROGUE SOFTWARE APPLICATIONS. This application also claims the benefit of U.S. Provisional Patent Application No. 62 000 202 filed May 19 2014 entitled DETECTING FAKE ANTIVIRUS PROGRAMS ON ANDROID OR MOBILE OS IN GENERAL . 

The invention relates generally to computer security and more specifically the identification of rogue software applications that deceive users into purchasing the rogue software.

The advance of computer and networking technologies has resulted in a significant increase in the number of people who use computers in their daily lives to conduct business communicate with friends and co workers and store information. In performing these functions users are often required to provide personally identifiable and or sensitive private information such as user names passwords account numbers birth dates social security numbers and credit card numbers. Because this information can be used for nefarious purposes such as stealing identities executing fraudulent purchases and other similar schemes an entire class of software has evolved with the sole purpose of covertly gathering and transmitting this information to third parties. Such software often referred to as malware or spoof software comes in many forms and is designed to infiltrate a computer system such that its detection and removal is very difficult especially for the casual computer user.

In response to these threats legitimate computer software companies have introduced so called Anti Virus software which is designed to identify and remove malware spyware and other potentially threatening applications. In some instances the anti virus software operates as an ongoing process and when new software is introduced onto the machine the anti virus software performs a pre installation scan or file check to determine if the software is legitimate even before it is installed on the computer. These applications often present the user with a screen or other visual message that indicates a virus or other malware was found or is attempting to install itself on the user s machine and instruct the user to take action. For example the user may decide the application is legitimate and allow the installation she may ask that the application be quarantined or have the software removed.

With the onslaught of damaging viruses and computer based identity threats antivirus software has become a very large industry and users routinely purchase new applications. Some developers however have taken advantage of this vulnerability and now present such warning screens even without any evidence of malware or viruses on a computer knowing that a large percentage of users will accept the installation of such software as a precaution. These applications often require users to purchase unneeded applications and in some cases install malware or spyware of their own.

These applications referred to herein as rogue software essentially prey on the fears and concerns of consumers by focusing on a market with high demand e.g. anti virus password management browser plug ins etc. but offer substandard products. To increase their appeal developers of rogue software design their applications with a look and feel similar to that of reputable software applications further confusing users. Recently consumers have begun identifying these rogue programs and are demanding that legitimate anti virus and malware detection applications trap these applications as well. What is needed therefore is a method and system for positively identifying rogue software applications that are designed to appear as legitimate applications but in fact are not.

In various embodiments of the present invention software applications are analyzed to determine if they are legitimate applications and warnings are provided to users to avoid installation and or purchases of unnecessary and or potentially harmful software. This is achieved in part by comparing certain characteristics of potentially rogue software to the same or similar characteristics of known legitimate applications. In addition to using binary signature detection methods and behavioral functions user interface characteristics are used to determine if an application is legitimate. These visual characteristics can be compared to visual characteristics of other applications to determine to what extent they match or do not match or are attempting to mirror the legitimate application.

As used herein rogue software generally means a software product that substantially mimics the look and feel of another legitimate software product but not its functionality. Generally the rogue software masquerades as a legitimate product often as an anti virus or computer maintenance performance enhancement software and convinces a user to buy the fake product. Thus in some ways the rogue software is analogous to a phishing website that presents itself as an authentic website to a user. The conventional anti virus and or malware detection applications may not adequately protect a user from rogue software because it typically does not perform any harmful actions on a computer e.g. deleting files accessing passwords etc. and hence may not be detected by the conventional applications.

In order to facilitate detection of rogue software products features of the user interface UI of an offered software are analyzed. Some exemplary UI features include the window title name names of menu buttons types of components in the UI e.g. progress bar lists buttons etc. image files associated with the offered software dialogue names and colors. From the downloaded executable and or data files associated with an offered software product the various UI features are extracted. These features are compared with the known features of legitimate products and a potentially rogue software product is detected if the extracted features and the known features are similar but do not match exactly or nearly exactly. In some instances components of the downloaded executable and or data files such as digital signatures etc. are also inspected to determine whether the offered software product is a rogue product.

Accordingly in one aspect a method for determining the legitimacy of a software application being presented to a user of a computing device includes programmatically detecting the execution of a software application on a computing device during which user interface characteristics of the software application are collected and stored in a memory. For example one method to collect such user interface characteristics on systems using the Microsoft Windows Operating System OS is to utilize one or more of the OS Application Programming Interfaces APis provided with the OS. The collected user interface characteristics are compared to known user interface characteristics of legitimate software applications and if a similarity between the collected user interface characteristics and the known user interface characteristics surpasses a predefined similarity threshold analyzing additional characteristics of the executing software application to determine whether the application is a legitimate software application.

The computing device can be a personal computer a tablet computer a game console or a mobile communications device. The user interface characteristics may be one or more of window title names screen control names screen control components progress bars lists buttons image files dialog box names colors and system tray settings. The legitimate software applications comprise anti virus applications and the executing software application may be a rogue software application masquerading as an anti virus application. The additional characteristics may include a digital signature a source location a binary signature of the executing software application an operating system device driver an operating system kernel driver a digital certificate and or the application s permissions list.

In some embodiments a determination is made as to whether the executing software has been digitally signed and if not the executing software is classified as rogue software. The source location from which the executing software was transmitted to the computing device may also be determined and if not known to be an authentic source of legitimate software applications the executing software is classified as rogue software. Further a binary signature of the executing software may be calculated or determined and if it does not match a binary signature of a known legitimate software application the executing software is classified as rogue software. In each case the user may then be presented with a message indicating the software is rogue.

In certain implementations execution of the software is forced to terminate and the files associated with the application are quarantined for subsequent deletion from the computing device. Again the user may be presented with a message suggesting and or confirming the deletion of the software application from the device.

In another aspect a system for analyzing determining the legitimacy of a software application being presented to a user of a computing device includes computer executable instructions stored on a memory device. When executed by a processor the instructions programmatically detect the execution of a software application on a computing device during which interface characteristics of the software application are collected and stored in a memory. The instructions further cause known user interface characteristics of legitimate software applications to be retrieved from a database and programmatically compare the collected user interface characteristics to the known user interface characteristics. If a similarity between the collected user interface characteristics and the known user interface characteristics surpasses a predefined similarity threshold the instructions analyze additional characteristics of the executing software application to determine whether the application is a legitimate software application.

In some implementations the instructions further determine if the executing software has been digitally signed if the source location from which the executing software was transmitted to the computing device is an authentic source of known legitimate software applications and or if the binary signature of the executing application matches a binary signature of a known legitimate software application and if one or more of these conditions are not met the executing software is classified as rogue software. In some instances the user is presented with a message indicating the software is rogue software. In some instances the instructions force termination of the executing software application and quarantine the files associated with the executing software application for subsequent deletion from the computing device. The software may also be deleted from the computing device and appropriate messages presented to the user.

Other aspects and advantages of the invention will become apparent from the following drawings detailed description and claims all of which illustrate the principles of the invention by way of example only.

Referring to a computing device on which various embodiments of the invention may be implemented includes a stored memory one or more processors and a display . In some embodiments the device may include other components such as user input mechanisms such as a keyboard mouse pointer and the like. In other cases or in combination with these input mechanisms the display may also provide user input functionality using for example touch screen technology as known in the art. Although shows a single device this figure is illustrative only and is meant to include devices such as cell phones smart phones netbooks wireless devices gaming consoles pad computers and or personal digital assistants PDAs . The device is typically connected to a communication network e.g. a private network a local area network a wireless network the Internet etc. in order to send and receive messages and data from other devices.

The stored memory stores applications and data that are used by the device to perform functions as directed by the user of the device. One such application that is routinely installed and used on the device is anti virus software which assists the user in identifying and eliminating unwanted software and or restoring systems settings to proper values. Examples of unwanted software include for example malware keyboard loggers tracking cookies viruses and the like which are typically installed on the device without the user s knowledge or consent. Because the unwanted software can have such a detrimental impact on the users device and or compromise the user s privacy and security users are especially prone to purchasing anti virus software when they are informed of a potential infection.

Unscrupulous software vendors are aware of this vulnerability and have devised schemes to take advantage of users naivet in this regard. For example software vendors have designed applications that mimic the look feel and operation of legitimate anti virus applications that when executing lure the users into a false sense of threat and based on this fear encourage the user to purchase the software unnecessarily. Unlike traditional malware and viruses these applications do not perform any harmful functions e.g. deleting files changing registry entries creating tracking cookies or covertly transmitting data . As such the execution of these applications is not detected by conventional anti virus software applications. Using the techniques and systems described herein however users can be notified when these rogue applications are presented to them and can be informed that the applications are not authentic anti virus applications.

According to various embodiments of the invention and referring to a user operating a computing device may be presented with a warning screen pop up ad email or other message generally referred to herein as a potentially rogue software application or application that indicates usually falsely that their device is under threat from malware a virus or other potentially damaging software. The execution of this application is first detected on the device STEP . The detection may take place by monitoring the Windows messaging queue for new display commands containing certain elements. Once detected various user interface characteristics are then identified and collected STEP . These characteristics may include for example window title names screen control names screen control components progress bars lists buttons image files dialog box names colors text and or system tray settings. The specific characteristics may be stored in memory for subsequent comparison.

Separately a database of visual characteristics of known authentic anti virus software applications may be maintained. In some instances the database may be a centrally managed database e.g. by an anti virus application vendor for example and accessed remotely over the Internet or in some cases the database may be stored locally on the device itself. If stored locally the local database may be updated periodically e.g. every week month etc. on demand or whenever the central database is updated. In any instance user interface characteristics from the authentic anti virus applications are retrieved from the database STEP and compared to those collected from the executing application STEP . The comparison may include comparing object names naming conventions text binary representations of images as well as other comparisons to determine a degree of match between the application being analyzed and applications known to be authentic. If none of the characteristics match or so few match that it is unlikely that the application not being passed off as anti virus software DECISION STEP the process ends STEP . If however the degree of match is above some predetermined threshold e.g. more than 75 of the components in a known anti virus application exist in the potentially rogue software additional characteristics are then analyzed STEP .

For example if the application is now suspected as being rogue software characteristics such as the binary signature of the executing application may be captured and compared to those of applications known to be authentic applications. For applications designed for mobile platforms characteristics peculiar to mobile applications such as a permissions list e.g. file access permissions access to contact lists access to memory etc. for example may be compared to those of known legitimate mobile applications. Further a mobile application certificate associated with the application may be verified with a trusted third party.

In some cases the comparison may be limited to those applications to which a high degree of match among the user interface characteristics was made. In other instances the application may be analyzed to determine if it has a digital signature associated with it as most rogue applications do not. Further in some implementations it is feasible to determine the source from which the application was sent to the device and that source e.g. a URL IP address email address or other uniquely identifiable information may be captured and compared to those of authentic applications. If these characteristics do not match those of applications known to be authentic DECISION STEP the applications are then classified as rogue applications.

Once classified as such the users may be notified and remediation may then take place STEP . For example the user may be presented with a dialog box informing him that the application screen being presented is from a rogue application and that there are in fact no known threats to his device and any suggestions to execute or purchase the application should be ignored. In some versions the process may continue by searching for and removing any components of the rogue application present on the device. In still other versions a digital signature hash or other numeric representation of the application or its components may be derived and stored and or transmitted to a central repository for tracking such applications.

Each functional component described above may be implemented as stand alone software components or as a single functional module. In some embodiments the components may set aside portions of a computer s random access memory to provide control logic that affects the interception scanning and presentation steps described above. In such an embodiment the program or programs may be written in any one of a number of high level languages such as FORTRAN PASCAL C C C Java Tel PERL or BASIC. Further the program can be written in a script macro or functionality embedded in commercially available software such as EXCEL or VISUAL BASIC.

Additionally the software may be implemented in an assembly language directed to a microprocessor resident on a computer. For example the software can be implemented in Intel 80 86 assembly language if it is configured to run on an IBM PC or PC clone. The software may be embedded on an article of manufacture including but not limited to computer readable program means such as a floppy disk a hard disk an optical disk a magnetic tape a PROM an EPROM or CD ROM.

The invention can be embodied in other specific forms without departing from the spirit or essential characteristics thereof. The foregoing embodiments are therefore to be considered in all respects illustrative rather than limiting on the invention described herein.

