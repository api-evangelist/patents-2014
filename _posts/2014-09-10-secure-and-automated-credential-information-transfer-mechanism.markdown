---

title: Secure and automated credential information transfer mechanism
abstract: A mechanism for securely transmitting credentials to instantiated virtual machines is provided. A central server is used to turn on a virtual machine. When the virtual machine is turned on, the central server sends it a secret text string. The virtual machine requests the credentials from the central server by transmitting the secret string and its instance ID. The central server validates the secret string and source IP to determine whether they are authentic. Once verified, the central server transmits the credentials to the virtual machine in a secure channel and invalidates the secret string. The credentials can now be used to authenticate API calls.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09276926&OS=09276926&RS=09276926
owner: Accenture Global Services Limited
number: 09276926
owner_city: Dublin
owner_country: IE
publication_date: 20140910
---
The Internet is used to interact with various web sites that offer up to date news reports real time information games business functions social interfaces search functions telepresence e commerce etc. Behind all of the personal and business applications associated with the Internet is an evolving rapidly growing enormous amount of content and information in the form of text graphics audio video multi media data web objects applications real time streams and other content capable of internet delivery. All of this content is typically stored on servers which are basically powerful computers that are specially designed to store and provide or serve the requested content to the end users.

However servers are rather expensive to install upgrade and maintain. In addition the network hardware to connect the servers onto the Internet backbone can also be quite expensive to purchase install and maintain. It takes expert knowledge to build and efficiently operate a server farm or data center. Oftentimes successful businesses may have to upgrade their server infrastructure to handle the increased Internet traffic. The upgrade process can be a difficult time consuming and costly endeavor. Furthermore running servicing troubleshooting and load balancing a server farm or data center can be quite daunting. Yet another downside inherent to server farms and data centers is that deployment can take a relatively long period of time. These days content providers strive to be first to market in order to capture a particular audience market segment or business opportunity.

In response to the shortcomings of owning and running a dedicated server farm or data center an Internet based computing technology known as cloud computing is gaining popularity. With cloud computing an information technology IT service provider specializes in establishing and running one or more huge collections of servers. The computing storage and networking resources of the cloud computer are then essentially rented out to businesses and other content providers for a fee. Initially a user or business can contract for a specific desired amount of computing networking and storage resources in exchange for a specified periodic payment. The IT cloud computing service provider provisions and allocates the requested resources by means of virtualization. In this manner the actual underlying infrastructure e.g. servers network devices storage units etc. is transparent to the purchaser. And should the purchaser need to upgrade the IT cloud computing service provider can simply provision and allocate the requisite additional amount of resources to handle the purchaser s needs.

Because the cloud computing infrastructure is shared amongst different end users it is critical that the content and data is kept secure and confidential. It is also critical to keep the sensitive content and data secure from malicious attacks from hackers and other third parties as well. One way to accomplish both these goals entails the use of a symmetric key pair encryption process. One key is the public key which can be shared publicly whereas the other key is the private key which must be kept in a secure local location. This type of encryption provides a very high degree of authentication whenever the cloud computer is being accessed. For example when a user desires to initiate a command or request through an application programming interface API call the API call is encrypted by means of the public and private keys. This ensures that the API call is authentic.

One problem with this setup is that in order to leverage the capabilities offered by cloud computing automatically initiated servers should be able to execute an API call to access cloud services such as a distributed queuing service e.g. Simple Queue Service SQS . This in turn means that the server must have the proper pair of public and private keys to make that API call. However before the servers are provisioned they lack the proper pair. Although the public key is supposed to be transmitted and shared the private key should not. Thus the problem becomes how to provide the private keys to the servers so that they can execute the necessary API calls.

One solution to the problem is to hardcode the private keys to a read only machine image. This machine image can then be loaded onto the servers. The disadvantage to this solution is that should the private key ever become compromised or be periodically renewed for security reasons it is a rather cumbersome process to have to manually update machine images containing the new private keys. Another possible solution is to transmit the private key as part of the user text data meant to customize the server s state. However this is very dangerous because the private key is sent in plain text and is susceptible to being intercepted or hacked. A third solution is for a central server to continuously ping the other servers to determine when they are being provisioned. Once a server acknowledges that it is being provisioned the central server then sends the private key via a secure channel. The downside to this approach is that the central sever has to continuously monitor and track each of the multitudes of servers and their respective states. Turning on many servers at the same time can result in a significant amount of computing overhead. Alternatively the servers can notify the central server when they are being provisioned. Unfortunately without an authentication mechanism the central server may respond to maliciously fabricated notifications and the private key becomes compromised.

Thus to date there is no expedient and fail safe mechanism for providing credential information transfers in a cloud computing environment.

Embodiments of the present invention pertain to a mechanism to securely transmit credentials to automatically instantiated virtual machines in a cloud computing environment. The mechanism provides a secure way to transmit the credential information from a central server to one or more of the initiated instances. The central server stores the credential information. It turns on an instantiated instance with a one time use secret string sent in the user data. As soon as the instance turns on it sends a Hypertext Transfer Protocol HTTP request to the central server for the credential information. The secret string is also sent along with the source instance s unique ID. The central server verifies the secret string and the source instance ID to determine whether the request is authentic. Once the central server validates the authenticity it invalidates the secret string. The central server then sends credential information over a secure transmission medium. The instantiated instance can now initiate API calls using the credential information to provide the requisite authentication.

Reference will now be made in detail to several embodiments. While the subject matter will be described in conjunction with the alternative embodiments it will be understood that they are not intended to limit the claimed subject matter to these embodiments. On the contrary the claimed subject matter is intended to cover alternative modifications and equivalents which may be included within the spirit and scope of the claimed subject matter as defined by the appended claims.

The claimed subject matter is directed to a method and system for securely transmitting credential information to automatically instantiated virtual machines in a cloud computing infrastructure. In one embodiment this is accomplished by means of two entities. A master server has the credential information and turns on off other instances based on programmed policies. One or more slaves serve as automatically initiated instances that require the credential information to make API calls. These two entities act in a manner that provides a secure way to transmit the credential information from master to slave in the following steps. Initially the master turns on a slave with a one time use secret string in the user data. As soon as the slave is turned on it sends a Hypertext Transfer Protocol HTTP request to the master for the credential information with the secret string. The slave also includes its instance ID in this request. The instance ID is a unique identifier returned from the cloud computing infrastructure as a return value of a turn on signal. Moreover by sending instance IDs the master knows when the slaves are being turned on this eliminates the need for the master to continuously ping or poll the slaves. Upon receipt of the request the master performs a sanity check by reading the secret string and the instance ID. Once the master validates the authenticity it invalidates the secret string. The master then sends a separate Secure Sockets Layer SSL message that creates a file with the credential information to the designated file in the slave s file system. The root account only has an access to the file. It is assumed that it is secure to transmit the credential information through the SSL connection and that it is secure to store the credential information within a file that only the root has a read access. Once the file is created the slave can now start to run its application and make any API calls with the credential file within a secure authenticated transmission mechanism.

Thus embodiments of the present invention solve the technical problem of securely transmitting credential information e.g. Access Key ID and Secret Access Key to validate user s API calls to its cloud services. Embodiments of the present invention also significantly increase scalability of web services. Moreover embodiments of the present invention also support the elasticity of cloud computing by issuing API calls in an automated fashion.

Furthermore embodiments of the present invention solve the problems described above by enabling secure transmission of credential information such as AMAZON Web Services credential information to automatically initiated instances. Embodiments of the present invention do not suffer from the complexity and reliability issues of prior art methods and are capable of dealing with one time secret passwords. In addition embodiments of the present invention do not require the transmission of secret information through user data features which has been proven to be unsecure. Furthermore embodiments of the present invention do not require the central server to check the remote servers constantly. Finally embodiments of the present invention are able to provide secure transmission of credential information without the need to hard code secret information into machine image read only files.

With respect to a graphical depiction of an exemplary cloud computing environment is depicted in accordance with embodiments of the present invention. According to one embodiment environment includes a plurality of communicatively interconnected computing environments to each other and or to the Internet. As presented environment may include a personal computer a network routing device one or more domain name system DNS servers and a plurality of cloud computing components e.g. hardware servers and virtual machines .

As depicted in a communicative coupling may be established between a personal computer and one or more virtualized instances e.g. virtual machines of a cloud data center . A virtualized instance or virtual machine is an abstraction of computing and or networking resources whereby specialized software is run on one or more hardware components such that end users execute programs like a real machine and is unaware of the actual underlying hardware. The same hardware can be shared amongst several virtual machines. In one embodiment a web application may be hosted on an instance of a virtual machine and accessible through a client browser executing on a personal computer . As depicted cloud computing environment includes a portion of an exemplary cloud computing data center. This graphical representation may be suitable to represent any organization or arrangement of networked computing devices. In typical embodiments additional computing resources may be requisitioned and provisioned from the cloud data center dynamically as needed. Likewise when resources are over provisioned additional computing resources may be relinquished to manage operating costs. Thus such a graphical representation may represent the infrastructure of a typical cloud data center.

In one embodiment a personal computer may display content from a web application hosted on a virtualized instance of a web server on a web browser. A user of the personal computer may navigate to a website corresponding to the web application via a uniform resource locator URL web address registered to the web application with one or more DNS servers. As presented the personal computer may be itself communicatively coupled to a networking device such as a router and further coupled to the Internet through a vast network of interconnected computing devices. In some embodiments by entering the URL registered to the web application in a web browser the local Domain Name System DNS server e.g. DNS server is queried to resolve the domain name resolution and determine the specific IP address of the requested website. In some instances the website may not be registered with the local DNS server and additional DNS servers may be sequentially queried to determine the address of the web application.

Once the web address has been resolved the browser is able to communicate with one or more computing resources operated by the web application. In one embodiment data requests may be received in a computing system operating as a storage host e.g. storage host . According to one embodiment dynamic content is stored on one or more disparate web servers. The storage host may direct requests directly to the web server e.g. web server . In still further embodiments the dynamic content is hosted on a plurality of virtual machine instances e.g. instances hosted on a web server . In yet further embodiments data requests may be received in a proxy web server hosted on the same physical web server as the virtual web server containing the requested data. Additionally users can execute API calls to issue commands and invoke functions specific to the cloud computer. For example with API calls users can upload access and or delete data in the cloud storage. Users can also turn on configure and turn off virtual machines through API calls. API calls can also be made to control other scalable web serves. All of these features are crucial parts to cloud computing based applications. However these API calls to access the various cloud computing services must be authenticated. The present invention provides a high availability low cost reliable and secure mechanism for providing the credential information to the proper virtual machines for authenticating these API calls.

In specific embodiments of the present invention the central server as mentioned in step is a server that has the credential information and turns on off other instances based on programmed policies. In specific embodiments of the present invention the programmed policies is determined by a user. The central server or master may reside within user hardware or it may reside within the cloud platform. In specific embodiments of the present invention the central server resides within multiple locations. In specific embodiments of the present invention there may be several central servers.

In a specific embodiment of the present invention the remote server or slave is an automatically initiated instance that require the credential information to call APIs. In another specific embodiment of the present invention the remote server is the automatically initiated instances that require the credential information to call APIs. The remote server or slave may reside within user hardware or it may reside within the cloud platform. In specific embodiments of the present invention the remote server resides within multiple locations. In other specific embodiments of the present invention there may be multiple remote servers.

In step the central server receives an on signal and secret string from the remote server. In specific embodiments of the present invention the instance ID of the remote server is also received by the central server. The benefit of such an approach is that unnecessary constant checking of remote servers by the central server is prevented because the central server will be alerted by the desired remote server only when the desired remote server is turned on and ready to receive the credential information.

In step the central server performs a sanity check on the secret string received from the remote server. In specific embodiments of the present invention different secret strings and or instance IDs could be utilized. Some secret strings and or instance IDs will not be authenticated and will cause the central server to move on to step while other secret strings and or instance IDs will be authenticated and will cause the central server to move on to step . The benefit of such an approach is that maliciously fabricated on signals are filtered out.

In step once the central server authenticates or verifies the secret string and instance ID to be correct the central server sends the necessary credential information to the remote server which allows the remote server to run the desired application. In step the central server invalidates the secret string. In a specific embodiment of the present invention the secret string is a one time use string which is automatically invalidated after one use. In another embodiment of the present invention step invalidation of the secret string is performed by the central server immediately after the check on the secret string prior to step of . The benefit of invalidating one time use string is that maliciously duplicated on signals are filtered out.

Thus a mechanism to securely transmit credential information in a secure and efficient manner automatically to initiated instances in a cloud computing environment is disclosed. Although embodiments of the invention have been discussed primarily with respect to specific embodiments thereof other variations are possible. Various configurations of the described system may be used in place of or in addition to the configurations presented herein. For example although the system was discussed as if its components were serially connected the components could be linked by a separate data bus or through any number of other configurations. The invention is not limited to use within the infrastructure cloud. Functions may be performed by hardware or software as desired. In general any diagrams presented are only intended to indicate one possible configuration and many variations are possible. Those skilled in the art will also appreciate that methods and systems consistent with the present invention are suitable for use in a wide range of applications encompassing any involving data management. While the specification has been described in detail with respect to specific embodiments of the invention it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily conceive of alterations to variations of and equivalents to these embodiments. These and other modifications and variations to the present invention may be practiced by those skilled in the art without departing from the spirit and scope of the present invention which is more particularly set forth in the appended claims. Furthermore those skilled in the art will appreciate that the foregoing description is by way of example only and is not intended to limit the invention.

