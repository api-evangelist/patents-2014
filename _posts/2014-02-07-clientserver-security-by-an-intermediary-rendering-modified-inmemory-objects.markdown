---

title: Client/server security by an intermediary rendering modified in-memory objects
abstract: In an embodiment, a method comprises intercepting, from a server computer, a first set of instructions that define one or more objects and one or more operations that are based, at least in part, on the one or more objects; generating, in memory, one or more data structures that correspond to the one or more objects; performing the one or more operations on the one or more data structures; updating the one or more data structures, in response to performing the one or more operations, to produce one or more updated data structures; rendering a second set of instructions, which when executed by a remote client computer cause the remote client computer to generate the updated data structures in memory on the remote client computer, wherein the second set of instructions are different than the first set of instructions; sending the second set of instructions to the remote client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08892687&OS=08892687&RS=08892687
owner: Shape Security, Inc.
number: 08892687
owner_city: Mountain View
owner_country: US
publication_date: 20140207
---
This application claims the benefit under 35 U.S.C. 120 as a Continuation of application Ser. No. 14 099 437 filed Dec. 6 2013 titled Client Server Security by an Intermediary Rendering Modified In Memory Objects the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein. The applicant s hereby rescind any disclaimer of claim scope in the parent application s or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent application s .

The present disclosure generally relates security techniques applicable to client server systems and relates more specifically to techniques for improving the security of web applications and data sent and or received between web servers hosting the web applications and browser programs and or components of browsers.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Computer fraud performed by obtaining information in non secure communications transmissions between browser programs and server computers is big business for fraudsters. Fraud can be perpetrated by obtaining financial or personally identifying information that end users provide while using a browser to communicate with an application server computer. For example in an exploit commonly termed Man in the Browser a user s computer can be provided with malicious code that collects data from legitimate communications such as communications with the user s bank. After the communications have been decrypted for example by a web browser on the user s computer the malicious code may gather data that is displayed in particular fields or sections in the decrypted web page and provide the data to a malicious user or computer.

Malicious code may also gather data that is entered by a user before the user s data is encrypted and sent to the intended recipient. For example a user may enter account information into a web browser that is displaying a web page from the user s bank. The web page may be a login page to access the user s account information and funds. The malicious code may scan particular fields in the web page for the user s account information before the user s account information is encrypted and sent to the user s bank and then send data obtained from those fields to a malicious user or computer. Web browsers were first developed and deployed in the early 1990 s and thus there has been a need to improve browser security web server security web based application security and data security at and or between end points.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

An object may be a data structure that can be identified by an identifier and or a relationship with another object. For example an object may have a unique identifier that is a string such as a document customer number or username. Accordingly the object may be referenced and or retrieved using the identifier. Also for example if a particular object is the first child object of a parent object then the particular object may be referenced and or retrieved using a pointer to the parent object and then retrieving a pointer to the first child object. A method of referencing objects by identifier and or relationships is called XPath. An object may be a particular type of object. For example one object may be a button another object may be an input or specifically a text field and another object may be an image.

An attribute may be data that identifies and or describes the appearance behavior and or content of an object. For example an attribute may be a unique identifier such as a name. An attribute may indicate that an object is a type of input such as a text field text area checkbox and or radio button. An attribute may indicate that an object is a password text field accordingly a client application rendering the text field object on a monitor need not cause the characters that are entered into the field object to be displayed. An attribute associated with the text field object may be updated to include the value entered in the text field. Other attributes may define or describe dimension position color visibility value and any other functional or visual aspect of an object.

A document object model DOM may be a cross platform and language independent representation of one or more objects that are interrelated. For example a DOM may represent one or more objects in an object tree and or hierarchy. An object within the hierarchy may be a parent object which has one or more child objects. A child object may also have one or more child objects.

 Creating updating and or removing an object may mean creating updating and or removing a data structure in memory that represents an object an object s attributes and or relationships between an object and one or more other objects because these processes directly or indirectly involve changing the state of registers or other structures in electronic digital memory circuits the processes necessarily involve using a computer to transform the state of tangible things.

An operation may be any function method script and or any other code which when executed operates on an object.

 Operating on an object may mean creating removing and or updating an object. Additionally operating on an object may mean performing one or more operations that use an object attribute and or relationship between an object and one or more other objects as input.

 Instructions may mean one or more codes that define one or more objects and or one or more operations. For example instructions may comprise HyperText Markup Language HTML eXtensible Markup Language XML cascading style sheets CSS JavaScript and or any other standard or proprietary languages or codes that define objects attributes relationships between objects and or operations.

 Performing instructions or executing instructions may mean creating one or more objects and or performing one or more operations defined by the instructions.

 Rendering instructions may mean generating one or more instructions based on objects and or operations stored in memory such that when the generated one or more instructions are executed the same objects and or same operations are created in memory.

A first object may be the same as a second object if the first object maintains the same one or more values attributes and or relationships as the second object. The underlying representation of the first object in memory need not be the same as the underlying representation of the second object in memory. For purposes of illustrating a clear example assume that a first program is allocated a first memory segment a second program is allocated a second segment the first program maintains a first object in the first memory segment the second program maintains a second object in the second memory segment the first object comprises a value six the second object comprises a value six. In this situation the first object and the second object may be the same object because the first object maintains the same value as the second object even though the first object and the second object are located in different memory segments.

If the value stored in the first memory segment is stored as an 8 bit integer and the value stored in the second memory segment is stored as an American Standard Code for Information Interchange ASCII string then the first object and the second object may be the same object because the first object maintains the same value as the second object even though the underlying representation of the value in the first memory segment is stored differently than the representation of the value in the second memory segment.

As another example assume that the first program is running on a first computer that comprises a 32 bit processor and addresses memory using 32 bit addresses the second program is running on a second computer that comprises a 64 bit processor and addresses memory using 64 bit addresses the first object is a parent object and comprises a pointer to a child object stored in the first memory segment the second object is a parent object and comprises a pointer to a child object stored in the second memory segment. In this situation the first object and the second object may be the same object because the first object maintains the same values and relationships as the second object even though the pointer to the child stored in the first memory segment may be a 32 bit pointer and the pointer in the second memory segment may be a 64 bit pointer.

If the first program stores the data that represents the first object contiguously in the first memory segment and the second program stores the data that represents the second object scattered throughout the second memory segment then the first object and the second object may be the same object even though the underlying data structure that represents the first object is stored differently than the underlying data structure that represents the second object.

Or for example assume the first program is a first HTTP browser the second program is a second different HTTP browser the first object may have an attribute id the second object may have an attribute id the value for the id attribute is MyObject for both the first object and the second object is. In this situation the underlying representation of the first object in the first browser may be drastically different than the underlying representation of the second object in the second browser. However the operations that operate on the two objects may be programmatically identical. For example the same JavaScript executed by the first HTTP browser and the second HTTP browser may retrieve the first object maintained by the first HTTP browser and the second object respectively document.getElementById MyObject .

Other factors that may result in a different underlying representation of the same object may include the endianness of a processor amount of memory available different applications and or any other different hardware and or software configurations.

An attribute map may be a map from one attribute name and or value to one or more other names and or values. For example assume an object has an attribute id which defines a unique identifier MyObject . An attribute map may associate MyObject with a different unique identifier such as tcejbOyM . Additionally an attribute map may be used to map a modified attribute name and or value to an original name and or value. An attribute map may be an operation hash map and or any other method or associative data structure.

A DOM map may be a map from a first DOM to a second different DOM. For example a DOM map may be a collection of attribute maps. Each attribute map in the DOM map may be an attribute map for an attribute of an object in a first DOM with a modified attribute in a second DOM. Additionally or alternatively a DOM map may map one hierarchy to another different hierarchy and back again. For example a DOM map may modify a relationship between a first object and a second object such that a first object is not related to a second object in a first DOM and the first object is a parent object to the second object in the second DOM.

A browser may be one or more computer programs or other software elements stored in electronic digital memory and running on a computer that receives instructions from a server computer performs one or more of the received instructions causes to display content provides a user interface UI to receive user inputs and or receives and responds to one or more inputs from a user based on or according to the one or more performed instructions. A browser and or components of a browser may be implemented into an application. For example a browser and or components of a browser may be implemented into a mobile application as part of a web view and or web view controller to send and or receive data over HTTP and or other protocol. A user may use a browser to send data to a server computer. The server computer may respond with additional instructions.

A headless browser may be a browser that does not cause visually displaying or rendering graphical images of objects that are defined in a set of received instructions according to the received set of instructions. Additionally or alternatively a headless browser may be a browser that does not respond to user inputs according to a set of received instructions.

 Sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using HyperText Transfer Protocol. Additionally or alternatively sending and or receiving data over HTTP may mean sending and or receiving data and or instructions using a subset of the HTTP such as secure HTTP HTTPS . Additionally or alternatively one or more other protocols may be used such as SPDY.

A web browser may be a browser that receives instructions comprising HTML CSS and or JavaScript over HTTP or some derivative thereof such as HTTPS.

A bot may mean a computer and or software executed by a computer that automates sending and or receiving data. For example a bot may be a web scraper web crawler automatic web browser and or any other tool designed to submit and or receive data from one or more web servers. A bot may comprise complex logic designed to respond to data received from one or more web servers.

In an embodiment performing one or more of the methods discussed herein may prevent and or reduce the effectiveness of one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities. For example if an intermediary computer intercepts an improper request from a visitor browser such as a request that does not include one or more identifiers that match one or more attribute map identifiers DOM map identifiers and or transaction identifiers then the intermediary computer need not reverse translate and or forward the improper request on to the targeted web server computer. Thus the targeted web server computer or an application running on the targeted web server computer need not be burdened with processing improper and or malicious requests that are part of an attack.

In an embodiment after an intermediary computer intercepts a request with a particular identifier based on a rendered set of instructions by the intermediary computer the particular identifier may no longer be valid. Accordingly if the same visitor browser and or a different visitor browser uses the same particular identifier in an additional request the intermediary computer need not reverse translate and or forward the improper request to the targeted web server computer. Thus the targeted web server computer or an application running on the targeted web server computer need not be affected by one or more attacks such as a DOS attack and or cross site request forgery.

In an embodiment each time a web page is requested such as an account creation page order page voting page and or other page from a web server computer the intermediary computer may modify the identifiers in the returned page. Thus a bot may receive a different set of instructions after each request and may not observe the same one or more field identifiers twice. Without receiving the same one or more identifiers the bot may be incapable of determining what data should be entered in and or associated with each field to create a fake account order and or reserve one or more goods or services vote inject malicious SQL and or submit any other malicious content.

In an embodiment the DOM hierarchy a portion of the DOM hierarchy and or one or more particular identifiers are modified each time a web page is requested. For example a container that stores the definition of a word or phrase may in the originally intercepted instructions be in a particular spot in the DOM hierarchy and or include a particular identifier definition . However the intermediary computer may manipulate the DOM hierarchy and or identifier each time the page or a similar page is served. Thus a bot may not be able to determine which container holds the target content. Furthermore an automated vulnerability bot may not be able to determine whether target content was inserted and or changed. For example if a bot submits content designed to employ SQL HTML JavaScript and or any other code injection the bot may not be able to determine which container is supposed to contain content generated by a successful attack.

In an embodiment a bot such as a website scraper may be whitelisted. If the bot includes a particular password or other code then the intermediary computer may send the original instructions and or a portion of the original instructions to the bot. Thus the intermediary computer may allow the authorized bot to perform an automated task on an entire page and or a portion of the page. Otherwise the intermediary computer may use one or more of the methods discussed herein.

In an embodiment a method comprises intercepting from a server computer a first set of instructions that define one or more objects and one or more operations that are based at least in part on the one or more objects generating in memory one or more data structures that correspond to the one or more objects performing the one or more operations on the one or more data structures updating the one or more data structures in response to performing the one or more operations to produce one or more updated data structures rendering a second set of instructions which when executed by a remote client computer cause the remote client computer to generate the one or more updated data structures in memory on the remote client computer wherein the second set of instructions are different than the first set of instructions sending the second set of instructions to the remote client computer.

In an embodiment wherein each object of the one or more objects includes an original identifier the method comprises generating a data structure for each object of the one or more objects wherein the data structure corresponds to the object and includes the original identifier included in the object updating the original identifier included in the data structure for each object to produce a modified identifier and a modified data structure of the one or more updated data structures.

In an embodiment the method comprises storing a mapping between the modified identifier and the original identifier for each object intercepting from the remote client computer a request that includes one or more modified identifiers determining the original identifier for each modified identifier included in the request replacing each modified identifier in the request with the original identifier to produce a modified request sending the modified request to the server computer.

In an embodiment a method comprises intercepting from a web server computer over HTTP an original HTML document a set of original CSS codes and a set of original JavaScript codes that define one or more objects in an original DOM and one or more operations that are based at least in part on the one or more objects in the original DOM generating one or more data structures that correspond with the one or more objects in the original DOM processing the set of original CSS codes and the set of original JavaScript codes on the one or more data structures updating the one or more data structures in response to processing the set of original CSS codes and the set of original JavaScript codes to produce one or more updated data structures rendering a modified HTML document a set of modified CSS codes and a set of modified JavaScript codes which when processed by a remote client computer cause the remote client computer to generate the one or more updated data structures in memory on the remote client computer wherein the modified HTML document defines a modified DOM that is different than the original DOM wherein the modified HTML document the set of modified CSS codes and the set of modified JavaScript codes are different than the original HTML document the set of original CSS codes and the set of original JavaScript codes generating a DOM mapping between the modified DOM and the original DOM storing the DOM mapping sending the modified HTML document the set of modified CSS codes and the set of modified JavaScript codes to the remote client computer intercepting from the remote client computer a request based on the modified DOM translating the request based at least in part on the DOM mapping to produce a translated request based on the original DOM sending the translated request to the web server computer.

Visitor browser may be a browser that is executed on visitor computer and operated by a user using visitor computer . For example visitor browser may be a web browser. illustrates a more detailed view of a web browser in an example embodiment. In this context visitor refers to any user who is using the computer to contact communicate with or otherwise conceptually visit the web infrastructure . Furthermore visitor browser may be described with reference to browser in but using the particular arrangement illustrated in is not required in other embodiments.

Referring now to browser includes browser backend browser frontend operating system OS system application programming interface API layer and OS frontend API layer .

Browser frontend comprises rendering engine interactivity module and user interface . Each of the components may cause through OS frontend API layer one or more objects to be presented and or updated visually and or audibly to a user using visitor computer .

Rendering engine may determine how objects are presented to a user. For example rendering engine may determine the color shape orientation position and or any other visual and or audio attribute of an image text field button and or any other object defined by a set of received instructions. Furthermore rendering engine may cause a button to be displayed on a monitor coupled to visitor computer through OS frontend API layer .

User interface may determine what may be presented to a user. For example user interface may determine that a submit button should be hidden until data has been entered in one or more text fields. After data has been entered in the one or more text fields user interface may notify rendering engine to render the submit button accordingly.

Interactivity module may receive one or more inputs through OS Frontend API layer . For example in response to a user pressing a button on a mouse coupled to visitor computer the operating system running on visitor computer may send a message to interactivity module through OS frontend API layer to indicate that a user pressed a button on a mouse. Interactivity module may determine that a user selected a particular button currently presented on a monitor. Interactively module may notify user interface and or rendering engine to update to update the UI accordingly.

Browser backend comprises protocol module domain name server DNS module local storage module image parser CSS parser HTML parser JavaScript parser extension execution environment document object model DOM module and JavaScript execution environment . Other embodiments may use other protocols modules and or parsers. A browser that includes a browser backend but does not include a browser frontend may be a headless browser.

Protocol module DNS module and local storage module may send and or receive data through OS System API layer . For example protocol module may send and or receive data over any protocol such as HTTP to from intermediary computer and or web infrastructure through OS system API layer . Data received through protocol module may reference data sources by one or more domain names. DNS module may resolve the one or more domain names referenced by interfacing with one or more remote domain name servers through OS system API layer . Local storage module may store and or recall data from memory through OS system API layer .

Image parser CSS Parser HTML parser and JavaScript parser may parse data received through protocol module . HTML parser may parse HTML data. CSS parser may parse CSS data. JavaScript parser may parse JavaScript data. Image parser may parse image data. Each parser may generate and or update objects in a DOM maintained by DOM module .

Browser backend may comprise one or more programmable engines such as extension execution environment and JavaScript execution environment . Extensions may be written one or more programming languages include JavaScript Python Ruby and or any other language. Each programmable engine may have access to DOM module and may operate on one or more objects from a DOM maintained by DOM module . For example JavaScript execution environment may execute JavaScript parsed by JavaScript parser and in response create update and or delete one or more objects managed by DOM module .

Referring again to web infrastructure may be one or more server computers that receive requests for data from users such as a user using visitor browser through intermediary computer . In response web infrastructure may send data to visitor browser through intermediary computer . As illustrated in the data sent from web infrastructure may include instructions HTML JavaScript and CSS .

Original web server computer may be a server computer that receives requests for data and responds with data. For example original web server computer may be an HTTP based web server that receives HTTP requests and responds with data comprising HTML CSS and or JavaScript instructions. Additionally or alternatively original web server computer may respond with data that references data on other server computers such as third party web server computers .

Third party web server computers may be one or more server computers that store additional data referenced by instructions sent from original web server computer . For example data from original web server computer may include a reference to a JavaScript file stored on third party web server computers . Accordingly a browser backend such as a browser backend may request the referenced JavaScript file from third party web server computers . Also for example data from original web server computer may include a reference to an image stored on third party web server computers . Accordingly a browser backend such as browser backend may request the referenced image from third party web server computers .

Returning now to intermediary computer may intercept instructions sent from web infrastructure generate new instructions and send the new instructions to visitor browser . For example intermediary computer may intercept HTML JavaScript and CSS generate HTML JavaScript and CSS which may be different than HTML JavaScript and CSS and send HTML JavaScript and CSS to visitor browser . Additionally intermediary computer may intercept a request from visitor browser generate a new modified request and send the new modified request to web infrastructure .

In intermediary computer may be an HTTP intermediary that intercepts and modifies HTML JavaScript CSS and HTTP requests for HTTP web browsers. However intermediary computer may be an intermediary for any other standard and or proprietary protocol. Furthermore each of the components discussed which intermediary computer is comprised of may be configured to perform any of the processes and or methods discussed herein for any standard and or proprietary protocol.

Intermediary computer may be a server computer that is located on the same network as web infrastructure . Additionally or alternatively intermediary computer may be topologically located between a public facing router and web infrastructure . Accordingly requests from visitor browser to web infrastructure may be passed through and or modified by intermediary computer . Furthermore instructions from web infrastructure to visitor browser may be passed through and or modified by intermediary computer . Additionally or alternatively intermediary computer may be a proxy server and or router. Additionally or alternatively intermediary computer and or components of intermediary computer may be a software layer executed on one or more computers in web infrastructure . Additionally or alternatively intermediary computer may be a server computer that one or more domain name servers list as a destination IP address. Accordingly intermediary computer may receive requests sent to the one or more domains from visitor browser . Based on the domain name in a request intermediary computer may forward the request or a modified request to a server computer in web infrastructure such as original web server computer .

Protocol client may intercept data over any standard or proprietary protocol. For example protocol client may intercept data over HTTP. Accordingly protocol client may be communicatively coupled with web infrastructure original web server computer and third party web server computers .

Browser backend may be an HTTP based headless browser similar to browser backend . Additionally or alternatively browser backend may be a headless browser based on one or more other standard and or proprietary protocols.

Browser backend may perform instructions intercepted by protocol client . After performing the instructions browser backend may notify forward translator to begin rendering instructions based on the objects created by browser backend that are currently in memory. Accordingly browser backend and forward translator may be communicatively coupled.

Browser backend may make requests for additional data. For example if instructions received from Protocol client reference additional instructions stored on a third party web server browser backend may request the additional instructions through protocol client . Accordingly browser backend and protocol client are communicatively coupled.

Forward translator may operate on the objects created by browser backend and generate one or more attribute maps and or DOM maps. Additionally or alternatively forward translator may render a new set of instructions based on the one or more objects and or operations in memory. Forward translator may operate on objects and or render instructions based on one or more configurations specified in configuration . Accordingly forward translator may be communicatively coupled to configuration . Forward translator may send the rendered instructions to protocol handler . Accordingly forward translator may be communicatively coupled to protocol handler .

Protocol handler may receive the instructions generated by forward translator and send the generated instructions to visitor browser . Additionally or alternatively protocol handler may intercept requests from visitor browser and forward the requests to transaction store . Accordingly protocol handler may be communicatively coupled to visitor browser forward translator and transaction store .

Transaction store may receive requests intercepted by protocol handler from visitor browser . Transaction store may retrieve one or more attribute maps and or DOM maps based on data in the request and forward the request with the retrieved one or more attribute maps and or DOM maps to reverse translator . Accordingly transaction store may be communicatively coupled with reverse translator .

Reverse translator may translate requests intercepted by protocol handler which are based on instructions generated by forward translator into requests that would have been generated by visitor browser had visitor browser received the original instructions sent from original web server computer . Reverse translator may translate requests based on the one or more attribute maps and or DOM maps retrieved by transaction store . Reverse translator may send the translated request to original web server computer through protocol client . Accordingly reverse translator may be communicatively coupled with protocol client .

In an embodiment a data processing method may be configured to intercept instructions from a server computer and generate new different instructions based on the intercepted instructions. In an embodiment a data processing method may be configured for caching new instructions intercepting client requests to a server computer translating the request to produce a new request and or sending the new request to a server computer. Various embodiments may use HTTP and or specialized web based instructions such as HTML CSS and or JavaScript and or standard and or proprietary protocol s and or instructions.

Turning now to step in an intermediary computer intercepts a first set of instructions from a remote server computer. For example protocol client may receive instructions from original web server computer in response to a request from visitor browser . The instructions may comprise HTML CSS and or JavaScript.

In step the intermediary computer generates one or more objects in memory based on the instructions. For example protocol client may send the HTML CSS and or JavaScript to browser backend . Browser backend may generate a DOM in memory containing objects defined in the instructions. illustrates objects and operations stored in memory by browser backend in an example embodiment. HTML parser may parse the HTML received by browser backend . Based on the parsed HTML DOM module may create DOM and objects in DOM object and object . Furthermore based on the parsed HTML DOM module may define object to be the parent object of object in DOM . Additionally one or more objects in DOM may comprise one or more attributes based on the parsed HTML.

In step the intermediary computer performs one or more instructions which operate on the objects. For purposes of illustrating a clear example assume object comprises an attribute that is a unique identifier. Also assume one or more CSS instructions identify object by its unique identifier and define one or more attributes to assign to and or associate with object . Accordingly CSS parser may parse the CSS received by browser backend . DOM module may create and or update other property information to include the one or more attributes defined in the CSS instructions. DOM module may associate other property information and or one or more attributes in other property information to object .

As an example the JavaScript instructions define one or more operations which when performed operate on one or more objects defined in the HTML instructions. One or more JavaScript instructions may indicate that the one or more operations may be performed after the objects defined in the HTML instructions are loaded in memory and or after the CSS instructions have been performed without additional user input. The JavaScript parser may parse the JavaScript received by browser backend . JavaScript execution environment may execute the one or more operations which operate on the one or more the objects one or more attributes of objects and or relationships between the objects in DOM .

Instructions performed after the objects defined in the HTML instructions are loaded in memory may drastically change the DOM and or the objects in the DOM. For example one or more JavaScript operations may change object to a different type of object. Also for example one or more JavaScript operations may create update and or delete object . Additionally or alternatively one or more JavaScript operations may create update and or delete data included and or associated with object . Additionally or alternatively one or more JavaScript operations may create update and or remove associations between objects. For example one or more JavaScript operations may associate object with object such that object may become a parent object of object as illustrated by the dashed line between object and object .

In step the intermediary computer associates one or more operations with one or more objects. As an example the JavaScript instructions may define an operation which when performed operate on one or more objects defined in DOM the operation references object by an identifier object is the second child of object object is a particular type of object which is different than the other objects that are children objects of object and one or more JavaScript instructions indicate that the operation may be performed upon some event such as a user selecting button and or entering an input.

JavaScript parser may parse the JavaScript received by browser backend which defines the operation. JavaScript parser DOM module and or JavaScript execution environment may generate JavaScript engine state info included in in memory data structures . JavaScript parser DOM module and or JavaScript execution environment may generate a representation of the operation that references object in JavaScript engine state info . The representation of the operation in JavaScript engine state info may include a cross reference to an identifier for object . Additionally or alternatively the representation of the operation in JavaScript engine state info may include a cross reference to an identifier for object based on the topology of object in DOM second child of object and or first child of object that is the particular type which is a different type than the type s of other child objects of object . JavaScript engine state info may include one or more other operations and or representations of one or more other operations.

In step the intermediary computer modifies one or more of the objects. For example forward translator may create update and or delete identifiers for one or more of the objects in DOM such as the names of the one or more objects. Forward translator may implement one or more methods to modify identifiers such as generating random identifiers.

In step the intermediary computer modifies one or more operations associated with the modified objects. For example forward translator may update the references in JavaScript engine state info to use the new identifiers from step .

In step the intermediary computer renders a second set of instructions based on the current state of the objects and operations. As discussed earlier the originally received instructions need not be HTML CSS and or JavaScript instructions. Furthermore the rendered instructions need not be HTML CSS and or JavaScript instructions. However for purposes of illustrating a clear example assume that the originally received instructions in step comprise HTML CSS and JavaScript instructions. Furthermore assume that forward translator is configured to generate HTML CSS and or JavaScript instructions. The forward translator may render instructions which when executed generate the same objects and or operations as currently existing in in memory data structures . However the rendered instructions may comprise different HTML CSS and or JavaScript codes that the originally receive HTML CSS and JavaScript instructions. For example the rendered instructions may use different identifiers for the objects defined in the rendered instructions than the original instructions.

Additionally or alternatively the original instructions may comprise HTML CSS and or JavaScript instructions and the rendered instructions may have one or more of the object attributes originally defined in the CSS instructions integrated into the HTML instructions and or the JavaScript instructions. Accordingly in an embodiment the rendered instructions may comprise HTML and JavaScript instructions but not CSS instructions. However the new rendered HTML and JavaScript instructions when executed may generate objects and or operations that are the same as the objects and or operations in in memory data structures when the new HTML and JavaScript instructions were rendered.

Additionally or alternatively the rendered instructions may comprise HTML and or CSS instruction that define fewer objects than defined in in memory data structures . However the rendered JavaScript instructions may define operations which when executed generate objects that were not defined in the rendered HTML and or CSS instructions. Therefore the new rendered HTML CSS and JavaScript instructions when executed may generate objects and or operations that are the same as the objects and or operations in in memory data structures when the new instructions were rendered.

Additionally or alternatively the rendered instructions may comprise one or more HTML documents which comprise the original CSS instructions and or JavaScript instructions embedded into the one or more HTML documents. Accordingly the new rendered HTML instructions when executed may generate objects and or operations as currently existing in in memory data structures when the new HTML instructions were rendered.

Additionally or alternatively the rendered CSS and or JavaScript instructions may reference objects by XPath commands instead of by one or more unique identifiers or vice versa. XPath commands may be used to identify objects in a DOM and or hierarchy by the topology of the DOM and or hierarchy. Accordingly the new rendered HTML CSS and JavaScript instructions when executed may generate objects and or operations that are the same as the objects and or operations in in memory data structures when the new instructions were rendered.

Additionally or alternatively the rendered HTML instructions may define objects in in memory data structures but without one or more attributes. However the rendered CSS instructions and or JavaScript instructions may define operations which when executed update the objects to include the missing attributes. Accordingly the new rendered HTML CSS and JavaScript instructions when executed may generate objects and or operations that are the same as the objects and or operations in in memory data structures when the new instructions were rendered.

Additionally or alternatively the rendered HTML instructions may define the objects in in memory data structures but in a different hierarchy such as the relationship between object and object is not defined. However the rendered JavaScript instructions may define operations which when executed may update and or re organize the relationships between the objects such that object is the parent object of object .

Additionally or alternatively the rendered instructions need not comprise the same programming language s scripting language s and or data interchange format s as the original instructions intercepted in step . For example the rendered instructions may comprise one or more other standard and or proprietary languages formats and or codes that are not included in the originally intercepted instructions Dynamic HTML XML eXtensible Stylesheet Language VBScript Lua YAML Ain t Markup Language YAML JavaScript Object Notation JSON shell script Java Ruby Python and or Lisp.

Additionally or alternatively the rendered instructions may reference the IP address and or domain name of intermediary computer . For example a link defined in the original instructions may include the IP address of original web server computer . Accordingly forward translator may replace the IP address of original web server computer with the address of intermediary computer . If a user selects the link through a user interface for example through visitor browser then a request may be sent to the IP address of intermediary computer instead of the IP address of original web server computer .

Forward translator may use configuration to determine which method s to use to perform step and or step . Accordingly one or more of the methods discussed herein alone or in combination may be a polymorphic protocol defined in configuration . Additionally or alternatively configuration may define which objects and or types of objects may be modified based on one or more of the methods discussed herein. Additionally or alternatively configuration may define which objects and or or types of objects need not be modified based on one or more of the methods discussed herein. Configuration may be a database a configuration file and or any other method of storing preferences. Configuration may store more than one configuration for one or more web servers in web infrastructure . Intermediary computer may select a configuration in configuration based on any number of factors. For example intermediary computer may select a configuration in configuration based on a domain associated with the server computer that the instructions were intercepted from. Additionally or alternatively intermediary computer may select a configuration in configuration based on a random variable seeded by time. Additionally or alternatively intermediary computer may select a configuration in configuration based on attributes and or properties of visitor browser . For example intermediary computer may select a configuration based on what types of instructions visitor browser is capable of interpreting and or processing.

In step the intermediary computer sends the rendered second set of instructions to the remote client computer. For example forward translator sends the rendered instructions to protocol handler . Protocol handler sends the rendered instructions to visitor browser which was the originally intended recipient of the data intercepted in step .

Intermediary computer may render different instructions each time it receives instructions from web infrastructure and or original web server computer regardless of whether the intercepted instructions are the same as a previous set of instructions. However rendering instructions may be processor and or memory intensive and take a substantial amount of time. Accordingly intermediary computer may cache instructions rendered by intermediary computer in data storage . In response to receiving the same instructions from web infrastructure and or original web server computer intermediary computer may send the rendered instructions already cached in data storage instead of re rendering the intercepted instructions. While intermediary computer may reduce its processing load by sending cached rendered instructions bots may be updated based on the cached rendered instructions. Accordingly intermediary computer may refresh the cached instructions periodically and or in response to one or more conditions.

Turning now to step in subsequent to rendering a set of instructions in response to intercepting an original set of instructions the intermediary computer may store the set of instructions. Additionally the intermediary computer may store a timestamp. For example forward translator may store a set of rendered instructions and a timestamp in data storage . Additionally intermediary computer or a component of therein may store a key associated with the stored rendered set of instructions. The key may be based on the original set of instructions received. For example the key may be based on a hashing algorithm using the original set of instructions as a parameter. Also for example the original set of instructions may include the key.

In step the intermediary computer intercepts a set of instructions from the server computer and determines that the cached rendered set of instructions is based on the newly intercepted instructions. For example browser backend may generate a new key based on the newly intercepted instruction. Browser backend may search the stored keys for a matching key. For purposes of illustrating a clear example assume that browser backend finds a matching key stored from step .

In step the intermediary computer determines whether one or more conditions trigger a new set of instructions to be rendered. For example the intermediary computer may determine that the time elapsed since the rendered instructions were stored is greater than a threshold amount. Browser backend may compare a current timestamp to the timestamp stored in data storage in step . In response to determining that the elapsed time is greater than a threshold control proceeds to step otherwise control proceeds to step . Additionally or alternatively the intermediary computer may determine that a particular subset of the intercepted instructions changed. In response to determining that the particular subset of the instructions has changed control may proceed to step otherwise control may proceed to step . The conditions under which intermediary computer may render a new different set of instructions may be stored in configuration .

In step the intermediary computer generates a new set of instructions that is different than the set of instructions previously stored. For example browser backend and or forward translator performs step through step and renders a new different set of instructions. Control then returns to step . For example forward translator may store the new set of rendered instructions and a current timestamp in data storage . Browser backend and or forward translator may associate the stored key with the new stored set of rendered instructions. Forward translator may but need not generate a new key.

In step the intermediary computer recalls and sends the stored set of instructions to the intended client computer. For example browser backend may instruct forward translator to send the previously stored set of rendered instructions to the intended client computer visitor browser .

4.3 Intercept a Request from a Client Computer and Translate the Request into a New Request Based on a Stored Mapping

Intermediary computer may intercept and modify requests from a client computer based on one or more stored attribute maps and or DOM maps. illustrates a process for intercepting and modifying a request based on one or more stored attribute maps and or DOM maps in an example embodiment. For purposes of illustrating a clear example may be described with reference to and or but using the particular arrangements illustrated in and or are not required in other embodiments. Turning now to step in an intermediary computer modifies identifiers of one or more objects defined in an intercepted original set of instructions. For purposes of illustrating a clear example assume that intermediary computer intercepted an original set of instructions from original web server computer to be sent to visitor browser browser backend generated in memory data structures based on the original set of instructions object has an attribute that is a unique identifier and forward translator translates an identifier of object identifier to ABC .

In step the intermediary computer stores one or more mappings between the original identifiers and the modified identifiers. Additionally or alternatively forward translator may store a transaction identifier. Forward translator may associate the transaction identifier with each mapping. The transaction identifier may be used to recall the mappings associated with the set of original instructions and or a rendered set of instructions. The transaction identifier may be a modified identifier such as the identifier of a form object in DOM . For purposes of illustrating a clear example assume that forward translator stores a mapping between and ABC in transaction store and or data storage and that forward translator generates a transaction identifier T1 and associates the transaction identifier T1 with the mapping between and ABC .

Accordingly forward translator may send the mapping between and ABC and the transaction identifier T1 to transaction store . Additionally or alternatively forward translator and or transaction store may store the mapping and the transaction identifier in data storage .

In step the intermediary computer sends the second set of instructions with the modified identifiers to the remote client computer. For purposes of illustrating a clear example assume forward translator renders a second set of instructions based on the current state of the data structures and the operations using one or more of the methods discussed herein. Accordingly forward translator may send the rendered second set of instructions to visitor browser through protocol handler .

In step the intermediary computer intercepts a request from a remote client computer to a server computer with the modified identifiers. For purposes of illustrating a clear example assume the following Visitor browser receives the rendered second set of instructions visitor browser executes the rendered second set of instructions and generates the same objects in memory as were stored in in memory data structures to render the second set of instructions visitor browser generates a user interface based on the objects in memory a user using visitor browser enters data into a field with an identifier ABC and selects a submit button through the user interface generated from the rendered second set of instructions and visitor browser sends a request to original web server computer with the identifier ABC data associated with ABC and the identifier T1 .

Accordingly intermediary computer may intercept the request. For example protocol handler may receive the request. Protocol handler may send the request to transaction store .

Additionally or alternatively if a request is received for which there is no stored attribute maps and or DOM maps then the intermediary computer may determine that the request is not an authorized request to be sent to original web server computer . Accordingly the intermediary computer may not forward the request to original web server computer for which the request was intended. Additionally or alternatively intermediary computer may return an error code such as HTTP error to the client computer that made the request. Additionally or alternatively intermediary computer may return a success code such as HTTP error to the client computer that made the request.

In step the intermediary computer modifies the request by replacing the modified identifiers with the original identifiers based on the mapping. For example based on the identifier T1 transaction store may recall the mapping between and ABC . Transaction store may send the request and the mapping between and ABC to reverse translator . Reverse translator may modify the request based on the mapping reverse translator may associate the data associated with identifier ABC in the request with identifier defined in the original set of instructions. Additionally or alternatively reverse translator may modify the request causing a response to the modified request from original web server computer to be sent to and intercepted by intermediary computer instead of visitor browser .

In step the intermediary computer sends a modified request to the server computer. For example reverse translator may send the modified request to original web server computer through protocol client . Original web server computer may send a set of instructions in response to the received request to visitor browser which in turn may be intercepted by intermediary computer .

The processes and methods discussed herein may be used for any protocol s and or type s of instructions. However to illustrate a clear example of one or more of the methods discussed above illustrates a process for intercepting instructions and requests between an HTTP server and an HTTP based web browser over HTTP in an example embodiment. For purposes of illustrating a clear example may be described with reference to and or but using the particular arrangements illustrated in and or are not required in other embodiments. Turning now to step in an intermediary computer intercepts HTML CSS and JavaScript from a web server computer over HTTP to a remote client computer running a web browser. For purposes of illustrating a clear example assume the following 

Visitor computer is a remote client computer that executes visitor browser which a web browser that receives and processes HTML CSS and or JavaScript instructions and sends requests over HTTP.

Visitor browser generates a DOM maintained in memory on visitor computer based on the received HTML CSS and or JavaScript instructions.

Visitor browser causes a user interface to be displayed on a monitor connected to visitor computer based on the DOM maintained in memory on visitor computer .

Intermediary computer is an in line computer between original web server computer and visitor computer such that all data sent and or received between original web server computer and visitor computer is sent and or received through intermediary computer .

In response to a request for data from a user through visitor browser original web server computer sends a first set of instructions comprising HTML CSS and JavaScript instructions.

The JavaScript instructions comprise a first function that references the object with an identifier attribute of and sets the value of the object to a key 12345 .

The JavaScript instructions comprise an instruction that causes the first function to be executed after each of the objects defined in the HTML have been loaded regardless of user interaction.

The JavaScript instructions comprise a second function that submits the value of the field identified as to original web server computer .

Accordingly intermediary computer through protocol client may receive the HTML CSS and JavaScript instructions intended to be sent to visitor computer . Protocol client may send the HTML CSS and JavaScript instructions to browser backend .

In step the intermediary computer generates one or more objects in memory from the intercepted HTML using a browser backend. For purposes of illustrating a clear example assume browser backend is a headless HTTP web browser backend that process HTML CSS and or JavaScript instructions and generates objects in memory based on the HTML CSS and JavaScript instructions received. Accordingly browser backend may generate object which represents a form with the identifier in DOM stored in in memory data structures from the received HTML instructions. Furthermore browser backend may generate object which represents an input with the identifier which is a child of object in DOM in memory data structures from the received HTML.

In step the intermediary computer associates attributes and operations defined in CSS and JavaScript instructions with the data structures. For example browser backend may generate other property information which comprises an attribute named width with a value 52px . Browser backend may associate the attribute named width with object . Also for example browser backend may generate JavaScript engine state info which comprises a representation of the first operation and a representation of the second operation. Browser backend may associate first operation and the second operation with object .

In step the intermediary computer updates the data structures based on one or more operations defined by the received CSS and JavaScript instructions. For example browser backend may store the attribute named width and the attribute s value in object . Also for example browser backend may perform the first operation represented in JavaScript engine state info . Accordingly object may include the value 12345 . Since no instruction indicates that the second operation should be executed after the objects defined in the HTML are loaded browser backend need not perform the second operation.

Since the CSS attribute name width has already been integrated into the associated object the attribute may be deleted from other property information . Similarly since the first operation has already been performed the representation of the first operation in JavaScript engine state info may be deleted. However for purposes of illustrating a clear example assume that attribute named width and the first operation have not been deleted.

In step the intermediary computer modifies one or more objects and generates a DOM mapping. For example forward translator may modify the identifier for object to ABC and the identifier for object to DEF to produce a modified DOM. Accordingly forward translator may generate a mapping from the original DOM to the modified DOM to produce a DOM mapping which includes two attribute mappings with ABC and with DEF .

Forward translator may select the new identifier ABC to be the transaction identifier for the DOM mapping. Forward translator may select the identifier ABC because it is the identifier of a form accordingly forward translator may associate all mappings of identifiers in the form with the transaction identifier ABC the mapping of with ABC and or the mapping of with DEF . Additionally or alternatively forward translator may generate a transaction identifier for each form and or link defined in the original and or modified DOM. Each mapping may be associated with each transaction identifier. Additionally or alternatively forward translator may select an identifier for any other reason as the transaction identifier. Additionally or alternatively forward translator may generate a transaction identifier that is not based on any identifier. Forward translator may store the DOM mapping in data storage and or transaction store .

In step the intermediary computer renders new HTML CSS and JavaScript instructions based on the current state of the objects in memory. For purposes of illustrating a clear example assume the following The rendered HTML comprises the following text the rendered CSS comprises the following text ABCwidth 52px the rendered JavaScript instructions comprise an operation that submits the value of the field identified as DEF to original web server computer .

In step the intermediary computer sends the rendered new HTML CSS and JavaScript instructions to the remote client computer. For example forward translator may send visitor browser the new HTML CSS and JavaScript instructions rendered in step through protocol handler over HTTP. Upon executing the new HTML CSS and JavaScript instructions visitor browser may generate the same objects and or operations in memory as existed in in memory data structures when the new instructions were rendered with the modified DOM.

In step the intermediary computer intercepts a request from the remote client computer based on the modified DOM. For purposes of illustrating a clear example assume the following The user using visitor computer input text into visitor browser which was associated with object DEF in visitor computer s memory the user using visitor computer selected a submit button which caused visitor browser to execute the operation defined by the rendered JavaScript instructions which submits a request that includes the value of the field identified as DEF associated with the identifier DEF the submitted request includes that associates the value of the field identified as DEF and or the identifier DEF with identifier ABC .

Accordingly protocol handler intercepts the request and sends the request to transaction store . Transaction store may recall the DOM mapping associated with ABC from transaction store and or data storage . Transaction store may send the DOM mapping and the request to reverse translator .

In step the intermediary computer translates the request based on the DOM mapping to produce a new translated request. For example reverse translator receives the request and the DOM mapping. Reverse translator translates the request into a new request based on the original DOM using the DOM mapping. Accordingly the new request may include the value from the received request associated with the identifier instead of identifier DEF . Additionally the new request may include data associating the value and or the identifier with the identifier . The new request may be the request visitor browser would have sent in response to the same user input in step had the original instructions not the modified instructions been sent to visitor browser .

In step the intermediary computer sends the translated request to the web server computer. For example reverse translator sends the translated new request to original web server computer through protocol client . Accordingly original web server computer may respond to the new request and respond with HTML CSS and or JavaScript instruction at which point intermediary computer may revisit step .

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Using the networked computer arrangements intermediary computer and or processing methods described herein security in client server data processing may be significantly increased. In particular the use of browser programs becomes significantly more secure. Forward translating and reverse translating techniques herein effectively permit obfuscating data field and or container identifiers and DOM modification for data that is financial personal or otherwise sensitive so that attackers cannot determine which fields and or containers in a web page include the sensitive data. Consequently one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities are frustrated because all fields and or containers appear to the attacker to be gibberish or at least cannot be identified as indicating credit card data bank account numbers personally identifying information confidential data sensitive data proprietary data and or other data.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

