---

title: Techniques to perform in-database computational programming
abstract: Various embodiments are generally directed to an apparatus and method for generating a general request having structures and information to perform an analytical calculation on data stored in a distributed database system and converting the structures and information of the general request to a compute request having a request format conforming to a query language used by the distributed database system. Various embodiments may also include sending the compute request to a node of the distributed database system and receiving a compute response from the node of the distributed database system, the compute response including a result set of the analytical calculation performed on data local to the node from an analytic container implemented by the node, the analytic container including an embedded process to replicate an execution environment hosted within the distributed database system used by a client application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128991&OS=09128991&RS=09128991
owner: SAS INSTITUTE, INC.
number: 09128991
owner_city: Cary
owner_country: US
publication_date: 20140304
---
This application is a continuation in part of U.S. patent application Ser. No. 13 438 724 filed on Apr. 3 2012 and claims priority to that date for all applicable subject matter.

When computation procedures are to be executed by a system that requires data stored in a database such as a foreign database the data is typically first read into a process space of the system before the system performs any requested computation s . Though computation in a system has been continually improved to increase performance the act of reading data e.g. from foreign databases into the system places a great overall time constraint in performing a requested operation.

When table sizes involved in computational programming become large e.g. in the hundreds of millions or even billions of observations the performance of data fetching as measured in response time as well as needed disk or memory space to store the data into an analysis session to execute a procedure may be very expensive or resource prohibitive. Moreover in many instances the computational results of the analysis procedure may be stored back into a table located on a foreign database. The act of writing the data back to the database can also be expensive when the results from the computation are large.

In conventional systems to execute a procedure the data is read from the database into an analysis session where computation is performed and results of the computation in many cases written back to the database from which the data was retrieved. This procedure is known as an outside the database model. To speed up the response time many procedures have been architected to operate using multiple operating system OS threads using symmetric multi processing SMP techniques. However the performance of SMP techniques does not eliminate or reduce the amount of data that must be transmitted across a network between a client application that performs the computation and the foreign database.

The following presents a simplified summary in order to provide a basic understanding of some novel embodiments described herein. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Various embodiments are generally directed to techniques to perform in database computational programming. In database computational programming may refer to techniques for co location of analytic code and data. Some embodiments are particularly directed to techniques to perform in database computational programming for distributed database systems in which each compute node of a distributed database system executes analytic code designed for computation on a different partition of data for a given work request. The analytic code exercises full control of analytical processes and full control of data access for a given compute node and uses data available to the compute node for data analysis. Furthermore the analytic code may be portable and designed to execute on any distributed database system or node of a distributed database system without any changes needed for the analytic code. In this manner the analytic code may be used with any distributed database system suitable for storing manipulating and managing massive data sets.

In one embodiment for example an apparatus may comprise a processor circuit and a client application operative on the processor circuit to generate a general request to perform an analytical calculation on data stored in a distributed database system based on a compute model where the client application uses a threaded kernel service layer. The apparatus may also comprise a compute request component operative on the processor circuit to convert the general request to a compute request having a request format used by the distributed database system and send the compute request to a node of the distributed database system having an analytic container. Other embodiments are described and claimed.

In another embodiment an apparatus may include a processor circuit a network interface coupled with the processor circuit and a client application operative on the processor circuit to generate a general request having structures and information to perform an analytical calculation on data stored in a distributed database system. The apparatus may also include a compute model component operative on the processor circuit to convert the structures and information of the general request to a compute request having a request format conforming to a query language used by the distributed database system and a compute request component operative on the processor circuit to send the compute request to a node of the distributed database system. In some embodiments the apparatus may comprise a compute response component operative on the processor circuit to receive a compute response from the node of the distributed database system the compute response including a result set of the analytical calculation performed on data local to the node from an analytic container implemented by the node the analytic container including an embedded process to replicate an execution environment hosted within the distributed database system used by the client application.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of the various ways in which the principles disclosed herein can be practiced and all aspects and equivalents thereof are intended to be within the scope of the claimed subject matter. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

Various embodiments are directed to performing computational programming and in particular to performing in database analytical calculations on data stored in a distributed database system. Some embodiments may execute the analytic calculations across massive data sets in an efficient manner by performing massive parallel processing MPP across multiple databases.

In particular embodiments may include techniques to provide a compute response to a compute request to perform an analytical calculation by a distributed database system. The compute request may originate from an application program outside of the distributed database system executed on a client device or on an application server in a cloud computing system. The compute response may include a result set of an analytical calculation performed on data that is local to a node of the distributed data system. The analytical calculation may be performed within an analytic container implemented by the node. The analytic container is specifically designed to provide a set of software services and components to allow execution of an embedded program within one or more nodes of the distributed database system in a machine independent manner. The embedded program is designed to perform analytic calculations in a manner similar to the application program outside of the distributed database system such as a statistical software program among others. This distributed architecture allows the application program and embedded program to operate in accordance with an in database model that is capable of working with a multiplicity of database systems. As a result the embodiments can improve affordability scalability modularity extendibility or interoperability for an operator device or network.

With general reference to notations and nomenclature used herein the detailed descriptions which follow may be presented in terms of program procedures executed on a computer or network of computers. These procedural descriptions and representations are used by those skilled in the art to most effectively convey the substance of their work to others skilled in the art.

A procedure is here and generally conceived to be a self consistent sequence of operations leading to a desired result. These operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated. It proves convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. It should be noted however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to those quantities.

Further the manipulations performed are often referred to in terms such as adding or comparing which are commonly associated with mental operations performed by a human operator. No such capability of a human operator is necessary or desirable in most cases in any of the operations described herein which form part of one or more embodiments. Rather the operations are machine operations. Useful machines for performing operations of various embodiments include general purpose digital computers or similar devices.

Various embodiments also relate to apparatus or systems for performing these operations. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer as selectively activated or reconfigured by a computer program stored in the computer. The procedures presented herein are not inherently related to a particular computer or other apparatus. Various general purpose machines may be used with programs written in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description given.

Reference is now made to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the novel embodiments can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof. The intention is to cover all modifications equivalents and alternatives consistent with the claimed subject matter.

In various embodiments the system may be implemented by one or more electronic devices each having computing and or communications capabilities. Example computing devices may include without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handset a one way pager a two way pager a messaging device a computer a personal computer PC a desktop computer a laptop computer a notebook computer a handheld computer a tablet computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a mainframe computer a supercomputer a network appliance a web appliance multiprocessor systems processor based systems or any combination thereof. The embodiments are not limited in this context.

In various embodiments components and or modules of the system and any electronic devices implementing some or all of the components and or modules of the system may be communicatively coupled via various types of communications media as indicated by various lines or arrows. The devices components and or modules may coordinate operations between each other. The coordination may involve the uni directional or bi directional exchange of information. For instance the devices components and or modules may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations each message is a signal. Further embodiments however may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections within a device include parallel interfaces serial interfaces and bus interfaces. Exemplary connections between devices may comprise network connections over a wired or wireless communications network.

In various embodiments the system may be implemented as part of a distributed system. A distributed system typically comprises multiple autonomous computers that communicate through a computer network. The computers interact with each other in order to achieve a common goal such as solving computational problems. For example a computational problem may be divided into many tasks each of which is solved by one computer. A computer program that runs in a distributed system is called a distributed program and distributed programming is the process of writing such programs. Examples of a distributed system may include without limitation a client server architecture a 3 tier architecture an N tier architecture a tightly coupled or clustered architecture a peer to peer architecture a master slave architecture a shared database architecture and other types of distributed systems. It is worthy to note that although some embodiments may utilize a distributed system when describing various enhanced interactive form techniques it may be appreciated that the enhanced interactive form techniques may be implemented by a single computing device as well. The embodiments are not limited in this context.

In various embodiments the system may be arranged to distribute a compute request sent from a client application to a distributed database system in a manner that allows the nodes of a distributed database system to perform the analytical calculation regardless of the format of the original compute request . In some embodiments a client device may include a processor circuit not shown and a client application that is operative on the processor circuit to generate a general request to perform an analytical calculation on data stored in a distributed database system based on a compute model where the client application using a threaded kernel service layer . The client device may also include a compute request component that is operative on the processor circuit to convert the general request to a compute request having a request format used by the distributed database system where the compute request component is also operative to send the compute request to a node of the distributed database system having an analytic container.

In particular the system may comprise a computer implemented system that includes client device . The client device may include several components including the client application and compute request component . In particular the client application may be generally arranged to perform analytical calculation based upon data stored in databases such as in a distributed database system. The client application may issue commands to manipulate and or retrieve stored data including issuing structured query language SQL commands queries to be forwarded to a node in a database where data is to be retrieved and manipulated.

The client application may comprise any application program that generally allows a user to accomplish one or more specific tasks. In various implementations the client application may provide a graphical user interface GUI to communicate information between the client application and a user via an output device such as an electronic display. Examples of client applications may include without limitation information technology IT management applications human resource management applications financial management applications business intelligence applications customer relationship management applications report generating applications statistical analysis applications business planning applications project management applications productivity applications word processing applications spreadsheet applications database applications and so forth. In one embodiment for example the client application may be implemented as one or more statistical computing programs such as one or more SAS software application programs made by SAS Institute Inc. Cary N.C. The embodiments however are not limited to these examples.

As illustrated in the client application may comprise a threaded kernel service layer . The threaded kernel service layer may be generally arranged to provide an array of portable services definitions data formats and drivers to support various analytical procedures and programming languages. One implementation of this layer may employ a fourth generation 4GL programming language such as a 4GL DS2 programming language in which the DS2 programming language may include basic program execution units or system methods including NIT RUN and TERM. In particular embodiments using the threaded kernel service layer a DS2 program can be written and deployed on each of multiple worker threads e.g. stored in a database table stored on the file system submitted as a character constant program string in an SQL query .

As illustrated in the client device may comprise a compute model component . The compute model component may be generally arranged to construct an in memory work request that is to be performed in a distributed database such as distributed database . The in memory work request may be initially generated as a general request and subsequently modified to a compute request as detailed below. For example the client application of client device may generate a general request to perform an analytical calculation which is processed by the compute model component to construct the in memory work request to be performed by one or more nodes in the distributed database system as detailed below with respect to .

The general request may be originally generated in a format native to the client application before being processed by the compute model component . A basic layout of a database specific request such as a SQL request may be modeled using a common generic set of structures to form a compute model. This allows a high percentage of the SQL to be portable and extended as the SQL language definition is extended. The compute model may define for example SQL text substitution for variables functions and language semantics. The client application may then generate a general request using the compute model without causing re writes of programming code when implementing the client application with a new database system.

The client device may also include a compute request component . The compute request component may be generally arranged to translate the basic structures and pseudo information of a general request into a compute request . In general a compute request is a database specific request for a given database that contains data to be processed. The database specific request may subsequently be submitted as a query to the given database.

A compute request may have a format suitable for a database system such as the distributed database system . The format may conform to any query language suitable for a given database system. In one embodiment for example the format may comprise a programming language designed for managing data in a relational database management system such as a SQL request. The SQL request may include SQL text with various structured information elements such as data insert query update and delete schema creation and modification data access control and so forth. Other query languages and formats may be used other than SQL including without limitation .QL fourth dimension 4D query language 4D QL datalog hypertext structured query language HTSQL IBM business system 12 information systems base language ISBL java persistence query language JPQL JoSQL object query language query by example QBE quel tutorial D stack based query language SBQL unstructured query language UnQL extensible markup language XML query XQuery JavaScript object notation JSON and so forth. The embodiments are not limited in this context.

In the illustration of the client device may further include a compute response component . The compute response component may be generally arranged to obtain from a database such as a distributed database system a compute response to a query e.g. compute request generated by the client device . The compute response component may be further arranged to place the query response into in memory structures to form a result set that is suitable for consumption by the client application . As additionally depicted in the client device includes a result set component that may provide a format for processing a result set received from analytical calculations provided by the distributed database system to generate the query response.

The client device may also include a network interface . The network interface may be generally arranged to forward queries generated by application to a database such as a compute request to the distributed database for processing. The network interface may also be arranged to receive a response from the distributed database system such as a compute response and forward the compute response to other components of client device for processing.

In various embodiments the compute model component and pseudo language the interface to the compute request component the interface to the compute response component and or the result set component may be constructed written as a portable interface which may facilitate support of the requirements of one or more client applications running on the client device . An advantage of this architecture is that the portable interface allows the system to support new databases without requiring that a client application such as the client application modify its compute model component to support the new database. In particular for a client device to support performing analytical calculations in a new database only the internal portions of the compute request component and the compute response component need be re written.

Turning now to the distributed database system shown in system of the distributed database system may be generally arranged to store data in multiple databases that are located in multiple nodes not shown of the distributed database system .

As shown by the example illustrated in the client device may generate a compute request which may be provided in a format used by the distributed database system . The compute request is sent via network interface to the distributed database system for processing. The distributed database system may then send a compute response that includes results of computation performed at one or more nodes of the distributed database where the compute response is in a format used by the distributed database system .

The compute response component of client device may then receive the compute response including a result set from the distributed database system and forward the received result set to the client application via the result set component . In particular the compute response component may place the compute response into in memory structures to form a result set that is suitable for consumption by the client application .

In various embodiments one or more client devices may access the components on the application server through an interface such as a web browser using one or more communication protocols such as transmission control protocol internet protocol TCP IP over any number of wired or wireless connections. Although the system shown in has a limited number of elements in a certain topology it may be appreciated that the system may include more or less elements in alternate topologies as desired for a given implementation. Moreover components and or modules of the system and any electronic devices implementing some or all of the components and or modules of the system may be communicatively coupled via various types of communications media as indicated by various lines or arrows.

In various embodiments system may also be arranged to distribute a compute request sent from the client application to a distributed database system in a manner that allows the nodes of a distributed database system to perform the analytical calculation regardless of the format of the original compute request . In some embodiments the application server may include a processor circuit not shown and the client application that is operative on the processor circuit may generate a general request to perform an analytical calculation on data stored in a distributed database system based on a compute model. Further the system may generate the general request without a threaded kernel service layer by the client application .

The general request may be originally generated in a format native to the client application before being processed by the compute model component . As previously discussed above a basic layout of a database specific request such as a SQL request may be modeled using a common generic set of structures to form a compute model. The compute model may define for example SQL text substitution for variables functions and language semantics. The client application may then generate a general request using the compute model without causing re writes of programming code when implementing the client application with a new database system.

In the same or other embodiments the database specific request may not be an SQL request but may be a java request such as a Hadoop map reduce request a HiveQL request a PIG language request and the NoSQL databases may be Cloudant CouchDB djondb ElasticSearch MongoDB and so forth. As similarly discussed above with respect to the SQL request a basic layout for the java request may also be modeled using a common set of structures to form a compute model. In these embodiments the compute model may define for example text substitution for variables functions including map and reduce and language semantics.

The application server may also include a compute request component that is operative on the processor circuit to convert or translate the general request to a compute request or database specific request having a request format used by the distributed database system . In addition the compute request component may be operative to send the compute request to a node of the distributed database system having an analytic container. For example the compute request component may generate a java request such as a map reduce request based on the general request and send the java request to a network interface on the distributed database for processing. In some embodiments the network interface may include a java based interface such as a Hadoop java interface to receive the java request. The java request may include text with various structured information elements such as data insert query update and delete schema creation and modification data access control and so forth. Further the java request may be sent to the network interface as one or more web service calls.

In the illustration the application server may further include a compute response component . The compute response component may be generally arranged to obtain from a database such as a distributed database system a compute response to a query e.g. compute request generated by the application server . In some embodiments the compute response may be received from the network interface of the distributed database system by the network interface of the application server . The network interface may include a java based interface such as the Hadoop java interface as previously discussed and the compute response may be a java result such as a map reduce result including a result set. In various embodiments the java based interface may communicate the java response to the application server via one or more web service calls.

Once the compute response is received the compute response component may be further arranged to place the query response into in memory structures to form a result set that is suitable for consumption by the client application . Further the application server may include a result set component that may provide a format for processing a result set received from analytical calculations provided by the distributed database system to generate the query response.

Similar to the client device of the application server may also include a network interface . The network interface may be generally arranged to forward queries generated by client application to a database such as a compute request to the distributed database for processing. The network interface may also be arranged to receive a response from the distributed database system such as a compute response and forward the compute response to other components of client device for processing.

In some embodiments the compute model component and pseudo language the interface to the compute request component the interface to the compute response component and or the result set component of the application server may be constructed written as a portable interface which may facilitate support of the requirements of one or more client applications running on the application server . An advantage of this architecture is that the portable interface allows the system to support new databases without requiring that a client application such as the client application to modify its compute model component to support the new database.

Turning now to the distributed database system shown in system of the distributed database system may be the same or similar to the distributed database system of . Moreover the distributed database of may store data in multiple databases that are located in multiple nodes may receive compute request and may send compute responses . In some embodiments the distributed database system may also include a network interface including a REST API for receiving compute requests and sending compute responses .

In particular the compute request is sent via network interface for processing. The distributed database system may then send a compute response that includes results of computation performed at one or more nodes of the distributed database where the compute response is in a format used by the distributed database system .

In various embodiments one or more of the components of distributed database system may be collocated including the client device control node and one or more worker nodes . However more generally none of the components of distributed database system need be collocated. Moreover in some embodiments more than one node of the distributed database system may be arranged to assume the role of the control node. Thus in some scenarios the component designated as control node may assume the role of a worker node while one of the worker nodes to may assume the role of the control node.

In various embodiments in operation a query request received by control node may be received as a compute request as described above with respect to . For example the client device may generate a general request to perform an analytical calculation which is processed by the compute model component to construct an in memory work request to be performed by one or more worker nodes . Subsequently the compute request component may generate a compute request by translating the basic structures and pseudo information of the general request into database specific SQL text that is appropriate for the worker nodes to of the distributed database system . The database specific SQL text may subsequently be transmitted over interface as the compute request .

In particular embodiments the general request generated by client device may be received with a name for the distributed database system to process the general request. Accordingly when the distributed database system is designated the compute request is transmitted to control node .

Consistent with the present embodiments when the control node receives a compute request sent from the client device the control node may unpack the compute request parse the compute request and establish a flow of execution steps to perform an operation such as an analytical calculation using one or more worker nodes of the distributed database system .

As illustrated in the distributed database system may further include a communication protocol such as the message passing interface MPI . When the control node establishes a flow of execution for a compute request the control node may distribute the execution steps to worker nodes to via the message passing interface . Subsequently results may be returned from one or more worker nodes to to the control node via the message passing interface .

In various embodiments each of multiple worker nodes to may contain a respective partition of data to be processed according to the compute request. The control node may establish an execution flow in which messages are sent to multiple different worker nodes to . Each worker node to may subsequently load and execute a specified compute function for the partition of data contained by that worker node.

When each of the worker nodes to that receives a message to execute a compute function from control node completes execution of its specified compute function on its partition of data the worker node may return results to the control node through the message passing interface . The results may subsequently be returned from the control node to the client device that generated the compute request.

Although illustrates a distributed database network that comprises a control node and multiple worker nodes more general embodiments include any network in which an interface is provided so that a client device may initiate the execution of a compute request within a group of foreign machines utilize resources of the foreign machines including memory input output functionality loading of images launching of threads and or utilize a distributed database structure to send and receive message instructions and results.

As shown in the analytic container may be provided with several components. In the illustrated embodiment shown in analytic container may include a user defined function UDF . The UDF may provide a mechanism for an application program such as the client application to transfer data to or receive data from the data stores of the distributed database system in which the analytic container is deployed.

The user defined function may include an embedded process that may be executed by the user defined function . The embedded process may generally replicate an execution environment hosted within the distributed database system that is similar to an execution environment used by the client application .

The client application may be an application program that is specifically designed to work on a computing platform having a defined set of software and hardware components. For instance the client application may utilize a specific operating system OS to manage computer hardware resources and provide common services for executing the client application . The OS may comprise a real time OS a multi user OS a multi tasking or multi thread OS a distributed OS an embedded OS and so forth. The components of an OS all exist in order to make different parts of a computer work together. The client application needs to go through the OS in order to use any hardware resources whether it is receiving control directives from an input device allocating memory scheduling processing threads for a processor or establishing a network connection. For instance an OS includes a kernel that with the aid of firmware and device drivers provides a basic level of control over all computer hardware. In another example an OS provides an interface between application programs and computer hardware so that an application program can interact with the hardware by obeying rules and procedures programmed into the OS. As such the client application and the OS utilized by the client application are normally tightly coupled and integrated with each other.

This tight integration becomes problematic when attempting to move the client application or portions of the client application between computing platforms. This often requires the client application to be re written in order to execute on a different computing platform or in a networked environment working with a different computing platform such as the distributed database system . Conventional solutions include coding an interface with a set of custom APIs designed for the distributed database system . This is expensive and time consuming. Another solution is to re code portions of the client application for execution on the distributed database system . However this may be even more costly and time consuming given the highly specialized nature of the client application . For instance the client application may include software components specifically designed for sophisticated and complex analytical calculations. Another solution is to code the client application using some form of machine independent programming language capable of execution on multiple computing platforms. Again this is suitable for simple programs and is extremely difficult for larger application programs with complex software components designed for specialized tasks.

The embedded process attempts to solve these and other problems by providing a set of software components mimicking an execution environment for the client application . This allows the client application or portions of the client application to be executed using an in database model. In one embodiment the embedded process may comprise or be implemented as a virtual machine. In general a virtual machine is a completely isolated guest operating system installation within a normal host operating system. The virtual machine may be implemented with either software emulation hardware virtualization or a combination of both. The virtual machine may further be designed to provide a system platform which supports execution of a complete OS or a process virtual machine designed to execute a single program process or thread. In one embodiment the embedded process may be a virtual machine specifically designed to execute portions of the client application . These portions may include for example components designed to perform complex analytical calculations.

The analytic container may include one or more embedded database programs which may be a component of the embedded process or arranged to be executed by the embedded process . An embedded database program is an independent software program designed to replicate a portion of the client application . In one embodiment the client application may comprise special purpose statistical software for statistical analysis having software components designed to perform complex analytical calculations. In this case the embedded database program may replicate a portion of the client application specifically designed to perform the analytical calculations. Analytical calculations may generally comprise any calculations that are computationally intensive or require complex mathematical operations such as statistical calculations inferential statistics or descriptive statistical calculations. The statistical calculations may be designed to support different classes of statistical calculations including linear models non linear models e.g. neural networks generalized linear models multilevel models and so forth. Examples of analytical calculations may include without limitation statistical model calculations e.g. probability distribution function probability density function etc. linear model calculations non linear model calculations generalized linear model calculations multilevel model calculations X X coefficient of determination R analysis of variance calculations Chi squared test calculations correlation calculations factor analysis calculations Mann Whitney U calculations mean square weighted deviation calculations regression analysis calculations Spearman s rank correlation coefficient calculations student s t test calculations time series analysis calculations goodness of fit calculations fraction of variance calculations Pearson product moment correlation coefficient Nash Sutcliffe model efficiency coefficient simple regression calculations multiple regression calculations regression model validation calculations proportional reduction in loss calculations root mean square deviation calculations multiple correlation calculations and so forth. The embodiments are not limited in this context.

An embedded database program replicating portions of the client application may be written in any suitable programming language as desired for a given implementation. In various embodiments an embedded database program may be written in a programming language matching the programming language used for the client application or interoperable with the programming language used for the client application . In one embodiment for example a client application may be written in a SAS programming language such as a BASE SAS programming language. In one embodiment an embedded database program may be written in a SAS programming language such as a SAS DS2 programming language as defined in SAS 9.3 DS2 Language Reference July 2011 and its progeny revisions and variants. The DS2 programming language is a SAS proprietary programming language appropriate for both advanced data manipulation and data modeling applications. The syntax of the DS2 language intersects with the SAS DATA step and also includes additional data types American National Standards Institute ANSI SQL types programming structure elements and user defined methods and packages. In addition the DS2 SET statement has been enhanced to accept ANSI SQL 1999. This allows SQL preprocessing of input tables which effectively combines the power of the two languages. The embodiments are not limited to DS2 and other programming languages may be used as desired for a given implementation.

In various embodiments in order to execute an analytic calculation in response to a compute request one or more nodes of a distributed database system such as one or more of the worker nodes to may each implement an instantiation of the analytic container to perform an individual set of analytic calculations on data local to that worker node . The results of the analytic calculations may then be returned from the individual nodes as a group of result sets that are sent to a client device that originally generated the compute request .

Referring also to in some embodiments the compute response component of a client device may then receive the compute response from the distributed database system where the compute response includes a result set from the analytic container of the node s of the distributed database system that were used to perform the analytic calculation. The compute response component may forward the received compute response to the client application via the result set component .

In some embodiments the user defined function of an analytic container may execute the embedded process where the embedded process includes a threaded kernel service layer that matches the threaded kernel service layer used by the client application that generated a compute request to be executed by the analytic container . In particular the client application may employ the threaded kernel services layer to obtain and use machine resources and database resources.

In a particular embodiment the embedded database program of the user defined function may use a threaded kernel service layer that matches the threaded kernel service layer of the client application that generated a compute request to be executed by the analytic container . In one example the embedded database program is coded in the same programming language as the client application generating the compute request .

In operation in order for a client application to generate a compute request for execution by an analytic container the name of the embedded database program to be executed may be provided as part of the compute request . For example in an embodiment the compute request component may be operative to construct an input select list for a compute request . The compute request component may be further operative to construct an output select list based on a format for the result set for the compute request . In addition the compute request component may be operative to pass a name of an embedded database program that is arranged to use a threaded kernel service layer matching the threaded kernel service layer used by the client application .

To perform an analytic calculation in the distributed database system when a UDF such as a table based UDF is invoked on a worker node the UDF may then load and boot the threaded kernel service layer specified by the compute request to match that of the client application . For example a DS2 program may be written and deployed on each of the analytic containers of the worker nodes e.g. stored in a database table stored on the file system submitted as a character constant program string in the SQL query . In some embodiments the analytic calculation may be based upon an intermediate program variable used during the analytic calculation such as loop control variables internal arrays or retained variables between observations as created and used in the DS2 program.

In a further embodiment the compute request component of the client device may be operative to publish an embedded database program such as embedded database program that is arranged to use a threaded kernel service layer matching the threaded kernel service layer used by the client application to the analytic container . In addition to publishing the embedded database program in other embodiments the client device may publish meta information associated with the embedded database program . In some embodiments a ModelMetadata field may be employed to publish meta information used by the DS2 programs during execution in the analytic container which may include DS2 programs for a variety of different industries. In other embodiments published meta data may involve a list of words that are associated with a text miner program that is operable to run in the analytic container . In still other embodiments the published meta data may be meta data associated with a data mining program.

In accordance with various embodiments the user defined function may be table based such that the UDF operates over all records of the table. Thus in response to a compute request an instance of the user defined function may be launched on multiple worker nodes that each implement an analytic container . Because each of the multiple worker nodes that each implement an analytic container may read a different partition of data the launching of the UDF may implement parallel execution across the entire table. Each result set generated by a different analytic container may be provided in parallel as a compute response to a control node that forwards the result sets to the client application that generated the compute request . In some embodiments the result set provided by one node are assembled together with other result sets received with other compute responses generated by other nodes.

The EPJ component may provide a mechanism for an application program such as the client application to transfer data to or receive data from the data stores of the distributed database system in which the analytic container is deployed. As will be discussed in more detail below in the EPJ component may be utilized by a map reducer process to perform an analytical calculation based on a compute request. Moreover the EPJ component may receive information such as input rows from a mapper component and initiate or invoke the embedded process the embedded program and the threaded kernel service layer to process the information. In addition the EPJ component may provide the processed information to a reducer component to perform post processing including finalizing the rows to form a compute response. In some embodiments analytical calculations may be chained together or compute in series such that the output of the reducer component may be the input of a second or next mapper component to perform a second calculation. This process may be repeated for any number of calculations based on the compute request.

Moreover the embedded process the embedded database program and threaded kernel service layer of analytic container may provide similar functionality as previously discussed. The embedded process may include the embedded database program and the threaded kernel service layer and may include an execution environment hosted within the distributed database system to process the compute request. Further the embedded database program of analytic container may also replicate a portion of the client application as previously discussed and the threaded kernel service layer may be generally arranged to provide an array of portable services definitions data formats and drivers to support various analytical procedures and programming languages.

In some embodiments the analytic container may be used in a cloud based computing architecture as similar discussed above with respect to . In these or other embodiments a client application may not include a threaded kernel service layer. Thus the threaded kernel service layer may be predetermined or predefined. For example a DS2 program may be written and deployed on each of the analytic containers of the worker nodes and may be utilized to process a compute request .

In the example illustrated in a compute request may be divided into two sub requests a sub request which is forwarded to the worker node and a compute sub request which is forwarded to the worker node . Each of the different compute sub requests may require a different partition of data to be processed. Once each worker node receives the compute sub request respectively the worker nodes may each execute its analytic container to perform its analytic calculation. For example the worker node may read a first partition of data from the data store to execute an analytic calculation in response to the compute sub request . Likewise the worker node may read a second partition of data from the data store to execute an analytic calculation in response to the compute sub request . In this manner parallel analytic computations may be performed in the worker nodes and worker node in response to the original compute request .

Although the illustration in depicts parallel execution of only two different sub requests in various embodiments any number of different worker nodes of a distributed database system may process respective compute sub requests where each worker node processes a different compute sub request 

Although the illustration in depict parallel execution of only two different sub requests and generation of two compute sub responses respectively it may be appreciated that any number of different worker nodes of a distributed database system may process respective sub requests where each worker node processes a different sub request and generates a concomitant sub response.

As further illustrated in the compute response may form a query result set that is received by the client device that generated the compute request . Referring also to when the compute response is received by the client device the compute response component may place the compute response into a group of in memory structures to form a result set that is suitable for consumption by the client device . If the compute response is in a format native to the worker nodes the compute response component may then repackage the compute response as a result set in the format of the client application of client device . Subsequently the client device may employ the interface of the result set component to access the data of the compute response.

One advantage of the embodiments set forth above with respect to is that the same type of analytic calculations that are performed in a client application of a client device can be implemented in a distributed database system such as a foreign database s which may execute the analytic calculations in an efficient manner by performing massive parallel processing MPP across multiple databases. Furthermore the client application need not acquire knowledge of the result set format for every database that is accessed to perform analytic calculations. Instead the compute response component may repackage a compute response received in a native database format into a format of the client application .

In further embodiments the system may include an open database interface to receive the compute response from a node of the distributed database system . The open database interface may be arranged to facilitate the ability of the client application to query data from a distributed database network regardless of the operating system or database management system employed. The open database interface may comprise an application programming interface API that many applications can use to access structured query language SQL databases over a distributed database system .

In various additional embodiments a worker node of a distributed database system may contain a database node and a grid enabled software component GESC node. depicts an embodiment of a distributed database system that illustrates one database worker node of the distributed database system . The database worker node includes a database node and a GESC node .

In various embodiments the database node may generally include the components of worker nodes illustrated in while the GESC node includes a GESC and buffer . The GESC may execute on a data processor associated with the worker nodes of the distributed database system via a network that may include a message passing interface such as MPI . In general each GESC may engage in point to point communication with the GESC at another worker node or control node or in collective communication with multiple GESCs via a network not shown . The GESC at each node in distributed database system may contain identical software instructions and each node in the distributed data database system may be capable of operating as either a control node or a worker node. In particular the GESC at a control node of the distributed data database system may be operable to communicate with a client application such as the client application .

In the example illustrated in in operation during an analytical calculation an input data field may be transmitted into the UDF of database node according to conventional DBMS specifications. Once the calculations are performed using data from the data store the results may be stored into the buffer . A socket between the database node and GESC node may be used to synchronize the read and writing of the buffered data. Consistent with the embodiment of the embedded process may be used to execute any required threaded kernel extension TKE including a DS2 program or other language or TKE algorithm where a threaded kernel extension denotes a routine added to the kernel. The arrangement of distributed database system as shown in facilitates using a portable program such as a portable DS2 program to perform an analytical calculation over a partitioned table such that the results may be fed to a later staged along side the database analytical calculation.

The device may comprise any electronic device capable of receiving processing and sending information for the system . Examples of an electronic device may include without limitation an ultra mobile device a mobile device a personal digital assistant PDA a mobile computing device a smart phone a telephone a digital telephone a cellular telephone ebook readers a handset a one way pager a two way pager a messaging device a computer a personal computer PC a desktop computer a laptop computer a notebook computer a netbook computer a handheld computer a tablet computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems consumer electronics programmable consumer electronics game devices television digital television set top box wireless access point base station subscriber station mobile subscriber center radio network controller router hub gateway bridge switch machine or combination thereof. The embodiments are not limited in this context.

The device may execute processing operations or logic for the system using a processing component . The processing component may comprise various hardware elements software elements or a combination of both. Examples of hardware elements may include devices logic devices components processors microprocessors circuits processor circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA memory units logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs software development programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

The device may execute communications operations or logic for the system using communications component . The communications component may implement any well known communications techniques and protocols such as techniques suitable for use with packet switched networks e.g. public networks such as the Internet private networks such as an enterprise intranet and so forth circuit switched networks e.g. the public switched telephone network or a combination of packet switched networks and circuit switched networks with suitable gateways and translators . The communications component may include various types of standard communication elements such as one or more communications interfaces network interfaces network interface cards NIC radios wireless transmitters receivers transceivers wired and or wireless communication media physical connectors and so forth. By way of example and not limitation communication media include wired communications media and wireless communications media. Examples of wired communications media may include a wire cable metal leads printed circuit boards PCB backplanes switch fabrics semiconductor material twisted pair wire co axial cable fiber optics a propagated signal and so forth. Examples of wireless communications media may include acoustic radio frequency RF spectrum infrared and other wireless media.

The device may communicate with other devices over a communications media respectively using communications signals respectively via the communications component . The devices may be internal or external to the device as desired for a given implementation. For example the devices may include servers routers or other components in a network that links the client device to database nodes such as control node and worker nodes in a distributed database system . The embodiments are not limited in this context.

The distributed system may comprise a client device and a server device . In general the client device may be the same or similar to the client device as described with reference to . In various embodiments the client system and the server system may each comprise a processing component and a communications component which are the same or similar to the processing component and the communications component respectively as described with reference to . In another example the devices may communicate over a communications media using communications signals via the communications components .

The client device may comprise or employ one or more client applications that operate to perform various methodologies in accordance with the described embodiments. In one embodiment for example the client device may implement the client application to direct a distributed database to perform analytical calculations.

The server device may comprise or employ one or more server programs that operate to perform various methodologies in accordance with the described embodiments. In one embodiment for example the server device may implement the analytic container to perform analytical calculation in a distributed database system including the generation of a compute response to a compute request received from the client device .

Included herein is a set of flow charts representative of exemplary methodologies for performing novel aspects of the disclosed architecture. While for purposes of simplicity of explanation the one or more methodologies shown herein for example in the form of a flow chart or flow diagram are shown and described as a series of acts it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts may in accordance therewith occur in a different order and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all acts illustrated in a methodology may be required for a novel implementation.

In the illustrated embodiment shown in the logic flow includes a block in which a general request is generated to perform an analytical calculation on data stored in a distributed database system comprising a control node and multiple worker nodes where the general request is generated by a client application using a threaded kernel service layer. For example the client application of the client device may send a general request to the compute model component using the threaded kernel service layer .

The logic flow may continue at block where the general request is converted to a compute request having a request format used by the distributed database system. For example the compute request component may receive a general request from the compute model component in a format of the client application . The compute request component may then generate a compute request such as compute request which has the format specifically used by the distributed database system such as a SQL request.

The logic flow may proceed to block where a compute request is sent to a node of the distributed database system. For example the compute request may be forwarded from client device to the control node of distributed database system and then to a worker node to of the distributed database system . In one specific example the compute request may be provided as compute sub requests to respective worker nodes .

The logic flow may proceed to block in which a compute response is received from the node of the distributed database system where the compute response includes a result set of the analytical calculation performed on data local to the node from an analytic container implemented by the node. For example the worker nodes which each include an analytical container may generate respective compute sub responses that are received by control node and forwarded as compute response to be received by client device . The compute response may include results of the analytical computation and may be returned through an open database interface. The open database interface may comprise an API that many applications can use to access SQL databases over a distributed database network. The client application can then decide whether to insert the results back into its internal memory structures and continue processing write the results to a file of some known format or data schema or leave the results in the database as a new table.

The logic flow may proceed to block where a determination is made as to whether the general request is invoking a database to perform an analytic calculation. For example if the libname DB does not point to a database the client application determines that no database is to be invoked to perform analytic calculation and the logic flow proceeds to block .

At block the client performs an analytical calculation. For example a client application of client device may generate a general request that is to execute an analytic calculation in the client device itself. The client application then may read data from a database and perform the analytic calculation on the read data. The logic flow then proceeds to block .

At block the results processing of the analytic calculation takes place. The client application may generate for example 

If at block a determination is made that the general request points to a database the logic flow moves to block . At block a determination is made as to whether the specified database includes an embedded process operable to perform an in database analytic calculation according to the general request. If not the logic flow returns to the block .

If at block it is determined that the specified database does include an embedded process to perform an in database analytic calculation the logic flow proceeds to block .

At block a determination is made as to whether the database includes an embedded database program to execute the analytical calculation. If so the logic flow moves to block . At block the general request is converted into a compute request. For example a general request generated by the client application may be forwarded to the compute request component if the database designated in the general request includes the appropriate embedded database program to execute the general request. The compute request component may accordingly generate a compute request .

If at block a determination is made as that the database does not include an embedded database program to execute the analytical calculation the logic flow proceeds first to block before proceeding to block . At block an embedded database program may be published together with any metadata associated with the embedded database program. The embedded database program metadata may be published to an analytic container where it is executed to perform the analytic calculation. Subsequently the logic flow moves to block where the general request is converted to a compute request.

After block the logic flow moves to block where a compute response is sent from the database that executed the analytical calculation. The logic flow then proceeds to block where the compute response is received by the client device that generated the compute request. The logic flow then proceeds to block before terminating.

The logic flow then proceeds to block where a determination is made as to whether the embedded database program to perform the analytical calculation uses a format of the client application that generated the compute request. If not the logic flow proceeds to block .

At block the format s of the embedded database program to be used to perform the analytical calculation is converted. For example the embedded database program format may be converted from a catalogue based object into an extensible markup language XML character string.

If at block the format of the embedded database program is the same as that of the client application the logic flow moves to block . At block a database table is created. For example the database table may be created using SQL.

The logic flow then proceeds to block . At block the embedded database program and formats are transcoded. In one example an embedded DS2 program is transcoded and an XML received from a client session character encoding is formatted into a unicode transformation format UTF that is expected by the client application including without limitation UTF 1 UTF 7 UTF 8 UTF 16 UTF 32 and so forth. In one embodiment the received XML is formatted into a UTF 8 encoding which is a variable width encoding that can represent every character in the unicode character set.

The logic flow then moves to block where the embedded database program is inserted. For example an embedded DS2 program may be inserted and the XML may be formatted as blobs or clobs as one or more records into the publish table using SQL.

As illustrated the logic flow includes the block where a general request is received. The logic flow then proceeds to block where an input select list is constructed. In one example the input select list may be constructed on the basis of a DATA WHERE clause and the proc statements.

In various embodiments a general request may describe an input select in one of three ways. First a general request may include a text object containing SQL like SELECT statement syntax. It can contain specific semantics for table and column names. For example these may include TBLint table name TALint table alias name COLint column name CALint column alias name and TCRint table.column name. The term int refers to a unique integer number to identify a specific object. Second a general request may include a table object representing the input table. This is converted into a SQL select from table string. Third a general request may include various defined objects that model an input select. The defined objects may model the SELECT statement with defined objects suitable for placement on a source list input table from a procedure DATA semantic a select list input columns made known to the embedded database program a group by list input to the embedded database program can be grouped an order by list input to the embedded database program can be ordered a where clause input to the embedded database program can be pre filtered and a having clause input to the embedded database program can be post filtered.

The logic flow then proceeds to block where an output select list is constructed. The output select list may be constructed based on a program output such as a DS2 program output for an embedded program that is to perform the analytical calculation specified in the general request. In some cases the output columns of an output select list of a DS2 program can differ in number by name and by type from the input select depending on the analytic calculation.

In one embodiment a general request may describe an output select using various defined objects. The defined objects may model the SELECT statement with defined objects suitable for placement on a select list output columns projected back from the embedded database program a group by list results from the embedded database program can be grouped an order by list results from the embedded database program can be ordered a where clause results from the embedded database program can be pre filtered and a having clause results from the embedded database program can be post filtered.

The logic flow then proceeds to block where the embedded database program name is passed. For example in DS2 programs every published DS2 program is named. The program name associated with the desired analytical calculation may be passed to an SQL based compute request in one example.

In the illustrated embodiment shown in the logic flow includes a block in which a compute request is received to perform an analytical calculation on data stored in a distributed database system comprising a control node and multiple worker nodes where the compute request received is received from a client application using a threaded kernel service layer. In one example one or more worker nodes of distributed database system may each receive a compute sub request generated from a compute request sent by the client device where the client device employs the threaded kernel service layer .

The logic flow then proceeds to block . At the block an embedded process is executed in an analytic container on a node of the distributed database system where the embedded process comprises a threaded kernel service layer matching the threaded kernel service layer used by the client application. For example a node may include an analytic container that executes the embedded process where the embedded process includes a threaded kernel service layer that matches the threaded kernel service layer used by the client application that generated the compute request to be executed by the analytic container .

The logic flow then proceeds to block . At the block an embedded database program is executed by the embedded process on a worker node using the threaded kernel service layer where the embedded database program is arranged to perform the analytical calculation. For example the embedded database program of analytical container may be executed and may employ the same threaded kernel service layer as the threaded kernel service layer contained in client application to perform an analytical calculation.

The logic flow then moves to block where an analytical calculation is performed on a partition of data local to the node using the embedded database program to form a result set. In one example in the distributed database system each worker node may receive a respective compute sub request . Each worker node may then retrieve a set of data local to the respective worker node where the local data is to be processed by each worker node by executing the same embedded database program . The results of the execution in each worker node may be sent as a respective compute sub response that includes a result set.

The logic flow then may proceed to block where a compute response is sent with the result set to the client application. In one example the compute sub responses generated by respective worker nodes may be passed to the control node and forwarded as compute response to the client application including the query result set.

In various embodiments the file system component may be a distributed file system for storing large amounts of information on the scale of gigabytes terabytes or petabytes over one or more nodes such as control node and worker nodes of . More specifically each worker node may include an instance of the DBMS including the file system component to store data on the data store .

In some embodiments the information may be read or retrieved from the file system by a mapper component on one or more nodes. The mapper component may retrieve information based on a compute request such as a Hadoop map reduce request received from a computing device or an application server . In addition the mapper component may perform a number of tasks on the information retrieved from file system component including inserting the information into input rows sorting the information and filtering the information. For example the mapper component may sort the information in an ascending or descending order. In another example the mapper component may also filter the information based on one or more attributes. The mapper component may put the information into input rows for processing by an analytic container such as analytic container of .

In various embodiments and as previously discussed the analytic container may receive the information from mapper component and perform various processing and tasks on the information. Moreover the analytic container may provide an execution environment to process a compute request. The analytic container may be generally arranged to provide an array of portable services definitions data formats and drivers to support various analytical procedures and programming languages based on a compute request. The analytic component may pass or send the processed information to a reducer component for post processing such as generating a compute response or map reduce response to send to a client device and application server . In some embodiments analytical calculations may be chained together or compute in series such that the output of the reducer component may be the input of a second or next calculation for the mapper component to perform a second calculation. This process may be repeated for any number of calculations based on the compute request.

In some embodiments the DBMS may also include a map reduce process to control various aspects of processing a compute request utilizing the components of the DMBS . For example the map reduce process may receive the compute request and a published embedded database program to perform one or more of the analytical calculations. The map reduce process may control the processing of the information by utilizing the mapper component to retrieve information from a database based on the compute request and put the information into input rows. The map reduce process may also invoke or initiate an embedded process using an embedded java database program to process the information such as the embedded process and embedded java database program of analytic container . The embedded process may also include the embedded database program and a threaded kernel service to perform the analytical calculations on the information. In various embodiments the embedded process may receive in the information from the mapper component and may process the information based on the compute request.

The map reduce process may instruct the embedded process to send the processed information to the reducer component to perform post processing on the information as previously discussed. Finally the map reduce process may include using the reducer component to send the post processed information to a response component to generate a compute response. The response component may generate the compute response including the processed information and send the compute response to a client device and application server.

The application server may couple to a central process or control node which in turn is coupled to one or more worker nodes . In general each of the nodes of the distributed database system including the control node and worker nodes and may include the database management system such as DBMS of and data store . It is worthy to note that a and b and c and similar designators as used herein are intended to be variables representing any positive integer. In various embodiments the control node may manage operations in one or more of the worker nodes . More particularly the control node may be arranged to receive and process a compute request from the client when analytic computations are to be performed that require data stored in one or more of the worker nodes .

In various embodiments one or more of the components of distributed database system may be collocated including the client device application server control node and one or more worker nodes . However more generally none of the components of distributed database system need be collocated. Moreover in some embodiments any one of the nodes of the distributed database system may be arranged to assume the role of the control node. Various embodiments are not limited in this manner.

In various embodiments in operation a query request received by the control node may be received as a compute request such as a Hadoop map reduce request a HiveQL request a PIG request or any other java request. For example the application server may generate a general request to perform an analytical calculation which is processed by the compute model component to construct an in memory work request to be performed on the distributed database system . Subsequently the compute request component may generate a compute request by translating the basic structures and pseudo information of the general request into a database specific request e.g. Hadoop map reduce request HiveQL request or PIG request that can be received by the control node of the distributed database system . The compute request may subsequently be transmitted over interface as the compute request .

In particular embodiments the general request generated by the application server may be received with a name for the distributed database system to process the general request. Accordingly when the distributed database system is designated the compute request is transmitted to control node .

Consistent with the present embodiments when the control node receives a compute request sent from the application server the control node may unpack the compute request parse the compute request and establish a flow of execution steps to perform an operation such as an analytical calculation using one or more worker nodes of the distributed database system .

As illustrated in the distributed database system may further include a communication protocol such as the message passing interface MPI to communicate information between the nodes. Various embodiments are not limited in this manner and the distributed database system may communicate information between the nodes using any protocol. When the control node establishes a flow of execution for a compute request the control node may distribute the execution steps to worker nodes to via the message passing interface . Subsequently results may be returned from one or more worker nodes to to the control node via the message passing interface .

In various embodiments each of multiple worker nodes to may contain a respective partition of data to be processed according to the compute request. The control node may establish an execution flow in which messages are sent to multiple different worker nodes to . Each worker node to may subsequently load and execute a specified compute function for the partition of data contained by that worker node.

When each of the worker nodes to that receives a message to execute a compute function from control node completes execution of its specified compute function on its partition of data the worker node may return results to the control node through the message passing interface . The results may subsequently be returned from the control node to the application server that generated the compute request.

Although illustrates a distributed database network that comprises a control node and multiple worker nodes more general embodiments include any network in which an interface is provided so that a client device may initiate the execution of a compute request within a group of foreign machines utilize resources of the foreign machines including memory input output functionality an so forth. The client device also initiate execution on the foreign machines to load previously installed executable images that can launch threads of execution to perform analytic tasks and distribute compute requests across the foreign machines.

In the example illustrated in a compute request may be divided into two sub requests a compute sub request which is forwarded to the worker node and a compute sub request which is forwarded to the worker node . Each of the different compute sub requests may require a different partition of data to be processed. Once each worker node receives the compute sub request respectively the worker nodes may each execute its analytic container to perform its analytic calculation. For example the worker node may read a first partition of data from the data store to execute an analytic calculation in response to the compute sub request . Likewise the worker node may read a second partition of data from the data store to execute an analytic calculation in response to the compute sub request . In this manner parallel analytic computations may be performed in the worker nodes and worker node in response to the original compute request .

Moreover each of the analytic containers may communicate with a mapper component and a reducer component as previously discussed with respect to . More specifically the analytic containers may receive information from a mapper component on each of the worker nodes in rows to perform the analytical calculations on the information. The analytic containers may perform the analytical operations and pass or send the processed information to a reducer component to perform post processing on the information. For example the reducer component may post process the information and generate a compute response. In some embodiments analytical calculations may be chained together or compute in series such that the output of the reducer component may be the input of a second or next calculation for the mapper component to perform. This process may be repeated for any number of calculations based on the compute request.

Although the illustration in depicts parallel execution of only two different sub requests in various embodiments any number of different worker nodes of a distributed database system may process respective compute sub requests where each worker node processes a different compute sub request 

Although the illustration in depict parallel execution of only two different sub requests and generation of two compute sub responses respectively it may be appreciated that any number of different worker nodes of a distributed database system may process respective sub requests where each worker node processes a different sub request and generates a concomitant sub response.

As further illustrated in the compute response may form a result set that is received by the application server that generated the compute request . Referring also to when the compute response is received by the application server the compute response component may place the compute response into a group of in memory structures to form a result set that is suitable for consumption by the application server . If the compute response is in a format native to the worker nodes the compute response component may then repackage the compute response as a result set in the format of the client application of application server . Subsequently the application server may employ the interface of the result set component to access the data of the compute response.

In the illustrated embodiment shown in the logic flow may include retrieving information from a database file system based on a compute request block . In some embodiments a worker node of a distributed data base system may receive a sub compute request based on a compute request received from an application server by a client node. As previously discussed an application server may generate a database specific request such as a Hadoop map reduce request PIG request or HiveQL request for a distributed database system to process information based on one or more inputs received from a client application operating in a cloud base compute environment.

In various embodiments a map reduce process utilizing a mapper component may parse the request or sub request and retrieve information or data from a data store of the database file system. Further at block the logic flow may include inserting information into input rows for processing. For example the mapper component may insert the information into input rows in the order the information is retrieved from the database file system. In some embodiments the mapper component may sort the information and filter the information based on the sub compute request and then be put into input rows for processing by the analytic container including the embedded process.

In some embodiments the logic flow may include the map reduce process causing the execution of an embedded process and processing the information in the input rows at block . For example the embedded process may be invoked or executed by an embedded process java component on the worker node of the distributed database system the embedded process including a threaded kernel service layer. More specifically the map reduce process may process and parse a compute request to invoke the embedded process and threaded kernel service layer utilizing the embedded process java component. In some embodiments the map reduce process may also receive a published embedded database program and may utilize the embedded database program to perform the analytical calculation.

At block the logic flow may include post processing the information. More specifically a result set may be finalized by the map reduce process utilizing a reducer component as previously discussed above and a compute response may be generated including the result set. The logic flow may then send a compute response including the result set to an application server at block . In some embodiments the compute response may be a sub compute response and may be sent to a control node. The control node may receive one or more result sets from any number of sub compute responses and may generate a compute response from all result sets to send back to an application server.

In the illustrated embodiment shown in the logic flow may include generating by a processor circuit a general request having structures and information to perform an analytical calculation on data stored in a distributed database system the general request generated by a client application at block . Further the logic flow at block may convert the structures and information of the general request to a compute request having a request format conforming to a query language used by the distributed database system.

In some embodiments the logic flow includes sending the compute request to a node of the distributed database system at block . For example an application server may include an interface coupled with a distributed database system and may send the compute request to the distributed database system via the interface.

Further at block the logic flow may receive a compute response from the node of the distributed database system the compute response including a result set of the analytical calculation performed on data local to the node from an analytic container implemented by the node the analytic container including an embedded process to replicate an execution environment hosted within the distributed database system used by the client application.

As used in this application the terms system and component are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution examples of which are provided by the exemplary computing architecture . For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers. Further components may be communicatively coupled to each other by various types of communications media to coordinate operations. The coordination may involve the uni directional or bi directional exchange of information. For instance the components may communicate information in the form of signals communicated over the communications media. The information can be implemented as signals allocated to various signal lines. In such allocations each message is a signal. Further embodiments however may alternatively employ data messages. Such data messages may be sent across various connections. Exemplary connections include parallel interfaces serial interfaces and bus interfaces.

The computing architecture includes various common computing elements such as one or more processors multi core processors co processors memory units chipsets controllers peripherals interfaces oscillators timing devices video cards audio cards multimedia input output I O components power supplies and so forth. The embodiments however are not limited to implementation by the computing architecture .

As shown in the computing architecture comprises a processing unit a system memory and a system bus . The processing unit can be any of various commercially available processors including without limitation an AMD Athlon Duron and Opteron processors ARM application embedded and secure processors IBM and Motorola DragonBall and PowerPC processors IBM and Sony Cell processors Intel Celeron Core 2 Duo Itanium Pentium Xeon and XScale processors and similar processors. Dual microprocessors multi core processors and other multi processor architectures may also be employed as the processing unit .

The system bus provides an interface for system components including but not limited to the system memory to the processing unit . The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. Interface adapters may connect to the system bus via a slot architecture. Example slot architectures may include without limitation Accelerated Graphics Port AGP Card Bus Extended Industry Standard Architecture E ISA Micro Channel Architecture MCA NuBus Peripheral Component Interconnect Extended PCI X PCI Express Personal Computer Memory Card International Association PCMCIA and the like.

The computing architecture may comprise or implement various articles of manufacture. An article of manufacture may comprise a computer readable storage medium to store logic. Examples of a computer readable storage medium may include any tangible media capable of storing electronic data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. Examples of logic may include executable computer program instructions implemented using any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code object oriented code visual code and the like. Embodiments may also be at least partly implemented as instructions contained in or on a non transitory computer readable medium which may be read and executed by one or more processors to enable performance of the operations described herein.

The system memory may include various types of computer readable storage media in the form of one or more higher speed memory units such as read only memory ROM random access memory RAM dynamic RAM DRAM Double Data Rate DRAM DDRAM synchronous DRAM SDRAM static RAM SRAM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory polymer memory such as ferroelectric polymer memory ovonic memory phase change or ferroelectric memory silicon oxide nitride oxide silicon SONOS memory magnetic or optical cards an array of devices such as Redundant Array of Independent Disks RAID drives solid state memory devices e.g. USB memory solid state drives SSD and any other type of storage media suitable for storing information. In the illustrated embodiment shown in the system memory can include non volatile memory and or volatile memory . A basic input output system BIOS can be stored in the non volatile memory .

The computer may include various types of computer readable storage media in the form of one or more lower speed memory units including an internal or external hard disk drive HDD a magnetic floppy disk drive FDD to read from or write to a removable magnetic disk and an optical disk drive to read from or write to a removable optical disk e.g. a CD ROM or DVD . The HDD FDD and optical disk drive can be connected to the system bus by a HDD interface an FDD interface and an optical drive interface respectively. The HDD interface for external drive implementations can include at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies.

The drives and associated computer readable media provide volatile and or nonvolatile storage of data data structures computer executable instructions and so forth. For example a number of program modules can be stored in the drives and memory units including an operating system one or more application programs other program modules and program data . In one embodiment the one or more application programs other program modules and program data can include for example the various applications and or components of the system .

A user can enter commands and information into the computer through one or more wire wireless input devices for example a keyboard and a pointing device such as a mouse . Other input devices may include microphones infra red IR remote controls radio frequency RF remote controls game pads stylus pens card readers dongles finger print readers gloves graphics tablets joysticks keyboards retina readers touch screens e.g. capacitive resistive etc. trackballs trackpads sensors styluses and the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port IEEE 1394 serial port a game port a USB port an IR interface and so forth.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adaptor . The monitor may be internal or external to the computer . In addition to the monitor a computer typically includes other peripheral output devices such as speakers printers and so forth.

The computer may operate in a networked environment using logical connections via wire and or wireless communications to one or more remote computers such as a remote computer . The remote computer can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wire wireless connectivity to a local area network LAN and or larger networks for example a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network for example the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a wire and or wireless communication network interface or adaptor . The adaptor can facilitate wire and or wireless communications to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wire and or wireless device connects to the system bus via the input device interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards such as wireless devices operatively disposed in wireless communication e.g. IEEE 802.11 over the air modulation techniques . This includes at least Wi Fi or Wireless Fidelity WiMax and Bluetooth wireless technologies among others. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi Fi networks use radio technologies called IEEE 802.11x a b g n etc. to provide secure reliable fast wireless connectivity. A Wi Fi network can be used to connect computers to each other to the Internet and to wire networks which use IEEE 802.3 related media and functions .

As shown in the communications architecture comprises includes one or more clients and servers . The clients may implement the client devices and servers may implement the service devices as previously discussed. The clients and the servers are operatively connected to one or more respective client data stores and server data stores that can be employed to store information local to the respective clients and servers such as cookies and or associated contextual information.

The clients and the servers may communicate information between each other using a communication framework . The communications framework may implement any well known communications techniques and protocols. The communications framework may be implemented as a packet switched network e.g. public networks such as the Internet private networks such as an enterprise intranet and so forth a circuit switched network e.g. the public switched telephone network or a combination of a packet switched network and a circuit switched network with suitable gateways and translators .

The communications framework may implement various network interfaces arranged to accept communicate and connect to a communications network. A network interface may be regarded as a specialized form of an input output interface. Network interfaces may employ connection protocols including without limitation direct connect Ethernet e.g. thick thin twisted pair 10 100 1000 Base T and the like token ring wireless network interfaces cellular network interfaces IEEE 802.11a x network interfaces IEEE 802.16 network interfaces IEEE 802.20 network interfaces and the like. Further multiple network interfaces may be used to engage with various communications network types. For example multiple network interfaces may be employed to allow for the communication over broadcast multicast and unicast networks. Should processing requirements dictate a greater amount speed and capacity distributed network controller architectures may similarly be employed to pool load balance and otherwise increase the communicative bandwidth required by clients and the servers . A communications network may be any one and the combination of wired and or wireless networks including without limitation a direct interconnection a secured custom connection a private network e.g. an enterprise intranet a public network e.g. the Internet a Personal Area Network PAN a Local Area Network LAN a Metropolitan Area Network MAN an Operating Missions as Nodes on the Internet OMNI a Wide Area Network WAN a wireless network a cellular network and other communications networks.

Some embodiments may be described using the expression one embodiment or an embodiment along with their derivatives. These terms mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment. Further some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other.

It is emphasized that the Abstract of the Disclosure is provided to allow a reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

What has been described above includes examples of the disclosed architecture. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the novel architecture is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

