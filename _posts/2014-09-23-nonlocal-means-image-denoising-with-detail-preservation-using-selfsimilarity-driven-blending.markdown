---

title: Non-local means image denoising with detail preservation using self-similarity driven blending
abstract: System, apparatus, method, and computer readable media for texture enhanced non-local means (NLM) image denoising. In embodiments, detail is preserved in filtered image data through a blending between the noisy input target pixel value and the NLM pixel value that is driven by self-similarity and further informed by an independent measure of local texture. In embodiments, the blending is driven by one or more blending weight or coefficient that is indicative of texture so that the level of detail preserved by the enhanced noise reduction filter scales with the amount of texture. Embodiments herein may thereby denoise regions of an image that lack significant texture (i.e. are smooth) more aggressively than more highly textured regions. In further embodiments, the blending coefficient is further determined based on similarity scores of candidate patches with the number of those scores considered being based on the texture score.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489720&OS=09489720&RS=09489720
owner: Intel Corporation
number: 09489720
owner_city: Santa Clara
owner_country: US
publication_date: 20140923
---
Image denoising is an important functional block in an image processing pipeline. The goal of image denoising methods is to recover the original image from a noisy measurement. Images generated by digital camera sensors pick up noise from a variety of sources which should be reduced for aesthetic or practical e.g. machine vision purposes. Ideally a noise reduction algorithm utilized by an image denoising block should improve image clarity by reducing noise while minimizing loss of real detail. The technical difficulty lies in robustly distinguishing noise from image details.

Many image denoising algorithms that perform some averaging or weighting of a pixel relative to a grouping of pixels spatially surrounding the target pixel are referred to as local mean or local smoothing filters. Non local image denoising algorithms the most prevalent of which is the non local means NLM algorithm have gained popularity in the last decade because relative to many local mean algorithms post filtering clarity is improved while the real detail loss is reduced. An NLM filter utilizes redundancy within an image to reduce edge blurring by taking a mean of a greater number of pixels in the image weighted by how similar the pixels are to the target pixel. More specifically for each input pixel a target patch containing the target pixel is determined. Other candidate patches in a neighborhood of the target patch are then assessed for similarity. An average pixel patch is computed as a weighted average of the candidate patches according to the self similarity weight assigned to the candidate patch. The averaged pixel patch is then taken directly as the filtered target pixel output of the NML filter.

While the NLM denoising technique is considered to improve image quality over most local mean filters the NLM technique favors highly periodic images. Quality loss is predominantly aperiodic detail with the visual perception being a blurring that affects high frequency texture regions and unique pixels. Image denoising techniques and hardware architectures capable of improving image clarity while preserving desirable texture and high frequency detail to a greater extent than possible with existing NLM techniques are therefore advantageous.

One or more embodiments are described with reference to the enclosed figures. While specific configurations and arrangements are depicted and discussed in detail it should be understood that this is done for illustrative purposes only. Persons skilled in the relevant art will recognize that other configurations and arrangements are possible without departing from the spirit and scope of the description. It will be apparent to those skilled in the relevant art that techniques and or arrangements described herein may be employed in a variety of other systems and applications beyond what is described in detail herein.

Reference is made in the following detailed description to the accompanying drawings which form a part hereof and illustrate exemplary embodiments. Further it is to be understood that other embodiments may be utilized and structural and or logical changes may be made without departing from the scope of claimed subject matter. Therefore the following detailed description is not to be taken in a limiting sense and the scope of claimed subject matter is defined solely by the appended claims and their equivalents.

In the following description numerous details are set forth however it will be apparent to one skilled in the art that embodiments may be practiced without these specific details. Well known methods and devices are shown in block diagram form rather than in detail to avoid obscuring more significant aspects. References throughout this specification to an embodiment or one embodiment mean that a particular feature structure function or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in an embodiment or in one embodiment in various places throughout this specification are not necessarily referring to the same embodiment. Furthermore the particular features structures functions or characteristics described in the context of an embodiment may be combined in any suitable manner in one or more embodiments. For example a first embodiment may be combined with a second embodiment anywhere the particular features structures functions or characteristics associated with the two embodiments are not mutually exclusive.

As used in the description of the exemplary embodiments and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items.

As used throughout the description and in the claims a list of items joined by the term at least one of or one or more of can mean any combination of the listed terms. For example the phrase at least one of A B or C can mean A B C A and B A and C B and C or A B and C.

The terms coupled and connected along with their derivatives may be used herein to describe functional or structural relationships between components. It should be understood that these terms are not intended as synonyms for each other. Rather in particular embodiments connected may be used to indicate that two or more elements are in direct physical optical or electrical contact with each other. Coupled may be used to indicated that two or more elements are in either direct or indirect with other intervening elements between them physical optical or electrical contact with each other and or that the two or more elements co operate or interact with each other e.g. as in a cause an effect relationship .

Some portions of the detailed descriptions provide herein are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as calculating computing determining estimating storing collecting displaying receiving consolidating generating updating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s circuitry including registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

While the following description sets forth embodiments that may be manifested in architectures such system on a chip SoC architectures for example. Implementation of the techniques and or arrangements described herein are not restricted to particular architectures and or computing systems and may be implemented by any architecture and or computing system for similar purposes. Various architectures employing for example multiple integrated circuit IC chips and or packages and or various computing devices and or consumer electronic CE devices such as set top boxes smartphones etc. may implement the techniques and or arrangements described herein. Further while the following description may set forth numerous specific details such as logic implementations types and interrelationships of system components logic partitioning integration choices etc. claimed subject matter may be practiced without such specific details. Furthermore some material such as for example control structures and full software instruction sequences may not be shown in detail in order not to obscure the material disclosed herein.

Certain portions of the material disclosed herein are implemented in hardware for example as logic circuitry in a graphics processor. Certain other portions may be implemented in hardware firmware software or any combination thereof. At least some of the material disclosed herein may also be implemented as instructions stored on a machine readable medium which may be read and executed by one or more processors graphics processors and or central processors . A machine readable medium may include any medium and or mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical acoustical or other similarly non transitory tangible media.

One or more system apparatus method and computer readable media is described below for image denoising enhanced at least in part on an independent assessment of texture within the image. In contrast to conventional NLM filters which suffer from detail loss for at least the reason that they only passively account for texture through definition of candidate patches and or patch similarity assessments the texture enhanced filter embodiments described herein actively account for input image texture by way of a texture sensitive blending operation. In embodiments an average pixel value determined by color based filter operations is blended with the noisy input pixel value. In embodiments the blending is driven by one or more blending weight or coefficient that is indicative of texture so that the level of detail preserved by the enhanced noise reduction filter scales with the amount of texture. Embodiments herein may thereby denoise regions of an image that lack significant texture i.e. are smooth more aggressively than more highly textured regions. In further embodiments the blending coefficient is further determined based on similarity scores of candidate patches with the number of those scores considered being based on the texture score. The enhanced filter in accordance with embodiments has been found to advantageously reduce the blurring effect typical of an NLM filter lacking such a texture sensitive blending provision.

In a first embodiment input pixel values pare raw data in RGB space. While this raw data may be raw Bayer data or the like output by a camera sensor in advantageous embodiments the pixel values phave been preprocessed to some extent for example linearized including black level correction and color shading corrected. The raw image data may also have had known bad pixels corrected and lens shading corrections may have been performed upstream of denoise method . In a second embodiment input pixel values preceived at operation are in YUV space with method specifically operating on the luminance Y channel.

At operation a texture score indicative of a level of texture within the neighborhood is determined based on the input pixel values. The texture score is an independent measure of texture that is to provide an additional degree of freedom to denoising method . In one embodiment all of the input pixels preceived at operation are utilized to compute the texture score . For example where all input pixels pare associated with a neighborhood window utilized in a non local means algorithm texture score is derived from this same population of input pixels p. Alternatively texture score is determined based on only a subset of the input pixels p. In other words the window over which the texture score is determined may be smaller than but contained within the neighborhood to which all the input pixels pbelong. In one exemplary embodiment where all input pixels preceived at operation correspond to a single neighborhood of a target pixel p texture score is determined based on a quantitative assessment of pixel value variation over the entire neighborhood. While such a quantitative assessment may take many forms exemplary embodiments are described in greater detail below in the context of and .

Still referring to a non local mean is computed at operation for the target pixel based on one or more values associated with the plurality of pixels within the spatial neighborhood of the target pixel received at operation . Any known non local mean algorithm may be implemented at operation to arrive at a mean target pixel value for a target pixel p. In one exemplary embodiment as illustrated in by dashed line between operation and and as described in more detail below the non local mean computation is dependent upon the texture score determined at operation . In alternate embodiments however the non local mean computation at operation is independent of texture assessment made at operation and the texture score determined at operation is utilized solely at blending operation where the non local mean from operation and the noisy target input pixel value pare blended based on the texture score to arrive at the filtered output pixel value p. The filtered output pixel value pis then stored at operation for example to an electronic memory such as but not limited to a register volatile memory cell non volatile memory cell etc. Input pixel pis incremented at operation across multiple serial iterations or parallel threads until all pixels in an image or frame have been filtered.

As shown in an image or frame includes a spatially correlated D pixel array of N N dimension. In the depicted embodiment values of pixel array are in RGB space. Within pixel array is a local neighborhood of K K dimension surrounding target pixel . Pixel values from pixel array may be received as input pixels pat operation for example.

As further illustrated in at operation a target pixel patch P including target pixel pis compared to each of one or more candidate pixel patch Qalso contained within the set of all pixels of local neighborhood Nbr p . In the example illustrated in a target pixel patch including target pixel is contained within local neighborhood . One or more candidate pixel patch may for example be of a predetermined size and overlap with a number of other candidate patches defined within neighborhood . The number of candidate patches within a given neighborhood may for example be a function of the location of target pixel within the image frame e.g. along an edge and or within neighborhood .

A candidate patch weight Wis computed corresponding to how similar each candidate patch is to the target pixel patch referred to herein as self similarity. A candidate patch weight Wmay for example be larger for a first candidate patch having greater similarity to the target patch than for a second candidate patch less similar to the target patch. Each candidate patch weight Wmay be determined by way of any patch similarity scoring function to assess the similarity between the pixels i and p for example with 0 W i p 1. In one embodiment the similarity measure is computed as the sum of absolute differences. Such an embodiment may be advantageously implemented in fixed function or semi programmable logic circuitry e.g. an image signal processor . In an alternate embodiment a Gaussian noise model is employed as a kernel function where a squared sum of differences is computed as the similarity measure. This alternative embodiment may be advantageously implemented in software executing on a fully programmable logic circuitry e.g. an applications processor .

Returning to at operation an analysis of pixel value variation across neighborhood is performed to compute the local texture score q. As illustrated by both and determination of texture score is independent of patch weighting computations. Both patch weighting and the texture score are then utilized in method to determine where more or less NLM denoising is to be performed within an image frame.

As introduced above texture score is an estimator of dispersion across all or a subset of the pixel values within the neighborhood Nbr p . Advantageously the estimator is normalized by signal intensity of the neighborhood over which the estimate is made. The estimator may be based on a standard deviation or variance of the pixel value for example. Although many texture scoring algorithms can be used in one embodiment texture score is computed as variance normalized by the mean signal intensity 

A NLM of the target pixel pis then computed at operation . In the exemplary embodiment a patch mean is computed based on the candidate patch weights Wdetermined at operation . As one example the mean patch is computed by averaging the candidate patches as weighted by their corresponding patch weight. However any known NLM technique may be employed to arrive at the mean patch as embodiments herein are not further limited in this respect. From the mean patch the averaged target pixel value is determined for example based on its position within the target patch P.

With the non local mean of the target input pixel determined based on the input pixel values the non local mean is weighted relative to the target input pixel value pinversely with a belief of local texture. In the exemplary embodiment illustrated in and the filtered pixel value pis made a function of an independently derived belief of local texture by blending the non local mean pixel value and the target input pixel pbased on the texture score . The blending function may be weighted by a blending coefficient determined at operation . In the exemplary embodiment an interpolation between the non local mean pixel value and the target input pixel pis performed at operation based on the blending coefficient . In one specific example the interpolation is a linear function of the blending coefficient 1 

The blending coefficient is at least based on texture score and is advantageously based on both texture score and the patch weights Wdetermined at operation in a manner that limits blending power of the non local mean and or enhances the blending power of the target input pixel p in response to detecting the presence of greater local texture and vice versa. If for example the local texture measure indicates high probability of texture one should denoise strongly only when a is low i.e. local self similarity is high for example in the presence of repetitive texture . In the exemplary embodiment illustrated in where the blending function is a linear interpolation between the non local mean and the target input pixel p blending coefficient is indicative of the set of greatest patch weights W. Blending coefficient is advantageously informed by the pattern of patch weights Wby selecting a number of greatest patch weights S as a function of the texture score . Blending coefficient is then computed at operation based on a patch weight statistic associated with the selection of S patch weights. As one example blending coefficient is based on a patch weight statistic indicative of the central tendency of the selected set of patch weights 

In an embodiment the number of patch weights S utilized to compute the blending coefficient is inversely proportional to the local neighborhood texture. Where belief of texture is lower the blending coefficient is indicative of more patch weights. Where belief of texture is higher the blending coefficient is indicative of fewer patch weights. Hence in a flat region where low texture is detected e.g. texture score is small many weights may be included in the weight statistic computation. Yet if the self similarity of each candidate patch is low the many weights included may still result in a low average weight and the noisy input pixel phaving low blending power. If texture measure is high one would expect to find a smaller correspondence between patches so the number of patch weights may be reduced to allow strong filtering based on few patches. For example in the presence of an edge texture score can be expected to increase and the number of weights incorporated into blending coefficient correspondingly reduced to only the few having the greatest similarity.

An integer number of the candidate patches S to represent in the set of weights may be determined in a variety of ways to implement the above principles. In one embodiment the number of greatest patch weights S is computed by evaluating a closed form function. In an alternative embodiment the number of greatest patch weights S is determined by accessing a lookup table LUT . In the first embodiment the function may be any monotonically decreasing closed form function of the texture score that ranges between the total number of available candidate patches i.e. all candidate patches and a non zero minimum threshold number of patches. In a further embodiment the function is an exponentially decreasing function of the texture score . In one exemplary embodiment the function may be of the form 

In a further embodiment as illustrated by the dashed arrow in the texture score is utilized to further modulate the NLM computation as a function of the independent local texture measure. is a flow diagram illustrating an image noise reduction method in accordance with such an embodiment. Method further exemplifies how the blending coefficient may also be derived through a non linear mapping of an initial coefficient determined according to Eq. 3.

As depicted in method begins with receiving input pixel values at operation and computing the texture score and patch weights W at operations and as described above. At operation the mean patch is computed for a subset of candidate patches within the neighborhood. The subset of candidate patches is determined based on the texture score . As such texture score impacts filtering both through the blending coefficient and also through the NLM pixel value that will be blended with the noisy pixel. With the goal being to reduce the chance of using inappropriate or dissimilar patches in the NLM averaging process the non local mean computed at operation is to include fewer candidate patches in response to detecting a greater level of texture. In one embodiment the number of candidate patches to include in the NLM computation is determined by evaluating a closed form function. In an alternative embodiment the number of candidate patches is determined by accessing a LUT associating a candidate patch number with a particular texture score or range of scores. In a specific embodiment the NLM is computed from the same candidate patches utilized in the computation of the blending coefficient . At operation the average target pixel value is then determined from the patch mean computed from the subset of candidate patches.

Method continues at operation where the number patches associated with the S greatest patch weights is computed for example following Eq. 4. At operation blending coefficient is computed based on the S greatest weights for example from a patch weight statistic indicative of the central tendency of the selected set of patch weights e.g. following Eq. 3 . At operation a final blending coefficient is computed by performing a non linear mapping of blending coefficient . The mapping function itself is parameterized by the local texture score and is to provide a desired level of priority to the input value of the target pixel. In one embodiment the final blending coefficient is determined by accessing a lookup table LUT associating different texture scores with different mappings between initial and final blending coefficients. Such mappings may also be user definable. In an alternative embodiment the final blending coefficient is computed by evaluating a closed form function of the texture score with Eq. 5 providing one example 

Method then continues at operation where the NLM target pixel value determined at operation is blended with the input target pixel value pbased on the final blending coefficient . In one exemplary embodiment the blending operation entails a linear interpolation using the final blending coefficient to complementarily weight the input pixel value and the NLM pixel value e.g. applying Eq. 2 with replacing . Method then completes with storing the filtered pixel value pto an electronic memory. In further embodiments filtered pixel value pis further output to a display pipeline and or encoding pipeline and or wireless transmission pipeline.

In the exemplary embodiment raw data originates from camera hardware module CM that includes a camera sensor both of which may be included as part of system or not as denoted by the dashed line blocks. Sensor may be a QXGA WQXGA or QSXGA format digital image device for example. Camera sensor may provide a color resolution of 10 bits or more per pixel and may be further operable to capture continuous video frames progressively. Sensor may have a pixel frequency of 170 MHz or more. Camera sensor may include an RGB Bayer color filter an analog amplifier an A D converter other components to convert incident light into a digital signal corresponding to raw image data. Sensor may be controlled to operate a rolling shutter or electronic focal plane shutter process where pixels are read out progressively in a line sequential fashion for a frame. Raw data is input to ISP . ISP is to receive and analyze frames of raw video data during the horizontal and or vertical blanking periods associated with CM . During raw image data processing ISP performs noise reduction with image denoise module . In the exemplary embodiment ISP further includes a preprocessor to perform one or more of pixel linearization and shading compensation where raw Bayer data or the like output by camera sensor is linearized including also black level correction and color shading corrected. The raw image data chromaticity white balance may be further calculated. Known bad pixels corrected and lens shading corrections may also be performed upstream of denoise module . In an alternative embodiments the amount of preprocessing performed by preprocessor is minimal for example including only dark noise removal upstream of denoise module .

In exemplary embodiment illustrated in image denoising module is implemented by logic circuitry of an image signal processor ISP . In alternate embodiments image denoising module is implemented as one or more software thread instantiated on logic circuitry executing for example on a programmable processor such as a applications processing unit APU or central processing unit CPU . Denoising module is coupled to an input port of system for example downstream of preprocessor . Denoising module further includes a texture processing module that is to compute a texture score indicative of a level of texture detected or believed to exist within the neighborhood based on the input pixel values. Denoising module further includes a NLM module to compute a non local mean of the target input pixel based on the input pixel values. Denoising module further includes a blending module to modulate a weighting of the non local mean relative to the target input pixel value inversely with the level of texture by computation of a filtered target pixel value that is a blend of the non local mean and the target input pixel value based on the texture score. The texture processing module NLM module and blender are commutatively coupled together. Any or all of the texture processing module NLM module and blender may be implemented with fixed function logic circuitry or programmable logic circuitry.

Texture processing module may be considered an independent stage of image denoising which interacts and informs the operation of NLM module and blending module each serving as separate stages of image denoising. In embodiments NLM module further includes logic circuitry to compute a patch weight for candidate patches within the neighborhood by performing a comparison between a number of candidate patches and a target patch of pixels within the neighborhood that contains the target pixel. Blending module then further includes logic circuitry to compute a blending coefficient based on the patch weights and the texture score. Blending module also further includes logic circuitry to blend the non local mean with the target input pixel value by an interpolation between the non local mean and the target input pixel based on the blending coefficient.

In some embodiments texture processing module further includes logic circuitry to select a set of greatest patch weights in a neighborhood based on a texture score. In further embodiments texture processing module further includes logic circuitry to compute a blending coefficient based on a patch weight statistic indicative of the central tendency of the selected set of patch weights. Blending module then further comprises logic circuitry to take a weighted sum of the non local mean and the target input pixel the non local mean and target input pixel weighted complementarily by the patch weight statistic.

In some embodiments texture processing module further comprises logic circuitry to determine an integer number of the candidate patches to represent in the set of weights with at least one of logic circuitry to evaluate a monotonically decreasing closed form function of the texture score ranging between the number of candidate patches and a non zero minimum or logic circuitry to access a lookup table LUT using the texture score as an index value the LUT associating different numbers of candidate patches with different texture scores.

In some embodiments blending module further comprises logic circuitry to compute the blending coefficient based on the patch weights and the texture score that further includes logic circuitry to compute an initial blending coefficient from a patch weight statistic indicative of the central tendency of the selected set of patch weights and logic circuitry to compute the blending coefficient through a mapping of the initial blending coefficient wherein the mapping is a function of the texture score.

In some embodiments the NLM module further includes logic circuitry to select a subset of candidate patches within the neighborhood based on the texture score to include fewer candidate patches in response to detecting a greater level of texture. The NLM module is then to compute a non local mean of the target input pixel from an average patch determined by an average of the subset of candidate patches as weighted by their corresponding patch weight.

As also illustrated in image processing system further includes an output port coupled to at least of an electronic memory a display or an encoder . Memory is to store the filtered image pixel as a filtered representation of the raw image data . Encoder is to encode the filtered image pixel as a filtered representation of raw image data . Display is to present the filtered image pixel as a filtered representation of image data . In further embodiments one or more of ISP and image denoising module is coupled to an APU CPU having a user space and a kernel space. Applications executed on the user space may control denoising module e.g. defining S associations in a LUT or a value of shaping coefficient C etc. .

System includes a device platform that may implement all or a subset of the various texture enhanced NLM image denoising methods and any of the texture enhanced NLM image denoising systems described above in the context of . In various exemplary embodiments processor executes texture enhanced NLM image denoising algorithms. Processor includes logic circuitry in ISP for example to implement texture enhanced NLM image denoising algorithms such as any of those described elsewhere herein. In some embodiments one or more computer readable media may store instructions which when executed by CPU and or processor cause the processor s to execute one or more texture enhanced NLM image denoising algorithm such as any of those described in detail above. One or more image data frame filtered by image denoising module may then be stored in electronic memory as filtered image data.

In embodiments device platform is coupled to a human interface device HID . Platform may collect raw image data with CM which is filtered and output to HID . A navigation controller including one or more navigation features may be used to interact with for example device platform and or HID . In embodiments HID may include any television type monitor or display coupled to platform via radio and or network . HID may include for example a computer display screen touch screen display video monitor television like device and or a television.

Under the control of one or more software applications device platform may display user interface on HID . Movements of the navigation features of controller may be replicated on a display e.g. HID by movements of a pointer cursor focus ring or other visual indicators displayed on the display. For example under the control of software applications the navigation features located on navigation controller may be mapped to virtual navigation features displayed on user interface .

In embodiments device platform may include any combination of CM chipset processors memory storage applications and or radio . Chipset may provide intercommunication among processors memory video processor applications or radio .

One or more of processors may be implemented as one or more Complex Instruction Set Computer CISC or Reduced Instruction Set Computer RISC processors x86 instruction set compatible processors multi core or any other microprocessor or central processing unit CPU .

Memory may be implemented as a volatile memory device such as but not limited to a Random Access Memory RAM Dynamic Random Access Memory DRAM or Static RAM SRAM . Memory may also be implemented as a non volatile storage device such as but not limited to flash memory battery backed up SDRAM synchronous DRAM magnetic memory phase change memory and the like.

Radio may include one or more radios capable of transmitting and receiving signals using various suitable wireless communications techniques. Such techniques may involve communications across one or more wireless networks. Example wireless networks include but are not limited to wireless local area networks WLANs wireless personal area networks WPANs wireless metropolitan area network WMANs cellular networks and satellite networks. In communicating across such networks radio may operate in accordance with one or more applicable standards in any version.

In embodiments system may be implemented as a wireless system a wired system or a combination of both. When implemented as a wireless system system may include components and interfaces suitable for communicating over a wireless shared media such as one or more antennas transmitters receivers transceivers amplifiers filters control logic and so forth. An example of wireless shared media may include portions of a wireless spectrum such as the RF spectrum and so forth. When implemented as a wired system system may include components and interfaces suitable for communicating over wired communications media such as input output I O adapters physical connectors to connect the I O adapter with a corresponding wired communications medium a network interface card NIC disc controller video controller audio controller and the like. Examples of wired communications media may include a wire cable metal leads printed circuit board PCB backplane switch fabric semiconductor material twisted pair wire co axial cable fiber optics and so forth.

The texture enhanced NLM image denoising architecture and associated algorithms as described herein may be implemented in various hardware architectures cell designs or IP cores. 

As described above system may be embodied in varying physical styles or form factors. further illustrates embodiments of a mobile handset device in which system may be embodied. In embodiments for example device may be implemented as a mobile computing device having wireless capabilities. A mobile computing device may refer to any device having a processing system and a mobile power source or supply such as one or more batteries for example. Examples of a mobile computing device may include an ultra laptop computer tablet touch pad portable computer handheld computer palmtop computer personal digital assistant PDA cellular telephone combination cellular telephone PDA television smart device e.g. smartphone tablet or smart television mobile internet device MID messaging device data communication device and so forth. Examples of a mobile computing device also may include computers and or media capture transmission devices configured to be worn by a person such as a wrist computer finger computer ring computer eyeglass computer belt clip computer arm band computer shoe computers clothing computers and other wearable computers. In various embodiments for example a mobile computing device may be implemented as a smart phone capable of executing computer applications as well as voice communications and or data communications. Although some embodiments may be described with a mobile computing device implemented as a smart phone by way of example it may be appreciated that other embodiments may be implemented using other wireless mobile computing devices as well. The embodiments are not limited in this context.

As shown in mobile handset device may include a housing with a front and back . Device includes a display an input output I O device and an integrated antenna . Device also may include navigation features . Display may include any suitable display unit for displaying information appropriate for a mobile computing device. I O device may include any suitable I O device for entering information into a mobile computing device. Examples for I O device may include an alphanumeric keyboard a numeric keypad a touch pad input keys buttons switches microphones speakers voice recognition device and software and so forth. Information also may be entered into device by way of microphone not shown or may be digitized by a voice recognition device. Embodiments are not limited in this context. Integrated into at least the back is camera e.g. including a lens an aperture and an imaging sensor and a flash both of which may be components of a CM through which image frames are exposed and output to a texture enhanced NLM image denoising system such as any of those described elsewhere herein.

Embodiments described herein may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements or modules include processors microprocessors circuitry circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements or modules include applications computer programs application programs system programs machine programs operating system software middleware firmware routines subroutines functions methods procedures software interfaces application programming interfaces API instruction sets computing code computer code code segments computer code segments data words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors considered for the choice of design such as but not limited to desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints.

One or more aspects of at least one embodiment may be implemented by representative instructions stored on a machine readable storage medium. Such instructions may reside completely or at least partially within a main memory and or within a processor during execution thereof by the machine the main memory and the processor portions storing the instructions then also constituting a machine readable storage media. Programmable logic circuitry may have registers state machines etc. configured by the processor implementing the computer readable media. Such logic circuitry as programmed may then be understood to be physically transformed into a system falling within the scope of the embodiments described herein. Instructions representing various logic within the processor which when read by a machine may also cause the machine to fabricate logic adhering to the architectures described herein and or to perform the techniques described herein. Such representations known as cell designs or IP cores may be stored on a tangible machine readable medium and supplied to various customers or manufacturing facilities to load into the fabrication machines that actually make the logic or processor.

While certain features set forth herein have been described with reference to embodiments this description is not intended to be construed in a limiting sense. Hence various modifications of the implementations described herein as well as other implementations which are apparent to persons skilled in the art to which the present disclosure pertains are deemed to be within the spirit and scope of the present disclosure.

In one or more first embodiment a computer implemented image noise reduction method includes receiving input pixel values for a target pixel and a plurality of pixels within a spatial neighborhood of the target pixel. The method includes computing a texture score indicative of a level of texture within the neighborhood based on the input pixel values. The method includes computing a non local mean of the target input pixel based on the input pixel values. The method includes modulating a weighting of the non local mean relative to the target input pixel value inversely with the level of texture by computing a filtered target pixel value that is a blend of the non local mean and the target input pixel value based on the texture score and the method includes storing the filtered target pixel value to an electronic memory.

In furtherance of the first embodiment computing the non local mean of the target input pixel further comprises determining a number of candidate patches within the neighborhood from which the non local mean is computed based on the texture score to include fewer candidate patches in response to detecting a greater level of texture.

In furtherance of the first embodiment the method further includes computing a patch weight for one or more candidate patch within the neighborhood by performing a comparison between each candidate patch and a target patch of pixels within the neighborhood that contains the target pixel. The method further includes computing a blending coefficient based on the patch weights and the texture score. The method further includes blending the non local mean with the target input pixel value by interpolating between the non local mean and the target input pixel based on the blending coefficient.

In furtherance of the embodiment immediately above the method further includes selecting a set of the greatest patch weights based on the texture score. Computing the blending coefficient based on the patch weights and the texture score further comprises computing a blending coefficient based on a patch weight statistic indicative of the central tendency of the selected set of patch weights. Interpolating between the non local mean and the target input pixel based on the blending coefficient further comprises taking a weighted sum of the non local mean and the target input pixel the non local mean and the target input pixel weighted complementarily by the patch weight statistic.

In furtherance of the embodiment immediately above selecting the set of the patch weights based on the texture score further comprises determining an integer number of the candidate patches to represent in the set of weights by at least one of evaluating a monotonically decreasing closed form function of the texture score ranging between the number of candidate patches and a non zero minimum or accessing a lookup table LUT using the texture score as an index value the LUT associating different numbers of candidate patches with different texture scores.

In furtherance of the embodiment immediately above selecting the set of patch weights based on the texture score further comprises determining the number of candidate patches to represent in the set by evaluating a monotonically decreasing closed form function of the texture score and of the total number of candidate patches.

In furtherance of the first embodiments the method further includes selecting a set of the largest patch weights based on the texture score. Computing the blending coefficient based on the patch weights and the texture score further includes computing an initial blending coefficient from a patch weight statistic indicative of the central tendency of the selected set of patch weights and computing the blending coefficient through a mapping of the initial blending coefficient wherein the mapping is a function of the texture score.

In furtherance of the embodiment immediately above computing the final blending coefficient further comprises at least one of evaluating a monotonically decreasing closed form function of the texture score or accessing a lookup table LUT using the texture score as an index value the LUT associating different texture scores with different mappings between initial and final blending coefficients.

In furtherance of the first embodiments computing the texture score further includes computing an estimator of dispersion across all or a subset of the pixel values within the neighborhood and normalizing the dispersion estimator by signal intensity.

In furtherance of the first embodiments computing the non local mean of the target input pixel further includes computing a patch weight for each candidate patch within the neighborhood by performing a comparison between a number of candidate patches and a target patch of pixels within the neighborhood that contains the target pixel computing an average patch by averaging the candidate patches as weighted by their corresponding patch weight.

In one or more second embodiment a computer implemented image noise reduction method includes receiving input pixel values for a target pixel and a plurality of pixels within a spatial neighborhood of the target pixel. The method includes computing a texture score indicative of a level of texture within the neighborhood. The method includes computing a patch weight for one or more candidate patch within the neighborhood by performing a comparison between each of the candidate patches and a target patch of pixels that contains the target pixel. The method includes selecting a set of the greatest patch weights representing an integer number of the candidate patches by evaluating a monotonically decreasing closed form function of the texture score and of the total number of candidate patches. The method includes computing an initial blending coefficient from a patch weight statistic indicative of the central tendency of the selected set of patch weights. The method includes computing a final blending coefficient through a mapping of the initial blending coefficient wherein the mapping is a function of the texture score. The method includes selecting a subset of candidate patches within the neighborhood based on the texture score to include fewer candidate patches in response to detecting a greater level of texture. The method includes computing a non local mean of the target input pixel from an average patch determined by averaging the subset of candidate patches as weighted by their corresponding patch weight. The method includes blending the non local mean with the target input pixel value by linearly interpolating between the non local mean and the target input pixel based on the final blending coefficient. The method includes storing the blend to memory as the filtered target pixel value.

In furtherance of the second embodiments computing the texture score further includes computing an estimator of dispersion across all or a subset of the pixel values within the neighborhood and normalizing the dispersion estimator by signal intensity.

In one or more third embodiment an image processing system includes an input port to receive input pixel values for a target pixel and a plurality of pixels within a spatial neighborhood of the target pixel. The system includes a denoising module coupled to the input port. The denoising module further includes a texture processing module to compute a texture score indicative of a level of texture detected within the neighborhood based on the input pixel values. The denoising module further includes a NLM module to compute a non local mean of the target input pixel based on the input pixel values. The denoising module further includes a blending module to modulate a weighting of the non local mean relative to the target input pixel value inversely with the level of texture by computing a filtered target pixel value that is a blend of the non local mean and the target input pixel value based on the texture score. The system further includes an output port coupled to the denoising module to transmit the filtered target pixel value to an electronic memory.

In furtherance of the third embodiments the NLM module further comprises logic circuitry to compute a patch weight for candidate patches within the neighborhood by performing a comparison between a number of candidate patches and a target patch of pixels within the neighborhood that contains the target pixel. The blending module further comprises logic circuitry to compute a blending coefficient based on the patch weights and the texture score and logic circuitry to blend the non local mean with the target input pixel value by an interpolation between the non local mean and the target input pixel based on the blending coefficient.

In furtherance of the embodiment immediately above the texture processing module further comprises logic circuitry to select a set of greatest patch weights based on the texture score and logic circuitry to compute a blending coefficient based on a patch weight statistic indicative of the central tendency of the selected set of patch weights. The blending module further comprises logic circuitry to take a weighted sum of the non local mean and the target input pixel the non local mean and target input pixel weighted complementarily by the patch weight statistic.

In furtherance of the embodiment immediately above the texture processing module further comprises logic circuitry to determine an integer number of the candidate patches to represent in the set of weights with at least one of logic circuitry to evaluate a monotonically decreasing closed form function of the texture score ranging between the number of candidate patches and a non zero minimum or logic circuitry to access a lookup table LUT using the texture score as an index value the LUT associating different numbers of candidate patches with different texture scores.

In furtherance of the third embodiments the texture processing module further includes logic circuitry to select a set of the largest patch weights based on the texture score. The blending module further comprises logic circuitry to compute the blending coefficient based on the patch weights and the texture score. The blending module further includes logic circuitry to compute an initial blending coefficient from a patch weight statistic indicative of the central tendency of the selected set of patch weights. The blending module further includes logic circuitry to compute the blending coefficient through a mapping of the initial blending coefficient wherein the mapping is a function of the texture score.

In furtherance of the third embodiments the blending module further includes logic circuitry to compute the final blending coefficient with at least one of logic circuitry to evaluate a monotonically decreasing closed form function of the texture score or logic circuitry to access a lookup table LUT using the texture score as an index value the LUT associating different texture scores with different mappings between initial and final blending coefficients.

In furtherance of the third embodiments the NLM module further includes logic circuitry to select a subset of candidate patches within the neighborhood based on the texture score to include fewer candidate patches in response to detecting a greater level of texture. The NLM module further includes logic circuitry to compute a non local mean of the target input pixel from an average patch determined by averaging the subset of candidate patches as weighted by their corresponding patch weight.

In one or more fourth embodiment a mobile computing platform includes the image processing system of the third embodiments and a camera hardware module CM coupled to the input to generate raw image data in an RGB space that includes the input pixel values. The platform further includes at least one of the electronic memory an encoder or display coupled to the output the memory to store the filtered image pixel as a filtered representation of the image data the encoder to encode the filtered image pixel as a filtered representation of the image data and the display to present the filtered image pixel as a filtered representation of the image data.

In one or more fifth embodiment an image processing system includes an input means to receive input pixel values for a target pixel and a plurality of pixels within a spatial neighborhood of the target pixel. The system further includes a denoising means further including a texture processing means coupled to the input means to compute a texture score indicative of a level of texture detected within the neighborhood based on the input pixel values. The denoising means further includes a non local mean NLM computation means coupled to the input means to compute a non local mean of the target input pixel based on the input pixel values. The denoising means further includes a blending means coupled to the texture processing means NLM computation means and input means the blending means to modulate a weighting of the non local mean relative to the target input pixel value inversely with the level of texture by computing a filtered target pixel value that is a blend of the non local mean and the target input pixel value based on the texture score. The image processing system means further includes an output means coupled to the blending means to write the filtered target pixel value to an electronic memory.

In one or more sixth embodiment one or more computer readable storage media have instructions stored thereon which when executed by a processor cause the processor to perform any one of the first embodiments above.

In one or more seventh embodiment one or more computer readable storage media includes instructions stored thereon which when executed by a processor cause the processor to perform a method including receiving input pixel values for a target pixel and a plurality of pixels within a spatial neighborhood of the target pixel. The method includes computing a texture score indicative of a level of texture within the neighborhood based on the input pixel values. The method includes computing a non local mean of the target input pixel based on the input pixel values. The method includes modulating a weighting of the non local mean relative to the target input pixel value inversely with the level of texture by computing a filtered target pixel value that is a blend of the non local mean and the target input pixel value based on the texture score. The method includes storing the filtered target pixel value to an electronic memory.

In furtherance of the seventh embodiments the media includes instructions stored thereon which when executed by the processor further cause the processor to perform the method further including determining a number of candidate patches within the neighborhood from which the non local mean is computed based on the texture score to include fewer candidate patches in response to detecting a greater level of texture.

In furtherance of the seventh embodiments the media includes instructions stored thereon which when executed by the processor further cause the processor to perform the method further including computing a similarity score for candidate patches within the neighborhood by performing a comparison between a number of candidate patches and a target patch of pixels within the neighborhood that contains the target pixel computing a blending coefficient based on the similarity score and the texture score and blending the non local mean with the target input pixel value by interpolating between the non local mean and the target input pixel based on the blending coefficient.

It will be recognized that the embodiments are not limited to the exemplary embodiments so described but can be practiced with modification and alteration without departing from the scope of the appended claims. For example the above embodiments may include specific combination of features. However the above embodiments are not limited in this regard and in embodiments the above embodiments may include undertaking only a subset of such features undertaking a different order of such features undertaking a different combination of such features and or undertaking additional features than those features explicitly listed. Scope should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

