---

title: Cross-platform module that is shared by client applications for access to rich communications suite resources on a client device
abstract: In an embodiment, a client device running a particular OS or OS-version is provisioned with a rich communications suite (RCS) interface. The RCS interface mediates interactions between RCS client applications and RCS resources. The RCS interface interacts with the plurality of RCS client applications in a platform-independent manner using an RCS protocol, and the RCS interacts with the RCS resource in an OS-specific manner using an OS-specific RCS access protocol. The RCS interface translates application-originated RCS signaling that complies with the RCS protocol into the OS-specific RCS access protocol for delivery to the RCS resources, and the RCS interface likewise translates application-terminated signaling that complies with the OS-specific RCS access protocol into the RCS access protocol for delivery to one of the RCS client applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09397878&OS=09397878&RS=09397878
owner: QUALCOMM INCORPORATED
number: 09397878
owner_city: San Diego
owner_country: US
publication_date: 20140124
---
The present application for patent claims priority to U.S. Application No. 61 758 136 entitled CROSS PLATFORM MODULE THAT IS SHARED BY CLIENT APPLICATIONS FOR ACCESS TO RICH COMMUNICATIONS SUITE RESOURCES ON A CLIENT DEVICE filed Jan. 29 2013 which is assigned to the assignee hereof and is hereby expressly incorporated by reference herein in its entirety.

Embodiments of the invention relate to a cross platform module that is shared by client applications for access to rich communications suite RCS functions on a client device.

Wireless communication systems have developed through various generations including a first generation analog wireless phone service 1G a second generation 2G digital wireless phone service including interim 2.5G and 2.75G networks a third generation 3G high speed data Internet capable wireless service and a fourth generation 4G service e.g. Long Term Evolution LTE or WiMax . There are presently many different types of wireless communication systems in use including Cellular and Personal Communications Service PCS systems. Examples of known cellular systems include the cellular Analog Advanced Mobile Phone System AMPS and digital cellular systems based on Code Division Multiple Access CDMA Frequency Division Multiple Access FDMA Time Division Multiple Access TDMA the Global System for Mobile access GSM variation of TDMA etc.

Rich Communications Suite RCS in Internet Protocol IP Multimedia Subsystem IMS is a recently developed service type in the IMS domain. RCS generally refers to a set of communication services by which a client device e.g. a mobile device or a fixed device can update the capabilities of the contacts in its address book in real time and thus enable rich communication such as Voice over LTE VoLTE video calls Instant Messaging IM file or image sharing etc. based on the real time capabilities of the contacts. However while low level operating system OS resources can be leveraged by client applications to implement RCS services each client application typically must be customized for operation on a particular platform on which it will execute. For example a client application configured for operation on Android OS devices needs to be coded by its developer to leverage any available Android specific RCS OS resources a client application configured for operation on Windows OS devices needs to be coded by its developer to leverage any available Windows specific RCS OS resources a client application configured for operation on iOS devices needs to be coded by its developer to leverage any available iOS specific RCS OS resources and so on.

In an embodiment a client device running a particular OS or OS version is provisioned with a rich communications suite RCS interface. The RCS interface mediates interactions between RCS client applications and RCS resources. The RCS interface interacts with the plurality of RCS client applications in a platform independent manner using an RCS protocol and the RCS interacts with the RCS resource in an OS specific manner using an OS specific RCS access protocol. The RCS interface translates application originated RCS signaling that complies with the RCS protocol into the OS specific RCS access protocol for delivery to the RCS resources and the RCS interface likewise translates application terminated signaling that complies with the OS specific RCS access protocol into the RCS access protocol for delivery to one of the RCS client applications.

Aspects of the invention are disclosed in the following description and related drawings directed to specific embodiments of the invention. Alternate embodiments may be devised without departing from the scope of the invention. Additionally well known elements of the invention will not be described in detail or will be omitted so as not to obscure the relevant details of the invention.

The words exemplary and or example are used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary and or example is not necessarily to be construed as preferred or advantageous over other embodiments. Likewise the term embodiments of the invention does not require that all embodiments of the invention include the discussed feature advantage or mode of operation.

Further many embodiments are described in terms of sequences of actions to be performed by for example elements of a computing device. It will be recognized that various actions described herein can be performed by specific circuits e.g. application specific integrated circuits ASICs by program instructions being executed by one or more processors or by a combination of both. Additionally these sequence of actions described herein can be considered to be embodied entirely within any form of computer readable storage medium having stored therein a corresponding set of computer instructions that upon execution would cause an associated processor to perform the functionality described herein. Thus the various aspects of the invention may be embodied in a number of different forms all of which have been contemplated to be within the scope of the claimed subject matter. In addition for each of the embodiments described herein the corresponding form of any such embodiments may be described herein as for example logic configured to perform the described action.

A client device referred to herein as a user equipment UE may be mobile or stationary and may communicate with a radio access network RAN . As used herein the term UE may be referred to interchangeably as an access terminal or AT a wireless device a subscriber device a subscriber terminal a subscriber station a user terminal or UT a mobile terminal a mobile station and variations thereof. Generally UEs can communicate with a core network via the RAN and through the core network the UEs can be connected with external networks such as the Internet. Of course other mechanisms of connecting to the core network and or the Internet are also possible for the UEs such as over wired access networks WiFi networks e.g. based on IEEE 802.11 etc. and so on. UEs can be embodied by any of a number of types of devices including but not limited to PC cards compact flash devices external or internal modems wireless or wireline phones and so on. A communication link through which UEs can send signals to the RAN is called an uplink channel e.g. a reverse traffic channel a reverse control channel an access channel etc. . A communication link through which the RAN can send signals to UEs is called a downlink or forward link channel e.g. a paging channel a control channel a broadcast channel a forward traffic channel etc. . As used herein the term traffic channel TCH can refer to either an uplink reverse or downlink forward traffic channel.

Referring to UEs 1 . . . N are configured to communicate with an access network e.g. the RAN an access point etc. over a physical communications interface or layer shown in as air interfaces and or a direct wired connection. The air interfaces and can comply with a given cellular communications protocol e.g. CDMA EVDO eHRPD GSM EDGE W CDMA LTE etc. while the air interface can comply with a wireless IP protocol e.g. IEEE 802.11 . The RAN includes a plurality of access points that serve UEs over air interfaces such as the air interfaces and . The access points in the RAN can be referred to as access nodes or ANs access points or APs base stations or BSs Node Bs eNode Bs and so on. These access points can be terrestrial access points or ground stations or satellite access points. The RAN is configured to connect to a core network that can perform a variety of functions including bridging circuit switched CS calls between UEs served by the RAN and other UEs served by the RAN or a different RAN altogether and can also mediate an exchange of packet switched PS data with external networks such as Internet . The Internet includes a number of routing agents and processing agents not shown in for the sake of convenience . In UE N is shown as connecting to the Internet directly i.e. separate from the core network such as over an Ethernet connection of WiFi or 802.11 based network . The Internet can thereby function to bridge packet switched data communications between UE N and UEs 1 . . . N via the core network . Also shown in is the access point that is separate from the RAN . The access point may be connected to the Internet independent of the core network e.g. via an optical communication system such as FiOS a cable modem etc. . The air interface may serve UE 4 or UE 5 over a local wireless connection such as IEEE 802.11 in an example. UE N is shown as a desktop computer with a wired connection to the Internet such as a direct connection to a modem or router which can correspond to the access point itself in an example e.g. for a WiFi router with both wired and wireless connectivity .

Referring to a server is shown as connected to the Internet the core network or both. The server can be implemented as a plurality of structurally separate servers or alternately may correspond to a single server. As will be described below in more detail the server is configured to support one or more communication services e.g. Voice over Internet Protocol VoIP sessions Push to Talk PTT sessions group communication sessions social networking services etc. for UEs that can connect to the server via the core network and or the Internet and or to provide content e.g. web page downloads to the UEs.

While internal components of UEs such as the UEs A and B can be embodied with different hardware configurations a basic high level UE configuration for internal hardware components is shown as platform in . The platform can receive and execute software applications data and or commands transmitted from the RAN that may ultimately come from the core network the Internet and or other remote servers and networks e.g. application server web URLs etc. . The platform can also independently execute locally stored applications without RAN interaction. The platform can include a transceiver operably coupled to an application specific integrated circuit ASIC or other processor microprocessor logic circuit or other data processing device. The ASIC or other processor executes the application programming interface API layer that interfaces with any resident programs in the memory of the wireless device. The memory can be comprised of read only or random access memory RAM and ROM EEPROM flash cards or any memory common to computer platforms. The platform also can include a local database that can store applications not actively used in memory as well as other data. The local database is typically a flash memory cell but can be any secondary storage device as known in the art such as magnetic media EEPROM optical media tape soft or hard disk or the like.

Accordingly an embodiment of the invention can include a UE e.g. UE A B etc. including the ability to perform the functions described herein. As will be appreciated by those skilled in the art the various logic elements can be embodied in discrete elements software modules executed on a processor or any combination of software and hardware to achieve the functionality disclosed herein. For example ASIC memory API and local database may all be used cooperatively to load store and execute the various functions disclosed herein and thus the logic to perform these functions may be distributed over various elements. Alternatively the functionality could be incorporated into one discrete component. Therefore the features of the UEs A and B in are to be considered merely illustrative and the invention is not limited to the illustrated features or arrangement.

The wireless communication between the UEs A and or B and the RAN can be based on different technologies such as CDMA W CDMA time division multiple access TDMA frequency division multiple access FDMA Orthogonal Frequency Division Multiplexing OFDM GSM or other protocols that may be used in a wireless communications network or a data communications network. As discussed in the foregoing and known in the art voice transmission and or data can be transmitted to the UEs from the RAN using a variety of networks and configurations. Accordingly the illustrations provided herein are not intended to limit the embodiments of the invention and are merely to aid in the description of aspects of embodiments of the invention.

Referring to the communication device includes logic configured to receive and or transmit information . In an example if the communication device corresponds to a wireless communications device e.g. UE A or B AP a BS Node B or eNodeB in the RAN etc. the logic configured to receive and or transmit information can include a wireless communications interface e.g. Bluetooth WiFi 2G CDMA W CDMA 3G 4G LTE etc. such as a wireless transceiver and associated hardware e.g. an RF antenna a MODEM a modulator and or demodulator etc. . In another example the logic configured to receive and or transmit information can correspond to a wired communications interface e.g. a serial connection a USB or Firewire connection an Ethernet connection through which the Internet can be accessed etc. . Thus if the communication device corresponds to some type of network based server e.g. server etc. the logic configured to receive and or transmit information can correspond to an Ethernet card in an example that connects the network based server to other communication entities via an Ethernet protocol. In a further example the logic configured to receive and or transmit information can include sensory or measurement hardware by which the communication device can monitor its local environment e.g. an accelerometer a temperature sensor a light sensor an antenna for monitoring local RF signals etc. . The logic configured to receive and or transmit information can also include software that when executed permits the associated hardware of the logic configured to receive and or transmit information to perform its reception and or transmission function s . However the logic configured to receive and or transmit information does not correspond to software alone and the logic configured to receive and or transmit information relies at least in part upon hardware to achieve its functionality.

Referring to the communication device further includes logic configured to process information . In an example the logic configured to process information can include at least a processor. Example implementations of the type of processing that can be performed by the logic configured to process information includes but is not limited to performing determinations establishing connections making selections between different information options performing evaluations related to data interacting with sensors coupled to the communication device to perform measurement operations converting information from one format to another e.g. between different protocols such as .wmv to .avi etc. and so on. For example the processor included in the logic configured to process information can correspond to a general purpose processor a digital signal processor DSP an ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration. The logic configured to process information can also include software that when executed permits the associated hardware of the logic configured to process information to perform its processing function s . However the logic configured to process information does not correspond to software alone and the logic configured to process information relies at least in part upon hardware to achieve its functionality.

Referring to the communication device further includes logic configured to store information . In an example the logic configured to store information can include at least a non transitory memory and associated hardware e.g. a memory controller etc. . For example the non transitory memory included in the logic configured to store information can correspond to RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. The logic configured to store information can also include software that when executed permits the associated hardware of the logic configured to store information to perform its storage function s . However the logic configured to store information does not correspond to software alone and the logic configured to store information relies at least in part upon hardware to achieve its functionality.

Referring to the communication device further optionally includes logic configured to present information . In an example the logic configured to present information can include at least an output device and associated hardware. For example the output device can include a video output device e.g. a display screen a port that can carry video information such as USB HDMI etc. an audio output device e.g. speakers a port that can carry audio information such as a microphone jack USB HDMI etc. a vibration device and or any other device by which information can be formatted for output or actually outputted by a user or operator of the communication device . For example if the communication device corresponds to UE A or UE B as shown in the logic configured to present information can include the display A of UE A or the touchscreen display B of UE B. In a further example the logic configured to present information can be omitted for certain communication devices such as network communication devices that do not have a local user e.g. network switches or routers remote servers such as the server etc. . The logic configured to present information can also include software that when executed permits the associated hardware of the logic configured to present information to perform its presentation function s . However the logic configured to present information does not correspond to software alone and the logic configured to present information relies at least in part upon hardware to achieve its functionality.

Referring to the communication device further optionally includes logic configured to receive local user input . In an example the logic configured to receive local user input can include at least a user input device and associated hardware. For example the user input device can include buttons a touchscreen display a keyboard a camera an audio input device e.g. a microphone or a port that can carry audio information such as a microphone jack etc. and or any other device by which information can be received from a user or operator of the communication device . For example if the communication device corresponds to UE A or UE B as shown in the logic configured to receive local user input can include the keypad A any of the buttons A or B through B the touchscreen display B etc. In a further example the logic configured to receive local user input can be omitted for certain communication devices such as network communication devices that do not have a local user e.g. network switches or routers remote servers such as the server etc. . The logic configured to receive local user input can also include software that when executed permits the associated hardware of the logic configured to receive local user input to perform its input reception function s . However the logic configured to receive local user input does not correspond to software alone and the logic configured to receive local user input relies at least in part upon hardware to achieve its functionality.

Referring to while the configured logics of through are shown as separate or distinct blocks in it will be appreciated that the hardware and or software by which the respective configured logic performs its functionality can overlap in part. For example any software used to facilitate the functionality of the configured logics of through can be stored in the non transitory memory associated with the logic configured to store information such that the configured logics of through each performs their functionality i.e. in this case software execution based in part upon the operation of software stored by the logic configured to store information . Likewise hardware that is directly associated with one of the configured logics can be borrowed or used by other configured logics from time to time. For example the processor of the logic configured to process information can format data into an appropriate format before being transmitted by the logic configured to receive and or transmit information such that the logic configured to receive and or transmit information performs its functionality i.e. in this case transmission of data based in part upon the operation of hardware i.e. the processor associated with the logic configured to process information .

Generally unless stated otherwise explicitly the phrase logic configured to as used throughout this disclosure is intended to invoke an embodiment that is at least partially implemented with hardware and is not intended to map to software only implementations that are independent of hardware. Also it will be appreciated that the configured logic or logic configured to in the various blocks are not limited to specific logic gates or elements but generally refer to the ability to perform the functionality described herein either via hardware or a combination of hardware and software . Thus the configured logics or logic configured to as illustrated in the various blocks are not necessarily implemented as logic gates or logic elements despite sharing the word logic. Other interactions or cooperation between the logic in the various blocks will become clear to one of ordinary skill in the art from a review of the embodiments described below in more detail.

Rich Communications Suite RCS in Internet Protocol IP Multimedia Subsystem IMS is a recently developed service type in the IMS domain. RCS generally refers to a set of communication services by which a client device e.g. a mobile device or a fixed device can update the capabilities of contacts in its address book in real time and thus enable rich communication. This can include for example Voice over LTE VoLTE video calls Instant Messaging IM file or image sharing etc. based on the real time capabilities of the contacts.

While low level operating system OS resources can be leveraged by client applications to implement RCS services each client application typically must be customized for operation on a particular platform on which it will execute. For example a client application configured for operation on Android OS devices needs to be coded by its developer to leverage any available Android specific RCS OS resources a client application configured for operation on Windows OS devices needs to be coded by its developer to leverage any available Windows specific RCS OS resources a client application configured for operation on iOS devices needs to be coded by its developer to leverage any available iOS specific RCS OS resources and so on. Also a client application configured for operation on client devices with different versions of an OS e.g. iOS Android etc. needs to be coded by its developer to leverage any available OS specific RCS OS resources for that version e.g. iOS 6 and iOS 7 may have different RCS access protocols that necessitate iOS Apps to be updated when the iOS is transitioned from version 6 to version 7 . So as used herein OS specific can be used as a reference to a specific type of OS as distinguished from other OS types or alternatively a specific version of a specific OS as distinguished from other OS types as well as other versions of the same OS type .

Today consumers are experiencing the power and the promise of enriched communication. Services and applications that have introduced buddy lists showing dynamically changing status and on line capabilities different messaging options and possibilities of adding content are just a few examples of the RCS experience. These capabilities are available on both PCs and mobile devices either of which can be referred to as UEs herein with open communication between devices and networks.

Referring to the RCS architecture includes a plurality of client applications or Apps 1 . . . N configured to directly access OS specific RCS resources on the UE. In other words Apps 1 . . . N include code written and tested by their respective developers to implement the particular RCS resource signaling required to access the RCS resources on the OS of the UE on which they are deployed. Generally the manner in which RCS resources are accessed is specific to the OS such that an Instant Messaging application on an Android OS device cannot access RCS resources using the same signaling protocol as would be required on a Windows OS device. The OS specific RCS resources can interact with a communications interface e.g. a WLAN MODEM a cellular MODEM etc. through which the RAN or AP can be accessed for interacting with network side RCS resources. The RCS architecture shown in can correspond to a multi processor environment in at least one implementation whereby processing tasks are divided between an application processor and a separate modem processor on the client device or UE.

Referring to the RCS architecture A includes a plurality of client applications A A or Apps 1 . . . N configured to access a shared RCS interface A through which OS specific RCS resources A are accessed. In an example the shared RCS interface A can be implemented as a set of APIs that is made available to Apps 1 . . . N via a common protocol cross platform RCS interface protocol . The cross platform RCS interface protocol used by Apps 1 . . . N to communicate with the shared RCS interface can be the same irrespective of the OS type OS version or platform of the client device. Thus in an example a developer that develops an Instant Messaging application for implementation on an Android OS device can write code pertaining to RCS access that is re used for implementation of the Instant Messaging application on an iOS device or Windows OS device. Developers are able to generate cross platform code in this manner because the shared RCS interface A itself is configured to map the OS specific RCS resource access protocol to the cross platform RCS interface protocol for communicating between Apps 1 . . . N and the shared RCS interface A. Accordingly the shared RCS interface A will be implemented in a different manner between platforms but the cross platform RCS resource access protocol is maintained the same to simplify the development process for the RCS client applications. In other words unlike Apps 1 . . . N in do not need to each be hardcoded by their respective developers with the particular RCS resource signaling protocol required to access the RCS resources on the OS of the UE on which they are deployed but can instead use the shared cross platform RCS resource access protocol via interaction with the shared RCS interface A and rely upon the shared RCS interface A for the lower level OS specific RCS protocol conversion.

Referring to the OS specific RCS resources A can interact with a communications interface A e.g. a WLAN MODEM a cellular MODEM etc. through which the RAN or AP can be accessed for interacting with network side RCS resources. The RCS architecture A shown in can correspond to a multi processor environment in at least one implementation whereby processing tasks are divided between an application processor and a separate modem processor on the UE.

According to some embodiments Apps 1 . . . N may operate in accordance with certain rules governing their operation in order to operate in compliance with the shared RCS interface A. These rules may include one or more of 

Further versioning may play an important role for the shared RCS interface A. For example a first set of APIs that constitute the shared RCS interface A may be marked as Version 1. Version 1 RCS interfaces may be based on RCS Enhanced RCS E and do not have Presence or Open Mobile Alliance OMA Converged IP Messaging CPM support. A second set of APIs that constitute a different shared RCS interface A may be marked as Version 2 with presence support and or OMA CPM support. In this example if one of Apps 1 . . . N at runtime needs to decide before its initialization which API set version is supported by the shared RCS interface A on the device for its own initialization then that can be achieved by querying the device for its supported version set. Version of API Set can also factor into the real world environment where one operator specifies the use of different RCS features e.g. X features vs. Y Features.

In some scenarios a service implementation of the shared RCS interface A e.g. AIDL B or RCS API wrapper C can be an RCS implementation running on a device in the form of service and any application can use share RCS functionality. An advantage to a service implementation is that irrespective of whether the shared RCS interface A is a 3party app or an OEM app service is ready to serve multiple clients. With this feature developers can take advantage of already existing IM or File Share functionality from the device.

Another option for implementation of the shared RCS interface A is a library implementation as opposed to a service implementation . In a service implementation application and service communication is based on platform supported Inter process communication IPC . From an application perspective a service implementation of the shared RCS interface A is an API call but in actuality data is copied and transferred over the socket which becomes a drawback for video buffering. Video buffers can be large in size compared to other API calls so a library implementation for the shared RCS interface A can be used for implementations involving media. In some instances a library implementation typically requires that the library be loaded locally in its own system unlike services which can be distributed.

As discussed above the shared RCS interface A can be configured for operation on devices that run different OSs such as Java based Android C COM based Windows C based QNX IOS different versions of the same OS etc. The shared RCS interface A can be configured for each OS type and or OS version such that the same access protocol can be used by developers for configuring the individual client applications so that the developers do not need to concern themselves with the low level OS requirements for interfacing with the OS Specific RCS resources A.

The operation of the shared RCS interface A can be tested on different platforms. The tests can be implemented using automated API specific tests or through an independent testing application. Unless automated application testing is typically a manual effort which needs to be repeated manually for every device. However an automated test suite for an API to test the shared RCS interface A on each platform can help to reduce the manual efforts of developers and results can be produced during nightly execution. An automated API test suite will also provide confidence to 3party developers that a device will honor the contract of an API and it is certified as being compliant with the cross platform RCS resource access protocol. The API test suite can be designed for operation on each relevant platform where the shared RCS interface A will be deployed such as Java based and C based platforms. Also the API test suite can also be used for Joyn certification process on any device.

APIs such as the shared RCS interface A are generally designed in a simulated environment on a computer and then moved to the target deployment platform for actual testing. Thus to help developers code their client applications for operating with the shared RCS interface A on each deployment platform e.g. Android Windows etc. a cross platform SDK plug in can be provided to the developers which will help to permit their code development for compliance with the shared RCS interface A. After a particular client application is developed using the cross platform SDK plugin the client application can transition to a Joyn Certified device shall be seamless to a developer.

Referring to the Android RCS architecture B is shown as partitioned between resources that are managed by an application processor B and resources that are managed by a modem processor B. With respect to the application processor side a plurality of RCS client applications B are shown which can correspond to Apps 1 . . . N from . In particular the plurality of RCS client applications B are shown to include an Enhanced Address Book EAB Capability Discovery CD client application an IM client application a File Share client application an Image Share client application and a Video Share client application. In the shared RCS interface A corresponds to Android Interface Definition Language AIDL module B which can be characterized as an RCS server component that is executed as a Linux process on the UE and the AIDL module B is accessible to each of the plurality of RCS client applications B. The AIDL module B is configured to interact with Android OS specific RCS resources B via a Java Native Interface JNI B. The Android OS specific RCS resources B include but are not limited to a set of enablers B a Message Session Relay Protocol MSRP module B a Capability Discovery CD module B a Session Initiation Protocol SIP module B a configuration module B and a data signaling traffic module B. The data signaling traffic module B may form part of the communications interface A from which may further include WLAN modem B as well as an IMS on modem for voice and video telephony B and radio access technology RAT specific logic B implemented at the modem processor side. Generally the components described above are configured to interact with each other over various communication paths such as LTE signaling or data paths WLAN signaling or data paths XCAP XDM for presence etc.

Referring to the Windows RCS architecture C is shown as partitioned between resources that are managed by an application processor C and resources that are managed by a modem processor C. With respect to the application processor side a plurality of RCS client applications C are shown which can correspond to Apps 1 . . . N from . In particular the plurality of RCS client applications C are shown to include an EAB capability discovery client application an IM client application a File Share client application an Image Share client application and a Video Share client application. In the shared RCS interface A corresponds to RCS API Wrapper module C which can be accessed as an API by the respective RCS client applications C. The RCS API Wrapper module C can thereby be called by the RCS client applications C as needed to mediate interaction with Windows OS specific RCS resources C. The Windows OS specific RCS resources C include but are not limited to a set of enablers C a Message Session Relay Protocol MSRP module C a Capability Discovery module C a Session Initiation Protocol SIP module C a configuration module C and a data signaling traffic module C. The data signaling traffic module C may form part of the communications interface A from which may further include WLAN modem C as well as an IMS on modem for voice and video telephony C and radio access technology RAT specific logic C implemented at the modem processor side. Generally the components described above are configured to interact with each other over various communication paths such as LTE signaling or data paths WLAN signaling or data paths XCAP XDM for presence etc.

Referring to instead of generating OS specific or natively supported RCS resource signaling for implementing the RCS resource access determined at A App1 configures the RCS resource signaling based on the cross platform RCS resource access protocol A and then sends the configured RCS resource signaling to the shared RCS interface A A. In an example the OS that is running on the client device may be configured to automatically intercept messaging from App1 that is exchanged with the shared RCS interface A and apply an OS specific wrapping thereto. Thus the configured RCS resource signaling that is sent at A optionally undergoes the above noted OS specific wrapping as shown in by dotted line A. As will be appreciated this means that the signaling that actually arrives at the shared RCS interface A at A can potentially be in an OS specific format that first requires the shared RCS interface A to unwrap the message in order to extract the configured RCS resource signaling that was initially formatted by App1 in compliance with the cross platform RCS resource access protocol. Any OS specific wrapping applied to messaging between App1 and the shared RCS interface A will typically be transparent to App1 and thereby does not need to be taken into account by a developer of App1. This permits the developer of App1 to devote its efforts to ensuring that App1 is compliant with the cross platform RCS resource access protocol without specifically concerning itself with any OS specific wrapping that may occur via interaction with the shared RCS interface A. The shared RCS interface A receives the configured RCS resource signaling and translates or maps the configured RCS resource signaling into conformance with the OS specific RCS resource access protocol i.e. the RCS resource access protocol that is natively supported on the OS that is running on the client device or UE A and the shared RCS interface A then sends the translated RCS resource signaling to the OS specific RCS resources A to obtain the requested access for App1 A. In an example the translation or mapping operation that occurs at A can be based on a look up table that is configured to map cross platform RCS resource signals to natively supported or OS specific RCS resource signals that are used by the particular OS used on the relevant platform for this particular client device or UE . The OS specific RCS resources A receives the translated RCS resource signaling that conforms with its OS specific or native RCS resource access protocol and executes an RCS resource operation A. The RCS resource operation executed at A can potentially involve interaction with a remote server e.g. a presence server an IM server etc. such as application server .

While shows how RCS resource signaling from individual RCS client applications such as App1 can be mediated by the shared RCS interface A it will be appreciated that RCS resource signaling can also flow from the OS specific RCS resources A to App1 as described below with respect to .

Referring to the OS specific RCS resources A generate RCS resource signaling for conveying the RCS resource data in accordance with the OS specific or natively supported RCS resource access protocol as in the conventional art B. However unlike the conventional art the OS specific RCS resources A delivers the RCS resource signaling to the shared RCS interface A instead of directly delivering the RCS resource signaling to an RCS client application that is custom coded to interpret the OS specific RCS resource access protocol B.

The shared RCS interface A receives the configured RCS resource signaling and translates or maps the configured RCS resource signaling into conformance with the cross platform RCS resource access protocol i.e. the RCS resource access protocol that is used between RCS client applications and shared RCS interfaces on a variety of platforms B and the shared RCS interface A then sends the translated RCS resource signaling to App1 to deliver the RCS resource data B. In an example the OS that is running on the client device may be configured to automatically intercept messaging from the shared RCS interface A that is exchanged with App1 and apply an OS specific wrapping thereto. Thus the configured RCS resource signaling that is sent at B optionally undergoes the above noted OS specific wrapping as shown in by dotted line B. As will be appreciated this means that the signaling that actually arrives at the shared RCS interface A at B can potentially be in an OS specific format that first requires App1 to unwrap the message in order to extract the configured RCS resource signaling that was initially formatted by the shared RCS interface A in compliance with the cross platform RCS resource access protocol. Any OS specific wrapping applied to messaging between App1 and the shared RCS interface A will typically be transparent to App1 and thereby does not need to be taken into account by a developer of App1. This permits the developer of App1 to devote its efforts to ensuring that App1 is compliant with the cross platform RCS resource access protocol without specifically concerning itself with any OS specific wrapping or unwrapping that may occur via interaction with the shared RCS interface A. In an example the translation or mapping operation that occurs at B can be based on a look up table that is configured to map cross platform RCS resource signals to natively supported or OS specific RCS resource signals that are used by the particular OS used on the relevant platform for this particular client device or UE .

While illustrate example implementations that are generic in terms of the platform or OS on which they are implemented examples of platform specific implementations of will now be provided.

Referring to assume that the client device determines to implement a Capability Discovery CD function via the Android OS specific RCS resources B at A. Under this assumption App1 sends a CreateCDService message to instantiate the CD service in accordance with the cross platform RCS resource access protocol to the AIDL module B A e.g. similar to A of and the AIDL module B translates the cross platform CreateCDService message into a natively used CreateCDService message that conforms to the Android OS specific RCS resource protocol and then delivers the translated CreateCDService message to the Android OS specific RCS resources B over the JNI B A e.g. similar to A of . App1 also sends a cross platform getCDservice message to the AIDL module B A. In an example the getCDservice message at A is a miss through the JNI B and is thereby not translated and forwarded to the JNI B. App1 sends a cross platform CDService AddListener message for adding a contact to the CD service in accordance with the cross platform RCS resource access protocol to the AIDL module B A e.g. similar to A of and the AIDL module B translates the cross platform CDService AddListener message into a natively used CDService AddListener message that conforms to the Android OS specific RCS resource protocol and then delivers the translated CDService AddListener message to the Android OS specific RCS resources B over the JNI B A e.g. similar to A of .

Referring to App1 sends a cross platform RequestCDInfo message for request CD information regarding one or more of its contacts or listeners in accordance with the cross platform RCS resource access protocol to the AIDL module B A e.g. similar to A of and the AIDL module B translates the cross platform RequestCDInfo message into a natively used RequestCDInfo message that conforms to the Android OS specific RCS resource protocol and then delivers the translated RequestCDInfo message to the Android OS specific RCS resources B over the JNI B A e.g. similar to A of . In response to the RequestCDInfo message the Android OS specific RCS resources provides a natively used CDListener CDUpdate message that provides the requested CD information for the contact s over the JNI B to the AIDL module B A e.g. as in B of and the AIDL module B translates the native RequestCDInfo message into a cross platform RequestCDInfo message and then delivers the translated RequestCDInfo message to App1 A e.g. similar to B of .

While not shown explicitly in the cross platform messages sent from App1 to the AIDL module B at A A A and or A may be wrapped with an OS specific wrapping that requires the AIDL module B to unwrap the incoming message in order to extract the cross platform messages embedded within the wrapping. Similarly while not shown explicitly in the cross platform message sent from the AIDL module B to App1 at A may be wrapped with an OS specific wrapping that requires App1 to unwrap the incoming message in order to extract the cross platform message embedded within the wrapping.

Referring to assume that the client device determines to implement a Capability Discovery CD function via the Windows OS specific RCS resources B at A. Under this assumption App1 in conjunction with execution of the RCS API wrapper C configures and sends a CreateCDService message to instantiate the CD service in accordance with the natively supported RCS resource access protocol for Windows OS to the RCS resources C B e.g. similar to A A of . App1 in conjunction with execution of the RCS API wrapper C also configures and sends a CDService GetCDInfo message in accordance with the natively supported RCS resource access protocol for Windows OS to the RCS resources C B e.g. similar to A A of . Execution of the CDService GetCDInfo message by the RCS resources C triggers invocation of SIP module C to trigger transmission of a message to a remote device or server to query the capabilities of the specified contact s B and the remote device or server responds with a K messages that indicates the capabilities of the specified contact s B. The RCS resources C report the capabilities to App1 via a CDLISTENER CDUPDATE message B. At this point with the help of RCS API wrapper C App1 translates the native Windows message received at B into the cross platform version which is then recognizable by App1.

As will be appreciated by one of ordinary skill in the art it would be tedious to provide flowcharts similar to on all potential operation systems and or for all potential RCS resource signaling. For this reason in lieu of additional Figures an example look up table that provides a mapping between cross platform RCS resource signaling and OS specific RCS resource signaling for different operating systems is provided below in Table 1. Table 1 is not intended to be an exhaustive list of RCS resource signaling conversions but is rather provided to help those of ordinary skill in the art to better understand potential use cases in accordance with embodiments of the invention.

Accordingly as shown in the column Android OS specific RCS Resource Signaling flow for the row Instantiate Capability Discovery CD Service a cross platform CreateCDService message that arrives at the AIDL is mapped or translated by the AIDL into a CreateCDService message that conforms to an Android or Java format which can then translated by the AIDL into a CreateCDService message that conforms to a Windows or C based format e.g. because C based programs can be configured for execution on a Linux OS even though Android is primarily Java on the Linux OS and the AIDL then disseminates the C based CreateCDService message for delivery to Android specific RCS resources which transmits the C based CreateCDService message to the network via the modem. Likewise as shown in the column Windows OS specific RCS Resource Signaling flow for the row Instantiate Capability Discovery CD Service a cross platform CreateCDService message that arrives at the RCS API Wrapper is mapped or translated by the RCS API Wrapper into a CreateCDService message that conforms to a Windows or C based format and the RCS API Wrapper then disseminates the C based CreateCDService message for delivery to Windows specific RCS resources which transmits the C based CreateCDService message to the network via the modem.

Thus the cross platform CreateCDService from Table 1 above can be mapped and delivered similar to the process of . In this respect the cross platform messages CDService AddListener RemoveListenerCD SERVICE DestroyCDService CreatelMService IMService AddListerner and IMService RemoveListener are similar in the sense that these messages originate from an RCS client application such as App1 and are then translated into the OS specific RCS resource access protocol for network transmission. However other types of messages correspond to application terminated messages that arrive from the network and are then translated into the cross platform messages such as IMSession SendMessage from Table 1 above which can be mapped and delivered similar to the process of .

Again Table 1 above is characterizes a limited set of examples and other cross platform RCS resource signaling mappings could relate to addition signals for CD or IM RCS services or to different types of RCS services altogether e.g. Image Share File Transfer or File Share Configuration Service Video Share etc. .

Those of skill in the art will appreciate that information and signals may be represented using any of a variety of different technologies and techniques. For example data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

Further those of skill in the art will appreciate that the various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The methods sequences and or algorithms described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal e.g. UE . In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

In one or more exemplary embodiments the functions described may be implemented in hardware software firmware or any combination thereof. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a computer readable medium. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also any connection is properly termed a computer readable medium. For example if the software is transmitted from a website server or other remote source using a coaxial cable fiber optic cable twisted pair digital subscriber line DSL or wireless technologies such as infrared radio and microwave then the coaxial cable fiber optic cable twisted pair DSL or wireless technologies such as infrared radio and microwave are included in the definition of medium. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

While the foregoing disclosure shows illustrative embodiments of the invention it should be noted that various changes and modifications could be made herein without departing from the scope of the invention as defined by the appended claims. The functions steps and or actions of the method claims in accordance with the embodiments of the invention described herein need not be performed in any particular order. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

