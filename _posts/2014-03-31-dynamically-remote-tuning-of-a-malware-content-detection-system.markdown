---

title: Dynamically remote tuning of a malware content detection system
abstract: According to one embodiment, an apparatus comprises a processor and memory. Communicatively coupled to the processor, the memory comprises one or more detection modules each being software that is configurable to enable, disable or modify capabilities for that corresponding detection module. A first detection module the detection modules, when executed by the processor, conducts a first capability including an analysis of a received object to determine if the received object is associated with a malicious attack. The analysis may be altered upon receipt of a configuration file that is substantially lesser in size than the software forming the first detection module and includes information to alter one or more rules controlling the first capability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223972&OS=09223972&RS=09223972
owner: FireEye, Inc.
number: 09223972
owner_city: Milpitas
owner_country: US
publication_date: 20140331
---
Embodiments of the disclosure relate to the field of cyber security. More specifically one embodiment of the disclosure relates to a system and method for increasing the accuracy in detecting objects under analysis that are associated with a malicious attack and enhancing classification efficiency by reducing errors in the form of false positive and or false negatives.

Over the last decade or so malicious software commonly referred to as malware has become a pervasive problem for electronic devices in communication over a network. In general malware is computer code that may execute an exploit namely information that attempts to take advantage of a vulnerability in software running on a targeted computer in order to adversely influence or attack normal operations of that computer. For instance an exploit may be adapted to take advantage of a vulnerability in order to either co opt operation of a computer or misappropriate modify or delete data stored within the computer.

More specifically malicious network content is a type of malware that may be distributed over a network such as malware hosted by a website being one or more servers operating on a network according to a hypertext transfer protocol HTTP standard or other well known standard. For instance malicious network content may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the malicious website. As an illustrative embodiment the malicious network content may be embedded within objects associated with web pages hosted by the malicious website or may enter a computer upon receipt or opening of an electronic mail email message. For example an email message may contain an attachment such as a Portable Document Format PDF file with embedded malicious executable programs.

Various processes and appliances have been employed to detect the presence of malicious network content on a computer. For instance a two phase malware detection appliance currently exists for detecting malware contained in network traffic. However both phases static and dynamic conducted by this conventional malware detection appliance rely heavily on hard coded rules to control their operations. More specifically conventional malware detection appliances may include a factory installed operating system OS software image along with a corresponding release of a software image package for use in the dynamic phase. The software image package includes logical monitors for a virtual run time environment in the dynamic phase. In the event of the customer installed malware detection appliance experiencing significant incidences such as a high rate of false positives or false negatives in malware detection for example customers may be provided with a new version of the OS software image or a new version of the software image package. However such releases are slow to fruition normally taking 4 6 months including development and quality assurance testing . Moreover the new software image package may still not be tuned to threats e.g. Advanced Persistent Threats APT attacks that target specific IT resources at a specific customer enterprise or agency and may be days or weeks behind malware developments e.g. introduced by malware authors or self generated by polymorphic malware as experienced by customers.

Various embodiments and aspects of the disclosure will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative and should not be construed as limiting the invention. While specific details are described to provide a thorough understanding of various embodiments of the disclosure in certain instances well known or conventional details are not described in order to provide a more concise discussion.

Embodiments of the disclosure disclose generation and release of a fully parameterized version of image software that controls operations of one or more engines within a malware detection appliance referred to as malicious content detection MCD system where from time to time values of selected parameters of the image software may be enabled disabled or changed to tune the MCD system. The term fully parameterized identifies software that includes parameters intended by the software developer to be changed perhaps in real time after deployment based on changes to data within a configuration file.

According to one embodiment of the disclosure a configuration file refers broadly to an item containing data specifying or representing parameter values in a structured or unstructured format. The parameter values may be used to define variables constants conditions lists or portions thereof tables or portions thereof templates or portions thereof and other data sets that can be referenced and used by one or more processes of the detection engines e.g. dynamic analysis engine static analysis engine emulation engine and or classification engine . The parameter values are used to change or control one or more operations and functions capabilities performed by the processes.

In another embodiment a configuration file refers broadly to an object containing data specifying or representing both parameter values as described above and operation rules. Operation rules may be any logical engines in their respective operations as part of the MCD system and may be used by and tune the operation s of a corresponding engine. The operation rules may be used e.g. executed or otherwise processed for example in implementing any and all heuristic deterministic inference correlation logic or the like utilized by those engines. Further examples of more practical import for the use of operation rules in detection and classification of content as malware are given elsewhere in this specification.

The parameter values may be associated with one or more operation rules where the rule or rules may be contained depending on the embodiment within the configuration file or hard coded within the processes or other logic of the detection engines. The parameter values may change or control tune the associated rules including their applicability and action effect with respect to the operation s . To this end in some embodiments the engines and or computer programs that when executed implement aspects of the engines may be specifically designed and developed in such manner as to reference parameters which during run time assume values specified by the contents of the configuration file. This may be referred to as parameterized . Fully parameterized describes detection engines that are optimized during the design and development process to obtain a maximum level of flexibility for later configuration and tuning through use of a configuration file as described herein. Such optimization should take into account and balance practical considerations including risks and benefits with respect to operational aspects of the engines that are best modified through an update to a configuration file or via a new factory originating formal release of a software image package.

Rendering the MCD system more efficacious at malware detection in light of recently detected evolved malware and improving overall performance the tuning of selected parameters of the software image may be accomplished by a download of a software image update in the form of the configuration file. According to one embodiment of the disclosure the configuration file is configured to tune one or more detection engines including a static analysis engine an emulation engine a dynamic analysis engine and or a classification engine set forth in . The downloading of the configuration file may be handled from a factory or authorized software distributor or the configuration file may be provided or modified by the customer or its IT or security provider . For the later tuning scheme a customer representative may enter changes to the configuration file through a user interface in order to tune one or more of the above identified engines to better thwart threats e.g. APT attacks that may specifically target the customer or its industry or otherwise address the customer s special security concerns.

As described below the configuration file can be loaded into a targeted detection engine or engines to change control its operation how it functions and thus tune configure the detection engine s or even customize the detection engine. Changes to the contents of the configuration file e.g. the parameter values contained therein may enable or disable certain features e.g. capabilities of the MCD system or may modify its capabilities so that one capability is dependent on another.

For instance the software image may support W X Y Z capabilities where a first subset X of capabilities e.g. X 3 X 80 may be always enabled to provide the foundational operation of the MCD system. Similarly a second subset Y of capabilities e.g. Y 1 Y 15 may be turned on or off by modifying the configuration file and optionally a third subset Z of capabilities e.g. Z 1 Z 5 may be experimental to test for example new capabilities that may impact detection efficacy or performance when enabled or disabled within the customer s deployment. Herein for this example the fully parameterized software image includes parameters to tune i all of the second subset of capabilities ii optionally all of the third subset of capabilities and iii potentially depending on developer preferences at least some of the first subset of capabilities.

Based on dynamic tuning of the MCD system the response time for addressing identified significant incidences though software changes for the detection engines is reduced from months to days or even hours. Additionally dynamic tuning as described herein eliminates the need for extremely high bandwidth requirements associated with downloading a software image package since the configuration file may be a small fraction of its size.

More specifically embodiments of the disclosure reside in techniques for configuring tuning a malicious content detection MCD system through the configuration file by adjusting parameters and or operation rules controlling the operations of logic responsible for the analysis of incoming objects to determine whether such objects are associated with a malicious attack. The parameter change and or operation rule adjustment customizes the MCD system for enhanced detection and classification efficiency in order to reduce false positives and or false negatives.

According to one embodiment of the disclosure the MCD system includes a plurality of configurable detection engines including a configurable dynamic analysis engine e.g. virtual execution logic with one or more virtual machines VMs for processing objects under analysis and a configurable classification engine operable in response to observed behaviors within the dynamic analysis engine for classifying an object under analysis as malware or benign. The configurable detection engines are part of fully parameterized software uploaded into the MCD system at installation.

These detection engines are at least partially controlled by parameters and or operation rules that are configurable via the configuration file through network based update paths and of or local update paths as shown in . The network based update paths enable updating through a management system automatically or manually through a user interface UI in order to receive a configuration file from a remotely located source e.g. factory authorized software distributor off site network administrator etc. while the local update paths enable updating locally by a customer or its IT or security provider . The updates may be conducted on a subscription basis.

In particular the MCD system may be configured tuned in real time by loading a configuration file into one or more of the detection engines in order to alter one or more parameters and or operation rules associated with a dynamic analysis rule and perhaps change certain capabilities of the MCD system. The altering of one or more parameters herein parameter s may be used to effectively add a new dynamic analysis rule by setting certain parameters associated with a pre loaded rule or setting a parameter that commences compliance with the rule during dynamic analysis disable a dynamic analysis rule by clearing parameters associated with a pre loaded rule or setting a parameter to disable compliance with the rule or modify update a dynamic analysis rule by activating and or deactivating one or more parameters associated with a pre loaded rule so as to effectuate a change in operation. Additionally besides adjusting parameters associated with a pre existing rule for the detection engine it is contemplated that information associated with a new rule may be uploaded. Hence alteration of an operation rule may be conducted by adding data for an entire rule or adding disabling or modifying one or more parameters associated with a pre existing rule.

Additionally it is contemplated that as an alternative or an addition to a configurable dynamic analysis engine the MCD system may further include a configurable static analysis engine and or a configurable emulation engine. Parameters associated with rules controlling the operations of these detection engines may be altered in real time or new rules may be uploaded or modified as described above.

It is contemplated that according to one embodiment of the disclosure a dynamic analysis rule may specify a particular type of monitor e.g. logical component to monitor behaviors a physical component to monitor behaviors etc. and one or more corresponding parameters may be configured to alter the number or types of monitors that are in operation enabled within a VM of the dynamic analysis engine. Another example of a dynamic analysis rule may be an operation rule that specifies a particular type pattern or combination of observed behaviors that are associated with a malicious attack and therefore lead to classifications of suspect objects as malware. One example of a classification rule may be associated with a threshold computing scheme where certain parameters provided by a configuration file are used to adjust weighting of scores provided from the static analysis engine emulation engine and or the dynamic analysis engine. These types of operation rules for monitoring and for classification for example may be interdependent and coordinated by parameters from the configuration file to enhance detection and classification efficiency.

Rule generation may involve a human guided learning or machine learning. The machine learning protocols may be designed to provide effective monitoring arrangements to observe behaviors during dynamic processing in a virtual environment of known malware and non malware samples. This approach may identify monitored behaviors or patterns combinations of behaviors with a high correlation to malware. The initial operation rules and or values for parameters selected for the rules may be based at least in part on metadata of suspicious traffic that specifies context for the suspect object such as its file type e.g. Word document PDF document Flash executable operating system type and version application type and version etc. Using the configuration file parameters or perhaps rules themselves may be pushed or otherwise provided to the MCD system through a management system such as a private network management system a central management system e.g. cloud management system or local management system or locally via a user interface UI of the MCD system.

It may be useful to describe specific practical examples of use of the configuration file to control adjust operation of the MCD system. Embodiments of the disclosure apply a configuration to executable software components of the MCD system. For instance the dynamic analysis engine may be configured to intercept or hook system calls Application Programming Interfaces APIs and other points of interaction between processes running within the dynamic analysis engine. This configuration may be tuned by modifying parameters associated with particular rules in order to intercept only a subset of these points of interaction that may be associated with for example certain known types of prevalent malware certain known prevalent families of malware etc.

As an example an enterprise may have experienced an APT attack characterized by certain types of exploits and parameter values may be provided to better tune configure the dynamic analysis engine to detect behaviors associated with such exploits. More specifically the APT actor may target a specific domain name user name IP address or subnet address or may seek a specific file type e.g. Excel file . The management system may provide a user interface to allow the customer to insert e.g. in an appropriate interactive field specific values for the above names addresses or file types and these values can be stored in the configuration file and read into the appropriate engine s to customize its operation to the needs concerns of the customer. This template which refers to an IT cyber security organization s view of a set of parameters suitable to thwart an APT attack including both general parameters directed to general characteristics and general behaviors common to APT actors plus user specified parameters directed to certain APT malware or families of APT malware that target a particular resource and other parameters may control weighting of both those characteristics behaviors for purposes of scoring .

In some embodiments of the disclosure the classification engine may also apply operation rules included in the content updates to find correlations between the points of interaction and for example the prevalent or in other situations newly discovered malicious behavior. The malware classification may be based on context specific classification rules and or parameters utilized by the classification rules associated with a particular object under analysis.

When identified through the learning processes described above parameter values for establishing new rules or modifying existing rules can be pushed to the dynamic analysis engine and or the static analysis engine and or emulation engine from a management system. Because these light weight updates consist of rules e.g. complete rules or portions of rules such as parameter values instead of complete update software images the size of the necessary update is reduced and may occur more frequently to more quickly respond to new threats.

In some embodiments of this disclosure light weight updates through downloading of a configuration file via local update paths or network based update paths may be used to provide customization of the detection engines e.g. dynamic analysis engine static analysis engine and or emulation engine and or provide updates the MCD system in an agile fail safe manner. These updates may place logic within the MCD system into a new operating state or conduct a rollback operation to return the logic to a former operating state. Hence different features of the detection engines may be configurable via this update mechanism. Regarding customization as an illustrative case a security centric customer may wish to sacrifice system throughput for additional detection efficacy resulting from a more exhaustive detection engine posture. With regard to update management of the MCD system the use of light weight configuration files may enable the MCD system to meet stringent customer service level agreements which dictate the mandated response to detecting fixing updating of reported issues software defects within time bandwidth or other constraints for which a new release or patch would not be practical or possible.

There are many methods for an attacker to upload malicious code into programs running on a client device. From a detection perspective multiple rules or methods may be employed to capture this behavioral attack. It is envisioned any operation rule may have a few unknown cases which may result in false positives and or false negatives. Hence in many situations it is advantageous to tune operation rules through rule additions disablements or modifications in order to improve filtering of malicious benign objects during dynamic analysis instead of relying on filtering at a later stage in the classification engine. For instance increased or targeted filtering inside of the dynamic analysis engine may produce more effective operation rules thereby eliminating the passing of superfluous information sometimes referred to as noise downstream to correlation engine and improve accuracy of object classification at the correlation engine.

Additionally light weight content based updates in the form of a configuration file are useful to the creation of a robust release scheme for altering operation rules and other features of the MCD system automatically or manually through the management system. Given the ability through human interaction machine learning and or auto generation of the detection and classification features of the detection engines may be dynamically updated tuned. With the update mechanics in place changes in malware detection features may be release at a more rapid pace then validated and tuned in the field. As a result features of the detection engines may be disabled enabled or used to activate more expansive malware detection capabilities e.g. apply more resources if increased functionality is desired . In another illustrative case malware detection features of the detection engines may be tuned with respect to client device type or overall platform deployment. For example a deployment of any email security platform may enable certain features in a Security Centric posture that would typically not be enabled.

Exemplary embodiments may include configuring the dynamic analysis engine to hook specific types of system calls e.g. system calls to particular APIs e.g. calls to Sleep function etc. and configuring the classification engine to associate a rule specified pattern of system calls to particular APIs e.g. calls to Sleep function etc. as associated with malware. An operation rule would be created for that pattern and pushed to any detection engine such as the dynamic analysis engine the static analysis engine and or the emulation engine.

Yet another exemplary embodiment may include configuring the classification engine by modifying parameter values associated with the thresholds against which dynamic analysis scores static analysis scores and or emulation scores are compared. Also the content updates may adjust the operating state of the prioritization logic and or score determination logic in the classification engine to assign certain malicious behaviors identified through the rules a greater weight in the identification of the suspect object as malicious.

The configuration of the static analysis engine as well as the emulation engine may be accomplished in a similar fashion as described above. For example blacklists or whitelists of known malicious websites and non malicious websites respectively may be used for matching sources URLs of incoming traffic being examined by a static analysis engine. These exclusion and inclusion lists may be readily updated with new entries or existing entries may be removed through configuration file parameter values specifying the URLs.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but is not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of a non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term object generally refers to a collection of data such as a group of related packets normally having a logical structure or organization that enables classification for purposes of analysis. For instance an object may be a self contained element where different types of such objects may include an executable file non executable file such as a document or a dynamically link library a Portable Document Format PDF file a JavaScript file Zip file a Flash file a document for example a Microsoft Office document an email downloaded web page an instant messaging element in accordance with Session Initiation Protocol SIP or another messaging protocol or the like.

The term flow generally refers to a collection of related objects normally communicated during a single communication session e.g. Transport Control Protocol TCP session between a source e.g. client device and a destination e.g. server .

A message generally refers to information transmitted as information in a prescribed format where each message may be in the form of one or more packets or frames or any other series of bits having the prescribed format.

The term transmission medium is a physical or logical communication path with a client device which is an electronic device with data processing and or network connectivity such as for example a stationary or portable computer including a desktop computer laptop electronic reader netbook or tablet a smart phone server mainframe signal propagation electronics e.g. router switch access point base station etc. video game console or wearable technology. For instance the communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In certain instances the term verified are used herein to represent that there is a prescribed level of confidence or probability on the presence of an exploit within an object under analysis. An exploit may be generally construed as information e.g. executable code data command s etc. that attempts to take advantage of a vulnerability such as a coding error or artifact in software e.g. computer program that allows an attacker to alter legitimate control flow during processing of the software by an electronic device. The altering of legitimate control flow may cause the electronic device to experience anomalous e.g. undesirable unexpected irregular etc. behaviors.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Techniques for configuring tuning a malicious content detection MCD system through real time adjustment of operation rules and or parameters in order to enhance detection and increase the accuracy in classification of malicious and benign objects are described herein. According to one embodiment as shown in a MCD system includes but is not limited to a first detection engine e.g. a static analysis engine a second detection engine e.g. a dynamic analysis engine a classification engine and reporting logic . Optionally the MCD system may further include a third detection engine in addition to or as an alternative to first detection engine and or second detection engine .

In response to receiving a flow from a source e.g. network where the flow may include one or more objects to be analyzed a determination is made by the first detection engine and or a second detection engine as to whether one or more objects hereinafter object s within the flow should be classified as malicious. In other words the objects are analyzed to determine whether they are part of a malicious attack. Herein the object s may be information within the flow or flow itself which is part of the network traffic traveling over a transmission medium of a network e.g. a wired or wireless local area network a wide area network etc. that is captured by the MCD system or an intermediary device such as a network interface. Alternatively the object s may be manually submitted to the MCD system via a user interface UI e.g. a Web portal which is illustrated as part of the reporting logic and or network resources in .

A malicious attack may be defined as any operation or operations that are performed on an electronic device at least initially unbeknownst to its user in order to 1 alter control of the electronic device where the change in control is unwanted or unintended by the user and or 2 gain access to stored information or information that is available to the user. As an illustrative example a malicious attack may include one or more attack stages. For instance a first attack stage may involve a reconnaissance stage in which information about the software and system logic associated with one or more targeted client devices is sought. This information may be used subsequently in other attack stages. Additionally or in the alternative the malicious attack may include 1 an attack stage that involves testing for an initial attack or entry point on a single client device or multiple client devices as the target and or 2 an attack stage for delivery of an exploit such as a malicious attachment in an email message. Of course the attack stage for delivery of the exploit may be in a variety of forms such as a phish attack where an attempt is made to capture credentials which constitute the whole attack or which are to be used later for part of another attack a browser based exploit attack which attempts to get malicious code to run via a hostile web site or the like.

Where the malicious attack involves delivery of an exploit once the attacker s malicious code is running on the client device s the attacker can pivot in many different directions. The malicious attack may attempt to disable or neutralize security software. This is important from a detection perspective in that the real attack may only come to the system after the security software has been disabled or neutralized. Now upon infiltrating the targeted client device s the exploit may perform many different types of attacks and compromise the client device such as download additional malicious information unknowingly or unwantedly connect to a network conduct lateral movements throughout the targeted client device s in an attempt to find and compromise other systems of interest. These stages of the malicious attack may involve updates to the malicious binaries exfiltration and or using the compromised system as part of an attack or as part of another attack.

As an illustrative example the end goal of the malicious attack may be directed to data theft. This could involve taking over the user s web browser capturing keystrokes and or capturing the on screen content for later processing once exfiltrated from the targeted client device. These types of attacks may target online banking or online commerce user activities. The capture of user login credentials is another related case. As part of a malicious attack the attacker may capture login credentials for another targeted electronic device. Subsequently the same or a different malicious attack may use these captured credentials to attack other targeted electronic devices.

Another example includes cases of ransom ware and a Denial of Service DOS attack. Typically a ransom ware type of attack attempts to hold the target machine hostage until the user makes a financial transaction or other behavior desired from the attacker. In the case of a DOS attack the attacker may take over the target client device with the intent of using this target client device as part of the DOS attack. These attacks may involve one or more stages.

Herein according to one embodiment of the disclosure the static analysis engine may be responsible for performing a static analysis on the object s within the flow without executing or playing such object s . This static analysis may include but is not limited or restricted to signature matching heuristics protocol semantics anomalies checking determinative rule based analysis source reputation checking blacklist or whitelist checking or the like. Upon conducting a static analysis on the object s within the flow the static analysis engine determines whether any object is deemed suspect or suspicious namely the object exhibits characteristics associated with a malicious attack such as characteristics associated with a particular exploit. The suspect object is provided to the dynamic analysis engine .

In one embodiment objects within the flow are statically inspected by the static analysis engine for various characteristics. These characteristics are intended to be signals as to the goodness and badness of the objects under analysis. For example if a file contains a Microsoft Excel icon as its own display icon this may look suspicious since that is a common malware technique to trick a user into opening the file. Subsequently the file is dynamically analyzed by dynamic analysis engine for anomalous behaviors e.g. actions or even omissions during virtual processing that are anomalous . For instance it may be discovered that the file may not be opened by a Windows Office application and or may exhibit other anomalous behaviors e.g. initiate a callback accessing resources atypical of normal Excel operations etc. that are not expected from an Excel file.

Furthermore the static analysis engine may generate a static analysis score representing the likelihood that the suspect object is malicious based on the static analysis. The static analysis score and or other results from the static analysis hereinafter static analysis results may be provided to classification engine for classification of a suspect object see . Additionally or in the alternative the static analysis results may be stored in a data store . The static analysis and or generation of the static analysis score may be controlled by static analysis rules and parameters associated with the static analysis rules .

According to another embodiment of the disclosure the static analysis engine may not be deployed within the MCD system so that the flow propagates directly to the dynamic analysis engine or based on the security settings certain flows may be directed to the static analysis engine while other flows may be directed to the dynamic analysis engine without any processing by the static analysis engine .

As further shown in the dynamic analysis engine may be configured to perform a dynamic analysis on the suspect object including monitoring behaviors of the suspect object during its virtual execution using one or more virtual machines VMs to detect any anomalous behaviors. More specifically the dynamic analysis engine is configured to monitor the behaviors of the subject object in an operating environment e.g. VM and generate dynamic analysis VM based results . The VM based results may include a dynamic analysis score and or other information describing or indicating the anomalous and or expected behaviors observed during the dynamic analysis. The dynamic analysis score represents a likelihood that the suspect object is malicious based on the dynamic analysis which may be in a form of a measure of probability.

The VM based results are provided to the classification engine for use in classifying the suspect object such as a malicious or benign classification. Additionally or in the alternative the VM based results may be stored in the data store .

The virtual execution of the suspect object the monitoring of behaviors during VM based processing of the suspect object and or the generation of the dynamic analysis score may be controlled by dynamic analysis rules and or parameters associated with the dynamic analysis rules .

According to one embodiment of the disclosure at least portions of the static analysis results and or VM based results may be provided as feedback returned to network resources . Based on analysis of the feedback automatically or manually through use of the UI where the analysis may be in accordance with machine learning or human guided learning analysis schemes forensics or another type of analysis scheme a security software developer or in an automated implementation network resources e.g. a server a management system etc. may generate a configuration file included as part of a first set e.g. one or more of messages routed over update path . The configuration file may be adapted e.g. to modify one or more parameters that are used by dynamic analysis rules in order to effectively add one or more new rules modify one or more existing rules or disable one or more existing rules.

Similar to the discussion above based on static analysis results and or VM based results and other malware analysis a security software developer may generate or network resources may be configured to generate a configuration file included as part of a second set of messages routed over update path . The configuration file may be used to add modify and or disable static analysis rules through content updates e.g. updates to rule and or parameters .

As optional logic the emulation engine may be configured to emulate operations associated with the processing of a particular object within flow in context with an emulated computer application rather than a real application as may be run in a VM in the dynamic analysis engine or in context with an emulated dynamic library. As an optional implementation the emulation engine may provide the list of functions or characteristics on which malware checks can be applied in later analyses and or information regarding a suitable operating environment to be employed in one of the VMs for the dynamic analysis engine . For example the emulation engine may identify a particular version of an application having a vulnerability targeting a particular object and the dynamic analysis engine will then employ that particular version of the application within the virtual environment. This may lead to additional or different monitors being activated within the dynamic analysis engine in order to monitor for certain types of behaviors.

More specifically the emulation engine may be configured to emulate operations of the particular object and also monitor for anomalous behavior. For instance the monitoring may be accomplished by hooking certain functions associated with that object e.g. one or more API calls etc. and controlling what data is specifically returned in response to corresponding function calls e.g. force return of an application version number different than its actual number . After receipt of the returned data operations by the object are monitored. For instance the output from the hooked object may be analyzed to determine if a portion of the output matches any of signature patterns or other types of malware identifiers. The emulation may be controlled by emulation rules and or parameters associated with the emulation rules .

Similar to the discussion above based on results from emulation engine and or VM based results a security software developer may generate or network resources may be configured to generate a configuration file included as part of a third set of messages routed over update path . The configuration file may be used to add modify and or disable emulation rules through content updates e.g. updates to rules and or parameters .

Classification engine is to classify whether the suspect object is likely malicious based on results from the dynamic analysis engine the static analysis engine and or the emulation engine . More specifically according to one embodiment of the disclosure the classification engine classifier may use the static analysis score within the static analysis results and the dynamic analysis score with the VM based results to determine a classification that identifies whether the suspect object is malicious non malicious or uncertain. The classification may be provided to the reporting logic which is responsible for generating information e.g. an alarm warning message a report etc. that indicates whether or not the suspect object is likely malware. The classifier may be in a form of confidence score. Additionally the classification engine may be responsible for generating an indicator or signature for classified malware which may be used by the MCD system or other MCD systems to block subsequently received objects that match the signature.

The operations of classification engine are controlled by classification rules and parameters associated with the classification rules . In response to the monitored behaviors the feedback may be returned to the network resources which causes a configuration file included as part of a fourth set of messages over update path that may be used to modify one or more parameters that are used by classification rules . Additionally or in the alternative the configuration file may be used to install one or more new rules to classification rules modify one or more existing classification rules or delete one or more of the classification rules .

Of course in lieu of generating a separate configuration file and targeted for a specific detection engine or it is contemplated that a single configuration file may be generated and or distributed by the security software developer or network resources . This configuration file may be routed to all or some of these detection engines.

According to one embodiment of the disclosure information within the VM based results and or static analysis results and or results from operations on emulation engine is used as feedback that is in turn used by the network resources in an automated setting or updated via UI in a manual setting to adjust the parameters associated with the rules controlling the capabilities of the respective detection engine. This adjustment is designed to tune the analysis conducted on subsequent objects in order to reduce false positives and or false negatives and thus improve efficiency and accuracy in subsequent analysis.

Although not shown it is contemplated that a controller not shown may be provided within the MCD system to coordinate operations of the first detection engine the second detection engine the third detection engine and or a fourth detection engine e.g. the classification engine . Herein the controller may be configured to determine an order of analysis such as the first detection engine followed by the second detection engine and the classification engine in series as described herein. However it is contemplated that the order of analysis may be where a the first detection engine and the second detection engine operate in parallel followed by the classification engine b the first detection engine and the third detection engine operates in parallel followed by the second detection engine and the classification engine operating in series c the third detection engine the first detection engine the second detection engine and the classification engine operate in series or the like. Effectively the controller determines the order of analysis for logic within the MCD system .

Although operation rules and or and their corresponding parameters and are illustrated as being within their respective engines it is contemplated that the information associated with the rules and or parameters may be stored in the data store e.g. a persistent database that is accessible and used by each of the engines of the MCD system e.g. static analysis engine emulation engine dynamic analysis engine and or classification engine during all processing stages of malware detection processes. Each of these logic components may utilize information stored in the data store during their respective processes where the information stored is obtained during the current malware detection session and prior malware detection sessions if any and or other information received or updated from other information sources such as external analysis data from a dedicated server or via cloud services e.g. over the Internet . The information may include rules parameters metadata associated with the subject object information concerning the circumstances surrounding the subject object e.g. environment in which the subject object is received such as email or Web information information observed or learned during the operations of each of the logic components of the MCD system and or other information obtained from other MCD systems with respect to the same or similar object. The subject object itself may also be cached in the data store .

According to another embodiment of the disclosure as shown in local update paths are provided from the classification engine to other detection engines and . The local update paths enable the light weight configuration file e.g. operation rules and or parameters which are based on the received VM based results static analysis results see and or results see from emulation engine to be provided to the detection engines locally in accordance with an automated manner e.g. controlled by logic residing in the classification engine and or reporting logic for example or manually via the UI as shown. As described above these configuration file may be adapted to adjust the operations and or capabilities of the dynamic analysis engine e.g. adjust number of monitors type of behaviors to be monitored maximum or minimum time of VM operations rules for formulating the dynamic analysis score etc. adjust the operations and or capabilities of the static analysis engine e.g. adjust number or types of signatures for signature matching adjust types or number of attributes such as selection or de selection of certain Internet Protocol IP or Media Access Control MAC addresses from blacklists or whitelists type of characteristics to be monitored maximum or minimum time for static analysis of a particular object rules for formulating the static analysis score etc. and or adjust the operations and or capabilities of the emulation engine e.g. adjust which APIs or functions calls to hook what data is to be returned in response to corresponding function calls maximum or minimum time of emulation etc. . These illustrative examples are not meant to limit the scope of the updates of the rules and or parameters. Additionally these illustrative examples may apply to more than one of the detection engines.

It is noted that the configurations of MCD system are described and shown in for the purpose of illustration only. More or fewer components or other logic configurations may be implemented. For example at least some of the functionalities of classification engine may be integrated with dynamic analysis engine or vice versa. Each of the static analysis engine the emulation engine the dynamic analysis engine and the classification engine may maintain a separate communications channel e.g. inter process call or API as a feedback channel for communication with a controller. Alternatively the static analysis engine the emulation engine the dynamic analysis engine and the classification engine can communicate with each other via the data store by storing communications information in predetermined storage location s of the data store that are shared amongst these engines. Each of the static analysis engine the emulation engine the dynamic analysis engine and the classification engine may be implemented in software hardware or a combination thereof. For example at least some of these components may be implemented as machine readable code that can be executed by a processor in a memory to carry out the functionalities or operations as described above. Data store may be maintained in a non volatile storage device such as a hard disk or flash memory card.

Referring to an exemplary block diagram of a communication system deploying a plurality of MCD systems N 1 where N 3 for this embodiment and MCD system is equivalent to MCD system of or B communicatively coupled to a management system via a network is shown. In general the management system is adapted to manage MCD systems . For instance the management system may be configured to conduct content updates e.g. upload configuration file with new rules modify rules delete rules and or modify parameters that are utilized by the rules within the static analysis engine the emulation engine the dynamic analysis engine and or the classification engine .

Herein according to one embodiment of the disclosure the configuration file may be adapted to modify capabilities e.g. how analysis is conducted etc. of the static analysis engine the emulation engine the dynamic analysis engine and or the classification engine . For instance with respect to the static analysis engine the configuration file may include an operation rule change and or parameter change which will alter the static analysis from its current operations in determining if an object is suspect to warrant a more in depth analysis. For instance the operation rule and or parameter change may alter the number and types of signature patterns or number of reiterations conducted in signature matching. Similarly with respect to the dynamic analysis engine the configuration file may include an operation rule change and or parameter change which will alter the dynamic analysis conducted on suspect objects from the static analysis engine . For instance the content updates may specify a particular type or number of monitors within the monitoring logic of the dynamic analysis engine and or may specify a particular type pattern or combination of observed behaviors that are associated with certain malicious attacks for heightened observation by the monitoring logic for customizing specific types of malware targeted for detection.

The decision as to the content updates may be based on human guided learning or machine learning upon analysis of certain VM based results and or static analysis results that are provided as feedback to management system . Such updating may be conducted automatically or conducted manually via uploads by an administrator. Also such updating may be conducted freely among the MCD systems or subject to a subscription basis.

According to one embodiment of the disclosure a parameter generator may be configured to use VM based results and or static analysis results combined with the rate of false positives and or false negatives being detected as supplied from another source to generate a configuration file that has one or more modified parameter values in efforts to reduce the number of false positives and or false negatives. The rate of false positives is the ratio between the number of suspect objects falsely detected as being malicious and the number of suspect objects under analysis. Conversely the rate of false negatives is the ratio between the number of objects that were incorrectly determined to be benign and the number of suspect objects under analysis.

The parameter generator may be accessible manually through the UI for manual formulation of the configuration file or may be automated. For the automated process parameter values within the configuration file may be updated in light of experiential knowledge involving human analysts machine learning or other automatic processes not requiring human intervention as described for above.

As an illustrative example the dynamic analysis engine may report a heap spray pattern match for a PDF object. Additionally the static analysis engine the emulation engine and or the dynamic analysis engine may identify the additional attributes about the PDF or additional APIs or libraries loaded when it was opened. Then as part of a feedback loop the MCD system may suppress reporting of this heap spray pattern or use this pattern plus the other identified attributes to trigger additional dynamic static or emulation operations upon subsequent detection of the same or similar pattern. Hence the MCD system is adjusted to only apply resources e.g. time CPU cycles on a greatly restricted set of targets in the cases where the additional details are needed to accurately make the false positive FP and or false negative FN calculations. Alternatively rules parameters may be pushed to the dynamic analysis engine that identify that this heap spray pattern is always malicious and then safely modify the dynamic analysis engine to report more monitored behaviors for this specific case.

Continuing with the heap spray example detection of a heap spray may be associated with matching a large number e.g. 20 or 30 memory patterns identified by a corresponding number a table of parameter values contained in the configuration file. One or more of the patterns parameters may be changed to reflect recent discovery of new heap spray patterns. The revised patterns can be used by the dynamic analysis engine or the classification engine for matching of observed behaviors thus enhancing the respective detection engine s ability to detect classify an exploit. It is noted that the configuration file is intended to operate as a fast lightweight ruled based updating scheme.

In another example for time bombs adjustments may be made as to timing parameters to adjust virtual system and or application behaviors to occur at a faster or slower pace. As yet another example with respect to crashing or early termination objects adjustments may be made as to which APIs to hook or which calls to modify based on the human intelligence or machine learning.

As illustrated in a first MCD system is an electronic device that is adapted to analyze information associated with network traffic over a communication network from to one or more client devices . The communication network may include a public network such as the Internet a private network such as a wireless data telecommunication network wide area network a type of local area network LAN or a combination of networks.

As shown the first MCD system may be communicatively coupled with the communication network via a network interface . In general the network interface operates as a data capturing device sometimes referred to as a tap or network tap that is configured to receive data propagating to from the client device and provide at least some of this data to the first MCD system or a duplicated copy of the data. Alternatively as shown in the first MCD system may be positioned in line with client device .

According to an embodiment of the disclosure the network interface may be further configured to capture metadata from network traffic associated with client device . According to one embodiment the metadata may be used at least in part to determine protocols application types and other information that may be used by logic within the first MCD system to determine particular software profile s . The software profile s are used for selecting and or configuring a run time environment in one or more virtual machines selected or configured as part of the dynamic analysis engine as described below. These software profile s may be directed to different software or different versions of the same software application extracted from software image s fetched from storage device .

In some embodiments although not shown network interface may be contained within the first MCD system . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. a firewall router switch or other networked electronic device or can be a standalone component such as an appropriate commercially available network tap.

As further shown in the first MCD system comprises static analysis engine an optional emulation engine a scheduler storage device dynamic analysis engine classification engine and reporting logic . Herein the static analysis engine may include one or more software modules that when executed by one or more processors analyzes characteristics for objects within an incoming flow which may be a portion of network traffic according to this embodiment of the disclosure. Such analysis may involve a static analysis of the characteristics of each object under analysis using a variety of checks that are conducted without executing the object. Examples of the checks may include signature matching heuristics determinative rule based analysis blacklist checking whitelist checking or the like.

In general referring still to the static analysis engine is communicatively coupled to receive network traffic such as a series of HTTP messages. The static analysis engine comprises a filter logic that parses the incoming network traffic where the static analysis engine conducts static analysis of one or more objects within the network traffic flow and may store the information associated with objects that appear suspect in that these objects exhibit characteristics associated with malware.

When implemented a score determination logic may be configured to determine a probability or level of confidence that the suspect object is part of a malicious attack. More specifically based on the static analysis the score determination logic may be configured to a value referred to as a static analysis score that may be used to identify a likelihood that the suspect object is part of a malicious attack.

After analysis of objects within the flow the static analysis engine may route one or more suspect objects e.g. suspect to the dynamic analysis engine which is configured to provide more in depth analysis by analyzing the behavior of the suspect object in a VM based operating environment. Although not shown the suspect object may be buffered by a data store until ready for processing by virtual execution logic .

More specifically after analysis of the characteristics of the suspect object has been completed the static analysis engine may provide some or all of the suspect object to the dynamic analysis engine for in depth dynamic analysis by one or more virtual machines VMs M 1 of the virtual execution logic . For instance the virtual execution logic operating in combination with processing logic described below is adapted to simulate the transmission and or receipt of signaling by a destination device represented by VM . Of course if the object under analysis is not suspected of being part of a malicious attack the static analysis engine may simply denote that the object is benign and refrain from passing the object to the dynamic analysis engine for analysis.

According to one embodiment the scheduler may be adapted to configure the VMs based on metadata associated with the flow received by the static analysis engine . For instance the VMs may be configured with software profiles corresponding to the software images stored within storage device . As an alternative embodiment the VMs may be configured according to one or more software configurations that are being used by electronic devices connected to a particular enterprise network e.g. client device or prevalent types of software configurations e.g. a Windows 7 OS Internet Explorer ver. 10 web browser Adobe PDF reader application . As yet another alternative embodiment the VMs may be configured to support concurrent virtual execution of a variety of different software configurations in efforts to verify that the suspect object is part of a malicious attack e.g. reconnaissance operations entry point testing exploit etc. . Of course it is contemplated that the VM configuration described above may be handled by logic other than the scheduler .

According to one embodiment of the disclosure the dynamic analysis engine is adapted to execute one or more VMs to simulate the receipt and execution of content associated with the suspect object within a run time environment as expected by the type of object. For instance dynamic analysis engine may optionally include processing logic to emulate and provide anticipated signaling to the VM s . . . and or during virtual processing.

For example the processing logic may be adapted to provide and sometimes modify e.g. modify IP address etc. packets associated with the suspect object in order to control return signaling back to the virtual execution environment . Hence the processing logic may suppress e.g. discard the return network traffic so that the return network traffic is not transmitted to the communication network . According to one embodiment of the disclosure for a particular suspect object being multiple related flows such as TCP or UDP flows the processing logic may be configured to send packets to the virtual execution environment via a TCP connection or UDP session. Furthermore the processing logic synchronizes return network traffic by terminating the TCP connection or UDP session.

As further shown in the monitoring logic within the virtual execution logic may be configured to monitor behaviors of one or more VMs . . . and or such as VM that is responsible for executing the suspect object . This monitoring is conducted to detect anomalous activity indicative that the suspect object is part of a malicious attack. When anomalous activity is detected the monitoring logic operating with an optional score determination logic may route the VM based results e.g. computed score information associated with the detected anomalous behaviors and other information associated with the detected malicious activity by the suspect object to classification engine .

It is noted that the score determination logic may not be implemented within the dynamic analysis engine so that the VM based results exclude any scores but rather includes information associated with the detected anomalous behaviors that are analyzed by the monitoring logic . The VM based results are subsequently weighted by the prioritization logic and analyzed by the score determination logic implemented within the classification engine .

According to one embodiment of the disclosure the classification engine may be configured to receive the static analysis results and or the VM based results . According to one embodiment of the disclosure the classification engine comprises prioritization logic and score determination logic . The prioritization logic may be configured to apply weighting to results provided from dynamic analysis engine and or static analysis engine . These results may be 1 a dynamic analysis score produced by score determination logic and or static analysis score produced by score determination logic or 2 anomalous behaviors detected by monitoring logic .

The score determination logic comprises one or more software modules that are used to determine a final probability as to whether the suspect object is part of a malicious attack and the resultant final score representative of this final probability may be included as part of results provided to alert report generation logic within reporting logic . Where the score determination logic has failed to determine that the suspect object is malicious based on the static analysis results e.g. static analysis score etc. and or the VM based results e.g. dynamic analysis score etc. the classification engine may refrain from providing the results to alert report generation logic or the results can be provided to alert report generation logic for processing to denote no malicious attack has been detected.

As another part of the results provided to the reporting logic information within the VM based results static analysis results and or results from operations on emulation engine or any derivation thereof may be included as part of the feedback provided to management system . Such information may include anomalous behaviors matched signature patterns or the like. A parameter generator is configured to receive the feedback information and generate a configuration file having one or more parameter values that may be used to add or enable modify or disable one or more of the static analysis rules the emulation rules the dynamic analysis rules and or the classification rules .

As illustrative embodiment of the disclosure based on information within feedback also represented by message s the parameter generator generates a configuration file that includes a parameter value for modifying a dynamic analysis rule in order to activate or disable a monitor responsible for monitoring a particular type of API call requested access to a certain port number. In another illustrative embodiment the parameter value may be configured to alter the number and or types of monitors in operation within the monitoring logic of the dynamic analysis engine . Similarly the parameter value may specify a particular type pattern or combination of observed behaviors to be activated as these behaviors may be associated with malicious attacks that are currently being detected by other MCD systems communicatively coupled to the management system .

As another illustrative embodiment of the disclosure based on information within feedback message s the parameter generator generates a configuration file that includes a parameter value for modifying a particular classification rule so as to modify the object classification process. For instance the parameter value may be a weighting that is uploaded into the prioritization logic . This weighting adjusts the amount of consideration in the static analysis score and or the dynamic analysis score that is used by the score determination logic in producing the final score. The final score represents the suspect object as malicious when the score is equal to or exceeds a prescribed score threshold. The score threshold also may be dynamically set by parameter generator based on feedback .

As yet another illustrative embodiment of the disclosure based on information within feedback message s the parameter generator generates a configuration file that includes a parameter value for modifying a static analysis rule . For instance the parameter value may add or delete a characteristic considered during static analysis to determine if an object under analysis is suspicious.

As another illustrative embodiment of the disclosure based on information within feedback message s the parameter generator generates a configuration file that includes a parameter value that modifies an emulation rule . For instance the parameter value may modify which function associated with the emulation e.g. a particular APIs etc. to hook to more in depth analysis of the behaviors associated with emulated processing of the hooked function.

As an alternative as shown in it is contemplated that similar operations may be conducted locally by logic within the MCD system in lieu of remotely by management system as illustrated in . According to this embodiment the parameter generator may be implemented within the classification engine as shown user interface and or reporting logic to control parameter rule settings via local update paths based at least in part on the static results emulation results and or the VM based results .

Of course in lieu of certain aspects of the static analysis being conducted by MCD systems it is contemplated that cloud computing services may be implemented to handle such analysis. Additionally or in the alternative cloud computing services may be configured with virtual execution logic that conducts virtual execution of the suspect object as described herein. In accordance with this embodiment MCD system may be adapted to establish secured communications with cloud computing services for exchanging information.

Referring now to the first MCD system may be coupled with the communication network in line with client device . Contrary to the embodiment illustrated in the first MCD system comprises an communication interface which may be used to route content updates from the parameter generator to the static analysis engine the emulation engine the dynamic analysis engine and or the classification engine via feedback transmission medium . Hence depending on the information provided from reporting logic that is received by cloud computing service such as detected anomalous behaviors or the like the cloud computing services may provide one or more configuration files including parameter values that changes the analysis conducted by the static analysis engine the emulation engine the dynamic analysis engine and or the classification engine as described above.

Referring now to an exemplary logical representation of the MCD system of is shown. MCD system comprises one or more processors that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with other MCD systems and management system of . According to one embodiment of the disclosure communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

Processor s is further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure persistent storage may include a static analysis engine that comprises static analysis rules filter logic and score determination logic b emulation engine that includes emulation rules c the dynamic analysis engine that comprises virtual execution environment processing logic the monitoring logic score determination logic and or dynamic analysis rules d classification engine including prioritization logic score determination logic and or classification rules and e alert report generation logic . Of course when implemented as hardware one or more of these logic units could be implemented separately from each other. Some of the logic stored within the persistent storage is described below.

The filter logic comprises one or more software modules that parses the incoming flow to allow the static analysis engine to conduct static analysis of one or more objects within the flow and stores upload the information associated with suspect objects that exhibit characteristics associated with malware.

Score determination logic operates to produce the static analysis score that is provided to the classification engine . The static analysis score may be utilized by the classification engine in determining if the suspect object is part of a malicious attack.

Static analysis rules are the rules that control operations of the status analysis engine . At least some of the status analysis rules may be modified by altering one or more parameters associated with these rules. The parameter values may be used to effectively add disable or modify certain rules and thus the static analysis operations conducted by the static analysis engine .

The virtual execution environment comprises one or more software modules that are used for performing an in depth dynamic and or real time analysis of the suspect object using one or more VMs. More specifically the virtual execution environment is adapted to run the VM s which virtually process the content associated with the suspect object by simulating receipt and execution of such content in order to generate various activities that may be monitored by the monitoring logic .

The monitoring logic monitors behaviors during virtual processing of the suspect object in real time and may also log at least anomalous behaviors by the VM s configured with certain software and operability that are presumably targeted by the malicious attack. In essence the monitoring logic identifies the effects that the suspect object would have had on a client device with the same software feature configuration. Such effects may include unusual network transmissions unusual changes in performance and the like.

Thereafter according to the observed behaviors of the virtually executed object that are captured by the monitoring logic the score determination logic when deployed within the dynamic analysis engine determines whether the suspect object is associated with a malicious attack. This may be accomplished by analysis of the severity of the observed anomalous behaviors and or the likelihood of the anomalous behaviors result from a malicious attack is evaluated and reflected in the dynamic analysis score. As a result the score determination logic at least partially contributes to the VM based results for use by classification engine .

Dynamic analysis rules are the rules that control operations of the dynamic analysis engine . At least some of the dynamic analysis rules may be modified by altering one or more parameters associated with these rules. The parameter values may be used to effectively add disable or modify certain rules and thus monitoring scoring and other operations with the dynamic analysis engine may be modified in efforts to reduce false positives and or false negatives.

Emulation rules are the rules that control operations of the emulation engine . At least some of the emulation rules may be modified by altering one or more parameters associated with these rules. The parameter values may be used to effectively add disable or modify certain rules and thus emulation by the emulation engine of operations conducted on a particular object and subsequent monitoring for anomalous behavior. Such monitoring may involve hooking certain function calls associated with the suspect object and controlling what data is specifically returned in response to corresponding function calls.

The prioritization logic comprises one or more software modules that are used for weighting information associated with VM based results e.g. dynamic analysis score and or static analysis results e.g. static analysis score . For instance the prioritization logic may assign a higher priority and larger weight to either the VM based results or the static analysis results . For instance the static analysis score generated by the score determination logic and the dynamic analysis score generated by the score determination logic may be weighted differently so that one of these scores is given a higher priority than the other. Alternatively if implemented to receive the anomalous characteristics and behaviors as part of VM based results and or static analysis results the prioritization logic may be configured to apply different weights to different anomalous characteristics or behaviors.

The score determination logic may be adapted to receive both the VM based results and static analysis results along with weighting provided by prioritization logic . Based on these results the score determination logic generates a final score that signifies whether the suspect object is determined to be part of a malicious attack e.g. an exploit or benign.

Alternatively the score determination logic may be adapted to receive the VM based results along with weighting provided by prioritization logic and based on the score and or observed anomalous behaviors generates the final score that signifies whether the suspect object is determined to be part of a malicious attack e.g. an exploit or benign.

Classification rules are the rules that control operations of the classification engine . At least some of the configuration rules may be modified by altering one or more parameter values associated with these rules. The parameter values may be used to effectively add disable or modify certain rules and thus the operations for classifying subject objects after analysis by one or more of the static analysis engine emulation engine and or dynamic analysis engine may be modified in efforts to reduce false positives and or false negatives.

Continuing the above example processor s may invoke alert report generation logic which produces alerts which may include a detailed summary of information associated with a detected malicious attack such as an exploit detected by the MCD system .

Referring to a general exemplary flowchart illustrating the software configuration of monitoring logic involved with dynamic analysis of suspect objects within the dynamic analysis engine is shown. First the monitoring logic that is controllable by remotely configurable parameters is instrumented block . Thereafter as illustrated in block the remotely configurable parameter s within software that controls the monitoring logic are modified with corresponding parameter value s . These parameter value s are selected to modify operations of the monitoring logic based on information from a prior malware detection analysis e.g. static analysis dynamic analysis emulation and or classification . The modification of remotely configurable parameter s is conducted to reduce the number or rate of false positives and or false negatives. For instance the parameter value s may be set to activate monitors that are directed to monitor communications associated with a certain API during VM based operations where such monitored information will improve the accuracy of the VM based results.

Subsequent to the configurable parameter s associated with the monitoring logic being altered the VM execution logic awaits receipt of the next suspect object for dynamic analysis and upon receipt conducts VM based processing on the suspect object and monitors the results in accordance with the configured parameter s as set forth in block . Based on at least the VM based results a determination is made as to whether the VM results are sufficient to classify the suspect object as part of a malicious attack block . If so alerts or reports may be generated to identify the suspect object is associated with a malicious attack block .

Regardless of the determination as to whether the suspect object may be classified as part of a malicious attack or not analytical information e.g. current parameter values associated with monitoring logic etc. associated with the VM based results is gathered block . This analytical information is used to determine the current operating state of the dynamic analysis engine. As a result based on a desired change in the operating state of the dynamic analysis engine the analytical information provides a base reference from which certain parameter s may be selected for modification using a configuration file in order to add modify or disable functionality within the dynamic analysis engine block .

In the foregoing specification embodiments of the disclosure have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

