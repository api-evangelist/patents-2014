---

title: Cloud-based network tool optimizers for server cloud networks
abstract: Network tool optimizers for server cloud networks and related methods are disclosed. In part, master filters are defined to segregate and control user traffic, and user filters are defined to forward the user traffic to cloud-based network tools or tool instances. A master user interface and user interfaces for each user are provided so that the master filters and user filters can be defined and managed. A filter rules compiler within the cloud-based network tool optimizer then combines the master filters with the user filters, resolves conflicts in favor of the master filters, and generates filter engine rules that are applied to filter engines within the network tool optimizer for the cloud network. The filter engines then forward packets received at input ports for the network tool optimizer to output ports for the network tool optimizer that are coupled to network tools or tool instances within the cloud network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467385&OS=09467385&RS=09467385
owner: Anue Systems, Inc.
number: 09467385
owner_city: Austin
owner_country: US
publication_date: 20140529
---
This invention relates to managing network packets and providing network packets to network monitoring tools.

Packet based data networks continue to grow in importance and it is often desirable to monitor network traffic associated with these packet based networks on an ongoing basis. To meet these monitoring needs copies of network packets can be forwarded to diagnostic network monitoring tools. Packets are often forwarded using network hubs test access ports TAPs and or switched port analyzer SPAN ports available on network switches. For example certain network switches produced by Cisco Systems include SPAN ports to which traffic on the switches are mirrored. It is also noted that other packet monitoring or access methods may also be used to acquire copies of network packets being communicated within a network infrastructure.

To help alleviate the problem of limited access to network packets for monitoring tool aggregation devices have been developed that allow shared access to the monitored network packets. These tool aggregation devices allow users to obtain packets from one or more network monitoring points e.g. network hub TAP SPAN port etc. and to forward them to different monitoring tools. U.S. Pat. Nos. 8 018 943 and 8 098 677 describe example embodiments for network tool optimizers that provide solutions for packet filtering and provide in part configuration of user define filters automatic creation of filter engine forwarding rules automatic handling of filter overlaps graphical user interfaces GUIs for filter creation and other features. U.S. Pat. Nos. 8 018 943 and 8 098 677 is each hereby incorporated by reference in its entirety.

When a network to be monitored includes a cloud or virtual environment however difficulties arise in utilizing prior tool aggregation devices particularly where multiple unrelated users are allocated different cloud resources within the cloud or virtual environment. One such example environment is where resources within a server cloud are offered by a controlling entity e.g. Amazon Web Services to different user entities that lease rent or otherwise pay for server cloud resources from the controlling entity. If these user entities desire to monitor network activity the preferred place to conduct such monitoring is often within the network infrastructure for the server cloud. However as the server cloud is not controlled by or directly accessible to the user entities this cloud network monitoring is impractical to implement using current tool aggregation devices without the controlling entity opening its network infrastructure to the user entities. Further the controlling entity of the server cloud typically does not want its network infrastructure or traffic to be visible to the user entities

Even assuming the controlling entity e.g. Amazon Web Services is willing to connect a monitoring tool to its server cloud so that copies of packet traffic are forwarded to a monitoring tool e.g. through a hub TAP SPAN port etc. desired to be used by a user these packets will likely include packets for other user entities in addition to the user desiring the network monitoring. This overlap in packet traffic is likely to occur because cloud resources are often virtualized such that processors or cores associated with any particular physical server processing platform e.g. server blade may be used by two or more user entities through server instances created within the server processing system platform. Traffic copied from this physical server processing system platform therefore will likely include packets that are associated with multiple independent user entities using the different server instances. As such significant security and confidentiality issues arise if an attempt is made to add network monitoring tools and associated monitoring services to server cloud resources being used and shared by user entities.

Network tool optimizers for server cloud networks and related methods are disclosed that allow sharing of cloud based network tool resources while still securing user packet traffic. In part master filters are defined by the service provider for the server cloud resources to segregate and control user traffic and user filters are defined by each user so that the user s traffic is forwarded to cloud based network tools desired to be used by the users. A master user interface and user interfaces for each user are provided by the cloud based network tool optimizer so that master filters and user filters can be defined and managed. A filter rules compiler within the cloud based network tool optimizer then combines the master filters with the user filters resolves conflicts in favor of the master filters and generates filter engine rules that are applied to filter engines within the cloud based network tool optimizer. The filter engines then forward packets received from the cloud network at input ports for the cloud based network tool optimizer to output ports for the cloud based network tool optimizer based upon the user filters as controlled by the master filters. The output ports are in turn coupled to network tools or network tool instances within the cloud network. As such server cloud resources can include network monitoring services while still protecting the security of the service provider s internal network traffic and the network traffic for the different user entities. Different features and variations can be implemented as desired and related systems and methods can be utilized as well.

In one embodiment a method is disclosed for configuring and operating a network tool optimizer for cloud based networks including allowing configuration of one or more master filters to determine how packets from a cloud network are forwarded to a plurality of virtual ports where each virtual port is associated with a different user of cloud resources within the cloud network allowing configuration of a plurality of sets of one or more user filters where each set of one or more user filters is associated with a different user of cloud resources within the cloud network and determines how packets from a virtual port associated with that user are forwarded to one or more output ports for the network tool optimizer generating rules for filter engines based upon the one or more master filters and the plurality of sets of one or more user filters with conflicts between the master filters and user filters being resolved in favor of the master filters applying the rules to the filter engines within the network tool optimizer receiving packets from the cloud network at one or more input ports for the network tool optimizer and forwarding the received packets to one or more output ports for the network tool optimizer using the filter engines so that packet traffic for each user is forwarded based at least in part upon the set of one or more user filters for that user.

For other embodiments the method also includes forwarding packets from the one or more output ports to one or more network monitoring tools coupled to the one or more output ports. In addition the method can include forwarding packets from one or more output ports to one or more network monitoring tool instances created within a processing system platform coupled to the one or more output ports. Further the received packets can include copies of packets output by one or more servers within the cloud network. Still further the received packets can include copies of packets output by one or more server instances created by a processing system platform within the cloud network.

For further embodiments the allowing steps can include providing a master user interface to allow configuration of the master filters and providing one or more user interfaces to allow configuration of the user filters. In addition the one or more user interfaces can include a separate user interface for each user. Still further the method can include displaying only information relating to each user in the user interface for that user.

For additional embodiments the filter engines can include one or more ingress filter engines associated with input ports for the network tool optimizer and one or more egress filter engines associated with output ports for the network tool optimizer. Further the method can also include applying rules associated with the master filters to the one or more ingress filter engines and applying rules associated with the user filters to the one or more egress filter engines.

For still further embodiments the one or more master filters are configurable to separate network traffic for different users of the cloud resources using one or more network identifiers for user packets. In addition the network identifiers comprise virtual local area network VLAN identifiers virtual extensible local area network VXLAN identifiers or both VLAN and VXLAN identifiers. Further the one or more network identifiers can be made not available for configuration of the plurality of sets of one or more user filters. Still further the method can include allowing configuration of one or more master filters to add one or more network identifiers to the user packets forwarded to the one or more output ports for the network tool optimizer.

In one other embodiment a network tool optimizer for cloud based networks is disclosed that includes a plurality of input ports to receive network packets a plurality of output ports to output network packets a packet switch having filter engines that determine how network packets are forwarded from the input ports to the output ports within the network tool optimizer a master user interface to allow configuration of one or more master filters that determine how packets from the input ports are forwarded to a plurality of virtual ports where each virtual port is associated with a different user of cloud resources within a cloud network one or more user interfaces to allow configuration of a plurality of sets of one or more user filters to determine how packets from a virtual port associated with a user are forwarded to one or more output ports for the network tool optimizer where each set of one or more user filters is associated with a different user of cloud resources within the cloud network and a filter processor to generate rules for the filter engines based upon the one or more master filters and the plurality of sets of one or more user filters with conflicts between the master filters and user filters being resolved in favor of the master filters and to apply the rules to the filter engines to forward packet traffic for each user based at least in part upon the set of one or more user filters for that user.

For other embodiments the one or more user interfaces include a separate user interface for each user. In addition each user interface can be configured to display only information relating to its user.

For further embodiments the filter engines can include one or more ingress filter engines associated with input ports for the network tool optimizer and one or more egress filter engines associated with output ports for the network tool optimizer. In addition the filter processor can be further configured to apply rules associated with the master filters to the one or more ingress filter engines and to apply rules associated with the user filters to the one or more egress filter engines.

For additional embodiments the one or more master filters are configurable to separate network traffic for different users of the cloud resources using one or more network identifiers for user packets. Further the network identifiers can include virtual local area network VLAN identifiers virtual extensible local area network VXLAN identifiers or both VLAN and VXLAN identifiers. In addition the one or more network identifiers can be made not available for configuration of the plurality of sets of one or more user filters. Still further the master interface can be further configured to allow configuration of one or more master filters to add one or more network identifiers to the user packets forwarded to the one or more output ports for the network tool optimizer.

Different features and variations can be implemented as desired and related systems and methods can be utilized as well.

Network tool optimizers for server cloud networks and related methods are disclosed that allow sharing of cloud based network tool resources while still securing user packet traffic. In part master filters are defined by the service provider for the server cloud resources to segregate and control user traffic and user filters are defined by each user so that the user s traffic is forwarded to cloud based network tools desired to be used by the users. A master user interface and user interfaces for each user are provided by the cloud based network tool optimizer so that master filters and user filters can be defined and managed. A filter rules compiler within the cloud based network tool optimizer then combines the master filters with the user filters resolves conflicts in favor of the master filters and generates filter engine rules that are applied to filter engines within the cloud based network tool optimizer. The filter engines then forward packets received from the cloud network at input ports for the cloud based network tool optimizer to output ports for the cloud based network tool optimizer based upon the user filters as controlled by the master filters. The output ports are in turn coupled to network tools or network tool instances within the cloud network. As such server cloud resources can include network monitoring services while still protecting the security of the service provider s internal network traffic and the network traffic for the different user entities. Different features and variations can be implemented as desired and related systems and methods can be utilized as well.

The disclosed cloud based network tool optimizer embodiments therefore utilize two broad types of hierarchical packet filters to provide for secured monitoring by a network tool with a server cloud. The hierarchical packet filters include master filters and user filters. The master filters provide the highest level packet access control. These master filters are defined and managed by the controlling entity for the server cloud e.g. Amazon Web Services . Hierarchically these master filters sit above the individual sets of user filters. Each set of user filters are defined and managed by customers of the server cloud that have been granted access to use monitoring tool resources within the server cloud environment. Each customer or user has access only to its own packet streams and the master filters operate to trump or narrow the user filters. Using this system an administrator for the server cloud can specify restrictions or limitations with regard to what data and or types of data any given user with access to the cloud based network tool optimizer is permitted to see. As such each user s traffic can be segregated from other user traffic and or the internal network traffic for the controlling entity of the server cloud network itself. A variety configurations and implementations can be used while still taking advantage of the cloud based network tool optimizer embodiments described herein.

With respect to traditional cloud application services the server cloud includes server processing resources such as processing devices and or processing cores located on one or more server processing systems e.g. server blades . Different portions of these server processing resources are allocated to the multiple user systems A B . . . C to run one or more user software applications. As depicted a first processing resource subset A is allocated for use by the first user system s A. A second processing resource subset B is allocated for use by the second user system s B. Additional processing resource subsets can be allocated to additional user system s with an Nth processing resource subset C being allocated for use by an Nth user system s C. The application traffic associated with these cloud application services is communicated between the server cloud and the user systems A B . . . C through one or more network communications A B . . . C respectively. Traditional cloud application services are often provided by entities having large server farms and or large excess sever capabilities that are made accessible through network interfaces e.g. Amazon Web Services . Further as described in the Background above in addition to allocating individual server processing systems to users service providers also create virtual server instances within larger computing platforms and allocate these instances for use by users.

Advantageously the embodiments described herein provide cloud based monitoring services in addition to cloud application services through the cloud based network tool optimizer . The cloud based network tool optimizer receives copies of packet traffic from the network for the server cloud through one or more network connections and forwards these packets to one or more network monitoring tools A B . . . C through network connections based upon filter rules applied to filter engines . As described in more detail below the cloud based network tool optimizer allows a master controller to view define and or manage master filters within filters through network communications . The cloud based network tool optimizer also allows users A B . . . C to view define and or manage user filters within filters through network communications A B . . . C respectively. The filter processor within the cloud based network tool optimizer automatically generates the packet forwarding rules based upon the forwarding instructions defined by the master user filters .

As described herein the master filters are applied first and can override conflicting forwarding requests within the user filters. This master to user hierarchy allows the service provider to protect its own network traffic from exposure to the users and to keep each user s traffic from being exposed to other users while still allowing each user to control the forwarding actions of its own traffic to one or more cloud based network monitoring tools. Once generated the packet forwarding rules are applied by the filter processor to filter engines to determine how packets are forwarded by the cloud based network tool optimizer from input ports that receive server cloud traffic to output ports that provide packets to the network tools A B . . . C. The cloud based network tool optimizer also includes a control panel that provides user interfaces UIs such as graphical user interfaces GUIs that allow the master controller and the user system s A B . . . C to view create and or manage the master user filters . For the embodiment the results generated by tools A B . . . C are provided to a master results controller that controls the distribution of the different user results A B . . . C to the appropriate user system s A B . . . C as represented by network communications A B . . . C. The tools A B . . . C could also communicate these results directly back to the user system s A B . . . C through network connections if desired. Through the cloud based network tool optimizer therefore each of the user system s A B . . . C is allowed secured access to monitoring tool services relating to its network traffic generated within the server could . It is noted that network communications A C A C and A C can be implemented using one or more network communication links between the cloud based monitoring system and the user systems A C as desired.

It is noted that the copied packets provided by connections from packet flows within the network infrastructure for the server cloud can be obtained through one of a variety of techniques and devices such as for example from network TAPs from SPAN ports on network switches and or from other devices or systems that copy packets or packet contents from network traffic flows and make them available for other devices and systems. It is also noted that the connections and network communications described herein can include wired wireless and or combinations of wired and wireless network communications among network connected devices or systems and can include communications through one or more intervening devices or systems such as firewalls routers switches and or other network connected devices or systems. It is further noted that the control panel for the cloud based network tool optimizer can be implemented as a web interface that can be accessed through a network browser e.g. MICROSOFT Internet Explorer or MOZILLA Firefox by other network connected processing systems. For example the cloud based network tool optimizer can be configured to automatically download a control panel software application to user system s A B . . . C or the master controller when a network browser operating on the management platform connects to an IP address for the cloud based network tool optimizer . This download can occur the first time the network browser connects and the control panel can then be stored locally by the management platform. The user system s A B . . . C the master controller and or the master results controller can be for example personal computer systems server systems and or other processing systems running WINDOWS operating systems LINUX operating systems and or other operating system as desired. In one embodiment the control panel can in part be downloaded as JAVA based software code or modules. Other implementations could also be implemented.

It is further noted that the cloud based monitoring system can include any of a wide variety of systems that are connected within a cloud server environment. These systems can include server systems data storage systems desktop computer systems portable computer systems network switches broadband routers and or any other desired processing systems that are connected into a cloud network as desired. In addition to these systems any number of network monitoring tools A B . . . C can also be connected to the cloud network and or to systems within the network. Further the network monitoring tools A B . . . C be can any of a wide variety of network related tools including traffic monitoring devices packet sniffers data recorders voice over IP monitors intrusion detection systems network security systems application monitors and or any other desired network management or security tool device or system. Still further as described herein the network monitoring tools A B . . . C can also be implemented as virtual instances of tool appliances within a larger computing platform. It is further noted that the network communications can be based upon any desired protocol or combination of protocols including Ethernet protocols multi protocol label switching MPLS protocols FibreChannel FC protocols and or any other desired communication protocol that can be used for network communications including packet based network communications.

It is also noted that the user defined and master defined filters as well as the forwarding engine rules generated by the filter processor can rely upon various portions of the content of network packets for forwarding actions. For example network packets typically include in part a link layer header L2 a network layer header L3 a transport layer header L4 and a payload as well as other network layers e.g. layers within the Open Systems Interconnect OSI model for network communications . Information pertinent to forwarding the packet such as source ID and destination ID and protocol type is usually found in the packet headers. These packets may also have various other fields and information within them such as fields including error check information virtual local area network VLAN identifiers and or other information that may be matched and used for filtering. Further information representing the source device may include items such as the IP address of the source device or the MAC Media Access Control address of the source device. Similarly information representing the destination device may be included within the packet such as the IP address of the destination device. It is seen therefore that a wide variety of source and destination identifying information may be included within the packets as well as other packet related information along with the data included within the payload of the packet. While the cloud based network tool optimizer embodiments described herein are primarily described with respect to packet based communications and utilize information within these packets to forward the packets the cloud based network tool optimizer embodiments can be configured to operate with respect to other types of communication protocols and are not limited to packet based networks.

In operation the forwarding rules determine at least in part how the filter engines forward packets from input ports to output ports for the cloud based network tool optimizer through packet forwarding circuitry . The packet forwarding circuitry forwards packets between input ports and output ports based in part upon the forwarding rules set up in the ingress filter engines and the egress filter engines . For the embodiment depicted packets from N connections are received at the input ports . These packets are then stored in ingress queues or buffers prior to being processed by ingress filter engines . Based upon ingress filter rules within the ingress filter engines the packet forwarding circuitry forwards packets to the appropriate output ports . However prior to being sent out the output ports to external systems the outgoing packets are first stored in egress queues or buffers and then processed by egress filter engines . Based upon egress filter rules within the egress filter engines the egress filter engines forward the appropriate packets to the output ports . The output ports are connected to network tools through M connections . The filter processor communicates with the ingress filter engines and egress filter engines to apply the forwarding rules so that these filter engines will provide the packet forwarding defined by the user filters A B . . . C within limits controlled by the higher level master filters .

It is noted that the cloud based network tool optimizer can be implemented using one or more network packet switch integrated circuits ICs such as are available from Broadcom Corporation. These switch integrated circuits include input port circuitry ingress buffer circuitry ingress filter engine circuitry packet switch fabric circuitry egress buffer circuitry egress filter engine circuitry output port circuitry internal processors and or other desired circuitry. Further these integrated circuits can include control and management interfaces through which they can be programmed to provide desired forwarding and control. As such the filter processor can program the filter engines within the network packet switch integrated circuit with appropriate forwarding rules. The cloud based network tool optimizer can also include other circuitry and components as desired. For example tool optimizer can include one or more printed circuit boards PCBs upon which the network packet switch IC is mounted power supply circuitry signal lines coupled to external connections and a variety of external connectors such as Ethernet connectors fiber optic connectors or other connectors as desired. It is further noted that the cloud based network tool optimizer including the filter processor can be implemented using one or more programmable processing devices. For example the network packet switch ICs can be controlled and operated using a processor microcontroller configurable logic device e.g. CPLD complex programmable logic device FPGA field programmable gate array and or other processing device that is programmed to control these integrated circuits to implement desired functionality. It is further noted that software or other programming instructions used for the cloud based network tool optimizer and or its components such as filter processor and the control panel can be implemented as software or programming instructions embodied in a non transitory computer readable medium e.g. memory storage devices FLASH memory DRAM memory reprogrammable storage devices hard drives floppy disks DVDs CD ROMs etc. including instructions that cause processing devices used by the cloud based network tool optimizer to perform the processes functions and or capabilities described herein.

In one embodiment for the cloud based network tool optimizer a PCB can include a processor IC separate from a network packet switch IC. The filter processor can then be configured to operate on the separate processor IC and the separate processor IC can interface with an application programming interface API provided by the network packet switch vendor for the network packet switch IC. This API provides an abstracted programmatic interface with which to apply filter rules to the filter engines within a network packet switch IC to control how packets are forwarded by the packet switch IC within the cloud based network tool optimizer .

As described herein the cloud based network tool optimizer automatically implements master filters and user filters A C as one or more forwarding rules that are applied to filter engines . The forwarding rules represent the internal device specific representations that are used to implement the filter engine rules. For current packet switch ICs these device specific representations often include programming or provisioning of filter rules into ternary content addressable memories TCAMs within the packet switch ICs. A filter rule typically includes a predicate and one or more action s . The predicate is one or more traffic matching criteria that are logically AND ed together e.g. TCAM matching criteria such as VLAN ID or Source IP address . Each predicate compares a key to a value. The key is computed by selecting fields from packets based on protocol and content of the packet. An action can be defined by the filtering rule and applied when a match occurs. For current TCAMs and packet switch IC filter engines actions typically include where to forward the packet whether to drop the packet and or other desired action s with respect to the packet. For example additional actions can include adding headers adding identifiers within headers stripping headers stripping identifiers within headers and or other additional actions to modify packet contents.

Based upon the applied filter rules the filter engines such as ingress filter engines and egress filter engines conditionally direct traffic from the input ports to the output ports. Filter rules can specify a single traffic matching criteria or they can involve Boolean expressions that logically combine various traffic matching criteria to represent the desired filtering behavior. Further the various criteria in the filter may include ranges and or non contiguous lists of values which effectively allow for a second level of OR ing within the filters. In addition other logic such as NOT operations and or more complicated logic expressions such as source destination pairs and bidirectional flows could also be represented in filter rules if desired. A filter s traffic matching criteria can be configured as desired. For example matching criteria can be configured to include values in any ISO International Standards Organization OSI network layer 2 L2 through layer 7 L7 header value or packet content. It is noted that packet based communications are often discussed in terms of seven communication layers under the OSI model application layer L7 presentation layer L6 session layer L5 transport layer L4 network layer L3 data link layer L2 and physical layer L1 . Examples of traffic matching filter criteria for packet based communications include but are not limited to 

Advantageously neither the service provider that controls the server cloud or the individual users are required to program or apply the forwarding rules to the packet forwarding filter engines within the cloud based network tool optimizer . Rather the service provider defines and manages master filters through the master UI and the users define and manage the user filters A B through the user UIs A B respectively. The forwarding rules for the filter engines are then automatically generated by the rules complier by combining the master filters with the user filters A B. For this combination the master filters will govern any conflicts and the rules compiler generates a set rules with appropriate settings or instructions for the filter engines in the packet forwarding switches used by the cloud based network tool optimizer .

Looking back to embodiment the server cloud provides a first packet flow A to a first network port A and provides a second packet flow B to second network port B. These packet flows A B can be from different points within the network infrastructure for the server cloud and can each include packets for one of the users and or for both of the users. Through the operation of the ingress egress filter engines associated with the input ports A B A and B as well as internal switching circuitry the cloud based network tool optimizer filters the packet flows A B as defined by the combination of the master filters and the user filters A B so that selected packets are forwarded according to forwarding actions set forth in those filters. For embodiment it is assumed that traffic for a first user is being forward by the cloud based network tool optimizer to a first tool device A through first output tool port A and connections A. Similarly it is assumed that traffic for a second user is being forward by the cloud based network tool optimizer to a second tool device B through second output tool port B and connections B. The first user receives results from tool A and the second user receive results from tool B.

One primary goal for the cloud based network tool optimizer is to allow the server cloud service provider e.g. Amazon Web Services to safely provide tool monitoring functionality to different users who do not want their network traffic to be seen or acquired by other users. To provide this security the user interface for the cloud based network tool optimizer allows the users to manage forwarding actions but with a scope limited to traffic that falls within their own resource domains. Further the network tool optimizer also allows the server provider e.g. Amazon Web Services to protect its own network infrastructure and network traffic from visibility to the users.

The processing resources for the first user includes collocated servers and . Collocated servers and send and receive network traffic with router using a VLAN virtual local area network protocol and a VLAN identifier ID that has been assigned to the first user which is VLAN for embodiment . The processing resources for the first user also includes virtual server instances and . Collocated virtual server instances and send and receive network traffic with router using a VXLAN virtual extensible local area network protocol and a VXLAN identifier ID that has been assigned to the first user which is VXLAN for embodiment .

Similarly the processing resources for the second user includes collocated servers and . Collocated servers and send and receive network traffic with router using a VLAN virtual local area network protocol and a VLAN identifier ID that has been assigned to the second user which is VLAN for embodiment . The processing resources for the second user also includes virtual server instances and . Collocated virtual server instances and send and receive network traffic with router using a VXLAN virtual extensible local area network protocol and a VXLAN identifier ID that has been assigned to the first user which is VXLAN for embodiment .

The cloud based network tool optimizer receives copies of network packets for the first user s network traffic with respect to its assigned servers and through network tap connection A. The cloud based network tool optimizer receives copies of network packets for the first user s network traffic with respect to its assigned virtual server instances and through network tap connection C. The cloud based network tool optimizer receives copies of network packets for the second user s network traffic with respect to its assigned servers and through network tap connection B. The cloud based network tool optimizer receives copies of network packets for the second user s network traffic with respect to its assigned virtual server instances and through network tap connection D. As described above the cloud based network tool optimizer operates to forward packets received from the network tap connections A B C and D according to user filters defined and managed through the user interfaces for the cloud based network tool optimizer to the extent these user filters do not conflict with master filters set by entity that controls the server processing resources.

As the cloud based network tool optimizer is connected within the internal network for the server provider the cloud based network tool optimizer will see a mix of traffic belonging to the cloud server provider the first user and the second user. The traffic for the cloud service provider will be untagged. The traffic for the first user will be on VLAN or on VXLAN . And the traffic for the second user will be on VLAN or on VXLAN . The tools A and B could be tools attached to the cloud based network tool optimizer through connections A and B as physical devices or can be NFV network functions virtualization instances within the internal network for the service provider. Advantageously the cloud based network tool optimizer allows the service provider to provide tool monitoring functionality to the first user and to the second user without exposing its own traffic to these users and without exposing each user s traffic to the other user. Further the service provider does not need to expose the users to the details of its internal network infrastructure including the fact that a mix of VLAN and VXLAN technologies are being used to provide the processing resources to the users.

Looking to the first user s traffic a first port receives traffic from the first user s collocated servers and such as through tap connection A. This traffic is then filtered by a filter so that the first virtual port VP receives only VLAN traffic associated with the first port . The filter can also be configured to strip off the VLAN tags from the packets before providing them to virtual port . Similarly a second port receives traffic from the first user s collocated virtual server instances and such as through tap connection C. This traffic is then filtered by a filter so that the first virtual port VP receives only VXLAN traffic associated with the second port . The filter can also be configured to strip off the VXLAN tags from the packets before providing them to virtual port . It is noted that the input ports and can be for example one gigabyte per second fiber optic connections e.g. SFP connections . It is also noted that the first virtual port VP can represent a one gigabyte virtual port.

Looking to the second user s traffic a third port receives traffic from the second user s collocated servers and such as through tap connection B. This traffic is then filtered by a filter so that the second virtual port VP receives only VLAN traffic associated with the third port . The filter can also be configured to strip off the VLAN tags from the packets before providing them to virtual port . Similarly a fourth port receives traffic from the second user s collocated virtual server instances and such as through tap connection D. This traffic is then filtered by a filter so that the second virtual port VP receives only VXLAN traffic associated with the fourth port . The filter can also be configured to strip off the VXLAN tags from the packets before providing them to virtual port . It is noted that the input ports and can also be for example one gigabyte per second fiber optic connections e.g. SFP connections . It is further noted that the second virtual port VP can represent a one gigabyte virtual port.

In operation therefore the master filters controlled by the service provider cause packets from the port s carrying traffic for the first user s physical servers and to be filtered down to traffic tagged with VLAN prior to its being provided to the first virtual port . Similarly master filters cause packets from port s carrying traffic for the second user s physical servers and to be filtered down to traffic tagged with VLAN prior to its being provided to the second virtual port . With respect to the traffic from the cloud server the master filters cause only packets tagged with VXLAN i.e. the first user s traffic to be forwarded to the first virtual port and the master filters cause only packets tagged with VXLAN i.e. the second user s traffic to be forwarded to the second virtual port . The VLAN traffic and the VXLAN traffic therefore is combined at the first virtual port and logically represents all of the first user s traffic within the service provider s network but only the first user s traffic. Similarly the VLAN traffic and the VXLAN traffic is combined at the second virtual port and logically represents all of the second user s traffic within the service provider s network but only the second user s traffic. As indicated above the VLAN and VXLAN tags can also be stripped from the packets by the filters and prior to the packets being forwarded to the virtual ports and .

Advantageously when the first user accesses the first user interface A the first user does not see the physical details of the service provider s network. Rather the virtual port is displayed to the first user and it effectively becomes a network input port for the first user interface A that is receiving the first user s traffic. The first user interface A then allows the first user to route and filter that traffic using the first user filters A.

As with the first user when the second user accesses the second user interface B the second user does not see the physical details of the service provider s network. Rather the virtual port is displayed to the second user and it effectively becomes a network input port for the second user interface B that is receiving the second user s traffic. The second user interface B then allows the second user to route and filter that traffic using the second user filters B.

When the filter rules compiler combines the master filters and the user filters A B the rules complier can effectively remove the virtual ports and which were used in the user interfaces A B to hide the cloud network infrastructure from the users. The rules compiler first generates rules for filter engines based upon the master filters . These master related filter engine rules will have higher priority and be processed before the filter engine rules generated for the user filters. After generating the filter engine rules for the master filters the rules compiler can then generates lower priority filter engine rules based upon the user filters A and B. The priority of execution can be set for example by placing the high priority rules to be executed first within a given filter engine such as an ingress filter engine. In addition priority of execution can be set by placing higher priority rules in ingress engines and lower priority rules in egress engines that receive packets according to the forwarding actions set forth in the ingress engines. For example if the master filter rule applied to an ingress engine associated with an input port allows only a first user s traffic to reach an egress engine associated with an output port that egress engine can only affect how that first user s traffic is passed or dropped before being allowed to be output through the output port. Because the rules compiler can combine and analyze both the master filters and the user filters A and B therefore the rules compiler can effectively remove the virtual ports shown in the user interfaces A B and generate appropriate filter engine rules to be applied to the filter engines within the cloud based network tool optimizer .

The following tables represent example rules that can be set up in ingress and egress filter engines to handle the monitoring example described with respect to . The first table provides example ingress filter engine rules to forward all user traffic to the destination ports for monitoring tools desired to be used by the users. Non user traffic is to be dropped. The remaining tables provide example egress filter engine rules assuming that the users desired only particular ranges of source port SP addresses and destination port DP addresses to be passed to the monitoring tools. All other packets are to be dropped. It is noted that an ingress filter engine is associated with each input port and an egress engine is associated with each output port.

For the tables above it is assumed that the filter engine rules are processed in priority from top to bottom within the tables. As such packets matching the criteria in higher priority rules will be forwarded according to those rules and lower priority rules will not affect these packets as they will have already been forwarded according to a higher priority forwarding action. InputPorts represent the input ports and from the server cloud network. SP Range and DP Range represent SP and DP ranges that the users are selecting to forward to the output ports. OutputPort represents the output port connected to monitoring tool . OutputPort represents the output port connected to monitoring tool . OutputPort represents the output port connected to monitoring tool . And OutputPort represents the output port connected to monitoring tool . It is also noted that a designation indicates that all values match the criteria that a PASS designation indicates that packets matching the filter value are passed along and that a DROP designation indicates that packets matching the filter values are discarded.

As indicated above the tools A B . . . C can also be shared tools such that packets from multiple users are sent to the same tool or group of tools. For example the service provider could have a large array of packet capture tools sufficiently powerful to serve both the first user traffic and the second user traffic in the example above. For such an implementation identifying tags can be added to or left within the user packets. For example if VLAN tagged packets represent traffic for the first user as per the example above these VLAN tags can be left within the packets that are sent to the shared tool. As such the tool can identify and separate packets for different users. Further if a user s packets are not tagged tags such as VLAN or VXLAN tags can be added to the packets to allow the shared tool to identify and separate packet for different users. Other variations could also be implemented.

As described herein it can be useful for the server cloud network to add tags such as VLAN and VXLAN identifiers to packets being routed within the server cloud network in order to identify traffic belonging to different users. For example when a user s traffic within the server cloud network is encapsulated with identifying information by the controlling entity as this traffic traverses the controlling entity s network such as by adding VLAN and or VXLAN headers the actual user packets on the physical network connections are altered from how they appear logically to the user within the user interfaces UIs for the users. Thus while the user will logically see the packet without the internal network header the header is still added to the user s packets when they are transmitted into the server cloud network in order to distinguish the user s packets from other users traffic. Before the user s packets are returned to another system for the original user the header is removed by the cloud server network. As such the user has no visibility that the packet was temporarily altered by the controlling entity as part of transmitting it through the server cloud network.

When the controlling entity of the server cloud network creates a logical port in a user interface for the cloud based network tool optimizer that carries the user s traffic such as virtual ports in it is desirable to hide internal headers for this user interface. From the user s point of view therefore the user will not see the internal headers e.g. VLAN header VXLAN header etc. . Rather the user defines and manages its filters as though this internal header was never present. In operation when the master user filters have fully processed the user s packets the internal header e.g. VLAN header VXLAN header etc. can be replaced or added back to the packets before the packets go back into the server cloud network for example to be provided to a network tool as described above.

To allow the controlling entity to define and manage filters that modify packets re entering its server cloud network virtual network tools can be used within the user interfaces for the users and within the master user interface. Within the user interfaces for the users these virtual network tools represent the network tools to which the user wants to forward its traffic. Within the master user interface these virtual network tools can then be used by the controlling entity to modify user packets re entering its networks for example by defining filters that add back network identifiers e.g. VLAN header VXLAN header etc. . provide example user interfaces for such an implementation.

When the first user accesses the first user interface A therefore the first user does not see the physical details of the service provider s network. Rather the virtual port is displayed to the first user and it effectively becomes a network input port the is receiving the first user s traffic. The first user interface A then allows the first user to filter and forward that traffic using the user filter within the first user filters A. The first user can also choose to forward its traffic to one or more network tools. These network tools can be virtual network tools such as virtual tools and in for which additional filtering may be provided within the master user interface . These network tools may also be network tools such as tools and in for which additional filtering is not provided within the master user interface . As such depending upon the network monitoring tools within the server cloud and depending upon the monitoring resources desired to be made available by the controlling entity of the server cloud network the controlling entity can determine whether network tool or virtual network tool representations are used in the user interface A.

When the filter rules compiler combines the master filters and the user filters A the rules complier can effectively remove the virtual tools as well as the virtual port which were used in the user interface A for the first user to hide the cloud network infrastructure from the first user. The rules compiler first generates rules for filter engines based upon the master filters that are placed before the virtual port in . These master related filter engine rules will have higher priority and be processed before the filter engine rules generated for the user filters. After generating the filter engine rules for filters the rules compilers can then generate lower priority filter engine rules based upon the user filter A that is placed between the virtual port and the virtual tool ports . The rules compiler then processes the master filters that are placed between the virtual tool ports and the network tools . The filter engine rules for these subsequent master filters will have lower priority than the filter engine rules for the user filter A as the application of filters will depend upon how packets were forwarded by the user defined filters A.

As described above the priority of execution can be set for example by placing the high priority rules to be executed first within a given filter engine such as an ingress filter engine. In addition priority of execution can be set by placing higher priority rules in ingress engines and lower priority rules in egress engines that receive packets according to the forwarding actions set forth in the ingress engines. For example if a master filter rule in an ingress engine associated with an input port allows only a first user s traffic to reach an egress engine associated with an output port that egress engine can only affect how that first user s traffic is passed or dropped before being processed by the subsequent master filters and allowed to be output through the output port. Because the rules compiler can combine and analyze both the master filters and the user filters A therefore the rules compiler can effectively remove the virtual ports and virtual network tools shown in the user interface A and generate appropriate filter engine rules to be applied to the filter engines within the cloud based network tool optimizer . It is further noted that additional virtual representations can also be used within the user interfaces if desired and the rules compiler can be configured to remove them in generating the filter engine rules applied within the cloud based network tool optimizer .

The following tables represent example rules that can be set up in ingress and egress filters engines to handle the monitoring example described with respect to . The first table provides example ingress filter engine rules to forward all user traffic to output ports for monitoring tools desired to be used by the user. Non user traffic is to be dropped. The remaining tables provide example egress filter engine rules assuming that the user desired only particular ranges of source port SP addresses and destination port DP addresses to be passed to the monitoring tools and assuming that the controlling entity desires to add internal network identifiers back to the packets. All other packets are to be dropped. It is noted that an ingress filter engine is associated with an input port and an egress engine is associated with each output port.

For the example above therefore that a user s traffic is encapsulated with a VLAN header when it passes through the controlling entity s network and the VLAN identifier is VLAN . This VLAN identifier is stripped from packets at the ingress port and this VLAN identifier is then added back to the packets at the egress port prior to their being output from the egress ports.

It is further noted that the filter engine rules can be further streamlined by the filter rules compiler where the same internal header is being stripped and then added back to the packets. As can be seen in the tables above a VLAN header is used as the initial internal network identifier for the first user s traffic and this same VLAN header is added back in the egress engines. As such the filter engine rules can effectively remove the stripping and adding back of the same internal network identifier. The tables below provide an example for these streamlined filter engine rules.

It is recognized therefore that the stripping adding of the internal network identifiers shown in the master user interface and the user interfaces for the users of the cloud resources provide a useful abstraction for the creation of master filters and user filters . However these abstractions along with virtual representations can be effectively removed by the filter rules compiler in generating the actual filter engine rules that are applied to the filter engines and that determine how user packets are in fact forwarded from input ports for the cloud based network tool optimizer to output ports for the cloud based network tool optimizer .

It is noted that one significant advantage of the master user filters and master user user interfaces described herein is that changes within the service provider network can be made without being visible to the users and without impacting or breaking the user forwarding actions set forth in the user filters. For example if the service provider moves the first user to a different VLAN ID this change can be updated by the service provider through the master filters . Advantageously this change will not affect the first user s filters A or user interface A for the first user as the first user s traffic will still be received at a virtual port for that user once the service provider makes appropriate adjustments to the master filters . As another example if the service provider relocates the second user s virtual server instances to different physical servers and or a different VXLAN ID this change again will not affect the second user s filters B or the user interface B for the second user as the second user s traffic will still be received at a virtual port for that user once the service provider makes appropriate adjustments to the master filters .

It is further noted that the modifications to the master filters can be automated such that new server resources allocated to a user will cause the master filters to be automatically adjusted so that the user s traffic will be forwarded to the user s virtual port. For example if the first user in the examples above is allocated a new virtual server instance that uses a new VXLAN ID e.g. VXLAN a new service command packet can be communicated from the master controller to the cloud based network tool optimizer that includes the new VXLAN ID and the user information. Using this information the cloud based network tool optimizer then automatically adjusts the master filters such that packets having the new VXLAN ID are also sent to the virtual port for the first user.

It is again noted as indicated above that the destination tools A B . . . C can be virtual tool instances formed as NFV network functions virtualization appliances within the cloud server for the service provider e.g. Amazon Web Services . As such tool port representations within the user interfaces A B . . . C can represent logical tools in addition to physical tools. As such when a user sets up a rule to forward packets from its traffic to a tool port this tool port can be implemented using an NFV appliance. Further when a user makes a new filter connection the cloud based network tool optimizer can notify the master controller for the service provider s network and a new tool instance can be created for the user within the server cloud network for the service provider. As such new tool services for the service provider can be automatically initiated by a user through the cloud based network tool optimizer .

It is also noted that the operational blocks described herein can be implemented using hardware software or a combination of hardware and software as desired. In addition integrated circuits discrete circuits or a combination of discrete and integrated circuits can be used as desired that are configured to perform the functionality described. Further programmable integrated circuitry can also be used such as FPGAs field programmable gate arrays ASICs application specific integrated circuits and or other programmable integrated circuitry. In addition one or more processors running software or firmware could also be used as desired. For example computer readable instructions embodied in a tangible medium e.g. memory storage devices FLASH memory random access memory read only memory programmable memory devices reprogrammable storage devices hard drives floppy disks DVDs CD ROMs and or any other tangible storage medium could be utilized including instructions that cause computer systems programmable circuitry e.g. FPGAs and or processors to perform the processes functions and capabilities described herein. It is further understood therefore that one or more of the tasks functions or methodologies described herein may be implemented for example as software or firmware and or other instructions embodied in one or more non transitory tangible computer readable mediums that are executed by a CPU controller microcontroller processor microprocessor or other suitable processing circuitry.

Further modifications and alternative embodiments of this invention will be apparent to those skilled in the art in view of this description. It will be recognized therefore that the present invention is not limited by these example arrangements. Accordingly this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the manner of carrying out the invention. It is to be understood that the forms of the invention herein shown and described are to be taken as the presently preferred embodiments. Various changes may be made in the implementations and architectures. For example equivalent elements may be substituted for those illustrated and described herein and certain features of the invention may be utilized independently of the use of other features all as would be apparent to one skilled in the art after having the benefit of this description of the invention.

