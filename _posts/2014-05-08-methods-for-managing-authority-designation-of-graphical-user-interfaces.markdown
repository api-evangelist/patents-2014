---

title: Methods for managing authority designation of graphical user interfaces
abstract: According to one aspect, a graphics management system receives a first message from a first process for granting one or more rights to a second process for accessing a GUI element owned by the first process. In response, the graphics management system transmits a second message to the second process, the second message offering the one or more rights to the second process. The graphics management system receives a third message from the second process indicating an acceptance of the offer. Thereafter, the graphics management system restricts access of the GUI element by the second process based on the one or more rights accepted by the second process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003427&OS=09003427&RS=09003427
owner: Apple Inc.
number: 09003427
owner_city: Cupertino
owner_country: US
publication_date: 20140508
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 748 145 filed on Jan. 23 2013 now U.S. Pat. No. 8 752 070 which is a continuation of U.S. patent application Ser. No. 13 007 480 filed on Jan. 14 2011 now issued as U.S. Pat. No. 8 365 192.

Embodiments of the invention relate generally to the field of secure computing and more particularly to managing access of graphical user interface GUI elements.

Security concerns for all types of processor based electronic devices and particularly for computing devices have become significant. While some concerns may relate to detrimental actions which may be undertaken by defective code implemented by such devices the greater concerns relate to the modifications of various types of attacks made upon such devices through malicious code including code conventionally known in the field by a number of names such as viruses worms Trojan horses spyware malware and others. Many of these attacks are directed at computing devices such as workstations servers desktop computers notebook and handheld computers and other similar devices. Many of these computing devices can run one or more application programs which a user may operate to perform a set of desired functions.

A number of methodologies have been used in an attempt to reduce or eliminate both the attacks and influence of malicious or defective code. Generally these methodologies include detection prevention and mitigation. Specifically these methodologies range from attempts to scan identify isolate and possibly delete malicious code before it is introduced to the system or before it does harm such as is the objective of anti virus software and the like to restricting or containing the actions which may be taken by processes affected by malicious or defective code.

Most modern computer systems employ operating systems that support GUIs. Central to these operating systems is the use of a low level application referred to as a window server. One function of a window server is to receive annotate and route signals from external devices e.g. human interface devices such as keyboards pointer devices and tablets to the appropriate application e.g. an audio video or multimedia application . Typically the window server manages all windows accessed by programs running within a data processing system including granting accesses to the programs. As more and more programs are running in the system and more and more GUIs are utilized by the programs the process for granting and managing the access of GUIs becomes more complicated and inefficient.

According to one aspect of the invention a graphics management system receives a first message from a first process for granting one or more rights to a second process for accessing a GUI element owned by the first process. In response the graphics management system transmits a second message to the second process the second message offering the one or more rights to the second process. The graphics management system receives a third message from the second process indicating an acceptance of the offer. Thereafter the graphics management system grants access of the GUI element by the second process based on the one or more rights accepted by the second process. In addition the graphics management system may restrict access of the GUI element by the first process associated with one or more exclusive rights that have been granted to the second process.

According to another aspect a first application receives a first message from a second application to request accessing a window created by the first application. The first application transmits a second message to a window server running within a data processing system where the second message includes one or more rights offered to the second application for accessing the window. The first application receives a third message from the window server indicating one of an acceptance and rejection of the one or more rights by the second application. The one or more rights when accepted are used by the window server to restrict the access of the window by the first application and or second application.

According to a further aspect a first program transmits a first message to a second program via an inter process call IPC to request accessing at least a portion of a first window hosted by the second program. The first program receives a second message from a window manager running within a data processing system where the window manager manages windows displayed on a display device of the data processing system. The second message includes one or more access rights of the first window offered by the second program response to the second message the first program transmits a third message to the window manager including one of an acceptance and rejection of the offer of the one or more access rights. The one or more access rights when accepted by the first program are used by the window manager to restrict access of the first window by the first program and or second program.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.

Various embodiments and aspects of the inventions be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

According to some embodiments a mechanism is employed by a window server to allow a first process e.g. trusted process as an owner of a window to grant one or more access rights also simply referred to as rights of the window to a second process e.g. untrusted process as a grantee that requests to access the window. The window server operates as a mediator to allow the first process and second process to negotiate the access rights to allow the second process to access a window owned possessed or created by the first process. Once the access rights have been negotiated between the first and second processes the window server also operates as an enforcer to enforce the agreed upon access rights which may limit access of the first process and or second process to the window based on the negotiated access rights.

As a result by delegating the granting authority to a process that owns the window the window server does not have handle the specific details of granting the access on behalf of an owner where the own is in a better position and knows the specific details of the window. In addition the first process may trust the window server as the window server may be part of an operating system while the first process may be a certified application. However the first process may not trust the second process where the second process may be a third party application installed in the system. By invoking the window server to mediate the granting of the access rights and to enforce the access rights the security concerns between the first and second processes have been greatly reduced.

Window server also referred to as a window manager window management system or a graphics management system is system software e.g. a system component of an operating system controls the placement and appearance of windows also referred to as graphical user interface elements within a windowing system. Window server is designed to help provide an operating environment and it works in conjunction with the underlying graphical system e.g. display device driver and display hardware which provides required functionality such as support for graphics hardware pointing devices and a keyboard. Typically window server controls access by the operating system and other applications e.g. processes to a display via device driver and display hardware e.g. a display controller and or frame buffers . For example drawing may be clipped to an application s visible window. Window server presents an interface to each client application that enables each client application to run without direct interaction with other applications on the machine.

In one embodiment the window system as shown in may be a buffered window system. In a buffered window system application programs e.g. processes do not draw directly into a video memory but to off screen window buffers in system memory that are then composed together by compositor of window server to render the final screen. That is instead of outputting directly to a common screen application programs each output data first to a separate and independent window buffer e.g. window buffers where the data can be manipulated before they are transferred to a frame buffer not shown to be shown on a screen of a display device. The output from these separate window buffers is then processed and combined in the frame buffer to display onto a common screen of the display device.

A frame buffer is typically under control of graphics hardware e.g. a display controller which controls the display of the windows on the screen of the display device using the data in the frame buffer. Thus in a buffered window system operations for creating the content in windows are separated from operations for composing a screen image from images of windows for different applications. Applications create or update images of the windows content for the windows in window buffers and compositor of window server composes a screen image from images of the windows in window buffers . Window buffers are independent from the frame buffer. Content in the corresponding window buffers can be copied by window server and or display device driver to the corresponding locations in the frame buffer to display the windows in these locations on the common screen of the display device. The window buffers are independent from the frame buffer.

According to one embodiment a mechanism is employed by window server to allow a first process e.g. process as an owner of a window to grant or assign one or more access rights of the window to a second process e.g. process as a grantee or assignee that requests to access the window. Typically the second process does not have privilege to access a window and the second process has to rely on the first process to obtain the access rights to the window owned by the first process. For example the first process may be a trusted process that is responsible for display a dialog box to allow a user to select a file from a file system. The second process may be a network related application that only has privilege to access a network but it does not have privilege to access the tile system. However the first process may not trust the second process for the purpose of granting one or more access rights to a window owned by the first process. In this situation the first process can only trust the window server.

In one embodiment window server operates as a mediator or bridge to allow the first process and second process to negotiate the access rights to allow the second process to access a window owned by the first process. Once the access rights have been negotiated between the first and second processes window server also operates as an enforcer to enforce the agreed upon access rights which may limit access of the second process to the window based on the negotiated access rights.

According to one embodiment for each window created by a process window server creates and maintains a window record as part of window records . A window record includes detailed information concerning the respective window including certain access rights that are currently assigned to certain processes. Some of the accesses rights may be exclusive rights e.g. owner event receiver presentation rights which can only be assigned to a single process at a given time. Other accesses rights e.g. back store rights may be non exclusive rights that can be substantially concurrently assigned to multiple processes. Window server is configured to oversee the granting of the access rights from one process to another process or processes. For example window server may reject granting of any exclusive access rights to multiple processes.

In addition when a first process attempts to grant an access right to a second process window server may also authenticate the first process to determine whether the first process has the authority to grant the access right. In one embodiment only an owner of a window can grant an access right to another process that is not an owner of the window. In this example if the second process obtains an access right from the first process and the second process attempts to grant the same access right to a third process window server may reject such an attempt. In one embodiment window server may maintain a list of ownerships of all windows managed by window server . Such information can be used to determine the ownership of a particular window which can be used to whether a particular process has the authority to grant or assign an access right to another process.

Once the access rights have been granted and accepted window server is configured to enforce the access rights of a window according to its associated window record. That is window server may restrict a particular process to access only a portion of a window or a certain function of the window based on the access rights currently owned by that particular process. For example if a process obtains an access right of a window to receive a mouse up event e.g. releasing a mouse button without obtaining an access right to receive a mouse down event e.g. pressing a mouse button window server may allow the process to receive a notification when a mouse up event occurs. However the process would not receive a notification when a mouse down event occurs. Thus the access rights serve as an entitlement to access certain areas or functions of a window and at the same time restrict a process from accessing other areas or functions of the window. This literally put a particular process in a restricted operating environment e.g. sandbox enforced by window server .

Referring back to for the purpose of illustration in response to a request received from process for granting one or more access rights to process window server is configured to authenticate process to ensure that process has the authority to grant an access right. Window server is further configured to examine the access rights to be granted to create a window record reflecting the current states of the window. In one embodiment a window record includes information identifying all or most of the access rights and the processes that hold the access rights. Thereafter window server transmits the information representing the window record to process offering the access rights to be granted by process . Based on the information received from window server process can either accept or reject the offer. In one embodiment process can only accept or reject the entire offer. The offer may expire and become invalid after a predetermined period of time within which an acceptance has not been received by window server . Once the offer has been accepted by process window server is configured to enforce the access of the window by process based on the accepted terms specified in the window record. In addition if one or more exclusive rights have been granted to the process access of process associated with the exclusive rights may also be restricted by window server since process no longer has those exclusive rights .

As a result by delegating the granting authority to process that owns the window window server does not have to handle the specific details of granting the access on behalf of an owner. In this situation process as an owner is in the best position to grant the access rights as typically the owner knows the specific details of the window. In addition process may trust window server as window server may be part of an operating system while process may be a certified application. However process may not trust process where process may be a third party application installed in system . By involving window server to mediate the granting of the access rights and to enforce the access rights process does not have to worry about the authenticity of process .

According to some embodiments an access right of a window includes one of an ownership right presentation right event receiving right back store read right back store write right and some other rights. In one embodiment an ownership right is an exclusive right granting the sole ability to destroy the window create right grants and currently to change the nature of backing resources such as the for a of the backing store . All exclusive rights not explicitly held are implicitly held by the owner. A presentation right is an exclusive right granting the ability to display a window visually as part of a process and manipulate the display characteristics shape position on screen etc. An event recipient right is an exclusive right granting the ability to receive user events on the window. Mouse clicks keyboard events routed to the window go to the holder of an even recipient right. Backing store access rights are both non exclusive rights granting the ability to read or write the memory backing the window s content. The ability to overwrite content has security implications as fake content can guide a user to perform actions they otherwise would not and the ability to inspect content has security implications as it enables gathering of user information which a process would otherwise not have access to.

Referring to initially during transaction when process requests accessing a window owned by process process transmits a first message to process for example via an inter process call IPC or an application programming interface API . The request may include information describing the window to be accessed including for example a window identifier ID identifying the window a location or coordinates of at least a portion of the window being accessed and one or ore interactions with the window e.g. event notifications to be received etc. In addition the request may further include a token or process or thread ID that uniquely identifies process under window server . For the IPC between two processes prior to contacting the window server a message or sequence of messages may be communicated between two processes. In one embodiment a token to be passed to window server to identify process already in the section indicating what is being requested. This could be a window identifier or it could be a description of a behavior function e.g. I want window vs. I want a save panel . In addition a requested set of rights can be optional in this scenario especially in the case of a description of behavior.

In response to the first message during transaction process transmits for example via an API a second message to window server . The second message includes one or more access rights to be offered to process for accessing the window and a token or process ID associated with process . The one or more access rights may represent at least some of the interactions that process can or cannot do with respect to the window. For example an access right may determine whether a notification of a particular ever e.g. mouse up or mouse down event will be sent and received by process . Some of these access rights may be exclusive rights that can only be possessed or held by a single process at a time or non exclusive rights that can be shared by multiple processes. In addition the second message may further include other access rights that are currently held by or assigned to other processes.

In response to the second message received from process window server authenticates process to ensure that process has the authority to grant the rights. In one embodiment only an owner of a window can grant an access right of the window to another process. Window server also authenticates process based on the token or process ID of process . In addition window server generates a window record corresponding to the window ID obtained from the second message. The window record includes detailed information concerning at least some access rights of the window including the access rights being offered to process . During transaction window server transmits a third message to process where the third message includes at least the one or more access rights being offered. In one embodiment if some of the access rights being offered include a non exclusive right the third message may further identify one or more other processes that share the non exclusive right. In one embodiment the third message may further include other access rights held by other processes but not held by process . As a result process has an entire picture or full description of all the access rights associated with the window in determining whether to accept or reject the offer. In one embodiment the offer may be good for a predetermined period of time which may be set up by window server e.g. via a timer . When there is no acceptance received from process the offer may expire and become invalid.

Based on the offer during transaction process transmits a fourth message back to window server either accepting the offer or rejecting the offer. During transaction window server transmits fifth message to process indicating whether the offer has been accepted rejected or expired. In one embodiment window server also sets up a timer with a predetermined timeout period and when the timeout period lapses the offer may become invalid. When the offer has been rejected by process or the offer becomes invalid the corresponding window record may be updated e.g. rolled back or destroyed by window server and without the corresponding window record window server prevents process from accessing the window.

If the offer has been accepted by process during transaction window sever is configured to enforce the accepted access rights when process accesses the window. For example process may request to receive certain event notifications e.g. mouse up mouse down resize and or focus events . Based on the request process may grant those access rights to receive such event notifications. During operations when the associated interactions occur on the window the corresponding event notifications will be transmitted e.g. via a callback interface from window server to process provided the corresponding window record indicates that such access rights are currently possessed by process . In addition if an exclusive right has been granted from process to process the access of process associated with the exclusive right may also be restricted by window server as process has given up that exclusive right.

As shown in the computer system which is a form of a data processing system includes a bus or interconnect which is coupled to one or more microprocessors and a ROM a volatile RAM and a non volatile memory . The microprocessor is coupled to cache memory . The bus interconnects these various components together and also interconnects these components and to a display controller and display device as well as to input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art.

Typically the input output devices are coupled to the system through input output controllers . The volatile RAM is typically implemented as dynamic RAM DRAM which requires power continuously in order to refresh or maintain the data in the memory. The non volatile memory is typically a magnetic hard drive a magnetic optical drive an optical drive or a DVD RAM or other type of memory system which maintains data even after power is removed from the system. Typically the non volatile memory will also be a random access memory although this is not required.

While shows that the non volatile memory is a local device coupled directly to the rest of the components in the data processing system the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals. Alternatively I O controller may include an IEEE 1394 adapter also known as FireWire adapter for controlling FireWire devices.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the compute system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

