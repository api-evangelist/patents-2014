---

title: Interface for management of data movement in a thin provisioned storage system
abstract: A computational device receives a request to copy a source logical block of a thin provisioned source logical unit to a target logical block of a thin provisioned target logical unit, wherein in thin provisioned logical units physical storage space is allocated in response to a write operation being performed but not during creation of the thin provisioned logical units. The computational device generates metadata that stores a correspondence between the source logical block and the target logical block, while avoiding allocating any physical storage space for the target logical block in the thin provisioned target logical unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256382&OS=09256382&RS=09256382
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09256382
owner_city: Armonk
owner_country: US
publication_date: 20141203
---
This application is a continuation of application Ser. No. 13 274 684 filed on Oct. 17 2011 now U.S. Pat. No. 8 935 499 issued on Jan. 13 2015 which is incorporated herein by reference in its entirety.

The disclosure relates to a method system and article of manufacture for an interface for the management of data movement in a thin provisioned storage system.

A storage system may be comprised of a storage controller that controls a plurality of physical storage devices. The plurality of physical storage devices may include hard disks solid state disks tapes etc. The storage controller may configure the plurality of physical storage devices into a plurality of logical storage devices comprising a plurality of storage volumes.

In a storage system a logical unit number or LUN is a number used to identify a logical unit. A logical unit is a logical storage device addressed by a storage protocol such as Small Computer System Interface SCSI Fibre Channel Internet Small Computer System Interface iSCSI etc. that may be used in the storage system.

Data movement operations within the storage system may occur for a variety of reasons including the movement of a file from one file system to another the defragmentation of a file system the alignment of blocks etc. Data movement operations may involve moving data from a source logical unit LUN to a target LUN. While copying data from a source LUN to a target LUN the data may first have to be copied from the source LUN to the host memory and then the data may be written to the desired destination on the target LUN by copying the data from the host memory to the target LUN.

Thin provisioning mechanisms may apply to storage systems. A storage system that uses thin provisioning may be referred to as a thin provisioned storage system. Thin provisioning allocates storage e.g. physical disk blocks or other equivalent elements of storage capacity when application data is effectively written to a host attached storage volume. This is the difference with the traditional fully provisioned storage volume where the storage volume capacity is entirely allocated at the time the storage volume is created. If fully provisioned storage volumes are used then the host to which the fully provisioned storage volume is attached owns the full storage capacity and this consumes additional storage in the back end system.

A storage volume supporting thin provisioning is referred to as a space efficient storage volume. At the time the space efficient storage volume is created the storage volume is created as if it is able to provide the full capacity requested by the user but because the actual allocation of storage space will only take place with the first host write to the storage volume this capacity is a virtual capacity. All Input Output I O activities performed by the storage system to allocate space when needed are fully transparent to the host.

Provided are a method a system a computer program product and a network in which a computational device receives a request to copy a source logical block of a thin provisioned source logical unit to a target logical block of a thin provisioned target logical unit wherein in thin provisioned logical units physical storage space is allocated in response to a write operation being performed but not during creation of the thin provisioned logical units. The computational device generates metadata that stores a correspondence between the source logical block and the target logical block while avoiding allocating any physical storage space for the target logical block in the thin provisioned target logical unit.

In further embodiments a storage management application executing in the computational device provides an application programming interface to remap physical storage that is currently mapped to the source logical block of the thin provisioned source logical unit to be mapped to the target logical block of the thin provisioned target logical unit without physically moving data from the thin provisioned source logical block to the thin provisioned target logical unit.

In yet further embodiments a storage management application executing in the computational device provides an application programming interface to swap physical storage that is currently assigned to the source logical block of the thin provisioned source logical unit to be swapped with physical storage assigned to a target logical block of the thin provisioned target logical unit wherein execution of the application programming interface executes the swap atomically.

In still further embodiments an application programming interface that allows virtual data movement from the thin provisioned source logical unit to the thin provisioned target logical unit without actually performing any physical movement of data from the thin provisioned source logical unit to the thin provisioned target logical unit is provided to exploit characteristics of thin provisioning systems to provide mappings between virtual and physical blocks.

In certain embodiments in response to a reconfiguration of the thin provisioned source logical unit or the thin provisioned target logical unit as fully provisioned data stored in the source logical block is physically copied to the target logical block.

In further embodiments the thin provisioned source logical unit and the thin provision target logical unit are logical representations of storage maintained in one or more physical storage devices coupled to the computational device. The source logical block is a logical subdivision of the thin provisioned source logical unit. The target logical block is a logical subdivision of the thin provisioned target logical unit.

In certain embodiments the network is configured to provide a cloud computing environment in which the computational device provides computational processing and storage services.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments. It is understood that other embodiments may be utilized and structural and operational changes may be made.

If some or all data movements are avoided in storage systems significant improvement in performance may occur. In enterprise storage systems environments mechanisms to smartly manage data and avoid unnecessary data movement overheads may significantly improve the performance of the storage system. Also with the explosion of data such as digital photographs digital video etc. storage performance and reduction of storage requirements have become major factors in selecting a storage vendor and users may prefer to select storage vendors that provide storage systems that avoid unnecessary data movements and also avoid wastage of storage.

It may be noted that if data replication is enabled in a data center any write to the replicated data volumes may have to be replicated over an expensive network link to a remote storage system. Therefore if data movement is reduced it also results in bandwidth savings over the data replication link.

Certain systems perform copy operations such as movement of files across file systems etc. by reading data from the storage system to the host memory and writing the data back to a new location on the storage system. In certain situations it may take a significant amount of time to execute these operations and valuable bandwidth may be wasted to read and write data because more data has to be sent across the replication link.

Certain embodiments exploit the ability of the thin provisioning systems to map physical storage to virtual address space by providing an application programming interface API that allows virtual data movement from a source logical block address of a source logical unit to a target logical block of a target logical unit without actually performing any physical movement of data from the source logical unit to the target logical unit.

The computational device may comprise any suitable computational device including those presently known in the art such as a personal computer a workstation a server a mainframe a hand held computer a palm top computer a telephony device a network appliance a blade computer a server etc. The physical storage devices . . . may comprise any suitable storage devices such as hard disks solid state disks linear storage devices etc. The computational device and the physical storage devices . . . may communicate over the network where the network may comprise any suitable network such as the Internet a storage area network a wide area network a local area network etc. In certain embodiments the computational device may be implemented in a cloud computing environment and may provide processing and storage services to users.

The computational device executes a storage management application that controls the plurality of storage devices . . . . In certain embodiments the storage management application or some other application may have mapped reference numeral the plurality of physical storage devices . . . into a plurality of thin provisioned logical units LUN . . . . The thin provisioned logical units . . . may comprise space efficient storage volumes and these space efficient storage volumes save storage space when storage space is only potentially or temporarily needed. Without the use of space efficient storage volumes target storage volumes consume the same physical capacity as source storage volumes. When a normal storage volume is created it occupies the defined capacity on the physical drives. A space efficient storage volume does not occupy physical capacity when it is initially created. Space gets allocated when data is actually written to the space efficient storage volume which allows the target storage volume capacity to be thinly provisioned in other words smaller than the full capacity of the source storage volume . Therefore an administrator can initially provision less storage capacity which can help lower the amount of physical storage that is needed by many installations.

The storage management application that executes in the computational device may in certain embodiments implement one or more application programming interfaces API . The application programming interfaces may allow data to be moved from a thin provisioned source logical unit to a thin provisioned target logical unit without physically copying the data stored in one or more physical storage devices.

The storage management application may receive a command to copy one or more logical blocks from a thin provisioned source logical unit to a thin provisioned target logical unit . The thin provisioned source logical unit may comprise a plurality of logical blocks stored in logical block addresses . . . and the thin provisioned target logical volume may comprise a plurality of logical blocks stored at logical blocks addresses . . . . For example logical blocks addresses LBA S LBA S LBA SM of the thin provisioned source logical unit are shown via reference numerals respectively and logical block addresses LBA T LBA T LBA TN of thin provisioned target logical unit are shown via reference numerals respectively.

In certain exemplary embodiments the storage management application receives a command to copy blocks stored at thin provisioned source logical unit s LBA S to thin provisioned target logical unit s LBA T . In response the storage management application uses the application programming interfaces to generate the metadata . In the metadata a pointer may provide a correspondence between the thin provisioned source logical unit s LBA S shown via reference numeral and the thin provisioned target logical unit s LBA T shown via reference numeral . No blocks of data are physically copied from the thin provisioned source logical unit to the thin provisioned target logical unit . The pointer indicates that data that was intended to be copied but was actually not copied to the thin provisioned target logical unit s LBA T is actually stored in thin provisioned source logical unit s LBA S . If a read request is received for data that was intended to be copied to LBA T of the thin provisioned target logical unit that data is provided by the storage management application from the thin provisioned source logical unit s LBA S after processing the metadata that includes the pointer .

In two different application programming interfaces API are shown. A first application programming interface is the Remap API and the second application programming interface is the Swap API .

The Remap API allows physical storage currently mapped to a source logical unit s sourceLUN parameter source logical block address sourceLBA parameter to be mapped to a specified target logical unit s targetLUN parameter target logical block address targetLBA parameter without involving any data read or write operation by the application. The logical representation of the Remap API is as follows where the size parameter is the size of the block to be mapped remap sourceLun sourceLBA targetLUN targetLBA size .

The swap API allows physical storage assigned to a source logical unit s sourceLUN parameter source logical block address sourceLBA parameter to be virtually swapped with the physical storage assigned to a specified target logical unit s targetLUN parameter target logical block address targetLBA parameter for a specified size size parameter atomically. The logical representation of the Swap API is as follows 

In certain embodiments the source logical unit and the target logical unit may be different logical units. In certain other embodiments the Remap and Swap API s may be used on logical block addresses located within the same logical unit. However the source and target logical units are part of the same storage array.

In situations where data replication is configured on the underlying storage array the exemplary APIs may be applied so that the move operations can be achieved without moving data over the replication link to remote storage thus saving significant amounts of replication bandwidth. The same capability provided by APIs may be employed by storage that is configured as a log structured array.

Using the above API applications such as file systems can remap physical storage currently mapped to a source LUN to a target LUN thus enabling certain file system operations to be executed without any actual data movement.

In it can be seen that data is physically moved from logical block address of logical unit to logical block address of logical unit . The data movement across multiple layers using multiple resources is shown via reference numeral in the storage array .

In it can be seen that data is not physically moved from logical block address of logical unit to logical block address of logical unit . The avoidance of data movement across multiple layers using multiple resources is shown via reference numeral in the storage array . It can be seen that the Remap API causes the target logical block address and the source logical block address to point to the same physical storage location in physical storage .

Control starts at block in which the storage management application that executes in the computational device provides an application programming interface e.g. the Remap API shown in to remap physical storage that is currently mapped to a source logical block of a thin provisioned source logical unit to be mapped to a target logical block of a thin provisioned target logical unit without physically moving data from the thin provisioned source logical unit to the thin provisioned target logical unit 

In parallel to execution of block the storage management application that executes in the computational device provides at block an application programming interface e.g. the swap API shown in to swap physical storage that is currently assigned to a source logical block of a thin provisioned source logical unit to be swapped with physical storage assigned to a target logical block of a thin provisioned target logical unit wherein execution of the application programming interface executes the swap atomically.

After the elapse of a period of time control proceeds to block from either block or block . At block the computational device receives a request to copy a source logical block of a thin provisioned source logical unit to a target logical block of a thin provisioned target logical unit wherein in thin provisioned logical units physical storage space is allocated in response to a write operation being performed but not during creation of the thin provisioned logical units

The computational device generates at block metadata that stores a correspondence between the source logical block and the target logical block while avoiding allocating any physical storage space for the target logical block in the thin provisioned target logical unit.

From block control may proceed in parallel to block or block . At block in response to a reconfiguration of the thin provisioned source logical unit or the thin provisioned target logical unit as fully provisioned data stored in the source logical block is physically copied to the target logical block.

At block the storage management application performs a read operation of the target logical block by accessing the source logical block from the correspondence maintained in the metadata .

Certain embodiments shown in ensure that in thin provisioning systems certain operations that may otherwise have resulted in physical data movement from one logical unit to another within the same disk array are substituted with remapping and swapping operations via pointers where the physical data movement from source to target logical units is avoided.

In full provisioning systems each data movement operation from one logical unit to another may cause data to be read from the source LUN into host memory and then written back to the target LUN. This involves bandwidth usage. Certain embodiments ensure that in thin provisioning systems a number of operations that may otherwise have resulted in bandwidth intensive data movement are avoided thus resulting in improved resource utilization and improved performance.

In full provisioning systems data movement operation on a disk array results in new data to be replicated to a remote site if data replication is configured for the disk array. Certain embodiments save network bandwidth by ensuring that write operations are minimized. Reduction in data movement over the network and reduced reads and writes to disks ensure decreased power consumption thus ensuring greener data centers and significant cost savings.

The described operations may be implemented as a method apparatus or computer program product using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. Accordingly aspects of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied there.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . Java is a trademark or registered trademark of Oracle and or its affiliates.

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Certain embodiments may be directed to a method for deploying computing instruction by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described embodiments.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

At least certain operations that may have been illustrated in the figures show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover steps may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

