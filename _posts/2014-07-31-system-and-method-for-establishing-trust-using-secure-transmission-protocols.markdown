---

title: System and method for establishing trust using secure transmission protocols
abstract: A system, apparatus, method, and machine readable medium are described for establishing trust using secure communication protocols. For example, one embodiment of a method comprises: generating a first authentication-related communication at an authentication server on behalf of a relying party the first authentication-related communication being directed to a client device having one or more authenticators; signing the first authentication-related communication using a first key of a self-signed certificate from a decentralized public key infrastructure (PKI); establishing a first secure communication channel with a relying party app on the client device using a trusted secure communication infrastructure; transmitting the first authentication-related communication with the signature to the relying party app over the first secure communication channel; establishing a second secure communication channel with an authentication client on the client device using a trusted secure communication infrastructure; transmitting a second key of the self-signed certificate from the decentralized PKI to the authentication client over the second communication channel; providing the first authentication-related communication from the relying party app to the authentication client; and the authentication client using the second key to validate the signature generated over the first authentication-related communication with the first key.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09455979&OS=09455979&RS=09455979
owner: NOK NOK LABS, INC.
number: 09455979
owner_city: Palo Alto
owner_country: US
publication_date: 20140731
---
This invention relates generally to the field of data processing systems. More particularly the invention relates to a system and method for establishing trust using secure transmission protocols.

Systems have also been designed for providing secure user authentication over a network using biometric sensors. In such systems the a score generated by an authenticator and or other authentication data may be sent over a network to authenticate the user with a remote server. For example Patent Application No. 2011 0082801 801 Application describes a framework for user registration and authentication on a network which provides strong authentication e.g. protection against identity theft and phishing secure transactions e.g. protection against malware in the browser and man in the middle attacks for transactions and enrollment management of client authentication tokens e.g. fingerprint readers facial recognition devices smartcards trusted platform modules etc .

The assignee of the present application has developed a variety of improvements to the authentication framework described in the 801 application. Some of these improvements are described in the following set of US Patent Applications Co pending Applications which are assigned to the present assignee Ser. No. 13 730 761 Query System and Method to Determine Authentication Capabilities Ser. No. 13 730 776 System and Method for Efficiently Enrolling Registering and Authenticating With Multiple Authentication Devices Ser. No. 13 730 780 System and Method for Processing Random Challenges Within an Authentication Framework Ser. No. 13 730 791 System and Method for Implementing Privacy Classes Within an Authentication Framework Ser. No. 13 730 795 System and Method for Implementing Transaction Signaling Within an Authentication Framework and Ser. No. 14 218 504 Advanced Authentication Techniques and Applications hereinafter 504 Application .

Briefly the Co Pending Applications describe authentication techniques in which a user enrolls with authentication devices or Authenticators such as biometric devices e.g. fingerprint sensors on a client device. When a user enrolls with a biometric device biometric reference data is captured e.g. by swiping a finger snapping a picture recording a voice etc . The user may subsequently register the authentication devices with one or more servers over a network e.g. Websites or other relying parties equipped with secure transaction services as described in the Co Pending Applications and subsequently authenticate with those servers using data exchanged during the registration process e.g. cryptographic keys provisioned into the authentication devices . Once authenticated the user is permitted to perform one or more online transactions with a Website or other relying party. In the framework described in the Co Pending Applications sensitive information such as fingerprint data and other data which can be used to uniquely identify the user may be retained locally on the user s authentication device to protect a user s privacy. The 504 Application describes a variety of additional techniques including techniques for designing composite authenticators intelligently generating authentication assurance levels using non intrusive user verification transferring authentication data to new authentication devices augmenting authentication data with client risk data and adaptively applying authentication policies and creating trust circles to name just a few.

Described below are embodiments of an apparatus method and machine readable medium for implementing advanced authentication techniques and associated applications. Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are not shown or are shown in a block diagram form to avoid obscuring the underlying principles of the present invention.

The embodiments of the invention discussed below involve authentication devices with user verification capabilities such as biometric modalities or PIN entry. These devices are sometimes referred to herein as tokens authentication devices or authenticators. While certain embodiments focus on facial recognition hardware software e.g. a camera and associated software for recognizing a user s face and tracking a user s eye movement some embodiments may utilize additional biometric devices including for example fingerprint sensors voice recognition hardware software e.g. a microphone and associated software for recognizing a user s voice and optical recognition capabilities e.g. an optical scanner and associated software for scanning the retina of a user . The user verification capabilities may also include non biometric modalities like PIN entry. The authenticators might use devices like trusted platform modules TPMs smartcards and secure elements for cryptographic operations and key storage.

In a mobile biometric implementation the biometric device may be remote from the relying party. As used herein the term remote means that the biometric sensor is not part of the security boundary of the computer it is communicatively coupled to e.g. it is not embedded into the same physical enclosure as the relying party computer . By way of example the biometric device may be coupled to the relying party via a network e.g. the Internet a wireless network link etc or via a peripheral input such as a USB port. Under these conditions there may be no way for the relying party to know if the device is one which is authorized by the relying party e.g. one which provides an acceptable level of authentication strength and integrity protection and or whether a hacker has compromised or even replaced the biometric device. Confidence in the biometric device depends on the particular implementation of the device.

The term local is used herein to refer to the fact that the user is completing a transaction in person at a particular location such as at an automatic teller machine ATM or a point of sale POS retail checkout location. However as discussed below the authentication techniques employed to authenticate the user may involve non location components such as communication over a network with remote servers and or other data processing devices. Moreover while specific embodiments are described herein such as an ATM and retail location it should be noted that the underlying principles of the invention may be implemented within the context of any system in which a transaction is initiated locally by an end user.

The term relying party is sometimes used herein to refer not merely to the entity with which a user transaction is attempted e.g. a Website or online service performing user transactions but also to the secure transaction servers sometimes referred to as au implemented on behalf of that entity which may performed the underlying authentication techniques described herein. The secure transaction servers may be owned and or under the control of the relying party or may be under the control of a third party offering secure transaction services to the relying party as part of a business arrangement.

The term server is used herein to refer to software executed on a hardware platform or across multiple hardware platforms that receives requests over a network from a client responsively performs one or more operations and transmits a response to the client typically including the results of the operations. The server responds to client requests to provide or help to provide a network service to the clients. Significantly a server is not limited to a single computer e.g. a single hardware device for executing the server software and may in fact be spread across multiple hardware platforms potentially at multiple geographical locations.

Turning first to the illustrated embodiment includes a client equipped with one or more authentication devices sometimes referred to in the art as authentication tokens or Authenticators for enrolling and verifying an end user. As mentioned above the authentication devices may include biometric device such as fingerprint sensors voice recognition hardware software e.g. a microphone and associated software for recognizing a user s voice facial recognition hardware software e.g. a camera and associated software for recognizing a user s face and optical recognition capabilities e.g. an optical scanner and associated software for scanning the retina of a user and support for non biometric modalities such as PIN verification. The authentication devices might use trusted platform modules TPMs smartcards or secure elements for cryptographic operations and key storage.

The authentication devices are communicatively coupled to the client through an interface e.g. an application programming interface or API exposed by a secure transaction service . The secure transaction service is a secure application for communicating with one or more secure transaction servers over a network and for interfacing with a secure transaction plugin executed within the context of a web browser . As illustrated the Interface may also provide secure access to a secure storage device on the client which stores information related to each of the authentication devices such as a device identification code user identification code user enrollment data e.g. scanned fingerprint or other biometric data protected by he authentication device and keys wrapped by the authentication device used to perform the secure authentication techniques described herein. For example as discussed in detail below a unique key may be stored into each of the authentication devices and used when communicating to servers over a network such as the Internet.

As discussed below certain types of network transactions are supported by the secure transaction plugin such as HTTP or HTTPS transactions with websites or other servers. In one embodiment the secure transaction plugin is initiated in response to specific HTML tags inserted into the HTML code of a web page by the web server within the secure enterprise or Web destination sometimes simply referred to below as server . In response to detecting such a tag the secure transaction plugin may forward transactions to the secure transaction service for processing. In addition for certain types of transactions e.g. such as secure key exchange the secure transaction service may open a direct communication channel with the on premises transaction server i.e. co located with the website or with an off premises transaction server .

The secure transaction servers are coupled to a secure transaction database for storing user data authentication device data keys and other secure information needed to support the secure authentication transactions described below. It should be noted however that the underlying principles of the invention do not require the separation of logical components within the secure enterprise or web destination shown in . For example the website and the secure transaction servers may be implemented within a single physical server or separate physical servers. Moreover the website and transaction servers may be implemented within an integrated software module executed on one or more servers for performing the functions described below.

As mentioned above the underlying principles of the invention are not limited to a browser based architecture shown in . illustrates an alternate implementation in which a stand alone application utilizes the functionality provided by the secure transaction service to authenticate a user over a network. In one embodiment the application is designed to establish communication sessions with one or more network services which rely on the secure transaction servers for performing the user client authentication techniques described in detail below.

In either of the embodiments shown in the secure transaction servers may generate the keys which are then securely transmitted to the secure transaction service and stored into the authentication devices within the secure storage . Additionally the secure transaction servers manage the secure transaction database on the server side.

Certain basic principles associated with remotely registering authentication devices and authenticating with a relying party will be described with respect to followed by a detailed description of embodiments of the invention for establishing trust using secure communication protocols.

During registration of an authenticator e.g. a fingerprint authenticator voice authenticator etc a key associated with the authenticator is shared between the authentication client and the relying party . Referring back to the key may be stored within the secure storage of the client and the secure transaction database used by the secure transaction servers . In one embodiment the key is a symmetric key generated by one of the secure transaction servers . However in another embodiment discussed below asymmetric keys are be used. In this embodiment the public private key pair may be generated by the secure transaction servers . The public key may then be stored by the secure transaction servers and the related private key may be stored in the secure storage on the client. In an alternate embodiment the key s may be generated on the client e.g. by the authentication device or the authentication device interface rather than the secure transaction servers . The underlying principles of the invention are not limited to any particular types of keys or manner of generating the keys.

A secure key provisioning protocol is employed in one embodiment to share the key with the client over a secure communication channel. One example of a key provisioning protocol is the Dynamic Symmetric Key Provisioning Protocol DSKPP see e.g. Request for Comments RFC 6063 . However the underlying principles of the invention are not limited to any particular key provisioning protocol. In one particular embodiment the client generates a public private key pair and sends the public key to the server which may be attested with an attestation key.

Turning to the specific details shown in to initiate the registration process the relying party generates a randomly generated challenge e.g. a cryptographic nonce that must be presented by the authentication client during device registration. The random challenge may be valid for a limited period of time. In response the authentication client initiates an out of band secure connection with the relying party e.g. an out of band transaction and communicates with the relying party using the key provisioning protocol e.g. the DSKPP protocol mentioned above . To initiate the secure connection the authentication client may provide the random challenge back to the relying party potentially with a signature generated over the random challenge . In addition the authentication client may transmit the identity of the user e.g. a user ID or other code and the identity of the authentication device s to be registered e.g. using the authentication attestation ID AAID which uniquely identify the type of authentication device s being registered .

The relying party locates the user with the user name or ID code e.g. in a user account database validates the random challenge e.g. using the signature or simply comparing the random challenge to the one that was sent validates the authentication device s authentication code if one was sent e.g. the AAID and creates a new entry in a secure transaction database e.g. database in for the user and the authentication device s . In one embodiment the relying party maintains a database of authentication devices which it accepts for authentication. It may query this database with the AAID or other authentication device s code to determine if the authentication device s being registered are acceptable for authentication. If so then it will proceed with the registration process.

In one embodiment the relying party generates an authentication key for each authentication device being registered. It writes the key to the secure database and sends the key back to the authentication client using the key provisioning protocol. Once complete the authentication device and the relying party share the same key if a symmetric key was used or different keys if asymmetric keys were used. For example if asymmetric keys were used then the relying party may store the public key and provide the private key to the authentication client . Upon receipt of the private key from the relying party the authentication client provisions the key into the authentication device storing it within secure storage associated with the authentication device . It may then use the key during authentication of the user as described below . In an alternate embodiment the key s are generated by the authentication client and the key provisioning protocol is used to provide the key s to the relying party . In either case once provisioning is complete the authentication client and relying party each have a key and the authentication client notifies the relying party of the completion.

Turning to the specific details shown in in response to the user initiating a transaction with the relying party which requires authentication e.g. initiating payment from the relying party s website accessing private user account data etc the relying party generates an authentication request which includes a random challenge e.g. a cryptographic nonce . In one embodiment the random challenge has a time limit associated with it e.g. it is valid for a specified period of time . The relying party may also identify the authenticator to be used by the authentication client for authentication. As mentioned above the relying party may register each authentication device available on the client and stores a public key for each registered authenticator. Thus it may use the public key of an authenticator or may use an authenticator ID e.g. AAID to identify the authenticator to be used. Alternatively it may provide the client with a list of authentication options from which the user may select.

In response to receipt of the authentication request the user may be presented with a graphical user interface GUI requesting authentication e.g. in the form of a web page or a GUI of an authentication application app . The user then performs the authentication e.g. swiping a finger on a fingerprint reader etc . In response the authentication client generates an authentication response containing a signature over the random challenge with the private key associated with the authenticator. It may also include other relevant data such as the user ID code in the authentication response.

Upon receipt of the authentication response the relying party may validate the signature over the random challenge e.g. using the public key associated with the authenticator and confirm the identity of the user. Once authentication is complete the user is permitted to enter into secure transactions with the relying party as illustrated.

A secure communication protocol such as Transport Layer Security TLS or Secure Sockets Layer SSL may be used to establish a secure connection between the relying party and the authentication client for any or all of the transactions illustrated in .

As mentioned above in certain implementations using remote authentication a secure communication protocol such as TLS or SSL may be used to securely exchange data between the relying party and the authentication client. Briefly TLS and SSL are cryptographic protocols which provide secure communication over normally insecure communication channels e.g. the Internet . They use X.509 certificates which implement asymmetric cryptography to exchange a symmetric key. This symmetric key is then used during a communication session to encrypt the data channel between the parties. While the remainder of this detailed description will focus on the use of TLS the underlying principles of the invention may be implemented using other cryptographic protocols such as SSL.

In one embodiment TLS is used to secure the communication channel between the relying party and authentication client and to validate the identity of the sender. That is by using asymmetric cryptography supported by X.509 certificates one party e.g. the authentication client has the ability to validate the identity of the counterparty e.g. the relying party or vice versa. The identity of the counterparty may be embodied in a code or name which for example identifies the relying party e.g. RPNAME or identifies the authentication client or a specific application on the client used to establish the communication channel with the relying party e.g. an AppID . When a direct channel exists between the authentication client and the relying party as in the examples provided above the use of TLS works well for this purpose since the data is typically sent over the Internet and TLS is always available.

However on certain computing device platforms such as iOS Android and Near Field Communication NFC transactions this TLS assumption doesn t hold. As illustrated generally in on these platforms third party code such as a relying party app is expected to manage all communications between the relying party and the authentication client . Thus the relying party app acts essentially like a man in the middle between the relying party and the authentication client . Moreover the authentication client has no information regarding the validity of the TLS connection established by the relying party app . It must simply rely on the third party code to make this determination and hand off the authentication requests using IPC mechanisms as illustrated . These IPC mechanisms have access to the identification code of the sending app e.g. the bundle ID but verifying the authenticity of the identity of the sender recipient e.g. RPNAME AppID using the bundle ID relies heavily on the operating system and the care of the vetting process implemented by the app store that distributed the relying party app.

With NFC the situation is even worse because there is no identification code such as a bundle ID that accompanies the transport mechanism. NFC is handled by a generic Multipurpose Internet Mail Extensions MIME handler. The authentication client must assume whatever identification code e.g. RPNAME is being claimed is correct and that the authentication request is coming from a valid source.

More specifically on iOS devices the app that is communicating with the authentication client is determined using the sourceApplication parameter of the openURL call in the multifactor authentication client s AppDelegate code BOOL application UIApplication application openURL NSURL url sourceApplication NSString sourceApplication annotation id annotation

In this example sourceApplication contains the bundle ID of the calling app. The bundle ID is a unique string in the calling app s plist manifest that identifies the app in Apple database. The bundle ID is recommended to be partly constructed using the base URL of the company in reverse notation e.g. com.paypal.app . As such Apple is assumed to vet this string to make sure the app does not attempt to spoof other applications.

For Android devices getCallingUid is first called from the system Binder to return the Linux uid assigned to the relying party process that sent the current transaction to the multifactor authentication process that is being processed for example 

With NFC there is no trustable piece of information that can be mapped to a counterparty identifier e.g. RPNAME or AppID . With NFC on Android the request arrives via a Multipurpose Internet Mail Extensions MIME handler and the caller is not identifiable. Thus any identifier included in the request may or may not be valid.

One embodiment of the invention addresses these limitations by signing the authentication request and origin identifier using a trusted certificate. The SSL X.509 certificate from the web server that can be validated against the mobile device s root certificate store is one option employed in one embodiment. However the relying party s authentication server may not have access to that key. Generating a new X.509 certificate specifically for the authentication server is another option but this means additional overhead to manage yet another X.509 certificate.

To avoid those problems one embodiment of the invention illustrated in uses self signed certificates from a decentralized public key infrastructure PKI to sign authentication requests from the relying party s s authentication servers and corresponding origin identifier e.g. the RPNAME identifier . In particular in one embodiment the self signed certificate is comprised of a private key and one or more public keys stored in a public key file on the authentication server . Unlike X.509 certificates these self signed certificates cannot be trusted by themselves because there is no chain connecting them to a root trusted certificate.

In one embodiment to establish trust the public keys stored in the public key file on the web server are transmitted to the authentication client on the client device e.g. a mobile smartphone over a secure communication channel established using a trusted certificate e.g. such as existing X.509 trusted certificates used to open TLS connections . Using TLS ensures that the vulnerable self signed public keys in the public key file are obtained from the correct owner because the trusted certificate key used to transport them from the web server over the Internet can be verified against the root certificate store if X.509 or other known standard is used . Those self signed public keys in the file can then be implicitly trusted and used to verify authentication requests including origin identifiers e.g. RPNAME .

An authentication request may be generated by the authentication server in the same manner and under the same circumstances described above with respect to . For example the authentication server may generate a random challenge and identify the client side authenticator to be used e.g. with the public key registered for the authenticator . The random challenge and authenticator ID information may be packaged in the authentication request .

An addition in one embodiment the authentication request is signed using the private key of the decentralized PKI. As mentioned in one embodiment the private key corresponds to the public keys in the file . For example any signature generated by the private key can be validated using one of the public keys.

Once again to establish trust the authentication request signed using the private key on authentication server is transmitted to the relying party app on the client device over a secure communication channel established using a trusted certificate e.g. such as existing X.509 trusted certificates used to open TLS connections . In one embodiment the trusted certificate is the same as the trusted certificate used to establish a TLS channel with the authentication client . The private key signed authentication request is then transported to the relying party app using the TLS channel along with the origin identifier e.g. RPNAME to identify the relying party .

In one embodiment the relying party app extracts the underlying private key signed authentication request i.e. strips the TLS data and provides it to the authentication client on the client device . The relying party app may communicate with the authentication client using known inter process communication IPC mechanisms. However the underlying principles of the invention are not limited to any particular communication mechanism for exchanging information on the client device .

Upon receiving the private key signed authentication request the authentication client validates the signature using a public key from the public key file. If the signature is valid it then generates an authentication response as described above. For example in response to a successful authentication by the user it may use the private key of the authenticator to generate a signature over the random challenge included in the authentication request and transmit the resulting authentication response to the authentication server e.g. either directly or via the relying party app . Once the authentication server verifies the signature using the corresponding public authenticator key the user is authenticated to the relying party and is permitted to complete the desired transaction.

Using the techniques described herein authentication requests and origin identifiers e.g. RPNAME are cryptographically verified by the centralized SSL X.509 key while still retaining the flexibility and minimum of management overhead that a decentralized PKI offers. Implicitly trusting the validity of self signed certificates by using the fact that the file containing those certificates is located on a certain web server has some risks. Anyone who has the ability to modify this file on the web server is able to change the public keys. However as long as access to the file is guarded as carefully as the ability to manage an X.509 certificate the trust conferred by either solution should be comparable.

A method in accordance with one embodiment of the invention is illustrated in . The method may be implemented using the architecture shown in but is not limited to any particular architecture.

At a first authentication related communication is generated at the authentication server on behalf of the relying party. In one embodiment the first authentication related communication comprises the authentication request mentioned above e.g. containing a random challenge authenticator ID etc .

At the first authentication related communication is signed using a first key of a self signed certificate from a decentralized public key infrastructure PKI . In one embodiment the first key comprises the private key discussed above.

At a first secure channel is established with a relying party app on the client device using an existing trusted communication infrastructure. In one embodiment using an existing trusted communication infrastructure comprises using a trusted X.509 certificate to establish a secure transport layer security TLS channel with the relying party.

At the first authentication related communication is transmitted to the relying party app over the first secure communication channel. As mentioned in one embodiment an origin identifier e.g. RPNAME is provided with the communication.

At a second secure communication channel is established with an authentication client on the client device using an existing trusted communication infrastructure. As mentioned in one embodiment using an existing trusted communication infrastructure comprises using a trusted X.509 certificate to establish a secure TLS channel with the relying party.

At a second key of the self signed certificate from the decentralized PKI is transmitted over the second secure communication channel to the authentication client. In one embodiment the second key comprises a public key associated with the self signed certificate from the decentralized PKI. One or more additional keys may also be provided via a public key file as discussed above .

At the first authentication related communication with the signature is provided from the relying party app to the authentication client. In one embodiment this is performed in compliance with an existing inter process communication IPC mechanism on the client device.

At the authentication client uses the second key to validate the signature generated with the first key. If validation is successful then the authentication client generates a second authentication related communication in response to the first authentication related communication. For example as discussed above if the first authentication related communication comprises an authentication request then the second authentication related communication may comprise an authentication response. To generate the response the authentication client may first require the user to perform authentication on the client device e.g. swiping a finger recording a voice entering a code etc . If authentication is successful then the authentication client may transmit an indication of the successful authentication along with other verifiable information such as the random challenge provided with the authentication request. Once the authentication server receives the second authentication related communication the user may be authenticated with the relying party and permitted to enter into transactions with the relying party.

As illustrated in the computer system which is a form of a data processing system includes the bus es which is coupled with the processing system power supply memory and the nonvolatile memory e.g. a hard drive flash memory Phase Change Memory PCM etc. . The bus es may be connected to each other through various bridges controllers and or adapters as is well known in the art. The processing system may retrieve instruction s from the memory and or the nonvolatile memory and execute the instructions to perform operations as described above. The bus interconnects the above components together and also interconnects those components to the optional dock the display controller display device Input Output devices e.g. NIC Network Interface Card a cursor control e.g. mouse touchscreen touchpad etc. a keyboard etc. and the optional wireless transceiver s e.g. Bluetooth WiFi Infrared etc. .

According to one embodiment of the invention the exemplary architecture of the data processing system may used for the mobile devices described above. The data processing system includes the processing system which may include one or more microprocessors and or a system on an integrated circuit. The processing system is coupled with a memory a power supply which includes one or more batteries an audio input output a display controller and display device optional input output input device s and wireless transceiver s . It will be appreciated that additional components not shown in may also be a part of the data processing system in certain embodiments of the invention and in certain embodiments of the invention fewer components than shown in may be used. In addition it will be appreciated that one or more buses not shown in may be used to interconnect the various components as is well known in the art.

The memory may store data and or programs for execution by the data processing system . The audio input output may include a microphone and or a speaker to for example play music and or provide telephony functionality through the speaker and microphone. The display controller and display device may include a graphical user interface GUI . The wireless e.g. RF transceivers e.g. a WiFi transceiver an infrared transceiver a Bluetooth transceiver a wireless cellular telephony transceiver etc. may be used to communicate with other data processing systems. The one or more input devices allow a user to provide input to the system. These input devices may be a keypad keyboard touch panel multi touch panel etc. The optional other input output may be a connector for a dock.

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable instructions which cause a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Elements of the present invention may also be provided as a machine readable medium for storing the machine executable program code. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of media machine readable medium suitable for storing electronic program code.

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. For example it will be readily apparent to those of skill in the art that the functional modules and methods described herein may be implemented as software hardware or any combination thereof. Moreover although some embodiments of the invention are described herein within the context of a mobile computing environment the underlying principles of the invention are not limited to a mobile computing implementation. Virtually any type of client or peer data processing devices may be used in some embodiments including for example desktop or workstation computers. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable instructions which cause a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

