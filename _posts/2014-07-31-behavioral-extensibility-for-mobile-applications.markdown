---

title: Behavioral extensibility for mobile applications
abstract: In example embodiments, systems, methods, devices, and machine-readable media for creating and/or executing extensible mobile applications are provided. Extensibility of a mobile application deployed on a device is achieved with configuration files that can be provided to the device at a time after initial deployment of the application. Mobile application framework components combined with the code of the application enable extracting Java scripts from the configuration files, and executing the Java scripts to thereby alter the behavior of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158522&OS=09158522&RS=09158522
owner: SAP SE
number: 09158522
owner_city: Walldorf
owner_country: DE
publication_date: 20140731
---
This application claims priority to U.S. Provisional Application No. 61 860 703 filed Jul. 31 2013 and to U.S. Provisional Application No. 61 860 716 filed Jul. 31 2013 both of which are incorporated herein by reference in their entireties.

This document relates generally to mobile application frameworks and more particularly to extensible applications e.g. as created with a mobile application framework.

Mobile applications also known as apps have dramatically increased in popularity with the rise of smartphones and tablets. It is common for these applications to be downloaded by end users from a central repository sometimes referred to as an app store. Application developers typically design the application test the code compile the code and then upload the compiled code representing the application to the app store. Updates to the application even for minor changes such as user interface changes e.g. logo changes font changes color changes etc. have in the past typically required that the application be recompiled and the updated version be uploaded to the app store and thereafter downloaded by the user to the mobile device. A more convenient way of updating mobile applications is desirable.

The description that follows includes systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments of the disclosure. For the purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

In general this disclosure relates to creating and modifying extensible mobile applications. In various embodiments extensibility is achieved with extensibility components of a mobile application framework MAF that are integrated into an application prior to its deployment on a mobile device in conjunction with configuration files that dynamically reconfigure the mobile application and can be loaded onto the device at a later time after deployment of the original application. Various embodiments provide both structural extensibility i.e. the ability to modify the user interface navigation flow and data bindings as well as behavioral extensibility i.e. the ability to extend and or modify the control logic of the application. Behavioral extensibility may be achieved by equipping the MAF extensibility components with Javascript execution capabilities and incorporating Java scripts that alter the behavior of the application into the configuration files. This allows application developers to change and extend mobile applications without the need for recompiling and redistributing the original application by simply distributing the new configuration files e.g. by placing them into a configuration repository on a central server for retrieval therefrom by the mobile devices .

In some embodiments an MAF provides a powerful and flexible platform for application developers to build deploy and modify mobile applications. The MAF may include one or more libraries of generic re usable MAF components including but not limited to extensibility related components that the developer can bundle with custom application code. These components may include for instance application programming interfaces APIs that provide access to native functionality of mobile devices such as a device s built in camera accelerometer contact lists push notifications etc. The MAF may also provide the developer with a choice of customizable application templates e.g. for enterprise ready mobile applications use of such templates may serve to increase developer productivity as well as to create a standardized look and feel across applications. The developer generally has multiple options for building the application he can choose to define the application fully with metadata partially with metadata and partially with custom code or fully with custom code and using configuration files only for extension purposes. The custom code can generally be written in any suitable programming language including without limitation C C Objective C PHP Perl Python Basic Java Javascript Ruby etc. in various embodiments an object oriented language such as Objective C is used. In embodiments the custom code includes one or more calls to one or more of the MAF components.

The configuration files generally define part of the structure and elements of the application in a declarative manner e.g. in extensible markup language XML format . They may be distributed from the mobile platform server in bundled compressed form hereinafter called an application configuration profile ACP . The ACP may include various types of configuration files which may be stored in separate folders within the ACP. So called tiles which are generally expressed in XML may define individual user interface elements and or the layout of entire application screens or portions thereof. Tiles may be primitive or embed other tiles by nesting tiles inside each other in two or more levels entire screens can be built up from smaller portions or elements. Other types of configuration files may specify and store styles images language specific i.e. localized text strings versioning information and other metadata. To enable modifications to the behavior of an application Java scripts may be integrated into the ACP e.g. as files stored in a special scripts folder which may have sub folders for platform independent and or one or more platform specific Javascript functions or methods . The Javascripts may be invoked via an event action mechanism such that they run in response to certain events just like other actions for this purpose special Javascript JS action may be incorporated into the layout XML descriptor that defines the structure of the user interface and the actions associated with user control elements. The JS actions may specify one or more parameters which upon triggering of the JS action are passed on to the corresponding Javascript function along with an identifier of the triggering element e.g. a user interface control . In general altering the configuration files associated with an application may involve adding new configuration files as well as alternatively or additionally altering already existing files. For example in some embodiments new Java script files are added to the ACP and the already existing layout XML is modified to reference the corresponding JS actions. Changes to the application s behavior can be achieved with Java scripts that alter via certain application programming interfaces exposed thereto properties of various business objects and or user interface elements as explained in detail below.

The MAF components may include an extensibility core a behavioral extensibility component a configuration management component a user interface UI component a business object BO management component and a data source adapter DSA . The extensibility core forms the central component of the MAF and instantiates and facilitates interactions between the other MAF components .

The configuration management component reads and parses the metadata contained in the configuration files such as user interface definitions data bindings user interface elements and controls events and built in as well as custom actions . Further it may transform metadata to native constructs using wrapper classes dedicated parsers and validators. In particular the configuration management component is responsible for extracting JS actions from the configuration file s and passing them on to the extensibility core which upon triggering of a JS action e.g. by the user forwards it on to the behavioral extensibility component for handling.

The behavioral extensibility component is a separate library that is loaded at runtime by the extensibility core provided it was linked with the application by the developer. Note that in the depicted modular approach linking the behavioral extensibility component against the application is optional. If the developer chooses not to include behavioral extensibility component the application may still execute but JS actions included in the configuration files will be ignored. The extensibility component is responsible for retrieving in response to a JS action a Java script including the corresponding Javascript function which serves as the action handler from the configuration files validating it and handing the validated script over to the Javascript execution engine for execution. To allow a single ACP to be consumed by multiple different versions of the MAF the manner in which the scripts are obtained from the configuration file s may be designed to integrate with the current versioning concept. For example the Java scripts may be organized in subfolders that are named in accordance with the version number of the MAF version number.

The Javascript execution engine may be provided as part of the native software installed on the mobile device as sold or may alternatively be installed separately by the user or be provided as an additional component bundled with the deployable unit . In some embodiments a Javascript Fa ade provides an intermediate layer between the extensibility core and a native Javascript execution engine as explained in more detail below.

The UI component supports extensibility of the user interface by arranging the user interface based on the tile data which provides structural extensibility and or the Javascript code which provides behavioral extensibility . The UI component may also include an MAF UI library on top of the native UI constructs that decorates and styles the various UI elements and controls or if such library is implemented as a separate component the UI component may act as a bridge between the application and MAF UI library. The UI component or other components of the MAF may include APIs that allow the application to access the native user interface. The BO management component includes APIs that allow the custom code and or the Java scripts to access the business objects generated by and or representing data handled by the application. The extensibility core may define JS wrappers through which selected APIs of the UI and BO management components become available to the Java scripts in the form of Javascript objects. The DSA provides a public interface between data sources e.g. third party data sources available on the Internet e.g. data sources compliant with the OData protocol and the MAF and custom application code by converting between specific data model objects and generic business objects the DSA allows both the framework and the application developer to operate and think in terms of generic business operations and the related create read update and delete operations.

In various embodiments the BO management component is platform independent i.e. its APIs work regardless of the operating system employed. The UI component by contrast is typically platform dependent i.e. different APIs are used to access the functionality on different mobile platforms. To allow a developer to distribute his applications widely to many different types of devices the UI component may include APIs for multiple mobile operating systems e.g. Android from Google Inc. iOS from Apple Inc. the Blackberry operating system Windows Phone from Microsoft Inc. and or others. During execution of the application the appropriate platform specific API may then be invoked by the extensibility core or other libraries or components of the MAF. The extensibility functionality of the MAF may take the platform independence of the BO management component and the platform dependence of the UI component into account by allowing developers to separate out Java scripts that use the BO APIs from those that use UI APIs e.g. by placing them in separate files this way Java scripts that access business objects can be re used across platforms.

In various embodiments the extensibility core exposes only certain selected APIs of the UI and BO management components to the Java scripts the non selected APIs are not accessible to the developer for extensions. For example with regard to the BO management component in some embodiments Java scripts are allowed to read and write the attributes of existing objects but prevented from creating and deleting business objects. In some embodiments the Javascript layer operates exclusively on in memory business objects allowing even their creation whereas model updates on the client or server i.e. updates to the permanently stored database are out of its reach. Similarly with regard to the UI component native UI elements may be exposed with certain restrictions e.g. allowing access only to certain UI element properties such as the background color of buttons text of labels visibility etc. while preventing developers from building user interfaces with the Java scripts thus APIs that expose the user interface beyond providing access to UI element properties are in various embodiments not exposed by the extensibility core . In some embodiments existing UI elements within displayed tiles are accessible via their identifiers thus a UI API may query the displayed tile using the tile identifier and then one or more UI elements within the tile using their respective identifiers and thereafter read and or write the properties of the queried UI elements.

In general some of the properties of UI elements may be of a simple type that can be readily transferred from and to Javascript in an easy form while others may be of a complex type examples of the latter include complex color types shapes or platform specific constants. In various embodiments suitable JS wrappers may be created by the extensibility core to allow access to complex type properties. Similarly the BO APIs may support complex data types defined by the underlying DSA and the extensibility core may provide wrappers and JS objects to support use of such complex types via the Java scripts .

In various embodiments the BO management component via its APIs exposed to Java scripts provides a cross platform solution that enables application developers to simply access generic business objects with Java scripts allowing the modification and inspection of fields within a business object but disallowing modification operations on the entire business object itself. More specifically developers may have access i to generic business object values as objects using strings from Javascript ii to DSA specific types to work with from Javascript and or iii to a manager object that facilitates querying all or selected business objects of a given binding from the set of bindings available on the current tile. Business object level modification operations create update delete may be performed using already existing business object actions found within the framework which are not amenable to modification post deployment of the application. These existing actions may be incorporated in the layout XML document with corresponding action handlers defined in the custom code.

A generic business object can store arbitrary objects in its fields. The DSA may map the platform specific values taken from a field to the DSA specific type. For example the standard SDM adapter which is communicating using OData knows that fields of type Date java.util.Date or NSDate depending on platform are converted to Edm.DateTime. A similar mapping may exist between Javascript specific types and native types as illustrated in the table shown in . Business object wrappers generated by the DSA may take care of the conversion between these types. Types specific to a particular DSA implementation are rendered available in Javascript context via the MAFDataModel.createInstanceOf function which calls out to the native side function which then asks the DSA to instantiate the type and wrap it properly for the Javascript context. This relieves the developer from having to define a custom JS wrapper for its custom types as the MAF extensibility framework can perform the wrapping dynamically on its own. This effectively means that such types are not really mapped they are simply wrapped and unwrapped as they enter and leave the Javascript context.

Access to the application user interface from Java scripts is made possible by certain APIs of the UI component the JS UI API . In general the JS UI API itself is apart from a few top level platform independent constructs heavily platform dependent as it exposes native UI controls and provides access to their properties for querying and modifying the graphical state. In various embodiments the JS UI API i offers search methods to find certain UI elements within certain MAF tiles using their identifiers ii allows direct read write access to the properties of native UI elements directly relieving the API from the burden of having to redefine and document UI elements iii allows read only access to parent and child UI elements if possible and iv allows access to limited type information about a given UI element. In embodiments the UI API does not allow programmatic creation or modification of native user interfaces rather only certain properties of already existing UI elements can be altered by scripts.

The MAF components may include a controller that controls the process flow of the application including the order in which actions are executed. Actions include for example data updates based on user input user interface refreshes in response to user input or changes to the data underlying the screen contents navigation from one screen to the next the loading of data the creation or deletion of business objects etc. In general actions may be executed in multiple threads. For example all actions related to the user interface may be executed in a main thread or UI thread whereas other actions e.g. actions that manipulate data in the background without immediately affecting the user interface may be executed in one or more background threads. In various embodiments the execution of the Java scripts is limited to a single thread and the framework ensures that any Java script calls to methods on native wrappers are dispatched to the appropriate thread. This way a single Javascript context is ensured and data can be shared between Javascript functions without problems and without requiring additional orchestration.

Actions can generally be executed sequentially or in parallel i.e. asynchronously . The execution mode may depend at least in part on the type of action for example in some embodiments only actions related to business objects can be processed in parallel whereas all other actions are executed sequentially in the UI thread. To avoid inconsistencies that can otherwise arise from the parallel execution of certain actions i.e. the deletion of an object and in parallel the updating of a property of the same object an example embodiment implements an action execution model that groups actions based on their interdependencies to avoid inconsistencies while allowing parallel execution where no risk of inconsistencies exists. In this execution model an action group holds generally multiple actions or action groups and specifies whether these actions or action groups are to be executed in parallel or in sequence action groups can be nested as needed to form more complex groupings e.g. composites of actions and action groups. Actions or action groups that do not fall into any defined action group are executed sequentially by default. Note that the action group does not control whether the actions is fired asynchronously or not this may still be decided based on the action type e.g. actions related to business objects may be fired asynchronously other known actions in the main UI thread and custom actions in whichever manner the client code defines .

In some embodiments a Javascript fa ade acting on top of the Javascript engine is responsible for Javascript validation and execution with this additional module the extensibility library is decoupled from the Javascript core library e.g. the Javascript engine provided by the mobile platform. The Javascript fa ade is a static library which in turn uses the Javascript core library. Since the fa ade loads the Javascript core library by introspection there is no build time dependency between these two libraries. illustrates an exemplary architecture for Java script execution. Herein the extensibility core is responsible for instantiating the Javascript fa ade invoking the fa ade to validate the Java scripts from the ACP and forwarding JS actions to the fa ade for execution. The extensibility core may also implement a single threaded model for Java script execution and ensure the consistency of action execution. The Javascript fa ade is in charge of validating the Java scripts performing any conversions between Javascript and native e.g. Objective C data types handling execution of the scripts by the Javascript core and handling errors encountered during such execution.

In some embodiments when the extensibility core encounters a JS action it first checks whether a valid Javascript fa ade object has been initialized. If so the fa ade attempts to execute the Javascript function performs and error handling and completes. The fa ade can be uninitialized for two reasons the current JS action may be the first one encountered or a previous initialization attempt may have failed. Initialization failures may result from the unavailability of the Javascript core library errors found while evaluating the provided custom Java scripts or other conditions such as low memory availability. If no previous initialization attempt has been made the extensibility core may initialize the fa ade which may then proceed to script validation and execution. If initialization has previously failed the extensibility core may either attempt initialization again e.g. to determine whether a previous low memory or other failure condition has disappeared or log an error without further initialization attempts.

During Java script execution errors can occur both in the script layer and in the native layer e.g. the code accessed by the Java script . In some embodiments all native errors are propagated to the Javascript layer and issues which occur in the Javascript layer unless handled locally are sent to the Javascript fa ade . Application developers may be given a way to intercept and fix issues on the native side via error handler delegates. In general error handling related to behavioral extension of applications is integrated with and or follows the rules of error handling including logging and tracing as employed in the framework as a whole.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain physical manner. In various example embodiments one or more computer systems e.g. a standalone computer system a client computer system or a server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In some embodiments a hardware module may be implemented mechanically electronically or with any suitable combination thereof. For example a hardware module may include dedicated circuitry or logic that is permanently configured to perform certain operations. For example a hardware module may be a special purpose processor such as a field programmable gate array FPGA or an ASIC. A hardware module may also include programmable logic or circuitry that is temporarily configured by software to perform certain operations. For example a hardware module may include software encompassed within a general purpose processor or other programmable processor. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the phrase hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where a hardware module comprises a general purpose processor configured by software to become a special purpose processor the general purpose processor may be configured as respectively different special purpose processors e.g. comprising different hardware modules at different times. Software may accordingly configure a particular processor or processors for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses between or among two or more of the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions described herein. As used herein processor implemented module refers to a hardware module implemented using one or more processors.

Similarly the methods described herein may be at least partially processor implemented with a particular processor or processors being an example of hardware. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. Moreover the one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors with these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. an application program interface API .

The performance of certain of the operations may be distributed among the processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the processors or processor implemented modules may be distributed across a number of geographic locations.

A broad spectrum of applications also referred to as apps may be executing on the mobile device . The applications may include native applications e.g. applications programmed in Objective C running on iOS or applications programmed in Java running on Android mobile web applications e.g. HTML5 and or hybrid applications e.g. a native shell application that launches an HTML5 session . In a specific example the mobile device may include a messaging app audio recording app a camera app a book reader app a media app a browser app a file management app a direct app a location app a settings app a contacts app a telephone call app other apps e.g. gaming apps social networking apps and a third party app .

The operating system may manage hardware resources and provide common services. The operating system may include for example a kernel services and drivers . The kernel may act as an abstraction layer between the hardware and the other software layers. For example the kernel may be responsible for memory management processor management e.g. scheduling component management networking security settings and so on. The services may provide other common services for the other software layers. The drivers may be responsible for controlling and or interfacing with the underlying hardware. For instance the drivers may include display drivers camera drivers Bluetooth drivers flash memory drivers serial communication drivers e.g. Universal Serial Bus USB drivers Wi Fi drivers audio drivers power management drivers and so forth.

The libraries may provide a low level common infrastructure that may be utilized by the applications . The libraries may include system libraries e.g. C standard library that may provide functions such as memory allocation functions string manipulation functions mathematic functions and the like. In addition the libraries may include API libraries such as media libraries e.g. libraries to support presentation and manipulation of various media format such as MPREG4 H.264 MP3 AAC AMR JPG PNG graphics libraries e.g. an OpenGL framework that may be used to render 2D and 3D in a graphic content on a display database libraries e.g. SQLite that may provide various relational database functions web libraries e.g. WebKit that may provide web browsing functionality and the like. The libraries may also include a wide variety of other libraries to provide many other APIs to the applications .

The frameworks may provide a high level common infrastructure that may be utilized by the applications . For example the frameworks may provide various graphic user interface GUI functions high level resource management high level location services and so forth. The frameworks may provide a broad spectrum of other APIs that may be utilized by the applications some of which may be specific to a particular operating system or platform.

The applications include a home application a contacts application a browser application a book reader application a location application a media application a messaging application a game application and a broad assortment of other applications such as third party application . In a specific example the third party application e.g. an application developed using the Android or iOS software development kit SDK by an entity other than the vendor of the particular platform may be mobile software running on a mobile operating system such as iOS Android Windows Phone or other mobile operating systems. In this example the third party application may invoke the API calls provided by the mobile operating system to facilitate functionality described herein.

The machine may include processors memory and I O components which may be configured to communicate with each other via a bus . In an example embodiment the processors e.g. a Central Processing Unit CPU a Reduced Instruction Set Computing RISC processor a Complex Instruction Set Computing CISC processor a Graphics Processing Unit GPU a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Radio Frequency Integrated Circuit RFIC another processor or any suitable combination thereof may include for example processor and processor that may execute instructions . The term processor is intended to include multi core processor that may comprise two or more independent processors also referred to as cores that may execute instructions contemporaneously. Although shows multiple processors the machine may include a single processor with a single core a single processor with multiple cores e.g. a multi core process multiple processors with a single core multiple processors with multiples cores or any combination thereof.

The memory may include a main memory a static memory and a storage unit accessible to the processors via the bus . The storage unit may include a machine readable medium on which are stored the instructions embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory within the static memory within at least one of the processors e.g. within a processor s cache memory or any suitable combination thereof during execution thereof by the machine . Accordingly the main memory static memory and the processors may be considered as machine readable media .

As used herein the term memory refers to a machine readable medium able to store data temporarily or permanently and may be taken to include but not be limited to random access memory RAM read only memory ROM buffer memory flash memory and cache memory. While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions . The term machine readable medium shall also be taken to include any medium or combination of multiple media that is capable of storing instructions e.g. instructions for execution by a machine e.g. machine such that the instructions when executed by one or more processors of the machine e.g. processors cause the machine to perform any one or more of the methodologies described herein. Accordingly a machine readable medium refers to a single storage apparatus or device as well as cloud based storage systems or storage networks that include multiple storage apparatus or devices. The term machine readable medium shall accordingly be taken to include but not be limited to one or more data repositories in the form of a solid state memory e.g. flash memory an optical medium a magnetic medium other non volatile memory e.g. Erasable Programmable Read Only Memory EPROM or any suitable combination thereof. The term machine readable medium specifically excludes non statutory signals per se.

The I O components may include a wide variety of components to receive input provide and or produce output transmit information exchange information capture measurements and so on. It will be appreciated that the I O components may include many other components that are not shown in . In various example embodiments the I O components may include output components and or input components . The output components may include visual components e.g. a display such as a plasma display panel PDP a light emitting diode LED display a liquid crystal display LCD a projector or a cathode ray tube CRT acoustic components e.g. speakers haptic components e.g. a vibratory motor other signal generators and so forth. The input components may include alphanumeric input components e.g. a keyboard a touch screen configured to receive alphanumeric input a photo optical keyboard or other alphanumeric input components point based input components e.g. a mouse a touchpad a trackball a joystick a motion sensor and or other pointing instrument tactile input components e.g. a physical button a touch screen that provides location and force of touches or touch gestures and or other tactile input components audio input components e.g. a microphone and the like.

In further example embodiments the I O components may include biometric components motion components environmental components and or position components among a wide array of other components. For example the biometric components may include components to detect expressions e.g. hand expressions facial expressions vocal expressions body gestures or eye tracking measure biosignals e.g. blood pressure heart rate body temperature perspiration or brain waves identify a person e.g. voice identification retinal identification facial identification finger print identification or electroencephalogram based identification and the like. The motion components may include acceleration sensor components e.g. accelerometer gravitation sensor components rotation sensor components e.g. gyroscope and so forth. The environmental components may include for example illumination sensor components e.g. photometer temperature sensor components e.g. one or more thermometer that detect ambient temperature humidity sensor components pressure sensor components e.g. barometer acoustic sensor components e.g. one or more microphones that detect background noise proximity sensor components e g infrared sensors that detect nearby objects and or other components that may provide indications measurements and or signals corresponding to a surrounding physical environment. The position components may include location sensor components e.g. a Global Position System GPS receiver component altitude sensor components e.g. altimeters and or barometers that detect air pressure from which altitude may be derived orientation sensor components e.g. magnetometers and the like.

Communication may be implemented using a wide variety of technologies. The I O components may include communication components operable to couple the machine to a network and or devices via coupling and coupling respectively. For example the communication components may include a network interface component or other suitable device to interface with the network . In further examples communication components may include wired communication components wireless communication components cellular communication components Near Field Communication NFC components Bluetooth components e.g. Bluetooth Low Energy Wi Fi components and other communication components to provide communication via other modalities. The devices may be another machine and or any of a wide variety of peripheral devices e.g. a peripheral device couple via a Universal Serial Bus USB .

Moreover the communication components may detect identifiers and or include components operable to detect identifiers. For example the communication components may include Radio Frequency Identification RFID tag reader components NFC smart tag detection components optical reader components e.g. an optical sensor to detect one dimensional bar codes such as Universal Product Code UPC bar code multi dimensional bar codes such as Quick Response QR code Aztec code Data Matrix Dataglyph MaxiCode PDF417 Ultra Code UCC RSS 2D bar code and other optical codes acoustic detection components e.g. microphones to identify tagged audio signals and so on. In additional a variety of information may be derived via the communication components such as location via Internet Protocol IP geo location location via Wi Fi signal triangulation location via detecting a NFC beacon signal that may indicate a particular location and so forth.

In various example embodiments one or more portions of the network may be an ad hoc network an intranet an extranet a virtual private network VPN a local area network LAN a wireless LAN WLAN a wide area network WAN a wireless WAN WWAN a metropolitan area network MAN the Internet a portion of the Internet a portion of the Public Switched Telephone Network PSTN a plain old telephone service POTS network a cellular telephone network a wireless network a Wi Fi network another type of network or a combination of two or more such networks. For example the network or a portion of the network may include a wireless or cellular network and the coupling may be a Code Division Multiple Access CDMA connection a Global System for Mobile communications GSM connection or other type of cellular or wireless coupling. In this example the coupling may implement any of a variety of types of data transfer technology such as Single Carrier Radio Transmission Technology 1xRTT Evolution Data Optimized EVDO technology General Packet Radio Service GPRS technology Enhanced Data rates for GSM Evolution EDGE technology third Generation Partnership Project 3GPP including 3 G fourth generation wireless 4 G networks Universal Mobile Telecommunications System UMTS High Speed Packet Access HSPA Worldwide Interoperability for Microwave Access WiMAX Long Term Evolution LTE standard others defined by various standard setting organizations other long range protocols or other data transfer technology.

The instructions may be transmitted and or received over the network using a transmission medium via a network interface device e.g. a network interface component included in the communication components and utilizing any one of a number of well known transfer protocols e.g. hypertext transfer protocol HTTP . Similarly the instructions may be transmitted and or received using a transmission medium via the coupling e.g. a peer to peer coupling to devices . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible media to facilitate communication of such software.

Furthermore the machine readable medium is non transitory in other words not having any transitory signals in that it does not embody a propagating signal. However labeling the machine readable medium as non transitory should not be construed to mean that the medium is incapable of movement the medium should be considered as being transportable from one physical location to another. Additionally since the machine readable medium is tangible the medium may be considered to be a machine readable device.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Although an overview of the inventive subject matter has been described with reference to specific example embodiments various modifications and changes may be made to these embodiments without departing from the broader scope of embodiments of the present disclosure. Such embodiments of the inventive subject matter may be referred to herein individually or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single disclosure or inventive concept if more than one is in fact disclosed.

The embodiments illustrated herein are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed. Other embodiments may be used and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. The Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

As used herein the term or may be construed in either an inclusive or exclusive sense. Moreover plural instances may be provided for resources operations or structures described herein as a single instance. Additionally boundaries between various resources operations modules engines and data stores are somewhat arbitrary and particular operations are illustrated in a context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within a scope of various embodiments of the present disclosure. In general structures and functionality presented as separate resources in the example configurations may be implemented as a combined structure or resource. Similarly structures and functionality presented as a single resource may be implemented as separate resources. These and other variations modifications additions and improvements fall within the scope of embodiments of the present disclosure as represented by the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

