---

title: Integrated network intrusion detection
abstract: Intrusion preludes may be detected (including detection using fabricated responses to blocked network requests), and particular sources of network communications may be singled out for greater scrutiny, by performing intrusion analysis on packets blocked by a firewall. An integrated intrusion detection system uses an end-node firewall that is dynamically controlled using invoked-application information and a network policy. The system may use various alert levels to trigger heightened monitoring states, alerts sent to a security operation center, and/or logging of network activity for later forensic analysis. The system may monitor network traffic to block traffic that violates the network policy, monitor blocked traffic to detect an intrusion prelude, and monitor traffic from a potential intruder when an intrusion prelude is detected. The system also may track behavior of applications using the network policy to identify abnormal application behavior, and monitor traffic from an abnormally behaving application to identify an intrusion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09143525&OS=09143525&RS=09143525
owner: Intel Corporation
number: 09143525
owner_city: Santa Clara
owner_country: US
publication_date: 20140610
---
This application is a continuation application of U.S. application Ser. No. 12 649 018 entitled INTEGRATED NETWORK INTRUSION DETECTION filed Dec. 29 2009 and now U.S. Pat. No. 8 752 173 which is a continuation application of U.S. application Ser. No. 11 702 908 entitled INTEGRATED NETWORK INTRUSION DETECTION filed Feb. 5 2007 which is a continuation application of U.S. application Ser. No. 10 066 140 entitled INTEGRATED NETWORK INTRUSION DETECTION filed Feb. 1 2002 and now U.S. Pat. No. 7 174 566.

The present application describes systems and techniques relating to network intrusion detection for example integrated network intrusion detection.

A machine network is a collection of nodes coupled together with wired and or wireless communication links such as coax cable fiber optics and radio frequency bands. A machine network may be a single network or a collection of networks e.g. an internetwork and may use multiple networking protocols including internetworking protocols e.g. Internet Protocol IP . These protocols define the manner in which information is prepared for transmission through the network and typically involve breaking data into segments generically known as packets e.g. IP packets ATM Asynchronous Transfer Mode cells for transmission. A node may be any machine capable of communicating with other nodes over the communication links using one or more of the networking protocols.

These networking protocols are typically organized by a network architecture having multiple layers where each layer provides communication services to the layer above it. A layered network architecture is commonly referred to as a protocol stack or network stack where each layer of the stack has one or more protocols that provide specific services. The protocols may include shared line protocols such as in Ethernet networks connection oriented switching protocols such as in ATM networks and or connectionless packet switched protocols such as in IP.

As packets travel through a network they are typically encapsulated within other packets multiple times. Encapsulation enables data to travel from a source process on one node to a destination process on another node through multiple networks using different protocols and addressing schemes without the two end nodes knowing anything about the intermediate addressing schemes and protocols.

Machine networks may provide powerful communication capabilities but also may increase the difficulty of maintaining computer system security by making systems and data more accessible. Most networks are susceptible to attacks or improper use both from inside and from outside the network. Attacks include attempts to gain unauthorized access to data destroy or bring down a computer system prevent others from accessing a system and attempts to take control of a system. For example some network intrusions exploit application anomalies to gain access to a system and infect it with a computer virus such as Code Red or Nimba.

A common technique used to improve network security is to install a firewall which restricts and controls the flow of traffic between networks typically between an enterprise network and the Internet. Firewalls typically monitor incoming and outgoing traffic and filter redirect repackage and or discard packets. A firewall may serve as a proxy and may enforce an organization s security policies.

Frequently network administrators employ systems to detect network intrusions to improve network security. Traditional network intrusion detection NID systems attempt to examine every packet on a network in order to detect intrusions. These NID systems may be implemented as standalone systems e.g. NFR Network Flight Recorder provided by Cisco Systems Inc. of San Jose Calif. or they may be implemented as distributed node based systems e.g. BlackICE provided by Network Ice Corporation of San Mateo Calif. .

Details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages may be apparent from the description and drawings and from the claims.

The systems and techniques described here relate to integrated network intrusion detection. The description that follows frequently discusses intrusion detection in the context of IP networks but the systems and techniques described apply equally to multiple types of machine communication networks and operating system environments.

As used herein the term application means a software program which is a collection of computing operations embodied by a set of instructions e.g. one or more binary objects one or more scripts and or one or more interpretable programs . The term component means a software program designed to operate with other components and or applications. The term process means an executing software program. The term execution context means a set of processing cycles given to a process such as a task in a multitasking operating system. Both an invoked application and an invoked component are a separate process even if their functionality is interrelated and they share a single execution context. For example an applet and a Web browser in which the applet runs are each a process. The term applet means a component designed specifically to be run from within an application. The term thread means a part of a software program that is given its own execution context.

The term intrusion means an attempt to break into and or misuse a computing system. The term intrusion prelude means communication activities that typically precede an intrusion. The term intrusion signature means a communication pattern identified as corresponding to a known type of intrusion including patterns that may be found in individual packets and patterns that may be gleaned from analyzing multiple packets.

The present inventor recognized the potential advantages of integrating firewall filtering information with network intrusion analysis. In typical network environments most network traffic is legitimate and only a small portion of network communications may contain intrusions. By performing intrusion analysis on packets blocked by a firewall intrusion preludes may be detected including detection using fabricated responses to blocked network requests and particular sources of network communications may be singled out for greater scrutiny. Thus an overall amount of network traffic that needs to be monitored may be reduced real time intrusion detection may be improved and more information about an intruder and the intruder s system and or network may be obtained.

In addition firewall functionality may be integrated with intrusion detection on end nodes e.g. servers and hosts in a network such as an enterprise network to further improve intrusion detection and network security. For example a networked machine may include an intrusion detection system that functions in part as a dynamic firewall for the networked machine.

The intrusion detection system may include three components. The first component may be an application rule enforcer that authorizes network service requests from applications invoked on the networked machine and identifies abnormal behavior by an invoked application. The second component may be a network traffic enforcer that monitors inbound network communications and blocks those communications that fail to correspond to an authorized network service request. The third component may be an intrusion detector that monitors the blocked communications and identifies abnormal application behavior to determine when additional traffic monitoring is needed to detect an intrusion. Thus the total number of communications e.g. packets that are examined may be reduced while intrusions may be detected more effectively.

Next a default state is entered in which inbound traffic i.e. inbound network communications and traffic corresponding to a watch list are monitored. These network communications are monitored to detect an intrusion prelude or an intrusion. Moreover multiple levels of monitoring may be implemented in the default monitoring state .

When a new application is invoked the new application is identified . When a request is received for network service i.e. a network input output I O request from an invoked application a check is made as to whether the request violates a network policy . The network policy may include a system policy and or an application specific policy.

For example the request may include information such as destination IP address destination port source port and type of request e.g. bind connect accept listen send receive etc. . The network policy may include application specific rules such as Application Internet Explorer destination port Any destination address Any source port request Listen action Allow. This rule states that the network policy allows any inbound traffic for the Internet Explorer application from any remote server through port . In addition to permissive rules that specify allowed communications the network policy may also include restrictive rules that specify communications that are not allowed e.g. a Deny action .

If the received request does not violate the network policy the request is designated as authorized . Then a communication channel for the request is enabled and monitoring continues.

Rules similar to the policy rule above may be dynamically added to and removed from a network filter driver to open and close communication channels. Such filtering rules identify authorized network flows associated with invoked applications. In an IP network a channel may be created by specifying an open channel for a network flow using five values 1 source IP address 2 source port 3 destination IP address 4 destination port and 5 protocol. Additional and or alternative values may be used to specify an open channel.

Following the creation of an open channel inbound traffic that corresponds to the open channel is allowed whereas inbound traffic that fails to correspond to an open channel is blocked in the monitoring state . Moreover outbound traffic may also be monitored in the monitoring state and disabled channels may also be created such as by using the Deny action discussed above. Blocked traffic is monitored to detect an intrusion prelude for example a system scan a port scan and or an operating system OS fingerprinting. The blocked traffic may be checked for patterns that span multiple communications and or multiple communication channels e.g. multiple TCP IP Transmission Control Protocol Internet Protocol connections .

When an intrusion prelude is detected a source of the intrusion prelude is identified . For example a source IP addresses may be extracted from a packet that is part of the intrusion prelude. This source is then added to a watch list for increased monitoring and monitoring continues. All packets from the identified source may then be monitored and these packets may be checked for intrusion signature s . Additionally multiple sources may be associated with each other both in intrusion prelude detection and in subsequent intrusion detection to counter distributed attacks.

If a received request violates the network policy the request is designated as unauthorized . A determination is then made as to whether the application that generated the unauthorized request is behaving abnormally . This determination may be based on the number of unauthorized requests and or on the severity of the unauthorized request generated by the application. For example in one implementation a single unauthorized request may be treated as abnormal behavior by an application. If the requesting application is behaving normally monitoring continues.

When an application behaves abnormally a level of monitoring for the application is increased and monitoring continues. For example the application may be added to a watch list to initiate monitoring of network communications both to and from the application. This monitoring may include searching packets for application specific intrusion signatures.

An intrusion detection system IDS may be implemented between the network driver and the network transport layer so that all incoming packets may be monitored. Packet level intrusion detection may be implemented in an NDIS Network Driver Interface Specification intermediate driver in a Windows environment. In addition the IDS may have additional components placed elsewhere in the network stack. System level intrusion detection may be implemented in one or more TDI Transport Driver Interface filter drivers and application level intrusion detection may be implemented in one or more components placed just below and or just inside the application layer i.e. as part of a network interface library .

If an application level component is used as part of the IDS network services requested by applications go to the application level component first. As a result the application level component knows which application requested which network service. In a Windows operating system environment the application level component may be implemented as a WinSock Windows Socket Layer Service Provider LSP and or as a TDI filter driver. WinSock is an Application Programming Interface API for developing Windows programs that communicate over a network using TCP IP.

Alternatively or in addition application level components may be used for intrusion detection. Such components load and run with each new network application in an execution context for that network application. These components may perform authorization of network requests and application specific intrusion signature detection such that the processing time consumed by these techniques affects only corresponding network applications.

The networked machine is coupled with a network that may provide communication links to a security operation center and a potential intruder . The security operation center may include a central security server. Various alert levels may be used in the IDS . These alert levels may trigger heightened monitoring states cause alerts to be sent to the security operation center and or initiate logging of network activity locally and or with the central security server for later forensic analysis.

The IDS functions as a dynamic firewall for the networked machine . The IDS monitors network traffic to block traffic that violates a network policy and monitors blocked traffic to detect an intrusion prelude. The IDS monitors traffic from the potential intruder when an intrusion prelude is detected. The IDS may track behavior of applications using a network policy that specifies behavior criteria which may be application specific to identify abnormal application behavior. The IDS may monitor traffic from an abnormally behaving application to identify an intrusion including e.g. an intrusion connected with a Trojan Horse in the application.

These components may reside in fewer or greater than three software modules. For example the intrusion detector may include a kernel component that resides in a first module with the network traffic enforcer and the intrusion detector also may include a user component that resides in a second module with the application rule enforcer . Additionally the application rule enforcer may be a component that is invoked separately with each of multiple invoked applications as described above.

The networked machine is coupled with a network that may provide communication links to a central security server and a potential intruder .

As each application requests network I O service the request is either authorized or rejected by the application rule enforcer . If the request is authorized corresponding authorized communications are allowed to pass from the application to the network and from the network to the application . If a request is rejected this rejected request is communicated to the intrusion detector .

If a request is rejected the intrusion detector may determine that an application is behaving abnormally and the intrusion detector may then begin monitoring other communications for the suspect application . This additional monitoring of communications may involve checking for application specific intrusion signatures which may be dynamically loaded from the central security server .

The network traffic enforcer monitors incoming network traffic. If an inbound communication fails to correspond to an authorized request i.e. the inbound communication was not effectively pre approved by the application rule enforcer the communication is dropped i.e. blocked from passage to another layer in the network stack . Additionally the network traffic enforcer may monitor outbound communications in a similar manner. For example the network traffic enforcer may check all packets both from the network and from the applications to see if they match a channel opened by the application rule enforcer .

Moreover the network traffic enforcer may also drop other communications in a manner similar to a firewall. For example the network traffic enforcer may drop malformed packets and packets used for system scanning e.g. ICMP Internet Control Message Protocol echo requests . Communications that are dropped by the network traffic enforcer are sent to the intrusion detector .

The intrusion detector examines the dropped communications to look for patterns signaling an intrusion prelude. For example the intrusion detector may look for system scans e.g. ping port scans e.g. TCP SYN synchronization TCP FIN finished etc. and OS fingerprinting. Frequently an intruder will perform scanning operations on a system or make some missteps before an intrusion is launched. These operations may be detected by the intrusion detector as an intrusion prelude.

Additionally the intrusion detector may encourage these operations by generating fabricated responses to the dropped communications to catch the intruder . A fabricated response to blocked traffic may be used to gain knowledge about a potential intruder and their system for later use. For example by selectively generating one or more fabricated responses to blocked inbound traffic which would otherwise be blocked silently significant information concerning a potential intruder s system and network may be obtained for use in later forensic analysis. If the potential intruder later turns out to be an actual intruder this collected information may be associated with the detected intrusion and may be especially useful such as for use in prosecution of the intruder and or other legal action e.g. legal action requiring an intruder s Internet Service Provider ISP to take action such as denying future network services to the intruder .

When an intrusion prelude is detected the intrusion detector then identifies and registers a source address for the intruder and begins examining communications from that source to detect an intrusion. For example the intrusion detector may watch traffic from a potential intruder to look for packet level exploits such as launching intrusions using packet fragments e.g. tear drop Boink etc. . Thus the intrusion detector may support packet reassembly to detect fragmentation related intrusions.

If the intrusion detector detects an intrusion e.g. a packet exploit it may block the traffic and or report the intrusion to the central security server . Additionally the intrusion detector may log the communications associated with a detected intrusion and intrusion prelude for forensic analysis.

To do so the ARE component may determine the full path directory and file name of the loading application executable e.g. C Program Files Application application.exe examine machine instructions embodying the application e.g. application.exe to identify the application and or may crosscheck this identification with file properties information such as name size and version number. Examining the machine instructions may involve applying a hash function to the application s executable to generate a condensed representation or hash value of the executable. This hash value may then be compared with predefined hash values for known applications to identify the invoked application.

The hash function may be a message digest algorithm with a mathematical property that effectively guarantees that for any size message a unique value of a fixed size e.g. 128 bits is returned. The hash function may be part of a standardized message digest specification e.g. Secure Hash Standard SHA 1 defined in Federal Information Processing Standards Publication 180 1 .

Once the invoked application is identified an application specific network policy is loaded . This network policy information may be loaded from a local repository and or from a remote repository of network policy information including dynamic loading from the remote repository to the local repository to keep the network policy information up to date as network policies change . Then the ARE component enters an idle state .

When a network I O request is made by the application the request is compared with the application specific network policy . If the policy is satisfied a network traffic enforcer NTE component is notified to open a channel . For example a message may be sent specifying a source IP address a source port a destination IP address a destination port and a protocol for the opened channel.

If the policy is not satisfied an intrusion detector component is notified of the rejected request . Alternatively the notice may be that the application is behaving abnormally. For example a single violation of network policy may be considered abnormal behavior for the application. Alternatively the application specific network policy may be multi tiered such that certain violations are logged but repeated and or more severe violations of network policy constitute abnormal application behavior.

Such policies may include configurable thresholds for one or more characteristics of network communications. The configurable thresholds may be set directly by the intrusion detector and or by a network administrator after analysis of communication statistics for the application. Thus network administrators may set the configurable thresholds such as by including them with intrusion signatures provided by security service providers and or the configurable thresholds may be auto configurable such as by monitoring communications during a defined time window.

When an unauthorized communication is received a copy of the communication is sent to an intrusion detector component . Then the unauthorized communication is blocked i.e. dropped and monitoring continues. When a notification of a closed channel is received the closed channel is removed from the authorization list and monitoring continues. Thus network communications that have not been pre approved by the ARE component are blocked and copied to the intrusion detector.

A check is made to determine if an intrusion prelude is present . If not a check is made to determine if a response is needed to encourage an intruder . If so a fabricated response is generated and sent to the potential intruder . Then or if a fabricated response was not needed the present communication activity is logged for future use in detecting intrusion preludes .

If an intrusion prelude is detected the source of the intrusion prelude is identified . The identified source is a potential intruder and thus communications from the potential intruder are monitored in an active monitoring state . This active monitoring may involve checking for packet level exploits such as intrusions using packet fragments as described above. When a blocked communication is received it is checked for intrusion prelude patterns as before . Thus additional sources may be added to a list of potential intruders to be monitored in the active monitoring state .

If an intrusion is detected a remedy is provided . For example the intrusion activity may be logged the traffic may be cut countermeasures may be employed and or an alert may be sent to a security operation center.

If a pre defined time elapses for an identified source the monitored activity for the source is logged for later analysis and the source specific monitoring for that source is terminated . If this is the last source being monitored in the active monitoring state the method returns to the idle state .

A check is then made for abnormal behavior . If the application is not behaving abnormally the unauthorized request is logged for later use . If the application is behaving abnormally monitoring parameters for the application are loaded . These parameters may include application specific intrusion detection signatures.

Then a monitoring state is entered in which network communications for the application are monitored using the loaded parameters. If an intrusion is detected a remedy is provided . For example the intrusion activity may be logged the traffic may be cut countermeasures may be taken and or an alert may be sent to a security operation center. This remedy may be application specific.

If a predefined time elapses in which no intrusion is detected the monitored communications for the application are logged for later analysis . Then the method returns to the idle state .

Although show methods being performed in four separate components these methods may also be combined into a single component or two or more components. For example a first component being a combination of the NTE component and the first intrusion detector component may perform a combination of the methods shown in . A second component being a combination of the ARE component and the second intrusion detector component may perform a combination of the methods shown in .

Various implementations of the systems and techniques described here may be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

The data processing system includes a memory which may be volatile and or non volatile memory and is coupled with the communications bus . The system may also include one or more cache memories. These memory devices enable storage of instructions and data close to the central processor for retrieval and execution.

The data processing system may include a storage device for accessing a medium which may be removable. The medium may be read only or read write media and may be magnetic based optical based or magneto optical based media. The data processing system may also include one or more peripheral devices n collectively devices and one or more controllers and or adapters for providing interface functions. The devices may be additional storage devices and media as described above other storage interfaces and storage units input devices and or output devices.

The system may further include a communication interface which allows software and data to be transferred in the form of signals over a channel between the system and external devices networks or information sources. The signals may embody instructions for causing the system to perform operations. The communication interface may be a network interface designed for a particular type of network protocol and channel medium or may be designed to serve multiple networks protocols and or channel media.

The system represents a programmable machine and may include various devices such as embedded controllers and Programmable Logic Devices PLDs . Machine instructions also known as programs software software applications or code may be stored in the machine or delivered to the machine over a communication interface. These instructions when executed enable the machine to perform the features and function described above.

As used herein the term machine readable medium refers to any medium or device used to provide machine instructions and or data to the machine . The various implementations described above have been presented by way of example only and not limitation. Thus other embodiments may be within the scope of the following claims.

