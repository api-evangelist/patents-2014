---

title: Analysis and assessment of software library projects
abstract: The disclosed embodiments provide a method, system, and apparatus for facilitating use of a software library project. During operation, the system obtains a set of data associated with use of the software library project, wherein the data comprises a set of dependencies of calls and objects associated with the software library project. Next, the system applies a set of business rules to the data to assess one or more characteristics associated with the software library project. The system then enables use of the data and the one or more characteristics in assessing a health of the software library project.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135591&OS=09135591&RS=09135591
owner: LinkedIn Corporation
number: 09135591
owner_city: Mountain View
owner_country: US
publication_date: 20140515
---
The disclosed embodiments relate to software library projects. More specifically the disclosed embodiments relate to techniques for performing analysis and assessment of software library projects.

Source code of newly developed software projects typically calls or references external application programming interfaces APIs of existing software libraries. By making calls to the external APIs developers of the software project may reuse the functionality provided by the corresponding libraries and avoid reimplementation of the functionality in the software project.

However external APIs and or software libraries may be in various states of health reliability stability and or compatibility with the software project. For example open source libraries may have varying numbers of contributors commits ingoing and outgoing dependencies versions and or issues and bugs. Similarly different versions of the same library may have different features or components and as a result may or may not be compatible with the software project.

As a result development of the software project may be significantly impacted by the selection of specific libraries for use with the software project. For example the calling of APIs in libraries that are stable popular actively managed and or otherwise healthy may simplify the development and implementation of the software project. On the other hand the calling of APIs in libraries that are unstable buggy poorly maintained and or otherwise unhealthy may incur overhead associated with adapting the software project to changes in the libraries and or taking on the responsibility of maintaining the libraries.

Consequently use of software libraries may be facilitated by mechanisms for assessing the health of the software libraries.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing code and or data now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore methods and processes described herein can be included in hardware modules or apparatus. These modules or apparatus may include but are not limited to an application specific integrated circuit ASIC chip a field programmable gate array FPGA a dedicated or shared processor that executes a particular software module or a piece of code at a particular time and or other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

The disclosed embodiments provide a method system and apparatus for facilitating use of a software library project such as a project associated with the development of an open source library and or a private software library. For example the disclosed embodiments may facilitate decisions related to using software library projects and or associated application programming interfaces APIs with software under development. As shown in the system may correspond to a project assessment system that facilitates the analysis and assessment of health e.g. health health y for a set of software library projects e.g. software library project software library project y .

In particular project assessment system may locate the software library projects in a set of repositories e.g. repository repository x such as public open source repositories and or private internal repositories. For example websites associated with public repositories may be crawled to identify software library projects hosted on the repositories and listings of software library projects hosted on private repositories may be obtained from the private repositories with the proper access credentials.

Next project assessment system may obtain a set of data e.g. data data y associated with use of each software library project. As described in further detail below with respect to the data may include dependencies of calls and objects associated with the software library project including incoming and outgoing dependencies. The data may also include an activity history associated with the calls and the objects a syntactic structure associated with the calls and the objects version information associated with the software library project and or licensing information associated with the software library project.

Project assessment system may then apply a set of business rules from a business rules repository to the data to assess one or more characteristics e.g. characteristics characteristics y associated with the software library project. For example project assessment system may use the business rules to determine characteristics associated with the software library project s activity popularity compatibility stability and or licensing.

Finally project assessment system may enable use of the data and characteristics in assessing the health e.g. health health y of the software library project. For example project assessment system may provide the data and or characteristics to users e.g. developers architects associated with development of software that may depend on and or use the software library project. Project assessment system may also provide visualizations associated with the data and or characteristics to the users. Consequently project assessment system may facilitate the use and or adoption of healthy e.g. reliable stable popular active compatible etc. software library projects and or APIs by the users which in turn may simplify the process of developing new software.

Collection apparatus may obtain data associated with use of software library project . For example collection apparatus may locate software library project in a public or private repository e.g. source code repository . Collection apparatus may then collect data related to the development and use of software library project by crawling a website associated with the repository and or indexing the contents of the repository and or other repositories to which collection apparatus has access.

In one or more embodiments data obtained by collection apparatus includes a set of dependencies an activity history a syntactic structure version information and licensing information . Dependencies may include both outgoing and incoming dependencies of software library project . For example dependencies may specify other software library projects on which software library project depends e.g. calls or uses as well as software library projects that depend on e.g. call or use software library project . Outgoing dependencies of software library project may be identified by examining build files and or source code for software library project . Incoming dependencies of software library project may be identified by examining the build files and or source code of other software library projects such as software library projects hosted on the same repository as software library project and or other repositories.

Dependencies may further include both direct and indirect dependencies of software library project . For example dependencies may include a first set of software library projects on which software library project directly depends as well as a second set of software library projects on which the first set of software library projects depend. Dependencies may also include a third set of software library projects that depend on software library project along with a fourth set of software library projects that depend on the third set of software library projects.

Moreover dependencies may include dependencies of calls and or objects associated with software library project . For example dependencies may include dependencies of specific methods functions classes and or objects of software library project on other methods functions classes and or objects of software library project and or other software library projects. Dependencies may also specify dependencies of specific methods functions classes and or objects of other software library projects on the methods functions classes and or objects of software library project . In other words dependencies associated with software library project may be mapped at the subroutine data structure and or API level. Dependencies from lower levels e.g. subroutine data structure API may then be aggregated into dependencies for higher levels e.g. version project .

Activity history may describe activity related to the development update and or use of software library project . For example activity history may include a commit metric e.g. number of commits frequency of commits commit dates number of modified files number of modified lines number of committers and or a release metric e.g. release frequency release dates number of releases etc. associated with software library project . Similarly activity history may include a social activity metric such as a number of followers favorites shares and or comments associated with software library project . Activity history may further include an issue history e.g. open and closed issues a crash history e.g. crashes collected from reporting tools and or a usage history e.g. number of calls over time per method function class API and or version .

Syntactic structure may include an abstract syntax tree parse tree abstract semantic graph and or other structure associated with syntax analysis of software library project . Syntactic structure may be created by parsing source code for software library project and or using reflection during execution of a binary for software library project . Moreover syntactic structure may facilitate the identification of dependencies on the class object method function and or API level. Syntactic structure may also be associated with metrics such as a complexity metric e.g. cyclomatic complexity and or size metric e.g. lines of code lines of comments number of packages number of classes number of files number of methods and or number of APIs .

Version information may include data associated with different versions of software library project . For example version information may include version numbers and or release dates for multiple versions of software library project . Version information may also include compatibility information for components e.g. features of software library project . For example version information may track API changes across versions of software library project including additions removals and or deprecations of APIs associated with software library project . A version of software library project that is missing a particular component either because the component has yet to be added or has been removed or deprecated may thus be incompatible with software that calls and or uses the component.

Licensing information may identify the type of license associated with software library project and or any rights or restrictions associated with the license. Collection apparatus may obtain licensing information from license files and or source code headers in software library project .

After the data is obtained and or generated by collection apparatus analysis apparatus may apply a set of business rules from business rules repository to the data to assess one or more characteristics associated with software library project . Business rules may be specific to the requirements needs and or preferences of a user group and or organization associated with assessing the health of software library project . For example business rules may specify criteria associated with adoption or use of software library project by the user group and or organization.

In one or more embodiments characteristics include a licensing characteristic an activity characteristic a popularity characteristic a compatibility characteristic and or a stability characteristic. Each characteristic may include information related to the compatibility of software library project with the needs and or goals of the user group and or organization.

For example business rules may specify a number of flags associated with the data and characteristics . If data from collection apparatus matches a flag in business rules the data and or flag may be included in characteristics .

As a result business rules may include unacceptable licenses and or license attributes that are used to determine the licensing characteristics of software library project . Business rules may also include minimum and or maximum thresholds for commit metrics e.g. minimum number of committers minimum commit frequency etc. release metrics e.g. minimum number of releases maximum release age etc. and or social activity metrics e.g. minimum number of followers associated with one or more activity characteristics of software library project . Business rules may further provide thresholds and or ranges for dependencies e.g. minimum or maximum numbers of dependencies ratio of incoming to outgoing dependencies that enable the assessment of popularity characteristics of software library project . Similarly business rules may specify thresholds and or ranges for API and or version changes e.g. minimum version release interval maximum version age deprecation of APIs or versions of software library project to identify the compatibility characteristics of software library project . Finally business rules may be used to establish known broken versions missing portions code quality thresholds reliability thresholds e.g. number of faults bugs crashes issues etc. and or flags indicative of stability characteristics of software library project .

Finally management apparatus may enable use of data from collection apparatus and characteristics from analysis apparatus in assessing the health of software library project . First management apparatus may provide the data and or characteristics to one or more users e.g. developers through a query module . For example management apparatus may provide data from collection apparatus in a table and or list. Query module may also allow the user s to filter search and or sort the data.

Second management apparatus may provide visualizations of the data through a visualization module . The visualizations may include a chart such as a histogram or line graph of calls commits releases and or other attributes associated with software library project . The visualizations may also include a heat map such as a heat map of compatibility information across different versions of software library project . The visualizations may additionally include a graph such as a dependency graph of dependencies . The visualizations may further include a score such as a licensing score activity score popularity score compatibility score stability score and or overall health score for software library project . Finally the visualization may include an indicator such as a color coded indicator representing a flag warning and or other attribute related to the health of software library project . In other words management apparatus may provide a user interface through which the user s may access the data characteristics and or visualizations.

By providing data characteristics and visualizations associated with development and use of software library project the system of may improve the assessment of the health of software library project . In turn the system of may improve decision making related to the adoption or use of software library project by other software. For example the system of may allow developers of the other software to identify and use software library projects that are more reliable stable compatible popular and or healthy. The selection and use of healthier and or more compatible software library projects may further simplify the software development process for the developers and mitigate issues associated with adopting and or maintaining external software libraries and or APIs.

Those skilled in the art will appreciate that the system of may be implemented in a variety of ways. First collection apparatus analysis apparatus management apparatus and business rules repository may be provided by a single physical machine multiple computer systems one or more virtual machines a grid one or more databases one or more filesystems and or a cloud computing system. Collection apparatus analysis apparatus and management apparatus may additionally be implemented together and or separately by one or more hardware and or software components and or layers.

Second a number of data formats and or storage mechanisms may be supported by and or used with collection apparatus analysis apparatus management apparatus and business rules repository . For example dependencies activity history syntactic structure version information licensing information business rules and or characteristics may be stored in relational databases graph databases data warehouses filesystems and or flat files. Dependencies activity history syntactic structure version information licensing information business rules and or characteristics may further be obtained and or transmitted in a number of formats including Extensible Markup Language XML documents JavaScript Object Notation JSON objects property lists and or other types of structured data.

As shown in the user interface includes a table with three columns . Column may include classes associated with a software library project e.g. Obstreperous 2.4 such as software library project of . Column may provide the number of incoming dependencies e.g. Dependers for each class in column and column may show the number of outgoing dependencies e.g. Dependencies for the class. Data in columns may be sorted in decreasing order of values in column .

Consequently the user interface may display class level dependencies of the software library project. A user may use the class level dependencies to determine the popularity stability and or health of various classes in the software library project. For example classes with more outgoing dependencies and fewer incoming dependencies e.g. Johnz Baronz Doodz may be less popular and stable than classes with more incoming dependencies and fewer outgoing dependencies e.g. Serial Compare String . In turn more popular and or stable classes may be better candidates for use e.g. calling through an API than less popular and or stable classes.

In particular column may include method signatures of methods in a class e.g. Obstrep listed in the user interface of . Column may display the number of incoming dependencies e.g. Dependers for each method signature in column and column may provide the number of outgoing dependencies e.g. Dependencies for the method signature. Data in columns may be sorted in decreasing order of values in column .

The user interface of may show method level dependencies of the Obstrep class in the Obstreperous 2.4 software library project. Like the dependencies of the dependencies shown in may facilitate the assessment of the popularity stability and or health of methods in the class. For example the method represented by the signature public int callfunc int may have significantly more incoming dependencies than outgoing dependencies and thus be safer to call than the method represented by the signature public void uselessCall which has significantly more outgoing dependencies than incoming dependencies.

As shown in column may identify versions of the Obstreperous software library project. Column may provide a status indicator for each identified version of the software library project with RED indicating low health or one or more flags YELLOW indicating one or more warnings or issues and GREEN indicating good health e.g. no warnings flags or issues . Column may provide the number of incoming dependencies e.g. Dependers for each version identified in column and column may provide the number of outgoing dependencies e.g. Dependencies for the version. Data in columns may be sorted in increasing order of values in column .

As with the dependencies shown in the dependencies shown in may facilitate the assessment of the popularity stability and or health of versions of the software library project. Moreover column may provide flags and or states representing health assessments for versions in column . For example version 2.4 of the software library project may have a GREEN state because the version has a large number of incoming dependencies and or a smaller number of outgoing dependencies. Version 0.9 may have a YELLOW state because the version has a small number of incoming dependencies and or a slightly higher number of outgoing dependencies. Version 0.0.1 may have a RED state because the version has few incoming dependencies and or more outgoing dependencies.

Status indicators in column may be determined based on other factors and or characteristics in lieu of or in addition to dependencies in columns . For example a version may be labeled e.g. flagged RED if the version hasn t been updated for a long time was immediately followed by a newer version e.g. indicating a broken version and or contains words such as deprecated or do not use. A version may be labeled YELLOW if the version has a high amount e.g. greater than 20 of API deprecation and or low check in or commit activity. A version may be labeled GREEN if the version has little to no API deprecation a higher number of committers and or moderate to high check in or commit activity.

As a result column may provide recommendations related to use of different versions of the software library project. For example a user may use status indicators in column to omit the use of RED versions carefully consider the use of YELLOW versions and or enable use of GREEN versions of the software library project.

Initially a software library project is located in a repository operation . For example the software library project may be located during crawling of a public e.g. open source repository and or querying of a private e.g. internal repository.

Next a set of data associated with use of the software library project is obtained operation . The data may include a set of dependencies of calls and objects associated with the software library project an activity history associated with the calls and the objects a syntactic structure associated with the calls and the objects version information associated with the software library project and or licensing information associated with the software library project. The activity history may include a commit metric e.g. number of commits number of committers frequency of commits commit date number of modified files number of modified lines etc. a release metric e.g. release frequency release date number of releases etc. and a social activity metric e.g. number of favorites number of follows number of shares number of comments etc. . The activity history may also include an issue history a crash history and or a usage history. The version information may include compatibility information for one or more components e.g. features of the software library project.

A set of business rules is applied to the data to assess one or more characteristics associated with the software library project operation . The characteristics may include a licensing characteristic an activity characteristic a popularity characteristic a compatibility characteristic and or a stability characteristic. The business rules may further be adapted to the needs requirements and or preferences of a user group and or organization considering use of the software library project and or assessing the health of the software library project.

Finally use of the data and characteristic s in assessing the health of the software library project is enabled operation . For example the data characteristic s and or visualizations associated with the data and or characteristic s may be provided to one or more users. The visualizations may include a chart a heat map a graph a score and an indicator. In turn the data characteristic s and or visualizations may facilitate the identification and adoption of healthy e.g. stable compatible reliable active popular etc. software library projects by the user s which in turn may simplify or streamline the development of software that uses the software library projects.

Computer system may include functionality to execute various components of the present embodiments. In particular computer system may include an operating system not shown that coordinates the use of hardware and software resources on computer system as well as one or more applications that perform specialized tasks for the user. To perform tasks for the user applications may obtain the use of hardware resources on computer system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system.

In one or more embodiments computer system provides a system for facilitating use of a software library project. The system may include a collection apparatus that obtains a set of data associated with use of the software library project. The data may include a set of dependencies of calls and objects associated with the software library project an activity history associated with the calls and the objects a syntactic structure associated with the calls and the objects version information associated with the software library project and or licensing information associated with the software library project. The system may also include an analysis apparatus that applies a set of business rules to the data to assess one or more characteristics associated with the software library project. Finally the system may include a management apparatus that enables use of the data and the one or more characteristics in assessing the health of the software library project.

In addition one or more components of computer system may be remotely located and connected to the other components over a network. Portions of the present embodiments e.g. collection apparatus analysis apparatus management apparatus etc. may also be located on different nodes of a distributed system that implements the embodiments. For example the present embodiments may be implemented using a cloud computing system that enables the assessment of health of a set of remote software library projects.

The foregoing descriptions of various embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention.

