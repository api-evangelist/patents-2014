---

title: Generating virtualized application programming interface (API) implementation from narrative API documentation
abstract: A virtualized Application Program Interface (API) implementation is generated based upon narrative API documentation that includes sentences that describe the API, by generating programming statements for the virtualized API implementation based upon parsing the narrative API documentation, and generating the virtualized API implementation based on upon the programming statements for the virtualized API implementation. The parsing of the narrative documentation may use a natural language parser and a domain-specific ontology for the API that may be obtained or created for the API. The virtualized API implementation may be generated using an API virtualizer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471283&OS=09471283&RS=09471283
owner: CA, Inc.
number: 09471283
owner_city: New York
owner_country: US
publication_date: 20140611
---
Various embodiments described herein relate to computer systems methods and program products and more particularly to virtualization of computer systems methods and program products.

In computer technology services are unassociated loosely coupled units of functionality that are self contained. Composite applications are software programs that are constructed leveraging capabilities provided by services. Services expose Application Programming Interfaces APIs which define the interaction between a service and a consuming composite application the application . The API may be related to a software library where the API describes the expected behavior while the library is an actual implementation of this set of rules. The API can also be related to a software framework that can be based on several libraries implementing several APIs but unlike the normal use of an API the access to the behavior built into the framework is mediated by extending its content with new classes plugged into the framework itself. The API may also include other types of interface protocol specifications. The capability exposed by the service via the API can be referred to as the API implementation or simply as the service .

In developing the application it may be desirable to begin the testing and simulation of the application before all of the dependent services are fully developed and or in situations where it may not be practical to test using certain components. In these environments service virtualization also referred to as API virtualization or simply as virtualization may be used to simulate an API implementation service and thereby create a virtualized API implementation. Testing and simulation can be performed on various parts of the application before all parts are fully developed. Service virtualization can emulate the behavior of dependent e.g. third party evolving and or not implemented services that are used to exercise the application for development or testing purposes.

Various embodiments described herein can generate a virtualized API implementation based upon narrative API documentation that comprises sentences that describe the API. Programming statements for the virtualized API implementation may be generated based on parsing the narrative API documentation. The virtualized API implementation may then be generated based upon the programming statements for the virtualized API implementation. A computer system method or program product that generates the virtualized API implementation based on the programming statements and or other data for the virtualized API implementation may be referred to herein as an API virtualizer .

The programming statements for the virtualized API implementation may be generated by parsing the narrative API documentation using a domain specific ontology for the API. The parsing may be performed using a natural language parser.

In some embodiments the parsing is performed by syntactically analyzing the API documentation using the domain specific ontology for the API and semantically analyzing the API documentation using the domain specific ontology for the API. In other embodiments the parsing is performed by identifying parameters of the API from the narrative API documentation and identifying normal and abnormal behaviors of the API from the narrative API documentation. The parameters of the API and the normal and abnormal behaviors of the API may be converted into the programming statements for the virtualized API implementation.

In some embodiments the identification of parameters of the API from the narrative API documentation may comprise identifying a type of a parameter identifying syntactical constraints on a parameter identifying range constraints on a parameter identifying invariants of a parameter identifying transforms of a parameter and identifying semantic inferences of a parameter. Moreover the identification of normal and abnormal behaviors of the API may comprise identifying a normal transaction identifying error situations and invalid transaction types identifying edge cases and limits and identifying error messages and responses.

In some embodiments as part of generating the virtualized API implementation a data model of the virtualized API implementation may be generated. Once the virtualized API implementation is generated based upon the narrative API documentation the virtualized API implementation may be used to construct a simulation framework to generate synthetic transactions to generate error reports and or for other purposes.

Various embodiments described herein may provide an apparatus that comprises processor circuitry and memory circuitry coupled to the processor circuitry and comprising computer readable program code that when executed by the processor circuitry causes the processor circuitry to perform operations comprising generating a virtualized API implementation based upon narrative API documentation that comprises sentences that describe the API according to various embodiments described herein. In other embodiments methods of API virtualization comprise generating a virtualized API implementation based upon narrative API documentation that comprises sentences that describe the API according to various embodiments described herein wherein the generating is performed by processor circuitry. In still other embodiments a computer program product comprises a computer readable storage medium having computer readable program code embodied in the medium that when executed by processor circuitry of a computer system causes the computer system to perform operations comprising generating a virtualized API implementation based upon narrative API documentation that comprises sentences that describe the API according to any of the embodiments described herein.

It is noted that aspects described with respect to one embodiment may be incorporated in different embodiments although not specifically described relative thereto. That is all embodiments and or features of any embodiments can be combined in any way and or combination. Moreover computer equipment systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional computer equipment systems methods and or computer program products be included within this description and protected by the accompanying claims.

Various embodiments will be described more fully hereinafter with reference to the accompanying drawings. Other embodiments may take many different forms and should not be construed as limited to the embodiments set forth herein. Like numbers refer to like elements throughout.

A service that is not yet fully developed can still be virtualized for simulation and or testing using for example an API virtualizer such as the CA LISA Service Virtualization product suite marketed by CA Inc. CA the assignee of the present application that are not readily available in their entirety and or for situations that are difficult to reproduce. The CA LISA product suite simulates constrained or unavailable systems and networks. The CA LISA solutions are designed to allow users to more effectively develop in parallel require less infrastructure for software development and find defects earlier in the application development process. Applications can be delivered to market faster with lower costs for application development systems and environments and with higher quality applications for end users. The CA LISA API virtualizer product suite is described in the Data Sheet entitled copyright 2013 CA in the Data Sheet entitled copyright 2013 CA and in the White Paper by John Michelsen entitled copyright 2013 CA the disclosures of all of which are hereby incorporated herein by reference in their entirety is if set forth fully herein.

Unfortunately however in many application development scenarios a working or preliminary implementation of an API may not yet exist. In fact in many environments a complete definition of an API may not yet exist. Yet various embodiments described herein can use narrative API documentation which may provide natural language e.g. English sentences that describe an API and use a natural language parser and a domain specific ontology to parse the narrative API documentation and thereby obtain programming statements for the API. The programming statements can then be provided to an API virtualizer to create a virtualized API implementation. Thus a virtualized API implementation may be generated according to various embodiments described herein based upon narrative API documentation that includes sentences that describe the API. The virtualized API implementation that is generated may not be complete or functional yet may still provide a reasonable facsimile that can be used as a preliminary basis for simulation synthetic transaction generation development and or testing while development of both the underlying service and the component application can proceed concurrently.

Referring now to the API virtualization equipment generates a virtualized API implementation based on narrative API documentation that includes sentences that describe the API. The narrative API documentation may also be referred to as human readable API documentation. This documentation can provide a behavioral description of an API using a natural language and may be in the form of a Microsoft Word document .pdf file .html text man and or other formats. This documentation may be in electronic form and or may be scanned from print and converted to electronic form using for example Optical Character Recognition OCR and or other techniques. The narrative API documentation may provide a high level description of the API in terms of its behavior in a manner that is intended for human consumption rather than consumption by technology. The narrative API documentation generally does not define all possible inputs to the API and the outputs that are produced therefrom. Rather the narrative API documentation can provide a natural language specification of at least some of the API s behavior. It will be understood that a given API may have multiple sets of API documentation that may describe various aspects of the API s behavior so that multiple narrative API documentation may be used as illustrated in . In some embodiments an interface may be provided to select a human readable API document or documents for example using a browse mechanism and or other similar selection collection mechanism.

Still referring to the narrative API documentation is provided to a natural language parser that can analyze the narrative API documentation based upon a domain specific ontology that may be preexisting and or may be created using domain experts for the API. More than one relevant domain specific ontology also may be present and any one or more of these ontologies may be used by the natural language parser . As used herein a parser means interpretive equipment that may be embodied in software running on a processor that maps natural language sentences to their syntactic structure or representation as a result of syntactic analysis and their logical form as a result of semantic analysis . The parser uses the rules of grammar and rule meanings in a lexicon also referred to herein as a domain specific ontology . The domain specific ontology provides a dictionary and rules of grammar for the domain of the API. The domain specific ontology can frame parameter definitions expected behaviors error conditions edge conditions and or use cases for example. Applying the ontology to the natural language parser programming statements for the API may be identified that are intended for technological consumption by a computer system. The programming statements may include one or more of the following 

It will be understood that the programming statements may not be a complete definition for the API. However the programming statements may provide a preliminary data model for the virtualized API implementation. As such it may provide a basis for generating the virtualized API implementation using an API virtualizer such as the above described CA LISA product suite.

The API virtualizer may construct the virtualized API implementation as well as a simulation framework which may be provided at the protocol level from information gleaned from the virtualized API implementation itself for example Java SOAP etc. Synthetic transactions may also be generated for example by constructing a skeleton for normal transaction simulation and populating the skeleton with one or more examples. Error edge and limit cases may also be constructed.

It will be understood that illustrates the programming statements that are generated by the natural language parser being input directly into an API virtualizer . However depending upon the capabilities of the API virtualizer one or more intermediate operations may be performed to produce acceptable input for the API virtualizer . For example the programming statements may be converted to a standard programming language that may be used by the API virtualizer . In one example the programming statements may be converted to Web Services Description Language WSDL which is an XML based interface description language that is used for describing the functionality offered by a Web service to provide a machine readable description of how the service can be called what parameters it expects and or what data structures it returns.

As shown in the computing device includes a user interface such as a keyboard keypad display pointing device speaker etc. that communicates with one or more processors generally referred to herein as processor circuitry . The processor may include one or more data processing circuits such as a general purpose and or special purpose processor e.g. microprocessor and or digital signal processor which may be collocated or distributed across one or more data networks. The processor is configured to execute computer program instructions from the memory described below as a computer readable medium to perform some or all of the operations and methods for one or more of the embodiments disclosed herein.

The computing device may also include an input output interface that may communicate with other communication devices and or one or more networks including any conventional public and or private real and or virtual wired and or wireless network including the Internet. The input output I O data system may include a communication interface and may be used to transfer information in the form of signals between the computing device and another computer system or a network e.g. the Internet . The communication interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. These components may be conventional components such as those used in many conventional computing devices and their functionality with respect to conventional operations is generally known to those skilled in the art. Communication infrastructure between the components of may include one or more device interconnection buses such as Ethernet Peripheral Component Interconnect PCI and the like.

The computing device may further include a memory with an operating system and API virtualization equipment stored therein. The operating system can manage operation of the computing service and execution of the API virtualization . A storage system may also be provided that includes a narrative API documentation and a domain specific ontology stored therein.

The memory and or the storage system may include removable and or fixed non volatile memory devices such as but not limited to a hard disk drive flash memory and or like devices that may store computer program instructions and data on computer readable media volatile memory devices such as but not limited to random access memory as well as virtual storage such as but not limited to a RAM disk . Although illustrated in separate blocks the memory and the storage system may be implemented by a same storage medium in some embodiments.

At Block a domain specific ontology for the API such as the ontology is obtained and or is created. The ontology provides a collection of words or vocabulary that define behavior in a given domain. Stated differently an ontology provides a set of descriptor words that relate to the field of the API. The ontology may be a preexisting ontology for a given domain of an API and or may be created or supplemented using a domain expert for example an author of the narrative API documentation .

Still referring to at Block the narrative API documentation that was obtained at Block is parsed using the domain specific ontology that was obtained at Block to obtain programming statements for the virtualized API implementation . Parsing may take place using a natural language parser such as the natural language parser that can use semantic technologies to translate human readable documentation into an underlying data model for the virtual service. As was noted above the data model of the virtualized API implementation may be generated directly at the parsing or may be generated by further processing the programming statements . At Block the programming statements may be validated using a software tool and or domain programming experts. Finally at Block the API implementation is virtualized using the programming statements that were created at Block for example using an API virtualizer such as the CA LISA product suite. The API virtualizer can generate a virtualized API implementation as well as a simulation framework synthetic transactions and or error edge and limit cases .

As was noted above the narrative API documentation may provide a reasonable facsimile of the API at the current state of development. However as development progresses the narrative API documentation may be further refined. Accordingly at Block a determination is made as to whether an updated narrative API documentation is available and if so then the parsing of Block the validating of Block and the virtualizing of Block may be performed again so as to generate an updated virtualized API implementation based upon the updated narrative of the API documentation that behaviorally describes the API.

Referring now to Block syntactic analysis is performed on the API documentation using the domain specific ontology for the API. As used herein syntactic analysis includes determining the subject and predicate and the placement of nouns verbs pronouns etc. in a sentence. Given the variety of ways to construct sentences in a natural language syntactic analysis may be more complicated than determining subjects predicates nouns verbs pronouns etc. given the word order alone.

Referring now to Block semantic analysis is performed. In some embodiments once the operations have arrived at an analysis of the input sentence s syntactic structure semantic analysis is performed to ascertain the meaning of the sentence. From the syntactic structure of a sentence that was obtained at Block the operations of Block attempt to produce a logical form of the sentence. The logical form may be context free in that it does not require that the sentence be interpreted in its overall context in which it occurs. Moreover the logical form attempts to state the meaning of the sentence without reference to the particular natural language. Thus semantic analysis attempts to approach the notion of a proposition from the original sentence. It will be understood that the operations of Blocks and may be performed differently from the order shown and in some embodiments syntactic analysis and semantic analysis may be intertwined.

Finally referring to Block post processing is performed. Post processing may be used to convert the output of Blocks to a format that is usable by the particular API virtualizer and or virtualizing operation .

Still referring to at Block normal and abnormal behaviors of the API also may be identified. In some embodiments a normal transaction definition may be identified for example by identifying sample code or by interpreting human readable prose. Error situations and invalid transaction types may also be identified. Edge cases limits and exceptions may also be identified wherein an edge case defines a boundary between a valid transaction and an invalid transaction. Stated differently boundary conditions for a transaction may be identified. Finally error messages and their responses and reactions may also be identified to identify what may happen if a parameter is input in an incorrect manner.

Finally at Block the parameters of the API and the normal and abnormal behaviors of the API are converted into programming statements for the virtualized API implementation.

It will be understood that various natural language parsers which may also be referred to as natural language processors may be used to perform the operations of Blocks and or . Natural language parsers may generate link graphs from the sentences of the input documentation and may use an ontology to create and or interpret the graphs. Statistical analysis can be used in addition to or instead of creating the graphs. The natural language processor may also host a rules base that can be used to aid in the parsing and interpretation.

Additional discussion of various embodiments described herein will now be provided. Various embodiments described herein can automate the process of constructing virtual services and underlying synthetic transactions by interpreting human readable API documentation. Information about the normal edge and error behavior of the service may be described in the documentation and may form the basis of a set of synthetic transactions.

More specifically various embodiments described herein can generate a service virtualization i.e. a virtualized API implementation that provides a reasonable facsimile and in some embodiments a close approximation to a real API such that the virtualized API implementation may return similar outputs as the real API for a particular set of inputs. The real API may not yet exist may be unavailable and or may require access to other systems that are costly unavailable and or not yet developed. Yet a virtualized API implementation can allow testing of the API and or performing other desirable functions for the API while the original API is not yet available or still under development.

API virtualizers such as the CA LISA product suite may assume that a working version of an API already exists. The API may then be tested using tools such as the CA LISA Pathfinder to record live application traffic that is captured in pre production. Thus visibility may be obtained into how a particular piece of software is constructed and its dependencies with other software systems. Simulations may be built in two ways a man in the middle between two software components which can alter the client so that it vectors the recorder and captures the pass through as it goes back and forth and or an agent instrumentation that can intercept everything including language method calls.

In enterprise business environments many enterprises may have up to twenty or more different services to be virtualized. The services to be virtualized may be identified and specified by interviewing subject matter experts about the different services. Tools such as CA LISA Pathfinder may allow more power in discovering what can be virtualized and to leverage heuristics to identify that which might be virtualized. However virtualization may scale in multiple directions. First individual enterprises may be looking to bring more services into virtualization more rapidly and using fewer professional services to implement. Moreover it may be desirable to construct a library of common virtualizations for use in a Software as a Service SaaS or service environment so as to lower the threshold for enterprises to leverage personalization. It also may be desirable to increase efficiencies in onboarding and time to value for enterprises of all sizes and virtualizing. Finally organizations may build applications in a more encapsulated component orchestrated fashion which may exponentially increase the number of interfaces targeted for virtualization. Accordingly the need for virtualization may continue to increase dramatically.

Conventionally API virtualization may be performed through configuration or through recording of the activity of the API. This may require either the exercise of the application through many different cases including edge cases which may be time consuming or may be difficult to implement. Alternatively a virtual configuration may be configured at the potential expense of expensive coding or definition by developers technicians.

In sharp contrast various embodiments described herein can use narrative API documentation that includes sentences that can specify the behavior of an API to generate a virtualized API implementation . Semantic technologies may be used to translate human readable API documentation at the behavioral level rather than at the programmatic level into the underlying data model for the virtual service. API virtualizers may then be used to construct synthetic transactions based on the description in the documentation of the service. Error conditions and edges cases may be constructed as well as normal operations. A summary report may also be constructed describing the progress the process has made on the construction and definition of the data model and synthetic transactions.

Accordingly various embodiments described herein can virtualize an API from narrative API documentation that comprises sentences that describe the API even though a programmatic API implementation is not available.

It will also be understood that various embodiments have been described herein in terms of generating a virtualized API implementation based upon narrative API documentation that comprises sentences that describe the API. However the converse may also be true. Specifically an API may exist but it may not have adequate documentation . However if the actual API behavior can be observed for example using the CA LISA product suite documentation may be generated from the API by generating programming statements from the API and then generating a behavioral description from the programming statements .

The following examples shall be regarded as merely illustrative and shall not be construed as limiting the invention.

Example 1 is an example of narrative API documentation for an airline reservation system such as may be provided commercially by the Expedia or Travelocity systems. Example 1 is written in Javadoc format. Example 1 provides a representative example of narrative API documentation . The Javadoc format may be easy to parse because the symbol indicates that a parameter is being provided. Example 1 may have drawbacks however because the description of the parameters is much shorter than may be provided in a Word document written in narrative English. On the other hand a Word document may be less structured but give more description.

In Example 1 the sentences are numbered for purposes of subsequent explanation but numbers are generally not included in the narrative API documentation.

In Example 1 sentence 1 indicates that a method definition is being specified and that the words following given define parameters. For example in sentence 2 a parameter customerId has a syntactic constraint defined as specified in a URL. Similarly in sentence 3 the parameter password has a syntactical constraint of being a BASE encoded 32 bit SHA1 encrypted password. In sentence 4 the start date parameter includes a range constraint of being date in the future and in sentence 5 the return date has a range constraint of after the start date . In sentence 6 the flexible parameter is of a parameter type boolean and in sentence 7 the parameter type for originAirport is a three character airport code. The syntactical constraint in sentence 8 is similar to sentence 7 but a range constraint is also applied that is different from originAirport . In sentence 9 the options parameter is a parameter type of object . Sentence 10 defines a normal transaction that returns an array of possible plane tickets . Finally sentence 11 is the method call itself for the normal transaction.

Accordingly Example 1 provides a typical example of narrative API documentation for a method call. The narrative API documentation of Example 1 may be applied to a natural language parser using a domain specific ontology that relates to airline reservation systems. The ontology may be preexisting and or may be created. Programming statements as illustrated in Example 2 may be created after traversing the object documentation and link graphs that are generated by the natural language parser .

In Example 2 the parameters are defined by the argument programming statements arg1 arg6 which may be obtained from sentences 1 9 of Example 1. The return programming statements ret may be obtained from the sentences 10 and 11 of Example 1. Example 2 may then be input to an API virtualizer such as the CA LISA product suite to generate a virtualized API implementation .

As will be appreciated by one skilled in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or contexts including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented entirely hardware entirely software including firmware resident software micro code etc. or combining software and hardware implementation that may all generally be referred to herein as a circuit circuitry module component and or system. Furthermore aspects of the present disclosure may take the form of a computer program product comprising one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be used. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as Python Ruby and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The functions noted in the blocks may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting to other embodiments. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises comprising includes and or including have and or having when used herein specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. Elements described as being to perform functions acts and or operations may be configured to or otherwise structured to do so. As used herein the term and or or includes any and all combinations of one or more of the associated listed items.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

Many different embodiments have been disclosed herein in connection with the above description and the drawings. It will be understood that it would be unduly repetitious and obfuscating to literally describe and illustrate every combination and subcombination of these embodiments. Accordingly all embodiments can be combined in any way and or combination and the present specification including the drawings shall support claims to any such combination or subcombination.

In the drawings and specification there have been disclosed typical embodiments and although specific terms are employed they are used in a generic and descriptive sense only and not for purposes of limitation the scope of the disclosure being set forth in the following claims.

