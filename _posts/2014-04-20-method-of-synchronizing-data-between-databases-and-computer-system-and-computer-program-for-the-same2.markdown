---

title: Method of synchronizing data between databases, and computer system and computer program for the same
abstract: Systems for synchronizing data between a first-database and a second-database are presented including: a memory; and a client configured for determining whether a retrieval request requires a synchronization of the second-database before processing the received retrieval request, where the system partially synchronizes the second-database from the first-database with only that portion of the first-database associated with the retrieval request in response to determining whether synchronization is required and for processing the retrieval request from the second-database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558257&OS=09558257&RS=09558257
owner: International Business Machines Corporation
number: 09558257
owner_city: Armonk
owner_country: US
publication_date: 20140420
---
The present invention relates to a method of synchronizing data between a first database and one or more second databases each storing at least one piece of data included in the first database and a computer system and computer program for the same.

In order to improve the performance of a system including databases there is a method using multiple in memory and back end databases. The in memory database is also called in core database or main memory database. The in memory database is to store data in a semiconductor memory instead of a hard disk drive. The back end database is a main database that includes data as the source of the in memory database. The in memory database holds all or part of data of the back end database and is used as a cache for the back end database. The in memory database processes database I O on the semiconductor memory without reading from or writing to the hard disk drive. Therefore in the in memory database data read or written by an application is held in a cache on the memory by means of the in memory database accessing the database of the hard disk drive by a process totally independent of the application. From the standpoint of the application SQL is issued to the in memory database in a way without any difference from the database on the hard disk drive. Then a query request from the application is processed by the in memory database. Using the in memory database a data set is retrieved from the in memory database. This results in reducing the load on the back end database and improving the processing speed as the database dramatically.

Data in the back end database is updated. Therefore the in memory database needs to reflect the update therein. The in memory database has to load data from the back end database to perform the update. Typical conventional methods for achieving the reflection include a periodic synchronization method and a real time synchronization method.

The periodic synchronization method is a method of applying a data set of the back end database to the in memory database collectively on a periodic basis to update the data set of the in memory database. This update provides synchronization between the back end database and the in memory database. In general processing data collectively in a large batch imposes less load on the database than processing data in small batches. Therefore the periodic synchronization method enables replication from the back end database to the in memory database while reducing the load on the back end database. However the data set of the in memory database is a data set at the time of periodic synchronization not the latest data set. Thus the periodic synchronization method has a problem that the database users cannot issue to the in memory database such a search or retrieval request that requires the latestness or currency of data.

As a retrieval technique to solve the above mentioned problem of the periodic synchronization method there is pass through retrieval. The pass through retrieval is a retrieval technique that has already been put to practical use as one of in memory database techniques. The method using the pass through retrieval is executed concurrently with the above mentioned periodic synchronization method. In the pass through retrieval if such a retrieval request that requires data currency is issued to the in memory database this retrieval request is transmitted to the back end database. Therefore the system searches the back end database. However if the search criteria are complicated since the load on the back end database increases the performance of the entire system will be reduced.

The real time synchronization method is a method in which the system transmits in response to an update of the back end database the updated data set of the back end database to the in memory database to update the data set of the in memory database promptly. This update provides real time synchronization between the back end database and the in memory database thus resolving the above mentioned problem of the periodic synchronization method. However in the real time synchronization method if the frequency of updates to the back end database is high the system will perform replication from the back end database to the in memory database frequently in small batches. Such frequent replication attempts increase the load on the back end database resulting in a further reduction in the performance of the entire system. In addition the above mentioned replication is performed regardless of whether the currency of data to be retrieved from the in memory database is required. However when many of retrieval requests to be issued to the in memory database do not require data currency it is less likely that the updated latest data set will be required. Therefore the replication could be useless processing that merely reduces the performance of the entire system.

Systems for synchronizing data between a first database and a second database are presented including a memory and a client configured for determining whether a retrieval request requires a synchronization of the second database before processing the received retrieval request where the system partially synchronizes the second database from the first database with only that portion of the first database associated with the retrieval request in response to determining whether synchronization is required and for processing the retrieval request from the second database. In some embodiments systems further include an application for receiving the retrieval request from a user a driver for providing the application an application programming interface API for operating the databases an asynchronous replication transmitter for transmitting that portion of the first database associated with the retrieval request an asynchronous replication receiver for receiving that portion of the first database associated with the retrieval request and an update log table for storing update information for the first database where the update information includes at least updated data and updated time. In some embodiments systems further include a structured query language SQL statement determiner for determining whether the retrieval request requires currency a second database retrieval caller for processing the retrieval request from the second database when the retrieval request does not require currency and a first database synchronization determiner coupled with a client side synchronization time recorder for determining whether synchronization between the first database and the second database is required. In some embodiments systems further include a second database synchronization determiner coupled with a system synchronizing time recorder for determining whether synchronization between the first database and the second database is required. In some embodiments systems further include an anticipated synchronization processor coupled with an anticipated synchronization request recorder and the system synchronizing time recorder for determining whether to request synchronization processing for each target table in the second database associated with the retrieval request.

In some embodiments the retrieval request includes at least one data set included in the database to be referenced and where the retrieval request further includes at least a SELECT phrase of an SQL statement a pass through request or a command using a reserved word prepared for the databases. In some embodiments the client side synchronization time recorder includes a synchronization time concerting the target table. In some embodiments the system synchronizing time recorder includes a an update time of the target table. In some embodiments the client further includes an SQL statement definition file where the SQL statement definition file includes at least a declaration of SQL statement that requires data currency a table name and a threshold value as a target of a synchronization processing performed according to the respective SQL statements.

In other embodiments systems for synchronizing data between a first database and a second database in response to a retrieval request are presented including a memory an application for receiving the retrieval request from a user a driver for providing the application an application programming interface API for operating the databases a client configured for determining whether a retrieval request requires a synchronization of the second database before processing the received retrieval request where the system partially synchronizes the second database from the first database with only that portion of the first database associated with the retrieval request in response to determining synchronization is required and for processing the retrieval request from the second database where that portion represents only a portion of data out of all possible data sets that differ between the first database and the second database an asynchronous replication transmitter for transmitting that portion of the first database associated with the retrieval request an asynchronous replication receiver for receiving that portion of the first database associated with the retrieval request and an update log table for storing update information for the first database where the update information includes at least updated data and updated time. In some embodiments the client further includes a structured query language SQL statement determiner for determining whether the retrieval request requires currency where currency is determinative of whether the retrieval request requires up to date data a second database retrieval caller for processing the retrieval request from the second database when the retrieval request does not require currency and a first database synchronization determiner coupled with a client side synchronization time recorder for determining whether synchronization between the first database and the second database is required. In some embodiments systems further include a second database synchronizer coupled with a system synchronizing time recorder for determining whether synchronization between the first database and the second database is required. In some embodiments systems further include an anticipated synchronization processor coupled with an anticipated synchronization request recorder and the system synchronizing time recorder for determining whether to request synchronization processing for each target table in the second database associated with the retrieval request.

In a preferred embodiment of the present invention first database means a master database of the system. The first database can operate as a back end database for example. In the first database data used in the system are managed in an up to date state. A data set included in the first database is replicated to a second database. The first database is for example a database managed by a database management system DBMS or a collection of data created by a file system provided by an OS but is not limited thereto. The database management system can be selected for example from IBM DB2 Oracle database Microsoft SQL Server PostgreSQL MySQL or SQLite.

In the embodiment of the present invention second database means a sub database of the system which is paired with the master database of the system. The second database can operate as a front end database. The second database is a database holding at least one piece of data included in the first database. The second database can receive a retrieval request to be described later. The second database can be selected for example from a cache database an in memory database a database managed by a database management system or a collection of data created by a file system provided by an OS but not be limited thereto.

In one aspect of the present invention the second database is a cache database with a back end database set as the first database. The cache database is a database stored in a cache area accessible faster than the access to the back end database. When the back end database is stored in a hard disk drive for example the cache area may be in a semiconductor memory. When the back end database is stored in a hard disk drive connected through LAN for example the cache area may be a hard disk drive connected through a bus faster than the LAN e.g. with a higher speed of rotation 10000 rpm or more or a hard disk drive having a large cache memory capacity. The cache database holds all or part of data of the back end database.

In another aspect of the present invention the second database is an in memory database with a back end database set as the first database. The in memory database is a database storing data in a semiconductor memory not in a hard disk drive and paired with the back end database. The in memory database holds all or part of data of the back end database.

In the embodiment of the present invention synchronizing data means that at least one piece of data on different databases is set to such a value to return the same result respectively when referenced. For example setting respective data to the same value corresponds to synchronizing the data. The timing of setting such a value to return the same result is not necessarily simultaneous between the first database and the second database. For example the timing is when the data is referenced by the user when the data is expected to be referenced by the user or it reaches time specified by the user but is not limited thereto.

In the embodiment of the present invention retrieval request means a request including that at least one data set included in the database is to be referenced but not including that the data set as a synchronization target is to be updated. This request is for example a request using the SELECT phrase of an SQL statement a pass through request to be described later or a command using a reserved word prepared for the database but is not limited thereto.

In the embodiment of the present invention future retrieval request means a retrieval request which has the possibility of being issued after the above mentioned retrieval request. This possibility may occur with any action caused in the system. For example any action means that another retrieval request is issued an application is started or a given time has come but is not limited thereto.

In the embodiment of the present invention data set means a collection of data. The data set may include but not be limited to certain data a group to which the data belong data associated with the certain data other groups associated with the certain data respectively or a combination thereof. The group is a table a column or a row but is not limited thereto. The term associated means linked or referenced but is not limited thereto.

In the embodiment of the present invention differential data means data included in at least one common or associated data set between different databases i.e. the data have values different between the databases or data partially including different data. The term associated means for example a relationship between replication source and replication destination but it is not limited thereto.

In the embodiment of the present invention retrieval request requires data currency means that data to be retrieved according to the retrieval request must be data before the elapse of a certain time indicated by a given threshold value to be described later after replication is performed.

In the embodiment of the present invention expected issue time means the time at which the above mentioned future retrieval request is expected to be issued. The expected issue time is for example a relative time from a certain action taken at a system time or in the system. The certain action means for example that a retrieval request is issued an application is started or a given time has come but is not limited thereto. The expected issue time may be set by the user or determined statistically for example. When it is determined statistically the computer system may record an interval from the issue of a retrieval request to the issue of another retrieval request each time to set the average value of the recorded times as the expected issue time.

In the embodiment of the present invention given threshold value means such a value to indicate a time range representing how new the data is enough to be retrieved according to a retrieval request that requires data currency. For example the given threshold value is represented by a relative time which goes back to the past from the issue of the retrieval request.

In the embodiment of the present invention a declaration included in a retrieval request means a command indicative of a retrieval request used for retrieval of data from a database. The command includes but is not limited to an SQL SELECT statement for example. The declaration included in the retrieval request is a prepared statement for example. In the declaration a specific data value a stored location or a conditional expression used to narrow down the data may be masked or not be masked. For example suppose that the command indicative of a retrieval request is select data1 data2 from table1 where data1 10. In this case masking may be either of a b or c to be cited below. Note that masking is expressed by in the following a b and c .

In the embodiment of the present invention pass through means that a request issued to the second database is transferred to the first database. This transfer enables a response to the request to be obtained from the first database instead of the second database.

Many applications have both retrieval processing that requires data currency hereinafter referred to as first retrieval processing and retrieval processing that does not require data currency hereinafter referred to as second retrieval processing . For example in a typical application for an e commerce site the first retrieval processing is retrieval processing for information on inventory of commercial products and the second retrieval processing is retrieval processing for products. Here products are retrieved and listed in a list of products on the e commerce site for example. However on a product list page product inventory information is rarely retrieved and listed. Users of the e commerce site are navigated from the product list page to track detailed product information. The product inventory information can first be retrieved and displayed at a predetermined stage.

Further for example in an application for a hotel search site the first retrieval processing is retrieval processing for data on room availability and the second retrieval processing is retrieval processing for hotels or areas for example. Here data acquired by the retrieval processing for data on room availability need to be as up to date as possible but does not need to be data at the present moment. For example the data on room availability may be allowed even if it is old data on rooms that were available about a few minutes ago. In the application for the hotel search site processing that requires real time data currency is only processing for hotel reservations. Here a case is assumed where the application for the hotel search site provides the following two kinds of retrieval functions 

Navigational retrieval function which when a user specifies any one of prefectures in Japan shows areas within the prefecture and when the user further specifies an area which shows hotels in the area.

Search function which when the user specifies an area to stay and arrival date shows hotels having rooms available near the area on the arrival date

The application for the hotel search site is created on the assumption that many users will use the above search function 1. The application for the hotel search site is also created on the assumption that users who are staying at hotels with specific purposes search for hotels using the above search function 2.

When a hotel is searched for using the above search function 1 the above navigation progresses and only at the stage of search for room availability information the data on room availability can be retrieved and displayed. When a hotel is searched for using the above search function 2 the data on room availability can be retrieved and displayed as a result of the above search 2.

As shown in the example of the e commerce site and the example of the hotel search site there are not so many cases where real time up to date data is required in the application. Therefore in one aspect of the present invention the system synchronizes a data set retrieved from the back end database with a data set retrieved from the in memory database according to how much currency is necessary for the data.

The embodiment of the present invention will now be described with reference to the accompanying drawings. It should be understood that the embodiment is to describe a preferred form of the present invention and is not in any way intended to restrict the scope of the invention. Throughout the figures to be cited below the same reference numerals are used to denote the same objects unless otherwise indicated.

The system configuration A is an example of a system configuration in which the first database A and the second database A are managed by different servers A and A respectively. In the system configuration A the servers A and A for managing data communicate with each other to perform replication between the first database A and the second database A . The system configuration B is an example of a system configuration in which the first database B and the second database B are managed by the common server B . In the system configuration B replication between the first database B and the second database B is performed without the above communication. The system configuration C is configured such that the two or more second databases C and D are included on the server C and D respectively. The system configuration C is an example of a system configuration in which the second databases C and D are managed by two or more server C and D . In the system configuration C the server C for managing data communicates with the servers C and D respectively to perform replication between the databases. Data respectively included in the second databases C and D are managed by the servers C and D for managing data individually. Therefore the data respectively included in the second databases C and D may be different data or the same data.

The system configuration in the computer system according to the embodiment of the present invention is not limited to the above system configurations A to C . In the system configurations A to C each database and each server A to C for updating data or each server A to D for retrieving data have a one to one correspondence. However the relationship between each database and each server A to C for updating data or each server A to D for retrieving data is not always one to one correspondent. For example in the system configuration C the server C for retrieving data may issue a retrieval request to both the second databases C and D . Further the server C for updating data and the server C for retrieving data may be the same server for example. In the case of the same server the server can issue both the retrieval request to the second databases C and D and the update request to the first database C . In addition the computer system may be a computer system provided with two or more system configurations shown in .

A system configuration A includes at least one in memory database A to C and one back end database A . Two or more in memory databases A to C may be provided for example for respective types of data respective data processing or respective data accessing times. The type of data may include data on customers data on products and data on price. The data processing may be a withdrawal or deposit transaction for example. The data accessing time may be a weekday daytime a weekday nighttime or Saturday and Sunday for example. The in memory databases A to C can be distributed to one or more systems.

Replication may be performed at certain time intervals or at a time specified by a user. The time interval can be defined by the user. The time interval may be ten minutes one hour or one day but not be limited thereto. Suppose that the server A for updating data updates data frequently during daytime hours but rarely during nighttime hours. In such a case the user can define the time interval as 30 minutes for daytime and five hours for nighttime for example. Further replication may be performed depending on the load placed on each database. The computer system may have a database management system monitor the load for example. The computer system may perform replication when the load falls below a threshold value defined by the user for example. Upon replication the computer system collectively reads differential data from the back end database A . The collectively read differential data includes for example a data set updated after the previous replication. The computer system transfers the read data to the in memory databases A to C . Then the computer system applies the transferred data to the in memory databases A to C . In a typical database processing for acquiring and updating many records in a stroke is faster than processing for acquiring and updating the many records in multiple transactions. When replication is performed in units of collectively read data sets the loads placed on the back end database A and the in memory databases A to C can be reduced.

Replication can also be performed when a retrieval request has been issued. The details of replication performed when a retrieval request has been issued will be described later with reference to to .

In the system configuration A the in memory databases A to C can be in a cluster. Thus upon replication the computer system acquires from the back end database A differential data on each of the multiple in memory databases A to C . Here differential data acquired for an in memory database can include differential data that is not acquired for the other in memory databases. Thus differential data is not always deleted from the back end database A just because the differential data has been acquired from the back end database A . Therefore it is preferred to perform replication in such a manner not to reacquire as much data already replicated as possible. However even if duplicated differential data have been acquired the data are just rewritten for example and this does not cause inconsistency between data included in the back end database A and data included in each of the in memory databases A to C .

The following description with reference to to takes an example in which the database corresponding to the first database is a back end database and the database corresponding to the second database is an in memory database.

In step the computer system determines whether the issued retrieval request current retrieval request or a retrieval request future retrieval request that can be issued after the issued retrieval request is a retrieval request that requires currency. In this determination the computer system determines whether a declaration included in the current retrieval request or the future retrieval request is listed in a list hereinafter referred to as first list of declarations of retrieval requests that require currency. The first list is a list created by the user beforehand. In the first list combinations of declarations included in retrieval requests that require currency and threshold values are listed respectively. The future retrieval request is retrieved from a list hereinafter referred to as second list in which combinations of declarations of current retrieval requests and declarations of future retrieval requests corresponding to respective current retrieval requests and requiring currency are listed. The second list is a list created by the user beforehand. In the second list combinations of declarations included in current retrieval requests and declarations included in future retrieval requests which correspond to respective current retrieval requests and require currency are listed respectively. The second list may be included in the first list. If the declaration of the current retrieval request or the future retrieval request is included in the first list this processing proceeds to step . On the other hand if the declaration is not included this processing proceeds to step .

In step the computer system determines whether the time of past application to the in memory database of the data set as the retrieval target of the current retrieval request or the future retrieval request hereinafter referred to as past application time is within a currency threshold value. The currency threshold value means a time range in which the data set is accepted even if it is old. If the threshold value is one hour any data set applied to the in memory database within one hour is considered to be within the threshold value. The past application time means the time of recording the data set in a log or the like in step to be described later in response to a previous issue of the current retrieval request or the future retrieval request. The computer system calculates a difference between an expected issue time of the current retrieval request or the future retrieval request and the past application time. If the calculated difference is within a threshold value corresponding to the declaration of the current retrieval request or the future retrieval request listed in the first list this processing proceeds to step . On the other hand if the difference is beyond the threshold value this processing proceeds to step .

In step the computer system generates a difference retrieval request. The difference retrieval request is a request for retrieving from the back end database differential data between a data set applied to the in memory database and a data set at the time of issue of the current retrieval request. For example the difference retrieval request is to retrieve a table column or record to which the retrieval target of the current retrieval request or the future retrieval request belongs but is not limited thereto. Further the table column or record may be one or more. For example suppose that the table to which the retrieval target belongs includes a table including column items Employee No. key item Family Name Kanji Given Name Kanji Family Name Kana and Given Name Kana and a table including column items Employee No. key item and Length of Service. Suppose further that the retrieval target includes column items Family Name Kanji and Length of Service. Here for example if the column with the column item Given Name Kanji is a column retrievable in other retrieval processing and the columns with the column items Family Name Kana and Given Name Kana are columns not to be retrieved the computer system can generate a difference retrieval request for retrieving the columns with the column items Family Name Kanji Given Name Kanji and Length of Service. Further for example if the retrieval target is a record in which the employee No. is in the thousands the difference retrieval request may be a request for retrieving records from No. 1000 to No. 1999 or a request for retrieving all records. Further if a command for performing replication is prepared in a database management system used the command may be used as the difference retrieval request. Further for example the difference retrieval request may be a request for retrieving a table column or record associated with the retrieval target of the current retrieval request or the future retrieval request. The term associated means a reference relationship with an external key for example. The user can create beforehand a correspondence table showing a relationship between the current retrieval request or the future retrieval request and the table column or record for example. From the correspondence table the computer system can acquire the table column or record associated with the retrieval target to generate the difference retrieval request. After completion of the generation the processing proceeds to step .

In step the computer system transmits the generated difference retrieval request to the back end database. The computer system performs on the back end database the difference retrieval request transmitted. Then the computer system transmits the result to the in memory database. After the transmission the processing proceeds to step .

In step the computer system applies the transmitted result to the in memory database. After completion of the application the processing proceeds to step .

In step the computer system records the time of application in a log a memory within a process of the in memory database or the in memory database itself for example. After completion of the recording the processing proceeds to step .

In step the computer system performs the current retrieval request on the in memory database. As a result a retrieval response is returned to the retrieval request issuing side. After that the processing proceeds to step .

Current retrieval requests or the future retrieval requests are classified into retrieval requests that require data currency and retrieval requests that do not require data currency step . Therefore it is avoided that any retrieval request that does not require data currency is performed on the back end database and hence the load placed on the back end database can be reduced.

It is determined how new the data set is enough to be retrieved according to a retrieval request that requires data currency step so that as many data sets as possible are retrieved from the in memory database. Thus the number of accesses to the back end database can be reduced compared with the case where the determination is not made.

The difference retrieval request can be simpler than the issued retrieval request. Simple retrieval processing means retrieval processing with fewer retrieval conditions for example. For example while the issued retrieval request is a request for retrieving a certain column of a certain record included in a certain table hereinafter referred to as complicated retrieval request the difference retrieval request can be a request for retrieving only the certain table hereinafter referred to as simple retrieval request . Therefore when the difference retrieval request is created such a case that the complicated retrieval request is passed through to the back end database and performed can be reduced for example.

The in memory database is synchronized with the back end database step . This synchronization is done using a differential data set so that the amount of read data is less than the amount in the case where the synchronization is done using all data sets.

Further the processing shown in can be combined with a pass through retrieval method to reduce the load placed on the back end database more effectively. In such a combined method if the load of processing for acquiring the retrieval response from the back end database is expected to be smaller than that of processing for acquiring the differential data from the back end database the issued retrieval request is passed through. This pass through can reduce the load placed on the back end database compared with that using the method shown in .

In step the computer system determines whether the issued retrieval request is a retrieval request that requires currency. In this determination the computer system determines whether a declaration included in the issued retrieval request is listed in the first list in which declarations of retrieval requests that require currency are listed. If the declaration included in the issued retrieval request is included in the list the processing proceeds to step . On the other hand if it is not included the processing proceeds to step .

In step the computer system determines whether the issued retrieval request should be passed through to the back end database. Here the user prepares beforehand a list hereinafter referred to as third list in which declarations of retrieval requests as pass through targets or declarations of retrieval requests with flags indicative of the presence or absence of pass through are listed for example. The third list may be in common with the first list. From the third list the computer system determines whether the issued retrieval request should be passed through. If it is determined to be passed through the processing proceeds to step . On the other hand if it is determined not to be passed through the processing proceeds to step .

Whether it should be passed through or not may be determined from statistical data. The computer system determines whether to pass through each retrieval request at random for example. The computer system records in a log or the like the response time per request when passed through and the response time per request when not passed through. When a certain number of response times for respective retrieval requests e.g. 20 records are accumulated the computer system calculates an average value of the response times for the respective retrieval requests in both cases when passed through and when not passed through respectively. Here suppose that the average value in the case when passed through is shorter. In this case when any of the retrieval requests for which the average value of the response times was calculated has further been issued the computer system determines that it should always be passed through without making the random determination. Conversely suppose that the average value in the case when passed through is longer. In this case when any of the retrieval requests for which the average value of the response times was calculated has further been issued the computer system determines that it should not always be passed through without making the random determination.

In step the computer system passes through the issued retrieval request. As a result of this pass through the computer system performs the issued retrieval request on the back end database. After that the computer system returns a retrieval response as the result to the retrieval request issuing side. After the retrieval response is returned the processing proceeds to step .

Here the computer system does not need to apply to the in memory database the retrieval response acquired by the pass through retrieval. The retrieval response can be held by an existing technique called a result cache. The result cache is a cache in which the results of requests issued to the database are held.

In step the computer system determines whether the time past application time at which the data set as the retrieval target of the issued retrieval request was applied in the past is within the currency threshold value. The past application time means the time of recording the data set in a log or the like in step to be described later when the issued current retrieval request was issued in the past. The computer system calculates a difference between the issue time of the retrieval request and the past application time. If the calculated difference is within a threshold value corresponding to the declaration of the issued retrieval request listed in the first list the processing proceeds to step . On the other hand if the difference is beyond the threshold value the processing proceeds to step .

In step the computer system generates a difference retrieval request. The difference retrieval request is a request for retrieving from the back end database differential data between a data set applied to the in memory database and a data set at the issue time of the retrieval request. For example the difference retrieval request is to retrieve a table column or record to which the retrieval target of the issued retrieval request belongs but is not limited thereto. Further the table column or record may be one or more. If a command for performing replication is prepared beforehand in a database used the command may be used as the difference retrieval request. Further for example the difference retrieval request may be a request for retrieving a table item or record associated with the retrieval target of the issued retrieval request. The user creates beforehand a correspondence table showing a relationship between the issued retrieval request and a table column or record for example. From the correspondence table the computer system can acquire the table column or record associated with the retrieval target to generate the difference retrieval request. After completion of the generation the processing proceeds to step .

In step the computer system transmits the generated difference retrieval request to the back end database. The computer system performs on the back end database the difference retrieval request transmitted. Then the computer system transmits the result to the in memory database. After the transmission the processing proceeds to step .

In step the computer system applies the transmitted result to the in memory database. After completion of the application the processing proceeds to step .

In step the computer system records the time of application in a log a memory within a process of the in memory database or the in memory database itself for example. After completion of the recording the processing proceeds to step .

In step the computer system performs the retrieval request issued to the in memory database. As a result a retrieval response is returned to the retrieval request issuing side. After that the processing proceeds to step .

When the processing steps shown in and are execute the response time for the retrieval request that requires currency can become long. When the retrieval request that requires currency is issued the computer system first completes the synchronization processing between the in memory database and the back end database except for the case where the retrieval request is passed through. The retrieval processing is performed on the in memory database after completion of the synchronization processing. Thus compared with the case where the synchronization processing is not performed the response time can become long. In order to improve the problem that the response time becomes long an anticipated synchronization method may be executed in addition to the processing shown in or . In the anticipated synchronization method the time at which synchronization processing for a data set as a target of a retrieval request future retrieval request expected to be issued in the near future in response to issuing a retrieval request current retrieval request is performed is determined and the synchronization processing is performed at the determined time. Thus the anticipated synchronization method is a method in which the synchronization processing can be performed before the issue of the future retrieval request. The anticipated synchronization method can increase the possibility that a retrieval response to a retrieval request that requires data currency would have already been read into the in memory database when the retrieval request was issued. Thus the response time for the retrieval request that requires data currency and the response time for the retrieval request that does not require data currency can become almost the same and hence the problem that the response time for the retrieval becomes long can be improved.

In step the computer system determines whether a future retrieval request corresponding to the current retrieval request and requiring currency is present. In this determination the computer system retrieves from the second list a declaration of the future retrieval request corresponding to the current retrieval request. As a result of this retrieval if declarations of one or more future retrieval requests are found the processing proceeds to step . On the other hand if no declaration is found the processing proceeds to step .

In step the computer system calculates a check time for each of the future retrieval requests found respectively. The check time is the time to determine whether a retrieval target of each of the future retrieval requests found should be synchronized. For this calculation a time expected to issue each future retrieval request and a threshold value for the future retrieval request can be used. The user records the expected time and the threshold value associated with the declaration of each of the future retrieval requests in the second list beforehand in the second list or in a new fourth list. The computer system acquires from the second list or the fourth list the expected time and threshold value corresponding to each of the future retrieval requests found. The threshold value may be acquired from the first list. It is preferred that the check time be within the threshold value. Thus for example the calculation is made as Expected Time Threshold Value n 0

In step the computer system records combinations of future retrieval requests and check times in a list hereinafter referred to as fifth list in chronological order for example. After completion of the recording the processing proceeds to step .

In such an implementation that each processing shown in or is not performed the computer system performs the current retrieval request in step on the in memory database. As a result a retrieval response is returned to the current retrieval request issuing side. After that the processing proceeds to step .

At step processing performed periodically or at a time specified by the user or at specified time intervals is started.

In step the computer system acquires a combination of a future retrieval request and a check time from the fifth list to determine the check time. In this determination it is determined whether the check time is earlier than or the same as the current time. Steps to that follow are executed on the future retrieval request combined with the check time determined to be earlier than or the same as the current time.

Loop processing for each future retrieval request combined with the time determined to be earlier than or the same as the current time starts at step .

In step the computer system determines whether the time past application time at which a data set as the retrieval target of each of the future retrieval requests in the combinations acquired was applied to the in memory database in the past is within the currency threshold value. The past application time means the time of recording the data set as the retrieval target of the future retrieval request in a log or the like in step to be described later when the data set was applied in the past to the in memory database. The computer system calculates a difference between the current time and the past application time. If the calculated difference is within the threshold value corresponding to the declaration of the future retrieval request listed in the first second or fourth list the processing proceeds to step . On the other hand if the difference is beyond the threshold value the processing proceeds to step .

In step the computer system generates a difference retrieval request. The difference retrieval request is a request for retrieving from the back end database differential data between a data set applied to the in memory database and a data set at the current time. For example the difference retrieval request is to retrieve a table column or record to which the retrieval target of the future retrieval request belongs but is not limited thereto. Further the table column or record may be one or more. If a command for performing replication is prepared beforehand in a database used the command may be used as the difference retrieval request. Further for example the difference retrieval request may be a request for retrieving a table column or record associated with the retrieval target of the issued retrieval request. The user creates beforehand a correspondence table showing a relationship between the issued retrieval request and a table column or record for example. From the correspondence table the computer system can acquire the table column or record associated with the retrieval target to generate the difference retrieval request. After completion of the generation the processing proceeds to step .

In step the computer system transmits the generated difference retrieval request to the back end database. The computer system performs on the back end database the difference retrieval request transmitted. Then the computer system transmits the result to the in memory database. After the transmission the processing proceeds to step .

In step the computer system applies the transmitted result to the in memory database. After completion of the application the processing proceeds to step .

In step the computer system records the time of application in a log a memory within a process of the in memory database or the in memory database itself for example. After completion of the recording the processing proceeds to step .

Then the processing performed periodically or at a time specified by the user or at specified time intervals is ended at step .

Each processing step shown in to can be executed in such a manner to be incorporated into a retrieval processing section of the in memory database for example. This implementation in which each processing step is incorporated into the retrieval processing section will be the simplest example to understand the embodiment of the present invention. However a case can also be considered where the incorporation is difficult because the retrieval processing section of the in memory database is already commercialized as a product for example. Therefore the following describes an example of implementing the embodiment of the present invention without directly altering the retrieval processing section of the in memory database already commercialized as a product. In this example Java language is used but the language used for the implementation is not limited to Java language.

The following describes a periodic replication operation with reference to and . In response to updates of data in the back end database the computer system records the update logs in the update log table respectively. The asynchronous replication transmitting section references the update log table at constant time intervals. Then the asynchronous replication transmitting section collectively transmits to the asynchronous replication receiving section multiple update logs found during the reference. Upon receipt of the update logs transmitted the asynchronous replication receiving section performs data updates of the update logs on the in memory database . After completion of the updates the asynchronous replication receiving section notifies the asynchronous replication transmitting section of the completion of replication. The asynchronous replication transmitting section that has received the notification of completion deletes from the update log table the update logs of the data updated on the in memory database . Here when the in memory database and the back end database are synchronized the server mechanism in the embodiment of the present invention records the time of synchronization in a server side synchronization time recording area .

The following describes an operation upon starting the application with reference to and . When the application is started and the JDBC driver is initialized the client mechanism reads the SQL statement definition file and stores in a memory or the like information hereinafter referred to as definition file recorded in the SQL statement definition file . Declarations of SQL statements registered in the SQL statement definition file are registered in java.util.HashSet.

The following describes an operation for issuing a retrieval request from the application . When an SQL statement hereinafter referred to as current SQL statement as a retrieval request is issued from the application to the JDBC proxy driver an SQL statement determining section embedded in the JDBC proxy driver receives the current SQL statement. The SQL statement determining section determines whether a declaration of an SQL statement hereinafter referred to as future SQL statement corresponding to the declaration of the received current SQL statement and to be issued in the near future is registered in the information from the definition file. If registered the SQL statement determining section acquires a threshold value expected issue time and table name as the target of synchronization processing which correspond to the declaration of the future SQL statement stored as the information from the definition file. The SQL statement determining section issues to an anticipated synchronization processing section of the server mechanism an anticipated synchronization request including the acquired threshold value expected issue time and target table. After completion of the issue the SQL statement determining section determines whether the declaration of the current SQL statement issued from the application using prepareStatement method and passed as an argument of the method is registered in the java.util.HashSet as a declaration of a certain SQL statement that requires data currency. If the declaration of the current SQL statement is not registered the SQL statement determining section determines that the retrieval request according to the current SQL statement is a retrieval request that does not require data currency. In response to the determination that it is a retrieval request that does not require data currency the SQL statement determining section calls an in memory database retrieval calling section . The in memory database retrieval calling section searches the in memory database using the current SQL statement. The query result is returned to the application and this retrieval processing is ended.

On the other hand if the declaration of the current SQL statement is registered the SQL statement determining section determines that the retrieval request according to the current SQL statement is a retrieval request that requires data currency. In response to the determination that it is a retrieval request that requires data currency the SQL statement determining section acquires a table name as a target corresponding to the current SQL statement and a threshold value from the definition file. Then the SQL statement determining section specifies the acquired target table name and threshold value and issues a data synchronization request to a back end database synchronization determining section . Upon receipt of the data synchronization request the back end database synchronization determining section determines whether the in memory database and back end database should be synchronized for the retrieval of the current SQL statement. In this determination the time of the last synchronization with the table as the target specified in the data synchronization request is first acquired from the client side synchronization time recording area . Next an elapsed time since the acquired time and the threshold value specified in the data synchronization request are compared. As a result of the comparison if the elapsed time is within the threshold value the back end database synchronization determining section determines that the synchronization is not necessary. In response to the determination that the synchronization is not necessary the back end database synchronization determining section calls an in memory database retrieval calling section . The in memory database retrieving section searches the in memory database using the current SQL statement. This result is returned to the application and the retrieval processing is ended.

On the other hand as a result of the comparison if the elapsed time is larger than the threshold value the back end database synchronization determining section determines that the synchronization should be made. In response to the determination that the synchronization should be made the back end database synchronization determining section calls an in memory database synchronization requesting section . The in memory database synchronization requesting section acquires a table name as a target corresponding to the current SQL statement and a threshold value from information from the definition file. Then the in memory database synchronization requesting section specifies the acquired target table name and threshold value and calls a server side in memory database synchronizing section through communication. The in memory database synchronization requesting section waits for completion of the calling activity.

The in memory database synchronizing section references the update time of the table as the specified target in the server side synchronization time recording area . From the referenced update time and the specified threshold value the in memory database synchronizing section determines whether synchronization is necessary. If an elapsed time since the referenced update time is within the threshold value the in memory database synchronizing section determines that synchronization is not necessary. In response to the determination that the synchronization is not necessary the in memory database synchronizing section specifies the referenced update time and returns the completion of processing to the in memory database synchronization requesting section . Upon receipt of the completion of processing the in memory database synchronization requesting section updates the synchronization time concerning the target table in the client side synchronization time recording area to the specified update time. After completion of the update the in memory database synchronization requesting section calls the in memory database retrieval calling section . The in memory database retrieving section searches the in memory database using the current SQL statement. This result is returned to the application and the retrieval processing is ended

On the other hand if the elapsed time since the update time is larger than the threshold value the in memory database synchronizing section determines that synchronization is necessary. In response to the determination that the synchronization is necessary the in memory database synchronizing section issues a data synchronization request to the asynchronous replication transmitting section in of the back end database. Upon receipt of the data synchronization request the asynchronous replication transmitting section retrieves from the update log table an update log on the target table added after the time of the last replication. If logs are assigned serial numbers this retrieval will be to retrieve a log record having a serial number larger than that of the last retrieved log. Then the asynchronous replication transmitting section transmits the retrieved update log to the asynchronous replication receiving section . The asynchronous replication receiving section that has received the update log updates the in memory database using the update log. After completion of the update the asynchronous replication receiving section updates the synchronization time concerning the target table in the server side synchronization time recording area to the current time. After completion of the update the asynchronous replication receiving section notifies the asynchronous replication transmitting section of the completion of the update of the in memory database. Upon receipt of the notification the asynchronous replication transmitting section passes to the in memory database synchronizing section a response to the data synchronization request. The updated synchronization time is added to the response. The in memory database synchronizing section that has received the response updates the synchronization time concerning the target table in the client side synchronization time recording area to the updated synchronization time. After completion of the update the in memory database synchronization requesting section calls the in memory database retrieval calling section . The in memory database retrieving section searches the search in memory database using the current SQL statement. This result is returned to the application and this retrieval processing is ended.

The following describes the operation of the anticipated synchronization processing section with reference to and . The anticipated synchronization processing section performs the following processing when an anticipated synchronization request has been issued. Namely upon receipt of the anticipated synchronization request issued by the SQL statement determining section the anticipated synchronization processing section calculates a check time for the anticipated processing request. The check time can be calculated from the threshold value and expected time included in the anticipated processing request. Although various methods of calculating the check time can be considered the check time is calculated as Expected Time Threshold 2 in this example. After the check time is calculated the anticipated synchronization processing section accumulates in an anticipated synchronization request recording area combinations of check times threshold values included in respective anticipated processing requests expected times and target table names in order of check time.

Further the anticipated synchronization processing section performs the following processing periodically.

Namely the anticipated synchronization processing section acquires the combinations accumulated in the anticipated synchronization request recording area . In other words the combinations acquired are all combinations each of which has a check time earlier than the current time and which starts from a combination stored in the top of the anticipated synchronization request recording area . The combinations acquired here are deleted from the anticipated synchronization request recording area . The anticipated synchronization processing section acquires from the server side synchronization time recording area the time of the last synchronization concerning the target table included in each of the acquired combinations. Next from the acquired time of the last synchronization the expected time included in the combination and the threshold value included in the combination the anticipated synchronization processing section determines whether to request synchronization processing for each target table. In this determination Expected Time Threshold is calculated. If the calculated value is smaller than the time of the last synchronization it is determined that synchronization processing for the corresponding table is unnecessary. If the calculated value is larger than the time of the last synchronization and does not exceed the current time it is determined that synchronization processing for the corresponding table is necessary. If the calculated value exceeds the current time it is determined that synchronization processing for the corresponding table is unnecessary. The anticipated synchronization processing section issues to the in memory database synchronizing section a request for synchronization processing on each corresponding table for which it is determined that synchronization processing is necessary.

Referring next to and the following describes how to perform replication when a request for synchronization processing is issued from the anticipated synchronization processing section .

Upon receipt of the request for synchronous processing the in memory database synchronizing section issues a data synchronization request to the asynchronous replication transmitting section of the back end database. Upon receipt of the data synchronization request the asynchronous replication transmitting section retrieves from the update log table an update log concerning the target table added after the time of the last replication. If logs are assigned serial numbers for example this retrieval will be to retrieve a log record having a serial number larger than that of the last retrieved log. Then the asynchronous replication transmitting section transmits the retrieved update log to the asynchronous replication receiving section . The asynchronous replication receiving section that has received the update log updates the in memory database using the update log. After completion of the update the asynchronous replication receiving section updates the synchronization time concerning the target table in the server side synchronization time recording area to the current time. After completion of the update the asynchronous replication receiving section notifies the asynchronous replication transmitting section of the completion of the update of the in memory database. Upon receipt of the notification the asynchronous replication transmitting section passes to the in memory database synchronizing section a response to the data synchronization request. The updated synchronization time is added to the response. The in memory database synchronizing section that has received the response updates the synchronization time concerning the target table in the client side synchronization time recording area to the updated synchronization time.

Referring to to the operation of each step shown in to will be described below using specific examples.

a1. The retrieval request that requires currency is a retrieval request for retrieving a column with column item A1 which has a threshold value of one hour and is not a pass through target.

a2. The retrieval request that requires currency is a retrieval request for retrieving a column with column item A3 which has a threshold value of 30 minutes and is a pass through target.

a3. The retrieval request that requires currency is a retrieval request for retrieving table b which has a threshold value of 6 minutes and is not a pass through target.

List is a list in which a retrieval request another retrieval request expected to be issued after the retrieval request and an expected issue time of the expected retrieval request are specified. The list corresponds to the second and fourth lists. In the list the following information a4 is listed 

a4. The retrieval request is a retrieval request for retrieving a column with column item A4 the expected retrieval request is a retrieval request for retrieving table b and the expected issue time is in 10 minutes. 

When the current time reaches the check time 16 07 the computer system compares the time 15 30 of the last replication to the table b with the expected issue time 16 10 16 00 10 minutes as the expected issue time of the fifth retrieval request in connection with data related to the fifth retrieval request. The elapsed time since the last replication is 16 10 15 30 40 minutes and this exceeds the threshold value 6 minutes. Therefore the computer system determines that data related to the fifth retrieval request needs synchronization. In response to this determination the computer system creates a difference retrieval request for extracting differential data between data related to the fifth retrieval request from the back end database . The difference retrieval request is the retrieval request for retrieving table B for example. In response to the creation of the difference retrieval request the computer system performs the difference retrieval request on the back end database . As a result for example the computer system extracts data on columns other than that with column item B2 and applies them to the in memory database . Further the computer system records the time of application i.e. 16 07 in a log or the like . In response to the recording the computer system deletes the check time from the list 

When the fifth retrieval request was actually issued at the expected issue time 16 10 of the fifth retrieval request the computer system acquires the above information a3 from the list in . Since the fifth retrieval request corresponds to the retrieval request for retrieving table b described in the above a3 information the computer system determines that the fifth retrieval request is a retrieval request that requires currency.

In response to the determination the computer system compares the time of the last replication to the table b i.e. the time of application 16 07 with the current time 16 10 in connection with data related to the fifth retrieval request. The elapsed time since the application is 16 10 16 7 3 minutes and this does not exceed the threshold value 6 minutes. Therefore the computer system determines that data related to the fifth retrieval request does not need synchronization. In response to this determination that synchronization is unnecessary the computer system performs the fifth retrieval request on the in memory database . As a result the computer system returns 1975 1982 1989 true1 true2 and false1 as values of table b to the source of the request . After that the computer system ends the processing.

In response to issuing the retrieval request to the second database the currency determination section determines whether the retrieval request hereinafter referred to as current retrieval request or a retrieval request hereinafter referred to as future retrieval request likely to be issued after the current retrieval request or both require data currency respectively. The currency determination section acquires the definition list from the storage section to make the determination. If a declaration of the current retrieval request is defined in the definition list the currency determination section determines that the current retrieval request is a retrieval request that requires data currency. Further If a declaration of the future retrieval request is defined in the definition list the currency determination section determines that the future retrieval request is a retrieval request that requires data currency.

The synchronization determination section determines whether each retrieval request determined to require currency needs data synchronization. If the retrieval request determined to require currency is the current retrieval request the synchronization determination section makes the determination using threshold values for respective retrieval requests listed in the definition list acquired and the issue time of the current retrieval request. If the retrieval request determined to require currency is a future retrieval request the synchronization determination section makes the determination using a threshold value for the retrieval requests listed in the definition list acquired and the expected issue time of the retrieval request listed in the definition list acquired.

The retrieval response extracting section extracts from the first database data on the retrieval request determined that data synchronization is necessary. The retrieval response extracting section extracts from the first database differential data between a first data set in the first database and a second data set as the target of the retrieval request in the second database . When the differential data is extracted the recording section stores the time of extraction in the storage section. The retrieval response updating section applies to the second database the differential data extracted from the first database and updates the second data set. The second database returns to the user a response of the retrieval request when the second data set o is updated when it is not determined that data currency is required or when it is not determined that data synchronization is necessary.

The calculation section calculates the time to begin to determine whether the future retrieval request requires data currency in response to issuing the current retrieval request. The calculation section acquires the definition list from the storage section to make the calculation. If a declaration of a future retrieval request corresponding to the current retrieval request is defined in the definition list the calculation section calculates the time to begin the determination on the future retrieval request using a threshold value for the retrieval request and the expected issue time listed in the definition list acquired. The accumulation section accumulates the calculated time in storage section . The periodic extraction section acquires the definition list and the calculated time from the storage section . The periodic extraction section extracts the differential data from the first database at a given time or at given time intervals defined in the definition list. Here the differential data extracted is data on the future retrieval request after the lapse of the calculated time. The periodic extraction section deletes from the storage section the time of calculation of the differential data extracted for the future retrieval request. When the differential data has been extracted the recording section stores the time of extraction in the storage section . The periodic update section applies the extracted differential data to the second database to update the second data set.

On the hard disk or silicon disk an operating system a program providing Java processing environment such as J2EE other programs and data are stored in such a manner to be loadable to the main memory .

The CD ROM DVD or BD drive is used to additionally introduce a program from the CD ROM. DVD ROM or BD to the hard disk or silicon disk as needed. Further a keyboard and a mouse are connected to the bus through a keyboard mouse controller .

A communication interface conforms to the Ethernet protocol for example and is connected to the bus through a communication controller . The communication interface takes a role in physically connecting the computer system and the communication line and provide a network interface layer to the TCP IP communication protocol of the communication function of the operating system of the computer system. The communication line may be in a wired LAN environment or a wireless LAN environment based on wireless LAN connection standards such as IEEE802. Ii a b g n for example.

