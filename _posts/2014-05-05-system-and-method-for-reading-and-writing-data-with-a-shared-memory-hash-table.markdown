---

title: System and method for reading and writing data with a shared memory hash table
abstract: A method and apparatus of a device that reads and writes data using a shared memory hash table and a lookaside buffer is described. In an exemplary embodiment, a device locates a bucket for the data in a shared memory hash table, where a writer updates the shared memory hash table and a reader that is one of a plurality of readers reads from the shared memory hash table. The device further retrieves an initial value of a version of the bucket. If the initial value of the version is odd, the device copies the data from a lookaside buffer of the writer to a local buffer for the reader, wherein the lookaside buffer stores a copy of the data while the bucket is being modified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495114&OS=09495114&RS=09495114
owner: Arista Networks, Inc.
number: 09495114
owner_city: Santa Clara
owner_country: US
publication_date: 20140505
---
Applicant claims the benefit of priority of prior provisional application Ser. No. 61 822 260 filed May 10 2013 the entirety of which is incorporated by reference.

This invention relates generally to data networking and more particularly to sharing a hash table in shared memory between a writer that writes data to the shared memory hash table and multiple readers that read the data from the shared memory hash table.

A network element can include two different planes that are used to process network traffic a control plane and a data plane. The data plane receives processes and forwards network traffic using various configuration data e.g. forwarding security quality of service QoS and other network traffic processing information . For example for each received packet of the network traffic the data plane determines a destination address of that packet looks up the requisite information for that destination in one or more tables stored in the data plane and forwards the packet out the proper outgoing interface. The control plane gathers the configuration data from different sources e.g. locally stored configuration data via a command line interface or other management channel such as Simple Network Management Protocol SNMP and configures the data plane using the configuration data .

In addition the control plane will store the configuration data in one or more tables. For example the network element will store the routing information in a routing table that is used by the data plane. The data plane can further include multiple different hardware forwarding engines. Each of these hardware forwarding engines will use the configuration data from these tables by reading the tables in the control plane and updating local copies of the tables for each of the hardware forwarding engines. The control plane includes a writer that writes the configuration data where multiple readers for the hardware forwarding engines read the data. A problem that can arise is that one of the multiple readers attempts to read data from one of the tables that the writer is currently updating. For example if a reader reads data that is concurrently being modified by the writer the reader may read data that is partially updated and thus is not valid data that is usable by the reader.

A method and apparatus of a device that reads and writes data using a shared memory hash table and a lookaside buffer is described. In an exemplary embodiment a device locates a bucket that stores bucket data in a shared memory hash table where a writer updates the shared memory hash table and a reader that is one of a plurality of readers reads from the shared memory hash table. The device further retrieves an initial value of a version of the bucket. If the initial value of the version is odd the device copies the bucket data from a lookaside buffer of the writer to a local buffer for the reader wherein the lookaside buffer stores a copy of the bucket data while the bucket is being modified.

In another embodiment the device writes data using a writer of the device by locating a bucket that stores bucket data in a shared memory hash table. The device includes a writer that updates the shared memory hash table and a plurality of readers that read from the shared memory hash table. The device further copies the bucket data to a lookaside buffer where the bucket data stored in the lookaside buffer can be read by the plurality of readers while the bucket data in the bucket is being modified. In addition the device increments a version of the bucket in the bucket chain where the incremented version indicates that the bucket is being modified. The device modifies the bucket data in place and subsequently increments the incremented version of the bucket to indicate the bucket data is not being modified.

A method and apparatus of a device that reads and writes data using a shared memory hash table and a lookaside buffer is described. In the following description numerous specific details are set forth to provide thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known components structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

In the following description and claims the terms coupled and connected along with their derivatives may be used. It should be understood that these terms are not intended as synonyms for each other. Coupled is used to indicate that two or more elements which may or may not be in direct physical or electrical contact with each other co operate or interact with each other. Connected is used to indicate the establishment of communication between two or more elements that are coupled with each other.

The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software such as is run on a general purpose computer system or a dedicated machine or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in different order. Moreover some operations may be performed in parallel rather than sequentially.

The terms server client and device are intended to refer generally to data processing systems rather than specifically to a particular form factor for the server client and or device.

A method and apparatus of a device that reads and writes data using a shared memory hash table and a lookaside buffer is described. In one embodiment a device includes a writer that writes data to the shared memory hash table and multiple readers that read this data from the shared memory hash table. The shared memory hash table stores data in key value pairs in buckets that are indexed using the key and a hash function. The writer locates the corresponding bucket in the shared memory hash table using the key. In order to protect against a concurrent read by one of the readers of the data that is being modified by the writer the writer copies the bucket to a lookaside buffer. The data stored in the bucket is now available via the lookaside buffer to one or more of the readers while the writer modifies data stored in the bucket. To indicate that the data is being modified by the writer the writer increments a version of the bucket. In one embodiment an odd valued version indicates to a reader that the bucket data is being modified whereas an even valued version indicates to the reader that the bucket data is not being modified. In response to the incrementing of the version the writer modifies the data of the bucket in place without using locks to lock the data or allocating releasing memory associated with the bucket. The writer further increments the version of the bucket to indicate that the bucket data is not being modified.

In a further embodiment the reader uses a key to locate a bucket that stores the data to be read in the shared memory hash table. The reader additionally reads a version of the bucket to determine if the data in the bucket is in the process of being modified. If the version indicates that the data is not being modified the reader reads the data from the located bucket. If the version indicates that the data is being modified the reader reads the data from the bucket copy stored in the lookaside buffer. The reader further reads the version of the bucket from the located bucket to determine if the bucket version has changed. If the bucket version has changed the reader discards the data and starts the read process again. If the bucket version has not changed the reader uses the retrieved data.

In one embodiment the control plane gathers the configuration data from different sources e.g. locally stored configuration data via a command line interface or other management channel e.g. SNMP Simple Object Access Protocol SOAP Representational State Transfer type Application Programming Interface RESTful API Hypertext Transfer Protocol HTTP HTTP over Secure Sockets layer HTTPs Network Configuration Protocol NetConf Secure Shell SSH and or another management protocol and writes this configuration data to one or more tables . In one embodiment the control plane includes a writer that writes configuration data to the table s by performing lock free writes such that a reader reading the data can read data that is not in the middle of being modified. Performing a lock free write of a table is further described in below.

In one embodiment each of the one or more tables is a hash table that is shared between the writer and the readers A C. In this embodiment the table s are stored in memory that is shared between the data plane and the control plane . is a block diagram of one embodiment of a shared memory hash table that is updated by one writer and read by multiple readers A N. In one embodiment the writer writes data to the shared memory hash table using a lock free write with a lookaside buffer where each of the data is a key value pair. The shared memory hash table is a data structure used to implement an associative array of entries which is a structure that can map the data keys to the data values. A hash table uses a hash function to compute an index into an array of entries from which the correct value can be stored or retrieved. The shared memory hash table is further described in . In one embodiment the writer includes a writer hash module that performs the lock free writes of data to the shared memory hash table using the lookaside buffer. In one embodiment each reader A N includes a reader hash module A N that reads the data from the shared memory hash table using a lookaside buffer. Reading and writing data using the lookaside buffer is further described in below. As will be apparent to one skilled in the art the methods and processes described here may be applied to other data structures besides a shared memory hash table such as a linked list tree trie skip list or b tree. In another embodiment portions of the present invention may be applicable to other types of data structures that are modified by a writer while simultaneously allowing one or more readers to continue to use the data structure without being affected by the in progress modifications. For example and in one embodiment the shared memory hash table is not a hash table but another type of data structure e.g. linked list tree trie skip list b tree or another type of data structure used to store data in memory .

Because the shared memory hash table can be concurrently modified by a writer while being read by one or more readers a mechanism is needed to make sure that a reader reads data that is not in the middle of being modified. If a reader reads data that is concurrently being modified by the writer the reader may read data that is partially updated and thus is not valid data that is usable by the reader. One way to do this is for the writer to lock the bucket while the writer modified the data stored in that bucket. A lock on a bucket prevents a reader from reading data in that bucket. However locking the bucket has downsides. For example if the writer has obtained a lock on a bucket and the process for the writer is switched out so that the processor is not executing the writer process the bucket is inaccessible to any and all readers while the lock remains on the bucket. Another mechanism to make sure that a reader reads data that is not in the middle of being modified is to create a new bucket when the writer writes the key value pair. In this mechanism the writer creates a new bucket for each write and swaps the new bucket into the bucket chain for the old bucket and then frees the memory for the old bucket. A problem with a swap mechanism is that is that the reader can read the data in the old bucket while the new bucket is being created and populated with the updated data. Thus using the swap mechanism a reader cannot be sure if the data being read is an up to date version.

Instead of using a lock based or swap based mechanism in one embodiment the shared memory hash table includes a lookaside buffer that is used to temporarily store the contents of a bucket while the writer modifies the bucket data. is a block diagram of one embodiment of a shared memory hash table that includes a chain of buckets A C and a lookaside buffer . Similar to the shared memory hash table illustrated in in the shared memory hash table includes multiple hash table entries . For each key value pair a hash function is used to compute an index into the shared memory hash table for that key. The index is an identifier as to which hash table entry corresponds to the key. In one embodiment each hash table entry includes a pointer to a chain of buckets A C where each bucket A C includes the stored key value pair. In addition the hash table entry includes a pointer A to the initial bucket A in the chain of buckets A C. Each bucket A C includes the corresponding key value pair and a version A C. In one embodiment the data for each bucket A C is the key value pair and the contents of the bucket A C are the version key value pair and pointer to the next element in the bucket chain. Bucket A and B further include pointers B and C respectively the point to the next element in the bucket chain A C. For example and in one embodiment bucket A includes a pointer B to bucket B and bucket B includes a pointer C to bucket C.

In one embodiment the hash table entry further includes a version. In addition each bucket A C includes a version A C that is used to track whether the data of that bucket are being updated. In one embodiment before a writer modifies the data in the bucket A C the writer increments the version of that bucket. In this embodiment the incremented version indicates to one of the readers that the data in the bucket is being modified. After the writer completes the modification of the bucket data the writer additionally increments the version to indicate that the bucket data is no longer being modified. For example and in one embodiment an even version value indicates the bucket data is not being modified and an odd version value indicates that the bucket data is being modified.

In addition and in another embodiment the hash table further includes a lookaside buffer that is used to store the contents of a bucket while the bucket is being modified. In this embodiment a writer copies the contents of a bucket before the writer starts to modify that bucket and before incrementing the version to indicate that the bucket is being modified. A reader can access this copy of the bucket contents including the key value pair stored in the bucket while that bucket is being modified. In one embodiment the lookaside buffer includes a copy of the bucket in which the bucket copy includes a copy of the bucket data and a pointer to the next element in the bucket chain. Writing and reading bucket data using the lookaside buffer is further described in below.

As described above a writer uses the lookaside buffer to temporarily store the bucket contents. is a flow diagram of one embodiment of a process to write data to a shared memory hash table using a lookaside buffer without using locks on the data being modified. In one embodiment a writer hash module performs process to write data to a shared memory hash table such as the writer hash module as described in above. In process begins by receiving the write data at block . In one embodiment the write data is a key value pair where the key identifies the data that is to be stored and the value is a value associated with the key. For example and in one embodiment if there is a route to the network NET1 with the network address of 192.168.1.1 24 the write data has a key value pair of NET1 192.168.1.1 24 .

At block process locates the bucket for this key value pair in the shared memory hash table. In one embodiment process locates the bucket by computing a hash using the hash function for the shared memory hash table and the key. In this embodiment process uses the resulting hash as an index into the shared memory hash table to locate the corresponding entry for that index. From this entry process locates the bucket that stores the key by walking the chain of buckets linked to this entry. For example and in one embodiment if the key is stored in bucket A of hash table as illustrated in above process would compute the hash using the key and the hash function where the hash would index to the hash table entry . Process walks the chain of buckets to find the matching key stored in bucket A.

Process copies the bucket contents to the lookaside buffer at block . In one embodiment process copies the entire data in the bucket e.g. version key value pointer to the lookaside buffer. In an alternate embodiment process copies less than the entire data in the bucket e.g. value and pointer . In one embodiment the lookaside buffer is used to hold a copy of the bucket contents while the bucket is being modified. Process increments the version of the bucket at block . In one embodiment process increments the version from an even value to an odd value. In this embodiment an odd valued version indicates to a reader that the bucket data is being modified whereas an even valued version indicates to the reader that the bucket data is not being modified.

At block process modifies the bucket value in place. In one embodiment process modifies the bucket value in place by directly storing the value of the key value pair in the field of the bucket that holds the value without allocating or releasing the bucket. In addition by storing a copy of the bucket in the lookaside buffer that is accessible to one or more of the readers and incrementing the version for the bucket process modifies the bucket value without using locks to lock the data that is being modified. Process increments the bucket version at block . In one embodiment process increments the bucket version from an odd value to an even value. As described above an even valued version indicates to the reader that the bucket data is not being modified. Process ends at block .

At block process locates the bucket for this key in the shared memory hash table. In one embodiment process locates the bucket by computing a hash using the hash function for the shared memory hash table and the key. In this embodiment process uses the resulting hash as an index into the shared memory hash table to locate the corresponding entry for the index. From this entry process locates the bucket that stores the key by walking the chain of buckets linked to this entry. For example and in one embodiment if the key is stored in bucket A of hash table as illustrated in above process would compute the hash using the key and the hash function where the hash would index to the hash table entry . Process walks the chain of buckets to find the matching key stored in bucket A.

Process reads the version of the bucket data from the located bucket at block . In one embodiment the version indicates to process whether the data in the bucket is being modified or not. At block process determines if the version value is odd at block . In one embodiment an odd valued version indicates to a reader that the bucket data is being modified whereas an even valued version indicates to the reader that the bucket data is not being modified. If the version is odd process reads the bucket value from the lookaside buffer at block . In one embodiment the bucket value is the value of the key value pair that is stored in that bucket. For example and in one embodiment process reads the bucket value from the lookaside buffer as described in above. Execution proceeds to block below. If the version value is not odd e.g. even the bucket data is not being modified and process reads the value from the bucket at block . For example and in one embodiment process reads the value from the bucket A as described in above.

At block process reads the version of the bucket again. In one embodiment the subsequent reading of the bucket version is performed after process reads the bucket data from either the bucket or the lookaside buffer. By reading the bucket version a second time process can determine if the bucket value is valid by determining if the version changed. In one embodiment if the bucket version changes the bucket value may not be an up to date or an otherwise valid value. In this case process starts again and re reads the value. Process determines if the bucket version has changed from the initial and subsequent readings at block . If the bucket version has changed process discards the value read in at block or and starts again at block and execution proceeds to block above. If the version has not changed the value read in at block or is a valid value and process uses the bucket value at block .

In these processes used a lookaside buffer for a writer to store a copy of the bucket being modified. In another embodiment multiple writers can be updating the shared memory hash table where each writer includes a corresponding lookaside buffer. In this embodiment each bucket being modified would include a reference to the lookaside buffer that stores the copy of the bucket e.g. an index for the lookaside buffer a pointer or some other reference . If the version of the bucket indicates that the bucket is being modified the reader would read the reference to determine which lookaside buffer is storing the copy of bucket. With the reference the reader can read the bucket value stored in the corresponding bucket value. In another embodiment multiple writers can share the same lookaside buffer by using other synchronization mechanisms to ensure that two writers do not simultaneously choose the same lookaside buffer. For example and in one embodiment a lock per buffer used only by the writers could be used to ensure this. In this embodiment this may be a reasonable choice if simultaneous writes by two different writers are infrequent.

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may retrieve the instructions from the memories and execute the instructions to perform operations described above. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. In one embodiment the system includes a plurality of network interfaces of the same or different type e.g. Ethernet copper interface Ethernet fiber interfaces wireless and or other types of network interfaces . In this embodiment the system can include a forwarding engine to forward network date received on one interface out another interface.

Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory.

The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or a flash memory or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem an Ethernet interface or a wireless network. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine executable instructions that cause a machine that executes these instructions to perform certain functions. In this context a machine may be a machine that converts intermediate form or abstract instructions into processor specific instructions e.g. an abstract execution environment such as a process virtual machine e.g. a Java Virtual Machine an interpreter a Common Language Runtime a high level language virtual machine etc. and or electronic circuitry disposed on a semiconductor chip e.g. logic circuitry implemented with transistors designed to execute instructions such as a general purpose processor and or a special purpose processor. Processes taught by the discussion above may also be performed by in the alternative to a machine or in combination with a machine electronic circuitry designed to perform the processes or a portion thereof without the execution of program code.

The present invention also relates to an apparatus for performing the operations described herein. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

The preceding detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be kept in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as retrieving locating determining copying reading discarding incrementing modifying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The processes and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize from such discussion the accompanying drawings and the claims that various modifications can be made without departing from the spirit and scope of the invention.

