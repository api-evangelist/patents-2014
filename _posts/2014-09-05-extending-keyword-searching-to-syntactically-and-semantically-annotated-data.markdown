---

title: Extending keyword searching to syntactically and semantically annotated data
abstract: Methods and systems for extending keyword searching techniques to syntactically and semantically annotated data are provided. Example embodiments provide a Syntactic Query Engine (“SQE”) that parses, indexes, and stores a data set as an enhanced document index with document terms as well as information pertaining to the grammatical roles of the terms and ontological and other semantic information. In one embodiment, the enhanced document index is a form of term-clause index, that indexes terms and syntactic and semantic annotations at the clause level. The enhanced document index permits the use of a traditional keyword search engine to process relationship queries as well as to process standard document level keyword searches. This abstract is provided to comply with rules requiring an abstract, and it is submitted with the intention that it will not be used to interpret or limit the scope or meaning of the claims.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378285&OS=09378285&RS=09378285
owner: VCVC III LLC
number: 09378285
owner_city: Seattle
owner_country: US
publication_date: 20140905
---
This application is a continuation of U.S. application Ser. No. 11 601 612 filed Nov. 16 2006 entitled EXTENDING KEYWORD SEARCHING TO SYNTACTICALLY AND SEMANTICALLY ANNOTATED DATA which claims the benefit of U.S. Provisional Application No. 60 737 446 filed Nov. 16 2005 entitled METHOD AND SYSTEM FOR EXTENDING KEYWORD SEARCHING TO SYNTACTICALLY AND SEMANTICALLY ANNOTATED DATA both of which are incorporated herein by reference in their entireties.

This invention was made with government support under Contract No. DAAH01 00 C R168 awarded by Defense Advanced Research Project Agency Contract Nos. W74Z8H 04 P 0104 and W74V8H 05 C 0016 awarded by the Office of the Secretary of Defense U.S. Army and Contract No. FA8650 05 C 6500 awarded by the Office of the Secretary of Defense U.S. Air Force. The government has or may have certain rights in this invention.

The present invention relates to methods systems and techniques for searching for information in a data set and in particular to enhanced methods systems and techniques for syntactically indexing and performing syntactic searching of data sets using relationship queries to achieve greater search result accuracy.

Often times it is desirable to search large sets of data such as collections of millions of documents only some of which may pertain to the information being sought. In such instances it is difficult to either identify a subset of data to search or to search all data yet return only meaningful results. The techniques that have been traditionally applied to support searching large sets of data have fallen short of expectations because they have not been able to achieve a high degree of accuracy of search results due to inherent limitations.

One common technique implemented by traditional keyword search engines matches words expected to found in a set of documents through pattern matching techniques. Thus the more that is known in advance about the documents including their content format layout etc. the better the search terms that can be provided to elicit a more accurate result. Data is searched and results are generated based on matching one or more words or terms that are designated as a query. Results such as documents are returned when they contain a word or term that matches all or a portion of one or more keywords that were submitted to the search engine as the query. Some keyword search engines additionally support the use of modifiers operators or a control language that specifies how the keywords should be combined when performing a search. For example a query might specify a date filter to be used to filter the returned results. In many traditional keyword search engines the results are returned ordered based on the number of matches found within the data. For example a keyword search against Internet websites typically returns a list of sites that contain one or more of the submitted keywords with the sites with the most matches appearing at the top of the list. Accuracy of search results in these systems is thus presumed to be associated with frequency of occurrence.

One drawback to traditional keyword search engines is that they do not return data that fails to match the submitted keywords even though the data may be relevant. For example if a user is searching for information on what products a particular country imports data that refers to the country as a customer instead of using the term import would be missed if the submitted query specifies import as one of the keywords but doesn t specify the term customer. For example a sentence such as Argentina has been the main customer for Bolivia s natural gas would be missed because no forms of the word import are present in the sentence. Ideally a user would be able to submit a query and receive back a set of results that were accurate based on the meaning of the query not just on the specific keywords used in submitting in the query.

Natural language parsing provides technology that attempts to understand and identify the syntactical structure of a language. Natural language parsers NLPs have been used to identify the parts of speech of each term in a submitted sentence to support the use of sentences as natural language queries against data. However systems that have used NLPs to parse and process queries against data even when the data is highly structured suffer from severe performance problems and extensive storage requirements.

Natural language parsing techniques have also been applied to extracting and indexing information from large corpora of documents. By their nature such systems are incredibly inefficient in that they require excessive storage and intensive computer processing power. The ultimate challenge with such systems has been to find solutions to reduce these inefficiencies in order to create viable consumer products. Several systems have taken an approach to reducing inefficiencies by subsetting the amount of information that is extracted and subsequently retained as structured data that is only extracting a portion of the available information . For example NLPs have been used with Information Extraction engines that extract particular information from documents that follow predetermined grammar rules or when a predefined term or rule is recognized hoping to capture and provide a structured view of potentially relevant information for the kind of searches that are expected on that particular corpus. Such systems typically identify text sentences in a document that follow a particular part of speech pattern or other patterns inherent in the document domain such as trigger terms that are expected to appear when particular types of events are present. The trigger terms serve as triggers for detecting such events. Other systems may use other formulations for specified patterns to be recognized in the data set such as predefined sets of events or other types of descriptions of events or relationships based upon predefined rules templates etc. that identify the information to be extracted. However these techniques may fall short of being able to produce meaningful results when the documents do not follow the specified patterns or when the rules or templates are difficult to generate. The probability of a sentence falling into a class of predefined sentence templates or the probability of a phrase occurring literally is sometimes too low to produce the desired level of recall. Failure to account for semantic and syntactic variations across a data set especially heterogeneous data sets has led to inconsistent results in some situations.

It is often desirable to search large sets of unstructured data such as collections of millions of documents only some of which may pertain to the information being sought. Traditional search engines approach such data mining typically by offering interactive searches that match the data to one or more keywords terms using classical pattern matching or string matching techniques. At the other extreme information extraction engines typically approach the unstructured data mining problem by extracting subsets of the data based upon formulations of predefined rules and then converting the extracted data into structured data that can be more easily searched. Typically the extracted structured data is stored in a relational database management system and accessed by database languages and tools. Other techniques such as those offered by Insightful Corporation s INFACT search engine products offer greater accuracy and truer information discovery tools because they employ generalized syntactic indexing with the ability to interactively search for relationships and events in the data including latent relationships across the entire data set and not just upon predetermined extracted data that follows particular syntactic patterns. INFACT search engine product s syntactic indexing and relationship searching uses natural language parsing techniques to grammatically analyze sentences to attempt to understand the meaning of sentences and then applies queries in a manner that takes into account the grammatical information to locate relationships in the data that correspond to the query. Some of these embodiments support a natural language query interface which parses natural language queries in much the same manner as the underlying data in addition to a streamlined relationship and event searching interface that focuses on retrieving information associated with particular grammatical roles. Other interfaces for relationship and event searching can be generated using an application programming interface API . Insightful Corporation s syntactic searching techniques are described in detail in U.S. Provisional Application Nos. 60 312 385 60 620 550 and 60 737 446 and U.S. application Ser. Nos. 10 007 299 10 371 399 and 11 012 089 which are herein incorporated by reference in their entirety.

The syntactic indexing and relationship and event searching techniques describe therein extend the use of traditional keyword search engines to relationship and event searching of data sets. In summary the syntactic and semantic information that is gleaned from an enhanced natural language parsing process is stored in an enhanced document index for example a form of a term clause matrix that is amenable to processing by the more efficient pattern string matching capabilities of keyword search engines. Accordingly traditional keyword search engines including existing or even off the shelf search engines can be utilized to discover information by pattern or string matching the terms of a relationship query which are inherently associated with syntactic and semantic information against the syntactically and semantically annotated terms of sentence clauses of documents stored in the enhanced document index. As another benefit the additional capabilities of such search engines such as the availability of Boolean operations and other filtering tools are automatically extended to relationship and event searching.

Relationship and event searching also described as syntactic searching in U.S. Application Nos. 60 312 385 Ser. Nos. 10 007 299 10 371 399 and 60 620 550 supports the ability to search a corpus of documents or other objects for places people or things as they relate to other places people or things for example through actions or events. Such relationships can be inferred or derived from the corpus based upon one or more roles that each term occupies in a clause sentence paragraph document or corpus. These roles may comprise grammatical roles such as subject object modifier or verb or these roles may comprise other types of syntactic or semantic information such as an entity type of location date organization or person etc. The role of a specified term or phrase e.g. subject object verb place person thing action or event etc. is used as an approximation of the meaning and significance of that term in the context of the sentence or clause . In this way a relationship or syntactic search engine attempts to understand the sentence when a query is applied to the corpus by determining whether the terms in sentences or clauses of the corpus are associated with the roles specified in the pending query. For example if a user of the search engine desires to determine all events in which Hillary Clinton participated in as a speaker then the user might specify a relationship query that instructs a search engine to locate all sentences documents in which Hillary Clinton is a source entity and speak is an action. In response the syntactic search engine will determine and return indicators to all sentences clauses in which Hillary Clinton has the role of a subject and with some form of the word speak e.g. speaking spoke or a similar word in the role of a verb.

For example shows a relationship query and the results returned by an example embodiment of the INFACT 3.1 search engine product. In the INFACT 3.1 search engine product a user of the search engine can specify a search called a Fact Search for a known source or target entity or both looking for actions or events that involve that entity. The user can also specify a second entity and look for actions or events that involve both the first and second entity. The user can specify a particular action or may specify a type of action or any action. An entity specified as a source entity typically refers to the corresponding term s role as a subject or subject related modifier of a clause or sentence whereas an entity specified as a target typically refers to the corresponding term s role as an object or object related modifier of a clause or sentence. An action or event typically refers to a term s role as a verb related verb or verb related modifier. Moreover instead of a specific entity the user can specify an entity type which refers to a tag such as an item in a classification scheme such as a taxonomy. A user can also specify a known action or action type and look for one or more entities or entity types that are related through the specified action or action type. Many other types and combinations of relationship searches are possible and supported as described in the above mentioned co pending patent applications.

In the example user interface shown in a relationship or event query is specified in query field to. The query is entered as terrorist attack London according to Insightful Corporation s Query Language IQL also known as RQL for Relationship Query Language as described in detail elsewhere. The query specifies a value terrorist for a source entity field a value attack for an action field and a value London for a target entity field . The source field and target field indicate whether a specified entity is to be a source of the action or a recipient target of the action. The directional arrows in the query specify whether action directionality for events. The particular query displayed instructs the search engine to look for sentence clauses that discuss terrorist attacks in London when the Search button is pressed. The results are returned in summary information field which is shown sorted by similarity to the query. Each matching relationship is shown as a row in the results field optionally with duplicates combined. A researcher or other user can select one of the action links in the actions column to look at the document in the corpus where the relationship or event was found.

As an alternative to specifying the relationship query using IQL the user can use a graphical form based interface termed here a query generator for example by selecting the Try your own Fact Search link . In response a form such as that illustrated in is presented. is an example screen display of a custom relationship or event query generator for a website. The user can enter a source entity in field a target or recipient of the action in field and an action in field . In addition the user can constrain the results by specifying particular keywords that need to appear. The results of the generated query are displayed similar to that shown in .

More details of the relationship query language and of an example user interface provided by Insightful Corporation s products are described in co pending patent application Ser. No. 11 012 089.

Embodiments described herein provide enhancements to the methods systems and techniques for syntactically indexing and searching data sets to achieve more accurate search results with greater flexibility and efficiency than previously available. Example embodiments provide improvements to an enhanced Syntactic Query Engine SQE that parses indexes and stores a data set as well as performs syntactic searching in response to queries submitted against the data set. In one embodiment the SQE includes among other components a data set repository and an Enhanced Natural Language Parser ENLP . The ENLP parses each object in the data set typically a document and transforms it into a canonical form also termed a normalized form that can be searched efficiently using techniques of the present invention. To perform this transformation the ENLP determines the syntactic structure of the data by parsing or decomposing each data object into syntactic units determines the grammatical roles and relationships of the syntactic units associates recognized entity types if configured to do so and represents these relationships in a normalized form. The normalized data are then stored and or indexed as appropriate for efficient searching. Thus the SQE can provide a unified knowledge representation for both structured and unstructured data.

In example embodiments of the SQE described herein the normalized data including the grammatical role and other tag information that can be used to discover or explore relationships are integrated into enhanced versions of document indexes that are typically used by traditional keyword search engines to index the terms of each document in a corpus. A traditional keyword search engine can then search the enhanced indexing information that is stored in these document indexes for matching relationships in the same manner the search engine searches for keywords. That is the search engine looks for pattern string matches to terms associated with the desired tag information as specified explicitly or implicitly in a query. A detailed description of an example SQE that provides enhanced indexing information according to these techniques is described in U.S. patent application Ser. No. 11 012 089. In one such example system the SQE stores the relationship information that is extracted during the parsing and data object transformation process the normalized data in an annotated term clause matrix which stores the terms of each clause along with tagged terms which include the syntactic and semantic information that embodies relationship information. Other example embodiments may provide different levels of organizing the enhanced indexing information such as an annotated term sentence matrix or an annotated term document matrix. Other variations of storage organization are possible including that each matrix may be comprised of a plurality of other data structures or matrices.

The integration of the enhanced indexing information into traditional keyword search engine type document indexes for example an inverted index is what supports the use of standard keyword search techniques to find a new type of document information that is relationship information easily and quickly. An end user such as a researcher can pose simple Boolean style queries to the SQE yielding results that are based upon an approximation of the meaning of the indexed data objects. Because traditional search engines do not pay attention to the actual contents of the indexed information they just perform string matching or pattern matching operations without regard to the meaning of the content the SQE can store all kinds of relationship information in the indexed information and use a keyword search engine to quickly retrieve it. In addition standard document searches can be combined with more specialized relationship searches to generate many types of results.

The SQE processes each query by translating or transforming the query into component keyword searches that can be performed against the indexed data set using for example an off the shelf or existing keyword search engine. These searches are referred to herein for ease of description as keyword searches keyword style searches or pattern matching or string matching searches to emphasize their ability to match relationship information the same way search terms can be string or pattern matched against a data set using a keyword search engine. The SQE then combines the results from each keyword style search into a cohesive whole that is presented to the user.

Specifically in step the SQE receives a data set for example a set of documents. The documents may be received electronically scanned in or communicated by any reasonable means. In step the SQE preprocesses the data set to ensure a consistent data format. In step the SQE parses the data set identifying entity type tags and the syntax and grammatical roles of terms within the data set as appropriate to the configured parsing level. For the purpose of extending keyword searching to syntactically and semantically annotated data parsing sufficient to determine at least the subject object and verb of each clause is desirable to perform syntactic searches in relationship and event queries. However as described elsewhere in co pending patent applications subsets of the capabilities of the SQE could be provided in trade for shorter corpus ingestion times if full syntactic searching is not desired. In step the SQE transforms the each parsed clause or sentence into normalized data by applying various linguistic normalizations and transformations to map complex linguistic constructs into equivalent structures. Linguistic normalizations include lexical normalizations e.g. synonyms syntactic normalizations e.g. verbalization and semantic normalizations e.g. reducing different sentence styles to a standard form . These heuristics and rules are applied when ingesting documents and influence how well the stored sentences eventually will be understood by the system. In step the SQE stores the parsed and transformed sentences in a data set repository. As described above when the SQE is used with a keyword search engine the normalized data is stored in used to populate an enhanced document index such as the term clause matrix.

After storing the data set the SQE can process relationship queries against the data set. In step the SQE receives a relationship query for example through a user interface such as that shown in . Alternatively one skilled in the art will recognize that the query may be transmitted through a function call batch process or translated from some other type of interface. In step if necessary depending upon the interface the SQE preprocesses the received relation query and transforms it into the relationship query language understood by the system. For example if natural language queries are supported then the natural language query is parsed into syntactic units with grammatical roles and the relevant entity and action terms are transformed into the query language formulations understood by the SQE. In step the SQE executes the received query against the data set stored in the data set repository. The SQE transforms the query internally into sub queries as appropriate to the organization of the data in the indexes and executes a traditional keyword search engine or its own version of keyword style searching to process the query. In step the SQE returns the results of the relationship query for example by displaying them through a user interface such as the summary information shown in .

Although the techniques are described primarily with reference to text based languages and collections of documents similar techniques may be applied to any collection of terms phrases units images or other objects that can be represented in syntactical units and that follow a grammar that defines and assigns roles to the syntactical units even if the data object may not traditionally be thought of in that fashion. Examples include written or spoken languages for example English or French computer programming languages graphical images bitmaps music video data and audio data. Sentences that comprise multiple words are only one example of a phrase or collection of terms that can be analyzed indexed and searched using the techniques described herein. One can modify the structures and program flow exemplified herein to account for differences in types of data being indexed and retrieved. The concepts and techniques described are applicable to any environment where the keyword style searching is contemplated.

Also although certain terms are used primarily herein one skilled in the art will recognize that other terms could be used interchangeably to yield equivalent embodiments and examples. In addition terms may have alternate spellings which may or may not be explicitly mentioned and one skilled in the art will recognize that all such variations of terms are intended to be included. For example the terms matrix and index are used interchangeably and are not meant to imply a particular storage implementation. Also a document may be a single term clause sentence or paragraph or a collection of one or more such objects. Also when referring to various data aspects or elements in the alternative the term or is used in its plain English sense unless otherwise specified to mean one or more of the listed alternatives.

As additional examples the term query is used herein to include any form of specifying a desired relationship query including a specialized syntax for entering query information a menu driven interface a graphical interface a natural language query batch query processing or any other input including API function calls that can be transformed into a Boolean expression of terms and annotated terms. Annotated terms are terms associated with syntactic or semantic tag information and are equivalently referred to as tagged terms. Semantic tags include for example indicators to a particular node or path in an ontology or other classification hierarchy. Entity tags are examples of one type of semantic tag that points for example to a type of ENTITY node in an ontology. In addition although the description is oriented towards parsing and maintaining information at the clause level it is to be understood that the SQE is able to parse and maintain information in larger units such as sentences paragraphs sections chapters documents etc. and the routines and data structures are modified accordingly. Thus for ease of description the techniques are described as they are applied to a term clause matrix. One can equivalently apply these techniques to a term sentence matrix or a term document matrix.

In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps described with reference to any particular routine.

As described in co pending U.S. patent application Ser. No. 11 012 089 published as U.S. Patent Publication No. 2005 0267871 many different interfaces are possible for specifying relationship queries including form based template style interfaces relationship search strings visual GUI drag and drop interfaces a query language called IQL an application programming interface API for creating application access to relationship query information or for creating customized also alternative user interfaces etc. Appendix A incorporated herein by reference in its entirety describes several such interfaces and enhancements made to the SQE example embodiments that were previously described in U.S. patent application Ser. No. 11 012 089. Many of these enhancements are exemplified in Insightful Corporation s INFACT System Release 3.1 search engine product.

Embodiments of the interfaces described in Appendix A include various enhancements to the extended keyword searching methods systems and techniques described herein including amongst other features support for a new context operator improved metadata searching performance support for ontology entity tag searches at the document search level an improved interface for exporting relationship data data sorting across an entire result and automatically generated navigation tips.

Embodiments of the enhanced SQE provide a context operator for determining in a relationship search whether the prescribed relation might be satisfied by searching surrounding sentences clauses or any other granularity desired etc. . In some embodiments the number of surrounding sentences clauses searched is a predetermined number n. In other embodiments it is contemplated that this number can be set dynamically even from within the query itself. Combinations and permutations such as permitting entry of any number less than n are also possible.

In the user interface described in Appendix A the context operator also termed a context constraint can be specified in a query as 

The context operator is particularly beneficial to catch related text when two separate clauses sentences that have no inter clause connections contain information that is related to what the researcher is searching for. For example the sentences 

In order to support context operators the data structures used to stored the normalized extended keyword data have been modified. In summary the context stored as a bag of words is stored in the term clause index for fast access to context. In addition since context information is now searched for surrounding sentences the ontology paths present in the surrounding sentences all entities are stored for quick comparisons. See the context and context ont path fields in the modified term clause index described in Table 1 below. The term clause index and other relevant data structures were described in detail in co pending U.S. patent application Ser. No. 11 012 089.

Embodiments of an enhanced SQE provide improved techniques for efficiently handling meta data used in relationship searches. Metadata filtering allows one to constrain a search based on document level metadata constraints. Metadata may or may not be available for a particular document corpus. A user can determine whether such metadata is available and the various types of information available by selecting a link to the Corpus page as shown in Appendix A and available through some embodiments of Insightful Corporation s SQE. For example the following equivalent queries search for all documents having at least one sentence indicating Clinton in a visits relationship to China where the author of the document is John Smith. 

In the enhanced SQE the data structures used to stored the normalized extended keyword data have been modified to more efficiently store metadata and specific metadata such as a document date for fast retrieval. In one example embodiment the term document index is modified to contain additional fields such as docdate and author. In some embodiments all of the metadata is available as an inverted index as well. See also Table 2 described below.

Embodiments of the SQE have been enhanced to support ontology path specifications in document level searches regardless of whether the search is performed as part of a document i.e. keyword search or relationship search. For example one can search for all documents which contain a specific entity type or ontology path the same way one specifies a keyword search. For example the general document search query 

One can also use relationship searches with document constraints also called document specifications to search for documents with a specific keyword in it. For example the relationship search exemplified in Query 2 above can be modified to find documents where a DC 8 is described somewhere in the document and not just in the surrounding sentences as 

The data structures used to stored the normalized extended keyword data have been modified to efficiently support document level searches for ontology path information by including such information in specific fields in for example the term document index. In one example embodiment all ontology paths and sub paths of each available entity are stored in the term document index. See Tables 1 3 below.

Note as well that the ontologies themselves can be stored in inverted indices for easy searching and access by the SQE. Specifically ontology entity data can be stored in keyword search engine compatible indices such as those illustrated in Appendix D which is incorporated herein by reference in its entirety.

Another feature of the enhanced SQE is that it can provide search results organized by data across the whole result and not just on a per page basis. is an example screen display of search results retrieved by relevance and page sorted by action similarity. A summary of the search results is shown in summary result area . Because the SQE may return a large amount of results they are brought in as data chunks and each page can be sorted. To sort on a per page basis the user selects the page sort input field . In one embodiment different page sorting is available depending upon the mode in which the search results are retrieved globally across the result . In order to change the mode in which the search results are retrieved the user selects the retrieve by field . In one embodiment this field toggles between retrieve by relevance and retrieve by date. Other modes are contemplated and could be similarly incorporated.

When the user selects the retrieve by date field the results are displayed organized by date. is an example screen display of search results retrieved by data and page sorted by date. The search results are shown in summary result area arranged by date. The user can change the sorting on a per page basis by selecting a different criterion in page sort input field and selecting the sort button . To return to displaying the results organized by relevance the user selects the retrieve by relevance toggle .

The ability to share relationship data with other applications is useful especially when there are large amounts of data to be analyzed and statistical tools could be applied to model the data. The enhanced SQE provides an improved interface for exporting relationship query results in a character delimited format that can be input to analytic tools such as those provided by S PLUS or Excel.

When the data is exported it is typically stored as a tab delimited file. Different delimiters can be incorporated through configuration parameters. is an example screen display of a data frame once exported into another application. For example the application illustrated in is S PLUS and the relationship query result data exported using the SQE has been imported into an S PLUS object displayed as for further analysis and modeling using standard S PLUS statements to import data into an S PLUS variable.

Embodiments of syntactic query engines have been enhanced to incorporate automated tips for users to increase the ability of a user to specify a desired search. Based upon the inverted indexes used to represent the corpus the ontologies used in the system and other rules such as popularity of term choice etc. these tips act as suggestions to the user to specify with greater particularity a possibly desired search.

Behind the scenes when a query e.g. either a document level search such as one or more keywords or a relationship search including portions of a or an entire relationship query using IQL is entered the SQE attempts to determine what relationship searches might be desired based upon a set of rules parsed and evaluated by the SQE. Then the SQE attempts to run some number of these potential searches in the background up to all such possibilities . Thereafter depending upon the particular tip user interface some indication of the navigation tips and or search results of the tips are presented to the user. Once displayed the user can then choose one or more of these preformed searches by selecting the navigation tips to quickly see results.

The query may take the form of either one or more keywords an IQL expression or components of an IQL expressed query. For example a user may enter the keywords Japan China to try to determine relationship and event information relating to both countries and the SQE will respond with appropriate navigation tips to assist the user to discover more information. As another example the user might type in a partial IQL expression such as China Japan and the SQE will attempt to recognize the input as particular components of IQL such as a source entity and a context operator expression.

The rules used to determine the navigation tips are specified typically in a configuration file by an administrator when the searching system is configured or at other times . Each rule specifies some sort of template or specification for determining what relationship query to execute based upon the recognition of particular input. For example a rule might specify that when a single entity is recognized as input a rule that treats it as a source entity and looks for related organizations is fired. Such a rule might be expressed for example by

Different heuristics and or rules can be used to determine which potential search alternatives to suggest the order they are suggested etc. For example the number of results returned the popularity of a particular search e.g. how many times it has been executed against that corpus or other measurements of value or interest can be incorporated. Note that other types of rules and an entire programming or scripting language for running and combining potential queries can be defined for use by the SQE.

In one embodiment the searches are run to validate whether there are any results for a particular tip before showing them to a user. In another embodiment the searches are run typically in the background and even in parallel the results cached and indications to some number of them presented to the user. In some embodiments the cached tip results are first consulted to speed up response time. The cached tip results can also be useful to return tips to a user when an SQE facility is under heavy load and desires to suspend tip rule processing. Also depending upon the architecture and infrastructure used to evaluate and perform the tip searches which execute typically in the background the SQE can perform load balancing parallel processing etc.

According to one example embodiment which can be accessed via url www.globalsecurity.org the SQE provides navigation tips to a user based upon whether it can recognize the specification of a single entity that is part of a configured ontology. More specifically the SQE looks at the user specified entity and determines whether there are one of more ontology paths that include the user specified term as a leaf node an entity . If not no tips are suggested. If so then the SQE runs one or more appropriate relationship searches that corresponds to each possible ontology path in the background using rules that define which searches to run in order to validate the searches against the particular corpus. In some instances only searches that result in matches are then presented to the user.

In some implementations a configuration file containing rules is supplied for example by a system administrator and a mapping or other means for specifying a set of rules is stored between entities to be recognized and potential searches to execute. The configuration file may be parsed and the mappings stored when the system comes up or at other times. Appendix B contains one example of a set of ontology path specifications and mappings to corresponding queries as specified for such a configuration file. Also depending upon the implementation the SQE may implement different orders or precedence for applying recognized rules. In one case the rules are applied in the order that they are encountered in the configuration file so if an entered query matches multiple rules in the file the first encountered set of rules will apply. In another case all of the matched rules are applied and all of the potential searches performed in the order specified. Other orders of precedence can be similarly incorporated.

To use a tip the user selects one of the tips from the tip link area . is an example screen display of the results provided upon selection of a navigation tip according to the first embodiment. In the user has previously indicated the entity Bush see entity name and has selected tip link US Officials because the user is interested in seeing recent news on the resignation of President Bush s Secretary of Defense Donald Rumsfeld. The results of the tip are shown in summary result area .

Alternatively suppose that the user wanted to see who President Bush chose as a replacement Secretary of Defense the user knew the person came from another government agency but couldn t remember which agency. is an example screen display of the results provided upon selection of a second navigation tip according to the first embodiment. In the user has selected the Organizations tip link and can view a summary of the results in summary area . Note that from the summaries alone shown in the user can quickly get the desired information. Then if more detail is desired the user can follow the action link e.g. call as described elsewhere to view the underlying document.

Note as well that different user interfaces can be used to display the tips. In one such interface a menu of possible search specifications is provided. In another interface links are presented that can be selected to show fast search results.

According to a second example embodiment which can be accessed via url books.infact.com the SQE provides navigation tips to a user based upon whether it can recognize one or more keywords as in a document level search or the specification of any part of a relationship query using IQL. More specifically the SQE looks at the user specified entry and determines whether there are rules that map additional relationship queries to the keywords and or recognized portion of a relationship query. In the case of keyword input the SQE first parses the input using the extended natural language parser of the SQE to transform the input into a relationship query structure an enhanced or normalized data structure of the SQE that can be compared with the rules. Appendix C contains one example of a configuration file having a set of mappings from a relationship query structure which may contain a single entity or action to corresponding additional queries. Note that the configuration file of Appendix C specifies rules using XML tag definitions however as indicated above other languages specifications and mappings could be used. Based upon evaluating the corresponding rules the SQE then display the potential other relationship queries that might be of interest to the user. are example screen displays from this example navigation tip interface.

Note as well that in some embodiments synonyms for tips are collapsed and other normalizations of the tips are performed. For example if during the tip construction process the SQE determines that relationship queries yield valid results against the corpus for Bill Clinton William Clinton and President Clinton then the tip subsystem may display a single deep tip Clinton. Similarly synonyms such as UK Great Britain and United Kingdom will be coalesced into one tip. Other normalizations such as upper and lower case transformations may also be performed.

In the books corpus example a user can also peruse individual books and quickly get more information using relationship searching and navigation tips. describe some of the aspects of navigation tips used to discover information about a single book.

When the user selects an entity type in the book index area the various instances of entities that appear in the book are displayed. is an example screen display of example entity instances that correspond to an entity type selected from a book index. In the user has selected the character entity type and the particular characters that appear in the book are displayed as characters in result summary area . To select a particular character the user selects a link to the entity for example Steele .

There are any number of techniques an SQE can use to provide the interfaces and navigation tips described in . illustrate typical operations of an example embodiment of a tip engine subsystem provided by enhanced SQE. Note that as there are any number of known ways to architecturally configure and implement the components of such as system using for example distributed computing techniques parallelism etc. including for example systems that are similar to those described in co pending U.S. patent application Ser. No. 11 012 089.

Depending upon the architectural implementation including the various parallel processing and load balancing techniques and components available one or more components may actually be invoked to perform tip processing. In one implementation not shown a tip searcher manager is invoked by the tip engine to properly load balance and distribute requests to some number of tip searcher components. In addition as will be described below a tip searcher may further distribute execution of various relationship queries so that they can be performed in parallel. Other architectures are also possible.

As an example the rule file may specify a more general relationship query that involves an entity type or an action type. Once the rule is executed and the general relationship query evaluated the tip searcher or its components can evaluate weigh score filter etc. the particular entities actions discovered as results from evaluating the general relationship query and then execute specific relationship queries for those entities actions. The specific relationship queries that correspond to entities or actions as opposed to types of entities or actions can be used to provide the deep tips described in the screen displays above.

Assuming for example that the deep tips are determined asynchronously at some point the results from executing the general relationship query are made available and the tip searcher is notified. In step the tip searcher determines from these results whether the general tip has generated results that satisfy the tip system rules and heuristics and if so presents them to the user. For example if a general tip generates less than some threshold number of results the tip system may not present a general tip. In other embodiments the tip searcher always presents the general tip as it corresponds to an available rule. The tip searcher then returns to step to process the next rule if any. If not the tip searcher process is done until invoked again .

Specifically in step the routine receives the general relationship query to execute and evaluate. Note that in other embodiments the routine might just receive the rule and be responsible for determining the corresponding relationship query. In step the routine determines whether a cached result of the general relationship query is already available and if so retrieves it step otherwise in step executes the general relationship query that corresponds to the rule to determine a result. In step the routine returns the results to the tip searcher or stores them and notifies the tip searcher for presentation of a general tip and in steps processes and evaluates the specific entities and or actions found in the results.

More specifically in step the routine determines whether there is another entity action to process and if so continues in step other continues in step . In step the routine processes the next entity action. In step the routine evaluates the search results that correspond to this entity action to determine whether they meet the criteria associated with presenting a deep tip. This evaluation as mentioned may rank all of the results to determine the most frequently appearing entities actions and or may determine whether the number of times an entity verb appears reaches or surpasses some threshold. Other evaluation criteria may of course be incorporated. In any case in step once the routine determines whether an entity action qualifies for a deep tip it determines a corresponding relationship query using that entity action and stores the corresponding RQ result. In step the routine returns relationship queries that correspond to the stored or n number of them results and causes them to be presented as deep tips and then finishes processing. Note that the number of results stored returned may be a predetermined number a settable number a default etc. In addition a preference variable may be available to change the number while the SQE is running.

Details of the operation of an SQE are provided in co pending U.S. patent application Ser. No. 11 012 089. In summary the enhanced SQE receives as input a data set to be indexed and stored. The Data Set Preprocessor prepares the data set for parsing by assigning a Document ID to each document that is part of the received data set and sentence and clause IDs as appropriate performing OCR processing on any non textual entities that are part of the received data set and formatting each sentence according to the Enhanced Natural Language Parser format requirements. The Enhanced Natural Language Parser ENLP parses the data set identifying for each sentence a set of terms each term s tags including potentially part of speech and associated grammatical role tags and any associated entity tags or ontology path information and transforms this data into normalized data. The Data Set Indexer indexes and stores the normalized data output from the ENLP in the data set repository . The data set repository represents whatever type of storage along with the techniques used to store the enhanced document indexes. For example the indexes may be stored as sparse matrix data structures flat files etc. and reflect whatever format corresponds to the input format expected by the keyword search engine. After a data set or a portion of a data set is indexed a Relationship Query may be submitted to the enhanced SQE for processing. The Relationship Query Processor prepares the query for parsing for example by splitting the Relationship Query into sub queries that are executable directly by the Keyword Search Engine . As explained elsewhere a Relationship Query is typically comprised of a syntactic search along with optional constraint expressions. Also different system configuration parameters can be defined that influence and instruct the SQE to search using particular rules for example to include synonyms related verbs etc. Thus the Relationship Query Processor is responsible for augmenting the specified Relationship Query in accordance with the current SQE configured parameters. To do so the Relationship Query Processor may access the ontology information which may be stored in Data Set Repository or some other data repository. The Relationship Query Processor splits up the query into a set of Boolean expression searches that are executed by the Keyword Search engine and causes the searches to be executed. The Relationship Query Processor then receives the result of each search from the Keyword Search Engine and combines them as indicated in the original Relationship Query for example using Boolean operators . Note that the Relationship Query Processor may be comprised of multiple subcomponents that each execute a portion of the work required to preprocess and execute a relationship query and combine the results for presentation. The results in portions or as required are sent to the User Interface API component to produce the overall Query Result . The User Interface Component may interface to a user in a manner similar to that shown in the display screens of .

The functions of data set processing data object ingestion and relationship query processing can be practiced in any number of centralized and or distributed configurations of client server systems. Parallel processing techniques can be applied in performing indexing and query processing to substantial increase throughput and responsiveness. Representative configurations and architectures are described in detail in co pending U.S. patent application Ser. No. 11 012 089 however a variety of other configurations could equivalently perform the functions and capabilities identified herein.

As mentioned the data structures used to store relationship data have been modified to support the enhancements described herein. Specifically the data set indexer in stores the normalized data generated from the data set using one or more data structures to provide the abstraction of a term clause matrix a term sentence matrix or a term document matrix. Any data structure that can e understood by the target keyword search engine being used is operable with the techniques described here. In some embodiments separate indexes exist for each enhanced document matrix term clause term sentence term document .

Table 1 below conceptually illustrates the modifications made to the information that is maintained in an example term clause index to support the enhanced SQE.

Table 2 below conceptually illustrates the modifications made to the information that is maintained in an example sentence index to support the enhanced SQE.

Table 3 below conceptually illustrates the modifications made to the information that is maintained in an example document index to support the enhanced SQE.

All of the above U.S. patents U.S. patent application publications U.S. patent applications foreign patents foreign patent applications and non patent publications referred to in this specification and or listed in the Application Data Sheet including but not limited to U.S. patent application Ser. No. 10 007 299 filed on Nov. 8 2001 entitled Method and System for Enhanced Data Searching and published as U.S. Patent Publication No. 2004 0221235 U.S. patent application Ser. No. 10 371 399 filed on Feb. 19 2003 entitled Method and System for Enhanced Data Searching and published as U.S. Patent Publication No. 2003 0233224 U.S. patent application Ser. No. 11 012 089 filed on Dec. 13 2004 entitled Method and System for Extending Keyword Searching to Syntactically and Semantically Annotated Data and published as U.S. Patent Publication No. 2005 0267871 U.S. Provisional Application No. 60 312 385 filed on Aug. 14 2001 entitled Methods and Systems for Enhanced Indexing and Syntactic Searching U.S. Provisional Application No. 60 620 550 filed on Oct. 20 2004 entitled Method and System for Relationship Searching U.S. Provisional Application No. 60 737 446 filed on Nov. 16 2005 entitled Method and System for Extending Keyword Searching to Syntactically and Semantically Annotated Data and U.S. application Ser. No. 11 601 612 filed Nov. 16 2006 entitled Extending Keyword Searching to Syntactically and Semantically Annotated Data are incorporated herein by reference in their entirety.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the present disclosure. In addition those skilled in the art will understand how to make changes and modifications to the methods and systems described to meet their specific requirements or conditions. The methods and systems discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants portable email machines game machines pagers navigation devices such as GPS receivers etc. . For example the methods and systems described herein can be applied to any type of search tool or indexing of a data set and not just the enhanced SQE described. In addition the techniques described may be applied to other types of methods and systems where large data sets must be efficiently reviewed. For example these techniques may be applied to Internet search tools implemented on a PDA web enabled cellular phones or embedded in other devices. Furthermore the data sets may comprise data in any language or in any combination of languages. In addition the user interface and API components described may be implemented to effectively support wireless and handheld devices for example PDAs and other similar devices with limited screen real estate. These and other changes may be made in light of the above detailed description.

