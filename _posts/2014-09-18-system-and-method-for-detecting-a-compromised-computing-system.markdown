---

title: System and method for detecting a compromised computing system
abstract: A digital security threat management system is disclosed. The system detects the presence of a computing system, on a network, that has been compromised by an undetected and/or unknown digital security threat. The digital security threat management system recognizes characteristic emanations from a computer system that has been compromised. Because the characteristic emanations that result from a known threat can be the same as the characteristic emanations that result from an undetected and/or unknown threat, the digital security threat management system can learn to detect a computing system that has been compromised by an unknown threat if the security threat management system recognizes characteristic emanations from a previous attack, based on a known threat, of the computing system. In this way, the system can detect the presence of a compromised computing system, even if the cause of the compromise remains undetected and/or unknown. Appropriate remedial action may be taken upon detection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350707&OS=09350707&RS=09350707
owner: TRUSTPIPE LLC
number: 09350707
owner_city: Healdsburg
owner_country: US
publication_date: 20140918
---
This application is a continuation of U.S. Non provisional application Ser. No. 13 752 268 filed Jan. 28 2013 the content of which is incorporated herein by reference for all purposes.

The present disclosure relates generally to the field of digital security and more specifically to detecting a computing system that has been compromised by a digital security threat.

The proliferation of computing technologies continues to present challenges in the field of digital security. As is well known a malicious entity can use one networked computer i.e. a network node to spread malicious computer data to other network nodes and thereby inflict system disruption and economic loss. Network nodes that become compromised may further spread malicious computer data to additional network nodes and cause additional damage.

One of ordinary skill in the art would appreciate that a networked computer or more generally a computing system can be susceptible to attacks such as those that are based on computer viruses malware worms Trojan horses bots intrusions e.g. unauthorized access exploits e.g. escalation of privileges violation of confidentiality time based attacks e.g. Denial of Service or the like. The term threat is used to describe one or more of these types of attacks.

Digital security technologies may be used to counter these types of attacks by detecting and or removing malicious computer data from computing systems. One of ordinary skill in the art would appreciate that digital security technologies can reside at various network nodes can be packaged in hardware and or software form and encompass technologies that are loosely called anti virus software malware detection intrusion prevention anti attack firewall or the like though the terms are not identical in meaning. A broader term Unified Threat Management UTM has also been used to describe one or more of these implementations of digital security technologies.

Conventional digital security technologies typically detect threats using signatures that correspond to specific threats meaning that the detection of a threat relies on the a priori knowledge of the specific threat and the availability of a signature for that specific threat. For example conventional digital security technologies may scan a computing system using the signature of a given computer virus to detect whether the given computer virus is present in the computing system. One drawback of these types of technologies is that threats for which signatures are not yet available cannot be detected.

In one exemplary embodiment a computer implemented method for detecting a computing device that is compromised by an undetected attack comprises obtaining a plurality of network packets from a network. The obtained plurality of network packets comprises network packets categorized as Transmission Control Protocol TCP packets and Internet Protocol IP packets. The obtained plurality of network packets include network packets containing an attack based on a known threat on the computing device where the known threat is different from the undetected threat. The obtained plurality of network packets also includes network packets from the computing device before the attack and network packets from the computing device after the attack. A plurality of combined packets is created from at least a subset of the plurality of TCP packets and IP packets where a first combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets and where a second combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets. The second combined packet is different from the first combined packet. A first sequence is created by converting bitwise content of at least a portion of the first combined packet into a first plurality of integers where the first sequence includes the first plurality of integers. A second sequence is created by converting bitwise content of at least a portion of the second combined packet into a second plurality of integers where the second sequence includes the second plurality of integers. A similarity metric is determined between the first sequence and the second sequence based on a distance function. A third sequence is created based on the similarity metric where the third sequence comprises a third plurality of integers common to the first sequence and the second sequence in the first order. A fourth sequence is created where the fourth sequence is a meta expression that comprises a subset of the third plurality of integers of the third list in the first order and that represents that the computing device is compromised by a threat. The meta expression is stored and the stored meta expression is used to detect that the computing device has been compromised by the undetected threat.

In one exemplary embodiment a networking device for detecting a networked computing device that is compromised by an undetected attack comprises a network port for connecting to a network infrastructure where the network port is adapted to obtain a plurality of network packets and where the obtained plurality of network packets comprises network packets categorized as Transmission Control Protocol TCP packets and Internet Protocol IP packets. The obtained plurality of network packets include network packets containing a known attack on the computing device the known attack different from the undetected attack network packets from the computing device before the known attack and network packets from the computing device after the known attack. The networking device also comprises a processor connected to the network port where the processor is adapted to create a plurality of combined packets from at least a subset of the plurality of TCP packets and IP packets where a first combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets and a second combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets wherein the second combined packet is different from the first combined packet. A first sequence is created by converting bitwise content of at least a portion of the first combined packet into a first plurality of integers where the first sequence includes the first plurality of integers. A second sequence is created by converting bitwise content of at least a portion of the second combined packet into a second plurality of integers where the second sequence includes the second plurality of integers. A similarity metric is determined between the first sequence and the second sequence based on a distance function. A third sequence is created based on the similarity metric wherein the third sequence comprises a third plurality of integers common to the first sequence and the second sequence in the first order. A fourth sequence is created where the fourth sequence is a meta expression that comprises a subset of the third plurality of integers of the third list in the first order and represents that the computing device is compromised by an attack. The networking device also comprises a memory connected to the processor where the memory is adapted to store the meta expression where the stored meta expression is used to detect that the computing device is compromised by the undetected attack.

In one exemplary embodiment a non transitory computer readable storage medium having computer executable instructions for detecting a computing device that is compromised by an undetected attack the computer executable instructions when executed by one or more processors cause the one or more processors to perform the acts of obtaining a plurality of network packets from a network where the obtained plurality of network packets comprises network packets categorized as Transmission Control Protocol TCP packets and Internet Protocol IP packets. The obtained plurality of network packets include network packets containing a known attack on the computing device the known attack different from the undetected attack network packets from the computing device before the known attack and network packets from the computing device after the known attack. The computer executable instructions also include instructions for creating a plurality of combined packets from a subset of the plurality of TCP packets and IP packets where a first combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets and a second combined packet of the plurality of combined packets comprises a portion of at least one of the TCP packets and a portion of at least one of the IP packets where the second combined packet is different from the first combined packet. The computer executable instructions also include instructions for creating by the one or more processors a first sequence by converting bitwise content of at least a portion of the first combined packet into a first plurality of integers where the first sequence includes the first plurality of integers. The computer executable instructions also include instructions for creating by the one or more processors a second sequence by converting bitwise content of at least a portion of the second combined packet into a second plurality of integers where the second sequence includes the second plurality of integers. The computer executable instructions also include instructions for determining a similarity metric between the first sequence and the second sequence based on a distance function. The computer executable instructions also include instructions for creating a third sequence based on the similarity metric where the third sequence comprises a third plurality of integers common to the first sequence and the second sequence in the first order. The computer executable instructions also include instructions for creating a fourth sequence where the fourth sequence is a meta expression that comprises a subset of the third plurality of integers of the third list in the first order and represents that the computing device is compromised by an attack. The computer executable instructions also include instructions for storing the meta expression where the stored meta expression is used to detect that the computing device is compromised by the undetected attack.

The following description is presented to enable a person of ordinary skill in the art to make and use the various embodiments. Descriptions of specific devices techniques and applications are provided only as examples. Various modifications to the examples described herein will be readily apparent to those of ordinary skill in the art and the general principles defined herein may be applied to other examples and applications without departing from the spirit and scope of the various embodiments. Thus the various embodiments are not intended to be limited to the examples described herein and shown but are to be accorded the scope consistent with the claims.

Digital security technologies that detect digital security threats using threat specific signatures are vulnerable to threats that target unknown vulnerabilities in a computing system because threat specific signatures are difficult if not impossible to create for threats that target unknown vulnerabilities hereafter unknown threats . An exemplary unknown threat is a zero day exploit. Zero day exploits are understood by those of ordinary skill in the art to refer to vulnerabilities that exist in the code base of a computer application but have not been publicly exploited. Another exemplary unknown threat is a new computer virus that is not related to any existing computer virus. For obvious reasons unknown threats such as these can pass undetected through digital security technologies that rely on threat specific signatures that are created from a priori knowledge of the threats.

While a computing system may succumb to unknown threats that avoid detection Applicants have discovered that a computing system when compromised gives characteristic emanations that are indicative of the computing system s compromised condition. These characteristic emanations are involuntary meaning that they are not influenced nor controlled by an attacking threat rather the characteristic emanations are independent of the cause of the attacking threat. Thus by monitoring computing systems for these characteristic emanations particularly in network traffic to and from networked computing systems the existence of a compromised computing system in a network can be identified and addressed promptly. For instance a compromised computing system can be cloaked from a network so that it is no longer accessible to a remote malicious entity.

Notably prompt remedial action in response to a computing system compromise can mitigate or eliminate actual damage even if the compromise itself is not avoided. Consider for instance a situation in which a malicious user gains unauthorized access to a data server using a zero day vulnerability in the data server s secure shell secure communication tunnel e.g. SSH . Although the communication tunnel of the data server once compromised provides the malicious user with elevated server access the compromised data server also transmits characteristic emanations onto the network which can be detected by a threat management system e.g. a firewall that is operating on the network within fractions of a second. Immediately thereafter the threat management system can cloak the compromised data server from the network to prevent any additional network traffic including those from the malicious user from reaching the compromised data server. Thus even though the malicious user succeeded in gaining unauthorized access the access is promptly severed thereby leaving the malicious user with little time if any to inflict damage.

The embodiments described herein include techniques for recognizing characteristic emanations from a computing system that indicate the computing system has been compromised by a digital security threat and for performing appropriate responsive action.

The concepts of network traffic and network packets are well known in the art and are not detailed here. As an example network traffic contains network packets such as Ethernet packets Transmission Control Protocol TCP packets Internet Protocol IP packets or the like. The term characteristic emanations is used here to refer to computer data contained in network packets that is indicative of the compromised condition of a computing system. For example a compromised computing system may transmit malformed network packets that are un routable and that consist of strings of zero bit values. One or more aspects of the contents of the malformed network packets may be a characteristic emanation for the particular computing system. Recall as stated above characteristic emanations indicate the compromised condition of a computing system and characteristic emanations are independent of the cause of the compromise.

A computing system may produce different characteristic emanations depending on what part of the computing system is compromised. Generally speaking characteristic emanations may be tied in some cases to the hardware configuration of a computing system. Also characteristic emanations may be tied in some cases to the software configuration of a computing system. The software configuration of a system includes for example the particular services and the particular operating system that is operating on the computing system. More specifically a computing system can host a variety of services such as particular versions of SSH telnet HTTP database listeners and so forth. The services can be run from a particular kernel s of a version of an operating system such as MICROSOFT WINDOWS SERVER 2012 ORACLE SOLARIS 11 or the like.

More specifically characteristic emanations that are produced by a compromised computing system may depend for example on the service that is compromised and the operating system that is supporting the compromised service. That is to say a SOLARIS based server may provide one characteristic emanation when its SSH communication tunnel is compromised and provide another characteristic emanation when its JAVA client is compromised. In similar vein a WINDOWS based server may provide yet another distinct characteristic emanation when its database listener is compromised.

As used herein the term Unified Threat Management System UTMS describes computer security technologies that carry out process regardless of whether the technologies are provided in software form e.g. as a software package or in hardware form e.g. an application specific circuit or device . The training aspects of process i.e. block and the run time aspects of process i.e. blocks may be implemented onto the same or onto different UTMSs.

Also the terms train and training are relied upon for their plain meanings in the English language. That is consistent with their dictionary meanings the terms train and training are used to describe processes that help a UTMS attain the ability to recognize characteristic emanations that indicate the existence of a compromised computing system. However the terms train and training should not be interpreted as implying a particular implementation of process such as the implementation of a support vector machine which coincidentally is sometimes associated with the term training .

An exemplary implementation of process is now discussed with reference to . At block a UTMS is trained to recognize content in network traffic that indicates the presence of a compromised computing system. During block the UTMS is provided with a series of training network traffic that reflects i normal communication between two computing systems ii the introduction of a known threat that successfully compromises one of the computing systems and iii communication involving the compromised computing system after the successful compromise. The introduction of a known threat that successfully compromises a computing system causes the computing system to produce characteristics emanations that indicate its compromised condition. These characteristic emanations found in iii are useful to the training process and are used at block along with i and ii to identify bounded sequences of computer data. These bounded sequences of computer data are important because they can be used by a UTMS to later detect the presence of a compromised computing system using network traffic regardless of whether the computing system was compromised by the same known threat or by another unknown threat.

Network traffic representing communication between two computing systems may be obtained from for example a network packet capture application programming interface API such as pcap . Although the names of APIs and or repositories may change from time to time the concept of capturing network traffic should be within the grasp of one of ordinary skill in the art. Further the obtaining and introduction of a known threat e.g. a known exploit to a computing system should also be within the grasp of one of ordinary skill in the art since many computer threats are available from software repositories in the form of computer executable code e.g. .EXE files that can be readily executed on a computing system.

At block the UTMS uses the bounded sequences of computer data obtained from block to monitor a set of network traffic and to determine if the network traffic contains characteristic emanations that indicate the presence of a compromised computing system. That is the UTMS may determine if a network node in the network has been compromised using the bounded sequences of computer data that are obtained from block .

At decision block the UTMS decides whether characteristic emanations are found in a set of network traffic that is being monitored. If characteristic emanations are found meaning that a compromised computing system is present in the network processing proceeds to block where the UTMS generates one or more appropriate responses. An appropriate response may be a user or system alert. Another appropriate response may be to scrub any network traffic from the source of the characteristic emanations i.e. the compromised network node such that an attacking network node cannot continue to receive affirmative responses from the compromised network node. Yet another appropriate response may be to cloak the compromised network node so that an attacking network node can no longer reach the target network node and thus cannot continue the attack. If no characteristic emanation is found processing returns to block and the UTMS monitors another set of network traffic for the presence of characteristic emanations.

Process is notable in at least two ways. First the bounded sequences of computer data that are created at block correlate to characteristic emanations that are indicative of a compromised computing system but the bounded sequences of computer data need not correlate to the actual cause of the compromise. As such these bounded sequences of computer data allow a UTMS to recognize that a computing system has been compromised independent of what caused the compromise. This result is beneficial because a UTMS could still operate if the actual cause of a compromise has never been previously seen. Second process produces bounded sequences of data that are efficient in structure and in size as compared to signature files that are used by conventional digital security technologies. This result is also beneficial because tremendous computational efficiencies can be realized during operation of a UTMS using process .

In some embodiments the grouping of network packets between two network nodes at block is bidirectional because network traffic both to and from a pair of network nodes are grouped together. Bidirectional network traffic typically consists of different levels of communication from the initial handshake to the full transfer of data between the two network nodes. This grouping of bidirectional network packets is based on the existence of an established communication between two network nodes. An established communication between two network nodes is sometimes referred to as a conversation . Two network nodes may request to establish a communication via one channel. For example a host and a server may handshake on one port. Once communication is established the two network nodes may communicate further through a newly created channel. For example the host and the server may communicate through TCP IP on another port that is different from the port through which the established communication was initially requested. In some embodiments the grouping of network packets between two network nodes at block is unidirectional in that network traffic to or from one of the network nodes is grouped together.

In some embodiments the grouping of bidirectional network packets at block begins with the identification of a network packet in network traffic that represents the beginning of an established communication and another network packet in the network traffic that represents the end of the established communication. The beginning of an established communication may be a network packet that contains a request. The end of an established communication may be a network packet that contains a corresponding acknowledgment. In one embodiment additional network packets may be identified such as a network packet that represents a request acknowledgement . Network packets at different layers of the OSI model may provide request and acknowledgement information. For example both HTTP network packets i.e. at the OSI application layer and TCP network packets i.e. at the OSI transport layer contain request fields either of which is sufficient for purposes of block . In this way block may group together bidirectional network packets that correspond to an established communication without relying on source network addresses and destination addresses. Block may also group together bidirectional network packets that correspond to an established communication without relying on source and destination port numbers.

Block is now discussed with reference to . As shown network packets represent a series of network packets between network nodes and . Network packet is sent by network node to network node and includes a request. Thus network packet indicates the beginning of a series of network packets that are to be grouped together. In this context network node may be referred to as a host because network node initiated a request and network node may be referred to as a server because network node is the recipient of the request. Network packets and are sent by network nodes and respectively and represent bidirectional communication of data between the two network nodes that should be grouped together. Network packet is sent by network node to network node to acknowledge that an appropriate amount of data has been received. Thus network packet indicates the end of the series of network packets that are to be grouped together. In this way network packets to are grouped together at block into a bounded group of network packets. This group of network packets is referred to as being bounded because there is a clear beginning and a clear end to the group of data. Block may be repeated to produce additional groups of bidirectional network packets between pairs of network nodes.

Only certain fields within the network packets that are grouped by block are relevant to detecting compromised computing systems. At block the relevant information is retained and extraneous information is discarded. Block is now discussed with reference to . illustrates the layout of an IP network packet with the fields relevant to detecting compromised computing systems circled. These relevant fields include Type of Service TOS Total Length of IP network packet IP Flags Time to Live Protocol IP Options and data content . illustrates the layout of a TCP network packet with the fields relevant to detecting compromised computing systems circled. These fields include Sequence Number Acknowledgment Number Offset TCP Flags Window Urgent Pointer TCP Options and data content . In this way the output of block is reduced to contain only information that is relevant to detecting compromised computing systems. This retention process is applied to each IP and TCP network packet that is in the groups of network packets produced by block . The output of block is referred to as reassembled packets .

At least two aspects of block are noteworthy. First block does not retain the source or destination addresses in an IP network packet or the source or destination port numbers in a TCP network packet. Thus a UTMS using process does not need to rely on network address nor port information in order to detect the existence of a compromised computing system though the network address and port information may be subsequently used to identify the precise network location of specific compromised computing system . Second Header Length IHL is used to determine the length of an IP network packet header so that the relevant fields within the IP network packet can be properly grouped but Header Length IHL is not itself retained in the output of block .

At block the reassembled packets i.e. relevant information from block are converted bitwise into integers thereby producing sequences of integers that correspond to a subset of the information originally provided to process . In one embodiment 8 bit integers are used. One of ordinary skill in the art would appreciate that IP and TCP network packets contains fields that are less than 8 bits exactly 8 bits and more than 8 bits long. Fields that span less than 8 bits are converted to 8 bit representation by padding zeros to the most significant output bits. For example block converts bits 100 to 0000 0100 . TOS and IP Flags which are 4 bit and 3 bit fields respectively are converted in this way. Fields that span more than 8 bits are converted into multiple 8 bit segments. For example block converts bits 0001 0010 0100 1000 to 0001 0010 and 0100 1000 . Data content which spans more than 8 bits is converted in this way.

Blocks and are now discussed with reference to . illustrates a portion of an IP network packet. As discussed above within IP network packet TOS and Total Length among others are useful for detecting compromised computing systems. Thus fields and are retained by block and are provided to block for conversion to integers. Reassembled packet represents the portions of IP network packet that are retained by block . Block converts the contents of reassembled packet bitwise into 8 bit integers and . Note for sake of simplicity only a portion of an IP network packet is shown in . During normal operation block processes the entire groups of IP and TCP network packets produced by block and block in turn processes the entire groups of IP and TCP network packets retained by block . In this way block produces a sequence of 8 bit integers containing the integers 40 1 83 . . . . Optionally sequence of 8 bit integers may be limited to 65 536 8 bit integers in length.

As used here the term sequence describes a list of ordered elements e.g. integers. It should be appreciated that the ordering of elements within sequence of integers is derived from the ordering and adjacency of relevant portions of bidirectional network traffic processed by blocks . The response is further distilled in the processes of blocks discussed below so that it becomes useful for detecting the presence of a compromised computing system in an unknown set of network traffic.

At block a distance function is used to identify characteristics from the sequences of integers produced by block . The distance function is performed against sequences of integers that are adjacent in time meaning that a sequence of integers produced by block based on one group of network packets from block is compared against the next adjacent sequence of integers produced by block based on the next adjacent group of network packets from block .

Conventional distance functions such as string distance functions are well known in the art and are not discussed in detail here. As an example a conventional string distance function may be used to determine that the strings a b c and z b c have a distance of 1 because the strings vary only in that a in the former is replaced with z in the latter which represents the sole difference between the two strings. The groups of network packets produced by block lend themselves to comparison by distance functions because block produces sequences of integers which may be treated as individual elements by a distance function. Conventional string distance functions however do not provide distance metrics that are sufficient for detecting compromised computing systems. For example the knowledge that two strings differ by a distance of 1 provides little useful information in the present context.

In one embodiment block performs a custom distance function described below that produces reduced sequences of integers that support the detection of compromised computing systems. For purposes of illustration the custom distance function of block is discussed with references to . illustrates exemplary process for performing the custom distance function in one embodiment. illustrates exemplary groups of network packets as they are processed by exemplary process in the one present embodiment.

Turning to at block the custom distance function identifies integers that appear within adjacent pairs of sequences of integers produced by block . illustrates exemplary sequences of integers . illustrates exemplary integer 101 which appears in at least pairs of adjacent sequences of integers and . Note sequences of integers are not illustrated for simplicity. At block the custom distance function also identifies the first instance of an identified integer in pairs of adjacent sequences of integers. illustrates the first instance of 101 being identified in adjacent sequences of integers and .

At block the custom distance function aligns the first instances of the identified integer in a pair of adjacent sequences of integers. illustrates the alignment of the first instances of 101 in pairs of adjacent sequences of integers and .

At block a reduced sequence of integers may be created under some conditions for a pair of adjacent sequences of integers. A reduced sequence of integers is created for a pair of adjacent sequences of integers if one or more of the integers that are common to the pair of adjacent groups of sequences of integers i appear in the same order in the pair of adjacent groups of network packets and ii have positions in the pair of adjacent groups of network packets that are within a first threshold distance. In one embodiment the first threshold distance is four. If created a reduced sequence of integers would comprise integers that satisfy requirements i and ii stated above with respect to a pair of adjacent sequences of integers .

Blocks repeat for other integers that appear within at least a pair of adjacent sequences of integers. For example the integer 48 also appears in at least one pair of adjacent sequences of integers among sequences of integers . Thus blocks are repeated for 8 bit integer 48 .

At the completion of block which is an exemplary string function carried out in block of processing proceeds to block . At block the frequency at which a reduced sequence of integers appears within a second threshold distance in the groups of network packets created at block is determined. The first and second threshold distances may be the same or may be different. In one embodiment the second threshold distance is four. illustrates sequences of integers that were created by block . In addition illustrates the appearance of reduced sequences of integers within sequences of integers . As shown reduced sequence of integers 101 48 52 appears within the exemplary second threshold distance of four in eight out of the ten sequences of integers . Thus a frequency of 80 is associated with reduced sequence of integers . For the same reason a frequency of 80 is associated with reduced sequence of integers . Note reduced sequences of integers and do not appear within the second threshold distance of four in this example in sequence of integers because the integers 101 and 48 are separated by more than four positions in group of network packets . Also as shown reduced sequence of integers 53 101 appears within the exemplary second threshold distance of four in three out of the ten groups of network packets . Thus a frequency of 30 is associated with reduced sequence of integers . The frequencies associated with reduced sequences of integers are illustrated in . These values which indicate the frequencies with which reduced sequences of integers appear in order within a threshold distance in groups of network packets may be referred to by the term confidence values .

At block reduced sequences of integers having confidence values below a threshold confidence value are discarded. In one embodiment the threshold confidence value is between 80 90 . illustrates the discarding of reduced sequence of integers . In addition reduced sequences of integers and which are the same are de duplicated and maintained as reduced sequence of integers . For purposes of this disclosure reduced sequence of integers may be referred to by the term meta expression .

Meta expression represents the information that is sufficient to detect via network traffic the presence of a compromised computing system. Meta expression is sufficient to detect a compromised computing system even if the computing system is compromised using a digital security threat than is different than the known threat that was provided as initial input to process . Recall that the input to process was a series of network packets that were used to obtain meta expressions including i normal communication between two computing systems before one of the computing systems becomes compromised ii the introduction of a known threat that successfully compromises one of the computing systems and iii communication involving the compromised computing system after the successful compromise which contains characteristic emanations from the compromised computing system.

Process may be repeated for other computing systems that run different operating systems and application services. For example process may be performed using network traffic that contains an attack based on threat A to expose an SSH vulnerability on a SOLARIS based server and be performed again using network traffic that contains an attack using threat B to expose a JAVA vulnerability on a WINDOWS based computer. Indeed process may be repeated for different combinations of operating systems and application services in order to determine meta expressions that can be used to detect later arising compromises of different combinations of operating systems and application services.

The efficiency with which compromised computing systems can be detected using the meta expressions provided by process is now discussed. Recall that process is an exemplary UTMS training process that may be carried out by block of . Thus at the completion of process processing proceeds to block of .

At block a UTMS utilizes meta expressions to analyze network traffic and to detect whether the network traffic contains characteristic emanations that indicate the presence of a compromised computing system in the network. For the sake of simplicity a group of network packets is considered to be normal when it lacks characteristic emanations that indicate the presence of a compromised computing system. In contrast a group of network packets is considered to be abnormal when it contains characteristic emanations that indicate the presence of a compromised computing system.

Processing at block begins with the grouping of a series of bidirectional traffic between two network nodes. For this purpose the techniques of block may be used. Next the groups of network packets are filtered for relevant information. For this purpose the techniques of block may be used. Next the reassembled packets containing relevant information which form new groups of network traffic are converted into sequences of integers. The bit size of the integers used during run time should be the same as the bit size of the integers used during training. In one embodiment the integers are 8 bits in size. For purposes of converting reassembled packets into sequences of integers the techniques of block may be used.

The sequences of integers produced by block are compared against one or more meta expressions to determine if the network traffic is normal or abnormal. A set of network traffic that is being analyzed is considered to be abnormal when two criteria are satisfied i each integer in the meta expression is present in the sequence of integers that corresponds to the network traffic and ii each integer appears in the same order in both the corresponding sequence of integers and the meta expression. Notably a UTMS may conclude that a group of network packets lacks characteristic emanations and is thus normal at the first instance in which condition i fails to hold true meaning that a UTMS need not always process an entire group of network packets in order to determine that the group of network packets is normal. This outcome is favorable because it lends itself to efficient UTMS operation as compared to a design that iterates through every network packet in a group of network packets in order to determine if the group of network packets is normal. The failure of condition ii though still useful to determining whether a group of network packets is normal or abnormal is less efficient because a sequence of integers may have multiple instances of a particular integer and all of the instances must fail condition ii in order for condition ii to fail as a whole.

When an abnormal group of network packets is detected the UTMS follows decision block to block where one or more appropriate responses are generated. When a group of network packets is determined to be normal the UTMS returns to block and analyzes additional network traffic. Blocks are discussed with reference to . illustrates exemplary groups of network packets and exemplary meta expression . Meta expression may be one of the meta expressions that were created during training block of . The length of meta expression is shortened for simplicity. As shown groups of network packets and contain all of the integers of meta expression in the same order in which the integers appear in meta expression . Thus groups of network packets and are considered abnormal in that they contain characteristic emanations that indicate the presence of a compromised computing system. Groups of network packets and do not contain all of the ordered integers of meta expression . Thus groups of network packets and are considered normal in that they lack characteristic emanations that indicate the presence of a compromised computing system.

As is evident from the preceding discussion at block a UTMS performs many integer comparisons. Thus optimization of integer comparisons is important to the efficiency of the UTMS. Recall that a set of network traffic is considered normal at the first instance in which an integer in the meta expression is absent in the sequence of integers that corresponds to the network traffic. Thus the performance of the UTMS is improved if an early normal determination can be made. To this end it is beneficial to structure the technique of block such that the integer comparisons between a sequence of integers and a meta expression terminate as soon as one integer from the meta expression is identified as being absent in the sequence of integers.

In one embodiment block employs a nested computer programming language expression that returns an overall value of failure e.g. a Boolean value when any one of the nested levels returns a false condition. Thus as soon as a UTMS identifies the absence of one integer at any one of the nested levels processing of the entire nested computer programming language expression terminates. The corresponding set of network traffic is thus identified as being normal in which case no additional threat detection is necessary and a subsequent set of network traffic can be analyzed. For example the LISP computer programming language allows for a nested expression in the form A B C D that returns an overall value of failure if any one of expressions A B C and or D is false . In this example the expression A may query whether the first integer in a meta expression appears in a sequence of integers and the expression B may query whether the second integer in the meta expression appears in the sequence of integers and so forth.

At block one or more appropriate responses may be generated. One appropriate response may be a user or system alert that indicates the presence of a compromised computing system. The identity of the compromised computing system may be determined based on the group of network packets in which a characteristic emanation was found. Another appropriate response may be to scrub any network traffic from the source of the characteristic emanations i.e. the compromised network node such that the intruding network node cannot continue to receive responses from the compromised network node. Yet another appropriate response may be to cloak the compromised network node so that the attacking network node can no longer reach the target network node and thus cannot continue the attack.

Portions of process may be implemented in exemplary computing system illustrated in . In some embodiments computing system is a network device such as a router gateway and firewall or the like. In some embodiments computing system is a gateway device such as a modem or the like. In some embodiments computing system is a mobile device such as a desktop computer a laptop computer a cellular phone a tablet or the like. In some embodiments computing system is a network interface card . Notably the training aspects of process i.e. block and the run time aspects of process i.e. blocks may be implemented onto the same or onto different computing systems.

As shown in the computing system includes a computer motherboard with bus that connects I O section one or more central processing units CPU and a memory section together. Memory section may have memory module related to it. Memory module may be for example a flash memory and or a removable memory device. The I O section is connected to network interface which receives and or transmits network packets. I O section may be connected to display input device and or storage unit . Memory section memory module and or storage unit can store e.g. tangibly embody computer readable medium that contain computer executable instructions and or data for performing any one of the above described processes using CPU . The computer executable instructions may be written for example in a general purpose programming language e.g. LISP C or some specialized application specific language. Input device may be a USB port supporting input from USB compliant devices such as a keyboard a mouse a memory stick or the like. At least some values based on the results of the above described processes can be saved into memory such as memory memory module and or disk storage unit for subsequent use.

Portions of process also may be implemented into a processor by way of specifically arranged integrated circuits e.g. application specific integrated circuits . In some embodiments the integrated circuit can be part of the main processor of a device such as the main processor of a cellular phone. In some embodiments the integrated circuit can be part of an auxiliary processor of a device such as a processor that is connected to the motherboard of a laptop. The integrated circuits can contain computer executable instructions and or data for performing any one of the above described processes. The computer executable instructions may be written for example in a specialized application specific e.g. processor specific language.

In some embodiments computer executable instructions based on the C programming language that total less than 1 MB are sufficient to carry out process . Execution of these computer executable instructions requires no more than 300 kilobytes 16 bit bytes of run time memory e.g. random access memory . Modern computing systems and or processors are well capable of processing computer executable instructions of these sizes. Indeed in these embodiments network interface bandwidth i.e. input bandwidth not processor speed is typically the gating factor to processing even higher volumes of network traffic.

In some embodiments one or more portions of process may be implemented together with a digital security threat detector such as the network activities of interest detector described in U.S. Pat. No. 8 347 391 which is also owned by Applicants. Portions of U.S. Pat. No. 8 347 391 directed to the creation and use of meta expressions for detecting network activities of interest such as computer viruses are hereby incorporated by reference for all purposes. The implementation of process with a digital security threat detector is beneficial because a threat that avoids detection by the digital security threat detector and therefore successfully compromises a computing system can be later addressed using one or more portions of process .

Although only certain exemplary embodiments have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of this disclosure. Aspects of embodiments disclosed above can be combined in other combinations to form additional embodiments. All such modifications are intended to be included within the scope of this technology.

For instance in some embodiments the above described techniques may be modified to detect a compromised computing system that is not networked. More specifically a non networked computing system may still produce characteristic emanations in the form of memory data when one of its services becomes compromised. The above described techniques may thus be adapted to use memory dumps instead of captured network packets in determining meta expressions and in identifying system compromises using meta expressions. The determining of meta expressions and or the monitoring of memory contents using meta expressions can be performed by software and or hardware on the local non networked computing system.

