---

title: System and method for developing an application
abstract: In some aspects, the present embodiments provide a system, server, and computing device for building and modifying a user interface of an application executable on a computing device. The method may be performed by a server that is remote from the computing device. In some embodiments the method comprises: receiving parameters for updating a user interface element of the application, the user interface element being identified at the server by a programming language unit for the user interface element in the program code of the application; and sending the parameters to the computing device, wherein the computing device receives the parameters, updates the user interface element of the application with the parameters, and displays a modified user interface for the application, the modified user interface comprising the updated user interface element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507609&OS=09507609&RS=09507609
owner: Taplytics Inc.
number: 09507609
owner_city: Toronto
owner_country: CA
publication_date: 20140929
---
The present application claims the benefit of the filing date of U.S. provisional patent application Ser. No. 61 884 061 filed on Sep. 29 2013 and U.S. provisional patent application Ser. No. 61 988 597 filed on May 5 2014 the disclosures of which are incorporated herein by reference.

The described embodiments relate to systems and methods for developing an application and in particular systems and methods for developing an application for a computing device.

When creating a user interface UI for an application e.g. mobile applications that may be executable on mobile devices running the iOS or Android operating system a programmer or software developer typically writes source code using an Integrated Development Environment IDE or text editor. To generate the application the source code is translated e.g. via a compilation or interpretation process into machine code which can be executed by a processor on the computing device.

When creating a user interface for the application programmers are typically required to manually code the user interface using programming language units e.g. class definitions provided by the operating system. For example they may manually code the user interface by entering the parameters for the programming language units into the source code. Alternatively an interface editor such as Interface Builder for iOS may be used to visually construct the user interface. Source code may be generated from the interface editor which can then be compiled into executable code. In further embodiments eXtensible Markup Language XML may be manually coded and the resultant XML data may be used to generate the user interface. Using these traditional methods any changes desired to be made to parameters of the user interface elements would typically require a re compilation of the source code and the generation of a new executable.

In one aspect some embodiments of the present disclosure provide a method of modifying a user interface of an application executable on a computing device the method to be performed by a server that is remote from the computing device the method including receiving parameters for updating a user interface element of the application the user interface element being identified at the server by a programming language unit for the user interface element in the program code of the application and sending the parameters to the computing device wherein the computing device receives the parameters updates the user interface element of the application with the parameters and displays a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the application on the computing device includes executable code corresponding to the programming language unit for the user interface element and the parameters are received by the executable code.

In various embodiments the class definition includes a subclass of a user interface class provided by an operating system of the computing device.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a server causes the processor to perform one or more of the methods of modifying a user interface of an application executable on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a server including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of modifying a user interface of an application executing on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a method of modifying a user interface of an application executable on a computing device the method including the computing device receiving parameters for updating a user interface element of the user interface from a server the user interface element being identified at the server by a programming language unit for the user interface element in the program code of the application updating the user interface element of the application with the parameters and displaying a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the application on the computing device includes executable code corresponding to the programming language unit for the user interface element and the parameters are received by the executable code.

In various embodiments the class definition includes a subclass of a user interface class provided by an operating system of the computing device.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a computing device causes the processor to perform the methods of modifying a user interface of an application executing on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a computing device including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of modifying a user interface of an application executable on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a system for modifying a user interface of an application the system including a server including a first processor and a first memory storing first instruction which when executed by the first processor cause the first processor to perform various methods described herein and a computing device for executing the application the computing device including a second processor and a second memory storing instructions which when executed by the second processor cause the second processor to perform various method described herein.

In another aspect some embodiments of the present disclosure provide a method of controlling modifications made to a user interface of an application the method including providing a plurality of development roles associating at least one user interface element of the application with one development role of the plurality of development roles the user interface element being identified by a programming language unit for the user interface element in the program code of the application and when a user identity associated with the one development role attempts to modify the user interface of the application allowing parameters for updating the at least one user interface element associated with the one development role to be received and disallowing access to the remaining user interface elements of the application not associated with the one development role.

In various embodiments the method may include receiving first login information for the user identity associated with the one development role receiving the parameters for updating the at least one user interface element associated with the one development role and storing the parameters so that the received parameters can be reviewed prior to being sent to a computing device where the application is being executed.

In various embodiments the method may include receiving second login information for a user identity associated with another development role of the plurality of development roles and displaying the stored parameters for updating the at least one user interface element associated with the one development role.

In various embodiments the method may include receiving input approving of the stored parameters for updating the at least one user interface element associated with the one development role and sending the approved parameters to the computing device where the application is being executable wherein the computing device receives the parameters updates the user interface element of the application with the parameters and displays a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the method further includes receiving input disapproving of the stored parameters for updating the at least one user interface element associated with the one development role and storing information indicating that the stored parameters for updating the at least one user interface element has been disapproved the information being retrievable by the user identity associated with the one development role.

In various embodiments the one development role includes a role selected from a design role a marketing role a brand role and a legal role.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a server causes the processor to perform the methods for controlling modifications made to a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a server including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of controlling modifications made to a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a method of configuring a user interface of an application the method including receiving input selecting a user interface element of the application the user interface element being identified by a programming language unit for the user interface element in the program code of the application associating the user interface element with a first geographic location setting and receiving first parameters for use in updating the user interface element of the application when the application is executing on a first computing device that satisfies the first geographic location setting.

In various embodiments the method further includes receiving a first device geographic location from the first computing device determining that the first device geographic location satisfies the first geographic location setting and sending the first parameters to the first computing device wherein the first computing device receives the first parameters updates the user interface element of the application with the first parameters and displays a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the method further includes associating the user interface element with a second geographic location setting and receiving second parameters for use in updating the user interface element of the application when the application is executing on a second computing device that satisfies the second geographic location setting.

In various embodiments the method further includes receiving a second device geographic location from the second computing device determining that the second device geographic location satisfies the second geographic location setting and sending the second parameters to the second computing device wherein the second computing device receives the second parameters updates the user interface element of the application with the second parameters and displays a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the user interface element is simultaneously associated with the first geographic location setting and with the second geographic location setting so that the application executing on the first computing device located at the first device geographic location displays the user interface element updated with the first parameters and simultaneously the application executing on the second computing device located at the second device geographic location displays the user interface element updated with the second parameters.

In various embodiments the user interface element is one of a plurality of user interface elements belonging to a theme and wherein the associating of the user interface element with the first geographic location setting is performed by associating the theme with the first geographic location setting.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a server causes the processor to perform the methods of configuring a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a server including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of configuring a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a method of modifying a user interface of an application executable on a computing device the method including the computing device sending a device geographic location of the computing device to a server receiving parameters for use in updating a user interface element of the user interface from the server the server having associated the user interface element with a geographic location setting and determined that the device geographic location satisfies the geographic location setting wherein the user interface element is identified at the server by a programming language unit for the user interface element in the program code of the application updating the user interface element of the application with the parameters and displaying a modified user interface for the application the modified user interface including the updated user interface element.

In various embodiments the parameters are for use in updating a plurality of user interface elements of the user interface the plurality of user interface elements belonging to a theme.

In various embodiments the server has associated the theme with the geographic location setting and the user interface was associated with the geographic location setting by virtue of belonging to the theme.

In various embodiments the method further includes updating the plurality of user interface elements of the application with the parameters and displaying a modified user interface for the application the modified user interface including the plurality of updated user interface elements.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a computing device causes the processor to perform the methods of modifying a user interface of an application executing on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a computing device including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of modifying a user interface of an application executable on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a system for configuring a user interface of an application the system including a server including a first processor and a first memory storing first instruction which when executed by the first processor cause the first processor to perform the methods of configuring a user interface of an application as described herein and a computing device for executing the application the computing device including a second processor and a second memory storing instructions which when executed by the second processor cause the second processor to perform the methods of modifying a user interface of an application executable on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a method of processing usage information about a user interface of an application the method including identifying first parameters used by a user interface element in a first instance of the application at a first computing device the user interface element being identified by a programming language unit for the user interface element in the program code of the application receiving first usage information from the first computing device and processing the first usage information as being associated with the first parameters.

In various embodiments the method further includes associating the first parameters with a first test configuration so that when the first usage information is processed the first usage information is processed as being associated with the first test configuration.

In various embodiments the processing includes transmitting the first usage information to an external server providing analytics services.

In various embodiments the user interface element is part of a plurality of user elements belonging to a theme the theme being associated with the first test configuration and wherein the first parameters are associated with the first test configuration by virtue of the theme being associated with the first test configuration.

In various embodiments the method further includes identifying second parameters used by the user interface element in a second instance of the application at a second computing device receiving second usage information from the second computing device and processing the second usage information as being associated with the second parameters.

In various embodiments the method further includes associating the second parameters with a second test configuration so that when the second usage information is processed the second usage information is processed as being associated with the second test configuration.

In various embodiments the processing includes transmitting the second usage information to an external server providing analytics services.

In various embodiments the user interface element is part of a plurality of user elements belonging to a theme the theme being associated with the second test configuration and wherein the second parameters are associated with the second test configuration by virtue of the theme being associated with the second test configuration.

In various embodiments the first usage information is comparable to the second usage information to determine whether one of the first parameters and the second parameters is preferable to the other of the first parameters and the second parameters.

In various embodiments the first parameters and the second parameters are simultaneously deployed on the first computing device and the second computing device respectively.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a server causes the processor to perform the methods of processing usage information about a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a server including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of processing usage information about a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a method of providing usage information about a user interface of an application the method including providing the user interface of the application the user interface including a user interface element that is identified by a programming language unit for the user interface element in the program code of the application wherein the user interface element is configured with parameters and sending usage information so that the usage information can be processed as being associated with the parameters.

In various embodiments the usage information is sent to a server and the server processes the usage information as being associated with the parameters.

In various embodiments the usage information is sent to an external server providing analytics services and the external server processes the usage information as being associated with the parameters.

In various embodiments the parameters are associated with a test configuration so that when the usage information is processed the usage information is processed as being associated with the test configuration.

In various embodiments the user interface element is part of a plurality of user elements belonging to a theme the theme being associated with the test configuration and wherein the parameters are associated with the test configuration by virtue of the theme being associated with the test configuration.

In various embodiments the method further includes receiving information indicating that the parameters are associated with a test configuration.

In various embodiments the information indicating that the parameters are associated with the test configuration is received from the server.

In various embodiments the information indicating that the parameters are associated with the test configuration is received as input via a user interface provided on the computing device executing the application.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a computing device causes the processor to perform the methods of providing usage information about a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a computing device including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of providing usage information about a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a system for processing usage information about a user interface of an application the system including a server including a first processor and a first memory storing first instruction which when executed by the first processor cause the first processor to perform the methods of processing usage information about a user interface of an application as described herein and a computing device for executing the application the computing device including a second processor and a second memory storing instructions which when executed by the second processor cause the second processor to perform the methods for providing usage information about a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a method of configuring a user interface of an application the method including receiving input selecting a user interface element of the application the user interface element being identified by a programming language unit for the user interface element in the program code of the application associating the user interface element with a setting and receiving parameters for use in updating the user interface element of the application when the application is executing on a first computing device that satisfies the setting.

In various embodiments the method further includes receiving information from the first computing device determining that the information satisfies the setting and sending the first parameters to the first computing device wherein the first computing device receives the first parameters updates the user interface element of the application with the first parameters and displays a modified user interface for the application the modified user interface including the updated user interface element.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a server causes the processor to perform the methods of configuring a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a server including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of configuring a user interface of an application as described herein.

In another aspect some embodiments of the present disclosure provide a method of modifying a user interface of an application executable on a computing device the method including the computing device sending information to a server receiving parameters for use in updating a user interface element of the user interface from the server the server having associated the user interface element with a setting and determined that the information satisfies the setting wherein the user interface element is identified at the server by a programming language unit for the user interface element in the program code of the application updating the user interface element of the application with the parameters and displaying a modified user interface for the application the modified user interface including the updated user interface element.

In another aspect some embodiments of the present disclosure provide a computer readable medium including instructions which when executed by a processor of a computing device causes the processor to perform the methods of modifying a user interface of an application executing on a computing device as described herein.

In another aspect some embodiments of the present disclosure provide a computing device including a processor and a memory storing instructions which when executed by the processor cause the processor to perform the methods of modifying a user interface of an application executing on a computing device as described herein.

For simplicity and clarity of illustration where considered appropriate reference numerals may be repeated among the figures to indicate corresponding or analogous elements or steps. In addition numerous specific details are set forth in order to provide a thorough understanding of the exemplary embodiments described herein. However it will be understood by those of ordinary skill in the art that the embodiments described herein may be practiced without these specific details. In other instances well known methods procedures and components have not been described in detail so as not to obscure the embodiments generally described herein.

Furthermore this description is not to be considered as limiting the scope of the embodiments described herein in any way but rather as merely describing the implementation of various embodiments.

The embodiments of the methods described herein may be implemented in hardware or software or a combination of both. In some cases embodiments may be implemented in one or more computer programs executing on one or more programmable computing devices including at least one processor e.g. a microprocessor a data storage device including in some cases volatile and non volatile memory and or data storage elements at least one input device and at least one output device. For example and without limitation the programmable computing devices may be a personal computer laptop personal data assistant cellular telephone smartphone device tablet computer and or wireless device. Additional examples of programmable computing devices are also discussed below. Program code is applied to input data to perform the functions described herein and generate output information. The output information is applied to one or more output devices.

In some embodiments each program may be implemented in a high level procedural or object oriented programming and or scripting language to communicate with a computer system. However the programs can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language.

In some embodiments the computing devices and methods as described herein may also be implemented as a transitory or non transitory computer readable storage medium configured with a computer program wherein the storage medium so configured causes a computing device to operate in a specific and predefined manner to perform at least some of the functions as described herein. The medium may be provided in various forms including one or more diskettes compact disks tapes chips wireline transmissions satellite transmissions internet transmission or downloadings magnetic and electronic storage media digital and analog signals and the like. The computer useable instructions may also be in various forms including compiled and non compiled code.

Moreover the subject system may be implemented as one or more software components stored on one or more computer servers that are accessible via one or more client machines in a client server architecture. In such case the system can be considered to be a hosted software offering or a software service in a software as a service deployment.

From a high level perspective the present embodiments provide a platform for developing applications that allow developers to dynamically update user interface elements of a deployed application. In particular the server may provide the ability to modify parameters of user interface elements of the application as they are defined at the programming language level of the application. In doing so a software developer may be able to alter the appearance of the user interface of an application with a granularity that would typically require a re generation e.g. a re compilation of the machine code.

In various embodiments the server may control the scenarios in which the modifications are made to the user interface.

For example in some embodiments the system may be able to provide different development roles that user identities can be associated with. In such case the system may be configured to associate certain user interface elements or groups of user interface elements that are modifiable on the application with a development role so that only user identities associated with the development role are allowed to update the user interface elements. Additionally the system may provide workflows where modifications made by a user identity associated with one development role e.g. a Designer role can be reviewed and approved by another user identity associated with another development role e.g. a Reviewer or Manager role prior to being transmitted to a computing device.

In another aspect the system may send different parameters for updating a given user interface element or a group of user interface elements on an application based on the various information e.g. the geographical location of the computing device. For example in such an embodiment the server may associate certain user interface elements that are modifiable on the application with a setting e.g. geographic location setting . In the example case where the setting is a geographic location setting the server may then receive device geographic location information from computing devices. If the device geographic location information received from the computing devices match the geographic location settings associated with the user interface element then the server can send parameters for updating the user interface element to the computing device. In some configurations a given user interface element may be associated with multiple geographic location settings and different parameters may be provided to the same user interface element of an application if the application is being executed on computing devices which are in different geographic locations.

In yet another aspect the system may allow usage information relating to whether one set of parameters used with a given user interface element is preferable to another set of parameters used with the same user interface element. For example when updating usage elements with two different sets of parameters for a given user interface element the server may record that the different sets of parameters are each deployed to different computing devices. The server may then receive usage information from a first computer device executing the application in which the user interface element uses the first set of parameters. As well the server may receive usage information from a second computing device executing the application in which the user interface element uses the second set of parameters. When the usage information is received from the different computing devices the server may then associate the usage information with the particular set of parameters that the computing device is using. The different usage information resulting use of the different parameters may then be compared to each other to determine if one set of parameters is preferable to the other e.g. if one set of parameters resulted in higher user engagement etc. 

Referring to shown there generally as is a block diagram for a system for developing an application in accordance with at least one example embodiment. The system may include a server a computing device a developer device all connected to each other via a network .

The server may include a server processor connected to a memory which stores instructions for providing a development module and a development interface . The development module may be a software module including instructions which when executed by the server processor causes the server processor to provide the software application development functionality described herein. The development module may communicate with a development interface that allows external developer devices to access the functionality of the development module .

In various embodiments the development interface may be a web portal or a web interface that may be accessible by a developer device via a web browser such as Google Chrome Microsoft Internet Explorer or Mozilla Firefox. In other examples the development interface may be an Application Programming Interface API that allows functionality of the development module to be accessed via a client application e.g. a desktop or mobile application provided on developer device . As will be understood other mechanisms of providing access to the functionality of the development module may also be possible. For example access to the functionality of the development module may be accessed locally via user input output mechanism provided on the server itself.

When creating an application using the system the software development module may allow a developer device to register an application for use or intended for use if it has not been created yet with the system . The server may for example store an identifier for an application in the application database that may later be submitted by a software developer to register their application to the development module .

At the developer device the software developer may use a Software Development Kit SDK associated with the present system when writing source code for that application. As will be discussed below the SDK may include programming language units e.g. class definitions library functions etc. that are usable by a software developer to create user interface elements that are able to communicate with the development module . To register the created program with the development module the development device may provide the application identifier generated earlier at the development module back to the development module so that the particular application identifier can be associated with that particular application.

The application can then be compiled and generated so as to be deployed on the computing device . As will be understood the deployment process may be performed in a variety of ways. Depending on the nature of the operating system and or platform of the computing device an application may be deployed directly to the computing device and or the application may be downloaded from an application marketplace. For example if the computing device executes the iOS operating system provided by Apple Inc. a compiled application may first be submitted to an application approval process hosted by the provider of the operating system prior to the application being made available on the application store e.g. the App Store provided by the operating system. Other example application deployment platforms include Google Play provided on the Android operating system the Windows Phone Store provided on the Windows Phone operating system and BlackBerry World provided on the BlackBerry platform. It will be understood that as used herein the word app may be a short form for the word application .

The development module may store references to the various user interface elements of a given application in a user interface UI elements database . In operation the development module may read the UI elements database and present a user interface e.g. via the development interface that allows parameters of the user interface elements to be updated. Examples of such a user interface is shown in and discussed in greater detail below.

The server also contains a user identity database for storing user information such as user profiles usernames password security credentials and so forth. As discussed above in some embodiments the user identities may be associated with various developer roles such that access to certain user interface elements of a given application may be controlled based on a developer role that a given user identity is associated with. A developer roles database may also be provided on the server to store information associated with the developer roles.

The computing device may contain a device processor a device memory and a display . The device memory may generally store instructions which when executed by the device processor causes the device processor to provide functionality of various applications stored thereon. As noted above an application may have been generated at the developer device using the SDK which provides programming language units that allow user interface elements of the user interface of the application to communicate with the development module of the server .

It will be understood that the server need not be a dedicated physical computer for executing the development module and or development interface . For example in various embodiments the various logical components that are shown as being provided on server may be hosted by a third party cloud hosting service such as Amazon Web Services Elastic Compute Cloud Amazon EC2 .

As will be understood a computing device may be any suitable computing device capable of executing an application that is created at the developer device . For example in various embodiments the computing device may include mobile devices such as smartphones tablets or laptops as well as less conventional computing devices such as smart appliances e.g. computers embedded within refrigerators thermostats stoves microwaves televisions wearable computing devices such as smartwatches smart glasses and or smart clothing computers embedded into automobiles cars or vehicles e.g. as may have been provided for navigation and or entertainment purposes . Further examples of computing devices include digital media receivers programmable billboards advertising displays and or medical diagnostic equipment.

A network may be any network s capable of carrying data including the Internet Ethernet plain old telephone service POTS line public switch telephone network PSTN integrated services digital network ISDN digital subscriber line DSL coaxial cable fiber optics satellite mobile wireless e.g. Wi Fi WiMAX SS7 signaling network fixed line local area network wide area network and others including any combination of these.

It will be understood that the different components shown in can be provided in a variety of ways. For example the server processor and or the device processor may be any type of processor such as any type of general purpose microprocessor or microcontroller a digital signal processing DSP processor an application specific integrated circuit ASIC a programmable read only memory PROM or any combination thereof.

Similarly the server memory and or the device memory may include any type of computer memory that is located either internally or externally to the computing device such as for example random access memory RAM read only memory ROM compact disc read only memory CDROM electro optical memory magneto optical memory erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM a hard disk drive a solid state drive or any other form of suitable computer readable medium that may be used in electronic devices.

Additionally the server and or computing device may include one or more input devices not shown such as a keyboard mouse camera touch screen and or a microphone and may also include one or more output devices such as a display screen e.g. display and or a speaker. The server and or computing device may also have a network interface for connecting to a network in order to communicate with other components.

It will be understood that although each of data stores of server are illustrated in separately they can be stored together as separate tables within the same or multiple databases both locally and or remotely. Additionally other persistent storage methods such as encrypted or unencrypted files may also be used to provide persistent storage.

Remotely Modifying User Interface Elements that are Identified by their Respective Programming Language Units

Referring to shown there generally as is a flowchart diagram illustrating a method for developing an application in which the user interface of an application executing on a computing device can be modified in accordance with at least one example embodiment. For ease of illustration reference may also simultaneously be made to the components of . In describing the flowchart of reference will further simultaneously be made to . The acts illustrated in may be performed by various components of such as the server and the computing device .

At step the server may receive parameters for updating a user interface element of the application . As noted above the user interface element may be identified at the server by a programming language unit in the program code of the application executing on the computing device . In various embodiments the programming language unit may be a class definition provided in the SDK . For example the various classes provided in the SDK may include classes for views labels buttons or various other UI controls with which a developer may construct a user interface for an application by writing code that uses the class definitions provided in the SDK .

In various embodiments programming language units for the user interface elements in the SDK may map onto corresponding programming language units for the user interface elements that may be provided in the Application Programming Interface API of an operating system of the computing device .

For example referring simultaneously to shown there generally as is an example mapping amongst native programming language units for given user interface elements provided on an operating system and corresponding programming language units for the same user interface elements that may be provided by the SDK . As illustrated the programming language units are names of classes that provide various UI controls such as Views Labels Text Fields Image Views and or Buttons. In the left hand column there is shown the names of the classes that the iOS operating system provides for the UI controls. In the middle column names of classes for the analogous UI elements on the Android operating system are shown. In the right hand column the corresponding classes provided by the SDK of the present system are shown e.g. called LPView LPLabel LPTextField LPImageView and LPButton . In various figures the word LaunchPad is used generally to refer to the system of the present embodiments. However it will be understood that the name is used merely for illustrative purposes.

In some other embodiments a technique of method swizzling is used to modify user interface elements for an application executing on the computing device. In such embodiments an SDK with launch pad or LP programming language units e.g. LP classes providing various UI controls for the user interface elements are no longer required. Method swizzling provides a technique within the context of object oriented programming to set the properties of any native UI class of a given operating system without needing to subclass.

Unlike subclassing as discussed below method swizzling can be used to exchange a native UI element class implementation with another implementation during runtime. Method swizzling can also be used to add a new class implementation to the native UI element classes during runtime Method swizzling can be further used to exchange any existing method in the application with an alternate method. This can be used to provide an additional or replacement implementation of the method being swizzled.

Some uses of replacement methods may include but are not limited to a replacement method code that replaces or protects the existing method from creating exceptions or crashing the application. Additional uses may include replacing the existing code with new code based functionality algorithms payment mechanisms gameplay mechanics or any other elements of the application that are defined in code.

In some further embodiments a technique of view hierarchy observing is used to modify user interface elements for an application executing on the computing device. In such embodiments an SDK observes changes to the UI View hierarchy of the complied application and modifies UI elements during runtime. This may be achieved by the SDK identifying UI elements contained with a view hierarchy by observing the positioning superclass subclass location and any other attributes of the view within the view hierarchy. Once identified the SDK may apply modified view properties to the unique UI element thereby changing the elements appearance functionality positioning and location and any other attributes specified within the view hierarchy. This method may be applied to applications built for the iOS operating system Android operating system and any other applicable operating system or programming platform.

Referring back to chart shown in illustrating an example for the programming classes that may be provided by the iOS operating system and the Android operating system. However it will be understood that any number of native UI control classes and in some embodiments all the native UI control classes for any operating system may be mapped to UI classes provided in the SDK .

When constructing an application instead of creating a user interface element using the typical native classes provided by an operating system of the computing device the developer may use the classes provided by the SDK . As noted above these classes may contain code that allows the development module to identify the user interface element when it is present in a complied application executing on the computing device . In this way the development module may provide a user interface that allows a developer device to enter parameters for updating the user interface element of an application that is identified by the programming language unit in the application code of the application .

In various embodiments the UI classes provided by the SDK may be configured to appear and behave in a manner that is substantially similar to the counterpart classes provided by the operating system on which the application is to be executed. For example an LPButton classes used to construct a user interface in an application that is for execution on the iOS operating system can appear and behave like the UIButton class that is natively provided by the iOS operating system. This may be done so that an application created using the SDK of the present embodiments may generally appear according to the design aesthetics that a user would typically expect on a computing device . However by constructing the application using the SDK the various user interface elements of the application may additionally be provided with the ability to be updated remotely via the development module .

In various embodiments a developer need not initialize a given user interface element with parameters when writing code using the SDK for the application . Instead the developer may be able to leave the various parameters of the user interface element uninitialized and the parameters can be defined through the server via the processes explained below.

It will be understood that as you herein the term parameters includes not only the various data properties that are associated with the programming language unit of the user interface element e.g. X Y position properties of a class . Rather the term parameters may include the actual content that is used by the user interface element . For example such actual content may include an updated image a font that is desired to be used and or audio files. Referring now simultaneously to shown there generally as is a screenshot of an example user interface for updating user interface elements for an application executing on the computing device in accordance with at least one example embodiment. In various embodiments the user interface shown in may be provided by the development module through the development interface and may be accessible by the developer device .

As illustrated the user interface may show a list of user interface elements that can be selected by a developer for modification. As illustrated a user interface element entitled Refresh Title is selected. To organize the various parameters of the user interface element that can be modified a series of tabs e.g. labeled General Text View and Other may also be provided. In the user interface the View tab is selected and a number of controls for modifying the parameters of the Refresh Title UI element is shown. In various embodiments the parameters of the UI element that can be modified are substantially similar to the parameters that would be normally be entered by a developer when they are writing program code to construct a user interface using the corresponding UI element programming language unit provided natively provided by an operating system on the computing device . As will be understood the various parameters that a user interface element programming language unit e.g. a UI class is configured with can affect how the user interface element appears in the user interface of an application .

For example these include parameters associated with color interaction the position e.g. X and Y coordinates of the UI element within the UI . Specifically the parameters available for modification illustrated in the View tab are divided into several panes based whether the given parameters are common to the corresponding native class in both the operating systems supported by the example embodiment e.g. by the iOS and Android operating systems or whether the parameters are unique to the native class of each of the operating systems. As shown the parameters that can be modified for both operating systems are shown in pane the parameters that are unique to the iOS operating system are provided on pane and the parameters that are unique to the Android operating system are provided on pane .

Referring back to once various parameters for updating a user interface element have been received by the server e.g. have been entered by a software developer via the user interface of at step the parameters may be transmitted to the computing device . The transmission may be performed via network using standard network protocols for example.

At step the computing device may receive the parameters for updating a user interface element . In various embodiments the application on the computing device may include executable code corresponding to the programming language unit for the user interface element and the parameters may be received by this executable code. As noted the user interface elements may correspond to compiled code from UI element classes provided in the SDK with this compiled code configuring the computing device to receive the parameters.

At step the computing device may update the user interface element of the application with the parameters that were received at step . As discussed above with respect to the various parameters that can be modified at the server may include various properties of the UI programming language unit that would typically only be modifiable when the UI is being constructed. The UI programming language units of the present embodiments are configured to receive such parameters and internally update the UI elements with those parameters.

At step after a given UI element internally updates its own properties with the parameters it can instruct the application to redraw its UI so that the modified user interface for the application which includes the updated user interface element can be displayed.

Referring now simultaneously to shown there generally as and are example screenshots of a user interface for an application executing on the computing device before and after parameters for user interface elements of the application executing on a computing device have been updated in accordance with at least one example embodiment. As illustrated the example application entitled Cloud Photos may provide access to a number of albums containing photos which can be accessed.

As shown the screenshot shows the appearance of a user interface of the application with a number of user interface elements prior to their appearance being updated when parameters are provided to the computing device . For example there is a settings button a reply button album labels thumbnail previews for the photos a button to add additional albums and a button to access the camera functionality of the computing device . As can be seen the appearance of each of the individual user interface elements shown in the user interface is modified after new parameters have been provided to the user interface elements . For example in the example screenshot the same user interface elements have an updated appearance based on the received parameters. For example for the settings button the border and background surrounding the button has been removed and the icon on the button showing a gear has been replaced with the word Settings . Similarly for the edit button similar changes have been made to replace the icon with the word Edit and as well to remove the border and background from the button. For the album labels it can be seen that the font has been changed from a thicker font to one that appears more streamlined. For the thumbnail preview it can be seen that the image has been expanded to fill the entirety of the space allocated for the thumbnail and the borders and background around the thumbnail image have been removed. Further the button to add additional albums and the button to access the camera functionality has been modified to remove the borders and background.

As discussed above the present embodiments allow parameters for each of these UI elements to be updated individually so as to be able to provide a granular amount of control over each of the UI elements as is desired.

Referring now to shown there generally as is another screenshot of an example user interface for updating user interface elements for an application executable on the computing device in accordance with at least one example embodiment. Similar to the user interface shown in the user interface of may also be provided by the development module e.g. as may be accessible by the developer device through the development interface .

The user interface of shows the user interface shown in but with another tab labeled Text selected. In this tab controls may be provided that allows users to modify the text of a given selected UI element e.g. as illustrated the UI element entitled Refresh Title is selected . As shown a developer accessing such an interface may for example enter or modify the text of the user interface element modify the justification of the text and or change the font or the font size for the text.

Referring to shown there generally as is a further screenshot of an example user interface for updating user interface elements for an application executable on the computing device in accordance with at least one example embodiment. The illustrated user interface illustrates the user interfaces shown in but with yet another tab selected. As shown the General tab is shown where the development module can receive input to update the identifier used by the development module to identify a given user interface element . As illustrated the term Element Key is used to refer to a user interface element identifier for a particular user interface element . As discussed above the particular user interface element being selected in the illustrated screenshot is entitled Refresh Title . The controls shown on the General tab allow the Refresh Title identifier to be modified and saved e.g. onto the UI elements database shown in so that the updated identifier may subsequently be used to identify the particular UI element .

In embodiments where method swizzling or view hierarchy observing techniques are used modifying the UI element properties by setting or controlling properties of element keys is not required. That is in such embodiments defining a user interface element identifier for a particular user interface element as well as the providing controls associated with the identifier are not required. Instead method swizzling or view hierarchy observing allows the developer to replace or exchange existing implementation of the user interface element with another by for example adding a new UI element class or replacing an existing UI element class during runtime.

Referring to shown there generally as is still a further screenshot of an example user interface for updating user interface elements for an application executable on the computing device in accordance with at least one example embodiment. As with the user interfaces shown in the user interface shown in may similarly be made available by the development module for access by a developer device .

The user interface provides an example layout of the higher level aspects of the user interface provided by the development module . As there may be a large number of individual user interface elements that can be incorporated into the user interface of the application searching for any particular one user interface element may be difficult.

The user interface illustrates one example way in which such information can be organized. As shown the left hand pane of the user interface may provide a list of applications that a developer can work on. For each application there may be different selectable functionality that the development module can provide. As illustrated the Views option is selected as is indicated by the title suggesting the navigational path a developer may have taken when accessing the development module . When this option is selected controls provide access to different Views for the application . As shown there are two views that can be selected a Settings view and a Root view. Generally a view may be a particular screen provided by the user interface of the application . If any one of these views is selected the development module may display a user interface similar to that which is shown in or C which allows selection and modification of the parameters of the UI elements used on that particular view. For example referring briefly back to the title for the user interface shows that the Root View has been selected such that the list of available UI elements to be modified are the ones that would appear on the selected view in the application .

It will be noted that in various embodiments modifications may be made to the method of and the user interfaces shown in .

For example in the user interfaces of it may be possible to select multiple user interface elements at once so as to allow modification of the common parameters amongst the selected user interface elements . For example in such an embodiment the user interface provided by the server in each of may be configured to only show the common parameters amongst the selected user interface elements that can be modified.

Another modification that can be made is with respect to how step in can be performed. For example instead of immediately pushing the parameters to the computing device upon the entering of the parameters at the server the parameters may be collected in a staging area until they are ready to be deployed to the computing device . Once the parameters are ready to be deployed in various embodiments an option to Deploy Live may be provided which if selected makes the parameters available for access to the computing device . In various embodiments the parameters may be distributed via content delivery networks or directly from the server . In such embodiments the computing device may periodically check for whether there are any new updates that have been deployed e.g. this may happen at the computing device upon the opening of the application or as a background process of the application . If there are updates then the parameters may be retrieved or pulled by the computing device . It will be understood that whether the parameters are in fact actively pushed from the server or whether they are pulled by the computing device both scenarios along with any other scenarios that result in the parameters being provided to the computing device are within the contemplation of the sending step shown in .

Mapping Programming Language Units Provided for UI Elements in the SDK to Corresponding Native UI Elements Provided on an Operating System

As discussed above with respect to the SDK may be able to provide programming language units e.g. class definitions for UI elements that map onto corresponding UI elements that have been provided natively by a given operating system of the computing device .

In various embodiments the programming language units in the SDK may be provided as class definitions that extend or subclass the native classes that are provided by the operating system. As will be understood subclassing or extending a class is a technique used within the context of object oriented programming that allows the subclass to retain the functionality e.g. the methods and data properties of the parent class but at the same time also allows additional functionality to be added to the subclass. In various embodiments each of the UI element classes provided in the SDK may extend one or more corresponding native UI class of a given operating system so as to be able to insert functionality into the subclass that allows the particular user interface element to communicate with the development module e.g. to receive updated parameters .

Since the subclass contains all the properties of the parent operating system provided UI element class when parameters for updating those properties are received by an object corresponding to the subclass the UI element object can access and update the properties accordingly. After the properties have been updated the subclass can similarly invoke methods provided in the parent class for the UI element to redraw itself.

In the example class names discussed above with respect to the LPButton class may for example extend or subclass the native UIButton class provided by the iOS operating system so that when the LPButton class is used in an application the instance of the LPButton class will appear and behave as if it were an instance of the UIButton class but the additional functionality provided in the LPButton subclass will enable the instance of the LPButton class e.g. a LPButton object to receive parameters from the development module .

In various embodiments a given UI class provided in the SDK may inherit from corresponding classes for each operating system that an application is intended to execute on. For example this may allow the UI class in the SDK to inherit the properties of the corresponding classes in each operating system e.g. the properties in both the iOS and the Android operating systems . During compilation it may then be possible to select which exact parent class to inherit from so that the resultant executable can run on the intended operating system. In this manner the UI classes in the SDK may provide for a platform neutral way of developing an application that reduces the work involved with porting an application from one operating system to another. This platform neutrality feature may encourage adoption of the development methods of the present embodiments.

While the programming technique of subclassing a native UI element class provided at an operating system is discussed herein it will be appreciated that any way of mapping a UI element class in the SDK to the native UI element class of an operating system may be possible. For example the UI element class in the SDK may encapsulate the UI element class of an operating system and replicate the external interface of the UI element class of an operating system.

As well in various embodiments it may not be necessary for the software developer to construct their user interface using classes provided in the SDK . For example in an alternative embodiment pre existing source code may be processed to identify references to the native UI element classes of an operating system. When such references are found it may be possible to replace such references with references to the corresponding UI element classes in the SDK . After this is done a recompilation of the code may result in the program code of the UI element classes of the SDK being included in the generated application .

Referring to shown there generally as is a flowchart diagram illustrating a method of developing an application in which modifications made to a user interface of an application are controlled according to development roles in accordance with at least one example embodiment. The method may be embodied in instructions provided in the development module . In discussing the various steps of the method of reference will simultaneously also be made to the components of . Also reference will be simultaneously made to the example screenshots shown in .

As noted above in various embodiments the server may control the scenarios in which modifications are made to the user interface elements provided on an application executing on the computing device . In particular in some embodiments the server may be able to provide different development roles that user identities can be associated with. In such case the server may be configured to associate certain user interface elements with a development role so that only user identities associated with the development role are allowed to update the user interface elements . Additionally the system may provide workflows where modifications made by a user identity associated with one development role e.g. a Modifier role can be reviewed and approved by another user identity associated with another development role e.g. a Reviewer or Manager role prior to being transmitted to a computing device .

At step the server may provide a plurality of development roles. For example these roles may be associated with different areas of expertise for individuals that may provide input into the development of application . For example these roles may include a Legal role a Design role a Marketing role and or a Brand role. Additionally or alternatively these roles may be associated with a seniority level. For example an inexperienced person in the Design role may be associated with a regular Modifier role whereas a more experienced senior designer maybe associated with a Design role that has a seniority level of Reviewer or Manager . As discussed above with respect to the various development roles may be stored in the Developer Roles database .

At step the server may associate at least one user interface element of the application with one development role of the plurality of development roles the user interface element being identified by a programming language unit for the user interface element in the program code of the application . As described above the user interface elements can be identified at the server at the granular level of the programming language unit e.g. the class definition in the SDK that was used to create the UI element . As the various UI elements used by a given application may be stored in the UI elements database as shown in the server may be able to associate a developer role to a given UI element .

At step the server may receive first login information for the user identity associated with the one development role. For example when registering to use the system of the present embodiments a given developer may create a username and password for logging into the server . The username and password may then be associated with a development role by an administrator user who can assign development roles to different user identities. Example log in user interfaces are shown in and are discussed below.

Referring simultaneously to shown there generally as is a screenshot of an example user interface for associating user interface elements with a development role. For example the screenshot may be displayed if a logged in user has an Administrator user identity. As shown there is a pane that provides a number of different development roles have already been created. These are illustrated as Designer Copy Writer Copy Editor App Owner Legal and Marketing . In particular the Designer role is shown as being selected and a number of tabs e.g. the Apps tab and the Element tab are provided that allow the selection of different aspects of application at varying levels of granularity to be allowed to be modified by a user of the selected development role. As shown the Apps tab is selected and the example is illustrated as providing a control that indicates that the Designer role is allowed to edit user interface elements associated with App1 e.g. a checkmark indicating that access is allowed . Additionally there is a control that indicates that the Designer role is not allowed to edit user interface elements associated with App3 e.g. an X indicating the access is disallowed . As will be understood if the Elements tab is selected a more granular listing of the available user interface elements to be edited for each application may be displayed and UI controls may be provided that allows an administrator to individually select whether a given UI element is allowed or disallowed to be accessed by a user identity associated with the Designer role. It will be understood that although various example roles have been discussed herein the server may allow an administrator to create any role that is desired and the access level and permissions of each role may be customized.

Once logged in the server may be able to control the user interface elements that are modifiable by a given user based on the development role associated with the user s user identity. In particular referring back to at step the server may allow parameters for updating at least one user interface element associated with the development role of the user identity to be received. At the same time at step the server may disallow access to the remaining user interface elements of the application that are not associated with the development role of the user identity of the logged in user. In this way the development roles may act as a layer of security that prevents unauthorized modification of the user interface elements of a deployed application .

Continuing on if a user sees a number of UI elements that he she can access at step the server may receive parameters for updating at least one user interface element associated with the development role. In various embodiments the development role may have been associated with a role of a lower security level and as such review of the suggested modifications to the UI elements may be required. At step the server may then store the parameters so that the parameters can be reviewed.

In some embodiments the parameters received at step may be immediately transmitted to the appropriate user interface element for the application executable on the computing device so as to immediately update the appearance of the user interface element on the application . However it is recognized that such ease in updating the appearance of UI elements on a deployed application executable on the computing device may result in negative user experiences if for example the parameters to be transmitted does not meet quality standards for the developer. Accordingly step provides for the storage of the parameters entered at step so that the parameters can be reviewed and approved prior to being transmitted to the computing device .

At step the server receives second login information for a user identity associated with another development role of the plurality of development roles. For example as noted above the second login information may be associated with a role that is of the Manager or Reviewer security level.

At step the server may display the stored parameters e.g. as stored at step for updating the user interface element that was entered by the user associated with the first login information. As the first login information was associated with a user identity with a lower security level and the second user login information is associated with a role with a higher security level the user of the second login information may be presented with the ability to review and approve disapprove the parameters entered by the first user.

Referring briefly to shown there generally as is a screenshot of an example user interface for approving disapproving parameters inputted by a first user. As illustrated in addition to the ability to select the applications that the second user himself can modify via the Your Apps button in the topmost menu bar there is also a button for accessing the Approvals that are pending for the user. When selected a pane is provided that may show the various user interface elements for which users subordinate to the second user has entered parameters to be approved. Within the pane a UI element entitled RootView Title is shown as being selected and for that element a tab is provided which when selected shows the pending approvals. As illustrated the parameters entered by a first user named John Smith are shown and collected in a window that further lists the specific parameters edited by the first user. In particular it is shown that John Smith edited the text the view position and the color of the particular RootView Title user interface element . When any of the modified parameters are selected user input may be provided to Approve or Reject the selected inputted parameter. As illustrated additional approvals from user Jane Smith in a second window are also shown and further input may be received via this window to approve disapprove the parameters submitted by the user Jane Smith .

Using a user interface such as is illustrated in for example at step the server may receive input indicating approval disapproval of the parameters as stored by the first user at step .

If the submitted parameters are approved the YES branch at the server may proceed to send the approved parameters to the computing device step . The computing device may then proceed to update the user interface of the application in accordance with the acts described above. It will be understood that step is generally analogous to step in where parameters for a user interface element can be sent to a computing device . Accordingly the discussion above explaining that the parameters may be pushed from the server or pulled by the computing device is also applicable to step .

If the modifications are not approved the NO branch at the server may proceed to store information indicating that the stored parameters for updating the user interface element has been disapproved. This information may then be viewable by the first user so that they may be informed that their suggested modification has been denied.

Configuring User Interface Elements Based on a Setting that can be Satisfied by Information from a Computing Device

Referring to shown there generally as is a flowchart diagram illustrating a method of configuring a user interface of an application executing on a computing device based on a setting in accordance with at least one example embodiment. In particular shows an example embodiment in which the setting is a geographic location setting that can be satisfied by geographic location information from a computing device . As noted above in various embodiments the server may change the parameters that are sent to a given user element depending on information that can be received from a computing device e.g. the geographic location of the computing device on which the application is residing . As illustrated in the server may perform a number of acts to interact with a first computing device and a second computing device . For ease of illustration reference will also simultaneously be made to the components shown in as well as the example screenshots shown in .

At step a server may receive input selecting a user interface element of the application the user interface element being identified by a programming language unit for the user interface element in the program code of the application . This may be performed for example by the development module providing a user interface that allows the selection of UI elements of the user interface on the application . In various embodiments the user interface provided by the development module in this regard may appear similar to where there is shown a pane for selecting user interface elements of a given application on a computing device .

Referring now simultaneously to shown there generally as is a screenshot of an example user interface for configuring a user interface of an application executing on a computing device based on geographic location in accordance with at least one example embodiment. As illustrated there is a pane for selecting a user interface element similar to what is provided in the user interface shown in . The RootView Title user interface element is again shown as being selected. However the user interface shows a tab that allows the development module to receive a geographic location setting to be associated with the selected user interface element RootView Title .

At step the server may associate the user interface element with a first geographic location setting. As shown in the user interface of a geographical map control may be provided to allow a developer to enter a geographic location setting. For example the control may provide a search box that allows location information such as street addresses to be entered. As shown an example street address of 123 Main Street Springfield Miss. is shown as being entered in the search box and the map control may shows the corresponding geographic location of the entered street address. The map control may allow for entry of markups on the map to indicate the geographic boundaries of the geographic location setting. As will be understood such boundaries may be considered a geofence and may be defined in any number of ways. For example the boundaries may be specified by a series of longitude and latitude coordinates that form an enclosed geographic area a central geographic point and the area within a defined radius from that central geographic point and or the known boundaries of any political entity such as a country city province state county region or any combination thereof.

At step after a given user interface element has been associated with a first geographic location setting the development module may proceed to receive parameters for updating the user interface element . In particular the parameters would be for use in updating the user interface element of the application when the application is executing on a computing device that satisfies the geographic location setting that has been associated with the user interface element .

Once received the parameters may be stored at the server until the server can determine that a given computing device satisfies the geographic location setting associated with the user interface element .

At some time after step at step a first computing device may send a device geographic location to the server . The device geographic location may be received at the server at step . In various embodiments to perform step the application may be provided with functionality that is able to transmit the device geographic location of the computing device to the server . For example the SDK that is provided to build an application may include functionality that can be included into each application that is usable with the system of the present embodiments. The application may then be able to provide the geographic location of the computing device to the development module .

It will be understood that the sending of the device geographic location at step may or may not be prompted by the server . For example in various embodiments the application may be configured to periodically check in with the development module so as to provide the development module with updated device geographic location information for a computing device . Alternatively the development module may be configured to periodically poll the application for the device geographic location of the computing device . In further embodiments the device geographic location may be transmitted to the development module when an application is activated and or when the user interface of the application is redrawn e.g. when an active application is brought to the foreground from the background .

At step the server may determine whether the device geographic location received at step satisfies the first geographic location setting that a user interface element was associated with at step . If so at step the server may send the parameters inputted at step to the first computing device . As noted above the parameters inputted at step were for use in updating the user interface element of the application when the application is executing on a computing device that satisfies the first geographic location setting that has been associated with the user interface element .

At steps the first computing device may then update the user interface element for which the parameters were intended and at step the first computing device may display a modified user interface for the application that includes the updated user interface element .

As will be understood steps to can be considered to be analogous to steps to of where a computing device receives parameters for a given user interface element updates the user interface element with the parameters and displays a modified user interface which includes the updated UI element . Similarly step and step discussed below are analogous to step in where parameters for a user interface element can be sent to a computing device . Accordingly the discussion above explaining that the parameters may be pushed from the server or pulled by the computing device is also applicable to steps and .

As noted above the server may associate a user interface element with one or more geographic location settings so that the same user interface element may appear differently depending on the geographic location of the computing device on which it is executing. To illustrate this steps to illustrate interactions between a server and a second computing device . As will be understood steps to are generally analogous to the earlier described steps to except that they are performed with respect to a second geographic location setting and a second computing device .

At step the server may associate the user interface element with a second geographic location setting. As noted above a geographic location setting may be inputted via a user interface similar to that which is shown as in . For example the user interface in may be modified to include a second tab beside tab which when selected provides controls similar to controls to allow an additional second geographic location setting to be entered. Such second location tab would be a setting that is also associated with a given selected user interface element in the pane e.g. the selected RootView Title UI element . As a result when the second geographic location setting is entered the second geographic location setting may be associated with the same user interface element that the first geographic location setting was associated with at step .

At step the server may receive a second set of parameters to be associated with the user interface element . Similar to step these second parameters are for use in updating the user interface element of the application when the application is executing on a computing device that satisfies the second geographic location setting that has been associated with the user interface element at step .

This second set of parameters may then be stored at the server until the server can determine that a given computing device satisfies the second geographic location setting associated with the user interface element .

At some time after step at step a second computing device may send its device geographic location to the server . This may be performed for example in a manner similar in which the first computing device sent its device geographic location to the server at step . The second device geographic location may then be received at the server at step .

At step the server may determine whether the device geographic location received at step satisfies the second geographic location setting that the user interface element was associated with at step . If so at step the server may send the second parameters inputted at step to the second computing device . As noted above the second parameters inputted at step were for use in updating the user interface element of the application when the application is executing on a computing device that satisfies the second geographic location setting that has been associated with the user interface element .

Steps to then involves the second computing device receiving the second parameters transmitted from the server at step updating the UI element step and displaying a modified UI for the application that includes the updated UI element step . As will be understood these steps may be performed in a manner that is similar to to discussed above for the first computing device which as noted are also analogous to steps to in .

Referring to shown there are example screenshots of two computing devices executing the same application but with different user interfaces in accordance with at least one embodiment. As shown there may be a first computing device that is geographically located in one location e.g. in one city such as San Francisco and a second computing device that is geographically located in another location e.g. in another city such as Los Angeles . In the illustrated example the application is for an electronic commerce store and the specific screenshot shown may be for purchasing a given item. It can be seen that generally the UI shown on the first computing device and the UI shown on the second computing device appear similar. For example both UIs may provide a title that indicates the store e.g. e Store on the top left hand corner of the screen an image of the item for sale in the middle of the screen and a description that identifies the item for sale below the image .

Certain UI elements of the application however may be able to receive parameters that differ depending on the geographic location of the computing device . For example according to the method of discussed above the Buy button user interface element on the first computing device may be have been provided with a first set of parameters that indicate that it is to appear on the top right hand corner of the screen. In contrast the Buy button user interface element on the second computing device may have been provided with a second set of parameters that indicate that it is to appear on the bottom of the screen. Similarly a Search Results button user interface element on the first computing device may have been provided with a first set of parameters that indicate that it is to appear on the bottom left corner of the screen. At the same time the same Search Results button user interface element on the second computing device may have been provided with a second set of parameters that indicate that it is to appear on the top right hand corner of the screen.

In the above manner a given user interface element may be associated with multiple geographic location settings and different parameters may be provided to the same user interface element of an application if the application is being executed on computing devices which are in different geographic locations. In this way there may be multiple versions of a given user interface that is simultaneously deployed for a given application .

This may be beneficial for example if it is desired to deploy or roll out a new user interface design in a staggered fashion. In an example scenario a given test UI design may be desired to be deployed in a limited geographic area to test if such UI design is acceptable. In such case the parameters for the UI elements used in that design may be associated with a particular geographic location setting so that only computing devices having a device geographic location that satisfies the geographic location setting will be provided with that design. The same UI elements may also be associated with a second geographic location setting that is defined as being outside the first geographic location setting for testing the UI design so that computing devices that are located outside the first geographic location setting may be provided with the original unmodified UI design. If the UI design results in poor acceptance then only a limited number of computing devices with a geographic location that satisfies the first test geographic location setting will have been affected. If the UI design results in positive acceptance then the first test geographic location setting may be expanded to include more computing devices .

It will be appreciated that various modifications can be made to the method shown in . For example although steps to are illustrated as being immediately performed after steps to and before steps to it will be appreciated that it may be possible that steps to can be performed before steps to so that the different sets of parameters are available to be transmitted once the server receives a device geographic location that satisfies either geographic location setting.

Also while the above discussion has been with respect to two different computing devices each sending their own device location it will be appreciated that the server may be able to receive the first and second device location information from the same computing device . For example this may happen if the first computing device which sent the first device location moves to a second device location and that second device location is then transmitted to the server . The server may then determine that the second device location as transmitted from the first computing device satisfies the second device location setting and the server may transmit the second parameters for the user interface element to the first computing device in response. The first computing device may then receive the second parameters for the given user interface element that is associated with the second geographic location setting and modify its user interface accordingly.

Referring to shown there are additional example screenshots of two computing devices executing the same application but with different user interfaces in accordance with at least one embodiment. The screenshots shown in are similar to the ones shown in except that they are shown for a different scenario where the geographical location settings have been set for whether the geographic location of a computing device is within a physical store and whether the geographic location of a computing device is outside of a physical store.

In there may be a first computing device that is geographically located within the physical store location and a second computing device that is geographically located outside of a physical store location. Based on previously set geographic location settings an execution of the method of may result in various user interface elements being updated according to the geographic location of the computing device . For example the user interface on the first computing device generally provides information about a physical in person retail experience. As illustrated such information includes a title welcoming a person to the physical retail store an indication of the of the physical address of the retail store e.g. at Main Street location information that identifies the location within the physical store of where a given product e.g. the Star Plush Toy can be found and an option for performing a self checkout.

In contrast since the computing device is outside of the geographic location of a physical store the user interface provided on the second computing device may provide different information that is directed to an online or e commerce retail experience. For example the title may provide an indication of the name of the electronic store e.g. RetailStore.com shipping information e.g. Free 2 Day Shipping an option to display Search Results and an option to Buy online .

As can be seen for analogous user interfaces and which both are showing a product page for a selling a given item e.g. the Star plush toy described using the text at and images the user interface may be specifically targeted and updated based on the geographic location of the given computing device .

While have been discussed with respect to configuring parameters of a user interface element based on geographic location settings that can be satisfied with geographic location information provided from computing devices it will be appreciated that the present embodiments may allow for the creation of any type of setting that can be satisfied by some corresponding information received from the computing device even if the setting is unrelated to geographic locations .

An example of such an alternative type of setting may include a timed setting. In such example the timed setting may be associated with some sort of time configuration e.g. certain times of the day certain days of the week month holidays etc. and the server may receive date time information from the computing device . If the server determines that the date time information from the computing device satisfies the timed setting then certain parameters for various user interface elements may be provided to the computing device . As discussed below such feature may be used if a developer desires to test a certain version of a user interface at a certain time of day e.g. in the middle of the night when there are typically fewer users .

In this manner the present embodiments may generally allow the parameters that are sent to the computing device for updating user interface elements to be targeted customized according to any characteristic of the user and or the computing device .

For example in addition to geographic location and timed settings further additional examples of settings that parameters for user interface elements can be associated with include the age and or demographic of a user of a computing device the social network information for a user of a computing device e.g. the job or interests of a user that may be stored as information available on a social network various characteristics associated with the computing device e.g. the operating system wireless carrier hardware manufacturer model number and or whether the computing device is using WiFi or a cellular signal and or previous usage patterns associated with the computing device .

Referring to shown there generally as is a flowchart diagram for processing usage information about a user interface of an application executable on a computing device in accordance with at least one example embodiment. As noted above in various embodiments the server may process usage information relating to whether one set of parameters used with a given user interface element is preferable to another set of parameters used with the same user interface element . As illustrated in the server may perform a number of steps to interact with a first computing device and a second computing device . For ease of illustration reference will also simultaneously be made to the components shown in .

At step a first computing device may provide a user interface of the application in which there is a user interface element that is identified by a programming language unit in the program code of the application. For example the application may be a first instance of an application that is constructed using the SDK provided by the present system such that the user interface elements contained therein are capable of communicating with the development module provided on the server .

At step the server may identify first parameters used by the user interface element in a first instance of the application at a first computing device . As discussed above the first parameters being used by a given user interface element by the application at the first computing device may have been originally inputted at the server by a developer using the developer device and correspondingly have been transmitted to the computing device from the server e.g. during an execution of the method of . In various embodiments prior to transmitting the first parameters to a given computing device for updating the user interface of the application at the first computing device the server may have stored the first parameters in the UI elements database for example . Thus in various embodiments step may be performed by locating the first parameters that have been transmitted to the computing device stored in the UI elements database .

At step optionally the server may associate the first parameters with a first test configuration. In various embodiments a test configuration may be a logical container that the server provides to allow the parameters from multiple user interface elements to be tested at the same time. For example the user interface being presented on the first computing device may represent a particular test scenario envisioned by a developer and the developer may want to associate the parameters used in each user interface element of the user interface together so that the usage information that is subsequently received may be analyzed in view of how each of the user interface elements were individually configured.

At step the first computing device may send first usage information to the server . In various embodiments the usage information transmitted from a given computing device may relate to the overall operation of the application itself. For example such application specific usage information may include the number of times the application is activated over a predefined period of time the day of week or time of day the application is accessed the duration of time the application is used each time the application is activated and or whether certain features of the application are being used more heavily than others.

Additionally or alternatively the usage information may relate more specifically to the user interface element with which the first parameters is associated. For example such user interface element specific usage information may include the number of times a given user interface element is activated e.g. if the user interface element is a button the number of times the button is pressed a timestamp for each time that the user interface element is activated an amount of time a given user interface element is on screen an amount of time a user interface element was chosen over another tracking of scrolling within a user interface element if applicable tracking of eye movement within a user interface element if applicable and or a percentage of time the application was exited or paused when a certain user interface element was present on the screen.

Further the usage information may relate to a group of user interface elements . For example the usage information may indicate a number of times that a particular view which contains a group of user interface elements has been viewed a number of times that a particular view has been seen a duration of time that a given view has been seen and or a percentage of time the application was exited or paused when a certain user interface element was present on the screen.

At step the server may process the first usage information as being associated with the first parameters. If the first parameters have been associated with a first test configuration at step the server may also process the first usage information as being associated with the first test configuration. In various embodiments the processing of the first usage information at step may involve storing the first usage information at the server .

Additionally or alternatively the server may transmit the first usage information to an external server not shown that provides analytics services. For example some such analytics services may include Mixpanel Flurry or Google Analytics . As will be understood these analytics services may provide APIs that can be accessed by the server or an application and or the computing device as the case may be so that the server can provide the first usage information to the external services for processing and analysis.

Once the usage information has been processed at the server in various embodiments various analytics may be performed on the usage information to gain insights about how a given user interface element having being configured with the first parameters impacts how the given user interface element and or the application is being used. For example an association may be made between the first parameters and how often the application is activated and or the duration of time the application is being used.

Such association may be desirable for a developer to understand how the particular parameters being provided to the user interface elements are impacting end users of their application .

In various embodiments it may be desirable to compare how two different set of parameters for a given user interface element impacts the usage information returned from computing devices . Steps to describe steps similar steps to except that steps to are performed in relation to a second computing device that has the user interface element configured with a second set of parameters.

At step a second computing device may provide a user interface of the application in which there is a user interface element that is identified by a programming language unit in the program code of the application . This may be the same application as that which was executing on the first computing device .

At step the server may identify second parameters used by the user interface element in a second instance of the application at a second computing device . This may be performed in a manner as that which was discussed above with respect to step e.g. by identifying the second parameters in the UI elements database .

At step the server may optionally associate the second parameters with a second test configuration. As discussed above with respect to step a test configuration may allow the parameters from multiple user interface elements to be tested at the same time. For example the second test configuration may represent a second version of a user interface for an application that is being tested in which various user interface elements are configured with parameters which are different from the parameters the user interface elements are configured with under the first test configuration.

At step the second computing device may then send second usage information to the server . This step may be performed in a manner that is analogous to the step for the first computing device .

At step the server may process the second usage information as being associated with the second parameters. If the second parameters have been associated with a second test configuration at step the server may also process the second usage information as being associated with the second test configuration. As in step this step may involve the second usage information being stored at the server . As with step in various embodiments the second usage information may also be transmitted to a third party external analytics service for performing analysis of the second usage information.

At step the server and or the external analytics service may compare the first usage information to the second usage information to determine whether one of the first parameters and the second parameters is preferable to the other of the first parameters and the second parameters. As discussed the present embodiment may allow the usage information to be associated with a given set of parameters that are used with a given user interface element at an application on a computing device . As two or more such associations are stored at the server it may be possible to perform analysis on the usage information for each set of parameters to identify whether one set of parameters resulted in more desirable usage information versus another set of parameters.

For example if one set of parameters configured a user interface element e.g. a button to be displayed at the top of the screen and another set of parameters configured the same user interface element to be displayed at the bottom of the screen usage information that indicates a higher number of activations of the UI element when the second set of parameters are used may indicate that positioning the user interface element at the bottom of the screen may result in higher usage of the user interface element .

It will be appreciated that in the embodiments described in the first parameters and the second parameters may be simultaneously deployed on the first computing device and the second computing device respectively. In this manner the present embodiments may allow two different versions of a user interface for an application to be tested simultaneously. As will be understood the term A B testing is used to describe a testing methodology in which an experiment can be conducted to determine which of two variants A or B is preferable. It will be understood that the present embodiments may allow such A B testing to be performed on the user interfaces of a given application on computing devices . While A B testing is one example type of a testing methodology it will be understood that the present embodiments may allow the use of other types of testing methodology also.

For example while the above discussion has been with respect to two different computing devices each sending their own usage information for their respective parameters for a given user interface element it will be appreciated that the server may be able to receive the first usage information for the first parameters and the second usage information for the second parameters from the same computing device . For example this may happen if the first computing device which sent the first usage information for the first parameters is subsequently provided with the second parameters from the server and second usage information is then retrieved from the first device afterwards.

Also as discussed in the first computing device simply sends the first usage information to the server without having been prompted. However in various embodiments it is possible that the first computing device is configured to not send any usage information by default. Instead the computing device may be configured to only send usage information when it is prompted by the server . For example the server may send and the computing device may receive information indicating that the parameters for being used with a given user interface element for an application on the computing device have been associated with a test configuration at the server . In response to such information the computing device may then send the usage information as is indicated in step . Additionally or alternatively the computing device may receive user input that activates the functionality for sending the usage information to the server and in response to that input begin sending the usage information as per step .

As noted above step relating to the association of parameters that are used with a given user interface element with a test configuration is optional and does not need to be performed. As discussed above a test configuration provides a logical container for grouping together the parameters from multiple user interface elements so that they can be analyzed together conveniently. However such grouping may not be necessary as it may be possible to process the usage information at the server and directly associate them with the various parameters used with user interface elements .

Consider for example a scenario where the user interface is being updated continuously over time instead of in well defined release versions . In such scenario there may be a large number of different parameters being sent to various user interface elements of the user interface at different points in time over a given time period. If in the present embodiments usage information is received throughout the continuous updating process e.g. before and after each updating of the parameters it may be possible perform analysis of the usage information to determine how each change to the parameters may have affected the usage information.

In this manner analytics can be performed on the usage information to gain insights about how historical changes have impacted the usage information without the need to explicitly associate particular parameters with a test configuration.

As will be understood the present embodiments allow for a more granular analysis of how usage information is impacted by changes made to particular user interface elements of an application . For example in scenarios where usage information is only associated with particular release versions of a user interface the changes in the usage information may not be attributable specifically to any one change of a given user interface element e.g. because a large number of changes may have been made to numerous user interface elements as between the two release versions . By receiving and storing usage information on a continuous basis as updates are being made to the user interface elements of the user interface over a period of time the present embodiments may be able to provide a more granular type of analysis that indicates how a particular modification to a particular user interface element resulted in the changes to the usage information.

In various embodiments the server may be able to provide recommendations and feedback to a developer for how they may be able to improve their user interface based on the analysis of the usage data. For example if a certain historical change to a user interface element was made within one view of application and that change had a positive impact on a particular metric that the usage information was measuring e.g. longer duration of use time then the server may be able to recommend the same change be made to an analogous user interface element on a different view of the application . It will be understood that the recommendations may relate to any parameters of a given user interface element including without limitation parameters for defining position on the screen fonts used color button position and or preferred style.

Further while step and illustrate the computing devices sending usage information directly to the server in various embodiments where an external third party analytics service is used the computing devices may be configured to send the usage information directly to the server that provides the external analytics service. For example in one example implementation the code for accessing an API provided by the analytics service may be included in the UI subclasses provided in the SDK so that compiled objects for such subclasses may be configured to communicate directly with the analytics service from a given computing device .

As discussed above the present embodiments may allow a server to send parameters for updating a specific user interface element of a user interface of an application on a computing device . As illustrated above with respect to the development module at server may provide a user interface that allows the parameters for each of the user interface elements to be individually updated and deployed to a computing device .

While such individual deployment may provide a developer with the flexibility to fine tune the appearance of each user interface element without causing an impact on the remaining user interface elements in certain situations it may be desirable for the developer to deploy the parameters of a group of user interface elements together.

To allow such group modification a number of user interface elements may be associated with a group called a theme herein .

Referring to shown there generally as and are screenshots of an example user interface in which user interface elements can be associated with a theme in accordance with at least one example embodiment. As will be appreciated the user interface is similar to those discussed above with respect to in that there is a pane on the left hand side of the user interface that allows the selection of an application e.g. as illustrated the Cloud Photos application . As shown there may be a number of options provided for a selected application such as Views discussed above with respect to Themes and Settings which will be discussed below with respect to .

User interface of shows an example screenshot where a theme can be created and selected to be modified. As illustrated two themes named iOS6 and iOS7 have been already created and can be selected for editing. An option to add an additional theme is also provided. Additionally the user interface provides a control that allows selection of one of the available themes as the active or current theme. In various embodiments the selection of a given theme using the control may cause all the parameters associated with theme to be transmitted to their respective user interface elements . In this manner a developer may be able to deploy parameters for a number of user interface elements at the same time.

Referring now to shown there generally as is a user interface that allows the modification of parameters associated with a user interface element that is associated with a theme . As will be appreciated the user interface in is similar to the user interface shown in and similar parameters as that which were discussed above with respect to may similarly be entered and stored for a given user interface element in the user interface of . Specifically as illustrated the general tab is selected for a user interface element entitled Refresh TitleLabel and a Style Key control may be entered for identifying the user interface element . As will be understood such Style Key may serve as similar function to the Element Key which was described above with respect to .

In various embodiments all of the user interface elements of a user interface of a given application may be associated with a given theme and there may be corresponding parameters for each of the user interface elements associated with a theme so that when the theme is activated e.g. selected via control in the entire user interface of the application can be updated to the new theme. In the illustrated example for example a theme has been created for the UI design styles associated with two different versions of the iOS operating system created by Apple Inc. e.g. iOS6 and iOS7 . When the iOS7 theme is selected the various parameters associated with the iOS7 theme may be sent to their respective user interface elements and the appearance of the application may be uniformly updated. In various embodiments the theme itself may have parameters associated with it and such parameters may be modified to indicate that all user interface elements associated with the theme are to have certain properties e.g. whether the user interface elements are to appear in the iOS6 or iOS7 style .

Additionally or alternatively it may be possible that not all of the user interface elements of a given application need to be associated with a given theme. For example in various embodiments different non overlapping subsets of all the user interface elements of a given application may be associated with different themes so that multiple themes may be active at any given time.

As discussed above the user interface elements of a given application may be associated with different types of additional information that may affect the process of updating user interface elements with parameters. For example discussed embodiments in which a user interface element may be associated with a development role. Also discussed embodiments in which a user interface element may be associated with a setting e.g. a geographic location setting that can be satisfied by information from a computing device e.g. a device geographic location . Further discussed the parameters for a user interface element may be associated with a test configuration.

It will be appreciated that in various embodiments the themes may be associated with these different types of information e.g. a development role a setting and or a test configuration so that the user interface elements associated with the theme can correspondingly be associated with the type of information by virtue of belonging to the theme. This may increase efficiency for a developer by not requiring the developer to individually associate each of the user interface elements of a given application with any one of these types of information.

Referring to shown there generally as is a screenshot of an example user interface for associating user interface elements of an application executing on a computing device with test configurations in accordance with at least one example embodiment. The user interface may provide a pane that allows a number of different experiments or testing scenarios to be selected e.g. the illustrated example names the experiments as Test 1 Test 2 and so forth . As shown the test configuration Test 1 is selected.

For a given selected test configuration a number of different tabs may be provided that allow the details of the experiment to be modified. For example as discussed above it may be possible to associate the parameters used with a given user interface element with a given test configuration. However as shown it may also be possible to associate a particular theme with a test configuration for the purposes of conducting an A B test . Particularly as shown the tab is selected and test configuration controls are provided for identifying the theme that is to be associated with a given test configuration e.g. as shown there are two test configurations a Test A Theme test configuration and a Test B Theme test configuration . In the illustrated example Theme A and Theme B are selected in respective controls to be the respective test configurations such that the two themes are to be compared against each other. The user interface further provides a button that allows the test configuration to be submitted once the test configuration has been decided e.g. so that the usage information can start to be collected from the computing devices .

In various embodiments the server may be able to provide options to use the geographic location settings discussed above with respect to in conjunction with the test configurations discussed above with respect to . For example in for a selected experiment an additional tab may be provided that allows a developer to select geographic locations settings for each test configuration. For example using these features in combination it may be possible to indicate that the Test A Theme test configuration is to be associated with a given geographic location setting that specifies a given city and that the Test B Theme test configuration is to be associated with another geographic location setting that specifies another city. In this way the Theme A parameters would be provided to user interface elements on computing devices in the city specified by the first geographic location setting and the Theme B parameters would be provided to user interface elements on computing devices in the city specified by the second geographic location setting.

In further embodiments yet another tab may be provided that allows time settings to be associated with a given test configuration. For example if such tab is selected controls may be provided that allows a given test configuration e.g. Test A Theme and or Test B Theme to be additionally or alternatively associated to be associated with a time of day. This may allow the appearance of the user interface to be updated with the certain parameters and or theme at the particular time of day indicated by the timed setting. This may be desirable for example if certain test configurations are desired to be deployed during a certain time of day when there may be fewer users of the application e.g. if the test configuration contains updates that may be controversial and it is desired to test such updates out on the small number of users who may use the application in the middle of the night .

It will be understood that the type of information that may be associated with the themes and or parameters for user interface elements can be combined in various ways. For example in yet another scenario the geographic location settings timed settings social and demographic settings may be mix and matched to have parameters for user interfaces and or themes that match specific combinations or sub combinations of these various settings.

For example in the user interface of it may be possible to design an experiment where a test configuration is only activated for a given geographic location setting a given time of day and for a certain demographic e.g. in the city of Chicago from 12 am to 5 am for males between the ages of 25 33 or just the location setting and a given time of day e.g. in the city of Los Angeles during prime television viewing hours between 6 pm and 9 pm or just for geographic location setting alone e.g. just in the city of Chicago or just for the timed setting alone e.g. just from 12 am to 5 am .

Referring to shown there generally as and respectively are screenshots of example user interfaces for viewing and modifying settings associated with an application in accordance with at least one example embodiment. Referring first to shown there is a further screenshot that may be provided by the development module of . The user interface is similar to the ones discussed earlier with respect to except that in the Settings option is selected for the example application called Cloud Photos . As shown the Settings user interface may display the API key that is used to initiate communication between a developer device and the server and ensure the security of the communications between the server and the application on the computing device .

Referring now to shown there generally as is a screenshot for a Settings option screen that is generally analogous to the one shown in except that user interface has been updated with a different visual style. As illustrated the Settings option for the Cloud Photos application is again shown and the API key similarly shown.

Additionally shows an additional section which allows a developer to select the external analytics engine called the Analytical Sources in that the server can interact with. As mentioned above it may be possible to configure the server and or user interface elements to provide the usage information that is generated at an application to an external analytics engine. As illustrated the section provides a number of different boxes that allows some named external third party analytics engine to be used. Without limitation the example analytics engines that can be selected include Mixpanel Flurry and Google Analytics .

In various embodiments a developer may be required to provide his user identity prior to being provided access to the development module to update an application e.g. as may be required for identifying a development role that the user identity is associated with in the context of the method of . Referring now to shown there generally as and respectively are screenshots of example sign in use interfaces for signing into the system for developing an application in accordance with at least one example embodiment. As will be understood usernames may be used to identify a given user identity and passwords may be used to authenticate a given user.

Referring now to are screenshots and of example dashboard user interfaces that may be provided by the server in accordance with at least one example embodiment. In various embodiments once a user has logged in and prior to selecting a given application to update they may be presented with a dashboard user interface that allows them to select the applications they would like to work on. In the illustrated example there are two applications Jukeboxer and Cloud Photos that can be selected for modification. If for example the Cloud Photos application is selected user interfaces similar to that which has been discussed above for updating the user interface elements of an application may be provided. The user interface may also include a control which when selected allows the creation of a new project at the server . As used herein the term project relates to a particular application executable on a computing device that may be updatable from the server .

Referring now to shown there generally as is another example of a dashboard user interface that may be shown after a developer logs into the server . The user interface is generally analogous to the user interface shown in except that various visual styles have been updated. Specifically a number of applications may still be selected for modification and a control is provided for creating a new project.

Referring to shown there generally as is a screenshot of an example user interface for adding a new project in accordance with at least one example embodiment. For example the user interface of may be displayed when the Create New Project button is activated on the user interface of . As shown the user interface may provide a text field that allows the name of a given application that is to be controlled to be entered.

Referring to shown there are additional screenshots of an example user interface for updating user interface elements for an application executing on the computing device in accordance with at least one example embodiment. are generally analogous to the user interfaces shown in in that they show user interfaces that allow parameters associated with a selected user interface element of an application to be updated. The differences between and are that have been modified to show a different visual style. Accordingly the reader is referred to the discussion above with respect to for a description of how the corresponding user interfaces in respectively may operate. It is noted that the same reference numerals that are used in are also used in to refer to analogous components.

Referring to shown there generally as and respectively are additional screenshots of an example user interface in which user interface elements can be associated with a theme in accordance with at least one example embodiment. are generally analogous to the user interfaces shown in except that certain visual styles have been updated. In particular the same reference numerals that are used in are also used in to refer to analogous components and the reader is referred to the discussion above with respect to for a description of how the corresponding user interfaces in respectively may operate.

Referring specifically to the user interface in addition to allowing the selection of themes integrates controls that allows themes to be associated with various test configurations. In various embodiments these controls may be provided additionally or alternatively to the controls discussed above with respect to . As shown a test configuration entitled Testing Configuration is shown which allows the selection of one of the iOS6 or the iOS7 themes to be associated with it. Additionally shows another more complex test configuration entitled Live Configuration which allows a percentage of the computing devices which have been deployed with the application to be configured with one theme and another percentage of the computing devices which have been deployed with the application to be configured with another theme. Specifically as shown a control is provided that allows selection of the experiment type e.g. shown as Variable Theme . Once selected additional controls may be provided. For example as shown controls may be provided that allow selection of the themes as well as the corresponding percentages of computing devices that are to be configured with the theme e.g. controls allow such percentages to be entered .

In some embodiments user interface elements such as those associated with themes for an application executing on the computing device are updated using the techniques of method swizzling or view hierarchy observing. In such embodiments setting or controlling properties for UI element identifiers e.g. style keys as used in for example is not required. Instead method swizzling or view hierarchy observing allows the developer to replace or exchange existing implementation of the UI element with another by for example adding a new UI element class or replacing an existing UI element class during runtime.

As used herein the term programmer developer or software developer will generally refer to the same type of users i.e. creators of applications for execution on a computing device .

The present invention has been described here by way of example only. Various modification and variations may be made to these exemplary embodiments without departing from the spirit and scope of the invention which is limited only by the appended claims.

For example other variations of the systems and methods described above will be apparent to those in the art and as such are considered to be within the scope of the subject matter described herein. For example it should be understood that acts and the order of the acts performed in the processing described herein may be altered modified and or augmented yet still achieve the desired outcome.

In particular the steps of a method in accordance with any of the embodiments described herein may be performed in any order whether or not such steps are described in the claims figures or otherwise in any sequential numbered or lettered manner. Also in the various user interfaces illustrated in the figures it will be understood that the illustrated user interface text and controls are provided as examples only and are not meant to be limiting with regards to their appearance. Other suitable ways of arranging and modifying the appearance of user interface elements may be possible.

As used herein the wording and or is intended to represent an inclusive or. That is X and or Y is intended to mean X or Y or both. Moreover X Y and or Z is intended to mean X or Y or Z or any combination thereof.

