---

title: Supporting a fixed transaction rate with a variably-backed logical cryptographic key
abstract: A system and method for receiving requests for performing cryptographic operations with a virtual key having a plurality of actual keys associated with the virtual key, determining which actual key of the plurality of actual keys to use for the cryptographic operation, performing the cryptographic operation using the actual key, and providing the result of performing the cryptographic operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438421&OS=09438421&RS=09438421
owner: Amazon Technologies, Inc.
number: 09438421
owner_city: Seattle
owner_country: US
publication_date: 20140627
---
The security of computing resources and associated data is of high importance in many contexts. As an example organizations often utilize networks of computing devices to provide a robust set of services to their users. Networks often span multiple geographic boundaries and often connect with other networks. An organization for example may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization for instance may communicate with computers of other organizations to access and or provide data while using services of another organization. In many instances organizations configure and operate remote networks using hardware managed by other organizations thereby reducing infrastructure costs and achieving other advantages. With such configurations of computing resources ensuring that access to the resources and the data they hold is secure can be challenging especially as the size and complexity of such configurations grow.

Encryption for example is used extensively for the purpose of preventing unauthorized access to data. Generally a cryptographic key is used to reversibly transform data to a state where information is both computationally and humanly unascertainable without access to the cryptographic key or without extraordinary measures e.g. a cryptographic attack . While encryption is generally effective without proper care being taken the benefits of encryption can be degraded. In some examples proper care to maintain data security requires rotation of cryptographic keys so that a single cryptographic key is not used so many times that an analysis of ciphertexts generated under the cryptographic key provides significant information usable to determine the cryptographic key. However in many systems tracking how many encryption operations have been performed can be challenging. For example a distributed computer system may have multiple nodes that each performs operations with a cryptographic key. In such a system tracking how many encryption operations each node has performed so that the aggregate number of encryption operations under the same key remains at an acceptable level can be complex especially when the rate of performance of the encryption operations can vary widely among the nodes. One way of preventing too many encryption operations from being performed under the same cryptographic key in a distributed system is to rotate the cryptographic key before any node in the distributed system has the opportunity to cause a limit on the number of encryption operations to be exceeded. Techniques that utilize this approach can result in underutilization of the cryptographic key since key rotation will typically occur before the limit is exhausted.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested include using a logical i.e. virtual key or key identifier representing multiple cryptographic keys in order to slot the rate of exhaustion of the individual cryptographic keys. For example if requests to perform cryptographic operations using a logical key exceed a desired frequency rather than throttling the requests the multiple cryptographic keys may be used to fulfill the requests. In this manner the requested rate of cryptographic operations may be maintained without compromising data security. In an embodiment a distributed system comprises multiple nodes e.g. physical and or virtual computing devices that each may have access to one or more logical cryptographic keys. Each logical cryptographic key may have one or more physical i.e. actual cryptographic keys backing the logical cryptographic key. To prevent various types of cryptographic attacks limits on the usage of the physical cryptographic keys for encryption operations are enforced e.g. the cryptographic keys may be periodically rotated so that access to ciphertexts generated by particular cryptographic keys does not significantly affect security should a particular cryptographic key become compromised. Techniques described and suggested further include using a logical key backed by multiple physical keys that are distributed among nodes of computer systems or resources for fault tolerance. That is by sharing logical keys among nodes and distributing the physical keys backing the logical keys to various fault zones the loss of a physical key may only affect a limited number of nodes.

In a distributed system different nodes may utilize a particular cryptographic key also referred to simply as a key at different usage rates and the usage rates and or differences in the usage rates of a key may not always be predictable. Consequently the aggregate usage of a key for performance of cryptographic operations is difficult to calculate accurately in real time with the calculation difficulty increasing depending on the number of nodes in the distributed system. To address this a throttle may be placed on a particular key. A throttle is a limitation on the rate of performing cryptographic operations for a particular key. The throttle may be used to allow more accurate calculations of the aggregate usage of the key.

If the rate of usage of a particular key exceeds the throttle a delay may be introduced before performing the next cryptographic operation in order to bring the usage rate to a rate at or below the throttle. In some cases however the demand for cryptographic operations for a particular key is such that a throttle on that key may significantly impact performance. In such a case additional cryptographic keys may be associated with a key identifier of the particular key such that when a node designates the key identifier a.k.a. a logical key for performing a cryptographic operation one of the physical keys backing the key identifier may actually perform the cryptographic operation. In this manner the aggregation of the throttles of each physical key represents the throttle of the logical key and the throttle of the logical key may be increased by increasing the number of physical keys backing the logical key or by increasing the throttles on the physical keys backing the logical key. Thus no delay need be introduced until all physical keys of the logical key have exceeded their throttle and a node should not expect a cryptographic operation to be delayed at least until the usage rate exceeds the aggregate throttles of the physical keys backing the logical key. In some embodiments the physical keys may be managed and contained within one or more security modules such as described below which may be hardware security modules.

However in some embodiments the logical key may have its own separate throttle rather than being limited solely by the aggregation of the throttles of its physical keys. In such an embodiment the logical key throttle may serve to limit the rate of cryptographic operations performed by the logical key even though the aggregation of the physical keys of the logical key may support a higher rate of transactions. However in other embodiments the throttle of the logical key acts as a quota for a minimum transaction rate to be supported by the logical key and physical keys may be added to achieve the quota transaction rate. Also in such embodiments an increase or decrease of the logical key throttle may not necessarily affect the number of physical keys backing the logical key if the aggregation of the physical key throttles exceeds the rate allowed by the logical key throttle. Note that the throttles of the physical keys backing the logical key need not necessarily be equal for example the throttle of one physical key backing a logical key may be 1 000 transactions per second whereas another physical key backing the same logical key may be throttled at 500 transactions per second.

In some embodiments however a change to the throttle of a logical key need not necessarily affect the number of physical keys backing the logical key but instead may simply change the throttle values of the individual physical keys such that the aggregation of the physical key throttles meets the changed logical key throttle. In such an embodiment the change may be distributed relatively equally among all of the physical keys backing the logical key whereas in other cases the change in throttles may be in proportion to the proximity to exhaustion of a particular physical key e.g. the throttles of physical keys closer to exhaustion may be adjusted lower than throttles of physical keys farther from exhaustion such that the physical keys may be exhausted at a nearly the same time should such a feature be desired in the particular embodiment. The particular key determined to perform the actual cryptographic operation for the logical key may be determined according to a variety of methods including but not limited to a random or other stochastic selection scheme round robin selection scheme weighted round robin selection scheme an attribute of the request e.g. selecting a key based on a hash value returned after applying a hash function to the request a type of operation to be performed e.g. an encryption operation versus a decryption operation whichever physical key may be present within cache or a selection scheme based on the usage amount or rate of particular physical keys. A physical key that has reached its throttle may be skipped for a physical key that has not yet reached its throttle. For example the round robin selection may be weighted according to how near each particular key is to exhaustion. In some embodiments the system that accesses and provides ciphertexts does so in accordance with executable code executed by the system where the executable code is configured to cause the system to comply with a throttle on logical and physical keys.

Generally for the sake of efficiency it is desirable to use the same key multiple times. However for security purposes it may also be desirable for the key to expire after a certain number of uses. Nonetheless the logical key may not need to be rotated as often as a physical key or at all because if the calculated usage of a physical key exceeds a limit the physical key may be rotated instead of the logical key. Rotation of a cryptographic key involves deprovisioning the cryptographic key and replacing the cryptographic key with another cryptographic key. Because the physical keys of the logical key are performing the actual cryptologic operation and because the physical keys may be rotated when their usage exceeds a limit access to ciphertexts generated by a physical key does not significantly affect security should the logical key of the physical key become compromised.

Deprovisioning a cryptographic key in some embodiments may involve disabling the physical key from being used for certain subsets of cryptographic operations such as encryption operations while still allowing the physical key to perform certain other subsets of cryptographic operations such as decryption operations. In this manner ciphertext encrypted with a particular physical key may still be decrypted even after the physical key has been deprovisioned and rotated. In some cases deprovisioning the physical key may prevent its use for all cryptographic operations and in some of these cases deprovisioning the physical key may include removing the physical key from association with the logical key and in some examples deleting e.g. by overwriting the physical key from memory to render the physical key unrecoverable. In some embodiments deprovisioning a physical key renders the physical key unusable for one type of cryptographic operation e.g. encryption but still usable for another type of cryptographic operation e.g. decryption so that for instance the physical key is usable to decrypt ciphertexts produced under the physical key but unusable to produce additional ciphertexts. When the physical key is deprovisioned it may be replaced with a replacement key which may be used for cryptographic operations such as encryption decryption and digital signatures.

In some embodiments a customer of a computing resource service provider may not share a particular logical key with another entity. In other embodiments a logical key may be associated with a particular host machine. In some embodiments an entity e.g. an instance a resource a service an application or a user may be assigned one or more logical keys that are not shared with any other such entity. In some embodiments a physical key may be associated with a particular hardware security module and a logical key then may be backed by the physical keys of a plurality hardware security modules.

Another aspect of the present disclosure is the use of a logical key with variable backing physical keys to provide fault tolerance and fault isolation for cryptographic operations. In one embodiment a multitude of physical keys may be generated for a logical key such that if one or more physical keys of the logical key is lost or compromised the amount of data affected by the lost or compromised keys may be minimized. Alternately the number of physical keys backing a logical key may be related to a usage level of the physical key that is rather than a throttle related to number of operations in a certain time period there may be a limit set on the number of volumes in a distributed computing environment using a particular physical key during a certain period of time. For example a limit may be set on physical keys such that they may not be used with more than 100 volumes meaning that the loss of the key will affect only 100 volumes at most. In this example then for a logical key to be used for 1 000 volumes the logical key may be backed by 10 physical keys. In some cases a customer of a computing resource service provider may specify a usage limit for a physical key of a logical being used. In other embodiments a logical key may be shared between different fault zones and physical keys may be allocated depending on the fault zone of the request for a cryptographic operation originates.

In some embodiments the logical key may initially only be backed by a single physical key and additional physical keys may be added to back the logical key as needed. For example an entity may be initially using a key identifier for a single physical key perform cryptographic operations. The key may be utilized by the entity by referencing an ID of the physical key possibly my making a call to an application programming interface and passing the ID of the physical key. It may be that the throttle or usage limit assigned to the physical key is desired to be increased at this point the additional physical keys may be generated and associated with the ID of the original physical key such that the key identifier serves as a logical key backed by multiple physical keys. In this case an aggregation of the throttles or usage limits of the physical keys meet the throttle or usage limit needed for the key associated with the key identifier. To the entity making the request for a cryptographic operation the key identifier may remain the same and the cryptographic operations may be performed without interruption or apparent change. In some embodiments there may be hierarchical levels of logical and physical keys. For example a logical key may be backed by one or more other logical keys in addition to or as an alternative to one or more physical keys and each of those one or more logical keys may in turn be backed by one or more additional logical keys in addition to or as an alternative to one or more physical keys.

The servers may cause cryptographic operations to be performed by using a logical key such as logical key A. For example one of the servers may make a call to an application programming interface requesting a logical key and the application programming interface may respond by providing the server with a key ID of a logical key such as 123545 for logical key A which may have been generated by service such as the cryptography service of 1000 described in reference to . Note that the key ID form of the ID and the application programming interface are described in this manner for illustrative purposes only and as such any manner of generating a virtual key in hardware or software and providing access to that key as would be understood by a person having ordinary skill in the art may be considered as within the scope of the present disclosure. Generation of physical keys to back the logical key such as the logical key A may occur at the time of the creation of the logical key and or at a time when the throttle of the logical key is set and further physical keys may be generated and added to back the logical key as the throttle of the logical key is increased or in response to a request to add more physical keys to back the logical key.

The server of the servers may then perform an encryption operation utilizing the key ID such as by making another call to an application programming interface and passing the key ID e.g. encrypt data keyID . The system of environment may respond by selecting a physical key of the logical key A depicted in as physical keys A 12345 001 12345 005 but may be more or fewer keys as described in the present disclosure and may in practice utilize a different format for key identities as would be known by a person having ordinary skill in the art than that depicted in . The identities of the logical keys the physical keys corresponding to each logical key and the throttles associated with the physical keys and or logical keys may be stored and maintained in a data store such as a database on a data server of a data storage service of a computing resource service provider.

A particular physical key of the logical key A may be selected according to various criteria including but not limited to random selection or other stochastic selection round robin selection weighted round robin an attribute of the request e.g. selecting a key based on a hash value returned after applying a hash function to the request a type of operation to be performed e.g. an encryption operation versus a decryption operation whichever physical key may be present within cache or a selection based on the usage amount or rate of particular physical keys. In this manner a cryptographic system may select a physical key such as key 12345 003 and encrypt data for the requesting server of the servers . Upon completion of the encryption the cryptographic system may respond by appending the key ID e.g. 12345 003 to the ciphertext along with any additional metadata that may be desired and provide the ciphertext to the requesting server of the servers . Thereafter the requesting server may decrypt the data by referencing the key ID of the physical key by as an example passing the key ID of the physical key to an application programming interface e.g. decryptdata ciphertext with keyID .

As noted in environments where usage tracking is an asynchronous process it may be desirable to ensure that cryptographic keys are changed frequently by attaching a limit to the number of encryption operations may be performed with a given key. For example if a key is limited for use in at most four billion cryptographic operations then at 1 000 transactions per second the key will expire in approximately 46 days. However at a rate of 50 000 transactions per second or more the key will expire in less than 23 hours and a key rotation process that runs once per day will not be triggered to run until many transactions after the key should have been rotated.

Rather than adjusting the frequency that a key rotation process runs by throttling the transaction rate of a cryptographic key the key may be made to expire within an acceptable threshold time before the key is fully consumed. However it may not be acceptable to a node running a process that runs at 50 000 transactions per second or more to throttle the process down to 1 000 transactions per second. On the other hand it may be acceptable if the process could spread the transactions between 50 keys each with a throttle of 1 000 transactions per second.

By implementing a key as a logical i.e. virtual key that corresponds to 50 physical i.e. actual keys both the goal of running at 50 000 transactions per second and the goal of being able to throttle the usage of actual keys to 1 000 transactions per second may be achieved. The processes performing the cryptographic operations use the logical key A as they would use an actual key for example by calling an application programming interface and passing the ID of the logical key A. The executable code behind the application programming interface however may be configured to select one of the physical keys A belonging to the ID of the logical key A to perform the actual encryption operation. The executable code behind the application programming interface may respond to the call with an ID of a key that may be used to decrypt data encrypted with the physical key. Thus only the logical key A may be exposed to the process performing the cryptographic operation.

Each physical key may have its own throttle giving the logical key A a virtual throttle equal to the aggregate of the throttles of the physical keys A linked to the logical key A. In some embodiments the virtual throttle may be expressly increased such as by making an application programming interface call to change the throttle of a logical key A to support a greater number of transactions per second and in fulfillment of the application programming interface call the system of the present disclosure may add as many physical keys A to the logical key A as would be needed to for the aggregate of the throttles of the physical keys A to meet the new throttle amount of the logical key A. As another example using the example of the logical key A with a throttle of 50 000 transactions per second with 50 physical keys each with a 1 000 transaction per second throttle if an entity such as a customer user service application or some other such entity requests that the system of the present disclosure increase the throttle of the logical key A to 60 000 transactions per second the system may fulfill the request by provisioning ten more physical keys having 1 000 transaction per second throttles for the logical key A.

The request to change the throttle i.e. usage rate of the logical key may be made through an application programming interface supplied by a computing resource service provider. In response to receiving the request to change the throttle the computing resource service provider or an applicable application service or resource of the computing resource service provider may determine to add one or more physical keys to meet the new throttle amount reject the request for one of a variety of reasons e.g. the requestor may not have sufficient authority a logical key may have reached a predetermined limit to the number of physical keys that may back a logical key the new throttle amount may be above or below a minimum or maximum throttle determined by the computing resource service provider etc. or some other such action. In some cases the request to change the throttle may be in the form of a request to perform a cryptographic operation the performance of which would exceed the throttle of the logical key. Similarly in these cases the request may be rejected or delayed i.e. throttled to ensure that the rate of cryptographic operations does not exceed the throttle amount or in some others of these cases new physical keys may be provisioned for the logical key in response to the request to perform the cryptographic operation such that the rate of cryptographic operations does not exceed the aggregation of the throttles of the physical keys backing the logical key i.e. the new throttle amount .

The number of physical keys to add to meet the new throttle amount may be such that as cryptographic operations are distributed among individual physical keys backing the logical key that is as the operations are allocated to particular physical keys according to a distribution scheme such as random stochastic or weighted according to the current usage levels of the physical keys the usage rates of the individual physical keys do not exceed their respective throttles. The number of physical keys required to meet this objective may be determined by if the physical key throttle is constant for all physical keys dividing the new throttle amount by the physical key throttle. Alternately a difference between the new throttle amount for the logical and the aggregation of the throttles of the backing physical keys may be divided by a physical key throttle amount to determine a number of physical keys to add or remove from backing the logical key. Other methods for determining a number of physical keys as would be understood by a person having ordinary skill in the art may also be considered as within the scope of the present disclosure.

Note that in cases where distribution of cryptographic operations are not necessarily uniform such as in a probabilistic distribution scheme a buffer or offset may be factored into the aggregation of throttles of physical keys to ensure that the probability of any individual physical key be used in excess of its individual limit which may be defined based on a usage rate and or number of total uses is within a specified threshold e.g. 32 or another threshold . For example a throttle of individual cryptographic keys may be set at a particular level however due to the particular distribution scheme a particular cryptographic key may be allocated more cryptographic operations than other keys during a particular time period. To ensure that such a distribution scheme does not unnecessarily cause cryptographic requests to be throttled a buffer amount may be factored into the physical key throttles when determining how many physical keys to provision for a logical key e.g. physical keys may be set at 1 000 transactions per second with a buffer of 100 transactions per second to account for uneven distribution of cryptographic operations such that each physical key may be considered to have an effective throttle of 900 transactions per second for aggregating throttles of physical keys to determine how many physical keys should back the logical key. The values discussed are provided as examples and the actual values used may depend on various factors such as user preferences the particular cryptographic primitives being used and the like.

An aggregation of the throttles of the physical keys A may be said to meet the new throttle amount differently depending on the particular embodiment. For example in some cases the throttle of a logical key A may only be increased or decreased by a multiple of the throttle of the physical keys A such that the aggregation of the physical key throttles may be made to exactly match the logical key throttle that is in an embodiment where physical keys A have throttles set at 1 000 transactions per second a logical key may only have a throttle that itself is a multiple of 1 000. In another example in some cases the aggregation of the physical key throttles may only need to exceed the throttle of the physical key. For example if a logical key having a throttle of 2 000 transactions per second is backed by two physical keys having throttles of 1 000 transactions per second and the throttle of the logical key is increased to 2 500 transactions per second adding an additional backing key having a throttle of 1 000 transactions per second may meet the new throttle amount even though the aggregation of the throttles of the backing keys exceeds the throttle set on the logical key A. In some of these embodiments the new throttle amount of the logical key A may be met if the aggregation of the physical keys exceeds the new throttle by any amount for example a logical key A with a throttle set to 5 000 transactions per second having five physical keys A of 1 000 transactions per second throttles may have its throttle increased to 6 000 transactions per second in such a case adding five more physical keys with 1 000 transactions per second throttles may meet the new throttle as the aggregation of the throttles of the physical keys A becomes 10 000 transactions per second. Consequently in such an example if the throttle of the logical key A is subsequently increased from 6 000 transactions per second to 7 000 8 000 9 000 or 10 000 transactions per second it may not be necessary to add additional physical keys. In other embodiments only a minimum number of physical keys may be added as needed to for the aggregation of the throttles to equal or exceed the new throttle limit or in a case where the throttle of a logical key A is decreased and it is desired to removed keys the number of physical keys removed may be such that the aggregation of the throttles of the physical keys A still exceed the new throttle.

In another example a logical key A may be initially created with a throttle of 1 000 transactions per second and the logical key A may be backed by a corresponding physical key also with a 1 000 transactions per second throttle. The logical and physical keys A may persist in that state some time at which time the usage the logical key A is increased to 2 000 transactions per second whereupon a second physical key with a throttle of 1 000 transactions per second may be introduced to back the logical key A along with the first physical key. At this point the first physical key may be partially exhausted and if operations are shared equally between the first physical key and the second physical key the first physical key will need to be rotated before the second physical key is fully exhausted. In some embodiments it may be desirable to swap the first physical key out for a third physical key when the second physical key is added such that all physical keys A backing the logical key A are exhausted simultaneously. In such an embodiment it may be further desirable to rotate the logical key A when all physical keys A are exhausted.

In an embodiment the logical key A may have a certain number of physical keys A and if the number of transactions per second being processed for the logical key A exceeds the aggregation of the throttles of the physical keys A the system of the present disclosure may automatically provision additional physical keys as would be sufficient in the aggregate to support the number of transactions per second needed rather than introducing delays to keep the number of transactions below the aggregate throttle. In other words measurement of a past usage rate for the logical key A may be used to determine a new logical key throttle and hence the number of physical keys with throttles to provision. In some embodiments the throttles may be specific to certain types of operations or for use with certain types of services or resources. For example cryptographic operations performed with a data store may have a different limit to the rate of operations performed than cryptographic operations performed in conjunction with a virtual machine.

Likewise if the throttle on the logical key A is decreased one or more physical keys A of the logical key A may be deprovisioned as would be needed for the remaining physical keys A in the aggregate to meet the new reduced throttle amount. In at least another embodiment if the transactions per second processed for the logical key A drops an appropriate number of physical keys may automatically be deprovisioned. For example if a logical key having 50 physical keys with throttles of 1 000 transactions per second finds itself only needing to process 45 000 transactions per second in this embodiment the system of the present disclosure may deprovision five of the physical keys.

When an encryption operation is performed with a logical key the ciphertext returned as a result of the encryption operation may include an indication of the unique identity of the physical key used. In some other embodiments the ciphertext may include an identity of the logical key A in addition to the identity of the physical key e.g. 12345 002 may indicate that the ciphertext was encrypted with the second physical key of logical key 12345 . For example the ciphertext may be provided serialized with the physical key ID as a protocol buffer protobuf and may further include an initialization vector for hiding patterns in encrypted data. In other embodiments the identity of the physical key and or logical key may be separately output.

The next stage of shows that the first physical key of the logical key has been rotated that is physical key A has been replaced with new physical key B. The remaining physical keys are left untouched and unaffected by the rotation of physical key A. To a user of the logical key the process is nearly transparent future cryptographic operations are performed using a key selected from physical keys and physical key B just as it had been previously selected from physical keys and physical key A. In some embodiments the physical key A may be retained for decryption operations only that is the physical key A may be identified to perform decryption operations on ciphertext that the physical key A had encrypted before rotation.

In the system performing the process makes a determination whether the requested change will affect the number of physical keys backing the logical key. In some cases a request to increase the throttle of a logical key may not necessarily cause an increase or decrease in the number of physical keys. For example if the change is a decrease in the throttle of the logical key and the aggregate throttles of the physical keys exceed the new throttle of the logical key it may be sufficient not to change the number of physical keys backing the logical key. Whereas in some cases it may be desirable to keep the number of physical keys at or just above the minimum number of physical keys needed for the aggregation of the throttles of the physical keys to meet or exceed the new throttle of the logical key. On the other hand if the change to the throttle of the logical key exceeds the aggregation of the throttles of the logical keys backing the logical key the number of physical keys may be increased.

If the change to the throttle of the logical key is not determined to affect the current number of physical keys backing the logical key the system performing the process may proceed to and it may be that no further action is taken other than to change the throttle amount associated with the logical key. Otherwise the system performing the process proceeds to and to determine the physical keys i.e. determine a sufficient quantity of physical keys and generate the sufficient quantity of keys to associate with the logical key. In a quantity of physical keys necessary to fulfill the requested throttle amount is determined. As noted it may be that just enough physical keys with a particular throttle to exceed the desired logical throttle are sufficient for example if the logical key is currently backed by two physical keys having throttles of 2 000 transactions per second each and the request is to increase the logical throttle to 5 000 transactions per second it may be sufficient to only add one more physical key with a throttle of 2 000 transactions per second. Likewise if the request to change the throttle of the logical key is less than the previous logical key throttle just enough physical keys may be deprovisioned from the logical key such that the aggregation of the physical key throttles still exceeds the requested logical key throttle. In some embodiments physical keys may be added or removed in block amounts such as the system performing the process may be configured to add or remove blocks of five physical keys at a time and in the in the previous example increasing the logical throttle to 5 000 transactions per second may result in the addition of five physical keys of 2 000 transactions per second. In some other embodiments the throttles of physical keys need not be equal and one or more physical keys may be added in which the aggregation of the physical key throttles equal the new logical key throttle. For instance in the above example the request to increase the throttle of a logical key to 5 000 transactions per second may result in the addition of a physical key with a throttle of 1 000 transactions per second to back the logical key along with the two physical keys of 2 000 transactions per second or alternately the request may result in the addition of a physical key having 700 transactions per second and another physical key having 300 transactions per second or any such combination in which the aggregation of the physical key throttles equal the logical key throttle.

In based on the determination of the determined number of physical keys may be provisioned to back the logical key or be deprovisioned from backing the logical key. As noted adding a physical key include generating a public private key pair with the public key usable for encryption requests of the logical key and the private key usable for decryption requests of the logical key. Alternately provisioning a physical key may comprise generating a symmetric key. Also as noted deprovisioning a physical key may include merely removing or disabling a public key of a public private key pair associated with a physical key ID such that further encryption requests may not permitted but decryption requests of data encrypted with the expired public key may still be permitted or it may be that in the case of a symmetrical key an application programming interface determines that encryption may not be performed using an expired key but that decryption requests may be permitted. In some cases it may be determined that no cryptographic operations may be permitted with an expired physical key or it may be that further cryptographic operations with an exhausted physical key may only be performed for certain users customers services resources applications or specific trusted entities.

In the system performing the process determines whether the throttle of the logical key would be exceeded by performing the requested cryptographic operation. As noted the throttle may be an individual throttle for the logical key or may be the aggregate throttle of the physical keys backing the logical key. If performing the cryptographic operation would exceed the logical key throttle the system performing the process proceeds to and a new throttle may be determined. In some embodiments a determination that fulfilling a request to perform a cryptographic operation may not result in an increase of the logical key throttle but rather may result in the addition of a delay in performing the cryptographic operation such that fulfilling the request does not exceed the logical key throttle. In such embodiments it may be that the logical key throttle may instead be increased or decreased from a specific request to increase or decrease the throttle such as a call to an application programming interface to increase or decrease a logical key throttle. However in the specific example of a throttle may be determined by calculating a rate of transactions per second that would result from performing the cryptographic operation. In some cases calculating a new throttle every time the performance of a cryptographic operation exceeds the throttle may generate unwanted system overhead and as a result an additional buffer rate may be added to the new throttle amount to reduce the frequency with which the throttle may need to be adjusted.

In one or more physical key may be added to back the logical key to meet the new throttle amount in a manner similar to that described previously in the present disclosure. In the specific example of physical keys are added due to a determination that a fulfillment of a cryptographic operation request would exceed a throttle but in other cases it may be that in that the number of cryptographic operations being performed actually falls below a certain threshold and in such a case in a quantity of physical key may be deprovisioned from backing the logical key rather than added to back the logical key.

If in it was determined that the throttle of the logical key would not be exceeded by the performance of the cryptographic operation the system performing the process proceeds to . Likewise the operations of are performed the system performing the process may also proceed to . In the system performing the process determines which physical key of the physical keys backing the logical key to utilize for performing the cryptographic operation. For example if the cryptographic operation is a decryption operation the request to perform the cryptographic operation may have included an identity of the physical key that was used to perform the initial encryption. Or if the cryptographic operation is an encryption operation the physical key to be used for the encryption operation may be determined stochastically from the physical keys backing the logical key or could be determined according to a weighted random or pseudo random scheme such as weighting at least partially based on how close each of the physical keys backing the logical key are to exhaustion. Alternately the physical key for an encryption operation may be determined in a round robin fashion or in a weighted round robin fashion whereby some physical keys may be skipped in the rotation depending on the state of exhaustion of the physical key i.e. keys with high exhaustion may be periodically skipped so that they do not expire early or alternately keys with high exhaustion may be selected more frequently so that they can be exhausted and removed from the backing keys more quickly.

In a determination is made whether the selected physical key has reached an exhaustion point. If so it may be that the physical key is rolled in . In some embodiments where physical keys are rolled by a periodically running process the system performing process may instead return to to select a different key i.e. one that is not exhausted . In some embodiments may be omitted and the cryptographic operation may be performed in beyond the exhaustion of the physical key and a periodically running process handles the rolling of the physical key.

In if the selected physical key is determined to have been exhausted the physical key may be rolled a.k.a. rotated because it has exceeded a threshold of encryption operations or other cryptographic operations performed. In such a case the physical key backing the logical key may be replaced with a newly generated physical key which may be subsequently selected to perform the cryptographic operation in . Is some cases a new physical key is added to back the logical key however the exhausted physical key may be retained for performing decryption operations on ciphertext encrypted by the exhausted physical key.

Otherwise if the selected physical key was not exhausted or if the physical key was rolled to a new physical key in the cryptographic operation is performed with the physical key. In the exhaustion counter of the physical key may be incremented. In some cases other information relating to the cryptography operation may be logged as well such as a timestamp of when the cryptographic operation was performed the type of cryptographic operation performed an identity of the requestor and other such information.

Finally in information relating to the cryptographic operation may be provided to the requestor. Such information may include but not be limited to in the case of an encryption operation the ciphertext and information identifying which physical key was used to perform the encryption. In some cases this information may be provided separately whereas in other cases the information may be provided at once such as in a protocol buffer. Additional information such as initialization vectors may also be included. In the case of a decryption operation the decrypted ciphertext may be provided.

In encrypted data a logical key ID and a physical key ID for performing the decryption operation are received. Note that the encrypted data logical key ID and physical key ID of may occur separate from or together with and in some cases the ciphertext may have the logical key ID and or physical key ID embedded within the ciphertext such as in a protocol buffer. In the information received in is used to determine which physical key of the logical key to use for the decryption operation. In some cases the information includes a physical key ID associated with a symmetrical key or a private key of a public private key pair associated with the physical key ID. In some cases where the particular physical key may have expired due to exhaustion or other reasons the decryption operation request may be denied or may be permitted only to specific users customers applications services resources or some other specially trusted identity.

In the data provided in is decrypted using the physical key determined in . After the data is decrypted in the decrypted data may be provided to the requestor in . Alternately in some cases the decrypted data may be provided to some other entity such as a data store at the request of the requestor in such a case the destination location of the data may be determined from additional information provided in .

Fault zones are logical divisions of resources such that failure of one fault zone may not affect the other zones. Fault zones may differ based on the type of failures being isolated. Examples of different failure types may include but not be limited to power outages civil unrest hard drive failures natural disasters extreme weather conditions and other such failures. As a result fault zones may be divided into one or more different categories including but not limited to geographic regions data centers rooms in a data center server racks in a data center individual servers hard drive clusters backup generators and other such methods of dividing computing resources for fault isolation. In some cases different types of fault zones may be nested within other fault zones i.e. hierarchical however in other cases some types of fault zones may overlap or be isolated from other types of fault zones.

A logical key may further be used with variable backing physical keys assigned to fault zones to provide fault tolerance and fault isolation for cryptographic operations. In one embodiment a multitude of physical keys may be generated for a logical key such that if one or more physical keys corresponding to a fault zone of the logical key is lost or compromised the amount of data affected by the lost or compromised keys may be minimized. Alternately the number of physical keys backing a logical key may be related to a usage level of the physical key that is rather than or in addition to a throttle related to number of operations in a certain time period there may be a limit set on the number of volumes in a distributed computing environment using a particular physical key during a certain period of time. For example a limit may be set on physical keys such that they may not be used with more than 100 volumes meaning that the loss of the key will affect only 100 volumes at most. In this example then for a logical key to be used for 1 000 volumes the logical key may be backed by 10 physical keys. In some cases a customer of a computing resource service provider may specify a usage limit for a physical key of a logical being used. In other embodiments a logical key may be shared between different fault zones and physical keys may be allocated depending on the fault zone of the request for a cryptographic operation originates.

The usage limit of a logical key may be increased or decreased similar to how the throttle of a logical key may be increased or decreased. As an example a logical key may have five physical keys with usage limits set to 100 volumes each giving the logical key the ability to be used with 500 volumes i.e. the aggregation of the usage limits of the five physical keys . If a customer decides to use the logical key with 600 volumes the system of the present disclosure may add another physical key with a usage limit set to 100 volumes to the physical keys of the logical key to bring the aggregated usage limits of the physical keys to 600 volumes. As another example a customer of a computing resource service provider may utilize services spread over multiple geographic fault zones but the services may share the same logical key. In such an example different physical keys may be assigned to the different geographic fault zones such that when a request is received to perform an operation using the logical key a determination is made to determine from which geographic fault zone the request originated and the corresponding physical key is assigned to the request. In this manner should a physical key for the logical key be lost due to a catastrophic event at the geographic fault zone services utilizing the logical key for other geographic fault zones may be unaffected by the loss of the physical key. In some embodiments the physical keys may be managed and contained within one or more hardware security modules.

In some cases the usage limit of the logical key may increase decrease and physical keys added removed as needed according to actual use of the logical key. In other cases an entity may make a request that the usage limit of a key be changed such as through an application programming interface.

When the entity makes a request to perform a cryptographic operation such as an encryption operation on data to be stored in a data store like the data stores the entity may pass the data to be encrypted to an application programming interface and may identify the logical key to perform the operation. Alternately there may be logical keys in the environment and the application programming interface may select the logical key from available logical keys.

In some embodiments when a volume is created a physical key may be selected according to one of the selection schemes described and the physical key may thereafter be associated with that volume. If a volume is to be created and associated with the logical key but all physical keys backing the logical key have reached their usage limits a new physical key may be provisioned into the physical keys and associated with the new volume. In this manner for example if the usage limit is set to be 100 volumes the loss of a particular physical key only causes the loss of a maximum of 100 volumes associated with the logical key and the volumes of the surviving physical keys of the backing physical keys may be unaffected.

The physical keys may be associated with different fault zones in this case each fault zone refers to a different data store of the five data stores . The data stores may be present on one or more machines in a distributed system such as in an environment of a data storage service. The data may be stored in the data stores in a variety of ways including but not limited to each portion of submitted data may be stored in whole or in part on the data stores or striped the data across a redundant array of independent disks e.g. data stores . In this way if one of the keys is lost or compromised or if one of the data stores is lost or damaged 80 of the remaining keys and data stores may be left healthy and unaffected.

Thus for an encryption operation a physical key may be selected from among physical keys to perform the encryption operation. Upon completion of the encryption operation the data may then be stored in a data store corresponding to the selected physical key. In some cases the data may be subdivided and multiple physical keys may be used to encrypt and store the portions of the encrypted data in the data stores corresponding to the multiple physical keys .

In an embodiment when an entity makes a request to perform a cryptographic operation using the logical key a determination is made as to what geographic fault zone the cryptographic operation will be performed in. Once the determination is made a physical key may be selected from the one or more physical keys associated with the determined geographic fault zone for example if the cryptographic operation will be performed at a data center located in the northwest region a physical key may be selected from the physical keys A. In this manner a customer of a computing resource service provider having applications services and resources distributed among different geographic regions for reasons such as redundancy and or providing faster bandwidth to clients of the customer located near the regions may utilize the same logical key for cryptographic operations but the physical key of the plurality of physical keys backing the logical key actually used for the cryptographic operation may be associated with the particular region hosting the devices making the demand for the cryptographic operation. For example a customer may be a vendor at an online marketplace using logical key for ensuring secure transactions between the vendor and purchasers of the vendor s products. By distributing the backing physical keys among different geographic regions the customer may be assured that should one of the plurality of physical keys compromised or data centers be rendered inoperative due to some unforeseen event such as earthquake flood political unrest or extreme weather the remaining data centers may still refer to the same logical key without disruption and cryptographic operations performed at the remaining locations may be unaffected.

Furthermore as described a usage limits may be associated with the geographic fault zones. For example a usage limit of 100 volumes may be set on individual physical keys of the physical keys A E associated with the logical key with the usage limit reflecting the maximum number of volumes a computing resource service provider determines it can afford to lose if a particular physical key is lost or compromised. A usage limit may be associated with the logical key to reflect the group usage limit for each geographic fault zone. That is if the logical key is set with a usage limit of 500 volumes the usage limit may be met by the northwest region having five physical keys A having usage limits of 100 volumes. In this manner if a natural disaster should cause the physical keys A to be lost the logical key may still be used by the other geographic regions and only a maximum of 20 of volumes associated with the lost physical keys A may be lost.

A usage rate may be associated with the logical key . In an embodiment the usage rate of the logical key may represent a group usage rate that is the usage rate may reflect a quota or throttle for cryptographic operations performed by the keys associated with the individual geographic fault zones. As an example of this embodiment the logical key may have a throttle of 50 000 transactions per second which may be met by each group of physical keys A E having 50 physical keys of 1 000 transactions per second yielding a total of 250 physical keys assigned to the logical key . In some embodiments the physical keys A E in different regions may have different physical key throttles. For example in the situation where the logical key has a throttle of 50 000 transactions per second there may be 25 physical keys in the group of physical keys A each having throttles of 2 000 transactions per second while there may be 50 the physical keys in the group of physical keys B each having throttles of 1 000 transactions per second. In some embodiments the logical key may have separate logical key throttles corresponding to each geographic fault zone. In other respects in other regards the logical key throttle may operate as previous described in the various embodiments of the present disclosure.

In the relevant fault zone may be determined and in the physical key for performing the encryption request may be determined. For example one or more physical keys may be associated with a particular fault zone and a physical key may be selected from those one or more physical keys associated with the fault zone corresponding to the requestor or corresponding with a location of the data or a destination location of the data. Furthermore some fault zones may overlap each other. For example a data center may have three server racks each considered to be a separate fault zone and may also have two backup generators with each backup generator supporting half of each server rack. In such an example it may be that different physical keys backing the same logical key are associated with the server rack fault zones and the backup generator fault zones. By further distributing the physical keys among different types of fault zones as well as among the different fault zones the logical key may be more resistant to different types of faults.

In after having determined the physical key to use for the determined fault zone the requested encryption result may be performed using the determined physical key. In the exhaustion counter of the physical key may be incremented. In some cases other information relating to the cryptography operation may be logged as well such as a timestamp of when the cryptographic operation was performed the type of cryptographic operation performed an identity of the requestor and other such information. Lastly in the results of the encryption requests are provided. In some cases the results may be provided to the requestor. In other cases the results may be provided to some other designated entity such as an application or data store on a data server of a data storage service. In some embodiments an identity of the physical key and or logical key used may be provided with the result such as in a protocol buffer of the ciphertext.

Note that unless otherwise specified expressions regarding executable instructions also referred to as code applications agents etc. performing one or more operations that instructions do not ordinarily perform unaided e.g. transmission of data calculations and the like denote that the instructions are being executed by a machine thereby causing the machine to perform the specified operations.

As illustrated in the cryptography service includes a backend system that itself comprises various components in some embodiments. For example the backend system in this example includes a request processing system unit which may be a subsystem of the cryptography service that is configured to perform operations in accordance with requests received through either the request API or the policy configuration API . For example the request processing component may receive requests received via the request API and the policy configuration API determines whether such requests are authentic and are therefore fulfillable and may fulfill the requests. Fulfilling the request may include for example performing and or having performed cryptographic operations. The request processing unit may be configured to interact with an authentication interface which enables the request processing unit to determine whether requests are authentic. The authentication interface may be configured to interact with an authentication service such as described above. For example when a request is received by the request processing unit the request processing unit may utilize the authentication interface to interact with an authentication service which may if applicable provide authentication proof that may be used in order to cause a performance of cryptographic operations.

The backend system of the cryptography service also in this illustrative example includes security modules cryptography modules a policy enforcement module and a coordinator module . The security modules may be hardware security modules although in various embodiments a security module may be any suitable computer device configured according to have capabilities described. Each security module in an embodiment stores keys associated with KeyIDs. Each security module may be configured to securely store the keys so as to not be accessible by other components of the cryptography service and or other components of other systems. In an embodiment some or all of the security modules are compliant with a security standard. For example in some embodiments the security modules are each validated as compliant with a Federal Information Processing Standard FIPS outlined in FIPS Publication 140 1 and or 140 2 such as one or more security levels outlined in FIPS Publication 140 2. In addition in some embodiments each security module is certified under the Cryptographic Module Validation Program CMVP . A security module may be implemented as a hardware security module HSM or another security module having some or all capabilities of an HSM. In some embodiments a validated module is used to bootstrap operations. In some embodiments customers can configure some keys that are stored in and operated on only by validated modules and other keys that are operated on by software. In some embodiments the performance or cost associated with these various options may differ.

The security modules may be configured to perform cryptographic operations in accordance with instructions provided by the request processing unit. For example the request processing unit may provide ciphertext and a KeyID to an appropriate security module with instructions to the security module to use a key associated with the KeyID to decrypt the ciphertext and provide in response the plaintext. In an embodiment the backend system of the cryptography service securely stores keys forming a key space. Each of the security modules may store all keys in the key space however variations are considered as being within the scope of the present disclosure. For example each of the security modules may store a subspace of the key space. Subspaces of the key space stored by security modules may overlap so that the keys are redundantly stored throughout the security modules. In some embodiments certain keys may be stored only in specified geographic regions. In some embodiments certain keys may be accessible only to operators having a particular certification or clearance level. In some embodiments certain keys may be stored in and used only with a module operated by a particular third party provider under contract with the provider of data storage services. In some embodiments constructive control of security modules may require that lawful orders seeking to compel use of keys other than as authorized by the customer to involve either additional entities being compelled or additional jurisdictions compelling action. In some embodiments customers may be offered independent options for the jurisdiction in which their ciphertexts are stored and their keys are stored. In some embodiments security modules storing keys may be configured to provide audit information to the owner of the keys and the security modules may be configured such that the generation and providing of audit information not suppressible by the customer. In some embodiments the security modules may be configured to independently validate a signature generated by the customer such that the provider e.g. hosting the security modules is not able to perform operations under keys stored by the security modules. In addition some security models may store all of the key space and some security modules may store subspaces of the key space. Other variations are also considered as being the scope of the present disclosure. In instances where different security modules store different subspaces of the key space the request processing unit may be configured such as with a relational table or other mechanism to determine which security module to instruct to perform cryptographic operations in accordance with various requests.

In an embodiment the policy enforcement module is configured to obtain information from a request processing unit and determine based on that information whether the request received through the API may be performed. For example when a request to perform cryptographic operation is received through the request API the request processing unit may interact with the policy enforcement module to determine whether fulfillment of the request is authorized according to any applicable policy such as policy applicable to a specified KeyID in the request and or other policies such as policy associated with the requestor. If the policy enforcement module allows fulfillment of the request the request processing unit may accordingly instruct an appropriate security module to perform cryptographic operations in accordance with fulfilling the request.

As with all figures described numerous variations are considered as being within the scope of the present disclosure. For example shows the policy enforcement module separate from security modules. However each security module may include a policy enforcement module in addition to or instead of the policy enforcement module illustrated as separate. Thus each security module may be independently configured to enforce policy. In addition as another example each security module may include a policy enforcement module which enforces policies different from policies enforced by a separate policy enforcement module. Numerous other variations are considered as being within the scope of the present disclosure.

The environment may also include a security module coordinator also referred to as a coordinator module which may be a computer system configured to orchestrate administrative processes for the environment . For example the security module coordinator may be configured with executable code that causes the security module coordinator to coordinate cryptographic key rotation among the security modules . The security module coordinator may also perform other administrative operations such as scheduling and orchestrating the update of cryptographic domains and or domain trusts. Example operations and manners for performing operations are described in U.S. patent application Ser. No. 13 916 915 filed Jun. 13 2013 and titled Device Coordination which is incorporated by reference. Other operations including operations performed in connection with establishing and maintaining secure sessions are described in U.S. patent application Ser. No. 13 916 964 filed Jun. 13 2013 and titled Session Negotiations which is incorporated by reference. In some embodiments for example a group of operators may authorize and update to a domain and or domain trust. The information being updated may be digitally signed by a quorum of the operators i.e. by one or more individual operators who collectively or individually if only one form a quorum where a quorum is defined in accordance with a set of quorum rules of a cryptographic domain installed on a set of the security modules which may be the security modules identified in the current domain.

An operator may provide the authorized update to the security module coordinator which may perform one or more work flows to ensure that the update is installed on an appropriate set of security modules such as a set of security modules identified in the update if the update is to a cryptographic domain. In this manner the operators need only be concerned with obtaining proper authorization and the security module coordinator handles the propagation of updates throughout the environment as appropriate and according to particular updates being made. As discussed above cryptographic domains may define various parameters in which a distributed system may operate. A cryptographic domain may be defined by a domain token.

Furthermore the security module coordinator may be responsible for rotation of physical key and or logical keys of the present disclosure. For example a scheduled background may execute periodically such as every 24 hours on the security module coordinator to determine whether cryptographic keys used in the environment have reached their exhaustion threshold or exhaustion point e.g. physical keys may be set to expire after performing four billion cryptographic operations have approached within a certain range of their exhaustion threshold e.g. a key may be rotated if it is greater than 95 exhausted or are otherwise flagged for rotation such as if the security of a cryptographic key has been compromised. An exhaustion threshold is a stage of the usage of a cryptographic key at which it is desirable to expire and rotate the key. In some embodiments certain types of cryptographic operations such as encryption operations may count toward the exhaustion threshold whereas other types of cryptographic operations such as decryption operations may not count against the exhaustion threshold. In some embodiments decryption operations may count against the exhaustion threshold while encryption operations do not count against the exhaustion threshold.

The exhaustion threshold may be a fixed number of cryptographic operations e.g. four billion etc. or timestamp indicating when to expire the cryptographic key may be a proximity to a fixed number i.e. within a range of 95 to 100 of four billion or proximity to a future timestamp may be a flag or other indicator from an entity that the cryptographic key should be expired and rotated for any of a variety of reasons or may be some other manner of indicating when a cryptographic key should be rotated as would be understood by a person having ordinary skill in the art. The security module coordinator may further be configured to log i.e. track the usage of each cryptographic key e.g. incrementing a counter and or timestamp for a cryptographic key each time it is used in order to determine how near the cryptographic key is to exhaustion threshold and or a rate of usage of the cryptographic key. A network may be any suitable network such as a public or private network like a local area network a wide area network wireless network distributed network or the Internet.

Note that the security module coordinator may be configured to track the usage of cryptographic keys using a sampling scheme probabilistic scheme or some other such scheme where exact usage of a particular physical key may not be known. For example the security module coordinator may log only every Nth cryptographic operation performed or may estimate key usage calculated based on a probabilistic distribution scheme for distributing cryptographic operations to physical keys backing a logical key. In some examples to reduce the amount of resources needed to process logs logs are sampled and samples of the logs are used to statistically estimate usage. In such a scheme in which the exact usage of a particular physical key may be not be known a buffer or offset may be factored into determining whether the physical key has reached an exhaustion threshold to ensure that the physical key is not used to an excess.

Cryptographic operations that may be performed in various embodiments include but are not limited to digital signature generation digital signature verification encryption decryption and random number generation. Operations that utilize cryptographic keys include but are not limited to such as public key and or private key cryptographic algorithms. For example as discussed numerous variations utilize symmetric and or asymmetric cryptographic primitives. Symmetric key algorithms may include various schemes for performing cryptographic operations on data including block ciphers stream ciphers and digital signature schemes. Example symmetric key algorithms include but are not limited to the advanced encryption standard AES the data encryption standard DES triple DES 3DES Serpent Twofish blowfish CASTS RC4 and the international data encryption algorithm IDEA . Example modes of block ciphers include but are not limited to the cipher block chaining CBC mode propagating cipher block chaining PCBC mode cipher feedback mode CFB output feedback OFB mode counter CTR mode and other modes such as authenticated encryption modes such as eXtended Ciphertext Block Chaining XCBC mode Integrity Aware CBC IACBC mode Integrity Aware Parallelizable IAPM mode Offset Codebook OCB mode EAX and EAX Prime modes Carter Wegman CTR CWC mode Counter with CBC MAC CCM mode Galois Counter GCM mode. Symmetric key algorithms may also include those used to generate output of one way functions and include but are not limited to algorithms that utilize hash based message authentication codes HMACs message authentication codes MACs in general PBKDF2 and Bcrypt. Asymmetric key algorithms may also include various schemes for performing cryptographic operations on data. Example algorithms include but are not limited to those that utilize the Diffie Hellman key exchange protocol the digital signature standard DSS the digital signature algorithm the ElGamal algorithm various elliptic curve algorithms password authenticated key agreement techniques the pallier cryptosystem the RSA encryption algorithm PKCS 1 the Cramer Shoup cryptosystem the YAK authenticated key agreement protocol the NTRUEncrypt cryptosystem the McEliece cryptosystem and others. Elliptic curve algorithms include the elliptic curve Diffie Hellman ECDH key agreement scheme the Elliptic Curve Integrated Encryption Scheme ECIES the Elliptic Curve Digital Signature Algorithm ECDSA the ECMQV key agreement scheme and the ECQV implicit certificate scheme. Other algorithms and combinations of algorithms are also considered as being within the scope of the present disclosure and the above is not intended to be an exhaustive list.

The illustrative environment includes an application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. Unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components and executable code can be executed on any appropriate device or host machine as discussed elsewhere. Further operations described as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize a network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example a central processing unit CPU or processor an input device e.g. a mouse keyboard controller touch screen or keypad and an output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within a working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated and each separate value is incorporated into the specification as if it were individually recited. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described can be performed in any suitable order unless otherwise indicated or otherwise clearly contradicted by context. Processes described or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Embodiments of this disclosure are described including the best mode known to the inventors for carrying out the invention. Variations of those embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety.

