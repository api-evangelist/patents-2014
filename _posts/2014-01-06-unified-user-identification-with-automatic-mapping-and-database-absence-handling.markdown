---

title: Unified user identification with automatic mapping and database absence handling
abstract: An identification system that may be used in heterogeneous computing environments provides a fail-free path to providing identifiers from a single canonical namespace. Objects or gateways requiring an identifier for access are accessed using an identifier for the canonical namespace. If an entity requests access using an identifier from another namespace, an external database is consulted to determine if a mapping exists for the identifier to another identifier the canonical namespace. If no mapping exists, or the external database is unavailable, then an identifier is automatically generated in the canonical namespace and is used for the access. An internal database is updated with the automatically generated identifier, providing a mechanism to add mappings without administrative intervention. To access resources requiring an identifier from another particular namespace, a canonical namespace identifier may be mapped to another identifier in the particular namespace, or a generic identifier may be used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325712&OS=09325712&RS=09325712
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09325712
owner_city: Armonk
owner_country: US
publication_date: 20140106
---
The present U.S. patent application is a Continuation of U.S. patent application Ser. No. 13 768 127 filed on Feb. 15 2013 and published as U.S. Publication 20130159349 A1 on Jun. 20 2013 which is a Continuation of U.S. patent application Ser. No. 13 425 019 filed on Mar. 20 2012 and issued as U.S. Pat. No. 8 447 780 on May 21 2013 which is a Continuation of Ser. No. 13 287 189 filed on Nov. 2 2011 and issued as U.S. Pat. No. 8 180 794 on Mar. 15 2012 which is a Continuation of U.S. patent application Ser. No. 12 549 205 filed on Aug. 27 2009 and issued as U.S. Pat. No. 8 086 633 on Dec. 27 2011 and Claims priority thereto under 35 U.S.C. 120.

The present invention is related to security authentication in computer systems and more specifically to an authentication system that provides unified user identification across multiple namespaces.

In networked computer systems and in particular in heterogeneous networking environments across multiple operating systems entity authentication presents a management challenge. Entities or in the present context security principals may be individual users groups particular machines and the like. Entities are typically externally identified by a user ID or name that provides a symbolic tag but internally a numeric tag is typically associated with the entity as a practical measure. The numeric tag then provides a uniform identifier in the particular environment such as security identifier objects SIDs used in Microsoft WINDOWS or group and user identifiers as used in UNIX type operating systems. UNIX is a trademark of The Open Group. Application programming interfaces APIs that access secured objects generally require such a numeric tag as an input either directly or implicitly as do gateways such as network portals.

Typically an external database is used to map an entity identifier from one namespace to all of the various namespaces that the entity might encounter. An entity should be able to access the same set of objects irrespective of the operating system network machine etc. from which an access occurs. Therefore a large number of mappings may be required to and from various namespaces associated with various operating systems machines and in some instances particular sub systems or applications. Such identifier mappings have several drawbacks. First the database must typically be fully populated before use which is a labor intensive process and has a high barrier to entry. Second the reliance on an external database is a security vulnerability that is continuously exposed. Finally it is frequently impractical to query a platform specific database from a different platform making the interface to the external database awkward for at least some of the access paths.

Therefore it would be desirable to provide an identification method and system that provides uniform identification can provide automatic population of identifiers and that adapts easily to access paths from different platforms.

The invention is embodied in a computer performed method computer program product and computer system that authenticates entities generating accesses in a computer system.

Accesses to objects or gateways in the computer system which may be a network of computers executing different operating systems is made using canonical identifiers from a single namespace. Accesses directly specifying an identifier from the canonical namespace are made directly while accesses made with identifiers from other namespaces are looked up in a external mapping database to obtain corresponding identifiers in the canonical namespace. If the external mapping database is not available or the identifier is not already present a new identifier is automatically generated and used for the present access and generally an entire session. The automatically generated identifier is stored in an internal database and used for subsequent accesses by the same entity making it possible to automatically populate the canonical namespace. The external database if available can be periodically polled to determine if the entity obtains an identifier in the same namespace mapped to by an automatically generated mapping indicating a conflict. The external database lookup results are used to resolve the conflict.

Accesses to objects or gateways requiring an identifier from another particular namespace may be handled by a database lookup that obtains an identifier in the particular namespace that corresponds to the identifier from the canonical namespace. Alternatively a generic identifier from the particular namespace may be assigned to all accesses from the canonical namespace.

The foregoing and other objectives features and advantages of the invention will be apparent from the following more particular description of the preferred embodiment of the invention as illustrated in the accompanying drawings.

The present invention relates to computer security systems and specifically identification of entities including users groups and the like between systems and software requiring identifiers from differing namespaces. A canonical namespace is managed such that a fail free path is provided for accesses made via identifiers from other namespaces. When an identifier from another namespace is used for the access an external mapping database is consulted to determine if a corresponding identifier from the canonical namespace is present in the external database. If the external database is not available or the corresponding identifier is not present in the external database an identifier in the canonical namespace is automatically generated. The generated identifiers are stored in an internal database making it possible to populate the internal database automatically. Accesses requiring identifiers from another namespace can be made using a canonical identifier to look up corresponding identifiers in the other namespace or by assigning a generic identifier in the another namespaces to identifiers in the canonical namespace. The external database can be periodically polled to discover any new or changed mappings for identifiers of interest. If a new or changed external mapping is discovered that conflicts with an existing automatically generated mapping stored in the internal database the external mapping is used.

Referring now to a networked computer system in which an embodiment of the present invention is practiced is depicted in a block diagram. A first workstation computer system A includes a processor CPU coupled to a memory MEM that contains program instructions for execution by CPU including a virtual file system VFS interface A which provides a native file system interface to the particular operating system executed by workstation computer system A for example the WINDOWS operating system. Workstation computer A is also depicted as including a graphical display Display and input devices Input Devices such as mice and keyboards for interacting with user interfaces including login screens and other user interfaces for interacting with other computers connected to the network for example administration screens for administering identification and authorization profiles used by the techniques of the present invention.

Workstation computer system also includes a hard disc controller HDC that interfaces processor CPU to local storage device A and a network interface that couples workstation computer system A to network which may be fully wireless fully wired or any type of hybrid network. VFS interface A provides a uniform set of application programming interfaces APIs that provide access to resources such as local storage A or remote storage such as storage devices B and C which are coupled to network by network disc controller NWDC . An external mapping database DB external to the VFS provides storage for traditional administrative mapping information as will be described in further detail below and which may be a single database or comprise multiple databases. An internal mapping database IDB provides for storage of automatically generated identifier mappings and is internal to the VFS which means that internal database IDB is owned by the VFS and is not generally accessible to other sub systems. Another workstation computer system B having an internal organization similar to that depicted in workstation computer system A is coupled to network and executes a different operating system e.g. UNIX. A different VFS client B is provided and executed within workstation computer system B to provide suitable native APIs for accessing storage within workstation computer system B networked storage devices B and C as well as storage device A within workstation computer system A if storage device A is shared.

Network may include wireless local area networks WLANs wired local area networks LANs wide area networks WANs or any other suitable interconnection that provides communication between workstation computer systems A and B storage devices A C external database DB and any other systems and devices coupled to network . Internal database IDB is generally a file stored within a storage device such as one of storage devices A C and is thereby accessible by file system interface objects A and B over network . Further the present invention concerns identification functionality that is not limited to a specific computer system or network configuration. Finally the specification workstation computer systems A and B and the location of their specific memory MEM and file system interface objects A and B does not imply a specific client server relationship or hierarchical organization as the techniques of the present invention may be employed in distributed systems in which no particular machine is identified as a server but at least one of the machines provides an instance and functionality of an object or interface that performs identification in accordance with an embodiment of the present invention. The objects or interfaces process accesses according to methods and structures of the present invention as described in further detail below.

Referring now to a pictorial diagram illustrating a relationship between identifiers and interfaces within the system of is shown. The depicted structure is only one of many possible program structures for implementing the identification methodology described herein and is provided as an example of an embodiment of a structure in accordance with an embodiment of the present invention performing an exemplary set of accesses. An input output request IORQ IORQ is received at VFS interface A and has associated with it an entity identifier ID from system 1 namespace A e.g. a security identifier SID as is used in Windows operating systems. In the example I O request IORQ targets storage device which contains a UNIX based file system image. In order to access target storage device a suitable identifier must be provided when VFS interface A passes I O request IORQ along to the file system driver managing storage device . In order to provide the identifier VFS interface A or a remote object or service called by VFS interface A queries database DB for an entry matching identifier ID. If database DB is available and the entry is present the member C ID of canonical namespace corresponding to identifier ID is obtained from database DB. Otherwise a new identifier is automatically generated C ID in a reserved portion of canonical namespace . In practice identifiers such as identifier C ID are not generated for each access rather internal database IDB stores all such automatically generated identifiers so that subsequent accesses by the same entity will be mapped by internal database IDB directly to canonical namespace . A reserved portion of canonical namespace is used to ensure that no overlap of automatically generated identifiers occurs with another identifier already being used e.g. by a mapping in external database DB. In the exemplary embodiment the automatically generated identifiers are constructed by incrementing a counter as other than the uniqueness of each identifier no special significance nor information is contained in the identifier itself only the mapping to the corresponding identifiers e.g. identifier ID in the other namespace s is important in general. However alternative techniques such as hashing or other computation may be used to generate the automatically generated identifiers. Once identifier C ID is generated it is stored in internal database IDB for future use since any files that become owned or are created by the entity identified by identifier C ID will require the owner.

In the depicted example for generality the file system driver managing storage device is depicted as requiring identifiers from canonical namespace . However under certain circumstances an identifier from canonical namespace or another namespace may be needed as a return value to the originating platform. For example when a query from a WINDOWS operating system is made to obtain the owner of a file which in WINDOWS is a security identifier sd.SID. In order to provide a security identifier for a file having an owner identified only in canonical namespace a conversion algorithm may be used to generate an artificial but compatible security identifier sd.SID from canonical ID C ID . Alternatively a dummy or generic identifier compatible with namespace A may be provided from VFS interface A in response to a request for an owner identifier of a file whose owner is not identified in namespace A.

It is understood that the techniques illustrated above apply to object accesses in general and storage devices files are only an illustrative example of an object type for which access may be mapped according to embodiments of the present invention. Further it is understood that the mapping provided by the above described technique is not a 1 1 security mapping but for automatically generated identifiers can provide some level of access e.g. that level of access available to non owner non group members in UNIX. However once the identifiers are populated in database DB in traditional administrative fashion or automatically generated and stored in internal database IDB permissions can be subsequently tailored to the entity s needs. For example a user may access a UNIX storage device from a WINDOWS operating system temporarily receiving access to directories such as tmp via identifier ID mapped to automatically generated canonical namespace identifier C ID . Subsequently the entity can arrange for an administrator to set permissions for accessing usr entity1 providing the same permissions as entity1 has under their normal UNIX account for example.

Referring now to a method in accordance with an embodiment of the present invention is illustrated in a flowchart. In the depicted method an access attempt including an identifier ID is received by a subsystem step . If the ID is from the canonical namespace decision then the access is made using the ID from the canonical namespace step . The illustrative embodiment of presumes that the ultimate access is made from the canonical namespace so no second lookup is required. If the ID is not from the canonical namespace decision a check is performed to determine if external database DB is present decision . If external database DB is present decision then a lookup is performed in database DB to obtain the corresponding identifier to identifier ID in the canonical namespace step . If the ID maps to the canonical namespace decision then the access is made with the ID retrieved from database DB in the canonical namespace step . If external database DB is not present decision or the ID is not mapped to the canonical namespace in external database DB decision then a lookup is performed in internal database to determine if a previously auto generated mapping to the canonical namespace is already present for the entity decision . If a previous auto generated mapping exists decision the access is then made using the ID from the canonical namespace retrieved from internal database IDB step . If a previous auto generated mapping does not exist decision an ID in the canonical namespace is automatically generated for the entity and stored in internal database IDB step then the access is made using the new ID from the canonical namespace step .

While the invention has been particularly shown and described with reference to the preferred embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention.

