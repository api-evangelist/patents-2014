---

title: Dynamic priority queue mapping for QoS routing in software defined networks
abstract: A QoS management scheme for SDN. Network resource availability of routers and switches are maintained in a central resource database of a SDN controller. The SDN controller performs resource reservation, admission control and route calculation. When a flow is admitted or completed, the resource database is updated accordingly. Dynamic queue mapping for QoS routing in SDN is also provided. For a traffic flow with a certain traffic description and delay requirement, the queue mapping protocol dynamically assigns the flow to different priority queues at different switches along its routing path. Compared with the static mapping of a flow to a specified priority queue, the disclosed mapping is more flexible and uses network resources more efficiently.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09571384&OS=09571384&RS=09571384
owner: Futurewei Technologies, Inc.
number: 09571384
owner_city: Plano
owner_country: US
publication_date: 20140829
---
This application claims priority of U.S. Provisional Patent Application Ser. No. 61 872 487 filed Aug. 30 2013 titled DYNAMIC PRIORITY QUEUE MAPPING FOR QOS ROUTING IN SOFTWARE DEFINED NETWORKS the teachings of which are incorporated herein by reference.

This disclosure is generally related to software defined networking SDN and more specifically to Quality of Service QoS routing.

Internet based real time applications such as video streaming multiparty conferencing Internet gaming and collaborative services have been increasing steadily and are predicted to see a robust growth in coming years. These applications require a performance guarantee expressed in terms of delay bandwidth and loss rate etc. In packet switched networks packets from different flows interact with each other making a Quality of Service QoS guarantee a challenging problem. Several QoS networking frameworks have been studied.

Integrated Service IntServ provides an end to end QoS guarantee but it does not scale well to large networks. For a flow of certain traffic specification IntServ uses the RSVP protocol to set up a path and reserve resources at each node along the path. As per flow states have to be maintained and admission tests have to be performed at each node scaling is difficult.

Differentiated Service DiffServ is more scalable than IntServ however end to end QoS is not guaranteed. In DiffServ traffic is classified into different classes and a packet is forwarded based on per hop behavior PHB at each router. DiffServ may assign higher priorities to traffic classified as a real time application but the QoS is unpredictable as different routers may define different PHBs for the same differentiated services code point DSCP bits.

Multi Path Label Switching MPLS was originally designed to improve forward speed of routers. It uses traffic engineering and constraint based routing technologies for resource management and QoS improvement for backbone Internet Protocol IP networks and enterprise Wide Area Network WAN applications. However the control and management system of MPLS is complicated and expensive.

In many cases instead of providing complicated and expensive QoS services service providers use over provisioning and transport control protocol to partially solve the QoS problem.

QoS routing aims at selecting a network path that satisfies a set of QoS constraints of an application. These constraints can be either link constraints or path constraints. Link constraints such as bandwidth specify a QoS requirement imposed on a link. A path constraint specifies the end to end QoS requirement along a path. For an example a delay constraint on a path is the upper bound of the summary of the delay on each link along the path. In general link constraints are often easy to deal with. For an example links with bandwidth lower than the requirement of an application can be pruned from the network graph. To identify a path that satisfies a path constraint however is more complicated. It has been proven that finding a feasible path satisfying multiple path constraints is NP complete. QoS routing has been studied extensively in the research community many algorithms are proposed with a variety of constraints considered.

SDN is an emerging network architecture with the control plane decoupled from the data plane. In general terms SDN has a centralized network controller which communicates with network devices through a standard application programming interface API referred to as OpenFlow for network configuration and management. In SDN network resources can be dynamically configured to meet the constantly changing requirements of applications. SDN has better control over network resources which makes providing fine grained QoS services viable.

A QoS management scheme and SDN controller for SDN. Network resource availability of routers and switches are maintained in a central resource database of a SDN controller. The SDN controller performs resource reservation admission control and route calculation. When a flow is admitted or completed the resource database is updated accordingly. Dynamic queue mapping for QoS routing in SDN is also provided. For a traffic flow with a certain traffic description and delay requirement the queue mapping protocol dynamically assigns the flow to different priority queues at different switches along its routing path. Compared with the static mapping of a flow to a specified priority queue the disclosed mapping is more flexible and uses network resources more efficiently.

Before undertaking the DETAILED DESCRIPTION below it may be advantageous to set forth definitions of certain words and phrases used throughout this patent document the terms include and comprise as well as derivatives thereof mean inclusion without limitation the term or is inclusive meaning and or the phrases associated with and associated therewith as well as derivatives thereof may mean to include be included within interconnect with contain be contained within connect to or with couple to or with be communicable with cooperate with interleave juxtapose be proximate to be bound to or with have have a property of or the like and the term controller means any device system or part thereof that controls at least one operation such a device may be implemented in hardware firmware or software or some combination of at least two of the same. It should be noted that the functionality associated with any particular controller may be centralized or distributed whether locally or remotely. Definitions for certain words and phrases are provided throughout this patent document those of ordinary skill in the art should understand that in many if not most instances such definitions apply to prior as well as future uses of such defined words and phrases.

In the present disclosure a new QoS management scheme process is provided for SDNs. In this disclosure network resource availability of routers and switches are maintained in a central resource database of the SDN controller. The SDN controller performs resource reservation admission control and route calculation. When a flow is admitted or completed the resource database is updated accordingly.

The present disclosure also provides dynamic queue mapping for QoS routing in SDNs. For a traffic flow with a certain traffic description and delay requirement this queue mapping protocol dynamically assigns the flow to different priority queues at different switches along its routing path. Compared with the static mapping of a flow to a specified priority queue the disclosed mapping is more flexible and uses network resources more efficiently.

In this architecture and apparatus method routers and switches register their resource availability with an SDN controller and the SDN controller records this resource availability information in a resource database forming part of the SDN controller . When an application in an application layer sends its QoS requirement to the SDN controller via a controller application API the QoS requirement includes information including traffic description service starting time and end time service priority etc. Once the SDN controller receives the service request it performs admission control route calculation and resource reservation for the application . If an application is admitted the SDN controller updates a forwarding table in the respective routers and switches along the forwarding path and the resource information for these network elements is updated accordingly in resource database .

In addition a QoS routing protocol for use in SDN for route calculation and admission control for application flows is disclosed and described herein. For a traffic flow with certain bandwidth and delay requirements this QoS protocol dynamically assigns the application flow to different priority queues at different switches along its routing path based on local traffic conditions as shown in . Compared with static mapping of an application flow to a specified priority queue this dynamic mapping is more flexible and uses the network resources including switches and routers more efficiently.

Currently the SDN Openflow protocol provides limited functionality for QoS management. A queue with a minimum bandwidth guarantee is called network slice. Queue configuration is currently not addressed by or part of the Openflow protocol but Openflow has defined primitives to retrieve queue configuration information and queue statistics. Openflow has also defined an interface to map a flow to a queue. Static mapping of a flow into the same priority queue based on Type of Service ToS bits in an IP header or Priority Code Point bits in a VLAN tag may not use network resources efficiently. For example for two respective flows with the same delay requirements the flow with fewer hops may be mapped to lower priority queues than the other flow. On the other hand a flow admitted to a priority queue in one node may not be able to get admitted to the same priority queue on the other node along the path as local traffic conditions may be different.

The SDN controller has knowledge and information of the network topology and the flow states at each node. Advantageously in this disclosure when the SDN controller selects a path through network resources including network nodes and links for a flow from its source to its destination the SDN controller also dynamically maps the flow to different priority queues at different nodes in SDN based on local traffic conditions at the same time satisfying the end to end QoS requirements of the flow.

Given a directed graph G V E where V is the set of nodes and E the set of edges a directed edge e i j has a tail node i and a head node j traffic is always sent from the tail to the head of the edge. Each edge e i j has a bandwidth capacity c i j and a transmission delay d i j associated with it. Assume a rate controlled static priority RCSP queueing service discipline is adopted. The tail of an edge is associated with K priority queues 0 1 . . . K 1 where queue 0 has the highest priority and queue K 1 has the lowest priority. Based on RCSP each queue k has a bounded queue delay d k with d 0 

On each edge e i j along path P admission conditions also have to be satisfied. Let the flow properties be described by X X I B where Xis the minimum packet interval Xis the average packet interval during a define period I is the length of the defined period and B is the maximum packet size. If a flow is to be admitted to priority queue k the following condition has to be satisfied 

Where LBP i j m is the LongestBusyPeriod on priority queue m of edge e i j . This problem can be solved using Dijkstra s algorithm.

As previously noted static mapping of a flow to a priority queue is not flexible and may not use network resources efficiently. In SDNs an SDN controller has available all the information about network topology and traffic conditions at each node . Therefore it is possible for the SDN controller to map a flow to different priority queues at different nodes while maintaining some degree of fairness and efficiency of network resource usage. Here fairness means that a flow is assigned to queues not variant far away from its assigned priority. For example a flow of priority can be assigned to priority queue 1 at one node and priority queue 1 at another node . For this purpose a parameter h is introduced to measure the distance of the priority queues actually mapped to the flow along a path to the priority queue assigned to the flow. For a flow of priority the flow is mapped to q i j on e i j on path P shown at in . For a flow with assigned priority h is defined as 

One goal is to find a minimum delay path for the flow that is not mapped exactly to priority queue and the total deviation is below some threshold. The dynamic queue mapping and routing problem is defined as 

A modified Dijkstra s algorithm is utilized to solve this problem. For each node i two T dimension delay queues are maintained d V T and d1 V T where element d i j records the minimum distance from source node s to node i with positive or zero queue deviation h j d1 i j records the minimum distance from node s to node i with negative queue deviation h j i j records the parent node of i that results in the delay measurement of d i j 1 i j records the parent node of i that results the delay measurement of d1 i j q i j records the priority queue assigned to the flow on the edge lead from the parent node of i to node i that results the delay measurement of d i j and q1 i j records the priority queue assigned to the flow on the edge lead from the parent node of i to node of i that results the delay measurement of d1 i j .

It should be noted that a node may have different parents for shortest delay to the source with different accumulated queue deviation value. For easy back tracing two arrays pq i j and pq1 i j are used to record from which delay measurements in parent node i 1 that results the delay measurement d i j and d1 i j respectively in node i. Elements pq i j and pq1 i j can be positive or negative. For example if d i j is derived based on d i 1 k then pq i j k on the other hand if d i j is derived based on d1 i 1 k then pq i j k.

All the nodes are put into a priority queue Q according to their accumulated delay to the source node. To find the minimum delay to a destination node with overall queue mapping deviation equals 0 the priority queue is keyed by d i 0 otherwise if a queue mapping deviation of T is allowed the priority queue is keyed by the minimum of d i j where key i is used to represent key value of node i.

If the flow cannot be admitted to any of the queues the admission test fails and the algorithm continues to the next neighboring node of u. If the admission test succeeds the admission test returns the highest queue this flow can be admitted to and edge e u v is then relaxed based on the dynamic edge relax procedure shown in and the delay value of node v to s and other parameters is updated using a parameter update procedure shown in and a decrease key operation is performed on priority queue Q. When all the neighboring nodes of node v have been checked node v is marked as visited. If priority queue Q is not empty the next node with minimum value is extracted and the procedure described above is repeated.

If the extracted node has a neighbor node that is marked as visited that neighboring node is ignored. If the extracted node has a distance value of infinity to the source node it means no route with the required resource can be found to that node and thus to the destination node the algorithm will exit. If the extracted node is the destination node a route to the destination has been found and a resource will be reserved using the back trace method as described in .

An important procedure is dynamic edge relax. Assume a flow with assigned priority of the highest priority queue that the flow can be mapped on edge e u v is k. If k this means that the flow can be mapped to a queue i which is higher than or equal to its assigned priority . By definition d u j is the minimum delay on node u with positive or zero accumulated queue mapping deviation of j. Assume the flow is mapped to queue i with k i let i. The positive accumulated queue mapping is increased by when this edge is relaxed this is described by line 6 and 7 in the dynamic edge relax procedure of . On the other hand d1 u j is the minimum delay on node u with negative accumulated queue mapping deviation of j. If j the negative deviation j on node u will be changed to positive or zero deviation j on node v as described by line 8 and 9 in dynamic edge relax procedure of . If j the deviation on node u will remain as negative deviation on node v but will be decreased by a number of as shown in line 10 and 11 of the dynamic edge relax procedure of .

A similar method analysis can be used when the flow is mapped to a queue i that is greater than its assigned priority queue which is covered by line 12 to 23 in dynamic edge relax procedure of .

When a route has been found resource s need to be reserved along the path. Starting from destination node t if the objective is to find the minimum delay with accumulative queue mapping value of 0 that is d t 0 is the objective value the parent node of node t is t 0 and the flow is mapped to q t 0 from the parent node to node t also d t 0 is derived from d t 0 pq t 0 from the parent node. The parent of the parent node would then be t 0 pq t 0 and so on until the source node is reached. Each time a parent node and the queue on which the flow is mapped are found resource s are reserved between the parent node and the node. The same method can be used when the objective is to find the minimum delay for the accumulated queue mapping deviation of certain threshold. The details of back tracing and resource reservation are described in .

With the accumulated queue mapping deviation of zero the algorithm is more flexible than the static mapping and can use network resources more efficiently. Consider a simple 10 node dumbbell graph shown in . Each edge has the same bandwidth and has 8 priority queues associated with it. Flows are sent from nodes to nodes . Each flow has the same packet size of 1500 bytes Xmin of 10 ms. illustrates the number of admitted flows of static and dynamic queue mapping when the flows are set to the same priority of 4 and the bandwidth of edges changes from 10 Mbps to 100 Mbps. illustrates the number of admitted flows when the edges bandwidth is set to 200 Mbps and the flows priority changed from 0 to 7. For both cases it is apparent that dynamic mapping admits more flows than static mapping.

Consider the cases when the queue mapping deviation is set to some threshold. Random connected graphs are generated with different numbers of nodes. The bandwidth of the edges is uniformly distributed between 50 Mbps to 100 Mbps the transmission delay is distributed between 10 ms to 20 ms. The average degree of nodes is set to 3. Each edge is associated with 8 priority queues the delay bound of the priority queues 0 to 7 are set to 1 3 5 . . . 15 respectively. Flows are generated with a random source and destination. The Xmin of the flows are uniformly distributed between 2 to 6 ms the maximum packet size are distributed between 500 to 1500 bytes. Each flow is assigned a priority randomly distributed between 0 to 7. For dynamic mapping two cases are studied with accumulated deviation threshold values set to 8 and 16 and are referred to as dynamic 8 and dynamic 16 respectively. All the flows are set to the same delay constraints. A flow can be rejected if its admission test failed or its delay constraints are violated. For all the simulation 1000 random flows are generated.

The cases when flows of different priorities are assigned different delay constraints are studied. In a random graph each edge is associated with four priority queues 0 1 2 3. The delay bound of the queues are 4 8 12 and 16 milliseconds respectively. Flows assigned to priority 0 1 2 3 are assigned end to end delay constraints of 75 100 125 and 150 milliseconds respectively. Nodes average degree bandwidth and transmission delay distribution are the same as above. Dynamic queue mapping deviation are set to 4 and 8. One thousand random flows are generated. show the number of rejected flows of different priorities when the number of nodes in random graphs are set to 100 and 200. It can be seen that the rejected number of flows of priority 0 are the same for static and dynamic queue mapping. For other flows of other priorities dynamic mapping rejects less flows than static mapping and the dynamic mapping with larger deviation value has a better performance.

Although the present disclosure has been described with an exemplary embodiment various changes and modifications may be suggested to one skilled in the art. It is intended that the present disclosure encompass such changes and modifications as fall within the scope of the appended claims.

