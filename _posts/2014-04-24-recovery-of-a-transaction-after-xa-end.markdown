---

title: Recovery of a transaction after XA end
abstract: Embodiments of the present invention disclose a method for recovery of a two-phase commit transaction. A computer transmits a first transaction identifier to a data store, wherein the first transaction identifier defines a two-phase commit transaction. The computer transmits a prepare command for the first transaction identifier to a first resource manager. The computer determines if a failure and restart occurred within a distributed data processing environment, wherein the failure and restart occurs after the first resource manager receives an end command, but prior to completing execution of the prepare command for the first transaction identifier. Responsive to determining the failure and restart did occur within the distributed data processing environment, the computer retrieves the first transaction identifier from the data store. The computer transmits a rollback command for the retrieved first transaction identifier to the first resource manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361190&OS=09361190&RS=09361190
owner: International Business Machines Corporation
number: 09361190
owner_city: Armonk
owner_country: US
publication_date: 20140424
---
The present invention relates generally to the field of distributed transaction processing and more particularly to recovery of a two phase commit transaction after failure.

Distributed data processing systems involving multiple resource managers in a single transaction use a two phase commit protocol found in the XA Specification by The Open Group to ensure that all resources either commit or rollback any particular transaction consistently. Examples of resources accessed by resource managers using the XA Specification include databases application servers message queues and transactional caches. The act of transferring money from one bank account to a second bank account is an example of a two phase commit transaction. The data processing system ensures that both actions of debiting money from the first account and of crediting money to the second account happen either together or not at all. If one side of the transaction is unable to complete for any reason then the XA protocol provides for rolling back the other transaction which may be ready to commit.

Application programs transmit transactional requests to a middleware transaction manager. The transaction manager coordinates transactions between resource managers using the two phase commit protocol of the XA Specification. The transaction manager controls the transaction globally indicating to each resource manager what action is being requested and when to perform the requested action. The transaction manager allows the completion of a transaction between separate resource managers which may physically reside on different software platforms as well as separate computers. In the first phase of a two phase commit the transaction manager tells each resource to prepare to commit by performing all operations for a transaction and being ready to either make the changes permanent commit or to undo all the changes rollback . Each resource manager responds back to the transaction manager indicating whether the operations succeeded or failed. In the second phase if all operations succeeded the transaction manager tells all resources to commit the changes. If at least one operation fails then the transaction manager tells all resources to rollback the changes and indicates a transaction failure to the requesting application program.

Embodiments of the present invention disclose a method computer program product and system for recovery of a two phase commit transaction. A computer transmits a first transaction identifier to a data store wherein the first transaction identifier defines a two phase commit transaction. The computer transmits a prepare command for the first transaction identifier to a first resource manager. The computer determines if a failure and restart occurred within a distributed data processing environment wherein the failure and restart occurs after the first resource manager receives an end command but prior to completing execution of the prepare command for the first transaction identifier. Responsive to determining the failure and restart did occur within the distributed data processing environment the computer retrieves the first transaction identifier from the data store. The computer transmits a rollback command for the retrieved first transaction identifier to the first resource manager.

Distributed data processing systems use a two phase commit protocol to ensure that transactions involving two or more resources either commit or rollback a particular transaction together. An application relies on a transaction manager TM to coordinate the work of a specific transaction known by a unique transaction identifier between each resource manager RM involved. Two phase commit protocols are described by specifications which outline rules for processing of transactions and outline recovery plans for a failure and restart of a distributed data processing system. Embodiments of the present invention provide for recovery of a two phase commit transaction after a failure and restart of the distributed data processing system. Embodiments included in the present disclosure are described as utilizing the XA Specification by The Open Group . However the use of XA Specification herein is for ease of understanding only and as such is not to be interpreted as a limitation. As such ones skilled in the art recognize that the distributed data processing systems that utilize two phase commit protocols may be governed by other specifications and their associated commands and are therefore included within the limits of this disclosure.

Per the XA Specification a transaction starts with the transaction manager sending an XA Start command and a transaction identifier herein denoted as an XID to each resource manager describing the unit of work the resource manager needs to perform. At the end of the work description the transaction manager sends an XA End command to each resource manager. Subsequently the transaction manager sends an XA Prepare command to each resource manager requesting the resource manager to determine if the work can be completed properly and to send a YES or NO response back to the transaction manager. After a resource manager determines a response the XID and response information is added to a resource manager log for that resource manager while also sending the response to the transaction manager. If all resource managers respond YES to a specific XID then the transaction manager sends an XA Commit to each resource manager requesting the transaction work be completed and made visible to all resources. If at least one resource manager responds NO to a specific XID then the transaction manager sends an XA Rollback command to each resource manager and the transaction work is rolled back to the previous state and discarded.

In the case of a transaction manager or resource manager failure and restart the XA Specification provides for recovery of a transaction if at least one resource manager responded to an XA Prepare command and logged the transaction XID in the resource manager log. Embodiments of the present invention recognize that the XA Specification does not provide for recovery of a transaction if a resource manager received an XA End command for a transaction but did not complete an XA Prepare command and did not log the transaction XID in the resource manager log. If the XID was not logged by a resource manager then after a restart the XID is no longer recoverable and partial transaction fragments may be locked away and hidden from the transaction manager tying up valuable resources. Embodiments of the present invention provide for a method for recovering from a failure and restart of the transaction manager or a resource manager wherein the transaction manager stores a copy of the subsequent XID to be processed before issuing an XA Start command for the subsequent transaction. In such embodiments if the XID is not available from any resource manager log after a failure and restart then the stored copy of the XID is used by the transaction manager to issue an XA Rollback of that XID to all resource managers.

Embodiments of the present invention recognize that solutions to the recovery issue outlined above maintain the capability of working with a resource manager which is strictly compliant to the XA Specification. Embodiments of the present invention provide for customization of the transaction manager without customization of the two or more resource managers. Embodiments of the present invention also recognize that solutions to the recovery issue capable of operating quickly after a failure and restart offer a competitive edge amongst competitors using default time out periods which tie up valuable resources such as temporarily lost system messages fragments of banking transactions and wasted processing time. For example in the case of a stock exchange delays of hours in transacting trades due to resource failures may be costly to customers relying on the timeliness of the transactions. Implementation of embodiments of the invention may take a variety of forms and exemplary implementation details are discussed subsequently with reference to the figures.

The present invention will now be described in detail with reference to the Figures. is a functional block diagram illustrating a distributed data processing environment generally designated in accordance with an embodiment of the present invention. Distributed data processing environment includes server computers and interconnected over network . Distributed data processing environment may include additional server computers client computers or other devices not shown.

Network can be for example a local area network LAN a wide area network WAN such as the Internet or a combination of the two and can include wired wireless fiber optic or any other connection known in the art. In general network can be any combination of connections and protocols that may support communications between server computers and in accordance with an embodiment of the present invention.

Server computers and can each respectively be a server computer an application server a laptop computer a tablet computer a netbook computer a personal computer PC a desktop computer a personal digital assistant PDA a smart phone or any programmable electronic device capable of communicating with the remaining server computers via network . In certain embodiments server computers and can each respectively represent a computer system utilizing clustered computers and components that act as a single pool of seamless resources when accessed through network as is common in data centers and with cloud computing applications. Server computers and may each be a node in a distributed database management environment. In general server computers and can each respectively be representative of any computing device or a combination of devices with respective access to application server transaction manager resource managers and data resources and and data store and are capable of executing application server transaction manager and resource managers and . Server computers and may each include internal and external hardware components as depicted and described in further detail with respect to .

In other embodiments of the present invention application server transaction manager resource managers and data resources and and data store may be on one computer or more than one computer and each item itself may be split into a plurality of parts or modules and spread across more than one computer. In any configuration the following is maintained application server may communicate with transaction manager transaction manager may communicate with resource managers and and data store and resource managers and may communicate with data resources and respectively.

Server computer includes an instance of application server and transaction manager . In the depicted environment application server may be a suite of applications requiring the use of two phase commit transaction processing such as banking software or messaging applications. Transaction manager is middleware that allows a developer to specify the requirements for performing two phase commit transaction processing per the XA Specification between data resource manager applications. Transaction manager provides the application programming interfaces API that enable application server to issue commands for manipulating data within repositories such as data resources and . In other embodiments application server and transaction manager may be on more than one computer and each item may be split into a plurality of parts or modules and spread across more than one computer. In any configuration the following is maintained application server communicates with transaction manager . Transaction manager is described further in .

Server computer includes an instance of data store . Data store is a data repository or database capable of storing data to be used after a failure and restart of server computers and of transaction manager or of resource managers or . Embodiments of the present invention provide for transaction manager storing retrieving and deleting a value for one or more transaction identifiers or XIDs in data store at different times during transaction processing. Per the XA Specification an XID may be defined by 128 bits of data which comprise information including but not limited to identification of the software product creating the XID the ID of the machine creating the XID a date timestamp and a sequence number used to ensure the uniqueness of each XID. Data store may be including but not limited to a database connected to transaction manager a database connected to resource manager or resource manager a message in a messaging queue a memory location of server computer a storage device connected to server computer or any other device capable of data storage in communication with transaction manager .

Server computers and respectively include an instance of resource manager and resource manager . In the depicted environment resource managers and may each be a suite of applications managing a data resource such as a database or message queue. For example resource manager may be a Database Management System DBMS for controlling data resource . Resource managers and are data related applications that perform two phase commit transaction processing per the XA Specification based on commands received from transaction manager . Resource managers and provide the application programming interfaces API that enable transaction manager to issue commands for transferring data directly or indirectly between or within data resources and . Over network resource managers and may each receive a command for a transaction from a requestor such as transaction manager process the command send a response back to transaction manager and perform any transaction associated with the received command. Server computers and are connected to the requestor which may reside on server computer via network . In other embodiments resource managers and may each be on more than one computer and may each respectively be split into a plurality of parts or modules and spread across more than one computer. In any configuration the following is maintained resource manager communicates with data resource and resource manager communicates with data resource .

Server computers and respectively include an instance of data resource and data resource . Data resources and each function as a data repository which may include one or more of the following a relational database a collection of related files a collection of flat files a comma separated text file a non relational database a hierarchical database or a messaging queue. One skilled in the art will recognize that there may be many other types of data resources available for use by two phase commit transaction processing tools.

In the illustrative embodiment of the present invention transaction manager coordinates two phase commit transaction processing per the XA Specification between resource managers and associated with data resources and respectively. Each transaction such as moving money from one bank account to another is identified by a unique transaction identifier or XID. In an embodiment of the present invention transaction manager stores an XID for the subsequent transaction to be processed in data store before sending a start command such as XA Start for that transaction. Transaction manager sends an XA Start command for the XID to resource managers and which describe the work to be performed. At the end of the work description transaction manager sends an XA End command to resource managers and .

Transaction manager sends a prepare command such as XA Prepare to resource managers and which requests each resource manager to determine if the work can be completed and to send a YES or NO response back to transaction manager . After each one of resource managers and transmits a response to transaction manager the XID is added to a resource manager log for each resource manager along with associated XID status information such as YES or NO . If both resource managers and respond YES then transaction manager sends an XA Commit to resource managers and requesting that the transaction work be completed. If at least one of resource managers or responds NO then transaction manager sends an XA Rollback command to resource managers and and the transaction work is discarded. Two phase commit transaction rules utilize an all or nothing property or approach such that either both resource managers and complete their work or both resource managers and discard the work.

In embodiments of the present invention transaction manager removes the previously stored XID from data store after the XA Prepare command has been processed and the XID has been logged into at least one of the resource manager logs for resource managers and . Transaction manager stores the XID for the subsequent transaction to be processed into data store sometime before finishing the current transaction and starting the subsequent transaction.

When a failure and restart happens to at least one of transaction manager resource manager or resource manager then the XA Specification provides for recovery of a transaction if at least one of resource managers and previously responded to an XA Prepare command and logged the transaction XID in the appropriate resource manager log. Transaction manager sends a XA Recover command to resource managers and . In response resource managers and send a list of all XIDs in the resource manager logs that completed the XA Prepare step but were never completed through an XA Commit or XA Rollback command. Transaction manager compares the list of XIDs and their status from the resource manager log for each of resource managers and . Transaction manager determines an action such as an XA Rollback or an XA Commit to transmit to resource managers and based on the information in the logs. The XA Specification outlines standard recovery rules for XIDs which are listed in at least one resource manager s log.

Embodiments of the present invention provide for recovery of a transaction wherein at least one of resource managers and received an XA End command for a transaction XID but neither one of resource managers or responded to an XA Prepare command by logging the transaction XID in a resource manager log. After standard recovery rules are applied transaction manager then retrieves the stored copy if one exists of the XID from data store . Transaction manager issues a rollback command such as XA Rollback of the retrieved XID to both resource managers and . If a resource manager is holding a transaction fragment related to the XID then the resource manager discards the information rolls back any changes the resource manager may have made to a data resource and sends a confirmation to transaction manager indicating completion. If a resource manager does not have any information about the XID then the resource manager sends an error message to transaction manager indicating that the resource manager does not know anything about XID. Transaction manager may be programmed to expect such an error code or message at this point in the recovery process and ignore the error code or message.

For simplicity the illustrative example comprises one transaction manager and two resource managers but one skilled in the art will recognize that there may be as few as one resource manager or more than two resource managers controlled by any one transaction manager. Embodiments of the present invention do not limit the number of resource managers controlled by one transaction manager. Embodiments of the present invention recognize that given multiple resource managers under coordination of transaction manager there may exist multiple transactions with XIDs being stored into data store at any one time. The recovery plan after a failure is the same as above but in such a case an XA Rollback command is transmitted for all the XIDs stored in data store .

Initially transaction manager receives a request to coordinate some task from application server . Transaction manager determines that the received task breaks down into having resource manager perform work item A and having resource manager perform work item B. Transaction manager names the overall task with XID N.

Transaction manager transmits XID N to data store step . Data store protects XID N from loss during a failure and restart of any part of distributed data processing environment . In various embodiments of the present invention data store may be a data storage device in communication with server computer . In alternate embodiments data store may be a record in a database connected to transaction manager or to either resource manager or resource manager . In another embodiment data store may be a message stored in a messaging queue. One skilled in the art will recognize that data store may be any device capable of storing the transaction identifier or XID used in two phase commit protocols.

Transaction manager transmits an XA Start for XID N to resource manager and resource manager step . By transmitting the XA Start command to resource managers and transaction manager indicates the start of the transmission of the details of the work items to each resource manager. Transaction manager sends the details of work item A to resource manager and sends the details of work item B to resource manager .

Transaction manager transmits an XA End for XID N to resource manager and resource manager step . By transmitting the XA End command to resource managers and transaction manager indicates the end of the transmission of the details of the work items for XID N to each resource manager. Transaction manager has completed sending all the details of the work to be completed for XID N. Resource managers and may perform the work items if able although the results of the work are not yet visible to other resources of the system. For example resource manager may debit a bank account in data resource and resource manager may credit a bank account in data resource . The work is performed but not committed yet. For example the money being debited from data resource is in a temporary state so that no other resource manager can request the same money before resource manager has completed the transaction.

Transaction manager transmits an XA Prepare for XID N to resource manager and resource manager step . By transmitting the XA Prepare command to resource managers and transaction manager requests resource managers and to verify that the requested work items for XID N may be completed. There are many reasons why a particular resource manager may not be able to complete a work item including but not limited to equipment failure insufficient resources resource deadlock or network outages. If resource manager or resource manager cannot complete the work item then the respective resource manager transmits a NO to transaction manager . If resource manager or resource manager can complete the work item then the respective resource manager transmits a YES to transaction manager . The responses may be received in another form for example YES may be an XA OK. A NO may be received in various forms indicating the type of error involved such as an XA RBDEADLOCK. YES and NO are used for simplicity of illustration.

Transaction manager receives a response for XID N from resource manager and resource manager step . Transaction manager receives a YES OR NO response from each of resource managers and indicating if they are capable of completing the received work items. Resource managers and each log a YES NO response and the XID N for the current transaction into a respective resource manager log. Each resource manager has a separate resource manager log comprising a list of one or more XIDs for transactions that have finished the XA Prepare command and the YES NO response for each logged XID.

Transaction manager removes XID N from or transmits next XID N 1 to data store step . Once the XID N is logged into at least one of the resource manager logs for either resource manager or resource manager transaction manager may remove the XID N for the current transaction from data store . If another transaction has been received by transaction manager from application server then transaction manager stores the XID N 1 for the next transaction into data store . If another transaction has not been received by transaction manager then data store remains empty. In an alternate embodiment step may be performed between steps and or and such that the next XID N 1 is transmitted to data store prior to transmitting an XA Start command for XID N 1.

Transaction manager determines if responses from resource manager and resource manager contain at least one NO decision . Responsive to receiving a response from both resource managers and transaction manager determines if at least one NO was received from either of resource managers or . If transaction manager determines that the responses from resource manager and resource manager contain at least one NO yes branch decision then transaction manager transmits an XA Rollback for XID N to both resource manager and resource manager step . If either one or both of resource manager or resource manager respond to the XA Prepare command with a NO then the transaction should not proceed per the all or nothing property of the two phase commit transaction protocol. To remove any changes to data resources and that may have been performed but are not visible to other resources transaction manager transmits an XA Rollback command for the current XID N to both resource managers and . Responsive to receiving the XA Rollback command from transaction manager each of resource managers and can undo the work items received between steps and and throw away all information regarding the work items and transaction XID N. Upon rollback information for XID N can either be removed from the respective resource manager logs or listed as completed and retained for purposes of debugging. A transaction is considered completed after either a XA Rollback or a XA Commit is performed as both are acceptable outcomes to a transaction considering the all or nothing property of the two phase commit transaction protocol.

If transaction manager determines that responses from resource manager and resource manager do not contain at least one NO no branch decision then transaction manager transmits an XA Commit for XID N to both resource manager and resource manager step . If both resource managers and respond to the XA Prepare command with a YES then all resource managers are able to perform the work and to make the changes permanent. Responsive to receiving the XA Commit command from transaction manager each of resource managers and can complete the work items for the current XID N and make the performed changes permanent and visible to other resources. Upon commit information for XID N can either be removed from the respective resource manager logs or listed as completed and retained for purposes of debugging.

After either an XA Commit step or an XA Rollback step transaction manager transmits an XA Start for XID N 1 to resource manager and resource manager step . The previous transaction for XID N has completed processing and the next XID N 1 is ready to begin processing. By transmitting the XA Start command to resource managers and transaction manager indicates the start of the transmission of the details of the work items for XID N 1. For example a transaction with XID N 1 may comprise work item C and work item D. Transaction manager sends the details of work item C to resource manager and sends the details of work item D to resource manager .

Step starts the processing of XID N 1 which is similar to step for the previous XID N. Steps or and may repeat until transaction manager has completed coordinating all current transaction requests or until some failure of the system.

Transaction manager transmits XID N to data store step . Transaction manager transmits XID N to data store for the purpose of storing the XID in case of a system failure. One skilled in the art will recognize that data store may be any device capable of storing a transaction identifier or XID used in two phase commit protocols. Step is the same as step in .

Transaction manager transmits an XA Start for XID N to resource manager and resource manager step . By transmitting the XA Start command to resource managers and transaction manager indicates the start of the transmission of the details of the work items to each resource manager. Transaction manager sends the details of work item A to resource manager and sends the details of work item B to resource manager . Step is the same as step in .

Transaction manager transmits an XA End for XID N to resource manager and resource manager step . By transmitting the XA End command to resource managers and transaction manager indicates the end of the transmission of the details of the work items for XID N to each resource manager. Transaction manager has completed sending all the details of the work to be completed for XID N. Resource managers and may perform the work items if able although the results of the work are not yet visible to other resources of the system. Step is the same as step in .

Transaction manager transmits an XA Prepare for XID N to resource manager and resource manager step . By transmitting the XA Prepare command to resource managers and transaction manager requests resource managers and to verify that the requested work items for XID N may be completed. As mentioned before there are many reasons why a particular resource manager may not be able to complete a work item. If resource manager or resource manager cannot complete the work item then the respective resource manager transmits a NO to transaction manager . If resource manager or resource manager can complete the work item then the respective resource manager transmits a YES to transaction manager . The responses may be received in another form but YES and NO are used for simplicity of illustration. Step is the same as step in .

Transaction manager determines a failure and restart step occurred. A failure in the distributed data processing environment of may occur at one or more of server computers and . A failure may involve hardware problems such as power outages or failures communication loss network outage or reboot. Software such as transaction manager resource manager or resource manager may fail in a program crash and have to restart. Responsive to determining a failure and restart occurred transaction manager initially follows a recovery plan from the XA Specification.

Transaction manager transmits an XA Recover to resource manager and resource manager step . By transmitting the XA Recover command to resource managers and transaction manager requests resource managers and to retrieve the respective resource manager log of one or more XIDs for transactions that have finished the XA Prepare command and the associated YES NO response for each logged XID.

Transaction manager receives logs from resource manager and resource manager step . In one embodiment resource manager retrieves a list of XIDs from the resource manager log which had a response for the XA Prepare command and transmits the list of XIDs with associated responses to transaction manager . In another embodiment resource manager sends a copy of the resource manager log or a link to the log file to transaction manager . Each list or log includes a list of all logged XIDs and the associated responses to the XA Prepare command for each XID in the list. Resource managers and transmit XIDs which have completed an XA Start command an XA End command and an XA Prepare command but have not completed either an XA Commit command or an XA Rollback command.

Transaction manager coordinates recovery plan for resource manager and resource manager step . Transaction manager compares the list of XIDs and their statuses in the log for each of resource managers and . Transaction manager determines an action such as an XA Rollback or an XA Commit to transmit to resource managers and based at least in part on the information in the logs. The XA Specification outlines standard recovery rules for XIDs which are listed in at least one resource manager log.

Transaction manager retrieves XID N from data store step . After standard recovery rules are applied in step transaction manager retrieves the stored copy from step if one exists of XID N from data store . Data store may be a storage type unaffected by a failure and restart of the system. Embodiments of the present invention recognize that if XID N was not logged in one of the resource manager logs before a failure and restart then XID N is no longer recoverable using standard recovery procedures in the XA Specification and partial transaction fragments may be locked away and hidden from transaction manager tying up valuable resources. Embodiments of the present invention provide for the recovery of XID N by storing XID N in step and then retrieving XID N in step after a failure.

Transaction manager transmits an XA Rollback for XID N to resource manager and resource manager step . Embodiments of the present invention provide for recovery of a transaction such as XID N wherein at least one of resource managers and receives an XA End command for XID N but neither one of resource managers and responds to an XA Prepare command by logging transaction XID N in a resource log. Transaction manager issues an XA Rollback command of the retrieved XID N to both resource managers and .

Transaction manager receives a response from resource manager and resource manager step . Transaction manager receives a response indicating success or failure of the XA Rollback command from each of resource manager and resource manager . For example if resource manager has a transaction fragment locked away related to XID N then resource manager discards the transaction information while rolling back any changes resource manager may have made to data resource and sends a response to transaction manager indicating success of the XA Rollback command. In another example if resource manager does not identify any information about XID N in the resource manager log then resource manager sends an error code or message to transaction manager . The error code may indicate failure of resource manager to identify information related to the retrieved transaction identifier or XID N while executing the XA Rollback command. Transaction manager may be programmed to expect such an error message at this point in the recovery process and may be programmed to not respond to the error message.

For simplicity the illustrative example comprises one transaction manager and two resource managers but one skilled in the art will recognize that there may be more than two resource managers controlled by the transaction manager. Embodiments of the present invention would provide for transaction manager sending the XA Rollback command for XID N to all resource managers controlled by transaction manager .

Server computers and may each include respective communications fabric which provides communications between computer processor s memory persistent storage communications unit and input output I O interface s . Communications fabric can be implemented with any architecture designed for passing data and or control information between processors such as microprocessors communications and network processors etc. system memory peripheral devices and any other hardware components within a system. For example communications fabric can be implemented with one or more buses.

Memory and persistent storage are computer readable storage media. In this embodiment memory includes random access memory RAM and cache memory . In general memory can include any suitable volatile or non volatile computer readable storage media.

Application server transaction manager resource managers and data resources and and data store are stored in respective persistent storage for execution and or access by one or more of the further respective computer processors via one or more memories of memory . In this embodiment persistent storage includes a magnetic hard disk drive. Alternatively or in addition to a magnetic hard disk drive persistent storage can include a solid state hard drive a semiconductor storage device read only memory ROM erasable programmable read only memory EPROM flash memory or any other computer readable storage media that is capable of storing program instructions or digital information.

The media used by persistent storage may also be removable. For example a removable hard drive may be used for persistent storage . Other examples include optical and magnetic disks thumb drives and smart cards that are inserted into a drive for transfer onto another computer readable storage medium that is also part of persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices including resources of server computers and . In these examples communications unit includes one or more network interface cards. Communications unit may provide communications through the use of either or both physical and wireless communications links. Application server transaction manager resource managers and data resources and and data store may be downloaded to respective persistent storage through communications unit .

I O interface s allows for input and output of data with other devices that may be connected to server computers and . For example I O interface may provide a connection to external device s such as a keyboard a keypad a touch screen and or some other suitable input device. External device s can also include portable computer readable storage media such as for example thumb drives portable optical or magnetic disks and memory cards. Software and data used to practice embodiments of the present invention e.g. application server transaction manager resource managers and data resources and and data store can be stored on such portable computer readable storage media and can be loaded onto respective persistent storage via I O interface s . I O interface s also connect to a display .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

The programs described herein are identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature herein is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

It is to be noted that the term s Smalltalk and the like may be subject to trademark rights in various jurisdictions throughout the world and are used here only in reference to the products or services properly denominated by the marks to the extent that such trademark rights may exist.

