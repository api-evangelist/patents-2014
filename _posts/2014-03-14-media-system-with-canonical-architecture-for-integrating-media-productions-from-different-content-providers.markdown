---

title: Media system with canonical architecture for integrating media productions from different content providers
abstract: A system and method for integrating media productions imported from a plurality of content provider systems are described. The system and method may communicate with a plurality of content provider systems to import a set of media productions from each content provider system and may normalize each media production into a normalized media document format. The media productions may be matched to each other based on the normalized media documents. The system and method may also create and store a plurality of canonical objects based on the matches determined for the media productions. For example, if a given media production matches one or more other media productions then all of the matching media productions may be linked together by a canonical object, e.g., so that the canonical object functions as an abstract representation of all of the matching media productions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09300986&OS=09300986&RS=09300986
owner: Apple Inc.
number: 09300986
owner_city: Cupertino
owner_country: US
publication_date: 20140314
---
This application claims the benefit of U.S. Provisional Application No. 61 794 454 filed on Mar. 15 2013 which is incorporated by reference herein in its entirety.

This invention relates to the field of computer based media systems and more particularly to a system and method for integrating media productions e.g. movies television programs videos etc. that originate from different online content providers.

Online media systems that stream multimedia content to users over the Internet have become very popular in recent years since they provide a convenient way for users to view content. However the very popularity of such media systems means that there are now a large number of media content providers each with their own particular interface that the user must invoke and navigate in order to find and play the desired content. It would be desirable to provide a system that can integrate the media content that is available from different content providers e.g. to provide users or client systems with an integrated view of content across multiple content provider systems.

Various embodiments of a system and method for integrating media productions imported from a plurality of content provider systems are described. According to some embodiments the system may communicate with a plurality of content provider systems to import a set of media productions from each content provider system. The system may create a respective media document representing each of the media productions and may match the media productions to each other based on the media documents.

In further embodiments the system may create and store a plurality of canonical objects based on the matches determined for the media productions. For example if a given media production matches one or more other media productions then all of the matching media productions may be linked together by a canonical object e.g. so that the canonical object functions as an abstract representation of all of the matching media productions. In some embodiments if the system did not determine any matches between a given media production and any other media production then a canonical object may still be created to represent the given media production e.g. without linking it to any other media production.

In some embodiments the media documents created by the system to represent the media productions may be normalized media documents. The media document for a given media production is referred to as being a normalized media document if its format is independent of the particular content provider system from which the media production was obtained. For example regardless of the particular content provider system from which a given movie production originates the normalized media document for the movie may include metadata describing the movie such as its title director actors release year rating etc. The normalized media documents created for all the movie productions obtained from all the content provider systems may have the same normalized information fields and format. Normalizing the media productions into normalized media documents having a common format across all the content provider systems may abstract the information of the media productions away from the particular data representations used by the various content provider systems and enable media productions from different content provider systems to be treated identically regardless of which content provider systems they originate from.

Since the original media productions obtained from the content provider systems may be stored in different formats the system may implement a different normalization module for each content provider system. The normalization module for each content provider system may be configured to analyze the particular format of the media productions obtained from the content provider system in order to extract the necessary information to create the normalized media documents.

In further embodiments the system may provide an application programming interface API that includes a set of functions that enable client modules to query the system to obtain information regarding the canonical objects and or the normalized media documents. For example the API may include a function configured to provide the IDs of all the canonical objects maintained by the system another function to accept the ID of a given canonical object as an input parameter and return information indicating all of the media productions linked together by the canonical object etc.

In some embodiments an indexer may utilize the API to create an index based on the canonical objects. For example the index may be useable by a client device of an end user to display a user interface in which the matching media productions linked together by the canonical objects are grouped together. As one example if a given canonical object links together two or more instances of the same movie from different content provider system the user interface may first display a single canonical representation of the movies and the user may then select the canonical representation to see further details such as the individual instances of the matching movies.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

The media integration system may be configured to import the media productions from the content provider systems e.g. via a network A. For example each content provider system may include one or more computer servers with which one or more computer servers in the media integration system communicate in order to cause the media productions to be transmitted over the network A to the media integration system .

In some embodiments the media integration system may be configured to provide the media productions obtained from the content provider systems to various end users or households. For example each end user may have a client device configured to receive the media productions and display or play them e.g. on a display device or other media device. For example in some embodiments a given client device may be coupled to or may be included in a television device . In other embodiments a given client device may be coupled to or included in any of various other kinds of devices able to display or play media productions such as a set top box smart phone home media hub tablet computer wearable receiving device e.g. watch or glasses etc. The media integration system may communicate with the client devices via a network B in order to deliver the media productions to the end users.

Referring again to in various embodiments the media integration system may be configured to import media productions from any number of content provider systems and deliver the media productions to any number of client devices . Also the networks A and B may include any type of network or combination of networks. For example the networks may include any type or combination of local area network LAN a wide area network WAN wireless networks an Intranet the Internet storage area network SAN etc. Examples of local area networks include Ethernet networks Fiber Distributed Data Interface FDDI networks and token ring networks. Also each system or device may be coupled to the network s using any type of wired or wireless connection medium. For example wired mediums may include Ethernet fiber channel a modem etc. Wireless connection mediums may include a wireless connection using a wireless communication protocol such as IEEE 802.11 wireless Ethernet a modem link through a cellular service a satellite link etc.

There may be considerable overlap among the media productions that the media integration system obtains from the various content providers. For example multiple content providers may offer the same movie or television program. Rather than treating corresponding media productions from different content providers as being independent of each other the media integration system may be configured to determine which media productions match each other and may group together the matching media productions in various ways. This may be useful for example in order to be able to provide the client devices with indices in which matching media productions from different content providers are grouped together e.g. so that the client devices can display a user interface that integrates corresponding media productions from different providers. For example when displaying a user interface for browsing for movies it may be desirable from a client device to display a single listing for each movie. If the movie is available from multiple content providers the user can then drill down into that listing to see the individual movies from each of the content providers.

The media integration system may utilize different techniques to import the media productions from different content provider systems. In various embodiments the media integration system may communicate with each content provider system using any of various kinds of communication models or software interfaces in order to discover and import the media productions. Since the content provider systems may be maintained by third parties or companies different than the organization which maintains the media integration system each content provider system may be implemented differently. Thus the media integration system may use whichever communication techniques are most appropriate for each content provider system. For example the media integration system may use a push based technique to import the media productions from one content provider system e.g. such that the content provider system uses push notifications to notify the media integration system when new updated media productions are available whereas the media integration system may use a pull based technique to import the media productions from another content provider system e.g. such that the media integration system periodically queries the content provider system to determine whether new updated media productions are available . As another example the media integration system may use a hypertext transfer protocol HTTP based interface to communicate with one content provider system via uniform resource locators URLs and may use a file transfer protocol FTP or other type of communication protocol to communicate with another content provider system.

In some embodiments the media integration system may include a respective import module configured to communicate with each content provider system in order to import the media productions from that content provider system. For example as illustrated in an import module A may communicate with the content provider system A to import the media productions A an import module B may communicate with the content provider system B to import the media productions B etc.

Different content provider systems may provide their media productions in different formats. For example one content provider system may deliver a given media production in a single file that includes all the content and metadata for the media production whereas another content provider system may deliver a given media production as a plurality of separate files. Each import module may initially store the media productions obtained from its respective content provider system in whichever format the content provider system delivers them. Each media production may be stored on one or more storage devices in the media integration system e.g. in the form of one or more files or database entries.

After importing the media productions from the content provider systems the media integration system may next create and store a normalized media document representing each media production. A media document may refer to any data structure object or portion of stored information that describes or represents the corresponding media production. The media document for a given media production is referred to as being a normalized media document because its format is independent of the particular content provider system from which the media production was obtained. For example regardless of the particular content provider system from which a given movie originates the normalized media document for the movie may include metadata describing the movie such as its title director actors release year rating etc. The normalized media documents for all the movies obtained from all the content provider systems may have the same information fields and format. For example in some embodiments the normalized media document for each movie could be stored as a row in a relational database where the row includes a column for the movie s title another column for the movie s director etc.

As discussed above the media production information originally obtained by the media integration system may be stored in different formats for different content provider systems. Normalizing the media productions into normalized media documents having a common format across all the content provider systems may abstract the information of the media productions away from the particular data representations used by the various content provider systems and enable media productions from different content provider systems to be treated identically regardless of which content provider systems they originate from.

Since the original media productions obtained from the content provider systems may be stored in different formats the media integration system may implement a different normalization module for each content provider system. The normalization module for each content provider system may be configured to analyze the particular format of the media productions obtained from the content provider system in order to extract the necessary information to create the normalized media documents. For example illustrates a normalization module A that analyzes the media productions A obtained from the content provider system A and creates a respective normalized document for each one a normalization module B that analyzes the media productions B obtained from the content provider system B and creates a respective normalized document for each one etc.

For a given type of media production the normalized media document created for the media production may be in the same format regardless of which normalization module creates the normalized media document. However different types of media productions may use different types of normalized media documents. For example as described above the normalized media document for a movie may include information such as the movie s title director actors release year rating etc. On the other hand the normalized media document for a music album may include different information. In general the normalized media document for a given type of media production may include any of various information fields that describe that type of media production and enable particular media productions of that type to be matched to each other. In addition a normalized media document may also include other information fields that the media integration system uses to manage the media productions. For example in some embodiments each normalized media document may include management information such as an is deleted Boolean field indicating whether the corresponding media production has been deleted from the system a last updated field to indicate the most recent time when updated information for the media production was received from the content provider system etc. Each normalized media document may also include a pointer link ID or other information that identifies the original media production to which the normalized media document corresponds.

In some embodiments each normalized media document may include metadata about the corresponding media production as well as other metadata used for managing the normalized media document but may not include the audio video data that implements the actual audio video content of the media production. Instead each normalized media document may include a pointer ID or other information that references the original audio video data imported from the content provider system or references a media production object imported from the content provider system where the media production object may in turn reference or include the original audio video data . Thus for example in some embodiments when delivering a particular media production to a client device the media integration system may deliver the original audio video data imported for that media production from the respective content provider. In other embodiments the media integration system may convert the audio video data for some of the media productions into a different format if desired. In various embodiments the original or converted audio video data for a given media production may be in any digital format or may use any kind of encoding. Examples of video formats and encoding schemes include MPEG Moving Picture Experts Group 1 MPEG 2 MPEG 3 MPEG 4 Audio Video Standard AVS Advanced Audio Coding AAC etc.

In other embodiments the media integration system may not import the actual audio video data of the media productions from the content provider systems. For example the media integration system may import the metadata about the media productions and create a normalized media document for each one based on the metadata which allows the media integration system to match the media productions to each other and create canonical objects representing matching sets of media productions as described in detail below. In some embodiments if a client device with which the media integration system communicates requests the audio video content of a particular media production the media integration system may in some embodiments redirect the client device to the specific content provider system from which the media production originated in order to retrieve the audio video content from the content provider system.

While the operation of the import modules and normalization modules may be specific to the particular content provider systems most of the rest of the operation of the media integration system may be abstracted away from the particular content provider systems. Once the normalized media documents for the media productions have been created the media integration system may treat all the normalized media documents alike regardless of which particular content provider systems they are associated with. This may enable new content provider systems to be integrated with the media integration system fairly easily and quickly without requiring extensive modifications to be performed. For example adding a new content provider system may mainly be a matter of implementing a new import module and normalization module for the new content provider system and the rest of the media integration system may not need to be changed.

Once the normalized media documents have been created a mapping module may then perform a matching algorithm that analyzes the normalized media documents to determine which media productions match each other. A match between two media productions may indicate that the media productions should be grouped together by the media integration system and or should be treated as being instances of the same underlying media production. For example multiple content provider systems may each transmit the same movie to the media integration system in which case the media integration system may match them together and treat them as instances of the same movie. As another example the content provider systems may transmit movies movie trailers and movie reviews to the media integration system . The media integration system may compare the normalized documents to determine which movie reviews and trailers match which movies e.g. so that the reviews and trailers for a certain movie can be linked to the movie itself.

In some embodiments the media integration system may implement a different mapping module for each type of media production e.g. a mapping module for movies another mapping module for television programs etc. Each mapping module may perform an appropriate algorithm for the particular type of media production. Thus the mapping module for each type of media production may perform an appropriate matching algorithm or heuristic for that type of media production.

As indicated in block if the mapping module determines a match between two normalized media documents the mapping module may store a mapping indicating that they matched. The mapping may include information specifying the two normalized media documents e.g. specifying an ID of each one that matched. In some embodiments the mapping information may also specify a score or confidence level indicating the level of confidence in the match. Matches that have low scores may be flagged for review by a human administrator to verify that they should actually be considered as matches.

For each group the canonicalization module may create a new canonical object to represent the group block and may add each of the normalized media documents in the group to the canonical object block . In some embodiments the canonicalization module may also send a notification message to one or more other modules in the media integration system to inform them that the new canonical object has been created block e.g. so that they can take appropriate actions in response. For example illustrates a messaging queue in which the notification message may be stored. A store indexer or other client module s may receive the notification from the messaging queue and query a canonical API application programming interface in order to determine information regarding the new canonical object that was added to the system. The store indexer may be configured to build indices which are exposed to the client devices or other systems external to the media integration system e.g. where the indices use the groupings specified by the canonical objects to logically group together different media productions. Thus the store indexer may update one or more of its indices to add the new group of media productions represented by the new canonical object.

In addition to storing information for each canonical object that specifies the set of normalized media documents represented by the canonical object the media integration system may also store other information in association with the canonical object that applies to all of the normalized media documents in the set. This additional information is illustrated in as the override additional information . For example suppose that a given canonical object groups together a set of normalized media documents corresponding to movies from different content provider systems. Each content provider may provide its own description of the movie but it may be desirable to use a different description for the movie that does not come from any of the content provider systems. In this case the canonical object could include a description override field that can be filled in by the vendor of the media integration system which may be used by the client devices when displaying the description of the movie. As another example the media integration system may be configured to present some of the media productions as being featured content for promotional purposes and each canonical object could include a featured content Boolean field to indicate whether or not it is currently featured.

As illustrated in the media integration system may include a content management tool which enables human administrators of the system to perform various management functions. For example the content management tool may enable an administrator to add various kinds of override additional information to particular canonical objects. The content management tool may also enable an administrator to change or override the mappings that are automatically determined by the mapping module e.g. if these are found to be erroneous. As another example an administrator may use the content management tool to change various information fields in a media production or normalized media document such as the title actors etc. As indicated in the content management tool may use the canonical API to lookup and edit the information in various objects stored in the system.

In some embodiments the program may be imported into multiple data stores or databases. For example a normalized media document for the program may be created and stored in a normalization database . The information stored in the normalization database may include only the core information fields which the mapping module needs to use to match the normalized media document to other normalized media documents. A more complete representation which includes not only the core information fields but also additional information may be stored in the full database . For example in some embodiments the image gallery channel lineup schedule information etc which is provided by the content provider system may not be used by the mapping module and may not be stored in the normalized media document but this information may still be stored in the full database . It may be desirable to use a separate normalization database in some embodiments so as to be able to use a fast or specialized type of database that is especially well suited for performing the matching mapping based on the core information fields whereas another type of database may be better suited for storing the full information for the media productions.

In addition another movie called Find Nemo from a different content provider system CP B has also been added to the system as indicated by the newly inserted normalized media document . The mapping module has determined that the normalized media document matches the normalized media document and has created and stored a new mapping 9002 to indicate this match.

Similarly the canonical object 5002 groups together the normalized media documents having the IDs 4 and 5. The canonical object 5003 includes only the normalized media document having the ID 6 since this normalized media document has no mapping in the mappings table to any other normalized media document.

The media integration system may periodically or occasionally receive updates from the various content provider systems. The import module s for the respective content provider system s may update the normalized media documents which may include changing information fields within existing normalized media documents e.g. if the information for the corresponding media production from the content provider system has changed marking normalized media documents as deleted e.g. if the corresponding media production has been deleted from the content provider system or adding new normalized media documents e.g. if new media productions have been added to the content provider system .

In response to the update the mapping module may update the mappings for the normalized media documents which have been updated e.g. changed added or marked for deletion . For example if the title or some other information field for a given normalized media document changed then the normalized media document may no longer match one or more other normalized media documents that it previously matched and so the mappings to these other normalized media documents may be deleted or may be left in the mappings table but marked as deleted . If the change results in the normalized media document now matching one or more normalized media documents that it did not match before then mappings to these other normalized media documents may be added to the mappings table.

If a given normalized media document was marked as deleted by the update then all of the mappings between the normalized media document and other documents may be marked as deleted. If a new normalized media document was added then the mapping module may determine whether it matches any other normalized media documents and if so add appropriate mappings.

The canonical objects may also be updated in response to the update from the content provider system s . is a flowchart diagram illustrating one embodiment of a method for updating the canonical objects after the media integration system has updated the normalized media documents and the mappings. For each normalized media document that was updated the canonicalization module may determine whether the normalized media document was marked for deletion block . If so then each row in the Canonical Version table that corresponds to the normalized media document may be marked as deleted block . The canonicalization module may also add a notification message to the message queue to indicate that the canonical object s to which these rows correspond changed e.g. so that the store indexer or other client modules can update their information.

If the normalized media document was not marked for deletion then the canonicalization module may query the database to determine whether any rows in the Canonical Version table correspond to this normalized media document e.g. by checking the normalized media document ID specified in each row block . If not then this indicates that the normalized media document is a new one that has been added to the system. In this case the canonicalization module may look up the mappings for the normalized media document block and create a new canonical object e.g. by adding a new row to the Canonical Object table block . The canonicalization module may then create a new row in the Canonical Version table for each unique mapping block and place an update message in the message queue block to indicate that the new canonical object has been created.

Referring again to block if the canonicalization module determines that any rows in the Canonical Version table do correspond to the normalized media document then this indicates that the normalized media document already existed in the system and has been updated. In this case an update flow may be performed as shown in the flowchart of . As shown in the canonicalization module may lookup the mappings for the updated normalized media document block and determine whether they have changed block . If not then no change to the canonical objects is necessary and so the canonicalization module may not perform any modifications. However the canonicalization module may still place a message in the message queue indicating that the normalized media document was updated block e.g. so that the store indexer or other client modules can update their information to reflect the changes to the normalized media document if necessary.

If the mappings for the updated normalized media document have changed then the canonicalization module may determine whether any new mappings for the normalized media document were added block . If not then the canonicalization module may then determine whether any of the previously existing mappings for the normalized media document were deleted block . If no mappings were added or deleted then the flow again proceeds to block since no change to the canonical object information is necessary. Otherwise if any of the previously existing mappings were deleted then the canonicalization module may perform a split operation by creating a new canonical object in the Canonical Object table and a new row in the Canonical Version table linking the updated normalized media document to the new canonical object block . The canonicalization module may also remove the updated normalized media document from the previous canonical object it was included in. The canonicalization module may then place a message in the message queue to notify other modules of the new canonical object.

Referring again to block if the canonicalization module determines that a new mapping for the normalized media document was added then the flow may proceed to block where the canonicalization module determines whether the other matching normalized media document specified by the mapping is already included in another canonical object. If so then the canonicalization module may merge the updated normalized media document into this canonical object by adding a new row to the Canonical Version table linking the normalized media document to the canonical object block . The normalized media document may have previously been represented as a row in the Canonical Version table linking the normalized media document to another canonical object and this row may be marked as deleted. The canonicalization module may also place one or more messages in the message queue to notify other modules of the changes to the canonical objects.

Referring again to block if the canonicalization module determines that the other matching normalized media document specified by the mapping is not already included in another canonical object then the flow may proceed to block where the canonicalization module may add a new canonical object and add a respective row to the Canonical Version table to link the updated normalized media document and each of its matching documents to the new canonical object.

In some embodiments the media integration system may include or may interface with a store indexer module . The store indexer may be configured to invoke various functions provided by the canonical API in order to build one or more indices that use the groupings specified by the canonical objects. For example the indices may be used by client devices to display a user interface in which different media productions from different content provider system are logically grouped as specified by the canonical objects.

Other client modules may use the canonical API to obtain information about the canonical objects and the media productions represented by the canonical objects for any of various other purposes. For example in some embodiments the IDs of the canonical objects may serve as a standard reference that are used not only by the company or organization that implements the media integration system but are also used by third party systems. For example the media integration system may serve as an authoritative source that integrates information about the media productions available across a wide array of content provider systems. Thus a client module may call the canonical API to perform operations such as obtaining a list of IDs of the canonical objects in the media integration system obtaining a list of media productions represented by a particular canonical object ID etc.

The canonical API may expose a set of functions or procedures that can be invoked or queried by a client module using any of various software interface techniques. For example in some embodiments the canonical API may include a URL based interface that enables a client module to perform various functions by referencing uniform resource locators URLs with particular parameters embedded in them. In other embodiments the canonical API may accept structured query language SQL queries or other queries to access the database of canonical objects. In other embodiments the canonical API may communicate with a client module using any of various other kinds of messaging or program invocation techniques.

The media integration system may include one or more computing devices or servers which may implement the methods described above. illustrates one embodiment of a computer system which may be included in the media integration system . In various embodiments the media integration system may include any kind of computer system or computing device s such as one or more personal computer systems PC workstations servers network appliances or other type of computing device or combinations of devices. In general the term computer system can be broadly defined to encompass any device or combination of devices having at least one processor that executes instructions from one or more storage mediums. Although illustrates a single computer in some embodiments the functions of the media integration system may be distributed across a plurality of computers that operate in conjunction with each other and communicate via one or more networks.

The computer system of may include at least one central processing unit or CPU processor which is coupled to a processor or host bus . The CPU may be any of various types. For example in some embodiments the processor may be compatible with the x86 architecture while in other embodiments the processor may be compatible with the SPARC family of processors. Also in some embodiments the storage server computer may include multiple processors .

The computer system may also include memory in which program instructions implementing the software are stored. The software may implement the various software modules and tools and their associated functionality described above such as the import modules normalization modules mapping modules canonicalization module content management tool store indexer etc. In some embodiments the memory may include one or more forms of random access memory RAM such as dynamic RAM DRAM or synchronous DRAM SDRAM . In other embodiments the memory may include any other type of memory configured to store program instructions. The memory may also store operating system software or other software used to control the operation of the computer system . The memory controller may be configured to control the memory .

The host bus may be coupled to an expansion or input output bus by means of a bus controller or bus bridge logic. The expansion bus may be the PCI Peripheral Component Interconnect expansion bus although other bus types can be used. Various devices may be coupled to the expansion or input output bus such as a video display subsystem which sends video signals to a display device as well as one or more storage devices . The storage device s include any kind of device configured to store data such as one or more disk drives solid state drives optical drives tape drives etc. In the illustrated example the one or more storage devices are coupled to the computer system via the expansion bus but in other embodiments may be coupled in other ways such as via a network interface card through a storage area network SAN via a communication port etc.

Information may be stored on the storage device s by the software such as files and or one or more databases. The information stored on the storage device s may include any of the various types of information discussed above such as the media productions imported from the content provider systems the normalized documents created from the media productions the mappings created by the mapping module the information created by the canonicalization module to represent the canonical objects etc.

Turning now to a block diagram of a computer accessible storage medium is shown. The computer accessible storage medium may store program instructions executable by one or more processors to implement various functions described above such as program instructions associated with the media integration system . Generally the computer accessible storage medium may store any set of instructions which when executed implement a portion or all of the functions described herein. For example the computer accessible storage medium may include various import modules and normalization modules associated with different content provider systems and or associated with different types of media productions mapping modules for the different types of media productions a canonicalization module a content management tool a store indexer a canonicalization library etc.

Generally speaking a computer accessible storage medium may include any storage media accessible by a computer during use to provide instructions and or data to the computer. For example a computer accessible storage medium may include storage media such as magnetic or optical media e.g. disk fixed or removable tape CD ROM DVD ROM CD R CD RW DVD R DVD RW or Blu Ray. Storage media may further include volatile or non volatile memory media such as RAM e.g. synchronous dynamic RAM SDRAM Rambus DRAM RDRAM static RAM SRAM etc. ROM Flash memory non volatile memory e.g. Flash memory accessible via a peripheral interface such as the Universal Serial Bus USB interface a flash memory interface FMI a serial peripheral interface SPI etc. Storage media may include microelectromechanical systems MEMS as well as storage media accessible via a communication medium such as a network and or a wireless link. A carrier medium may include computer accessible storage media as well as transmission media such as wired or wireless transmission.

Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

