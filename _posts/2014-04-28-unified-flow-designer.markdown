---

title: Unified flow designer
abstract: An interface enables a user to select a graphical object to include in a flow. The graphical object is associated with code, and this code may relate to presenting digital content. The interface further allows a user to define a graphical relationship in the flow, such as a connection between the graphical object and another element of the flow. The interface may present the flow in a first area of a display and the digital content in a second area of the display. The code may be executed based on the graphical relationship. For example, the graphical relationship may indicate an order for executing code sections associated with the flow and data exchanged within the code sections.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256403&OS=09256403&RS=09256403
owner: VERIZON PATENT AND LICENSING INC.
number: 09256403
owner_city: Basking Ridge
owner_country: US
publication_date: 20140428
---
A flowchart is a type of diagram that may represents an algorithm workflow or process in a program. The flowchart may show steps in the program as shapes of various kinds and may show an order of the steps by connecting the shapes with arrows. Flowcharts may be used in designing and documenting a program. For example flowcharts may clarify what is occurring in the program and flowcharts may help identify flaws bottlenecks and other concerns in the program.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention.

Systems and methods described herein relate to providing an interface to receive an input selecting a graphical object to include in a flow. The graphical object is associated with code and this code may relate to presenting digital content. The interface further allows a user to define a graphical relationship in the flow such as a connection between the graphical object and another element of the flow. The interface may present the flow in a first area of a display and may allow the user to preview the digital content in a second area of the display. The code may be compiled or executed based on the graphical relationship. For example the graphical relationship may indicate an order for executing the code associated with graphical object and code associated with another element of the flow.

As used herein the term user is intended to be broadly interpreted to include a user device or a person using the user device. Also the terms user consumer subscriber and or customer may be used interchangeably.

Continuing with flow creation interface may further include a flow display area that presents a flow shown in as flow A . As used herein flow may refer to a series of operations represented by selected objects connected by connections shown in as connections A and A . Although objects A through A shown in are rectangles it should be appreciated that flow may include different objects e.g. objects having different shapes sizes colors etc. . A user may submit an appropriate input to select a particular object in object selection area e.g. by clicking on the particular object with a mouse or other pointer device and the particular object may be displayed in flow display area . A user may submit an appropriate input to select a particular connection to connect two objects e.g. by selecting the two objects within flow display area and the particular connection may be displayed in flow display area . Connection may further include a visual indication of an order associated with performing operations associated with selected objects . Referring to connection A corresponds to an arrow that connects objects A and A to suggest that an operation associated with object A is performed before an operation associated with object A .

In implementations described herein each of objects may be associated with code for implementing one or more related functions. For example an object may be associated with Extensible Markup Language XML code sections for implementing a related function. XML is a markup language that defines a set of rules for encoding documents in a format that is both human readable and machine readable. Many application programming interfaces APIs have been developed to aid software developers with processing XML data and several schema systems exist to aid in the definition of XML based languages.

The code sections associated with objects included in flow may be compiled and or executed based on the displayed configuration e.g. the position of objects and or connections . In the example shown in code sections associated with objects A and A may be compiled such that output data from object A is provided as input to object A . Similarly a user may add remove an object manipulate the positions of an object adjust connections etc. to adjust a desired compilation of associated code. In the example shown in reversing the direction of connection A may cause code sections associated with objects A and A to be compiled such that output data from object A is provided as an input to object A .

In certain implementations objects and connections may be automatically positioned and or moved within flow display area based on one or more logical rules. For example objects and or connections may be may be graphically positioned within flow display area for aesthetic reasons such as to provide a desired minimum spacing between objects and or connections . In this example if a new object is added to flow the displayed position of other objects in flow display area may change to minimize overlapping by objects and or related connections . In another example objects may be graphically positioned within flow display area so that displayed positions of objects in flow display area correspond to an order in which related operations are performed. In this example if a user graphically positions a first object relative to a second object e.g. below and or to the left an operation associated with first object may be performed before an operation associated with second object .

Continuing with flow creation interface may also include an object definition area . Object definition area may include for example one or more input fields that enable a user to specify information related to an object shown as object to A included in flow . In the example shown in object definition area may include description field A to receive information identifying and or describing an associated object e.g. text that is displayed with the associated object in flow display area and comments field B to receive comments regarding the associated object e.g. text that is not displayed with the associated object in flow display area . Continuing with the example shown in object definition area may also include function field C that identifies a function associated with the associated object input data field D that identifies data provided to the associated object e.g. to be used by the function identified in function field C and output data field E that identifies data provided by the associated object e.g. to be outputted by the function identified in function field C . Input data field D and output data field may include for example identifiers for the data and or formatting information. Object definition area may further include a responsible party field F that identifies e.g. provides contact information for a person and or entity associated with the object . It should be appreciated however that objection definition area may include additional fewer and or different fields than shown in .

In one implementation different sets of fields may be presented in objection definition area for different objects . For example different sets of fields may be presented in objection definition area based on the functions associated with selected objects . For example if a selected object relates to obtaining data object definition area may present fields related to identifying the data and a location from which to obtain the data. Conversely if a selected object relates to presenting data object definition area may present fields related to specifying a time and a manner for presenting the data.

In one example a particular flow may relate to providing technical support to a customer such as to service a set top box STB or other network access equipment located at a customer premises. The technical support may be provided through multiple different data types. For example the customer may receive technical support through 1 text images and or multimedia content provided through the Internet e.g. through web pages 2 automated audio technical support through a series of automated recorded messages that can be accessed through a telephone or network device 3 live audio technical support e.g. via telephone with an individual using a service guide or menu to assist the customer and or 4 in person technical support from a technician who acts according to a service manual.

In this example certain objects may relate to determining the status of a device and determining a mechanism through which the customer is receiving support. Other objects in the particular flow may relate to providing different types of service support to the customer e.g. through the Internet data recorded messages live telephone or the service manual . For example one object may relate to providing a recorded multimedia message to the customer and a second different object may relate to providing information to a customer service representative or a technician.

At the same time the flow designer may separately control the operation of the interfaces in this example by adjusting functions associated with graphical objects . For example if a particular repair is determined to be too difficult and or dangerous for the customer functions associated with a particular object for providing information regarding the repair may be modified to output to the service manual accessed by the technician and not to the web pages or recorded voice messages. For example the flow designer may use flow display area to determine respective sets of different objects associated with each of the interfaces.

Information provided through each of the interfaces may be changed by one of the objects in the particular flow such as to modify the information provided to different functions associated with the interfaces without having to modify code sections associated with other portions of the particular flow . For example the flow designer may update outputs of the different interfaces to reflect changes to a product or service without needed to entirely recreate flow but still maintaining consistency of technical advice over multiple different customer interfaces represented by objects in the flow .

It should be appreciated however that flow creation interface in is provided merely for purpose of simplicity and the illustrated configuration of flow creation interface in is provided for explanatory purposes only. In practice flow creation interface may include additional fewer or different elements than illustrated in .

Function interface may graphically identify a selected object object A in that is being associated with a function selected through available function area or created through function creation area . As shown in function interface may include a graphical element linking the selected object to available function area and or function creation area .

In one implementation the list functions presented in available function area may be selected based on a desired operation associated with a corresponding object . The different functions identified in available function area may relate to performing a similar operation for different types of data. For example if a selected object is associated with acquiring data available function area may display a set of functions related to identifying and acquiring different data. Conversely if another selected object is associated with processing data available function area may display a different set of functions related to processing data.

Function interface may be compatible with different user formats that can be imported into flow definitions or functions without converting data. In the previous example of developing a flow for providing customer support through different interfaces different objects may be associated with functions related to the different user formats.

In one implementation a list of application programming interfaces APIs may be associated with functions identified in available function area . For example selection of a function in available function area may trigger an API with respect to the selected function and the associated object . The API may be used for example to convert data associated with object to be compatible with selected function. For example the API may convert a format of the data associated with a particular object e.g. data input output from the particular object to be usable by code for the selected function.

Referring to the previous example of providing technical support for an STB an API may allow a customer service representative access account information to determine if the customer is valid e.g. authorized to use the STB . The account information may be located on a legacy device that may be difficult to access for example through an XML implemented service menu. Furthermore the account information from the legacy device may be reformatted by the API for use in the service menu.

Continuing with function interface may also include a function creation area . Function creation area may enable a user to create locate and or modify a code sections associated with an object . For example function creation area may include an editor function that enables a user to input code and or modify code associated with a selected function . In another implementation function creation area may receive input from a first user to define desired code features and may forward this information to a second user e.g. a programmer who creates the code. For example the desired code parameters and features for the code may be forwarded to one or more programmers identified in responsible party field F. A code section formed through creation area may be saved and identified for future selection through available function area .

Referring to the previous introduced example of providing technical support for an STB function creation area may be used to refresh the STB for troubleshooting a problem in the STB.

It should be appreciated however that function interface in is provided merely for purpose of simplicity and the illustrated configuration of function interface in is provided for explanatory purposes only. In practice function interface may include additional fewer or different elements than illustrated in .

As previously described an object may be associated a function related to presenting data. illustrate an exemplary preview interface to provide a preview of the data presentation that may be provided in accordance with one implementation. Preview interface may include flow display area that presents flow flow A in and a preview area that presents the preview of a data presentation associated with one of the objects sample view A in included in flow . As shown in preview area may include a graphical indication e.g. a graphical symbol that sample view A is associated with object A . In the example shown in sample view A corresponds to a document e.g. a webpage that includes text A and images A .

Preview interface may further include a graphical slider bar and a slider handle that a user may move up or down for a vertical slider or left and right for horizontal slider to navigate through different sample views . In the example shown in preview area may show sample view A corresponding to object A when slider handle is in a corresponding position on slider bar . Referring now to when slider handle is in a different position on slider bar preview area may show a different sample view A . Sample view A corresponding to object A may be a document that includes text A and images A . In this way a user i.e. the developer of flow may step through the output presentations associated with flow and may quickly navigate to a particular presentation as desired.

As shown in preview interface may identity sample views associated with different objects . When a particular sample view is presented e.g. when code associated with flow is being executed a user may quickly identify a corresponding objects associated with the presented sample view . For example if sample view A is presented to a user as show in the user may determine that code associated with object A is being executed.

As shown in preview area may include two or more tabs shown in as tabs A B and C . Each of the tabs may be associated with previewing a different type of interface. For example as shown in preview area may include a first tab A that presents a preview of documents e.g. web pages presented when flow is executed.

In the context of providing support to a customer regarding a STB first tab A may provide web pages that guide the customer through steps related to servicing the STB. For example text A and images A in the web pages may instruct the customer to perform certain actions to determine a status of the STB and or to reset the STB.

In the context of providing support to a customer regarding a STB second tab B may provide multimedia content e.g. automated audio messages that guide the customer through steps related to servicing the STB. For example sample view B may instruct the customer to perform certain actions to determine a status of the STB and sample view B may instruct the customer to perform certain actions to reset the STB e.g. based on the status determined based on sample view B .

Thus when generating the particular flow a flow designer may preview information provided to the customer or technician through any of the different interface e.g. using tabs in preview interface to verify that the information is correct. For example the flow designer may adjust a position of slider handle on slider bar to preview different information provided by each of the interfaces. Furthermore information provided through each of the interfaces may be changed by one of the objects in the particular flow such as to modify the information provided to different functions associated with the interfaces without having to modify code sections associated with other portions of the particular flow . For example the flow designer may update outputs of the different interfaces to reflect a new good or service. The flow designer may use flow display area to identify possible objects related to the desired change and the flow designer may use preview interface to verify that the desired changes where accurately provided in all of the interfaces.

It should be appreciated however that preview interface in is provided merely for purpose of simplicity and the illustrated configuration of preview interface in is provided for explanatory purposes only. In practice preview interface may include additional fewer or different elements than illustrated in . For example in one implementation preview interface may include an area not shown that receives an input from a user and identifies a sample view associated with the input. For example the user may identify particular text and preview interface may identify an object associated with a sample view that includes the particular text.

In one implementation debug interface may further identify e.g. in flow display area objects that have be successfully compiled and or executed and which objects have failed during compilation and or execution.

Continuing with debug area may include a debug sample view and an output variables preview area . Debug sample view may present a sample output e.g. text and images that are generated by a corresponding object based on input variables specified in input variable definition area . Alternatively or in addition output variables preview area may present an output variable that is generated by the corresponding object based on input variables specified in input variable definition area .

It should be appreciated however that debug interface in is provided merely for purpose of simplicity and the illustrated configuration of debug interface in is provided for explanatory purposes only. In practice debug interface may include additional fewer or different elements than illustrated in . For example debug interface may include a code editing section not shown that enables a user to edit code associated with an object when debug sample view and or output variables preview area do not present desired information. For example debug interface may automatically present the code editing section when an error occurs when executing associated code using the defined input variable s .

Object selection area may include for example one or more fields not shown in to receive an input identifying one of objects included in flow . For example an input received in object selection area may specify one or more object characteristics e.g. a shape location associated connections etc. and the desired object may be identified based on the one or more object characteristics. In another example object selection area may receive an input identifying one or more characteristics associated with data e.g. data type identifier format etc. and flow display interface may identify an object inputting and or outputting data that conforms to the one or more identified data characteristics.

In another implementation an object in flow is selected without using object selection area . For example a user may submit an input in flow display area selecting one of objects in flow . In another example an object associated with faulty code e.g. code producing an error when executed or compiled may be automatically selected.

As shown in highlight area may graphically identify e.g. using a graphical symbol the selected object object B . In another example the selected object may be displayed in flow display interface using a different color intensity brightness font size transparency etc. in comparison to other elements in flow .

Continuing with highlight area may highlight elements in flow that lead to e.g. are performed to process or generate data provided to the selected object . For example highlight area may present the highlighted elements in a visually distinguishing manner such as presenting the relevant elements in a different color intensity brightness font size transparency etc. in comparison to other elements in flow . In the exemplary flow B shown in when object B is selected objects B B and B and connections B B and B that lead to selected object B are highlighted e.g. shown in solid lines in . Other elements in flow B that do not lead to object B i.e. objects B and B and connections B and B are not highlighted e.g. shown in dashed lines in .

In this way a user may determine a set of objects and the associated series of functions code sections that are implemented to arrive at the selected object . For example if the objects relate to presenting data the user may identify data that is presented before the selected object e.g. data associated with objects B B and B in and data that is not presented e.g. data associated with objects B and B in before the selected object B .

It should be appreciated however that flow display interface in is provided merely for purpose of simplicity and the illustrated configuration of flow display interface in is provided for explanatory purposes only. In practice flow display interface may include additional fewer or different elements than illustrated in .

When presenting portion portion display area may presents objects and connections included in the portion . Portion display area may modify a displayed appearance of objects and connections included in the portion as desired. For example as shown in portion display area may enlarge the displayed appearance of objects and connections in portion to improve the visibility of these elements. In addition or alternatively as shown in portion display area may alter the displayed position of an object and or connection in portion object B in . For example portion display area may alter the displayed position of an object based on a logical rule such as to maintain a desired graphical distance between objects visually group objects associated with similar functions or handling similar types of data etc.

Flow display area may present certain information such as textual identifiers associated with objects and connections . Portion display area may display the identifiers and other additional information. For example portion display area may present information identifying an associated function a status of the code e.g. whether the code is compiled debugged executed etc. a responsible party etc.

Portion may be selected based on a user input. For example in flow portion interface a user may submit an input to select one or more objects presented in flow display area to include in portion . In one implementation objects may be selected for portion based on one or more logical rules. For example a particular quantity of objects from flow may be included in portion . In another example a portion may include objects in flow that are associated with similar data and or functions.

It should be appreciated however that flow portion interface in is provided merely for purpose of simplicity and the illustrated configuration of flow portion interface in is provided for explanatory purposes only. In practice flow portion interface may include additional fewer or different elements than illustrated in . For example flow portion interface may include an area not shown for receiving a user input specifying one or more criteria for selecting objects to include in portion .

Flow design device may include a computing device to present one or more of flow creation interface function interface preview interface debug interface flow display interface flow portion interface etc. and to receive one of more user inputs related to defining modifying and or using flow .

Network may include one or more wired and or wireless networks that are capable of exchanging information related to flow e.g. code associated with objects in flow data exchanged between devices during execution of the code etc. . For example network may include one or more public switched telephone networks PSTNs or another type of switched network. Additionally or alternatively network may further include one or more packet switched networks such as an Internet protocol IP based network a local area network LAN a wide area network WAN a personal area network PAN an intranet the Internet or another type of network that is capable of exchanging information. For example network may include a private packet switched network a cable television network e.g. a hybrid fiber coax network a wireless broadcast network e.g. a satellite media broadcasting network or terrestrial broadcasting network a telephone network a provider specific network e.g. a Verizon FIOS network an optical fiber network or any other suitable network. Network may also include a number of transmission towers for receiving wireless signals and forwarding the signals toward the intended destination.

Function device may include a computing device such as an application server that stores provides and or executes code associated with function. For example flow design device may interact with function device via network to determine functions identified in available function area . During execution of flow a call may be made to function device to access an associated function such as to execute code associated with the function .

Programmer device may include a computing device to generate code associated with an object . For example flow design device may interact with programmer device may via network to request e.g. via function creation area generation of code that is not available from function device to request generation of code e.g. an API to access a function through function device and or modification of code associated with a function provided by function device .

In one implementation a notification may be automatically sent to programmer device e.g. from flow design device when a portion of flow is modified.

Storage device may include one or more memory devices or network devices that gather process store and or provide information described herein. For example storage device more store information identifying particular objects included in a flow and functions associated with the objects . In one implementation storage device may store code associated with the particular objects. When the code associated with flow is executed storage device may also store beginning intermediate and final data values used within the code. Storage device may be a part of flow design device or may be a separate device separate from flow design device .

User device may be a computing device to obtain and execute code associated with flow e.g. compiled code stored by storage device . User device may execute the compiled code to present a particular type of data such as web pages.

The quantity of devices and or networks illustrated in is provided for explanatory purposes only. In practice environment may include additional devices and or networks fewer devices and or networks different devices and or networks or differently arranged devices and or networks than illustrated in . Also in some implementations one or more of the devices of environment may perform one or more functions described as being performed by another one or more of the devices of environment . Devices of environment may interconnect via wired connections wireless connections or a combination of wired and wireless connections.

Bus may include a path that permits communication among the components of device . Processing unit may include a processor a microprocessor or processing logic that may interpret and execute instructions. Memory may include any type of dynamic storage device that may store information and instructions for execution by processing unit and or any type of non volatile storage device that may store information for use by processing unit .

Input component may include a mechanism that permits a user to input information to device such as a keyboard a keypad a button a switch etc. Output component may include a mechanism that outputs information to the user such as a display a speaker one or more light emitting diodes LEDs etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices and or systems via wireless communications wired communications or a combination of wireless and wired communications. For example communication interface may include mechanisms for communicating with another device or system via a network. Alternatively or additionally communication interface may be a logical component that includes input and output ports input and output systems and or other input and output components that facilitate the transmission of data to other devices.

Device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into memory from another computer readable medium or from another device. The software instructions contained in memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Device may include fewer components additional components different components and or differently arranged components than those illustrated in . For example device may include one or more switch fabrics instead of or in addition to bus . In another example in some implementations a display may not be included in device . In these situations device may be a headless device that does not include input component . Additionally or alternatively one or more operations described as being performed by a particular component of device may be performed by one or more other components in addition to or instead of the particular component of device .

As shown in process may include selecting a graphical object block . As described above with respect to flow design device may provide flow creation interface to receive a user input to select a graphical object. For example flow design device may receive an input in object selection area selecting from objects of different shapes. Flow design device may further receive an input e.g. in object definition area specifying one or more characteristics to associate with the object . In another implementation flow design device may automatically select an object based on one or more criteria. For example the selected object may be determined based on a desired function to associate with the object .

Continuing with process may include determining a function associated with the selected graphical object block . For example as described above with respect to block an object may be selected based on an associated function. In another example flow design device may receive an input in available function area selecting from available functions e.g. functions available through function devices .

If the desired function is not available or a modification to an existing function is desired flow design device may receive an input in function creation area specifying desired characteristics for a function to associate with the selected object . Flow design device may then forward a message to programmer device requesting creation and or modification of code associated with the desired function. For example flow design device may automatically forward a message to programmer device associated with a person or entity identified in responsible party field F identified in object definition area . The message may request creation of code associated with the desired function or the message may notify the identified person or entity that the code is being modified or generated.

Continuing with process may further include determining a connection between the selected graphical object and another graphical object block . For example as described above with respect to flow design device may receive an input in flow creation interface identifying a connection between two objects . In addition or alternatively flow design device may receive an input in flow creation interface identifying graphical aspects of the objects such as relative sizes and or positions of the objects .

Continuing with process may further include compiling and or executing code associated with flow block . Compiling code associated with flow may include for example organizing the code based on graphical features of flow . For example in flow A depicted in flow display area in a directional connections A associates object A and object A to indicate that a function associated with object A is performed before a function associated with object A . Thus data generated in connection with the function for object A may be provided to the function for object A . The connection or other feature of flow e.g. the relative position or other characteristics of the two objects may identify for example an order in which code associated with the two objects should be performed and the code may be compiled based on this order.

While a series of blocks has been described with respect to the order of the blocks in process may be modified in other implementations. Furthermore non dependent blocks may be performed in parallel. Furthermore process may include additional and or fewer blocks than shown in . For example process may further include storing code associated with flow to storage device and or providing the compiled code to user device .

Various preferred embodiments have been described herein with reference to the accompanying drawings. It will however be evident that various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the broader scope of the invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

It will be apparent that different aspects of the description provided above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects is not limiting of the implementations. Thus the operation and behavior of these aspects were described without reference to the specific software code it being understood that software and control hardware can be designed to implement these aspects based on the description herein.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the possible implementations. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the implementations includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

