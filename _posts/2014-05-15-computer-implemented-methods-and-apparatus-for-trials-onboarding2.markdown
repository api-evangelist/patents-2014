---

title: Computer implemented methods and apparatus for trials onboarding
abstract: Disclosed are methods, apparatus, systems, and computer readable storage media for trials onboarding. A server may receive a request to generate a trial instance of an organization providing data and functionality for a period of time. Data on the request may also be stored. The trial instance may be selected from a template based on an access channel corresponding to the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09647922&OS=09647922&RS=09647922
owner: salesforce, inc.
number: 09647922
owner_city: San Francisco
owner_country: US
publication_date: 20140515
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This patent document claims priority to co pending and commonly assigned U.S. Provisional Patent Application No. 61 823 799 titled In App Trials Onboarding by Mortimore et al. filed on May 15 2013 which is hereby incorporated by reference in its entirety and for all purposes.

This patent document relates generally to a trial organization providing a set of data and functionality and more specifically instantiating trial organizations associated with different users and or sources.

 Cloud computing services provide shared resources software and information to computers and other devices upon request. In cloud computing environments software can be accessible over the Internet rather than installed locally on in house computer systems. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Examples of systems apparatus and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that implementations may be practiced without some or all of these specific details. In other instances certain process method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring implementations. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosed implementations it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from their spirit and scope. For example the blocks of methods shown and described herein are not necessarily performed in the order indicated. It should also be understood that the methods may include more or fewer blocks than are indicated. In some implementations blocks described herein as separate blocks may be combined. Conversely what may be described herein as a single block may be implemented in multiple blocks.

Various implementations described or referenced herein are directed to different systems apparatus methods and computer readable storage media for trials onboarding. For example an independent software vendor ISV may work with another corporation s operating environment. The corporation s operating environment may provide products for a variety of markets to solve a variety of problems. The products may utilize data within a core and functionality and features within a platform. A number of different problems for various industries may be solved by products using the operating environment. For example the corporation may include products to facilitate sales related customer relationship management CRM . The products using the operating environment may use an on demand services environment e.g. a multi tenant database system .

In some instances the ISV may wish to create a new solution to another market using the core and platform of the corporation s operating environment. Additionally the ISV may wish to provide its customers access to trials of its new solution.

As an example an ISV may be a bank. The bank may wish to create a new product using the corporation s operating environment to address a problem in a new vertical market that is currently not being served by the existing products. Accordingly the bank may use the core and platform of the corporation to create a new product. For example the bank may develop a new financial business related product to address an issue within the financial banking industry. The data for the product may be stored in the core of the corporation s operating environment e.g. as records in databases . The features of the product may be built using a software development platform of the platform. As such the ISV may provide a new product using the core and platform of the operating environment of the corporation. The product may also be available in an on demand services environment. Though the ISV in this scenario is a bank in other scenarios the ISV may be any other type of business. For example the ISV may be a software vendor providing notetaking and archiving features.

The ISV may develop an application to provide access to the product. For example the bank may create an application for a smartphone that provides access to the financial business product. The bank may also create a website providing access to the product. Accordingly various different access channels may provide users with the data and functionality of the financial business product.

The ISV may also wish to allow its customers to sign up for a trial of the product through the application. For example the bank may want its customers to sign up for a trial of the financial business product through the smartphone application. Accordingly customers of the bank may sign up for a trial through the smartphone application. When a trial is requested an instance of the financial business product may be generated and stored within the core of the operating environment that the bank is building upon. Each trial may be a trial organization of the product within the operating environment provided by the other corporation i.e. the corporation s operating environment that the ISV is building upon .

As an example the financial business product may be a records management program for financial transactions. Financial transactions may be recorded by the product and stored within the operating environment e.g. in a database in the core . Additionally data on the financial transactions may be retrieved from the core and displayed on a screen of a computing device. Depending on the functionalities of the platform that are used by the product the financial data may also be visually displayed for example as a graph chart or other visual design. Other functionalities such as data models ability to create new users permissions license management etc. may also be provided by the platform and used by the product.

Additionally the ISV may want the creation of the trials to be headless. That is the ISV may want its customers to be able to sign up for a trial without a login or signup screen for the corporation providing the operating environment that the ISV s product is built upon. For example the bank may allow its customers to use the smartphone application to generate a new trial of the product without requiring a login and or signup process provided by the corporation providing the operating environment. Accordingly the bank s customer may have access to a trial of the bank s product running on the corporation s operating environment without having the other corporation provide an account email login process signup process or other process in order for the bank s customer to try out the product.

Additionally the ISV may provide different templates of its product to different users. The templates may be used to generate the trials of the product. For example the bank may create several different templates of its product. The bank may create one template providing one set of data and functionality to its customers who generate a trial through the smartphone application. Customers who generate a trial through the website may be provided a separate set of data and functionality. The bank may also update the product and new users may be provided a template with new features provided by the update while older users may still use the older template without the new features. As such the bank may be able to tell if the new features are encouraging its customers to sign up for the product based on the trial.

These and other implementations may be embodied in various types of hardware software firmware and combinations thereof. For example some techniques disclosed herein may be implemented at least in part by computer readable media that include program instructions state information etc. for performing various services and operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computing device such as a server or other data processing apparatus using an interpreter. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store program instructions such as read only memory ROM devices and random access memory RAM devices. These and other features of the disclosed implementations will be described in more detail below with reference to the associated drawings.

Online social networks are increasingly becoming a common way to facilitate communication among people who can be recognized as users of a social networking system. Some online social networks can be implemented in various settings including organizations e.g. enterprises such as companies or business partnerships academic institutions or groups within such an organization.

In some online social networks users can access one or more social network feeds which include information updates presented as items or entries in the feed. Such a feed item can include a single information update or a collection of individual information updates. A feed item can include various types of data including character based data audio data image data and or video data. For example a post related to an online marketing campaign may appear as a feed item. A social network feed can be displayed in a graphical user interface GUI on a display device such as the display of a computing device as described below. The information updates can include various social network data from various sources and can be stored in an on demand database service environment. In some implementations the disclosed methods apparatus systems and computer readable storage media may be configured or designed for use in a multi tenant database environment.

The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. The term query plan generally refers to one or more operations used to access information in a database system.

A user profile or user s profile is generally configured to store and maintain data about a given user of the database system. The data can include general information such as name title phone number a photo a biographical summary and a status e.g. text describing what the user is currently doing. As mentioned below the data can include messages created by other users. Where there are multiple tenants a user is typically associated with a particular tenant. For example a user could be a salesperson of a company which is a tenant of the database system that provides a database service.

The term record generally refers to a data entity such as an instance of a data object created by a user of the database service for example about a particular actual or potential business relationship or project. The data object can have a data structure defined by the database service a standard object or defined by a user custom object . For example a record can be for a business partner or potential business partner e.g. a client vendor distributor etc. of the user and can include information describing an entire company subsidiaries or contacts at the company. As another example a record can be a project that the user is working on such as an opportunity e.g. a possible sale with an existing partner or a project that the user is trying to get. In one implementation of a multi tenant database system each record for the tenants has a unique identifier stored in a common table. A record has data fields that are defined by the structure of the object e.g. fields of certain data types and purposes . A record can also have custom fields defined by a user. A field can be another record or include links thereto thereby providing a parent child relationship between the records.

The terms social network feed and feed are used interchangeably herein and generally refer to a combination e.g. a list of feed items or entries with various types of information and data. Such feed items can be stored and maintained in one or more database tables e.g. as rows in the table s that can be accessed to retrieve relevant information to be presented as part of a displayed feed. The term feed item or feed element refers to an item of information which can be presented in the feed such as a post submitted by a user. Feed items of information about a user can be presented in a user s profile feed of the database while feed items of information about a record can be presented in a record feed in the database by way of example. A profile feed and a record feed are examples of different social network feeds. A second user following a first user and a record can receive the feed items associated with the first user and the record for display in the second user s news feed which is another type of social network feed. In some implementations the feed items from any number of followed users and records can be combined into a single social network feed of a particular user.

As examples a feed item can be a message such as a user generated post of text data and a feed tracked update to a record or profile such as a change to a field of the record. Feed tracked updates are described in greater detail below. A feed can be a combination of messages and feed tracked updates. Messages include text created by a user and may include other data as well. Examples of messages include posts user status updates and comments. Messages can be created for a user s profile or for a record. Posts can be created by various users potentially any user although some restrictions can be applied. As an example posts can be made to a wall section of a user s profile page which can include a number of recent posts or a section of a record that includes multiple posts. The posts can be organized in chronological order when displayed in a graphical user interface GUI for instance on the user s profile page as part of the user s profile feed. In contrast to a post a user status update changes a status of a user and can be made by that user or an administrator. A record can also have a status the update of which can be provided by an owner of the record or other users having suitable write access permissions to the record. The owner can be a single user multiple users or a group. In one implementation there is only one status for a record.

In some implementations a comment can be made on any feed item. In some implementations comments are organized as a list explicitly tied to a particular feed tracked update post or status update. In some implementations comments may not be listed in the first layer in a hierarchal sense of feed items but listed as a second layer branching from a particular first layer feed item.

A feed tracked update also referred to herein as a feed update is one type of information update and generally refers to data representing an event. A feed tracked update can include text generated by the database system in response to the event to be provided as one or more feed items for possible inclusion in one or more feeds. In one implementation the data can initially be stored and then the database system can later use the data to create text for describing the event. Both the data and or the text can be a feed tracked update as used herein. In various implementations an event can be an update of a record and or can be triggered by a specific action by a user. Which actions trigger an event can be configurable. Which events have feed tracked updates created and which feed updates are sent to which users can also be configurable. Messages and feed updates can be stored as a field or child object of the record. For example the feed can be stored as a child object of the record.

User systems and may be any type of computing device. For example user systems and may be portable electronic devices such as smartphones tablets laptops wearable devices e.g. smart watches etc. User systems and may be another server or a desktop computer. Additionally user systems and may be different types of computing devices. For example user system may be a desktop computer whereas user system may be a smartphone.

In some implementations organization server may receive requests from user system and user system analyze the requests and obtain and or store data in trial organization instances and log . User system and user system may also obtain data from organization server and provide information to a user for example via a display. Accordingly various components are able to communicate with each other for example over the Internet or a combination of networks including the Internet.

As an example an ISV may create a product on another corporation s operating environment as previously discussed. Trial organization templates may include a variety of different templates for instances of the product. Continuing with the example of the bank as discussed above different templates for the instances of the product may include different features and details. For example the bank may have one template providing the product with one visual look e.g. having one background color and a second template providing the product with a second visual look e.g. having another background color . Accordingly user system may request the generation of a trial of the product and be provided an instance providing one background color while user system may request the generation of the product and be provided with a different background color.

As an example the financial business product may be a records management program for financial transactions as previously discussed. Data on the financial transactions may be retrieved from the core and displayed on a screen of a computing device. User system may be provided a display with financial data with a red background while user system may be provided with a display with financial data with a green background because different instances of the product may be generated.

Additionally the different templates may include different data. For example the product implemented by the bank may include a variety of data stored in the core of the operating environment as previously discussed. As an example the bank may provide each instance of the trial with pre populated data so that the customer can see and test how the product functions. One template may have access to all of the data. However another template may have access to only a subset of the data.

Additionally the different templates may include different functionalities. For example one template of the product may include functionality to add data for the instance. Accordingly the user may be able to add his or her own data and test the functionality of the product with the newly added data. However another template may exclude the functionality to add data for the instance. That is the user of the template may only be able to test a trial of the product using pre populated data provided by the ISV e.g. the bank .

Additionally different instances of templates may be valid for different periods of time. For example each trial may be active for a particular time. If a trial is generated i.e. an instance of a template is generated and the template indicates that the instance is to be active for one month then the instance in trial organization instances may be accessible by user system for one month. After a month organization server may determine that the instance in trial organization instances is no longer accessible to user system and therefore prohibits user system from accessing the instance in trial organization instances . In some implementations the instance may be accessible again to user system if a subscription or purchase is made to convert the trial from the one month trial to a full product or a longer period.

Trial organization instances may store instances of each trial of the product or trial organization as discussed above. For example if user system requests an instance of the trial of the product to be generated a copy of a template may be instantiated and stored in trial organization instances . Each instance stored in trial organization instances include its own data and functionality as previously discussed.

Log may store data regarding the communications and actions of the components of architectural components . Log may store data on each transaction from user system and user system . For example user system may include a smartphone application to provide access to a trial of the product e.g. the financial business product as previously discussed . To request a trial of the product a user may provide data by filling out a form. For example data may include a name e.g. first name and last name country of the user requesting the trial business name or other information on the user. The requested data may be stored in log .

Additionally log may store results of the requests to generate an instance. For example whether each request is successful or unsuccessful in generating an instance may be recorded. In some implementations a request may not be successful if a server e.g. one of architectural components is down a requested template does not exist e.g. it was deleted by the ISV or other scenario. Accordingly customer information corresponding to those wanting to try out the trial of the product may be recorded. As such future customer leads may be generated based on the customer information including from customers who were not successful in generating an instance of the trial.

Each of sales services finance and human resources may use functionalities provided by platform to build on top of the platform to solve various problems. For example platform may be a software development platform providing capability to write code e.g. Apex develop a user interface e.g. with Visualforce provided by salesforce.com and other features. Functionalities may include existing features and functions which may be incorporated into sales services finance and human resources . For example functionalities may include modules for user creation license management permission management and other tools to allow ISVs to build products such as finance and human resources

Core may include databases for storing data for sales services finance and human resources . That is the data used by customers of sales services finance and human resources may be stored in databases . For example trial organization templates trial organization instances and log may be provided by databases in core .

Accordingly sales and services are products built on top of platform and core . Platform and core may be provided by the same entity that provides the operating environment. Finance and human resources may be products that are also built on top of platform and core but created by another entity e.g. an ISV rather than the entity that provides the operating environment. Any of sales services finance and human resources may be accessible to other customers i.e. a customer as a third entity other than the entities providing any of the features of .

Management module may provide an API for user system to generate trial instance based on templates provided by development module . For example development module may include templates A B and C to be selected and used to instantiate trial instance as previously discussed.

Management module may include a variety of functionalities. For example in management module includes functionality for a signup request signin request and a log. The signup request may indicate that one of templates A B and C is to be instantiated as trial instance . For example user system may indicate which of A B and C is to be instantiated. In other implementations management module may determine which of templates A B and C are to be instantiated. For example the template may be selected based on the access channel associated with user system . For example template A may be selected if user system access management module via a smartphone application. Template B may be selected if user system accesses management module via a web browser on a desktop computer. When trial instance is generated by signup request of management module signin request may allow user system access to trial instance . The log of management module may store details on user system as previously discussed. Accordingly the functionalities within management module may be exposed via an API to user system . The API may further allow for user system to access trial instance .

In some implementations the templates may be selected based on the access channel corresponding to user systems . For example if user systems and both request generated trial instances through a smartphone application instance C may be selected by signup request of management module . User system may request a generated trial instance through a web browser on a desktop computer and therefore instance B may be selected based on the request being through the web browser on the desktop computer. Additionally each trial instance may be provided a time period for user systems to be able to access the respective trial instances based on the access channel. For example template B may provide a trial instance to be active for 30 days while template C may provide a trial instance to be active for 45 days. Accordingly different access channels may include different periods of time wherein they are active and therefore to be used as trials of the ISV s product.

In other implementations the particular template may be selected by user systems based on a selection by a user. For example a drop down box in a form may allow a user to indicate which of templates A B or C to use for the trial instance.

Additionally the different templates may provide different sets of data and functionality. One template providing one set of data and functionality may be provided to requests from a smartphone application. Customers who generate a trial through the website may be provided a separate set of data and functionality. The bank may also update the product and new users may be provided a template with new features provided by the update while older users may still use the older template without the new features. As such the bank may be able to tell if the new features are encouraging its customers to sign up for the product based on the trial.

In some implementations only a single template may be available and any request to generate a trial instance may use the single template. However when new functionality or new pre populated data is added by the ISV a new template may be provided and each subsequent request to generate a trial instance may use the new template until additional functionality or data is added by the ISV. However the prior generated trial instances may still be based on the templates that were used to generate them. That is older trial instances based on older templates may still be active and be based on the older template while newer trial instances may be based on the newer template.

In some implementations the pre populated data and functionality may allow an ISV s customers to demo the product through the trial instance. The customers may be able to add new data delete new or the pre populated data and test out the functionality e.g. add new users view data etc. within the time period that the trial instance is active.

In some implementations the requests to generate trial instances may be received and put in a queue to generate the respective trial instances. For example based on the load of the system generating the trial instances may take a certain amount of time. That is the generation may not be instantaneous. Accordingly in the log managed by management module the status of each request from user systems may be indicated in the log e.g. log . As an example each request may be indicated as in progress complete or unsuccessful.

The generation of the trial instances may be based on a first in first out FIFO wherein the trial instances are generated based on the order the requests are received. However in other implementations each request may include a priority and the trial instances may be generated based on the priority. For example the priority may be based on the country the request is received from the customer company the request is from the size of the customer company e.g. as indicated by the user in a form to generate the trial instances as previously discussed access channel e.g. emphasize a smartphone application access channel over a desktop computer the particular template e.g. template A may be prioritized over template B or any other factor disclosed herein.

As previously discussed the ISV may want its customers to be able to sign up for a trial without a login or signup screen for the corporation providing the operating environment that the ISV s product is built upon. For example the bank may allow its customers to use the smartphone application to generate a new trial of the product without requiring a login and or signup process provided by the corporation providing the operating environment. Accordingly the bank s customer may have access to a trial of the bank s product running on the corporation s operating environment without having the other corporation provide an account email login process signup process or other process in order for the bank s customer to try out the product. In some implementations the customer may start to use the trial instance and set a username and or password later.

As an example the ISV may develop a smartphone application to generate requests for the trial instances of the product. As previously discussed through the API provided by management module a trial instance may be generated by the request from the smartphone application. In some implementations the ISV may include functionality within the smartphone application to include a unique identifier or key. The template e.g. template C may be associated with the identifier. Accordingly when the smartphone application communicates with management module to generate a trial instance the trial instance may be based on the template corresponding to the same identifier as the smartphone application.

In block a first request for an instance of a trial organization trial instance may be received. For example management module may receive the request from a user system.

In block the instance may be generated. For example a template provided by development module may be selected to base the instance upon.

In block data associated with the request for the instance may be stored in a log. For example customer data information on the particular template and other details as previously discussed may be stored in a log such as log . The method is done in block .

Accordingly in block both of the requests may be provided to a queue to generate the instances corresponding to the requests. In block the instances may be generated based on a priority. For example requests from particular access channels particular data provided by the user system or other information as previously discussed may be used to determine the order of the generation of the instances.

In block data associated with both of the requests may be stored in the log. The method is done in block .

Mechanisms and methods for providing systems implementing enterprise level social and business information networking are disclosed herein with reference to several implementations. Examples of database systems are described and can provide a platform for tracking events related to a record actions of a user and messages about a user or record. The disclosed systems support various data structures of feeds the customization of feeds selection of records and users to follow generation of feeds and display of feeds in suitable presentations on a user s display device.

Environment is an environment in which an on demand database service exists. User system may be implemented as any computing device s or other data processing apparatus such as a machine or system that is used by a user to access a database system . For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of such computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is implemented in the example of as database system .

An on demand database service implemented using system by way of example is a service that is made available to outside users who do not need to necessarily be concerned with building and or maintaining the database system. Instead the database system may be available for their use when the users need the database system i.e. on the demand of the users. Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In some implementations application platform enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. Network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I. The Internet will be used in many of the examples herein. However it should be understood that the networks that the present implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP signals to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the network interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least for users accessing system each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object in tenant data storage however tenant data typically is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA tablet smartphone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. The term computing device is also referred to herein simply as a computer . User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user input devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. of the computing device in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of its components might be operator configurable using application s including computer code to run using processor system which may be implemented to include a central processing unit which may include an Intel Pentium processor or the like and or multiple processor units. Non transitory computer readable media can have instructions stored thereon in that can be executed by or used to program a computing device to perform any of the methods of the implementations described herein. Computer program code implementing instructions for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein is preferably downloadable and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to communicate with tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may involve sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for case account contact lead and opportunity data objects each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment may include anywhere from one to many devices of each type. Also the on demand database service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand database service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand database service environment to access services provided by the on demand database service environment. For example client machines may access the on demand database service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand database service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand database service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage may be conducted via the database switch . The multi tenant database storage may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand database service environment e.g. the pods and to the correct components within the database storage .

In some implementations the database storage is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations the app servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware and or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of methods described with reference to . In alternative implementations two or more app servers may be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers may handle requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand database service environment.

The file servers may manage requests for information stored in the File storage . The File storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the file servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand database service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without using an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file servers and or the QFS .

As multiple users might be able to change the data of a record it can be useful for certain users to be notified when a record is updated. Also even if a user does not have authority to change a record the user still might want to know when there is an update to the record. For example a vendor may negotiate a new price with a salesperson of company X where the salesperson is a user associated with tenant Y. As part of creating a new invoice or for accounting purposes the salesperson can change the price saved in the database. It may be important for co workers to know that the price has changed. The salesperson could send an email to certain people but this is onerous and the salesperson might not email all of the people who need to know or want to know. Accordingly some implementations of the disclosed techniques can inform others e.g. co workers who want to know about an update to a record automatically.

The tracking and reporting of updates to a record stored in a database system can be facilitated with a multi tenant database system e.g. by one or more processors configured to receive or retrieve information process the information store results and transmit the results. In other implementations the tracking and reporting of updates to a record may be implemented at least partially with a single tenant database system.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects.

While the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should be understood that some of the disclosed implementations can be embodied in the form of control logic using hardware and or using computer software in a modular or integrated manner. Other ways and or methods are possible using hardware and a combination of hardware and software.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium for storage and or transmission suitable media include random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like. The computer readable medium may be any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices e.g. via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

