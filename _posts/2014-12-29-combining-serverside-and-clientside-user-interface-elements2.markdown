---

title: Combining server-side and client-side user interface elements
abstract: A method and apparatus are disclosed for combining server-supplied user interface elements with client-supplied user interface elements. The server-supplied user interface elements can be received by a client device and inserted into a client-supplied object model, such as a Document Object Model (DOM). The object model can then be used to render a page, such as a webpage. By injecting server-supplied user interface elements into a client object model, the client can intelligently combine UI elements from a server with UI elements from a client. In the situation where there are conflicting or overlapping UI elements, the client device can modify the object model to eliminate such conflicts or overlaps.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09582601&OS=09582601&RS=09582601
owner: Microsoft Technology Licensing, LLC
number: 09582601
owner_city: Redmond
owner_country: US
publication_date: 20141229
---
This application is a continuation of U.S. patent application Ser. No. 13 587 863 filed Aug. 16 2012 which claims priority from U.S. Provisional Application No. 61 605 119 filed Feb. 29 2012 which applications are incorporated herein by reference in their entirety.

The Document Object Model DOM is an application programming interface API for HTML and XML documents. It defines the logical structure of documents and ways for documents to be accessed and manipulated. One objective for DOM is to provide a standard programming interface that can be used in a wide variety of environments and applications. Generally DOM provides a hierarchical tree structure having a plurality of nodes in parent child relationships. Using this structure script programs can examine and dynamically change a web page.

Other languages can be associated with object models different than DOM. However whatever model is used it is desirable to allow programmers to build documents navigate their structure and add modify or delete elements and content.

Even with well defined object models authoring pages that can be used across different platforms can be challenging. For example different pages often need to be created based on whether the page is to be displayed on a server or a client despite an overlap in content between the pages. In one simple example a server side page can display headers and footers that are not displayed on a client page. In such a situation two different pages need to be created even if the content is the same.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A method and apparatus are disclosed for combining server supplied user interface elements with client supplied user interface UI elements. The server supplied user interface elements can be received by a client device and inserted into a client supplied object model such as a Document Object Model DOM . The object model can then be used to render a page such as a webpage.

By injecting server supplied user interface elements into a client object model the client can intelligently combine UI elements from a server with UI elements from a client. In the situation where there are conflicting or overlapping UI elements the client device can modify the object model to eliminate such conflicts or overlaps. Thus the client s access to user information stored on the client device can be used to modify server supplied UI elements. Additionally by being able to dynamically modify the object model a page can be created for different platforms and then modified in the object model.

The foregoing and other objects features and advantages of the invention will become more apparent from the following detailed description which proceeds with reference to the accompanying figures.

It will be understood by those skilled in the art that building an object model on the client device using server supplied UI elements and client supplied UI elements is fundamentally different than simply rendering a page that pulls in images or text from a server computer as such images or text are not copied to the object model and cannot be manipulated by a client script.

With reference to the computing environment includes one or more processing units and memory that can be used in implementing a computing device. In this most basic configuration is included within a dashed line. The processing units execute computer executable instructions. A processing unit can be a general purpose central processing unit CPU processor in an application specific integrated circuit ASIC or any other type of processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. For example shows a central processing unit as well as a graphics processing unit or co processing unit . The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory etc. or some combination of the two accessible by the processing unit s . The memory stores software implementing one or more innovations for combining client and server UI elements.

A computing environment may have additional features. For example the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The tangible storage may be removable or non removable and includes magnetic disks magnetic tapes or cassettes CD ROMs DVDs or any other medium which can be used to store information in a non transitory way and which can be accessed within the computing environment . The storage can store instructions for the software implementing one or more innovations disclosed herein for combining client supplied and server supplied UI elements.

The input device s may be a touch input device such as a keyboard mouse pen or trackball a voice input device a scanning device or another device that provides input to the computing environment . The output device s may be a display printer speaker CD writer or another device that provides output from the computing environment .

The communication connection s enable communication over a communication medium to another computing entity. The communication medium conveys information such as computer executable instructions audio or video input or output or other data in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF or other carrier.

The techniques and tools can be described in the general context of computer readable media. Computer readable media are any available tangible media that can be accessed within a computing environment. By way of example and not limitation with the computing environment computer readable media include memory storage and combinations of any of the above.

The techniques and tools can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment.

The terms system and device are used interchangeably herein. Unless the context clearly indicates otherwise neither term implies any limitation on a type of computing system or computing device. In general a computing system or computing device can be local or distributed and can include any combination of special purpose hardware and or general purpose hardware with software implementing the functionality described herein.

For the sake of presentation the detailed description uses terms like determine and select to describe computer operations in a computing environment. These terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being. The actual computer operations corresponding to these terms vary depending on implementation.

Although the operations of some of the disclosed methods are described in a particular sequential order for convenient presentation it should be understood that this manner of description encompasses rearrangement unless a particular ordering is required by specific language set forth below. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity the attached figures may not show the various ways in which the disclosed methods can be used in conjunction with other methods.

Any of the disclosed methods can be implemented as computer executable instructions stored on one or more computer readable storage media e.g. non transitory computer readable media such as one or more optical media discs volatile memory components such as DRAM or SRAM or nonvolatile memory components such as hard drives and executed on a computer e.g. any commercially available computer including smart phones or other mobile devices that include computing hardware . Any of the computer executable instructions for implementing the disclosed techniques as well as any data created and used during implementation of the disclosed embodiments can be stored on one or more computer readable media e.g. non transitory computer readable media . The computer executable instructions can be part of for example a dedicated software application or a software application that is accessed or downloaded via a web browser or other software application such as a remote computing application . Such software can be executed for example on a single local computer e.g. any suitable commercially available computer or in a network environment e.g. via the Internet a wide area network a local area network a client server network such as a cloud computing network or other such network using one or more network computers.

For clarity only certain selected aspects of the software based implementations are described. Other details that are well known in the art are omitted. For example it should be understood that the disclosed technology is not limited to any specific computer language or program. For instance the disclosed technology can be implemented by software written in C Java Pert JavaScript Adobe Flash or any other suitable programming language. Likewise the disclosed technology is not limited to any particular computer or type of hardware. Certain details of suitable computers and hardware are well known and need not be set forth in detail in this disclosure.

The disclosed framework allows the client to blend UI elements delivered from the Internet with UI already on the client. This allows for sensitive business logic to be executed on the server where it is more secure and updatable. These UI elements can then be seamlessly blended with client elements. For example HTML CSS and Javascript can be delivered securely from the Internet and injected into Client s DOM. This method allows code delivered from the server to blend with UI elements generated on the client. This is valuable because the client has access to user information that the server does not have.

In view of the many possible embodiments to which the principles of the disclosed invention may be applied it should be recognized that the illustrated embodiments are only preferred examples of the invention and should not be taken as limiting the scope of the invention. Rather the scope of the invention is defined by the following claims. We therefore claim as our invention all that comes within the scope of these claims.

