---

title: Integrated information exchange management and control of design configurations
abstract: An apparatus for managing data exchange between tools for multiple products in a product line is provided. The apparatus includes an application launcher configured to create a workspace to support a plurality of applications. The apparatus also includes an application manager configured to execute as a web service and load a first data and a second data associated with a first application and a second application, respectively, into the workspace. The apparatus also includes a concurrent engineering data service configured to capture data types associated with the first data and the second data and resolve differences in the data types wherein the data types comprise at least strings, doubles, and integers. The apparatus also includes a data storage and retrieval service configured to enforce integrity of and access rules associated with the first data and the second data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311053&OS=09311053&RS=09311053
owner: THE BOEING COMPANY
number: 09311053
owner_city: Chicago
owner_country: US
publication_date: 20140430
---
The present disclosure relates generally to the exchange of information between disparate information technology systems and in particular to providing a web service for applications with unlike data structures storage requirements and user interface media to interoperate and share data in a protected user workspace.

In many large organizations heavily accessed applications may originate from a variety of sources including commercial off the shelf COTS proprietary applications created for specific functions within the organization and applications written in house that may be little more than ad hoc software utilities. Such applications may be accessed in conjunction with information about numerous products in a product line such as for example a line of commercial jet aircraft. Applications may evolve over time with their code bases and interfaces changing with each successive release and patch update. Customized software applications originally created as in house utilities to address specific problems may begin as simple tools and grow in popularity while taking on further functionality and complexity over time. Such customized applications that are used exclusively in house may not be subject to the level of quality control and version control procedures ordinarily used if released commercially or otherwise provided to external customers or partners.

An engineer may use a web browser to access a commercial off the shelf application and at the same time may use more traditional desktop client software to access a server based application via traditional client desktop software. The engineer may wish to exchange data between the two disparate applications as well as import data from other and different applications. The exchange and management of technical and product information between software systems is a continuing challenge in engineering product development and other professional environments. Data used in these computing environments may be captured in many disparate systems each with its own data model data format storage structure configuration controls and unique interface requirements. Information from one system or tool may not be readily transportable to another. Data may have to be translated several times between different users. Data may need to be reorganized or modified by a user before being made available to an application.

When attempting to manage data between disparate applications and tools sending notifications of changes to only interested parties while bypassing disinterested may present challenges. Additional challenges may be presented by the need to launch dependent applications and independent workspaces as well as the need to relate product specific assets to general assets of product lines. When multiple product data is managed in a single product line information management system challenges may also be presented by functional areas using different representations interfaces configuration controls and tools.

Challenges of disparate data integration may be further complicated by the dynamic nature of technical information and the continuous need to change add or otherwise disturb the structure of information. Because of the dynamic nature of this information some integrations may become stagnant and unused within a short time. Further challenges may arise for configuration management in traditional systems that rely on explicit schemas or interactive management of each element of a set. Accordingly it would be advantageous to have a method and apparatus which takes into account one or more of the issues discussed above as well as possibly other issues.

The illustrative embodiments provide for an apparatus for managing data exchange between tools for multiple products in a product line. The apparatus includes an application launcher configured to create a workspace to support a plurality of applications. The apparatus also includes an application manager configured to execute as a web service and load a first data and a second data associated with a first application and a second application respectively into the workspace. The apparatus also includes a concurrent engineering data service configured to capture data types associated with the first data and the second data and resolve differences in the data types wherein the data types comprise at least strings doubles and integers. The apparatus also includes a data storage and retrieval service configured to enforce integrity of and access rules associated with the first data and the second data.

The illustrative embodiments also provide for a method of managing data exchange between tools for multiple products in a product line. The method includes a computer executing an application launcher the application loader creating a workspace to support a plurality of applications. The method also includes the computer executing an application manager the application manager executing as a web service and loading a first data and a second data associated with a first application and a second application respectively into the workspace. The method also includes the computer executing a concurrent data service the concurrent data service capturing data types associated with the first data and the second data and resolving differences in the data types wherein the data types comprise at least strings doubles and integers. The method also includes the computer executing a data storage and retrieval service the data storage and retrieval service enforcing integrity of and access rules associated with the first data and the second data.

The illustrative embodiments also include a method of managing data exchange between tools for multiple products in a product line. The method includes a computer providing a real time interface between disparate applications in a multidisciplinary design analysis and optimization MDAO framework. The method also includes the computer providing a concurrent data service the concurrent data service creating a workspace for hosting the real time interface and resolving structural differences between data types associated with data provided by the disparate applications wherein the data types comprise at least strings doubles and integers. The method also includes the computer based on having resolved differences between the data types sharing the data between the disparate applications promoting processing of shared data by the disparate applications and storing processed data.

The features functions and benefits may be achieved independently in various embodiments of the present disclosure or may be combined in yet other embodiments in which further details can be seen with reference to the following description and drawings.

The illustrative embodiments provide methods techniques and software designed to permit the exchange of information using common reusable elements. Management of information is enabled in the form of individually controlled elements. Such elements may be consumed or derived from files or from discretely shared or requested data blocks.

The illustrative embodiments provide an application launcher to start applications and work in private workspaces that may be specific to a product. In an embodiment an engineer or product developer working for an aircraft development and manufacturing environment may be assigned to work on a new aircraft model and may perform work in a private and segregated computing and development workspace. The illustrative embodiments provide helper applications to transform data between disparate enterprise applications and tools frequently used by such engineers and developers. After performing operations in the segregated workspace the helper applications then publish results of the operations back to the enterprise applications.

The illustrative embodiments provide for certain applications to subscribe to a web service in a service oriented architecture. Subscribing applications may include commercial off the shelf COTS applications proprietary in house applications in house utilities or tools and other software. Subscribing applications may be used by engineers product designers or others in performing their job responsibilities.

The web service provided by the illustrative embodiments allows subscribing applications to selectively publish their data to the web service. Subscribing applications may be disparate from each other in terms of data structure storage methods and user interface media. The illustrative embodiments allow certain authorized users to access the subscribing applications from their client machines. The authorized users may need to access a certain combination of the subscribing applications wherein the certain combination includes subscribing applications which are disparate from each other for a variety of technical and usability reasons. Users may need to have two or more disparate applications to share data with each other.

The illustrative embodiments provide for creation of a private or segregated workspace for the requesting user. The workspace may be created on the user s computer or elsewhere such as on an enterprise server. The workspace may be dedicated to the user working with the selected combination of subscribing applications and sharing data between them. The user is able to access data from the subscribing applications that the subscribing applications have published to the web service. When the user is finished with working on the various selected subscribing applications data that has been shared may be published back to the subscribing applications. The session associated with the workspace may be terminated and the workspace may be deleted.

The illustrative embodiments provide for overcoming disparities between subscribing applications by reducing items of data down to a basic data type such as for example string double and integer data types and resolving differences at that level. In addition serialization may be used such that data structures or object state are translated into formats that may be stored and subsequently reconstructed in the same or different computing environment.

The illustrative embodiments provide for subscribing applications to be launched and managed with a prescribed configuration of startup data that may match a particular product on which an engineer is working such as for example a model of a commercial aircraft. Plug in integrations may be added such that any new application or tool may become part of the group of subscribing applications.

Activity associated with and has access to subscribing applications may be manageable by a particular model of aircraft or other product or project to which an engineer may be assigned. The illustrative embodiments provide a means to control data that is specific to a particular product in the presence of common data across a group of products. A view of core assets within particular products may be provided with indicators of components that are common with other products and indicators of components that differ. A means to represent common and variant parts of a product line with metadata is available wherein the tools provided by the illustrative embodiments may be managed using the metadata.

The illustrative embodiments may have several technical effects that go beyond the normal physical interaction between a typical program and a computer. Specifically the illustrative embodiments solve technical problems using technical means. The illustrative embodiments may achieve technical effects achieve technical interations or effect technical adaptations.

For example by providing a technical mechanism to integrate disparate custom programs the illustrative embodiments allow a computer to operate faster or even to operate at all when attempting to manipulate disparate custom programs simultaneously or in sequence. The illustrative embodiments may reduce memory access time by using a workspace branch that allows independent work to occur before checking into a baseline configuration and by comparing and merging multiple product assets into a single combined configuration. The illustrative embodiments may speed operation of a processor by providing a generic application launcher to launch applications and work in private specific workspaces. The illustrative embodiments may further speed operation of a processor by providing helper applications to transform data between applications and publish those results to any subscribing application. The illustrative embodiments may further conserve processor resources by accessing or using only licenses from needed applications rather than all applications in a multidisciplinary analysis and optimization software suite.

Attention is now turned to the figures. is a block diagram of an apparatus for managing data exchange between tools for multiple products in a product line in accordance with an illustrative embodiment.

System may include enterprise computer . Enterprise computer is a data processing system. Data processing systems are described in detail hereinafter such as with respect to . System also includes enterprise application . Enterprise application executes on enterprise computer . In an embodiment portions of enterprise application may not execute on enterprise computer and may instead execute on another device such as an enterprise server.

Enterprise application may be provided at least partially as a web service in a service oriented architecture environment. Enterprise application may provide interfaces that may be described in a machine processable format that may be provided by the web services description language WSDL an interface description language based on extensible markup language XML .

System may also include application and application that may be accessed by client device associated with system . Application and application may be executed at least partially by enterprise application . Instances of application and application may be simultaneously and separately executed by hardware and software components separate from enterprise computer and enterprise application . In an embodiment while application and application are depicted in as components of enterprise computer application and application may not execute fully on enterprise computer and may instead execute at least partially on other devices such as on an enterprise server.

Application and application may be a commercial off the shelf COTS application purchased by an entity that operates system . Application and application may be client server applications wherein a server component executes at least partially on enterprise computer and a client or requester component executes on client device . Application may not be a commercial off the shelf COTS application and may instead be an application created by the entity for in house use. Application may be a fully supported and tested in house application similar to commercial off the shelf COTS applications or application may be little more than an untested tool or utility with very limited application and a narrow user base that users access at their own risk. Further application and application may be neither commercial off the shelf COTS applications nor in house created applications and in an embodiment may instead be other types of applications and may originate from sources other than commercial software providers or in house creators of software.

Client device is a data processing system that requests access to application and application . Client device may be a desktop computer. Client device may also be a laptop computer a tablet computer or other portable device including mobile telephone or personal digital assistant PDA .

Client device may function as a traditional client in a client server architecture when accessing at least one of application and application from enterprise computer and or other servers and devices not shown . Client device may make requests of services and data provided by application and application by executing requester that is stored and executes at least partially on client device . Client device may in addition or alternatively contact enterprise computer and access at least one of application and application via browser executing on client device . Client device may access application and application by other means than executing requester or executing browser . While depicts only one client device in an embodiment system includes a plurality of client devices .

Requester may be a plug in extension of at least one of application and application . Requester may access at least one application programming interface and may create wrappers as needed for requester . Requester may be used for utilities stored on a server that do not use the internet protocol IP and for which web browsing does not apply. Requester may effectively inform an application launcher component that an instance of at least one of application and application is needed and an application launcher component may create at least one workspace for such instantiation.

System also may include at least one of storage device that is accessed by enterprise computer and enterprise application . In an embodiment storage device is non transitory computer readable storage medium storing a relational database or other type of database. Storage device stores data including data data and data . In an embodiment each of data data and data may be specific to one of application and application . In an embodiment each of data data and data may not be specific to one of application and application and may instead be accessed by either or both of application and application at separate times or simultaneously. In an embodiment each of data data and data may be accessed by other applications and other hardware and software components unrelated to the illustrative embodiments.

Application and application selectively provide at least one of data data and data under a subscription arrangement with enterprise application . As subscribing applications application and application make data data and data available to enterprise application for operation in segregated or protected areas or workspaces. Operating in segregated or protected areas or workspaces may increase processor efficiency and create faster computer response times by allowing the computer to access a limited number of workspaces instead of processes that would have required additional workspaces. Application and application effectively make available or publish at least one of data data and data to enterprise application for sharing and processing as described herein.

System also includes workspace located on enterprise computer and workspace located on client device . Workspace and workspace are segregated areas where at least one of data data and data are copied by enterprise application . Enterprise application may cause application and application to share and perform processing on at least one of data data and data in at least one of workspace and workspace . Operations are performed on at least one of data data and data in at least one of workspace and workspace . Results of the operations may only be committed back to application and application under their subscription arrangement with enterprise application .

In an embodiment enterprise application may copy at least one of data data and data to workspace on enterprise computer for sharing and processing there. In an embodiment enterprise application may copy at least one of data data and data to workspace on client device for sharing and processing there. In an embodiment enterprise application may copy at least one of data data and data partially to workspace and partially to workspace . In an embodiment enterprise application may copy at least one of data data and data to a workspace created on another device.

In an embodiment workspace and workspace are not permanent and may not survive a current session requested by client device . Once enterprise application ends a session perhaps by action initiated by client device workspace and or workspace may be deleted. Changes to at least one of data data and data may then be committed back to storage device on behalf of application and or application .

Enterprise application includes application launcher that launches at least one of application and application upon receiving a request from client device or upon occurrence of another event. Application launcher also allows creation and management of workspace and workspace and can launch any executable file on client device or via execution of a uniform resource locator URL . Application launcher allows managed instances of application and application in a context of a specific data set.

Application launcher may automatically load configure and manage files associated with data data and data used to execute application and or application . Application launcher may provide a framework for sending and receiving data data and data .

Definitions for files to be downloaded or uploaded may be captured from configurations of application and application . Use of application and application may be configured to reflect specific steps in a process to enable progress tracking. Application launcher may provide a common wrapper that is used regardless of location of application and application . Client device or another component may transmit a call to application launcher . In response application launcher may locate and launche at least one of application and application into at least one of workspace and workspace .

Enterprise application also may include application manager a web service that manages instances of application and application . Application manager may ensure completion of pre process and post process instructions to improve the integrity of data data and data .

Application manager may provide instructions to application launcher for execution of application and application on client device . Application manager may provide mechanisms for storage and retrieval of application definitions. Such application definitions may include pre processing and post processing definitions data retrieval and storage definitions and may process execution definitions.

Enterprise application also may include concurrent engineering data service which may provide a generic item container that can capture a variety of data types and represent any discretely managed item of information. Concurrent engineering data service may encapsulate metadata to provide contextual information about each element. Concurrent engineering data service may ensure ownership and rights management on managed data and may provides mechanisms for locking and archival of discrete data.

Concurrent engineering data service additionally may manage unique configurations of data discretely without confounding of information because of incomplete or undefined where used relationships. Concurrent engineering data service may provide mechanisms for collective access restrictions and further may provide mechanisms for collective lock and lifecycle controls of configuration data.

Concurrent engineering data service may manage collections of configuration information to allow search and retrieval of appropriate data data data . Concurrent engineering data service may provide triggers based on occurrences of specified events at a discrete data level. Concurrent engineering data service may utilize scripting based action processing to allow user level definition of event handlers.

Concurrent engineering data service may enable access to internal file structures from within tools integrated into enterprise application . Concurrent engineering data service may provide mechanisms for decomposition of various file types into discretely managed pieces of information.

Enterprise application also may include application instance management which may provide communication channels between application launcher and application manager in part for request of pre process script execution. Application instance management may provide communication channels between application launcher and application manager for request and transmittal of execution instructions for application launcher . Application instance management similarly may provide such communication channels for transmittal of requests and user responses between application launcher and application manager .

Enterprise application also may include data storage and retrieval functionality which includes enforcement of data integrity and secure access rules. Data storage and retrieval functionality also may provide persistent storage of data data data and access for the web service of enterprise application .

Enterprise application may provide plug in capability for direct integrations. For spreadsheet applications enterprise application may provide a plug in for dedicated send and receive functionality that may be native inside the spreadsheet applications. Enterprise application may provide custom tools to enable linking spreadsheets to data services provided by enterprise application .

Enterprise application also may provide a data service controller that includes tools for performing configuration management functions. The data service controller may be separate from enterprise application .

Enterprise application also may provide multi layered security. Multi layered security may include service level control session configuration level control tool level control and data item level control.

Enterprise application may include additional functionality not represented by components in . Enterprise application may provide service level control which includes web services based authorization for integration with Active Directory and other credentialing systems. Web services based authorization may be used to allow or deny rights to connect with web services. Service level control may provide user based authorization for full administrative permissions. Further service level control may provide session administration for user based authorization for session permissions. Service level control also may provide session administration further allowing creation of new sessions and allowing management of existing sessions for which a user is performing an administrative function.

Session configuration level control may provide user based authorization for session administrator permissions and may allow a session administrator to manage a specific session data set. User access provided by session configuration level control may provide user access controls of visibility of sessions and metadata.

Tool level control may be configurable to prescribed roles wherein users are assigned to roles. Data item level control may accommodate tool based information ownership. Data item level control also may allow shared responsibility across different users without explicit handoff.

Enterprise application may provide communication channels between application launcher and application manager for transmittal of requests and responses for information retrieval and storage. Enterprise application may provide a secure connection between web service information providers and persistent data storage components including storage device . Enterprise application further may provide connectivity between application launcher and end user software such as for example browser and requester executing on client device for communication of application state.

Concurrent engineering data service may capture data types associated with a first data and a second data and may resolve differences between the first data and the second data. Data types may include strings doubles and integers or other data types. Concurrent engineering data service also may also cause application to process at least one of data data data provided by application and may cause application to process at least one of data data data provided by application .

Concurrent engineering data service further may be configured to manage product line engineering data across multiple products such as for example a product line of commercial jet aircraft or components of commercial jet aircraft. Application launcher further may be configured to launch application and application with prescribed configurations for each of application and application matching particular products associated with each of application and application .

Application manager further may be configured to execute a plug in integration enabling a third application not shown to share its own data with data data and data in at least one of workspace and workspace . Concurrent engineering data service further may configured to provide configurations specific to products from a common set of product line assets.

Enterprise application may encapsulate metadata to provide contextual parameters about each item of data data and data provided by application and application . Enterprise application may ensure ownership and rights management on management data and may provide a mechanism for collective lock and lifecycle controls of configuration data. Enterprise application may activate responses to triggers based on occurrences of predetermined events at a discrete data level. Concurrent engineering data service may be provided as a web service in a service oriented environment.

The illustrative embodiments enable notifications of changes to objects within particular tools to other tools. The illustrative embodiments may provide helper applications and tools to transform between data data and data between application and application . Use of workspace and workspace may permit independent work to occur before results may be checked into baseline configurations. In this manner a processor may operate more efficiently. Product specific configurations may be provided that may be constructed from general product line core assets. The illustrative embodiments further may provide means to compare and merge multiple product assets into a single combined configuration.

Configuration control may be performed. Reports may be run and saved. Notifications may be distributed to various recipients upon changes to data data and data . Reports and notifications may be linked with event based systems so that based on the occurrence of various events specified notifications are generated and sent.

The illustrative embodiments provide means to compare and merge product specific assets into a common single set of assets with managed variation. A view of an entire product line and all particular products and all particular integrated configurations is also provided. Thus the illustrative embodiments may improve operation of a physical display device.

The illustrative embodiments may provide views of core assets within each product of a product line with indicators of common and variant parts. The illustrative embodiments may provide views of application and application and tools that are supported by the components of enterprise application .

Further the illustrative embodiments may provide visibility of variation mechanisms and where they exist as related to core assets. The illustrative embodiments also may provide centralized feature control of variations and also may provide views of where features exist in each product. Overall product line configuration control may be made accessible.

The illustrative embodiments may provide means to represent common and variant parts of a product line with metadata and manage tools with that metadata. The illustrative embodiments further may provide means to analyze and create more common data and parts via product analysis and provide for reduction of a number of core assets to the smallest sized system. The illustrative embodiments provide may means to pass configuration data and variation control data to any tool or application and application .

System also may include automation server that may execute on enterprise computer and may be a multidisciplinary analysis and optimization MDAO software automation server that provides applications that use the multidisciplinary analysis and optimization software framework. Automation server may support Model as a Service MaaS a solution that may support designing mapping integrating and publishing open data.

System also may include enterprise data managers that may execute on enterprise computer . Enterprise data managers may include enterprise product lifecycle management PLM servers and product data management PDM servers. Enterprise data managers may also include computer aided design CAD servers and computer aided design CAD service providers as well as visualization services.

System also may include front end web server that may execute on enterprise computer and may handle content management and document management tasks. Front end web server may also provide collaboration business intelligence system integration process integration and workflow automation capabilities.

System also may include data session repository that may be situated in storage device or elsewhere. Data session repository be a non transitory computer readable storage medium that may store design data session and design data session that may be instances of at least one of data data and data created and stored resulting from at least one use of application and application . Each time one of application and application and data data and data is copied to at least one of workspace and workspace and receive processing such instances may be created and may be stored in at least one of design data session and design data session .

The process shown in may be implemented by a processor such as processor unit of . The process shown in may be a variation of the techniques described in through . Although some of the operations presented in are described as being performed by a process the operations are performed by at least one tangible processor or by using one or more physical devices as described elsewhere herein. The term process also may include computer instructions stored on a non transitory computer readable storage medium which when executed create a computer implemented method.

Method may begin as a computer executes an application launcher the application launcher creating a workspace to support a plurality of applications operation . Next the process may execute using the computer an application manager the application manager executing as a web service and loading a first data and a second data associated with a first application and a second application respectively into the workspace operation . Next the process may execute using the computer a concurrent engineering data service the concurrent engineering data service capturing data types associated with the first data and the second data and resolving differences in the data types wherein data types comprise at least strings doubles and integers operation . Next the process may execute using the computer a data storage and retrieval service the data storage and retrieval service enforcing integrity of and access rules associated with the first data and the second data operation . Method may terminate thereafter.

The computer executing method may correspond to enterprise computer of system or data processing system of . The computer may cause the first application to process the second data and cause the second application to process the first data. The computer may manage product line engineering data across the multiple products. The computer may launch the first application and the second application with prescribed configurations for each application matching particular products associated with each application.

The computer executing method may publish the second data to the first application and may publish the first data to the second application. The computer may execute a plug in integration enabling a third application to share a third data with the first data and the second data in the workspace. The computer may provide configurations specific to products from a common set of product line assets.

Workflow begins with desktop user software that is executed by a processor in response to input received from a user of client device . In an embodiment icons or other selectable objects for instantiating application and application may be found in a folder located in client device or elsewhere. Desktop user software may be browser and requester accessible by such icons.

Application launcher may correspond to application launcher of system and launch at least one of application and application in response to receiving user input to initiate of at least one of browser and requester . Application manager may correspond to application manager of system and provide a web service based structure which manages instances of application and application . Concurrent engineering data service may correspond to concurrent engineering data service of system and manage collections of configuration information to allow search and retrieval of appropriate data data and data .

Data storage and retrieval may provide an item container which can capture information types encapsulate metadata to provide contextual information and ensure ownership and rights management on managed data. Data storage and retrieval may correspond to storage device and or components of storage device .

Plug in capability may provide for direct integrations of some commercial off the shelf applications. Commercial off the shelf applications may include commonly available spreadsheet applications and drawing applications.

Application instance management may provide communication channels between application launcher and application manager for transmission of various requests and instructions. Application information may provide communication channels between concurrent engineering data service and application manager for transmittal of requests and responses for information retrieval and storage. Data connection may provide a secure connection between an information provider of the web service of application manager and a persistent data store such as for example that provided by data storage and retrieval . Process management may provide connectivity between application launcher and desktop user software for communication of state of application and application .

System is based on some of the components discussed above in the description of system as well as additional components and process flows. System includes application launcher that corresponds to application launcher of system . System also includes application management service that corresponds to application manager of system . System also includes concurrent data service that corresponds to concurrent engineering data service of system .

System also may include optional plug in that corresponds to client device . System also may include user application instance that may correspond to at least one of application and application . Through application programming interfaces API optional plug in may make calls to concurrent data service for publishing and retrieval of appropriate data data and data within design data session . System also may include temporary workspace that corresponds to at least one of workspace and workspace of system .

System also may include application definition that includes definitions executable files arguments and instructions for application launcher to use in initializing instantiating and launching user application instance . Application management service may provide application definition to application launcher for use in launching user application instance . System also may include design data session that corresponds to design data session and design data session of system .

Real time data feed may take place between concurrent data service and optional plug in such that client device of system receives data used for user application instance . Such data may be sent to temporary workspace for operations. Between user application instance and temporary workspace use of data data and data may take place. Between temporary workspace and application management service components provided herein may manage items of data data and data .

Between concurrent data service and application management service server based data communications may take place. Concurrent data service may send data data and data generated from selected session to design data session .

Method may be implemented by a processor such as processor unit of . Method may be a variation of the techniques described in through . Although some of the operations presented in are described as being performed by a process the operations are being performed by at least one tangible processor or by using one or more physical devices as described elsewhere herein. The term process also may include computer instructions stored on a non transitory computer readable storage medium which when executed create a computer implemented method.

The computer as provided by method may correspond to enterprise computer provided by system and may encapsulate metadata to provide contextual parameters about each item of data provided by disparate applications. The computer as provided by method may ensure ownership and rights management on management data. The computer as provided by method may provide a mechanism for collective lock and lifecycle controls of configuration data. The computer as provided by method may activate responding to triggers based on occurrences of predetermined events at a discrete data level. The computer as provided by method may provide concurrent data service as a web service in a service oriented environment.

Method may begin as a computer provides a real time interface between disparate applications in a multidisciplinary design analysis and optimization MDAO framework operation . Next the process may provide using the computer a concurrent engineering data service the concurrent engineering data service creating a workspace for hosting the real time interface and resolving structural differences between data types associated with data provided by the disparate applications wherein data types comprise at least strings doubles and integers operation . Next based on having resolved the differences between the data types the process may share using the computer the data between the disparate applications promoting processing of the shared data by the applications and storing the processed data operation . Method may terminate thereafter.

Request includes an action of pull of data data and data from application and application and an action of aggregate of data data and data to formats or structures that client device may need for a task. Publish includes actions of separate and store of data data and data processed by enterprise application so that data data and data receive the action of transformation of formats followed by the action of store of data data and data to application and application in their required formats.

Workflow is exemplary only. Many different views are possible as are different processes that use the action of aggregate data and separate data. For example is another example of a workflow of managing data between tools.

Specifically is a diagram of a workflow of managing data exchange between tools for multiple products in a product line in accordance with an illustrative embodiment. provides another view of the workflow of . Reference numerals described below that are common to refer to . provides an alternate view of the workflow depicted in and provided in workflow . depicts workflow . Some components of workflow are indexed to components of workflow . Processes and component actions of workflow may be similar to or the same as corresponding processes and actions in workflow . In this illustrative example workflow depicts an embodiment of enterprise application .

Workflow includes request and component steps pull and aggregate that correspond to request and component steps pull and aggregate of workflow . Workflow includes publish and component steps separate and store that correspond to publish and component steps separate and store of workflow .

Workflow includes view and view which are provided twice in association with each of the actions of request and store . View and view correspond to view and view of workflow wherein view is a file provided by the file structure depicted in view . While view and view may appear in to be the same component they are inherently associated in the manner of the file of view being a component of the directory structure of view .

Workflow also includes view which corresponds to view of workflow . Workflow also includes application which may be enterprise application that processes data data and data . Application does not have a corresponding object in workflow . Application is a representation of a design process or other process that may utilize instances of various applications such as for example application and application of system . Data data and data are processed by the components and actions of workflow in the same or similar manner as data data and data may be processed by the components and actions of workflow .

The features shown in workflow of and workflow of may be further varied. Thus the examples shown in and do not necessarily limit the claimed invention.

In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be used to implement any of the workflows described herein such as method of worfklow of system of method of workflow of and workflow of . Processor unit may be a number of processors a multi processor core or some other type of processor depending on the particular implementation. A number as used herein with reference to an item means one or more items. Further processor unit may be implemented using a number of heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices . A storage device is any piece of hardware that is capable of storing information such as for example without limitation data program code in functional form and or other suitable information either on a temporary basis and or a permanent basis. Storage devices may also be referred to as computer readable storage devices in these examples. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation.

For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output I O unit allows for input and output of data with other devices that may be connected to data processing system . For example input output I O unit may provide a connection for user input through a keyboard a mouse and or some other suitable input device. Further input output I O unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system applications and or programs may be located in storage devices which are in communication with processor unit through communications fabric . In these illustrative examples the instructions are in a functional form on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory .

These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or computer readable storage media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be computer readable storage media or computer readable signal media . Computer readable storage media may include for example an optical or magnetic disk that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . Computer readable storage media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . In some instances computer readable storage media may not be removable from data processing system .

Alternatively program code may be transferred to data processing system using computer readable signal media . Computer readable signal media may be for example a propagated data signal containing program code . For example computer readable signal media may be an electromagnetic signal an optical signal and or any other suitable type of signal. These signals may be transmitted over communications links such as wireless communications links optical fiber cable coaxial cable a wire and or any other suitable type of communications link. In other words the communications link and or the connection may be physical or wireless in the illustrative examples.

In some illustrative embodiments program code may be downloaded over a network to persistent storage from another device or data processing system through computer readable signal media for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. The different embodiments may be implemented using any hardware device or system capable of running program code. As one example the data processing system may include organic components integrated with inorganic components and or may be comprised entirely of organic components excluding a human being. For example a storage device may be comprised of an organic semiconductor.

In another illustrative example processor unit may take the form of a hardware unit that has circuits that are manufactured or configured for a particular use. This type of hardware may perform operations without needing program code to be loaded into a memory from a storage device to be configured to perform the operations.

For example when processor unit takes the form of a hardware unit processor unit may be a circuit system an application specific integrated circuit ASIC a programmable logic device or some other suitable type of hardware configured to perform a number of operations. With a programmable logic device the device is configured to perform the number of operations. The device may be reconfigured at a later time or may be permanently configured to perform the number of operations. Examples of programmable logic devices include for example a programmable logic array programmable array logic a field programmable logic array a field programmable gate array and other suitable hardware devices. With this type of implementation program code may be omitted because the processes for the different embodiments are implemented in a hardware unit.

In still another illustrative example processor unit may be implemented using a combination of processors found in computers and hardware units. Processor unit may have a number of hardware units and a number of processors that are configured to run program code . With this depicted example some of the processes may be implemented in the number of hardware units while other processes may be implemented in the number of processors.

As another example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Data processing system may also include at least one associative memory not shown . Associative memory may be in communication with communications fabric . Associative memory may also be in communication with or in some illustrative embodiments be considered part of storage devices .

The different illustrative embodiments can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. Some embodiments are implemented in software which includes but is not limited to forms such as for example firmware resident software and microcode.

Furthermore the different embodiments can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any device or system that executes instructions. For the purposes of this disclosure a computer usable or computer readable medium can generally be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium can be for example without limitation an electronic magnetic optical electromagnetic infrared or semiconductor system or a propagation medium. Non limiting examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Optical disks may include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Further a computer usable or computer readable medium may contain or store a computer readable or usable program code such that when the computer readable or usable program code is executed on a computer the execution of this computer readable or usable program code causes the computer to transmit another computer readable or usable program code over a communications link. This communications link may use a medium that is for example without limitation physical or wireless.

A data processing system suitable for storing and or executing computer readable or computer usable program code will include one or more processors coupled directly or indirectly to memory elements through a communications fabric such as a system bus. The memory elements may include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some computer readable or computer usable program code to reduce the number of times code may be retrieved from bulk storage during execution of the code.

Input output or I O devices can be coupled to the system either directly or through intervening I O controllers. These devices may include for example without limitation keyboards touch screen displays and pointing devices. Different communications adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Non limiting examples of modems and network adapters are just a few of the currently available types of communications adapters.

The description of the different illustrative embodiments has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Further different illustrative embodiments may provide different features as compared to other illustrative embodiments. The embodiment or embodiments selected are chosen and described in order to best explain the principles of the embodiments the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

