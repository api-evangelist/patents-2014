---

title: Methods, systems, and computer readable media for providing fuzz testing functionality
abstract: Methods, systems, and computer readable media for providing fuzz testing functionality are disclosed. According to one method, the method includes at a fuzz testing module (FTM), generating a plurality of test messages, including a test message including fuzzed data, generating fuzzed message identification information, and transmitting the test message and the fuzzed message identification information to a device under test (DUT). The method also includes at a packet analyzer located between the FTM and the DUT, receiving the plurality of test messages and the fuzzed message identification information, and identifying the test message including the fuzzed data using the fuzzed message identification information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497100&OS=09497100&RS=09497100
owner: IXIA
number: 09497100
owner_city: Calabasas
owner_country: US
publication_date: 20140505
---
The subject matter described herein relates to device testing. More specifically the subject matter relates to methods systems and computer readable media for providing fuzz testing functionality.

When testing computing and or networking equipment it is important to make sure that testing mimics real world scenarios and conditions. For example when testing a router or server it may be necessary to generate test traffic similar to real traffic including valid and invalid traffic. Fuzz testing or fuzzing is a testing technique that involves providing invalid unexpected and or random data to one or more device s under test DUT or software therein. During testing the DUT may be monitored to identify issues or problems associated with the fuzzed data. For example a testing platform may send invalid unexpected and or malformed packets to a DUT and may monitor the DUT for problems such as crashes failing built in code assertions or other unwanted behavior.

Conventional testing platforms have issues performing managing and or analyzing fuzz testing. For example a conventional testing platform may have difficulty continuing fuzz testing when a DUT experiences problems and or may be unable to determine if and when fuzzed data actually caused the DUT to experience problems.

Accordingly in light of these difficulties a need exists for improved methods systems and computer readable media for providing fuzz testing functionality.

Methods systems and computer readable media for providing fuzz testing functionality are disclosed. According to one method the method includes at a fuzz testing module FTM generating a plurality of test messages including a test message including fuzzed data generating fuzzed message identification information and transmitting the test message and the fuzzed message identification information to a device under test DUT . The method also includes at a packet analyzer located between the FTM and the DUT receiving the plurality of test messages and the fuzzed message identification information and identifying the test message including the fuzzed data using the fuzzed message identification information.

According to one system the system includes a FTM configured to generate a plurality of test messages including a test message including fuzzed data to generate fuzzed message identification information and to transmit the plurality of test messages and the fuzzed message identification information to a DUT. The system also includes a packet analyzer located between the FTM and the DUT. The packet analyzer is configured to receive the plurality of test messages and the fuzzed message identification information and to identify the test message including the fuzzed data using the fuzzed message identification information.

The subject matter described herein may be implemented in software in combination with hardware and or firmware. For example the subject matter described herein may be implemented in software executed by a processor. In one exemplary implementation the subject matter described herein may be implemented using a computer readable medium having stored thereon computer executable instructions that when executed by the processor of a computer control the computer to perform steps. Exemplary computer readable media suitable for implementing the subject matter described herein include non transitory devices such as disk memory devices chip memory devices programmable logic devices and application specific integrated circuits. In addition a computer readable medium that implements the subject matter described herein may be located on a single device or computing platform or may be distributed across multiple devices or computing platforms.

As used herein the term node refers to a physical computing platform including one or more processors and memory.

As used herein the terms function or module refer to hardware firmware or software in combination with hardware and or firmware for implementing features described herein.

The subject matter described herein includes methods systems and computer readable media for providing fuzz testing functionality. When testing one or more network resources it may be desirable to test the resources under non trivial load conditions that mirror or closely approximate real world scenarios.

In accordance with some aspects of the subject matter described herein a computing platform e.g. a testing platform a device or a node or a module e.g. a field programmable gateway array FPGA an application specific integrated circuit ASIC or software executing on a processor may be configured to provide fuzz testing functionality. For example a test message such as a frame a packet a datagram a user datagram protocol UDP packet a transport control protocol TCP packet or a protocol data unit PDU may include fuzzed data. In this example fuzzed data may include one or more parameter values e.g. in a header portion of the test message and or user data that is random invalid or unexpected data. In some embodiments test messages that include fuzzed data may conform to a specific protocol and or may otherwise appear normal or valid. In some embodiments test messages that include fuzzed data may not conform to a specific protocol and or may otherwise appear abnormal or invalid.

Conventional testing platforms cannot point to or identify fuzzed packets or frames unambiguously and accurately. For example a network protocol analyzer or other testing platform may identify some high level errors such as a wrong checksum but generally cannot identify fuzzed packets or frames e.g. if the content is valid with regard to relevant protocol definitions. Further a network protocol analyzer generally lacks functionality for identifying packets or frames that disobey protocol state machine transitions unless the network protocol analyzer is aware of protocol state machine transitions. Moreover a network protocol analyzer is incapable of identifying fuzzed packets or frames if the fuzzed packets or frames are encrypted. Hence conventional testing platforms like network protocol analyzers are generally not capable of efficiently identifying fuzzed packets or frames.

In accordance with some aspects of the subject matter described herein a computing platform or module may be configured to identify a test message that includes fuzzed data. For example indication information or fuzzed message identification information may be generated that corresponds to a test message and may be included in the test message or in a separate indication message. In this example the indication message may be sent immediately before or after the test message and may include information for identifying or indicating a test message is a test message e.g. by a network protocol analyzer packet capture software e.g. Wireshark or a similar entity.

Conventional testing platforms cannot quickly or easily reproduce or replay test related events. For example a test operator may execute fuzz testing of a DUT. In this example the test operator may detect a problem around a fifty minute mark of a sixty minute test and may want to re run or further study this problem. With conventional testing platforms the test operator may be required to restart the test from the beginning. However restarting the test from the beginning wastes resources and time since the test operator may be only interested in the last ten minutes of the test.

In accordance with some aspects of the subject matter described herein a computing platform or module may be configured to store state information and or related testing information for reproducing or replaying test related events. For example during testing of a DUT state information such as fuzzed parameters timestamps test objectives and or other information for replaying test related events may be periodically stored. In this example the stored information may be usable to perform a test from any saved point in time e.g. rewinding or fast forwarding a test to a particular point of interest.

Fuzz testing can involve generating a large number of fuzzed messages. For example fuzz testing may involve fuzzing numerous combinations of Ethernet header parameters and or user data of messages to a DUT. Conventional testing platforms can require substantial physical resources e.g. memory and processing resources and significant time to complete fuzz testing of a DUT. Further conventional testing platforms can get impacted by a DUT s unexpected behavior and fail. If such conventional testing platforms are incapable of handling DUT failures by continuing with the fuzz testing instead of aborting the test and restarting then the impact of such failures may hinder efficient resource utilization and may increase the time required to complete fuzz testing of a DUT.

In accordance with some aspects of the subject matter described herein a computing platform or module may be configured to assign portions of fuzz testing among a plurality of resources e.g. ports or processors. For example during testing of a DUT a first test portion may be assigned to a first test port for communication to the DUT and a second test portion may be assigned to a second test port for communication to the DUT. In this example each port may perform testing independently from the other port. If one of the ports fails the test portion or an uncommunicated or unexecuted portion of the test portion may be reassigned to an available test port. If a failed test port is later re initialized e.g. becomes capable of performing testing a test portion may be assigned to the re initialized test port. By using multiple resources when performing fuzz testing a computing platform or module in accordance with some aspects of the subject matter described herein can be resistant to failures and can more quickly complete fuzz testing of a DUT as compared to conventional testing platforms.

Reference will now be made in detail to exemplary embodiments of the subject matter described herein examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

In some embodiments computing platform may be a stand alone tool a testing device or software executing on a processor. In some embodiments computing platform may be a single node or may be distributed across multiple computing platforms or nodes.

In some embodiments computing platform may include one or more modules for performing various functions. For example computing platform may include a packet generation module configured to generate traffic for testing DUT and or a network node emulation module configured to emulate a node or device that communicates with DUT .

Computing platform may include a fuzz testing module FTM . FTM may be any suitable entity or entities e.g. software executing on a processor an ASIC an FPGA or a combination therein for performing one or more aspects associated with providing fuzz testing functionality. FTM may be configured to generate and or modify various fuzzed messages for testing DUT . For example FTM may include functionality for generating various test messages that include fuzzed data e.g. random invalid or unexpected data for testing DUT e.g. parameters and or user data . In this example the test messages may include packets or frames that conform to one or more protocols and or may appear normal or valid e.g. to a network protocol analyzer . After sending test messages containing fuzzed data FTM may be configured to monitor and interact with DUT and or may determine whether DUT experiences any issues associated with the test messages.

In some embodiments fuzzed data may be generated and or included in test messages to test various aspects of DUT . For example fuzzed data may be utilized to determine whether DUT has correctly implemented a particular network standard or protocol. In this example FTM may attempt to generate parameter values and or user data that is random invalid atypical or unexpected data. In another example fuzzed data may be utilized to determine whether DUT includes security flaws or bugs associated with communications. In this example FTM may attempt to generate parameter values and or user data that cause common problems such as buffer overflow issues or system crashes.

FTM may include ports and . Each of ports and may represent any suitable entity or entities e.g. one or more processors and or communications interfaces for interacting with users and or nodes. For example ports and may each represent a network interface card NIC or a communications interface therein for receiving and or sending various types of data units such as IP packets Ethernet frames Ethernet packets PDUs datagrams UDP packets TCP packets IP version 4 v4 packets IP version 6 v6 packets stream control transmission protocol SCTP packets real time transport protocol RTP packets or reliable data protocol RDP packets packets using a tunneling protocol and or other data units.

In some embodiments ports and or may be configured to communicate with FTM user . FTM user may be any entity e.g. an automated system or a device or system controlled or controllable by a human user for selecting and or configuring various aspects associated with performing managing and or analyzing fuzz testing. For example various user interfaces e.g. an application user interface API and a graphical user interface GUI may be provided for testing DUT for selecting and or implementing fuzz logic and testing techniques and or for providing testing configuration information. Exemplary user interfaces for testing DUT for selecting and or implementing fuzz logic and testing techniques and or for providing testing configuration information may support automation e.g. via one or more scripting languages a representation state transfer REST API a command line and or a web based GUI.

In some embodiments ports and or may be configured to communicate with DUT . DUT may be any suitable entity or entities e.g. devices systems or platforms for communicating with computing platform and or for receiving and processing test messages. For example DUT may include a router a network switch a server or a network controller. In another example DUT may include one or more systems and or computing platforms e.g. a data center or a group of servers and or routers. In yet another example DUT may include one or more networks or related components e.g. an access network a core network or the Internet.

In some embodiments one or more algorithms and or factors may be used to determine how many resources and or which resources e.g. processors and or ports and or are needed to perform a particular test. For example FTM and or another entity may attempt to utilize all available resources to perform a test as quickly as possible. In another example FTM and or another entity may determine whether a test is conducive to distributed processing and if so may determine an optimal number of resources for performing the test. In another example a number of resources for performing a test may be selected based on parameters or preferences provided by a test operator preconfigured information network conditions and or other information. For example the test duration for a test may be inversely proportional to the number of ports being used for testing. As such a test operator may assign additional ports to shorten the test duration.

In some embodiments FTM may include functionality for performing fuzz testing using multiple resources e.g. processors NICs and or ports and or . For example a test may be initiated using a test plan. A test plan may be one or more scripts logic or other information usable to initiate and or perform fuzz testing based on one or more test objectives. In this example a test plan may involve multiple transactions or messages between an emulated user and DUT . The transactions or messages of a test plan may include different types of fuzzed data such as fuzzed parameter values or user data that is unexpected.

In some embodiments a test plan or related information e.g. configuration information may be distributed as chunks or test portions among multiple resources e.g. processors or test ports . Each chunk or test portion may involve related test messages that are to generated and or sent to DUT . For example each test portion may be based on a particular type of fuzzed data e.g. parameters user data etc. . In another example a test portion may be based on a particular transaction and or emulated user or other entity.

In some embodiments FTM or another entity may assign or distribute test portions to resources for execution and or communication to DUT . For example FTM may assign to port a first test portion associated with modifying a parameter X in a transaction between emulated user and DUT . In this example the resource may generate and or fuzz a test message as indicated by the test portion and may send the test message to DUT . Continuing with this example FTM may also assign to port a second test portion associated with modifying a parameter in a transaction V between a second emulated user and DUT . In this example the resource may generate and or fuzz a test message as indicated by the second test portion and may send the test message to DUT .

In some embodiments after a resource has completed or almost completed communicating or executing a test portion another test portion may be assigned or distributed to a resource for execution or communication. For example port may assigned a first test portion and port may be assigned a second test portion. In this example as port finishes execution of the first test portion a third test portion may be assigned to port and as port finishes execution of the second test portion a fourth test portion may be assigned to port .

In some embodiments if a resource fails to execute a test portion the test portion or the uncompleted portion of the test portion may be reassigned to an available resource. In such embodiments measures may be taken to bring the failed resource back into a working or functional state e.g. re initialization of the resource . If a failed resource is successfully re initialized e.g. is capable of performing testing test portions may be assigned to the re initialized resource. If a failed resource is unable to be successfully re initialized e.g. is incapable of performing testing test portions may no longer be assigned to the resource.

In some embodiments FTM may include functionality for reproducing or replaying test related events. For example during testing of DUT FTM may store state information and or related information e.g. a progress or restore point information . In this example the state information may indicate completion progress a current test portion of an overall test plan e.g. chunk 16 of 100 or other information usable to rapidly reproduce or replay test messages or related events.

In some embodiments FTM may use the stored information to perform a test from any saved point in time. For example a test operator may use this replay functionality and or a binary search or other method to pinpoint or identify a particular message associated with a DUT related event e.g. crash or failure . In another example a test operator may determine certain times of interest during an initial test and may automate subsequent tests to execute or perform testing for these times. Hence by using stored state information or related information to replay test events time and resources may be conserved and as such test duration cycles may be shorter and more efficient.

In some embodiments FTM may include functionality for indicating and or identifying a test message containing fuzzed data. For example after generating a fuzzed message FTM may mark or otherwise distinguish the fuzzed message with indication information e.g. adding an identifier a timestamp or other information in a payload portion of a fuzzed message such that the fuzzed message still conforms to a relevant protocol. In contrast conventional methods generally require adding a signature or other markings to a e.g. header portion of a fuzzed message such that the fuzzed message no longer conforms to a relevant protocol.

In some embodiments FTM may send or initiate sending a separate indication message immediately before or after a test message. The indication message may include indication information and or may be usable for identifying the test message. In this example the indication message may be a special message in that the indication message may be uncommon and or easily distinguishable from test messages and other traffic. The indication message may also have little or no effect on the testing or performance of DUT . For example DUT may ignore and or discard an indication message without substantial processing e.g. by containing invalid parameter values such as a wrong checksum value or an invalid parameter value.

In some embodiments FTM may include functionality for accessing FTM storage . FTM storage may be any suitable entity or entities e.g. a storage device a non transitory computer readable medium and or a storage system for maintaining or storing information related to fuzz testing. For example FTM storage may contain state information for various tests e.g. such as restore points progress information or test objective information. In another example FTM storage may contain test message identifiers IDs fuzzed data IDs test IDs and or test configuration related information such as test preferences and or settings for various tests. In some embodiments FTM storage may be located at computing platform FTM another node or module or distributed across multiple platforms or devices.

In some embodiments MDM may be located between FTM and DUT . MDM may include any suitable entity e.g. a message tap device packet capture software or a network protocol analyzer for scanning analyzing inspecting and or storing one or more messages. For example MDM may be a node or software that analyzes messages on the way to or from DUT . In this example a network operator may use MDM and or a related GUI to identify potential problems that occurred during fuzz testing and may identify a related test message e.g. using indication information and or an indication message.

It will be appreciated that is for illustrative purposes and that various nodes and or modules locations and or functionality described above in relation to may be changed altered added or removed.

Referring to test message may represent an Ethernet packet including a preamble a destination address a source address a type or length parameter TLP value user data and or an error detection code EDC . Preamble may represent a seven octet e.g. seven bytes data portion indicating the start of an Ethernet packet. Destination address may represent a six octet data portion indicating a media access control MAC address for a destination node. Source address may represent a six octet data portion indicating a MAC address for a source node. TLP value may represent a two octet data portion and may indicate a protocol encapsulated in the payload portion e.g. user data or may indicate the size of the payload in octets for the payload portion. User data may represent a data portion e.g. generally between 46 and 1500 octets in size including payload information usable for various purposes. EDC may represent a four octet data portion e.g. a cyclic redundancy check CRC usable for detecting data corruption associated with test message .

In some embodiments test message may include fuzzed data . Fuzzed data may represent a data portion of various octets and may include any information for testing DUT or related components or software therein. For example fuzzed data may include header information or portions therein e.g. TLP value . In another example fuzzed data may include user data or a portion therein.

In some embodiments test message may include indication information also referred to herein as fuzzed message identification information usable for identifying test message as a test message and or as containing fuzzed data . For example a signature or other marker may be added or included in a header portion or payload portion of test message in such a way that test message still conforms to a relevant protocol. In this example the signature or marker may indicate e.g. to MDM or another entity that test message includes fuzzed data . In some embodiments indication information may also include state information or related information about fuzz testing. For example the state information may include progress information about a current test being performed.

It will be appreciated that test message is for illustrative purposes and that different and or additional information may be included in test message .

Referring to indication message may represent an Ethernet packet including a preamble a destination address a source address a TLP value user data and or an EDC . Preamble may represent a seven octet data portion indicating the start of an Ethernet packet. Destination address may represent a six octet data portion indicating a MAC address for a destination node. Source address may represent a six octet data portion indicating a MAC address for a source node. TLP value may represent a two octet data portion and may indicate a protocol encapsulated in the payload portion e.g. user data or may indicate the size of the payload in octets for the payload portion. User data may represent a data portion e.g. generally between 46 and 1500 octets in size including payload information usable for various purposes. EDC may represent a four octet data portion e.g. a CRC usable for detecting data corruption associated with indication message .

In some embodiments indication message may be a special message not generated or sent during a normal transaction or message flow e.g. transactions or message flows that do not include test message . For example indication message may include unique values for various parameters or header portions. In this example EDC may include or indicate a CRC error source address and destination address may include or indicate identical information and or TLP value may include or indicate a reserved type e.g. a user configurable Ethernet type .

In some embodiments indication message may be generated so as to minimize impact on DUT and or MDM . For example if DUT includes a layer router indication message may be generated with certain parameter values or information that minimize impact on the layer router whereas if DUT includes a layer switch indication message may be generated with different or additional parameter values or information that minimize impact on the layer switch. In some embodiments processing of indication message may have little or no effect on DUT e.g. minimal impact to DUT with regard to a protocol or other aspects being tested . In some embodiments generation handling and or processing of indication message may have little or no effect on a FTM e.g. minimal impact with regard to a tester s perspective such as little to no increase in test duration or processing requirements .

In some embodiments indication message may include indication information usable for identifying test message as a test message and or as containing fuzzed data . Exemplary indication information may include a message ID timestamp information test statistics state information associated with test message and or other information for identifying or indicating test message is a test message and or contains fuzzed data. For example indication message may include information about a number of fuzz occurrences prior to generating of indication message information about fuzzed logic being implemented a fuzzed portion ID and or other information related to testing.

In some embodiments indication message may include indication information usable for identifying issues with DUT . For example if FTM identifies that DUT is experiencing issues FTM may generate indication message containing TLP value indicating a special reserved type value e.g. ETH TYPE  . Otherwise e.g. if FTM does not detect issues with DUT FTM may generate indication message containing TLP value indicating a default reserved type value e.g. ETH TYPE 1 . As such while both reserved type values may be usable for identifying test message the special reserved type value may act as a DUT behavior indicator usable for identifying the occurrence of a DUT related issue.

In some embodiments indication information may also be usable for identifying a related session associated with a detected issue information about the type of detected issue and or identify a test message related to e.g. that caused or contributed to the detected issue e.g. by identifying a previous test message generated from that same source address but having a default reserved type value .

In some embodiments indication message may conform to a specific protocol or standard such that MDM or another entity can read or determine information about test message or a related test. For example MDM e.g. packet capture software may be configured e.g. via a dissector or decoder script to analyze indication message and display test related information to a test operator. By analyzing and or using this information stored in indication message a test operator may quickly identify test messages including test messages that correspond to a DUT related issue.

In some embodiments indication message may be sent immediately after or immediately before sending test message . For example where indication message is sent immediately after test message there may not be any other message between test message and indication message . In this example after testing is completed a test operator may use MDM e.g. packet capture software and find indication message and by finding the immediately preceding message identify test message .

It will be appreciated that indication message is for illustrative purposes and that different and or additional information may be included in indication message .

Referring to state information may be depicted using a table representing associations between test related IDs e.g. test IDs message IDs or fuzzed data IDs and test related information e.g. state information . The table depicted in may include any information for performing analyzing reproducing and or observing fuzz testing.

In some embodiments state information may include a test ID that correlates one or more test objective s . For example a test objective may identify or indicate particular fuzzing logic e.g. a test plan to be implemented. The test ID may also correlate with a current message or transaction ID associated with a test. For example the current message or transaction ID may indicate the most recent test message or transaction to occur during a given test. The test ID may also correlate with various statistics associated with a test. For example the statistics may indicate particular parameters being fuzzed and or a current tally of failures or issues experienced by DUT . The statistics may also indicate additional information about one or more failures such as a message ID or a transaction associated with a given failure. The statistics may also indicate or include information related to the test objective s including current values maximum values and or minimum. The test ID may also correlate with progress or replay related information such as a completion percentage value and or a time elapsed and or time left until a test is complete.

In some embodiments state information may be usable for replaying reproducing and or recreating a test related event. For example FTM may retrieve certain information about test 1 determine a particular message in test 1 that caused a failure and reproduce that message in a subsequent test to determine whether the message causes another failure.

It will be appreciated that state information in is for illustrative purposes and that different and or additional information may also be usable for providing fuzz testing functionality. Further it will be appreciated that state information may be stored in various data structures and or in one or more locations.

At step port may begin testing DUT using the first test chunk. For example the first test chunk may be for testing DUT using an emulated user John and a certain set of transactions where fuzzed data affects certain parameter values A and B in various test messages.

At step a second test chunk may be assigned to port . For example the second test chunk may be for testing DUT using an emulated user Bob and a certain set of transactions where fuzzed data affects certain parameter values A and C in various test messages.

At step FTM may determine that port has completed testing using the first test chunk and is available for further testing.

In some embodiments FTM may become aware of the failure involving the second test chunk. For example port may send a failure message to FTM indicating that a failure occurred during executing of the second test chunk. In another example FTM may exchange keep alive messages with port and if a keep alive response message is not received from port within a certain time period FTM may assume that port has failed.

At step port may be re initialized or otherwise repaired so as to be capable of receiving test chunks and testing DUT .

At step in response to determining that port has been successfully re initialized or repaired a third test chunk may be assigned to port . For example the third test chunk may be for testing DUT using an emulated user Tom and a certain set of transactions where fuzzed data affects certain parameter values B and C in various test messages.

It will be appreciated that FTM may continue assigning test chunks to available resources until all test chunks associated with a test plan have been executed or utilized. Further it will be appreciated that steps in are for illustrative purposes. Moreover it will be appreciated that different and or additional steps than steps described above may occur when using multiple resources for testing DUT .

In some embodiments FTM may periodically or aperiodically store state information as the first test is performed. For example statistics and current message IDs may be stored along with progress information and or other information needed to reproduce a test related event.

At step a first test may be completed when a last response message is sent from DUT to FTM . For example the first test may involve 12000 messages and may take two hours 120 minutes to complete.

At step FTM storage may indicate to FTM that the additional state information has been successfully stored.

At some subsequent time a second test may be performed. For example a test operator may analyze data associated with the first test and determine a point of interest in the first test requiring additional analysis.

At step FTM may request state information about the first test. For example FTM may request state information for reproducing test related events that occurred around one hour and fifty minutes 110 minutes into the first test.

At step FTM storage may provide the requested state information about the first test to FTM . For example the requested state information may include a message ID indicating a test message that was generated and sent around one hour and fifty minutes 110 minutes into the first test that caused on contributed to detected issues at DUT .

At step FTM may begin a second test by sending a first test message based on state information from the first test to DUT . For example the first test message of the second test may be based on a message sent near the end of the first test that caused DUT to crash.

At step the second test may be completed when a last response message is sent from DUT to FTM . For example since the second test starts with a message based on a message sent near the end of the first test the second test may be completed in a fraction of time as compared to the first test e.g. 10 minutes versus 120 minutes.

It will be appreciated that steps in are for illustrative purposes. Further it will be appreciated that different and or additional steps than steps described above may occur when using stored state information when testing DUT .

At step state information associated with a first test of DUT may be stored. For example FTM may periodically or aperiodically e.g. dynamically store state information and or related information at FTM storage .

In some embodiments state information may include information for reproducing one or more test related events.

In some embodiments state information may be stored in response to detecting that DUT is experiencing issues.

In some embodiments state information may be stored in response to generating or sending a test message.

At step a second test of DUT may be performed. The second test may include a test message that conforms to a protocol. The test message may contain random invalid or unexpected data and may be generated or determined using state information associated with the first test. For example after analyzing results for a first test lasting two hours a test operator may want to replay or reproduce the last 10 minutes of the first test FTM may query FTM storage and retrieve the necessary state information such that the second test can be a reproduction of the last 10 minutes of the first test e.g. without having to start the second test from the beginning and waiting an hour and 50 minutes until the point of interest.

In some embodiments test messages in a second test may include identical information as corresponding test messages in a first test.

In some embodiments test messages in a second test may include different information than corresponding test messages in a first test. For example FTM may use stored state information to identify test message in a first test and may generate multiple versions of test message each having different fuzzed parameter values. In this example a second test may send the different versions of test message to see if DUT experiences issues with one or more of these different versions of test message .

At step a first portion of test data for communication to DUT may be assigned to a first resource. The test data may include a test message that conforms to a protocol and the test message may contain random invalid or unexpected data. For example test data may represent a test plan that includes multiple test messages to be sent to DUT for testing purposes. In this example a first portion of test data may include test message which may include fuzzed data associated with one or more parameters. Continuing with this example FTM may assign the first portion to port and assign a second portion of test data to port .

At step it may be determined whether the first resource of the testing platform has failed to communicate the first portion of test data. For example during testing port may determine that a failure has occurred and may report the failure to FTM and or another entity. In another example FTM and or another entity may detect that a failure has occurred at port e.g. via heartbeat exchange messages or lack thereof.

At step in response to determining that the first resource of the testing platform has failed to communicate the first portion of test data the first portion of test data for communication to DUT may be assigned to a second resource of the testing platform. For example FTM may assign the first portion or some of the first portion to port .

In some embodiments a failed resource may not assigned a test portion unless the failed resource is re initialized or repaired to a working or functional state.

In some embodiments a failed resource may be re initialized or repaired. For example FTM may repair a failed resource to a working or functional state.

In some embodiments in response to re initializing or repairing a failed resource the repaired resource may be assigned another test portion.

At step at FTM a plurality of test messages may be generated including a test message including fuzzed data fuzzed message identification information may be generated and the plurality of test messages and the fuzzed message identification information may be transmitted to DUT . For example FTM may send a plurality of test messages including test message and indication message to DUT .

At step at a packet analyzer located between the FTM and the DUT the plurality of test messages and the fuzzed message identification information e.g. indication information may be received and the test message including the fuzzed data may be identified using the fuzzed message identification information. For example MDM may use a message ID a timestamp or other indication information to identify test message .

In some embodiments fuzzed message identification information may be received after sending a test message and or after receiving from DUT a response message corresponding to the test message.

In some embodiments fuzzed message identification information may be sent in a test message including fuzzed data or in a separate message distinct from the test message including fuzzed data.

In some embodiments fuzzed message identification information or a related message e.g. indication message may be discarded or prevented from reaching DUT by a packet analyzer e.g. MDM .

In some embodiments fuzzed message identification information may include a number of fuzz occurrences prior to generating of the indication information an ID for indicating fuzz logic implemented a fuzzed portion ID and or a behavior indicator indicating whether the DUT is experiencing issues.

In some embodiments fuzzed message identification information may have little or no effect on testing of the DUT. For example indication information and or a related indication message may be ignored or discarded by DUT .

In some embodiments state information associated with testing DUT may be stored and used to replay or reproduce a test related event.

In some embodiments portions of a test e.g. test chunks may be assigned among multiple resources e.g. port port and or port for testing DUT wherein if a first resource of the multiple resources fails to execute a first portion the first portion may be reassigned to a second resource of the multiple resources for execution.

In some embodiments a failed resource may be re initialized or repaired. For example FTM may repair a failed resource to a working or functional state.

In some embodiments a second portion for execution may be assigned to a resource that previously failed e.g. if the previously failed resource is repaired or re initialized.

It will be understood that various details of the subject matter described herein may be changed without departing from the scope of the subject matter described herein. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation as the subject matter described herein is defined by the claims as set forth hereinafter.

