---

title: Method, system, and logic for in-band exchange of meta-information
abstract: In an embodiment, a method is provided for enabling in-band data exchange between networks. The method can comprise receiving, by a first enveloping proxy located in the first network, at least one regular secure sockets layer (SSL) record for a SSL session established between a client and a server; receiving the data from a network element located in the first network; encoding the data into at least one custom SSL record; and transmitting the at least one regular SSL record and the at least one custom SSL record to an enveloping proxy. In another embodiment, a method can comprise receiving at least one regular secure sockets layer (SSL) record and at least one custom SSL record for a SSL session established between a client and a server; extracting the data from the at least one custom SSL; transmitting the at least one regular SSL record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426176&OS=09426176&RS=09426176
owner: CISCO TECHNOLOGY, INC.
number: 09426176
owner_city: San Jose
owner_country: US
publication_date: 20141021
---
This application claims the benefit of priority under 35 U.S.C. 119 e to U.S. Provisional Application Ser. No. 61 968 888 entitled IN BAND META INFORMATION EXCHANGE BETWEEN MOBILE SERVICE PROVIDER AND CONTENT PROVIDER filed Mar. 21 2014 which is hereby incorporated by reference in its entirety.

This disclosure relates in general to the field of communications and more particularly to enabling in band exchange of meta information between networks e.g. between a mobile service provider network and a content provider network .

Mobile service providers infrastructure provides the access network for subscribers exchanging data with content companies. This puts mobile service providers in the position to offer useful services to content companies. Such services may fall in the following broad categories 1 maintaining meta information about the subscribers and the subscriber access network 2 offering access to network functions as service and or 3 offering infrastructure services to content providers. Mobile service providers maintain meta information about the subscribers and the subscriber access network which are useful to content providers to provide better services. Such information may be offered to content providers and includes for example subscriber identity radio channel condition subscriber geo location subscriber usage pattern etc. Mobile service providers may offer access to network functions as service to content provider. For example if content companies need prioritized access to the mobile subscriber they can request the mobile service provider to uplift Quality of Service QoS settings for particular 5 tuple flows i.e. data flows identified by source IP address destination IP address source port number destination port number and the protocol and have these 5 tuple flows mapped to specific QoS improved dedicated bearers maintained towards the mobile devices. Mobile service providers may offer infrastructure services to content providers and host content provider applications in the service provider infrastructure. These applications include among others data caches video transcoders ad insertion engine etc.

All these services require the content provider and the mobile service provider to exchange data related to the specific subscriber flows data flow which traverse both their networks. Several examples include mobile service providers need to expose meta information to content providers content providers need to access an Application Programming Interface API exposed by mobile service providers to activate offered services and content provider applications hosted in the service provider network may need to exchange data with their content providers and therefore the mobile service provider needs to provide a communication channel to enable this exchange. For example if data flows are encrypted a content server may need to provide the hosted applications with session encryption keys or Secure Sockets Layer SSL certificates. It is important that such data is exchanged in band i.e. embedded in the subscriber data flow they refer to. However providing such data in band can be challenging.

Mobile service providers can offer many profitable services to content providers by exchanging subscriber flow i.e. data flow related meta data metadata with such content providers. Meta data information is exchanged in band to make the related flow identification resilient to Network Address Port Translator NA P T appliances content provider s load balancers present in the network and or other systems that translate network addresses. In band data exchange is not possible if subscriber flows are encrypted and currently the share of encrypted data flows observed in mobile network is quickly rising. This disclosure proposes the definition of custom SSL record types to carry the meta data. This method allows in band meta data exchange within SSL encrypted data flows without the service provider having access to encrypted data or to session encryption keys for the data flow.

Example 1 is a method for communication between a first network and a second network the method comprising receiving by a first enveloping proxy located in the first network at least one regular secure sockets layer SSL record for a SSL session established between a client and a server receiving by the first enveloping proxy data from a network element located in the first network encoding by the first enveloping proxy the data into at least one custom SSL record and transmitting the at least one regular SSL record and the at least one custom SSL record from the first enveloping proxy to a second enveloping proxy located in the second network.

In Example 2 the subject matter of Example 1 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 3 the subject matter of Example 1 or 2 can optionally include wherein the transmitting the at least one regular SSL record and the at least one custom SSL record comprises interleaving the at least one regular SSL record and the at least one custom SSL record over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 4 the subject matter of any of Examples 1 3 can optionally include wherein the receiving the data from the network element located in the first network comprises receiving the data over an out of band channel between the network element and the first enveloping proxy.

In Example 5 the subject matter of any of Examples 1 4 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network the second enveloping proxy is a content provider enveloping proxy and the server is a content server.

In Example 6 the subject matter of any of Examples 1 5 optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network the second enveloping proxy is a service provider enveloping proxy and the server is a content server.

Example 7 is a system for communication between a first network and a second network the system comprising at least one memory element at least one processor coupled to the at least one memory element and a data encoding module on a first enveloping proxy that when executed by the at least one processor is configured to receive at least one regular secure sockets layer SSL record for a SSL session established between a client and a server receive data from a network element located in the first network encode the data into at least one custom SSL record and transmit the at least one regular SSL record and the at least one custom SSL record from the first enveloping proxy to the second enveloping proxy.

In Example 8 the subject matter of Example 7 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 9 the subject matter of Example 7 or 8 can optionally include wherein the transmitting the at least one regular SSL record and the at least one custom SSL record comprises interleaving the at least one regular SSL record and the at least one custom SSL record over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 10 the subject matter of any of Examples 7 9 can optionally include wherein the receiving the data from the network element located in the first network comprises receiving the data over an out of band channel between the network element and the first enveloping proxy.

In Example 11 the subject matter of any of Examples 7 10 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network the second enveloping proxy is a content provider enveloping proxy and the server is a content server.

In Example 12 the subject matter of any of Examples 7 11 optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network the second enveloping proxy is a service provider enveloping proxy and the server is a content server.

Example 13 is one or more non transitory tangible media for communication between a first network and a second network the one or more non transitory tangible media including code for execution and when executed by a processor operable to perform operations comprising receiving by a first enveloping proxy located in the first network at least one regular secure sockets layer SSL record for a SSL session established between a client and a server receiving by the first enveloping proxy data from a network element located in the first network encoding by the first enveloping proxy the data into at least one custom SSL record and transmitting the at least one regular SSL record and the at least one custom SSL record from the first enveloping proxy to a second enveloping proxy located in the second network.

In Example 14 the subject matter of Example 13 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 15 the subject matter of Example 13 or 14 can optionally include wherein the transmitting the at least one regular SSL record and the at least one custom SSL record comprises interleaving the at least one regular SSL record and the at least one custom SSL record over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 16 the subject matter of any of Examples 13 15 can optionally include wherein the receiving the data from the network element located in the first network comprises receiving the data over an out of band channel between the network element and the first enveloping proxy.

In Example 17 the subject matter of any of Examples 13 16 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network the second enveloping proxy is a content provider enveloping proxy and the server is a content server.

In Example 18 the subject matter of any of Examples 13 17 optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network the second enveloping proxy is a service provider enveloping proxy and the server is a content server.

Example 19 is a method for communication between a first network and a second network the method comprising receiving by a first enveloping proxy from a second enveloping proxy at least one regular secure sockets layer SSL record and at least one custom SSL record for a SSL session established between a client and a server wherein the first enveloping proxy is located in the first network and the second enveloping proxy is located in the second network extracting by the first enveloping proxy data from the at least one custom SSL transmitting the at least one regular SSL record from the first enveloping proxy to the server.

In Example 20 the subject matter of Example 19 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 21 the subject matter of Example 19 or 20 can optionally include wherein the receiving the at least one regular SSL record and the at least one custom SSL record comprises receiving at least one regular SSL record interleaved with the at least one custom SSL over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 22 the subject matter of any of Examples 19 21 can optionally include transmitting the data to the server.

In Example 23 the subject matter of any of Examples 19 22 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network and the second enveloping proxy is a content provider enveloping proxy.

In Example 24 the subject matter of any of Examples 19 23 can optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network and the second enveloping proxy is a service provider enveloping proxy.

Example 25 is a system for communication between a first network and a second network the system comprising at least one memory element at least one processor coupled to the at least one memory element and a data encoding module on a first enveloping proxy that when executed by the at least one processor is configured to receive from a second enveloping proxy at least one regular secure sockets layer SSL record and at least one custom SSL record for a SSL session established between a client and a server wherein the first enveloping proxy is located in the first network and the second enveloping proxy is located in the second network extract by the first enveloping proxy data from the at least one custom SSL transmit the at least one regular SSL record from the first enveloping proxy to the server.

In Example 26 the subject matter of Example 25 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 27 the subject matter of Example 25 or 26 can optionally include wherein the receiving the at least one regular SSL record and the at least one custom SSL record comprises receiving at least one regular SSL record interleaved with the at least one custom SSL over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 28 the subject matter of any of Examples 25 27 can optionally include transmitting the data to the server.

In Example 29 the subject matter of any of Examples 25 28 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network and the second enveloping proxy is a content provider enveloping proxy.

In Example 30 the subject matter of any of Examples 25 29 can optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network and the second enveloping proxy is a service provider enveloping proxy.

Example 31 is one or more non transitory tangible media for enabling in band data exchange between a first network and a second network the one or more non transitory tangible media including code for execution and when executed by a processor operable to perform operations comprising receiving by a first enveloping proxy from a second enveloping proxy at least one regular secure sockets layer SSL record and at least one custom SSL record for a SSL session established between a client and a server wherein the first enveloping proxy is located in the first network and the second enveloping proxy is located in the second network extracting by the first enveloping proxy the data from the at least one custom SSL and transmitting the at least one regular SSL record from the first enveloping proxy to the server.

In Example 32 the subject matter of Example 31 can optionally include wherein encrypted data within the at least one regular SSL record is to be decrypted only by the server.

In Example 33 the subject matter of Example 31 or 32 can optionally include wherein the receiving the at least one regular SSL record and the at least one custom SSL record comprises receiving at least one regular SSL record interleaved with the at least one custom SSL over a data connection between the first enveloping proxy and the second enveloping proxy.

In Example 34 the subject matter of any of Examples 31 33 can optionally include transmitting the data to the server.

In Example 35 the subject matter of any of Examples 31 34 can optionally include wherein the first network is a service provider network the first enveloping proxy is a service provider enveloping proxy the second network is a content provider network and the second enveloping proxy is a content provider enveloping proxy.

In Example 36 the subject matter of any of Examples 31 35 can optionally include wherein the first network is a content provider network the first enveloping proxy is a content provider enveloping proxy the second network is a service provider network and the second enveloping proxy is a service provider enveloping proxy.

Exchanging meta information between the mobile service provider and the content provider is challenging because any out of band mechanism would a introduce latency in the distribution of meta data which is sub optimal for short lived data flows and b require both the content provider and service provider to agree on the identification of the related subscriber data flow. This latter is non trivial as the presence of Network Address and Port Translation NAT NAPT or NA P T functions between the content provider and the service provider and or load balancing functions hosted in the content provider causes the 5 tuple characterizing the data flows to be different at the two ends of the communication. Therefore what the service provider systems such as Long Term Evolution LTE Evolved Packet Core EPC and Operations Support System OSS systems Policy and Charging Rules Function PCRF Home Subscriber Server HSS Online Charging Solution OCS see does not always coincide with what the content provider sees . In some examples the provider system s is a Long Term Evolution LTE Evolved Packet Core EPC and Operations Support System OSS system e.g. Policy and Charging Rules Function PCRF Home Subscriber Server HSS or Online Charging Solution OCS 

Embedding meta data into a non encrypted data flow is trivial. In case of HTTP flows for example common business practice encodes such data in custom HTTP headers. When subscriber data flows are encrypted by means of SSL or any other encrypting mechanism such trivial embedding is not possible without accessing session encryption keys. It is highly discouraged that content providers share session encryption keys with service providers as such sharing would violate the explicit trust relationship between subscriber and content provider. However just as content providers need to ensure a trust relationship between the subscriber and themselves a mechanism is needed to ensure a trust relationship between the content provider and service provider for meta data exchange.

This disclosure discusses various methods to allow in band meta data exchange between service provider and content provider in the presence of SSL encrypted sessions without breaking into the end to end encrypted channel. The service provider can piggyback on the existing end to end SSL session and insert their meta data to go along with the encrypted data between subscriber and content provider. The methods systems and logic described herein provide at least the following advantages allows in band meta data exchange within SSL encrypted flows allows for meta data to be carried in a subset of the flows forming the subscriber session due to subscriber awareness does not hinder end to end security of SSL flows as they do not require the content provider to access encrypted data allows the content provider and the service provider to unequivocally identify the flow the service relates to even in presence of SSL flows or NA P T does not rely on Internet Protocol IP or TCP header modification to carry meta data as other methods propose. For this reason carried meta data are resistant to NAT application proxies or firewalls present in the network does not rely on a tunnel between the Service Provider SP and Content Provider CP which can subvert end to end TCP congestion control by encapsulating the subscriber TCP session inside another transport layer and or allows service provider to provide subscriber flows related services to content providers for SSL encrypted flows.

The service provider network is to provide client devices with access to network services e.g. data and or voice mobile service or combination thereof . Client devices and utilize connections and respectively to connect to network access element thereby accessing the service provider network. Client devices and utilize connections and respectively to connect to network access element thereby accessing the service provider network. Each network access element is operably coupled to network core . Thus each of network access element and provide the client devices with access to a network core over the wireless connections. The network core includes one or more network elements e.g. routers switches gateways Serving Gateway Packet Data Network Gateway Mobility Management Entity etc. for processing voice signals and or data signals traffic and transmitting the traffic toward a destination associated with the traffic e.g. a destination IP address included in a 5 tuple . For example the network core delivers traffic to and or from the network edges e.g. network elements and . In general the network core enables important functions for operation of the SP network e.g. delivering data and or voice over a mobile network hosting applications adjusting service parameters for one or more data flows etc. . In addition to being coupled to network access element and the network core is coupled to service provider enveloping proxy . The service provider enveloping proxy transmits signals to and receives signals from the content provider network via Internet . Enveloping proxy can inject additional data e.g. meta data function calls data structures such as containers etc. into the signal and thereby transmit the additional data in band to the other network e.g. via the content provider enveloping proxy located in the content provider network . In addition the enveloping proxy can receive an augmented signal i.e. the signal including the additional data supplied in band extract the additional data from the augmented signal and then relay the signal and or the additional data to one or more destinations e.g. a client device and or a hosted application within the service provider network .

Some embodiments of the present disclosure include NAT within the service provider network of system . In alternative embodiments NAT is not present in e.g. is excluded from or is not active the service provider network. When the NAT is present in system the NAT is connected to the Internet . Thus signals transmitted by the service provider enveloping proxy toward the content provider network first traverse the NAT and are subsequently transmitted by the NAT to the content provider network via Internet . When traffic traverses NAT the NAT modifies a network address e.g. an IP address and may therefore map a first 5 tuple corresponding to a data flow to second 5 tuple which corresponds to the data flow . The NAT transmits data via Internet to the content provider network e.g. via load balancer and or directly to content provider enveloping proxy . When the NAT is not present in system the service provider enveloping proxy is connected to the Internet . Thus signals transmitted network by the service provider enveloping proxy toward the content provider traverse Internet without first traversing the NAT.

The content provider CP network is to provide client devices with access to content e.g. data files multimedia etc. . The servers and may be content servers for providing content requested by clients e.g. client devices . The servers are coupled to a content provider enveloping proxy the network element and the load balancer . The CP enveloping proxy may transmit signals to and receive signals from any of the devices to which it is coupled. Upon receiving a request for a particular content the servers retrieve the content and transmit a response toward the requesting client for example via CP enveloping proxy . Advantageously the enveloping proxy can inject additional data e.g. meta data function calls data structures such as containers etc. into the signal thereby transmitting the additional data in band to the SP network e.g. via the SP enveloping proxy . In addition the enveloping proxy can receive an augmented signal i.e. the signal including the additional data supplied in band extract the additional data from the augmented signal and then relay the signal and or the additional data to one or more destinations.

SSL protocol defines a layer on top of Transport Control Protocol TCP that encrypts all the application data exchanged between the two ends of the TCP connection. Upon TCP connection establishment e.g. via TCP handshakes the connection endpoints initiate a SSL handshake by which they negotiate the encryption parameters to be used e.g. via SSL handshakes . Once the handshake is completed encrypted application data and other protocol related information are exchanged. All the data exchanged within an SSL session are fragmented into basic units called SSL records. SSL records can be of different types and different size however all record types include a common unencrypted header that specifies the particular type i.e. SSL record type and the size of the specific record. The type called an SSL record type is a numerical value that corresponds to the type of SSL record. For example the SSL protocol defines the following SSL record types Change Cipher Spec type number Alert type number Handshake type number and Application Data type number .

An SSL connection may be established between a client e.g. any of clients and a server e.g. any of servers and or network element for transmitting regular SSL records e.g. with an SSL record type enumerated in the SSL protocol . In one example the CP enveloping proxy encodes meta data into custom SSL records e.g. with a custom SSL record type for transmission to the service provider network e.g. via SP enveloping proxy . The custom SSL records generated by the CP enveloping proxy may be interleaved with regular SSL records. The CP enveloping proxy cannot access the secure or encrypted content within the regular SSL records. Thus the generation and interleaving of the custom SSL records is performed without accessing session encryption keys for the regular SSL records. In addition the generation and interleaving of the custom SSL records does not hinder end to end security of the flow of regular SSL records as it does not require the content provider to access encrypted data within the regular SSL records.

Some embodiments of system include load balancer within the content provider network. In alternative embodiments load balancer is not present in e.g. is excluded from or is not active the content provider network. When the load balancer is present in system the load balancer is connected to the Internet . Thus signals transmitted by the content provider enveloping proxy toward the service provider network first traverse the load balancer and are subsequently transmitted by the load balancer to the service provider network via Internet . When traffic traverses load balancer the load balancer can modifies a network address e.g. an IP address to balance the amount of request for content delivered to each and may therefore map a first 5 tuple corresponding to a data flow to second 5 tuple which corresponds to the data flow .

In some implementations only NAT is present in system . In other examples only load balancer is present in system . In still other examples both NAT and load balancer are present. Alternatively in other examples neither NAT nor load balancer is present system .

Because the enveloping proxies e.g. each of enveloping proxy and transmit the additional data interleaved with the encrypted regular SSL records of a data flow meta data is transmitted between the proxies without accessing session encryption keys for the data flow. Neither enveloping proxy nor enveloping proxy decrypts the encrypted regular SSL records of the data flow.

In operation a client device utilizes the service provider network to access content stored in the content provider network. For example a subscriber e.g. an end user may use one of the client devices to input a request for multimedia content from a server on the content provider network. In system client device generates a request to send to server and transmits the request to the server thereby generating data flow i.e. . The data flow may be sent over an encrypted session between the client and server . The session may be encrypted with any encryption mechanism. In the case of SSL encryption a public key and a private key are used within the session. The public key is used to encrypt the data and the private key which is kept private is used to decrypt the data. When the client device establishes a secure connection with server server in the content provider network stores the private key while client device be uses the public key to encrypt the data. The content provider s private key should not be shared with the service provider as such sharing would violate the explicit trust relationship between subscriber and content provider. In this example the service provider enveloping proxy does not have access to the content provider s private key and therefore cannot decrypt SSL records that are encrypted by using the content provider s public key for the encryption . After the session is established each stage of transmitting data flow i.e. each of data flow portions uses the encrypted session to transmit regular non custom SSL records that are encrypted by using the content provider s public key. SSL records can be of different types and different size however all record types include a common unencrypted header that specifies the particular type and the size of the specific record. The type called an SSL record type is a numerical value that corresponds to the type of SSL record. For example the SSL protocol defines the following SSL record types Change Cipher Spec type number Alert type number Handshake type number and Application Data type number . The regular SSL records contain only the SSL record types that are defined by the SSL Protocol e.g. or other SSL record type defined in standards based protocol . Regular SSL records e.g. for the request are transmitted from device to network element via data connection using the session. Upon receiving regular SSL records network element transmits the regular SSL records to network core . In turn the network core transmits regular SSL records to the service provider enveloping proxy . Upon receiving the regular SSL records service provider enveloping proxy transmits regular SSL records and to the service provider enveloping proxy over a TCP connection established over Internet e.g. via NAT if present and or via load balancer if present thereby transmitting the request for content to the content provider network. Upon receiving regular SSL records content provider enveloping proxy transmits regular SSL records to the server to complete the transmission of the request.

In this case the service provider enveloping proxy has access to meta data associated with the data flow . For example a network element e.g. a device hosting an application within network core may transmit to enveloping proxy the meta data including current Quality of Service QoS and network congestion information for the data flow . In turn the service provider enveloping proxy can share the meta data with the content provider i.e. transmit the meta data to a network element with the CP network . For example the service provider enveloping proxy encodes the meta data into at least one custom SSL record e.g. records . The custom SSL records are generated e.g. encoded by an enveloping proxy with a custom SSL record type in the header. In one example a custom SSL record type is a SSL record type that is not defined by the SSL protocol e.g. 99 . The meta data can include or be represented as a sequence of bits. The bits contained within the custom SSL records may or may not be encrypted. For encrypted custom SSL records the custom SSL records are generating using an encryption key that is different from the encryption key used to encrypt the regular SSL records. Thus the private key used to decrypt the custom SSL records does not decrypt the regular SSL records and thereby can be used while maintaining the security of the data contained within the regular SSL records e.g. and . Service provider enveloping proxy can transmit the meta data encoded within the custom SSL records i.e. . In addition the service provider enveloping proxy can transmit the custom SSL records which contain the meta data the data flow i.e. transmitted in band . Thus service provider enveloping proxy transmits the regular SSL records e.g. and the custom SSL records e.g. . For example transmitting the regular SSL records and the custom SSL records comprises interleaving the regular SSL records and the custom SSL records over a data connection e.g. the TCP connection over Internet between the service provider enveloping proxy e.g. a first enveloping proxy and the content provider enveloping proxy e.g. a second enveloping proxy . Thus a single data connection may be used to transmit both the regular SSL records and the custom SSL records.

Content provider enveloping proxy receives the custom and regular SSL records e.g. interleaved with one anther in a data flow from service provider enveloping proxy . The content provider enveloping proxy can identify which of the records are custom SSL records and which of the records are regular SSL records based on the SSL record type e.g. identifying a custom SSL record type or a regular SSL record type respectively . The custom SSL records are retrieved from the data flow. In the example of encrypted custom SSL the enveloping proxy uses a private key established through a secure connection with enveloping proxy to decrypt the custom SSL records thereby extracting the meta data from the custom SSL records. If the custom SSL records are not encrypted the data may be directly extracted from the custom SSL records without decryption. The extracted data e.g. meta data and or containers may be transmitted to the server within the content provider network. In either case whether the custom SSL records are encrypted or not decryption of the custom SSL records is not decryption of the regular SSL records. In this case the regular SSL records remain encrypted. The content provider proxy transmits e.g. relays the regular SSL records to the server . When transmitting the regular SSL records to the server the content provider proxy strips the custom SSL records from the data flow. Thus the data flow is forwarded only after having been modified by removing the custom SSL records.

In this example records are regular i.e. non custom SSL records e.g. at least one regular SSL record . The at least one regular SSL record is generated using the public key for the SSL session between the client i.e. client and the server i.e. server . The at least one regular SSL record can be decrypted using only the private key for the SSL session between the client and the server. Encrypted data within the at least one regular SSL record is to be decrypted only by the server in this example the server . The server is the only device with access to the private key i.e. the content provider s private key for the SSL session . Thus the encrypted data within the at least one regular SSL record can be decrypted only by the server e.g. the server in the content provider network . In other words neither the service provider enveloping proxy nor the content provider enveloping proxy decrypts nor is capable of decrypting the at least one regular SSL record due at least in part to neither having access to a key that is required for decrypting the at least one regular SSL record. After the data is encoded e.g. encrypted within the at least one regular SSL record the data is transmitted to the server via one or more intermediate nodes. Because only the server can decrypt the data in the at least one regular SSL record the encrypted data within the at least one regular SSL record remains encrypted at all of the intermediate nodes between the client and the server. For example the service provider enveloping proxy e.g. a first enveloping proxy does not have access to encrypted data within the at least one regular SSL record. In addition the content provider enveloping proxy e.g. a second enveloping proxy does not have access to encrypted data within the at least one regular SSL record.

Records are custom SSL records e.g. at least one custom SSL record . The custom SSL records are used to transmit data e.g. meta data and or containers between the service provider network and the content provider network via enveloping proxies and . The data are carried i.e. by the custom SSL records in a subset of the flows i.e. a subset located between proxies and forming a subscriber session e.g. a session between client and server . The data can be a sequence of bits or include a sequence of bits . The bits contained within the custom SSL records may or may not be encrypted. For encrypted records the at least one custom SSL record is generated e.g. by enveloping proxy using a public key for a SSL session between the service provider enveloping proxy and the content provider enveloping proxy . In this example the at least one custom SSL record can be decrypted e.g. by enveloping proxy using the private key for the SSL session between the service provider enveloping proxy and the content provider enveloping proxy . For unencrypted records the sequence of bits that represent the meta data and or containers may be transmitted unencrypted i.e. in the clear within the custom SSL records. The generating and or transmission of the at least one custom SSL record is performed without accessing the encrypted data within the at least one regular SSL record. For example each of the following is performed without accessing the encrypted data within the at least one regular SSL record 1 enveloping proxy encodes data and or containers within the at least one custom SSL record for transmission to enveloping proxy without accessing the encrypted data within the at least one regular SSL record 2 enveloping proxy interleaves the at least one custom SSL record with the at least one regular SSL record during transmission to enveloping proxy 3 enveloping proxy receives the at least one custom SSL record interleaved with the at least one regular SSL record 4 enveloping proxy decrypts the at least one custom SSL record to retrieve the data and or the container 5 enveloping proxy transmits the at least one regular SSL record to server and 6 enveloping proxy transmits to server the data and or the container retrieved from the at least one custom SSL record.

As disclosed herein an enveloping proxy located in a first network receives regular i.e. non custom SSL records from a network element e.g. from a client device and or server . The enveloping proxy transmits e.g. forwards the regular SSL records over a TCP connection to another enveloping proxy located in a second network which is separate and different from the first network . For example a data flow e.g. sent using a TCP connection can include the regular SSL records for an SSL session established between a client and a server. In this example the enveloping proxy is an intermediate device node between the client and the server that forwards the regular SSL records. In addition to transmitting the regular SSL records the enveloping proxy can send data in band by encoding the data into custom SSL records for interleaving with the regular SSL records.

The enveloping proxy is not able to access the secure contents of the regular SSL records because it does not have access to the private key needed to decrypt the SSL records. However the enveloping proxy may receive data e.g. meta data and or one or more containers about the data flow to which the regular SSL records belong. In some examples the enveloping proxy may access the data from data store or may receive the data from another network component e.g. a network component that generates statistics such as bandwidth of the links traversed by the SSL records or battery life of client device from which SSL records originated . The enveloping proxy encodes the data into custom SSL records. The custom SSL records are then sent within the data flow e.g. sent with the regular SSL records over the TCP connection . In some cases the enveloping proxy interleaves the regular and the custom SSL records with one another when sending them e.g. over the TCP connection to the enveloping proxy located in the second network. The enveloping proxy advantageously uses the custom SSL records to transmit the data e.g. meta data and or one or more containers to the second network. The enveloping proxy modifies the data flow to encapsulate its own meta data and or containers. Thus the meta data is embedded within the data flow that it describes. In other words the enveloping proxy can encode encrypt data into custom SSL records e.g. using a custom SSL type for transmission with other regular SSL records wherein the data is sent within a data flow that it describes. An enveloping proxy as disclosed herein is not limited to encoding and or sending data in custom SSL records. As will be discussed further below an enveloping proxy can extract the data from custom SSL records received from another enveloping proxy thereby receiving in band data .

As shown in service provider enveloping proxy receives one or more inputs represented by input . The one or more inputs may comprise one or more regular SSL records data for an SSL connection. Upon receiving the regular SSL records service provider enveloping proxy forwards the unmodified regular SSL records over the data connection . The one or more inputs may comprise meta data and or containers e.g. in addition to the regular SSL records . In some cases the meta data and or containers are received from the same network component that sent the regular SSL records. In other cases the meta data and or containers and the regular SSL records are received from different sources. In still other cases the service provider enveloping proxy may generate the meta data and or containers. In each of these cases the service provider enveloping proxy generates custom SSL records to include the meta data and or containers. Generating the custom SSL records can include one or more of generating the SSL records splitting the data into chunks that fit within an SSL record for distributing into multiple SSL records setting an SSL record type within a header to a custom type etc. After the custom SSL records are generated the enveloping proxy transmits the custom SSL records interleaved with the regular SSL records over the data connection and thereby transmits the meta data and or containers in band to enveloping proxy .

Upon receiving regular SSL records and custom SSL records over data connection content provider enveloping proxy identifies which of the SSL records are regular SSL records and which of the SSL records are custom SSL records based on the SSL record type. For example enveloping proxy can identify regular SSL records based on the SSL record type matching one that is enumerated in the SSL Protocol and or not matching a custom SSL record type . Enveloping proxy can identify custom SSL records based on the SSL record type matching a custom SSL record type and or not matching one enumerated in the SSL Protocol . The custom SSL types may be stored in memory accessible to the enveloping proxy for comparison to SSL types in headers of received records. In some examples the content provider and service provider agree on a particular custom SSL type e.g. to correspond to custom SSL records used to transmit meta data and or containers.

The content provider enveloping proxy processes the SSL records to generate output . The output can include one or more outputs. Upon identifying the regular SSL records enveloping proxy transmits forward the regular SSL records as one of the one or more outputs included in output . The content provider enveloping proxy forwards each of the regular SSL records as output e.g. to a network component . In addition upon identifying the custom SSL records the enveloping proxy extracts the custom SSL records from SSL data connection . The extracted custom SSL records are processed by enveloping proxy to generate the meta data and or containers e.g. reconstruct the meta data and or containers sent by enveloping proxy from the data contained in the custom SSL records. In one example the enveloping proxy generates the data by decrypting the data using a private key for the custom SSL records. Note that the private key for the custom SSL records only allows decryption of the custom SSL records and does not allow decryption the regular SSL records. After decrypting data from the custom SSL records enveloping proxy can accesses and or modify the data. If data is received in chunks the chunks are aggregated and may for example use a checksum to verify that data was received without errors. After the data has been generated from the custom SSL records the enveloping proxy transmits the data in whole or in part as one of the one or more outputs included in output . The one or more outputs included in output are transmitted over one or more interfaces. In an embodiment the regular SSL records i.e. a first portion of output are sent in an SSL session over a TCP connection e.g. a first interface to a server. The meta data and or containers generated from the custom SSL records i.e. a second portion of output are sent through an out of band i.e. is not sent in band interface e.g. a second interface to the server and or another network component.

In enveloping proxy encodes the custom SSL records and enveloping proxy receives the encoded records sent by enveloping proxy . However in enveloping proxy encodes data into custom SSL records and enveloping proxy receives the encoded records sent by enveloping proxy .

As shown in content provider enveloping proxy receives one or more inputs represented by input . The one or more inputs may comprise one or more regular SSL records data for an SSL connection. Upon receiving the regular SSL records service provider enveloping proxy forwards the unmodified regular SSL records over the data connection . The one or more inputs may comprise meta data and or containers e.g. in addition to the regular SSL records . In some cases the meta data and or containers are received from the same network component that sent the regular SSL records. In other cases the meta data and or containers and the regular SSL records are received from different sources. In still other cases the content provider enveloping proxy may generate the meta data and or containers. In each of these cases the content provider enveloping proxy generates custom SSL records in which to include the meta data and or containers. Generating the custom SSL records can include one or more of generating the SSL records splitting the data into chunks that fit within an SSL record for distributing into multiple SSL records setting an SSL record type within a header to a custom type etc. After the custom SSL records are generated the content provider enveloping proxy transmits the custom SSL records interleaved with the regular SSL records over the data connection and thereby transmits the meta data and or containers in band to service provider enveloping proxy . Upon receiving regular SSL records and custom SSL records over data connection service provider enveloping proxy identifies which of the SSL records are regular SSL records and which of the SSL records are custom SSL records based on the SSL record type. The identifying is performed as is described with respect to the content provider enveloping proxy in . The service provider enveloping proxy processes the SSL records to generate output as is described with respect to the content provider enveloping proxy generating output in . As is shown in each enveloping proxy in may encode data into custom SSL records and or extract data from received custom SSL records. The enveloping proxies are network devices that execute logic to perform the operations described with respect to figures one A and and B. Exemplary logic for execution by one or more enveloping proxies e.g. and is provided below.

Turning to illustrates exemplary logic logic for execution by an enveloping proxy according to an embodiment of the present disclosure. Logic includes start point accessing data associated with a data flow wherein the data flow comprises one or more first SSL records for a SSL session established between a client and a server generating second SSL records for transmission with the first SSL records in over a data connection session the second SSL records being encoded with the data associated with the data flow and end point .

The logic begins at and advances to procedure where the enveloping proxy accesses data associated with a data flow. The data flow comprises one or more first SSL records for a SSL session established between a client and a server. The data associated with the flow may be meta data describing attributes of the data flow attributes of network elements traversed by the data flow as it travels from the client to the server or container either opaque or transparent for passing information to and or from an application. As an example this data may help a content provider to determine service parameters e.g. quality of service available bandwidth and or link capacity for a customer that is attempting to access content from the client via a service provider network. Thus the service provider may need to send the data to the content provider using the enveloping proxy. The enveloping proxy can access the data by retrieving the data from a memory e.g. a database or server receiving the data from a client device e.g. a device requesting content receiving the data from an application e.g. a hosted application and or or application running on the client device receiving the data from a network component located in a content provider network receiving the data from a network component located in a service provider network and or may be generated by observing the data flow. The one or more first SSL records may be regular SSL records. In some embodiments the proxy receives both regular SSL records e.g. the one or more first SSL records and the data associated with the regular SSL records. In other embodiments the enveloping proxy does not receive the regular SSL records and only receives the data associated with the regular SSL records.

After accessing the data associated with the data flow the data the enveloping proxy generates second SSL records to contain the data associated with the data flow at . The second SSL records may be custom SSL records as disclosed herein. The second SSL records are generated are for transmission with the first SSL records e.g. interleaving custom SSL records with regular SSL records over a TCP connection . Because the data is encoded within second SSL records the data can be transmitted in band from a first network to a second network. In addition the second SSL records can be transmitted with the first SSL records with out accessing the secure content of the regular SSL records. In some embodiments the enveloping proxy generates the second SSL records to send to a third party which interleaves the second SSL records with regular SSL records. After generating the second SSL records logic advances to end point .

Start point may coincide with a start point or an end point of other logic and or procedures. In some examples start point is to initiate variables and or data structures to be accessed by logic . End point may coincide with a start point or and end point of other logic and or procedures. The end point may be used to de allocate or free from memory any variables and our data structures used in logic . In some embodiments logic is implemented by enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy and or enveloping proxy .

Turning to illustrates exemplary logic logic for execution by an enveloping proxy according to an embodiment of the present disclosure. Logic begins at start point and advances to procedure where at least one regular Secure Sockets Layer SSL record regular SSL record is received from a network element e.g. a first enveloping proxy located in a first network for a SSL session established between a client and a server. Because the SSL session is encrypted between the client and the server the enveloping proxy cannot access the secure data within the regular SSL records. In other words the enveloping proxy does not have access to the private key that is required to decrypt the regular SSL records and access the content encrypted therein. The regular SSL records correspond to a data flow between the client and the server e.g. the data flow comprises the first SSL records .

After receiving the regular SSL records logic advances to procedure where a meta data and or containers i.e. data are received from the network element e.g. the first enveloping proxy located in the first network . The meta data and or containers are for transmission to another network e.g. via one or more enveloping proxies . For example a service provider may transmit the meta data and or containers from an enveloping proxy in the service provider s network to an enveloping proxy in a content provider network. Likewise a content provider may transmit the meta data and or containers from an enveloping proxy in the content provider s network to an enveloping proxy in a service provider network. The meta data and or containers may be received from the same network element from which the regular SSL records were sent. Alternatively the meta data and or containers may be received from a network element that is different from the network element that sent the regular SSL records. For example the meta data and or containers are received from a system that monitors network statistics or network devices to report attributes of the network. In one example the meta data is associated with the data flow subscriber and or device. In other words the meta data these data about the data flow. For example the meta data may be data about the data contained in the SSL records. In other examples the meta data is data about the entire data flow and its attributes. In other examples the data is about the network elements traversed by the data flow. In any case the meta data may be associated with the data flow e.g. describe an attribute of the data flow and therefore the regular SSL records. The meta data and or opaque containers can be received through any data connection. For example the meta data and or container may be received through an out of band interface between an enveloping proxy and a server a hosted application and or any network component capable of transmitting the meta data and or container.

At procedure the meta data and or containers i.e. the data received at procedure are encoded into at least one second SSL record custom SSL record . According to SSL Protocol e.g. RFC 6101 The SSL Protocol Version 3.0 an SSL record contains an SSL record type which is a numerical value that corresponds to the type of SSL record e.g. 20 change cipher spec 21 alert 22 handshake 23 application data . The custom SSL records are encoded with a custom SSL type. For example the encoding of the custom SSL records can comprise each of the custom SSL records having an SSL record type being a custom value e.g. set by an enveloping proxy that is not defined within SSL Protocol e.g. the custom value is not 20 21 22 or 23 the custom value may be one value in the range 1 19 one value in the range greater than or equal to 24 or 99 . The custom SSL records may be generated e.g. encoded by the enveloping proxy according to the SSL specification with the exception of the SSL record type which is encoded with a custom value as described above. The secure contents e.g. the payload of the custom SSL records include the meta data and or containers received at procedure .

At procedure the at least one regular SSL record and the at least one custom SSL record are transmitted to an enveloping proxy. In an embodiment the at least one regular SSL record and the at least one custom SSL record are transmitted from a first enveloping proxy located in a first network to a second enveloping proxy located in a second network . The transmission may occur over a single connection such as a single TCP connection. The SSL records i.e. the regular and custom SSL records may be interleaved with one another. For example the at least one regular SSL record and the at least one custom SSL record may be interleaved and transmitted over a data connection between the first enveloping proxy and the second enveloping proxy. Thus the data is sent in band within the stream of SSL records and does not require a special connection dedicated to sending meta data and or containers. Since the data flow contains its own meta data the transmission of the meta data is not negatively affected by translation of 5 tuples e.g. due to an NAT load balancer or any other function system that alters the 5 tuple . Moreover transmitting the data in band as disclosed herein does not rely on Internet Protocol IP or TCP header modification to carry meta data. Thus in band data are resistant to NAT application proxies or firewalls present in the network. After transmitting the regular and SSL records the logic ends at end point .

Start point may coincide with a start point or an end point of other logic and or procedures. In some examples start point is to initiate variables and or data structures to be accessed by logic . End point may coincide with a start point or and end point of other logic and or procedures. The end point may be used to de allocate or free from memory any variables and our data structures used in logic .

Logic is an exemplary implementation of logic . For example procedure corresponds to procedures and procedure corresponds to procedures and . In some embodiments logic is implemented by enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy and or enveloping proxy .

Turning to illustrates exemplary logic logic for execution by an enveloping proxy according to an embodiment of the present disclosure. Logic begins at start point and advances to procedure . At procedure at least second SSL record is accessed. The at least one second SSL record was received in a transmission e.g. interleaved in a first SSL connection over a TCP connection with first SSL records. In one example an enveloping proxy directly receives the transmission of regular SSL records i.e. the first SSL records with the custom SSL records i.e. the at least second SSL record . In other examples the enveloping proxy does not directly receive the transmission of the regular SSL records with the custom SSL records and only receives the custom SSL records from an intermediate network component. For example a third party may receive the regular SSL records interleaved with custom SSL records parse the custom SSL records out of the interleaved data stream and transmit the custom SSL records to the enveloping proxy. In either case the enveloping proxy accesses e.g. receives retrieves and the like the custom SSL records.

At procedure data are extracted from the at least one second SSL record. The data are associated with a data flow to which the first SSL records belong. The data may comprise meta data containers or any data for an enveloping to transmit to another enveloping proxy. For example a content provider application may be located in a service provider network. In this case the application may be required to send the data in custom SSL records to an enveloping proxy in the content provider s network thereby allowing the content provider is able to monitor performance of the application within the service providers network. The data may e.g. be any of meta data and or containers for a service provider to send to a content provider meta data and or containers for a content provider to send to a service provider meta data and or containers for a content provider application hosted in a service provider network to send to a content provider and or meta data and or containers for a service provider application hosted in a content provider network to send to a service provider. In one example the enveloping proxies establish a secure connection e.g. a second SSL connection between one another using the same TCP connection used to transmit the regular SSL records e.g. an enveloping proxy in a first network and enveloping proxy in a second network . The enveloping proxies may inject additional SSL records to carry data messages etc. between one another thereby enabling in band transmission of data. Extracting the data can comprise decrypting the custom SSL records using a private key for the secure connection between the enveloping proxies. The first SSL records remain encrypted between the client and the server. After extracting the data the logic advances to end point .

Start point may coincide with a start point or an end point of other logic and or procedures. In some examples start point is to initiate variables and or data structures to be accessed by logic . End point may coincide with a start point or and end point of other logic and or procedures. The end point may be used to de allocate or free from memory any variables and our data structures used in logic . In some embodiments logic is implemented by enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy and or enveloping proxy .

Turning to illustrates exemplary logic logic for execution by an enveloping proxy according to an embodiment of the present disclosure. Logic begins at start point and advances to procedure where an enveloping proxy receives at least one regular SSL record regular SSL records and at least one custom SSL record custom SSL records for a SSL session established between a client and a server. In an embodiment the records are received by a first enveloping proxy located in a first network from a second enveloping proxy located in a second network. The regular SSL records and custom SSL records are sent over a data connection. In some examples the regular and custom SSL records are received interleaved with one another. For example a stream of SSL records may include a custom SSL records after every Nth regular SSL record where N is a number greater than zero a set of consecutive custom SSL records a set of consecutive regular SSL records and or combination thereof. Upon receiving the regular SSL records and custom SSL records e.g. as a stream of SSL records the enveloping proxy may not immediately know which SSL records are regular SSL records and which are custom SSL records. The enveloping proxy can identify the regular and the custom SSL based at least in part on a SSL record type in a header of each record. For example the enveloping proxy may access each SSL record individually and compare the SSL record type to a list of regular type values and a list of custom type values. Upon determining that the SSL record type matches a regular SSL record type the enveloping proxy may identify the SSL record as a regular SSL record. Upon determining that the SSL record type does not match a regular SSL record type the enveloping proxy may identify the SSL record as a custom SSL record. Upon determining that the SSL record type matches a custom SSL record type the enveloping proxy may identify the SSL record as a custom SSL record. Upon determining that the SSL record type does not match a custom SSL record type the enveloping proxy may identify the SSL record as a regular SSL record. Thus by inspecting the SSL record type the enveloping proxy is able to distinguish the type of SSL record.

At procedure the data is extracted e.g. by a first enveloping proxy from the at least one custom SSL. As discussed with reference to procedure custom SSL records are identified at least in part based on the typed value of the SSL record. Those records identified as custom SSL records are used to transmit and or receive data containers messages etc. between networks. A private key for a secure session between enveloping proxies is used to decrypt the custom SSL records thereby allowing extraction of the data from the custom SSL records. The privately used to decrypt the custom SSL records is different from the private key used to decrypt the regular SSL records. This ensures that the security established between the client and the content server is maintained even though intermediate devices e.g. enveloping proxies can inject and extract custom SSL records into the stream of regular SSL records.

At procedure the at least one regular SSL record is transmitted to a network element e.g. the client or the server . Though the custom SSL records are decrypted at procedure the data in the regular SSL records remain encrypted. Thus the enveloping proxy transmits the regular SSL records unmodified to the network element acting only as a proxy device that forwards the records. Thus the enveloping proxy simultaneously forward the regular SSL records and extracts the data from the custom SSL records. After transmitting the regular SSL records to the network element the logic advances to end point .

In some embodiments after extracting the data the custom SSL records the enveloping proxy may take action based on the extracted data. For example one action may be to transmit the extracted data e.g. meta data and or containers . The data may be transmitted to the same network element to which the regular SSL records were transmitted or to another device. In other embodiment the action is to call a function based on the extracted data e.g. a function call to a service provider network to alter the service provided by the service provider . The action may be any of calling a function executing a function requesting a change in service provided by the service provider transmitting the extracted data storing a record in a database or any combination thereof.

Start point may coincide with a start point or an end point of other logic and or procedures. In some examples start point is to initiate variables and or data structures to be accessed by logic . End point may coincide with a start point or and end point of other logic and or procedures. The end point may be used to de allocate or free from memory any variables and our data structures used in logic .

Logic is an exemplary implementation of logic . For example procedure may corresponds to procedure procedure may corresponds to procedures and . In some embodiments logic is implemented by enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy enveloping proxy and or enveloping proxy .

In some embodiments a single device both encodes meta data into custom SSL records and extracts meta data received in other custom SSL records. In one example a single device implements both logic and logic . In another example a single device implements both logic and logic . In yet another example a single device implements both logic and logic . In yet other examples a single device implements both logic or logic and logic .

The enveloping proxies and generate custom SSL records which are used to transmit meta data and or containers related to a data flow between the client and the content server . The custom SSL records are transmitted with e.g. are piggybacked or interleaved with the regular SSL records e.g. the data flow . Because the meta data and or containers related to the data flow are transmitted in band within the data flow the meta data and or containers are resistant to NAT application proxies or firewalls present in service provider and or content provider networks. The content provider hosted application is hosted within service provider network and therefore is under the administrative domain of the service provider. Because the content provider does not have administrative control of network in which the application is located the network elements within the content provider network may not have access to meta data regarding the performance of the content provider content provider hosted application or performance the network components within network traversed by data flows to and or from the application . As a result the content provider hosted application may need to send meta data to the content provider network e.g. to the content server . The data may include meta data regarding the performance of the application meta data regarding the performance of the network in which it resides general information about a client device e.g. client from which a data flow is received.

As described above the SSL session is established between client and content server via data connections and . The client and the content server transmit regular SSL records between one another using the SSL session. For example client can send regular SSL records to content provider hosted application . In turn content provider hosted application can send regular SSL records to SP side enveloping proxy . Because the content provider hosted application must transmit additional data e.g. meta data containers etc. to the content server it does so by leveraging a data flow between SP side enveloping proxy and CP side enveloping proxy which is a subset of the subscriber data flow . In this example application sends the additional data to SP side enveloping proxy using the out of band interface . Thus the SP side enveloping proxy receives not only the regular SSL records but also additional data for transmission to the content provider network. Upon receiving the data over the out of band interface the SP side enveloping proxy encodes the data into custom SSL records. The service provider enveloping proxy forwards the regular SSL records and includes e.g. interleaves the custom SSL records in over the connection . Thus proxy uses data connection to transmit both the regular SSL records and the custom SSL records interleaved with one another to CP enveloping proxy via NAT . The NA P T receives the regular SSL record and custom SSL records and translates an address associated with the data flow. The NA P T transmits the regular SSL record and custom SSL records over connection via Internet to CP ide enveloping proxy . Upon receiving the regular SSL records and custom SSL records enveloping proxy identifies which records are the regular SSL records in which records are the custom SSL records. Upon identifying regular SSL records enveloping proxy forwards the regular SSL records to content server using data connection . Upon identifying custom SSL records enveloping proxy extracts the data from the custom SSL records. Enveloping proxy they transmit the data extracted from the custom SSL records to the content server over out of band interface . In this example data was sent from the client subscriber to the content server . As previously mentioned data can be sent in either direction. Other data may be generated and sent in a similar fashion in a direction from content server to client .

In this example an out of band interface is used to transmit data from a component within the service provider network to the service provider enveloping proxy . In addition an out of band interface is used to transmit the extracted data e.g. extracted from the custom SSL records from enveloping proxy to content server . In some embodiments the out of band interfaces may not be present. For example the service provider enveloping proxy may be responsible for identifying the meta data to be included within the custom SSL records and therefore does not require the out of band interface to receive the data . No matter how the data are accessed by an enveloping proxy the enveloping proxy injects the data into custom SSL records into a data flow for transmission with other SSL records.

As the data flow i.e. between client and content server passes through the NA P T the NA P T translates addresses associated with a data flow i.e. a source destination address a 5 tuple identifying the data flow . Because the NA P T translates the addresses identifying the data flow by the 5 tuple is challenging. Transmitting the data in band as disclosed herein addresses this challenge at least because it 1 does not rely on an address being passed between the entities and 2 is carried within the flow and therefore does not require independent identification using a 5 tuple. The systems and logic provided herein advantageously introduce additional custom SSL records to carry the meta data within an existing connection used to carry other regular SSL records. The systems and methods herein also enable e.g. an enveloping proxy to extract in band meta data from a stream of SSL records including regular and custom SSL records while forwarding the regular SSL records.

The content provider and the service provider define custom SSL record types and exchange meta data by embedding them into custom SSL records or inversely exchange meta data through an out of band channel and embed subscriber data . Enveloping proxies and proxy connections e.g. by terminating and reinitiating the Layer 4 L4 transport between client and content server . Each of enveloping proxies and may 1 inject custom SSL records e.g. at in and at in into one or more connections forming the subscriber session at one end and 2 strip the custom SSL records at and at in from the one or more connections at the other end. The custom SSL records may constitute a private communication channel between the enveloping proxies and . The data sent in the custom SSL records can 1 carry arbitrary data e.g. bits specifically the meta data as the case may be and 2 be encrypted e.g. using SSL separately from the subscriber encrypted SSL session. Accordingly the regular SSL records are provided from the client to the content server e.g. regular SSL records regular SSL records regular SSL records in regular SSL records . At service provider enveloping proxy encodes the meta data accessed from the SP network and opaque containers received from CP hosted application into custom SSL records. At the custom SSL records are piggy backed onto the regular SSL records by the service provider enveloping proxy . When the service provider enveloping proxy transmits the regular SSL records to the content provider enveloping proxy the proxy injects the custom SSL records into the transmission. Upon receiving the regular SSL records and custom SSL records the content provider enveloping proxy strips the custom SSL records from the connection and extracts the meta data and containers e.g. the opaque containers from the custom SSL records at . The regular SSL records are transmitted from the content provider enveloping proxy to the content server at . The data meta data and containers extracted from the custom SSL records is transmitted e.g. over an out of band interface from enveloping proxy to the content server at . It is noted that the custom SSL records that are inserted do not belong to the regular subscriber encrypted SSL session i.e. the regular SSL records established between the client and content server . In fact the custom SSL records may be transparently added and removed by the intermediate enveloping proxies e.g. each of proxies and without affecting the operations of the unmodified SSL client in this case client and the unmodified content server .

Similar data flow can occur from the content server to the client where the content provider can provide information signaling to the service provider. In the example of content server transmits meta data and opaque containers to content provider enveloping proxy using an out of band interface. The meta data and or opaque containers can include data for use in controlling within the service provider s network the data flow between client and content server . For example the meta data and or container may include service parameters for controlling a router in the servicer provider s network to increase a priority for packets in the data flow between the client and the content server . In such a case the packets may receive high priority in a queue of packets for routing by the router such that the packets are more likely to be transmitted relative to other packets in the queue. Thus client s service can be uplifted based on the meta data and or container. A similar process for downlifting the server may occur by reducing a priority of packets for the data flow. The content server may generate such a request instruction to uplift or downlift service based on meta data and or containers received at . For example the meta data and or containers received at may include a current service parameter. The request instruction can be to increase or decrease the service parameter. The content server also transmits regular SSL records in to content provider enveloping proxy using the SSL session. In general regular SSL records are provided from the content server to the client e.g. regular SSL records regular SSL records in regular SSL records and regular SSL records . At content provider enveloping proxy encodes into custom SSL records the meta data and opaque containers received from content server . To allow information e.g. meta data and opaque containers received from content server at to be passed from the content provider network to the service provider network custom SSL records are piggy backed onto the regular SSL records at . At the content provider enveloping proxy transmits the regular SSL records and the piggy backed custom SSL records to the service provider enveloping proxy . Upon receiving the regular SSL records and custom SSL records the service provider enveloping proxy strips the custom SSL records from the connection and extracts the meta data and containers e.g. the opaque containers from the custom SSL records at . The data containers extracted from the custom SSL records are transmitted over an out of band interface from service provider enveloping proxy to the content provider hosted application at . In this case the data may be used to control e.g. set modify variables activate functions and the like the content provider hosted application . In some cases the meta data and or containers include data for use in controlling within the service provider s network the data flow between the client and the content server . In such a case the enveloping proxy may transmit the meta data and or container to another network component for application to data flow between the client and the content server . For example the enveloping proxy may transmit the meta data and or container to a controller within the service provider s network a router or any other network component located within the service provider s network. In further cases the enveloping proxy may directly control the data flow e.g. based on service parameters in the meta data and or container. A priority for packets in the data flow between the client and the content server may be increased based on the meta data and or container. Thus the packets within the data flow may be transmitted e.g. by the another network component and or the enveloping proxy with a higher priority relative to other packets in a queue based on the meta data and or container or content therein . Thus client s service can be uplifted based on the meta data and or container. A similar process for downlifting the server may occur by reducing a priority of packets for the data flow. The regular SSL records are transmitted from the service provider enveloping proxy to the content provider hosted application at . Finally the regular SSL records are transmitted from the content provider hosted application to the client at . Again it is important to note that the special SSL records i.e. the custom SSL record inserted do not belong to the regular subscriber encrypted SSL session established between the end points. In fact such records may be transparently added and removed by the intermediate enveloping proxies e.g. each of proxies and without affecting the operations of the unmodified SSL client and the unmodified content server.

The enveloping proxy in the service provider network uses the information received to activate the appropriate services requested by the content provider or if needed send such information to the content provider hosted application e.g. by generating and transmitting REST messages . Note that data exchanged between content providers and content provider hosted applications in the service provider network are private the data are not to be understood by the service provider. For this reason such data can be carried in containers that are encrypted by the content provider and thus be opaque to the service providers. These opaque containers are shown as e.g. opaque containers out of band and opaque containers out of band . The content of the opaque containers can be used to control the content provider hosted application . Opaque containers can include application specific information that a content provider exchanges with a content provider hosted application e.g. hosted in a service provider s network . Examples can include session encryption keys sent by the content provider to allow the hosted application to modify the data in case of intermediate caches content optimizers etc. Another example of opaque containers can include subscriber policies that may influence the way the hosted application behaves.

Both the communication between the enveloping proxy in the service provider and the content provider hosted application and the communication between the enveloping proxy in the content provider and the actual content server may take place through an out of band channel such as a restful interface . Such out of band channels are possible since both ends of the communication are located on the same side of NA P T appliances and thus can use the 5 tuple to unequivocally identify data flows. Exemplary opaque communications over out of band channels are shown as opaque containers out of band meta data and opaque containers out of band meta data and opaque containers out of band and opaque containers out of band .

This system shows that the flow is augmented between the SP side enveloping proxy and the CP side enveloping proxy. In this example the service provider hosts an application for the content provider within its network. The hosted application transmits data in transparent containers to enveloping proxy located within the service provider network. The client and the content server have an SSL session for transmitting regular SSL records using intermediate devices . The intermediate devices relay the regular SSL records e.g. as described with respect of . In addition to relaying the regular SSL records enveloping proxy receives data e.g. meta data within transparent containers and transmits the data to CP side enveloping proxy using opaque containers. Opaque containers are data containers e.g. for a block of data such as a sequence of bits that are encrypted and thus the encrypted contents are opaque to i.e. cannot be read or understood by any system that does not have access to a decryption key e.g. a private key for the container. In other words any system that does not have access to the decryption key can access or see the data in encrypted form. The enveloping proxy augments the regular flow of SSL records by injecting custom SSL records into the data flow. The augmented flow contains meta data and opaque containers in addition to the regular SSL records. The augmented flow is transmitted from SP enveloping proxy to enveloping proxy via NA P T . Thus the augmented flow is transmitted from SP enveloping proxy to NA P T . NA P T may modify a network address for the data flow and transmits the augmented flow to CP enveloping proxy . Enveloping proxy extracts the meta data and the opaque containers from the augmented flow. The meta data and the data contained with the opaque containers are in turn transmitted from enveloping proxy to server over the out of band interface . The data contained with the opaque containers are transmitted using transparent containers. In this case the data remains transparent while in the respective networks however the data is sent between the enveloping proxies using opaque containers e.g. to reduce the likelihood of security breaches affecting the connection between the SP side enveloping proxy and the CP side enveloping proxy . This system shows that the flow is augmented between the Service Provider SP side enveloping proxy and the Content Provider CP side enveloping proxy. This augmented flow and carries the custom SSL records and thereby allows meta data to be transported easily in band along with an SSL session.

Within the context of the disclosure meta data being exchanged between the content provider network and the service provider network can include subscriber related information sent from the mobile service provider to the content provider e.g. subscriber charging attributes location identification etc. Meta data can include network related information related to the subscriber e.g. radio access type current QoS network congestion etc. Another type of meta data can include remote procedure requests and or replies e.g. a content provider can request the mobile network to uplift or downlift mobile subscriber QoS content provider can request specific information to be sent to the mobile service provider etc. Meta data may be transmitted within a container e.g. an opaque container and or a transparent container .

Opaque containers are data containers that are encrypted and thus the encrypted contents are opaque to i.e. cannot be read or understood by any system that does not have access to a decryption key e.g. a private key for the container. For example data exchanged between content providers and content provider hosted applications in the service provider network are private the data are not to be understood by the service provider. An opaque container which id encrypted may be transmitted within an existing encrypted session e.g. an encrypted record nested within another encrypted record . Opaque containers can include application specific information that the content provider exchanges with the content provider hosted application. Examples can include session encryption keys sent by the content provider to allow the hosted application to modify the data in case of intermediate caches content optimizers etc. Another example of opaque containers can include subscriber policies that may influence the way the hosted application behaves. Transparent containers are data containers that are not encrypted i.e. data sent in the clear such as cleartext and thus the encrypted contents are transparent to i.e. can be read or understood by any system without the need to access to a decryption key for the container. An opaque container may contain meta data.

A network used herein represents a series of points nodes or network elements of interconnected communication paths for receiving and transmitting packets of information that propagate through a communication system. A network offers communicative interface between sources and or hosts and may be any local area network LAN wireless local area network WLAN metropolitan area network MAN Intranet Extranet Internet WAN virtual private network VPN or any other appropriate architecture or system that facilitates communications in a network environment depending on the network topology. A network can comprise any number of hardware or software elements coupled to and in communication with each other through a communications medium.

In one particular instance the architecture of the present disclosure can be associated with a service provider deployment. In other examples the architecture of the present disclosure would be equally applicable to other communication environments such as an enterprise wide area network WAN deployment the architecture of the present disclosure may include a configuration capable of transmission control protocol internet protocol TCP IP communications for the transmission and or reception of packets in a network.

As used herein in this Specification the term network element is meant to encompass any of the aforementioned elements as well as servers physical or virtual end user devices routers switches cable boxes gateways bridges load balancers firewalls inline service nodes proxies processors modules or any other suitable device component element proprietary appliance or object operable to exchange receive and transmit information in a network environment. These network elements may include any suitable hardware software components modules interfaces or objects that facilitate the in band meta information exchange operations between mobile service provider and content provider. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information.

As used herein in this Specification the term client is inclusive of devices used to initiate a communication such as a computer a personal digital assistant PDA a laptop or electronic notebook a cellular telephone of any kind an iPhone an IP phone a Blackberry a Google Droid an iPad a tablet or any other device component element or object capable of initiating voice audio video media and or data exchanges.

In one implementation components e.g. clients service provider hosted application service provider enveloping proxy service provider enveloping proxy content server etc. described herein may include software to achieve or to foster the functions discussed herein for in band meta information exchange between mobile service provider and content provider where the software is executed on one or more processors to carry out the functions. This could include the implementation of instances of clients service provider hosted application service provider enveloping proxy service provider enveloping proxy content server and or any other suitable element that would foster the activities discussed herein. Additionally each of these elements can have an internal structure e.g. a processor a memory element etc. to facilitate some of the operations described herein. In other embodiments these functions for in band meta information exchange between mobile service provider and content provider may be executed externally to these elements or included in some other network element to achieve the intended functionality. Alternatively components may include software or reciprocating software that can coordinate with other network elements in order to achieve the in band meta information exchange between mobile service provider and content provider described herein. In still other embodiments one or several devices may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

In certain example implementations the in band meta information exchange mechanisms between mobile service provider and content provider outlined herein may be implemented by logic encoded in one or more non transitory tangible media e.g. embedded logic provided in an application specific integrated circuit ASIC digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by one or more processors or other similar machine etc. . In some of these instances one or more memory elements can store data used for the operations described herein. This includes the memory element being able to store instructions e.g. software code etc. that are executed to carry out the activities described in this Specification. The memory element is further configured to store databases meta data opaque containers etc. to in band meta information exchange between mobile service provider and content provider. The processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example the processor could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by the processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable ROM EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof.

Any of these elements e.g. the network elements etc. can include memory elements for storing information to be used in achieving in band meta information exchange between mobile service provider and content provider as outlined herein. Additionally each of these devices may include a processor that can execute software or an algorithm to perform the in band meta information exchange between mobile service provider and content provider as discussed in this Specification. These devices may further keep information in any suitable memory element random access memory RAM ROM EPROM EEPROM ASIC etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. Any of the memory items discussed herein should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. Each of the network elements can also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment.

Additionally it should be noted that with the examples provided above interaction may be described in terms of two three or four network elements. However this has been done for purposes of clarity and example only. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of network elements. It should be appreciated that the systems described herein are readily scalable and further can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad techniques of in band meta information exchange between mobile service provider and content provider as potentially applied to a myriad of other architectures.

It is also important to note that the steps in the illustrate only some of the possible scenarios that may be executed by or within the components e.g. clients service provider hosted application service provider enveloping proxy service provider enveloping proxy content server etc. described herein. Some of these steps may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the present disclosure. In addition a number of these operations have been described as being executed concurrently with or in parallel to one or more additional operations. However the timing of these operations may be altered considerably. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the components e.g. clients service provider hosted application service provider enveloping proxy service provider enveloping proxy content server etc. in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the present disclosure.

It should also be noted that many of the previous discussions may imply a single client server relationship. In reality there is a multitude of servers in the delivery tier in certain implementations of the present disclosure. Moreover the present disclosure can readily be extended to apply to intervening servers further upstream in the architecture though this is not necessarily correlated to the m clients that are passing through the n servers. Any such permutations scaling and configurations are clearly within the broad scope of the present disclosure.

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the present disclosure.

