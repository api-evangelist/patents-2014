---

title: Interfacing with a virtual database system
abstract: User interactions with a database storage system allow creation of virtual databases based on point-in-time copies associated with a source database. Multiple point-in-time copies are obtained for each source database. A point-in-time copy retrieves data changed in the source database since the retrieval of a previous point-in-time copy. A virtual database (VDB) is created by creating a set of files in the data storage system and mounting the files on a database server allowing the database server to access the files. User interactions allow the user to specify the source database, a point in time associated with the source database and a destination server to create the virtual database. User input can specify other attributes associated with the virtual database including the file paths, database parameters etc. The user can specify schedules of various actions, including making and retention of point-in-time copies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389962&OS=09389962&RS=09389962
owner: Delphix Corporation
number: 09389962
owner_city: Menlo Park
owner_country: US
publication_date: 20141217
---
This application is a continuation of U.S. patent application Ser. No. 13 894 259 filed on May 14 2013 which is a continuation of U.S. patent application Ser. No. 13 301 448 filed on Nov. 21 2011 which claims the benefit of U.S. Provisional Application No. 61 418 396 filed on Nov. 30 2010 each of which is incorporated by reference in its entirety.

This invention relates generally to databases and in particular to interfacing and interacting with storage efficient systems for managing databases.

Databases store the data that is critical to an organization and thus form an important part of an organization s information technology infrastructure. As the information available in an organization grows so does the complexity of the infrastructure required to manage the databases that store the information. The increased complexity of the infrastructure increases the resources required to manage the databases and the applications that depend on the databases. These increased costs may include the costs associated with hardware for managing the databases as well as the costs associated with additional personnel needed to maintain the hardware. The increased complexity of the infrastructure also affects the maintenance operations associated with the databases for example causing backup and recovery operations to take significantly longer.

In a typical organization s infrastructure environment production database servers run applications that manage the day to day transactions of the organization. Changes to production databases or to applications that depend on the production databases are tested on copies of the databases to protect the production environment. Copies of the production databases may be required for several stages in the lifecycles of workflows associated with the production database and applications that depend on the production databases. For example the stages in the lifecycle of a change incorporated in a production database may include a development stage a tuning stage a testing stage a quality assurance stage a certification stage a training stage and a staging stage. Making copies of the production databases for each stage requires redundant and expensive hardware infrastructure as well as the time overhead required to copy the data which may take days or weeks. Additional hardware also requires additional costs associated with physically storing the hardware such as floor space requirements and costs related to power and cooling. Furthermore redundant hardware typically causes inefficient use of available resources.

Since databases involve complex manipulations of data and information database products provide various mechanisms to allow users or database administrators to interact or interface with the database. For example users and database administrators can interact with the database using a user interface application programming interface commands scripts and the like. The mechanisms provided by databases for interfacing with the database can be complex since a large number of commands and options for commands are typically available for manipulating information in a database.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In certain embodiments of the invention one or more virtual databases are created based on the state of a production database or a virtual database at a particular point in time and the virtual databases can then be individually accessed and modified as desired. A database comprises data stored in a computer for use by computer implemented applications. A database server is a computer program that can interact with the database and provides database services for example access to the data stored in the database. The virtual database provides efficient storage of database blocks by efficiently sharing database blocks between virtual databases. A database block is a unit of data used by a database and comprises a specific number of bytes stored in the storage. A database block can also be referred to as a page. A portion of the database block stores metadata associated with the database block. Examples of information that may be stored in the metadata of a database block include information related to the data stored in the database block information related to objects of database that the database block is part of or information indicating when the data in the database block was updated. The information indicating when a database block was updated may be available as a relative ordering of the database blocks based on their time of update.

A database storage system interfaces with a user to receive information necessary for creating a virtual database. The database storage system uses default values as attributes of the virtual database being created to reduce the burden on the database administrator creating the virtual database. However the database administrator can chose to specify more or less information in order to customize the virtual database being created to suit a particular application or purpose.

Database servers include commercially available programs for example database servers included with database management systems provided by ORACLE SYBASE MICROSOFT SQL SERVER IBM s DB2 MYSQL and the like. The term production database is used in particular examples to illustrate a useful application of the technology however it can be appreciated that the techniques disclosed can be used for any database regardless of whether the database is used as a production database. The virtual databases are virtual in the sense that the physical implementation of the database files is decoupled from the logical use of the database files by a database server.

In one embodiment information from the production database is copied to a storage system at various times such as periodically. The schedule for copying the information from the production database can be either a default schedule selected by the system or specified by the database administrator. This enables reconstruction of the database files associated with the production database for these different points in time. The information may be managed in the storage system in an efficient manner so that copies of information are made only if necessary. For example if a portion of the database is unchanged from a version that was previously copied that unchanged portion need not be copied. A virtual database created for a point in time is stored as a set of files that contain the information of the database as available at that point in time. Each file includes a set of database blocks and the data structures for referring to the database blocks. In some embodiments the database blocks may be compressed in order to store them efficiently.

A virtual database may be created on a database server by creating the database files for the production database corresponding to the state of the production database at a previous point in time as required for the database server. The files corresponding to the virtual database are made available to the database server using a file sharing mechanism which links the virtual database to the appropriate database blocks stored on the storage system. The process of making the virtual database available to a database server is called provisioning the virtual database. In some embodiments provisioning the virtual database includes managing the process of creating a running database server based on virtual database. Multiple VDBs can be provisioned based on the state of the production database at the same point in time. On the other hand different VDBs can be based on different point in time state of the same production database or different production databases.

The database server on which a virtual database has been provisioned can then read from and write to the files stored on the storage system. A database block may be shared between different files each file associated with a different VDB. In particular a database block is shared if the corresponding virtual database systems are only reading the information in the database block and not writing to the database block. In one embodiment the virtual database manager makes copies of the database blocks only if necessary. For example a particular database block may be shared by multiple VDBs that read from the same database block. But if one of virtual database systems attempts to write to the database block a separate copy of the database block is made because the writing operation causes that database block to be different for the VDB corresponding to that virtual database systems than it is for the other VDBs. Systems and methods for creating and using virtual databases are disclosed in U.S. patent application Ser. No. 12 603 541 filed on Oct. 21 2009 which is incorporated by reference in its entirety.

In response to a request from the administrator system or based on a predefined schedule the database storage system may send a request for data to a production database system . The production database system responds by sending information stored in the production database as a stream of data . The request is sent periodically and the production database system responds by sending information representing changes of data stored in the production database since the last response sent by the production database system . The database storage system receives the data sent by the production database system and stores the data. The database storage system may analyze the data received to determine whether to store the information or skip the information if the information is not useful for reconstructing the database at previous time points. The database storage system stores the information efficiently for example by keeping versions of database blocks that have changed and reusing database blocks that have not changed. In an embodiment database storage system employs a hierarchical caching system where high speed solid state drive SSD or equivalent storage devices are configured for caching read operations and for persisting logs for writing operations to magnetic disks.

To create a virtual database the database storage system creates files that represent the information corresponding to the production database system at a given point in time. The database storage system exposes the corresponding files to a virtual database system using a file sharing system . The virtual database system runs a database server that can operate with the files exposed by the database storage system . Hence a virtual copy of the production database is created for the virtual database system for a given point in time in a storage efficient manner.

A production database system is typically used by an organization for maintaining its daily transactions. For example an online bookstore may save all the ongoing transactions related to book purchases book returns or inventory control in a production system . The production system includes a database server a production DB data store a vendor interface module and a production system library . In alternative configurations different and or additional modules can be included in a production database system .

The production DB data store stores data associated with a database that may represent for example information representing daily transactions of an enterprise. The database server is a computer program that provides database services and application programming interfaces APIs for managing data stored on the production DB data store . The production system library provides APIs useful for extracting information from the production database system . The vendor interface module represents APIs provided by a vendor for customizing functionality provided by the database server for example APIs to retrieve database blocks that changed since a previous time point. An example of a vendor interface module is the program code of a database server provided by vendor ORACLE that implements RMAN APIs. Database servers provided by other vendors for example MICROSOFT s SQL SERVER or IBM s DB2 have similar APIs. In one embodiment the vendor interface module mounts the production DB data store of the production database system on the database storage system using a file sharing system similar to the file sharing system . Mounting the production DB data store on the database storage system allows transfer of information stored on the production database system to the database storage system .

The production system library may be implemented in different ways depending on the requirements of the vendor interface module . In an embodiment the vendor interface module loads the production system library in order to call back functions implemented in the production system library . For example the production system library may be a shared object file with a .so or a .DLL file extension that contains executable program code that can be called by a C C executable program or by a JAVA program that uses the JAVA NATIVE INTERFACE for interaction with binary code generated by C C programs. Alternatively the production system library may be implemented using the JAVA programming language and installed in the production database system as a file with .jar extension. The java program requires a JAVA VIRTUAL MACHINE running on the production database system for execution. In another embodiment a part of the production system library may be implemented as an executable .so shared object file and another part of the production system library may be implemented as a JAVA program installed as a .jar file.

The vendor interface module responds to requests from database storage system and in response to the requests collects requested information from the production DB data store and returns the collected information to the database storage system . The vendor interface module may send request to the database server for retrieving information from the production DB data store . The vendor interface module loads the program code in the production system library and invokes it to transmit the stream of data for to the database storage system for further processing. In some embodiments the vendor interface module may directly interact with the production DB data store instead of sending a request to the database server to retrieve the necessary database blocks. In other embodiments the vendor interface module may retrieve the necessary database blocks from storage level snapshots of production databases or clones of production databases instead of a live production database.

The database storage system retrieves information available in the production database systems and stores it. The information retrieved includes database blocks comprising data stored in the database transaction log information metadata information related to the database information related to users of the database and the like. The information retrieved may also include configuration files associated with the databases. For example databases may use vendor specific configuration files to specify various configuration parameters including initialization parameters associated with the databases. Copying the configuration files allows a VDB to be created with configuration parameters similar to the source production database. In some embodiments the configuration parameters files may be modified by a database administrator using the user interface to customize the VDB configuration for a specific usage scenario. For example the production database may be accessed by a database server using a particular cache size whereas the corresponding VDB may be accessed by a database server using a different cache size.

The information retrieved may also include information associated with applications using the database for example an enterprise resource planning ERP application may be using the database and may have data specific to the ERP application. Retrieving the ERP application data allows a similar ERP application to be executed with a VDB created based on the production database system. This is beneficial for usage scenarios where a VDB is created for an environment similar to the production environment for example for testing and development. A database administrator can use the user interface to specify logic for copying the information that is specific to a production environment as well as logic for appropriately installing the information with a VDB for use by a virtual database system .

In some embodiments information regarding users of the production database for example the users with administrative privileges may be obtained by using specific APIs or by running specific scripts on the production database. The information about the users can be used to facilitate life cycle management of VDBs in the system. In an embodiment a database administrator is allowed to use the user interface in order to specify information regarding user accounts to be created and their access permissions. For example if the VDB is created for testing purposes test users may be created on the VDB for test organization whereas if the VDB is created as a standby for the production database only users with production support roles should have access. In some embodiments access permission may specify if a user can provision a privileged VDB. One example of privileged VDB is a VDB with full access to non public information information that may not be accessible to non privileged users for example social security numbers or credit card information. The corresponding un privileged VDB is a VDB with non public information masked or scrambled. Another example of privileged VDB is a VDB with sensitive data accessible transparently. The corresponding un privileged VDB is a VDB with sensitive information encrypted.

In some embodiments access privileges are simplified to three levels administrator owner and auditor. Administrator has full control of all managed objects including databases and hosts. The control available to an administrator included policy management. Owner has access to use of resources for example an owner can provision a VDB. Auditor can view logs but may not have rights to consume system resources.

The data stored in the storage system data store can be exposed to a virtual database system allowing the virtual database system to treat the data as a copy of the production database stored in the production database system . The database storage system includes a point in time copy manager a transaction log manager a interface manager a system configuration manager a storage allocation manager a file sharing manager a virtual database manager and a storage system data store . In alternative configurations different and or additional modules can be included in the database storage system .

The point in time copy manager interacts with the production database system by sending a request to the vendor interface module to retrieve information representing a point in time copy also referred to as a PIT copy of a database stored in the production DB data store . The point in time copy manager stores the data obtained from the production database system in the storage system data store . The data retrieved by the point in time copy manager corresponds to database blocks or pages of the database being copied from the production DB data store . After a first PIT copy request to retrieve information production DB data store a subsequent PIT copy request may need to retrieve only the data that changed in the database since the previous request. The data collected in the first request can be combined with the data collected in a second request to reconstruct a copy of the database corresponding to a point in time at which the data was retrieved from the production DB data store for the second request.

The transaction log manager sends request to the production database system for retrieving portions of the transaction logs stored in the production database system . In some embodiments the request from the transaction log manager is sent to the vendor interface module . The data obtained by the transaction log manager from the vendor interface module is stored in the storage system data store . In one embodiment a request for transaction logs retrieves only the changes in the transaction logs in the production database system since a previous request for the transaction logs was processed. The database blocks retrieved by a point in time copy manager combined with the transaction logs retrieved by the transaction log manager can be used to reconstruct a copy of a database in the production system corresponding to times in the past in between the times as which point in time copies are made.

The storage allocation manager provides the functionality of saving data retrieved from the production database system . For example the point in time copy manager may call APIs of storage allocation manager to save blocks of data retrieved from the production database system . The storage allocation manager keeps track of the various versions of each block of data that may be obtained from the production database system . For a given time point the storage allocation manager can be requested to provide the latest version of a block of data obtained before the given time point. The storage allocation manager can also be used for making copies of blocks of data. If a block of data is copied for read only purposes the storage allocation manager allocates only sufficient storage to keep a pointer of reference to the exiting block of data. However if an attempt to write to the copied block of data is made the storage allocation manager allocates sufficient storage to make an actual copy of the block of data to avoid updating the original block of data.

The file sharing manager allows files stored in the storage system data store to be shared across computers that may be connected with the database storage system over the network. The file sharing manager uses the file sharing system for sharing files. An example of a system for sharing files is a network file system NFS . A system for sharing files may utilize fiber channel Storage area networks FC SAN or network attached storage NAS or combinations and variations thereof. The system for sharing files may be based on small computer system interface SCSI protocol internet small computer system interface iSCSI protocol fiber channel protocols or other similar and related protocols. In some embodiments the database storage system may utilize a logical volume manager. Sharing a file stored in the storage system data store using the file sharing manager allows a remote computer for example the virtual database systems to access the data in the shared file. A remote system may be able to read and write from to the file shared by the storage system data store . In an embodiment files are organized in a format emulating a given file system disk layout such as the file system of WINDOWS operating system called NTFS or the UNIX file system UFS .

The virtual database manager receives requests for creation of a virtual database for a virtual database system . The request for creation of a virtual database may be sent by a database administrator using the administration system and identifies a production database system a virtual database system and includes a past point in time corresponding to which a virtual database needs to be created. The virtual database manager creates the necessary files corresponding to the virtual database being created and shares the files with the virtual database system . The database administrator for a virtual database system may be different from a database administrator for the production database system .

The interface manager renders for display information necessary for display using the administration system . A database administrator user can see information available in the storage system data store as well as take actions executed by the database storage system. For example a database administrator can see the different production databases stored in the storage system data store obtained from different production database systems . As another example the database administrator can request the database storage system to make a PIT copy of a database stored on a production database system at a particular point in time. In an embodiment the interface manager allows external applications to access information of the database storage system . For example the database storage system may provide application programming interface API to allow third party vendors to write applications based on database storage system . In an embodiment the interface manager provides web services that allow web applications to access information available in the database storage system . For example the database storage system can be part of a cloud computing environment. A third party vendor can use web services to implement various workflow scenarios based on VDBs for example the various workflow scenarios described herein. This allows automation of the workflow scenarios based on VDBs.

The system configuration manager allows a database administrator using the administration system to setup or change the configuration of the database storage system . For example when the database storage system is being initially setup or at a later stage the system configuration manager allows a database administrator user or an agent to specify production database systems and virtual database systems to connect to. The system configuration manager also allows a user with appropriate roles and privileges to setup policies specifying the schedule with which the point in time copy manager retrieves PIT copies of databases in the production database systems as well as the frequency and the times at which the transaction log manager retrieves updates to online transaction logs from the production database systems . In an embodiment a schedule can specify the frequency and times during the day for the PIT and log retrieval actions or it could be an a periodic schedule specifying the calendar days when the same action should take place.

In an embodiment policies can be defined by a database administrator and stored in the system configuration manager for various operations associated with the loading of point in time copies from production database systems loading of transaction logs from the production database systems purging of information from the database storage system including point in time copies of databases and transaction log information and provisioning of virtual database systems. A policy specifies rules for executing the specific operation. For example a policy may specify the operation to be executed based on a predetermined schedule. A policy may determine when to purge PIT copies stored in the database storage system based on number of PIT copies that have been accumulated for a production database. A policy may measure storage availability to determine when to purge information. For example if the amount of storage available reaches below a threshold level old PIT copies of selected databases may be purged. The policy may also specify priority of production databases to be used before purging information for example low priority database information is purged before purging high priority database information. In a particular workflow scenario a policy may determine when to obtain new information from a production database and automatically update VDB information and provision the updated VDB based on the new information.

A virtual database system includes a database server and a VDB system library . The database server is similar in functionality to the database server and is a computer program that provides database services and application programming interfaces APIs for managing data stored on a data store . The data managed by the database server may be stored on the storage system data store that is shared by the database storage system using a file sharing system . The VDB system library contains program code for processing requests sent by the database storage system . In alternative configurations different and or additional modules can be included in a virtual database system .

The user interface can provide a list of source databases to select from. The user can select a particular source database and send the selection to the database storage system . The database storage system receives the selection of the source database. The source databases presented to the user for selection comprise source databases for which the database storage system has stored point in time copies and transaction logs. In an embodiment the user provides input identifying a server machine hosting one or more databases. The database storage system analyzes the server machine to determine the databases hosted by the server machine and presents the discovered databases as potential source databases to select from. The discovery of the databases can be based on discovery of names of files or file paths that are typically used by production database system as well as by discovery of processes running on the server machine that are typically present in production database systems .

The user interface allows the user to select a point in time value. The database storage system receives the selection of the point in time value. In an embodiment the user interface presents a time line to the user indicating a range of point in time values to select from allowing the user to select a point in time value by identifying a position in the time line. The database storage system uses the point in time value for determining the database blocks of the source database stored in the storage system data store to be used for creating the VDB.

The user interface allows the user to select a destination database system for accessing the VDB being created. The database storage system receives the selection of the destination database system from the user. In an embodiment the user interface presents a list of previously selected destination database systems to the user. Alternatively the user interface allows the user to enter information identifying the destination database systems for example using a machine name or internet protocol IP address.

The user interface presents to the user the parameters of the source database selected by the user. The database storage system by default may use values from the parameters of the source database as the corresponding parameters for the VDB being created. Alternatively the user can modify the parameter values presented by the user interface . The modifications of the parameters are received by the database storage system . The database storage system uses the set of parameters including the unmodified values as well as the modified values as the parameters for the VDB being created. In an embodiment the database storage system stores the set of parameters values as modified by the user and uses them as the default for subsequent VDBs created by the user for example VDBs created using the same source database.

The user interface presents to the user the file paths where the database storage system expects to create the files associated with the VDB. The user can modify the file paths as well as the file names. For example certain applications using the VDB may require a special file naming convention or the files to be stored at a particular file path. The database storage system received the modifications to the file path. In an embodiment the user interface allows the user to map patterns in the default file path to patterns associated with a desired file path. The mapping of the patterns can be stored by the database storage system and applied to subsequent VDBs created by the user.

Based on the input received by the database storage system in the steps described above the database storage system creates the VDB. The created VDB is based on a snapshot and transaction logs associated with the point in time value selected by the user. The database blocks of the source database associated with updates made in the source database prior to the selected point in time are linked to a file structure created for the VDB. The file structure for the VDB is mounted on the destination database system thereby allowing the destination database system to access the VDB.

In an embodiment the steps illustrated in the may be performed by a user or by a script or a program. A user interface may be provided to a user for allowing the user to provide input and execute one or more steps shown in . Alternatively a script may perform the various steps using commands provided by the database storage system or an application may invoke application programming interface APIs provided by the database storage system to execute the steps illustrated in . Some of the steps illustrated in the may be optional and the database storage system may use default values instead of user provided values.

In response to the user selecting a particular source database the user interface provides information describing the source database including its status size name etc. as well as information describing the various point in time copies stored on the database storage system . The information describing each point in time copy comprises the time at which the point in time copy was made the source database from which the point in time copy was made and information describing the source database as well as the production database system hosting the source database. The source database can be a virtual database associated with the data source.

The user interface shown in allows the user to provision a new virtual database based on a selected source database or to export a physical copy of the selected source database. For example if the source database is a virtual database a physical copy of the database is materialized and stored on a target machine. The user interface shown in allows a user to select the target machine associated with the virtual database or the physical copy of the database. The target machine can be a virtual database system for accessing the virtual database being created.

The user interface shown in allows a user to organize the databases created using groups . The attributes of all the databases can be controlled as a group. For example policies can be specified for the entire group including policies defining a schedule for making point in time copies of the source database and policies defining retention schedule for point in time copies. An attribute specified for the group is applied by the database storage system to all the databases in the group unless the user specifically modifies attributes for a specific database.

The user interface allowing the user to select a time point in between the time of copying of two point in time copies can be a time line marked with various time points that can be selected. The user may be provided a slider for allowing the selection of a particular time point on the time line . Alternatively the user interface can provide the user with any geometric shape that can be used for representing various time points for example a curved line or a thin rectangle or ellipse. The user can select a particular time point by using a slider or by clicking or double clicking at a particular position in the geometric shape. In an embodiment the user can be presented with a list of various time points based on textual representation for example a drop down list and the user can make a particular selection. Another embodiment allows the user to enter a time value using a data entry widget for example text box. The value entered by the user can be validated by the interface manager for example to ensure that the value is within a valid range.

The arrow shown in represents the step of creating the files representing a read write copy of a database based on the information as performed by the virtual database manager . The arrows represent the step of making the files available to the virtual database system via the file sharing system .

The user interface shown in allows the user to specify a database name or identifier value for uniquely identifying the virtual database being created. The user can specify scripts comprising instructions to be executed before creating the virtual database and or scripts comprising instructions to be executed after creating the virtual database. The user can also specify file paths or names for the files used in the file structure created for the virtual database. For example certain database applications require a specific type of file structure for the database. The required file structure can be obtained by the user by specifying the file paths and or names of the files created for the virtual database.

A VDB may be created using a point in time copy of another VDB as a source. For example assume VDB is created and provisioned to a virtual database system . Database blocks associated with the VDB are copied when the virtual database system writes to the database blocks for the first time. Point in time copies of VDB are also made based on a predefined schedule. This allows a user to create a second virtual database VDB based on a point in time copy of VDB. Transaction logs of VDB are also stored allowing a user to create the second virtual database VDB based on any previous state of VDB that may be in between point in time copies of VDB.

The virtual database system is allowed to read from the file structures created for a VDB as well as write to them. When the virtual database system writes to a block Vij space is allocated for the database block and the data of the corresponding database block copied to the space allocated. For example if the virtual database system writes to the block V space is allocated and block F copied to the allocated block. Hence the original copy of the block F is maintained as a read only copy and the virtual database system is allowed to write to a copy of the appropriate database block created specifically for the virtual database system . This can be considered a lazy mechanism for creating copies of the database blocks that copies a database blocks only if the corresponding virtual database system writes to the database block. Since the number of blocks that a virtual database system writes to may be a small fraction of the total number of blocks associated with the VDB the above structure stores the data associated with the VDB in a highly storage efficient manner. A database block that is not written to by virtual database systems may be shared by several virtual database systems without being copied for a specific virtual database systems .

A user can specify policies for scheduling the operation of the initial copy of a source database to the database storage system . The initial copy of the database can take significant amount of time depending on the size of the source database. For example for large source databases the initial database copy can take several hours. The user can specify policies defining when the initial copy operation is performed. For example the user can specify intervals of time when the work load on the database storage system is low thereby allowing the database storage system to devote more resources to the database copy operation and avoid affecting a large number of other operations during the process of copying.

A user can specify policies describing a schedule for making point in time copies of source databases. The source databases can include productions databases and virtual databases. The policies may be specified for a group of source databases. A policy specified for a group of source databases is applicable to each source databases unless overwritten by a policy for a specific source database in the group. Since a point in time copy takes significantly less time compared to an initial copy of the source databases the point in time copy can be performed in one continuous time interval. Accordingly the schedule for making point in time copies specifies a frequency at which the point in time copies are made.

The following equation provides a quantitative measure of storage savings obtained by utilizing a set S of virtual databases.

The metric is called vdbRatio VDB ratio and is obtained by taking the ratio of size of storage of unvirtualized database databases stored using conventional techniques and the size of storage of virtual databases. The variable dbrepresents size of storage of an unvirtualized database. The symbol

The following equation provides a quantitative measure of storage savings provided by the information stored in the database storage system based on the mechanisms described herein for example as a result of reusing database blocks across point in time copies of source databases.

Other variations of the metric indicated in equations 1 and 2 can be used for example the inverse of the ration can be used or the two values corresponding to the numerator and denominator presented separately. illustrates how the VDB ratio and the time flow ratio can be presented to a user in graphical form. As shown in geometric shapes represent the numerator and the denominator values such that the size of the geometric shape corresponds to the value represented. As shown in the geometric shapes are rectangular but could be other shapes for example circular or elliptical.

The machine may be a server computer a client computer a personal computer PC a tablet PC a set top box STB a personal digital assistant PDA a cellular telephone a smartphone a web appliance a network router switch or bridge or any machine capable of executing instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU a digital signal processor DSP one or more application specific integrated circuits ASICs one or more radio frequency integrated circuits RFICs or any combination of these a main memory and a static memory which are configured to communicate with each other via a bus . The computer system may further include graphics display unit e.g. a plasma display panel PDP a liquid crystal display LCD a projector or a cathode ray tube CRT . The computer system may also include alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a trackball a joystick a motion sensor or other pointing instrument a storage unit a signal generation device e.g. a speaker and a network interface device which also are configured to communicate via the bus .

The storage unit includes a machine readable medium on which is stored instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions e.g. software may also reside completely or at least partially within the main memory or within the processor e.g. within a processor s cache memory during execution thereof by the computer system the main memory and the processor also constituting machine readable media. The instructions e.g. software may be transmitted or received over a network via the network interface device .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions e.g. instructions . The term machine readable medium shall also be taken to include any medium that is capable of storing instructions e.g. instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine readable medium includes but not be limited to data repositories in the form of solid state memories optical media and magnetic media.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium or any type of media suitable for storing electronic instructions and coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

