---

title: Method for simulation of partial VLSI ASIC design
abstract: A system and method for an automated way of running spice on a small portion of a design is presented. The system includes a sub-circuit netlist generation processor and an analog simulation processor. The sub-circuit netlist generation processor generates a sub-circuit netlist based, at least in part, on a HDL netlist, a parasitic capacitance database and trace rules. The sub-circuit netlist contains significantly fewer paths than the HDL netlist of an entire design so that its simulation time is much quicker. The analog simulation processor generates analog simulation results of the sub-circuit netlist based, at least in part, on dynamic inputs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183332&OS=09183332&RS=09183332
owner: BAE Systems Information and Electronic Systems Integration Inc.
number: 09183332
owner_city: Nashua
owner_country: US
publication_date: 20140411
---
This application claims priority from U.S. Provisional Application Ser. No. 61 815 511 filed Apr. 24 2013 the disclosure of which is incorporated herein by reference.

The invention was made with United States Government support under Contract No. 03 C 0216 awarded by a classified government agency. The United States Government has certain rights in this invention.

The current invention relates generally to apparatus systems and methods for simulating electrical circuits. More particularly the apparatus systems and methods relate to simulating a portion of a circuit design. Specifically the apparatus systems and methods provide for simulation of a critical portion of a VLSI design to be fabricated in silicon as well as post silicon hardware debugging.

Large circuit designs such as those fabricated into an application specific integrated semiconductor ASIC can have millions of transistors and other electrical components that need to be tested. In order to produce a functioning chip both the logic and the hardware need to be tested. Wire routes in the ASIC create inductance and capacitance that can affect voltages on components near them. Once these inductances and capacitances are known simulation tools can create analog simulations of every component on the ASIC so that it can be more accurately tested.

Parasitic extraction is the calculation of the parasitic effects in both the electronic device and the required wiring interconnects between those devices. Parasitic values that need to be known are the geometries of electronic devices and wiring parasitic capacitances parasitic resistances and parasitic inductances. These types of values and parameters are often simply referred to as parasitics.

The major purpose of parasitic extraction is to create an accurate analog model of the circuit so that detailed simulations can emulate actual digital and analog circuit responses. Digital circuit responses are often used to populate databases for signal delay and loading calculations such as timing analysis circuit simulation and signal integrity analysis. Analog circuits are often run in detailed test benches to indicate if the extra extracted parasitics will still allow the designed circuit to function.

Interconnect capacitance is calculated by giving the extraction tool the following information the top view layout of the design in the form of input polygons on a set of layers a mapping to a set of devices and pins from a Layout Versus Schematic run and a cross sectional understanding of these layers. This information is used to create a set of layout wires that have added capacitors where the input polygons and cross sectional structure indicate a capacitor is needed. The output netlist contains the same set of input nets as the input design netlist and adds parasitic capacitor devices between these nets.

Interconnect resistance is calculated by giving the extraction tool the following information the top view layout of the design in the form of input polygons on a set of layers a mapping to a set of devices and pins and a cross sectional understanding of these layers including the resistivity of the layers. This information is used to create a set of layout sub wires that have added resistance between various sub parts of the wires. The above interconnect capacitance is divided and shared amongst the sub nodes in a proportional way. Note that unlike interconnect capacitance Interconnect resistance needs to add sub nodes between the circuit elements to place these parasitic resistors. This can greatly increase the size of the extracted output netlist and can cause additional simulation problems. What is needed is a better way of simulating large circuit designs

One aspect of an embodiment of the invention includes a system and method for an automated way of running an analog simulation on a small portion of a design. A system includes a sub circuit netlist generation processor and an analog simulation processor. The sub circuit netlist generation processor generates a sub circuit netlist based at least in part on an HDL netlist a parasitic capacitance database and trace rules. The sub circuit netlist contains many fewer paths that the HDL netlist of an entire design. The analog simulation processor generates analog simulation results of the sub circuit netlist based at least in part on dynamic inputs.

Another embodiment provides for a sub circuit simulation system. The system includes trace rules a hardware descriptive language HDL tracer an HDL to spice conversion processor and a spice simulation processer. The trace rules describe a sub circuit of a larger circuit design. The HDL tracer generates a partial sub circuit netlist based at least in part on the trace rules. The HDL to spice conversion processor uses the sub circuit netlist and parasitics of cells used in the sub circuit netlist to create a sub circuit spice netlist including parasitics of cells used in the sub circuit netlist. The spice simulation processer generates sub circuit SPICE simulation results of the sub circuit spice netlist.

Another aspect of the invention is a method of simulating a sub circuit. The method begins by generating from a full netlist of a full design a partial sub circuit netlist. The generating the partial sub circuit netlist is based at least in part on a set of trace rules that specify one or more of the group of starting points and ending points. A partial spice netlist is generated from the partial sub circuit netlist. This is performed as discussed later. The spice netlist is simulated to generate analog output data. The netlist may be simulated using SPICE analog simulation tool.

For this particular invention it is helpful to understand a bit more about how large circuits such as microprocessors ASICs and the like are currently designed before introducing the preferred embodiment of a system and method for the improvement in designing large circuits. Currently a sub circuit representing a portion of a larger design containing thousands millions or even more transistors and other electrical components is manually constructed by a design engineer. Building this sub portion of a much larger circuit requires the designer to manually build it by selecting components from a software toolbox of components that include different types of transistors capacitors resistors and the like. Through graphical user interfaces GUIs the designer then manually places these components of this sub circuit into place in a computer file representing the sub circuit. Wires or different metal layers also need to be manually placed to properly connect all of these components. For accurate simulation the designer also needs to specify wire lengths and widths so that the simulator can determine accurate parasitics.

Depending on the type of design the designer may need to add other parasitics and or constraints to the sub circuit to be sure it is accurately simulated. Once this tedious process is completed this sub circuit is then simulated in the analog domain using a simulator such as Simulation Program with Integrated Circuit Emphasis SPICE . The method described above is a very slow and complex effort with significant manual interpretation and construction of the sub circuit. This can lead to inaccurate simulation results and prolonged debug activities.

The preferred embodiment illustrated in provides for a sub circuit simulation system which allows for the creation and simulation of only a small sub circuit portion of a full VLSI ASIC or other circuit design that is constructed quickly and that nearly matches hardware. This provides several improvements over prior art systems. The sub circuit simulation system of reduces interpretation error introduced by the design engineer attempting to replicate the hardware in question in a software modeled sub circuit. This sub circuit simulation system also improves the accuracy of the analog simulation by using a very close electronic representation of the design components input to all pieces of the simulation. This system aids in the debug or design of VLSI ASIC products by extracting the critical path sub circuits of design logic and accurately simulates them with an analog simulator with full parasitic characterization.

The system includes four input files the parasitic and characterization database the trace rules the hardware descriptive language HDL netlist with parasitics and the dynamic input files . The system further includes a sub circuit analog netlist generation processor that creates a sub circuit netlist and an analog simulation processor that produces the results files . The sub circuit netlist generation processor and an analog simulation processor can be implemented in a variety of ways including using hardware logic and or software logic.

 Logic as used herein includes but is not limited to hardware firmware software and or combinations of each to perform a function s or an action s and or to cause a function or action from another logic method and or system. For example based on a desired application or needs logic may include a processor such as a software controlled microprocessor discrete logic an application specific integrated circuit ASIC a programmed logic device a memory device containing instructions or the like. Logic may include one or more gates combinations of gates or other circuit components. Logic may also be fully embodied as software. Where multiple logics are described it may be possible to incorporate the multiple logics into one physical logic. Similarly where a single logic is described it may be possible to distribute that single logic between multiple physical logics.

Having introduced the components of the system their use and functionality will now be described. In general the parasitic and characterization database include all the parasitics needed to characterize a cell representing a NAND gate NOR gate latch flip flop and the like. This database also includes timing and logic function data for the gates e.g. cells as well as directional data such as specifying inputs and outputs I O of each cell. The parasitic information of this database is generally determined when a processes for manufacturing these gates is developed and is not generally changed by the designer using them. However the designer would specify the trace rules and then create the HDL of the design.

The designer would create an HDL netlist that is modeled in the HDL netlist with parasitics file . The parasitics of this file are generally automatically generated from the HDL netlist after it is created and it contains information on how gates are generally placed along with coupling information for connections between gates cells.

The trace rules file is a novel concept of this system . Unlike prior art systems where the designer had to manually create SPICE models that were separate from the overall design the trace rules file allows the designer to set rules that instruct the sub circuit netlist generation processor discussed later how to build a netlist containing just sub circuits e.g. critical paths of special interest rather than creating an analog netlist that includes the entire design.

The trace rules can include any rule that tells the sub circuit netlist generation processor what gates to include in the sub circuit analog netlist . For example a first trace rule can specify a path that is to be simulated from an I O pin to a first latch or a first flip flop and then to stop. A second rule can specify to create path between to latches but not beyond those two latches. A third trace rule can specify to start at a particular gate and to create netlist through 5 levels of logic from that gate and then to stop. Another trace rule can specify to only create a netlist of one input of a NAND gate. Another rule specifies to start at a certain point and if a certain type of gate is reached then to end this portion of the netlist.

In a bit more detail an example implementation of the trace rules are now examined. The trace rules are defined in two files. The first dictates where the trace begins these are instance names from the design. The second dictates where the trace stops this is the more complex file as it can contain both instance names and book types. The example listed below emulates a clock tree trace. The symbols indicates a comment the example trace rules 

This file is simply a list of instance names. A trace will be triggered from each specified instance and the final trace output will be combined.

For this example a forward trace is taking place from the pin SYSCLK to all registers in the design. The trace is started with the io pin sysclk definition in the instance start file. The trace is then immediately limited to the RCVR OUT port of the IO book by the first trace rule. The trace algorithm will then follow the path forward from RCVR OUT. In this example the SYSCLK I O book is connected to the PLL directly which will trigger the last trace rule where only the CLK OUT port from the PLL instance will be traced forward. From this point the trace algorithm fans out the clock tree tracing all output ports of all encountered instances until the trace algorithm finds a register instance as defined in the second trace rule. If an instance is encountered that doesn t match a rule all outputs are traced. For example there is typically a tree of clock buffers or clock inverters that balance arrival times of the clock to all registers. Since these buffers and inverters do not have trace rules the trace algorithm will then trace all outputs automatically and will only stop once the trace algorithm reached an instance of type reg .

Additionally the trace can either be done in a forward mode or reverse mode. The clock tree example would be in a forward mode where the trace algorithm follows the outputs of each instance the trace algorithm comes across. In reverse mode the trace algorithm traces all inputs of each instance the trace algorithm comes across. An example is tracing the logic between two registers and then following the clock tree from each register back to a common node. The trace starts at the capture register and traces the data inputs to the source registers. Then clock ports are added to each register trace rule so the clock tree will trace to a common node which would be defined with a stop trace rule. When a simulation is later performed with a single clock source the simulation results can determine how clock skew affects the behavior of the circuit.

By default when tracing in a reverse direction all loads are not always captured in the trace output. When tracing in an accurate loading mode once the trace algorithm has completed and determined the desired cone of logic the trace algorithm traces every instance one level of logic forward. This then captures all loading nodes of each desired signal.

The sub circuit netlist generation processor uses all of the specified trace information to create a sub circuit analog netlist that only includes the paths of interest not the paths for the entire design. As discussed below with reference to the sub circuit netlist generation processor may create the sub circuit analog netlist in two steps. First the sub circuit netlist generation processor can use an HDL netlist tracer to create a partial HDL netlist that just contains the circuits of interest. Secondly the sub circuit generation netlist generation processor will combine this partial HDL netlist with parasitic information to create the partial analog netlist that just contains the circuits of interest.

The analog simulation processor creates an analog simulation using the sub circuit analog netlist and the dynamic inputs and creates a results files . The analog simulation processor can be running a version of SPICE to create the analog result files . The results are then reviewed by the design engineer to see of the sub circuits of interest are performing as desired.

In Summary the design engineer essentially only needs to create the trace rules file in order to generate an analog simulation of a sub circuit as specific by the trace rules . This sub circuit simulation system has proven to be very useful to quickly design clock trees and other circuits where analog simulation is needed before and sometimes after the final product is produced. This saves both time and money and reduces the chance for errors because now the designer does not have to create his own hand crafted separate sub circuit for analog simulation. This sub circuit is now automatically created by the sub circuit simulation system for the design engineer so that there is no way for the designer to inject errors into his own sub circuit that is independent of the overall designed project. Running analog simulation on just the sub circuit of interest saves time because often this sub circuit is a very small fraction of the total design. Large designs can run for days and a smaller sub circuit may only require minutes of netlist creation time and simulation time.

The file of trace rules contains trace rules similar to the trace rules discussed above that instruct the system for simulation of a sub circuit to only construct sub circuits of interest so that only a fraction of the entire design is simulated. The parasitic extraction database of the physical design database contains parasitics of routing between cells. The HDL netlist tracer of the system for simulation of a sub circuit utilizes a VTracer tool but it can also be another type of HDL netlist tracers. The HDL netlist to spice conversion processor is a vd2spice.pl tool but in other embodiments it can be other converters as understood by those of ordinary skill in this art.

Having described the components of the system for simulation of a sub circuit of its use and operation is now described. The process of creating a spice simulation of a sub circuit that may be a tiny fraction of an overall circuit design begins when a design engineer enters trace rules into the file of trace rules as discussed above. These trace rules along with the characteristic database and the entire HDL netlist are input the HDL netlist tracer . The HDL netlist tracer generates a partial HDL netlist that just contains the circuit paths specified by the trace rules . In one configuration of the preferred embodiment the partial HDL netlist is in custom HDL format but in other configurations it can be any other HDL format.

The partial HDL netlist is input to the HDL netlist to spice conversion processer . The HDL netlist to spice conversion processer uses this netlist and the parasitic extract database of the ASIC development library to generate the partial spice netlist that represents just the portion of the design specified by the trace rules . The partial spice netlist includes full sub circuit parasitic information. The gate level functional simulation processor uses the HDL netlist to generate static spice stimulus values that are placed on unused inputs and other lines that are not used by the sub circuit.

Using the spice netlist static spice stimulus and the dynamic spice stimulus the spice simulation processor runs a SPICE simulation of just the small sub circuit portion of entire design and outputs simulation results that can then be analyzed by the design engineer. The parasitic extraction database can in other configurations also be input to the spice simulation processor to more accurately model parasitics.

Example methods may be better appreciated with reference to flow diagrams. While for purposes of simplicity of explanation the illustrated methodologies are shown and described as a series of blocks it is to be appreciated that the methodologies are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be required to implement an example methodology. Blocks may be combined or separated into multiple components. Furthermore additional and or alternative methodologies can employ additional not illustrated blocks.

In the foregoing description certain terms have been used for brevity clearness and understanding. No unnecessary limitations are to be implied therefrom beyond the requirement of the prior art because such terms are used for descriptive purposes and are intended to be broadly construed. Therefore the invention is not limited to the specific details the representative embodiments and illustrative examples shown and described. Thus this application is intended to embrace alterations modifications and variations that fall within the scope of the appended claims.

Moreover the description and illustration of the invention is an example and the invention is not limited to the exact details shown or described. References to the preferred embodiment an embodiment one example an example and so on indicate that the embodiment s or example s so described may include a particular feature structure characteristic property element or limitation but that not every embodiment or example necessarily includes that particular feature structure characteristic property element or limitation. Furthermore repeated use of the phrase in the preferred embodiment does not necessarily refer to the same embodiment though it may.

