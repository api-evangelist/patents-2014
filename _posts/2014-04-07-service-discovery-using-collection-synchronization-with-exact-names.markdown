---

title: Service discovery using collection synchronization with exact names
abstract: One embodiment provides a system that facilitates service discovery based on the synchronization of manifests between devices in a content centric network by using a synchronization protocol based on exact match names. During operation, a local receives an advertisement corresponding to a remote manifest of a remote device. A manifest represents a collection of service records, and the advertisement includes a service record corresponding to the remote device. The local device updates its local manifest, in response to determining that the local manifest and the remote manifest correspond to a same namespace, by inserting the advertised service record into the local manifest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09473576&OS=09473576&RS=09473576
owner: PALO ALTO RESEARCH CENTER INCORPORATED
number: 09473576
owner_city: Palo Alto
owner_country: US
publication_date: 20140407
---
This disclosure is generally related to data synchronization. More specifically this disclosure is related to service discovery by executing synchronization of collections between peers on a network using exact match names.

In many computing applications it is often important for peers on a network to synchronize their respective collections of data. The proliferation of digital content creates a vast number of collections which require reconciliation. Content centric network CCN architectures have been designed to facilitate accessing and processing such digital content. A CCN includes entities or nodes such as network clients forwarders e.g. routers and content producers which communicate with each other by sending interest packets for various content items and receiving content object packets in return. CCN interests and content objects are identified based on a unique name which is typically a hierarchically structured variable length identifier HSVLI which comprises contiguous name components ordered from a most general level to a most specific level.

A current CCN synchronization protocol uses a longest prefix match method where an interest in parc events will match both parc events calendar.txt and parc events conference.txt. This current synchronization protocol is based on responses that extend the name of an interest. This synchronization protocol is described in the following applications 

As CCN architectures evolve there is a need to discover devices and services offered by those devices based on a synchronization protocol that allows the use of exact name match rather than the current longest prefix match. In such a new architecture the current CCN synchronization protocol will not work.

One embodiment provides a system that facilitates service discovery based on the synchronization of manifests between devices in a content centric network by using a synchronization protocol based on exact match names. During operation a local device receives an advertisement corresponding to a remote manifest of a remote device. A manifest represents a collection of service records and the advertisement includes a service record corresponding to the remote device. The local device updates its local manifest in response to determining that the local manifest and the remote manifest correspond to a same namespace by inserting the advertised service record into the local manifest.

In some embodiments the local device transmits a query for an advertisement corresponding to a remote manifest of a remote device.

In some embodiments the local device transmits an advertisement corresponding to the local manifest of the local device and the advertisement includes the service record corresponding to the local device.

In some embodiments the local device receives a query from a remote device for an advertisement corresponding to the local manifest and the advertisement includes the service record corresponding to the local device.

In some embodiments a packet sent or received by the local device indicates one or more of a routable prefix that identifies the manifest an identifier to determine that the packet corresponds to a transfer of data an identifier to determine that the packet corresponds to an advertisement of data a root hash value of the manifest a name of a service record in the manifest and a service record.

In some embodiments responsive to determining that a serial number of the service record of an advertisement is greater than a serial number of the service record in the local manifest that has a same name as the service record of the advertisement the local device updates the value of the service record in the local manifest with the value of the service record of the advertisement.

In some embodiments the local device initializes onto a network without a manifest. The local device creates a service record corresponding to the local device and creates a manifest for the local device comprised of the service record.

In some embodiments the local device sends a request for the remote manifest in response to determining that a root hash value of the local manifest is different from a root hash value of the advertised remote manifest where a root hash value identifies service records of a manifest. Based on the received remote manifest the local device determines which service records represented in the remote manifest are different from the service records represented in the local manifest. The local device transmits a set of interests for the service records that are different.

In some embodiments responsive to the occurrence of a time to live TTL of a service record in the local manifest the local device updates the local manifest by deleting the expired service record from the local manifest. The local device transmits an advertisement corresponding to the updated local manifest.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present disclosure. Thus the present invention is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

Embodiments of the present invention provide a system which facilitates the discovery of devices and services offered by those devices in a content centric network CCN based on the synchronization of manifests between nodes on a network by using exact match names. In the following description of embodiments of the present invention the relevant CCN entities are a local node and a remote node although the roles can be reversed. In some embodiments the relevant CCN entities are a device at a local node local device and a device at a remote node remote node . Each of the local and remote nodes or devices is associated with a manifest which represents a collection of content objects at a node. A manifest is identified by a specific prefix such that two manifests with the same prefix correspond to the same collection of content objects.

In some embodiments the manifest is an ordered list identifying a collection of content objects. Each content object in a collection is identified by its name and corresponding digest where the digest is the hash value of the content object. In some embodiments each content object is also identified by a modified time which indicates the time that the content was modified. For the purposes of this description the manifest is described as an ordered list but other embodiments include the manifest structured as a synchronization tree which contains content objects as well as nested collections of content objects. The system generates a root hash value for the manifest. The root hash value is an additive hash value based on the hash values of the individual content objects of the collection. The root hash value of the manifest is a unique identifier for the manifest.

The system can synchronize the collections in a local manifest with the contents in a local manifest using exact match names. A remote node advertises a hash of its manifest. A local node receives the advertisement and determines that the advertised remote manifest corresponds to a local manifest where the remote manifest and the local manifest correspond to the same collection of content objects. The local node determines whether the contents of the local manifest are synchronized with the contents of the remote manifest by comparing the root hash value of the local manifest with the root hash value of the remote manifest. If they do not match then the local node retrieves the remote manifest by sending a request for the remote manifest to the remote node. In some embodiments the local node sends a set of interests based on a chunking protocol and each interest corresponds to a numbered chunk of the manifest. In some embodiments the remote node can advertise the number of chunks corresponding to its manifest. The local node in possession of the remote manifest determines which content objects indicated in the remote manifest are different from the content objects indicated in the local manifest. Subsequently the local node transmits a set of interests for the content objects that are different where the interest includes the name of the requested content object. In some embodiments the interest also includes the corresponding hash value of the requested content object. In this manner the system uses an exact name match to request and receive the set of different content objects.

In some embodiments the manifest is transmitted using a structured technique such as the rolling hash technique in the rsync protocol rather than sending the complete manifest.

In some embodiments a content object in a collection is further identified by a corresponding modified time which indicates the time the content object was modified. For each content object that is determined to be different the local node determines whether the modified time of the content object in the remote manifest is more or less recent than the corresponding content object in the local manifest. If the remote content object corresponds to a more recent version then the local node updates the value of the content object in the local manifest with the value of the content object from the remote manifest. A description of how to remove or white out a content item from a data collection is contained in U.S. patent application Ser. No. 13 681 306 previously incorporated by reference.

In some embodiments the name of the content object is a hierarchically structured variable length identifier HSLVI and indicates a version number or timestamp or implicit sort order which is used in lieu of a modified time in the manifest to determine the most recent version of a content object.

In some embodiments if the remote content object corresponds to a version that is less recent the system can determine whether to retain the history by inserting the value of the content object from the remote manifest in a history field of the corresponding content object in the local manifest. The system updates the values accordingly for each content object that is determined to be different. In this manner the system synchronizes the manifest at a local node with the manifest at a remote node.

In some embodiments the network clients network nodes e.g. forwarders such as routers and publishers communicate over an information centric network ICN . In ICN each piece of content is individually named and each piece of data is bound to a unique name that distinguishes the data from any other piece of data such as other versions of the same data or data from other sources. This unique name allows a network device to request the data by disseminating a request or an Interest that indicates the unique name and can obtain the data independent from the data s storage location network location application and means of transportation. Named data network NDN or a content centric network CCN are examples of ICN architecture the following terms describe elements of an NDN or CCN architecture 

A single piece of named data which is bound to a unique name. Content Objects are persistent which means that a Content Object can move around within a computing device or across different computing devices but does not change. If any component of the Content Object changes the entity that made the change creates a new Content Object that includes the updated content and binds the new Content Object to a new unique name.

A name in an ICN is typically location independent and uniquely identifies a Content Object. A data forwarding device can use the name or name prefix to forward a packet toward a network node that generates or stores the Content Object regardless of a network address or physical location for the Content Object. In some embodiments the name may be a hierarchically structured variable length identifier HSVLI . The HSVLI can be divided into several hierarchical components which can be structured in various ways. For example the individual name components parc home ndn and test.txt can be structured in a left oriented prefix major fashion to form the name parc home ndn test.txt. Thus the name parc home ndn can be a parent or prefix of parc home ndn test.txt. Additional components can be used to distinguish between different versions of the content item such as a collaborative document.

In some embodiments the name can include a non hierarchical identifier such as a hash value that is derived from the Content Object s data e.g. a checksum value and or from elements of the Content Object s name. A description of a hash based name is described in U.S. patent application Ser. No. 13 847 814 entitled ORDERED ELEMENT NAMING FOR NAME BASED PACKET FORWARDING by inventor Ignacio Solis filed 20 Mar. 2013 which is hereby incorporated by reference. A name can also be a flat label. Hereinafter name is used to refer to any name for a piece of data in a name data network such as a hierarchical name or name prefix a flat name a fixed length name an arbitrary length name or a label e.g. a Multiprotocol Label Switching MPLS label .

A packet that indicates a request for a piece of data and includes a name or a name prefix for the piece of data. A data consumer can disseminate a request or Interest across an information centric network which CCN NDN routers can propagate toward a storage device e.g. a cache server or a data producer that can provide the requested data to satisfy the request or Interest.

In some embodiments the ICN system can include a content centric networking CCN architecture. However the methods disclosed herein are also applicable to other ICN architectures as well. A description of a CCN architecture is described in U.S. patent application Ser. No. 12 338 175 entitled CONTROLLING THE SPREAD OF INTERESTS AND CONTENT IN A CONTENT CENTRIC NETWORK by inventors Van L. Jacobson and K. Smetters filed 18 Dec. 2008 which is hereby incorporated by reference.

In some embodiments a manifest indicates a name and a corresponding digest but does not indicate a modified time. Such a system can include e.g. a file server where prior versions of a text file are important and thus retained by the system. In other embodiments a manifest indicates a name a corresponding digest and a modified time. The system can use the modified time to determine which version of the content item should be retained. For example if the content items indicate a link state then the system does not need information relating to previous versions. In this case only the content object with the most recent modified time is retained.

Any two nodes in a network can contain a manifest that represents the same collection of data where the manifests can be synchronized using the methods described herein. The terms local node and remote node can apply to any node in a content centric network CCN and are used in this disclosure to differentiate between two nodes in a CCN.

The synchronization of manifests representing the same collection of data between two nodes is based on a three part name. The first part is a routable prefix that identifies the collection such as a b. The second part contains an identification of the relevant name space and is either add for advertisements or data for data transfers. The third part is the hash value or content being advertised or transferred. Thus a CCN name is of the form 

A local node receiving this advertisement and containing a local manifest with the same routable prefix a b retrieves the advertised manifest in chunks 0 1 . . . up to the ending chunk number m based on a chunking protocol. Such an interest looks like 

Based on the entries in the retrieved manifest the system determines which content objects identified in the retrieved manifest are different from the content objects identified in the local manifest. The system retrieves the different content objects based on the name of the content object 

In some embodiments the system retrieves the different content objects based on the hash value of the requested content object 

In some embodiments the system retrieves the different content objects based on the name in the manifest. This technique allows the system to retrieve any cached copy of the object rather than using the name of the content under the collection s namespace. For example to retrieve the first item from Manifest in the system would send an Interest for the name and digest 

Local node in possession of the remote manifest performs a determine set difference procedure . In some embodiments the result of this procedure is a list of content objects identified by name. In other embodiments the result is a list of content objects identified by their corresponding digest. Local node then transmits a request set difference interest for each content object determined to be different. The interest takes the form e.g. a b data name . . Local node receives the requested content object when remote node transmits a send set difference content object where the requested content object takes the form a b data name . payload. Thus local node requests and receives all content objects determined to be different such that the contents of the local manifest are synchronized with the contents of the remote manifest. In some embodiments local node performs a sync based on mod time procedure which is described below in relation to .

If the root hash value of the local manifest is not the same as the root hash value of the remote manifest decision this indicates that the local and remote manifests which represent the same collection are not synchronized and need to be reconciled. The local node downloads or transfers the remote manifest by sending a request for and receiving in response to the request the remote manifest operation corresponding to retrieve manifest procedure in .

The local node determines which content objects identified in the remote manifest are different from the content objects identified in the local manifest operation corresponding to the determine set difference operation in . In some embodiments the local node determines the set difference by comparing the digests of the content objects identified in the local manifest with the digests of the same named content objects identified in the remote manifest. The local node transmits a set of interests corresponding to the determined different set of content objects operation and receives the requested content objects in return operation . This corresponds to the resolve set difference operation shown in . Thus the contents of the local manifest are synchronized with the contents of the remote manifest.

If the local node has changes the local node advertises the new root hash value. It can do so immediately or schedule a next advertisement based on network or other timing considerations. For example the local system can advertise its root hash at least once per second but no more than four times a second. Therefore during reconciliation as the root hash changes due to updates the system can advertise up to four changes per second. Otherwise in a steady state it can advertise once per second.

If the modified time of the content object from the remote manifest is less recent than the corresponding content object in the local manifest operation then the system determines whether to save the value of the less recent content object from the remote manifest decision by inserting a corresponding value and modified time of the less recent content object into a history field in the local manifest operation . If there are more content objects in the set that need to be retrieved decision then the system returns to operation . If not then the system has finished retrieving the necessary content objects. Thus all content objects determined to be different have been updated and possibly retained or saved in a history field of the local manifest such that the contents of the local manifest are synchronized with the contents of the remote manifest.

A local node transmits an advertisement corresponding to a manifest where the manifest represents a collection of content objects at a node operation corresponding to send advertisement message in . This advertisement is an interest that is akin to a beacon and based on the add name space used does not request any content in return. Upon receiving a request from a remote node for the manifest the local node transmits the manifest to the remote node operation corresponding to receiving request manifest in chunks interest and send manifest in chunks message in . Upon receiving a request from a remote node for a content object identified in the local manifest the local node transmits the requested content object to the requesting remote node operation corresponding to receiving request set difference interest and send set different message in .

As described in relation to manifest can indicate a name and corresponding digest for each content object represented in the collection. In some embodiments manifest can also include a modified time for each content object represented in the collection. The use of the modified time field depends on the underlying application or service being performed. Note that manifest indicates collection name . The manifests depicted in also include a collection name but because the exemplary manifests comprise the same collections of data the collection name is not included in .

Recall that a manifest is further identified by a root hash value illustrated as root hash in which is an additive hash value based on the digests of the individual content objects of the collection. In the below examples the root hash value and the digests are indicated as a number in brackets e.g. though the number can be much larger than this. In addition both the digests of the content objects and the exemplar root hash values of manifest and manifest that change over time are depicted only as sample representations of additive hash values.

Local and Remote Manifests Contain Content Object with Same Name but Different Digest Local Node Retrieves Manifest First

Subsequently remote node receives a hash advertisement from local node of manifest with the new root hash value of 772. Remote node determines that its manifest represents the same collection of data as manifest and retrieves manifest . Remote node determines that manifest with a root hash value of 999 is not synchronized with manifest which has a root hash value of 772. Remote node then determines the set difference between its manifest and manifest . In this example manifest is missing the content object identified by the name of fruit lychee peel with a digest of so remote node sends an interest to local node for the content object based on that name and digest. Local node returns the requested content object. At time T. remote node updates it manifest with the missing content object. Based on the contents of manifest at time T. the system generates a new root hash value for manifest . This is depicted by the root hash value of manifest at time T.999 772. Thus at time T. manifest at node is in sync with manifest at node . Nodes and have synchronized their collections and both contain the same root hash value of 772.

Local and Remote Manifests Contain Content Object with Same Name but Different Digest Remote Node Retrieves Manifest First

Subsequently local node receives a hash advertisement from remote node of manifest with the new root hash value of 772. Local node determines that its manifest represents the same collection of data as manifest and retrieves manifest . Local node determines that its manifest with a root hash value of 53 is not synchronized with manifest which has a root hash value of 772. Local node then determines the set difference between its local manifest and remote manifest . In this example manifest is missing the content object identified by the name of fruit lychee peel with a digest of 41 so local node sends an interest to remote node for the content object based on that name and digest. Remote node returns the requested content object. At time T. local node updates it manifest with the missing content object. Based on the contents of manifest at time T. the system generates a new root hash value for manifest . This is depicted by the root hash value of manifest at time T.53 772. Thus at time T. manifest at node is in synchronization with manifest at node . Nodes and have synchronized their collections and both contain the same root hash value of 772.

At time T local node receives a hash advertisement from remote node of manifest with a root hash value of 999. Local node determines that its manifest represents the same collection of data as remote manifest and retrieves manifest . Local node determines that local manifest with a root hash value of 80 is not synchronized with remote manifest which has a root hash value of 999. Local node then determines the set difference between its local manifest and remote manifest . In this example both manifest and manifest indicate a modified time corresponding to each content object represented in its collection. The system determines that a content object with the same name in manifest and manifest has a different digest and a different modified time. Note that a modified time can include information relating to the second minute hour day month and year that a corresponding content object was modified. For simplicity the exemplary manifests in contain only a time of the day. Manifest contains a content object identified by the name of chef events calendar.txt with a digest of 1 and a modified time of 8 05 am. Manifest contains a content object identified by the same name with a different digest of 320 and a different modified time of 7 30 am. Local node then sends an interest to remote node for the content object based on the name and digest of the different content object. Remote node returns the requested content object.

Local node determines that the content object from remote manifest with a modified time of 8 05 am is more recent than the content object from its local manifest with a modified time of 7 30 am. So at time T local node updates it manifest with the different and more recent content object. Based on the contents of manifest at time T the system generates a new root hash value for manifest . This is depicted by the root hash value of manifest at time T 80 999. Thus at time T manifest at local node is in sync with manifest at remote node . Nodes and have synchronized their collections and both contain the same root hash value of 999.

In some embodiments the system will retain the previous version of the changed content object e.g. the content object identified by name chef events calendar.txt with a digest of 320 and a modified time of 7 30 am in a history field of manifest . In other embodiments when remote node receives a hash advertisement from local node of manifest with a root hash of 80 and downloads the local manifest remote node determines that the version of the received content object identified by name chef events calendar.txt with a digest of 320 and a modified time of 7 30 am is less recent than the version in its own manifest. In this case manifest at remote node remains out of synchronization with manifest at local node . The manifests will undergo synchronization at a later time when local node receives a hash advertisement from remote node of manifest which contains the more recently updated content object as described above.

In some embodiments the system facilitates discovery of devices and services offered by the devices in a content centric network CCN . The CCN namespace is divided by service type e.g. printers file servers or music libraries. Devices of a specific type perform the synchronization protocol described in this disclosure within those namespaces. For instance the collection prefix for such services can take the form of 

In such a service discovery system a device such as a printer named parc marvin at a node boots up with an empty manifest. The device creates a service record for itself which is a content object with the name of parc marvin service. In some embodiments this service record is of a JavaScript Object Notation JSON format and can comprise one or more of the following fields the name of the service record a description of the service a serial number that indicates a version of the service record a time to live TTL measured in seconds such that the service record expires if not refreshed periodically by the device advertising the service and a digest for the service record which is the hash value of the service record. Because the size of a service record is relatively small in some embodiments the service record can be included as the payload in an interest. Furthermore service records with a higher serial number indicate a more recent service record and replace records with lower serial numbers. Older service records are not preserved in the manifest.

The device creates a manifest containing the service record of the device and the corresponding hash value of the service record. The system generates a root hash value which is an additive hash value based on the digests of the content objects in the collection. The root hash value of the manifest of the device is initially based on the one service record indicated in the manifest. The device then sends a query advertisement of the form parc services printers adv query so that it can perform the following retrieve the manifests of other devices in the same service namespace parc services printers determine the set difference and resolve the set difference. In this way the device at this node synchronizes its manifest with the manifests of other devices at other nodes.

In some embodiments a service record is set to expire based on the time indicated in the TTL field of the service record. At some time before this expiration time the device can create a new service record with a sequentially greater serial number and replace the previous service record. A description of how to remove or white out a content item from a data collection is contained in U.S. patent application Ser. No. 13 681 306 previously incorporated by reference. The system generates a new root hash value for the manifest associated with the device based on the new service record. The device then advertises its updated manifest with the new service record using the newly created root hash value and the above described process repeats. Furthermore upon the expiration of a service record e.g. the TTL has elapsed all devices remove the expired service record from their manifest and generate a new hash advertisement without the expired service record.

In some embodiments when a device shuts down it can create a new service record with a TTL set to 0 and a larger serial number. The device can advertise its manifest based on this updated service record and set itself to expire immediately after sending the advertisement such that other devices that receive the advertisement are aware that this manifest includes the most recent service record based on the higher serial number.

In some embodiments an advertised interest can contain a payload which comprises the service record in its entirety of the form parc services printers adv . 

A device can exist at any node on a network where each device carries a manifest which represents a collection of service records. Any two devices can carry a manifest that represents the same collection of data e.g. service records for the same namespace where the manifests can be synchronized using the methods described herein. The terms local node and remote node can apply to any node in a content centric network CCN and are used in this disclosure to differentiate between two nodes in a CCN. Similarly the terms local device and remote device can apply to a device at any node in a CCN and are used in this disclosure for exemplary purposes.

In some embodiments an interest can contain as the payload one service record including its corresponding digest. Any node or device at a node in a CCN e.g. device device and nodes can send or receive an interest which is an advertisement that contains both the root hash value of the manifest of the sending device and the service record corresponding to the sending device. Furthermore any node or device can send or receive an interest which is a query or request for such an advertisement e.g. that contains both the root hash value of the manifest of the sending device and the service record of the sending device included as the payload.

Local device can receive a receive advertisement interest which is similar in format to interest and contains both the root hash of the manifest of the remote device and as payload the service record of the remote device p prn adv . Local device performs an update manifest procedure . Local device determines if its manifest indicates the same namespace as the manifest of the advertise interest based on the same collection prefix or namespace p prn . Local device updates it local manifest by inserting the advertised service record included as payload in interest into its local manifest if the included service record is more recent than what local device already has. Local device then generates a new root hash value for its local manifest. If the new root hash value is equal to the root hash value of the advertised interest from interest then the collections of service records in the manifest of local device and remote device are synchronized. Thus because the interest contains as payload the service record of the remote device the remote and local manifests are synchronized without needing to transfer a manifest across the network.

If the new root hash value of local device is not equal to the root hash value of the advertised interest then local device performs a set reconciliation using the methods described in relation to . Local device performs a retrieve manifest procedure by sending a request remote manifest interest of the form p prn data and receiving a receive remote manifest message of the form p prn data . Local device performs a determine set difference procedure to determine which service records represented in the remote manifest are different from the service records represented in its local manifest. Local device performs a resolve set difference procedure by sending a request set difference interest of the form p prn data name . and receiving a receive set difference message of the form p prn data name . payload .

The local device determines that its local manifest and the remote manifest correspond to the same namespace operation . In some embodiments the local device determines if the local manifest contains a service record with the same name as the name of the advertised service record operation . If the local manifest does not contain such a service record decision then the local device updates the local manifest by inserting the advertised service record from the payload into the local manifest operation . If the local manifest does contain such a service record decision then the local device determines if the serial number of the advertised service record is greater than the serial number of the same named service record in the local manifest operation . If it is not greater decision then the method returns because the version contained in the local device is more recent.

If the serial number of the advertised service record is greater than the serial number of the same named service record in the local manifest decision then the local device updates the local service record so that the current serial number is greater than the serial number currently known to the network operation . In some embodiments this condition can exist if a device reboots and loses its memory such that its serial number initializes to less than what it last advertised before the failure. The local device then updates the local manifest by inserting the updated service record into the local manifest operation . A description of how to remove or white out a content item from a data collection is contained in U.S. patent application Ser. No. 13 681 306 previously incorporated by reference.

During operation at time T Larry sends an advertisement of the form parc services printer adv . Marvin receives this advertisement and determines that its manifest is missing the service record L SR included as the payload in the advertisement. At time T Marvin inserts the service record L SR into its manifest and generates a new root hash value for manifest based on the hash values of the existing service records indicated in the manifest M SR and L SR . This is depicted by 111 33.

At time T manifest with the new root hash of 33 is not synchronized with advertised manifest which has a root hash of 222. Marvin sends an advertisement of the form parc services printer advkroothash 33 . Larry receives this advertisement and determines that its manifest is missing the service record M SR included as the payload in the advertisement. At time T Larry inserts the service record M SR into its manifest and then generates a new root hash value for manifest based on the hash values of the existing service records indicated in manifest L SR and M SR . This is depicted by 222 33. In this way the devices Larry and Marvin at nodes and have synchronized their respective manifests and with each other without either device needing to download the full manifest from the other device.

At time T shown in the devices named Larry and Marvin are operational with respective manifests and at nodes and . Manifests and are in synchronization and each contain the service record of Larry L SR with a serial number of 2 and a digest of 72 and the service record of Marvin M SR with a serial number of 7 and a digest of 11. The root hash of manifests and is 105.

At time T shown in device Larry is operational at node with manifest which contains two service records the service record for Larry with a name of L SR a serial number of 2 and a digest of 72 and the service record for Marvin with a name of M SR a serial number of 7 and a digest of 11. The root hash value of manifest is 105. Note that at time T the manifest for Marvin not shown in is in synchronization with manifest of Larry. At time T a printer with a name of parc nancy Nancy boots up and is operational at node . Device Nancy belongs to the same namespace as Larry and Marvin parc services printers . Nancy creates a service record for itself which is a service record with a name of N SR a serial number of 1 and a corresponding digest of 65. Nancy creates a manifest which contains the newly created service record and generates a root hash value for the manifest of 165. Nancy then sends an advertisement query to the network for the namespace parc services printers in the form of parc services printers adv query. Nancy receives an advertisement from Larry of the form parc printers advkroothash 105 . Nancy receives this advertisement and determines that its manifest is missing the service record L SR included as the payload in the advertised hash. At time T Nancy inserts the service record L SR into its manifest and generates a new root hash value for manifest based on the hash values of the existing service records indicated in the manifest N SR and L SR . This is depicted by 165 200. Nancy determines that the root hash 200 of its manifest is not the same as the root hash 105 of the advertised interest so Nancy performs a full set reconciliation using the methods described herein.

Nancy retrieves the manifest with a root hash value of 105 by sending a set of interests in the form of parc services printers data S0 parc services printers data S1 parc services printers data S2 etc. based on a chunking protocol and then receives the requested content objects in the form of parc services printers data S0 payload etc. Nancy then determines the service records that are different and transmits a set of interests for the service records that are determined to be different. In this example Nancy determines that the missing service record is the one corresponding to Marvin entitled M SR with a serial number of 7 and a corresponding digest of 11. Nancy transmits an interest of the form parc services printers data M SR and receives a content object in return of the form parc services printers data . At time T Nancy inserts the service record M SR into its manifest and generates a new root hash value for manifest based on the hash values of the existing service records indicated in the manifest L SR M SR and N SR . This is depicted by 200 420. However manifest with a root hash of 420 of device Nancy is not in synchronization with manifest of Larry and possibly other manifests such as manifest of Marvin depicted at time T in which has a root hash of 105. Nancy then sends an advertisement of the form parc services printers advkroothash 420 and Larry and Marvin and other devices on the network receives this advertisement and updates its respective manifest with the service record of Nancy N SR included as the payload in this advertisement. At time T Larry inserts the service record of Nancy N SR with a digest of 65 into manifest and generates the same new root hash value of 420. This is depicted by 105 420. Note that Marvin can also insert N SR with a digest of 65 into manifest and can also generate the same new root hash value of 420. Thus the new device Nancy at node and the existing devices Larry and Marvin at nodes and have synchronized their manifests with each other by using advertisements that contain service records which obviates the need to transfer manifests and also by using the collection synchronization protocol based on the transfer of manifests described in relation to .

Content processing system can include instructions which when executed by computer and communication system can cause computer and communication system to perform methods and or processes described in this disclosure. Specifically content processing system may include instructions for receiving an advertisement corresponding to a remote manifest of a remote node where the advertisement includes a service record corresponding to the remote device advertisement mechanism . Content processing system can also include instructions for transmitting an advertisement corresponding to the local manifest of a local device where the advertisement includes a service record corresponding to the local device advertisement mechanism . Content processing system can also include instructions for transmitting an advertisement corresponding to an updated local manifest where the manifest has been updated based on a service record being deleted upon the occurrence of the time to live TTL of a service record in the manifest advertisement mechanism .

Content processing system can also include instructions for updating a local manifest of a local device in response to determining that the local manifest and the remote manifest correspond to the same namespace by inserting the advertised service record of the remote manifest into the local manifest manifest update mechanism . Content processing system can include instructions for responsive to determining that the serial number of an advertised service record from a remote device is greater than the serial number of the service record of the same name in a local manifest updating the value of the service record in the local manifest with the value of the advertised service record from the remote device manifest update mechanism . Content processing system can include instructions for updating the local manifest by deleting the service record from the local manifest in response to the occurrence of a time to live TTL of a service record in the local manifest manifest update mechanism .

Content processing system can further include instructions for transmitting a query for an advertisement corresponding to a remote manifest of a remote device and for receiving a query from a remote device for an advertisement corresponding to a local manifest where the advertisements include a service record corresponding to the device query mechanism .

Content processing system can also include instructions for initializing by a local device onto a network creating a service record corresponding to the local device and creating a manifest for the local device comprised of the service record initialization mechanism .

Content processing system can include instructions for sending a request for a remote manifest receiving a remote manifest sending a request for a content object or service record associated with the remote manifest and receiving a requested content object or service record associated with the remote manifest communication mechanism . Content processing system can also include instructions for sending a set of interests to retrieve a remote manifest based on a chunking protocol such that each interest corresponds to a numbered chunk of the manifest communication mechanism . Content processing system can include instructions for transmitting an advertisement corresponding to a manifest transmitting the manifest to a remote node in response to receiving a request for the manifest transmitting a requested content object or service record associated with the manifest to a remote node and receiving a set of interests based on a chunking protocol such that each interest corresponds to a numbered chunk of the manifest communication mechanism .

Content processing system can further include instructions for determining based on a received remote manifest which service records represented in the remote manifest are different from the service records represented in a local manifest determine difference mechanism .

Data can include any data that is required as input or that is generated as output by the methods and or processes described in this disclosure. Specifically data can store at least a manifest that represents a collection of service records a service record a name of a service record a description of the service a serial number a time to live TTL in seconds a corresponding digest of the service record a root hash value of the manifest which is an additive hash value based on the digests of the service records represented by the manifest a namespace or routing prefix of a manifest which identifies the manifest an identifier to determine that a packet corresponds to an advertisement of data an identifier to determine that a packet corresponds to a transfer of data a number corresponding to a numbered chunk of the manifest based on a chunking protocol.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described above can be included in hardware modules or apparatus. The hardware modules or apparatus can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs dedicated or shared processors that execute a particular software module or a piece of code at a particular time and other programmable logic devices now known or later developed. When the hardware modules or apparatus are activated they perform the methods and processes included within them.

The foregoing descriptions of embodiments of the present invention have been presented for purposes of illustration and description only. They are not intended to be exhaustive or to limit the present invention to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present invention. The scope of the present invention is defined by the appended claims.

