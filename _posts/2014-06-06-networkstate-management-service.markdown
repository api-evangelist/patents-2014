---

title: Network-state management service
abstract: The techniques and/or systems described herein implement a network management service configured to read and write a state of a network for various applications (e.g., network management applications) so that the applications can operate independently. The network management service is configured to read an observed network state and provide the observed network state to the applications. Subsequently, the network management service receives proposed network states from the applications and uses a state dependency graph to determine whether state conflicts exist between the proposed network states. The network management service also determined whether defined policies are violated by the proposed network states. Finally, the network management service is configured to generate a target network state by merging non-conflicting proposed network states that comply with defined policies and to update (e.g., write) the network state based on the generated target network state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491054&OS=09491054&RS=09491054
owner: Microsoft Technology Licensing, LLC
number: 09491054
owner_city: Redmond
owner_country: US
publication_date: 20140606
---
As electronic services e.g. search services electronic mail services social networking services cloud computing services etc. continue to expand providers of the electronic services operate networks of devices to provide the electronic services. However due to the large number of inter connected and dependent devices within an individual network it is often difficult for a provider to continuously operate a network in an efficient and reliable manner. For instance a switch device within a network may be tasked with communicating a message from a source device to a destination device but may be unable to communicate the message because at a given moment when the message is to be communicated via the switch device an application that maintains and updates the switch device may have disabled at least some of the functionality of the switch device e.g. so that it can receive a firmware update. Consequently the network may experience an interruption that may affect the efficiency and reliability of the network.

Furthermore multiple applications may attempt to simultaneously control a state of a network device resulting in a state conflict. For example a first application may attempt to route traffic through the switch device while a second application attempts to shut down the switch device so that it can receive an update.

The techniques and or systems described herein implement a network management service configured to read and write a state of a network for various applications e.g. network management applications so that the applications can operate independently. The network management service is configured to read an observed network state e.g. values for individual state variables of the network and provide the observed network state to the applications. Subsequently the network management service receives proposed network states from the applications where each proposed network state suggests at least one change to a desired value of a state variable e.g. an observed value or a current value . The network management service is then configured to determine using a state dependency graph whether state conflicts exist between the proposed network states and whether defined policies are violated by the proposed network states. Finally the network management service is configured to generate a target network state by merging non conflicting proposed network states that comply with defined policies and to update e.g. write the network state based on the generated target network state e.g. change the network from an observed network state or a current network state to the target network state .

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The techniques and or systems described herein implement a network management service that monitors and manages a network. The network may comprise various types of devices configured to perform various functions. The network may also comprise various communication paths between the devices. The network management service described herein enables applications e.g. network management applications to operate independently. The network management service is configured to read an observed network state and provide the observed network state to the applications. The network management service is also configured to determine using a state dependency graph whether state conflicts exist between proposed network states received from the applications. Moreover the network management service is configured to determine whether defined policies are violated by the proposed network states. Finally the network management service is configured to generate a target network state by merging non conflicting proposed network states that comply with defined policies and to update e.g. write the network state based on the generated target network state. Consequently the network management service described herein enables the network to continuously operate safely and efficiently at least because state conflicts are avoided and proposed network state changes are checked to ensure they comply with defined network policies.

As used herein the state of a network is dependent on the states of individual devices and or individual communication paths within the network. Accordingly the network management service described herein is configured to observe e.g. read store and aggregate the state of individual devices and or individual communication paths within the network so that a state of the broader network can be determined. In various implementations an individual device or an individual communication path may have one or more state variables and at any given time a state variable may be any one of various values.

A state variable is defined as any component of a device or a communication path that may have a value capable of being read and or written. For instance a state variable may be a controllable component of a device for which an observed value can be read and a target value can be written. A state variable may be an uncontrollable component of a device for which an observed value can be read but a target value cannot be written e.g. an application may want to know a value of an uncontrollable or read only state variable to propose a desired value for another state variable . A state variable may also be associated with virtual component of a network.

A state variable may also be referred to as a key value pair where i the key uniquely identifies the state variable and or a particular device or communication path associated with the state variable and ii the value identifies one of the possible values for the state variable. For example a device may comprise a power state variable that indicates whether a device is powered on or powered off. Thus a first value for the power state variable may indicate the device is powered on and a second value for the power state variable may indicate the device is powered off. These different values can be read from the device e.g. observed and or written to the device e.g. the power is a controllable component of the device such that the network management service can switch the device between being powered on or powered off . Thus the state of a network is a collection or aggregation of state variables associated with individual devices and or individual communication paths within the network e.g. a table of key value pairs .

Typically various applications individually access a device and control a state variable of the device. For example an application typically monitors a state variable of a device determines a time to update the device based on the monitoring logs on to the device to control the state variable e.g. change the state variable from an observed or current value to a desired value and then issues a command to update the device. These various applications may be created and or operated by different independent developers and or entities tasked with managing and controlling different aspects or functions of the device and or of the network of which the device is a part so that the device and the network operate efficiently and reliably e.g. the network performs as it should . An application implementing an update to a device in the network is typically not aware of updates being implemented or about to be implemented on the same device by other applications. Thus multiple independently operated applications often attempt to control a same state variable of a same device simultaneously. In many instances a state variable value required to implement a first update by a first application may inadvertently affect a second update being implemented by a second application. For example the first update may require that the state variable be a first value while the second update may require that the state variable be a second value different than the first value. Consequently a state conflict arises and this state conflict may diminish the efficiency and reliability of the network and also frustrate the developers and or the entities that control the applications implementing the updates.

As an illustrative example suppose a traffic engineering application wants to create a communication tunnel through a switch device within the network while a firmware upgrade application wants to upgrade the same switch device. In many instances and depending on which application initiates actions on the switch device first either i the traffic engineering application fails to create the communication tunnel because the switch device may already be shut down e.g. a power state variable indicates the switch device is powered off so that the firmware upgrade application can upgrade the switch device or ii the communication tunnel already established by the traffic engineering application may ultimately drop communication traffic after or upon the switch device being powered off by the firmware upgrade application so that the firmware can be upgraded.

A conventional approach to resolving a state conflict includes implementing a system where applications negotiate with each other and agree in advance on a particular value for a state variable of a device at a given time so that a state conflict can be avoided. However this conventional approach requires coordination and communication between each pair of applications and thus the applications become dependent on one another e.g. tightly coupled applications that must be programmed to communicate in a common language . Moreover this conventional approach causes development complexity and scalability challenges at least because a large amount of operating overhead is required so that each application can negotiate with many other applications to agree on a particular value for a state variable to avoid conflicts. For instance an application that wants to update a device may need to communicate to tens or hundreds of other applications a desired value for a state variable of a device and then receive approval from the tens or hundreds of other applications before changing the state variable from an observed or current value to the value desired to implement the update.

The techniques and or systems described herein implement a shared network management service that enables a coordinated and organized approach for various applications to independently implement changes to a state of the network. The shared network management service takes the responsibility of resolving state conflicts away from the applications and ensures that state conflicts are avoided. This allows applications to operate independently of one another e.g. applications do not have to communicate and negotiate with other applications and resolves the development complexity and scalability challenges mentioned above. Moreover techniques and or systems described herein reduce the latency for state conflict resolution and policy checking.

As discussed herein the network management service generates maintains and uses a state dependency graph to detect state conflicts. The state dependency graph captures and or represents network specific e.g. domain specific dependencies between state variables. A dependency may be defined for two or more state variables associated with a same device or a same communication path within the network. Or a dependency may be defined between a first state variable associated with a first device or a first communication path and a second state variable associated with a second device or a second communication path. The network management service accesses the state dependency graph to determine that a state conflict exists e.g. detect a state conflict and to resolve the state conflict.

Moreover the network management service may ensure the network at any given time does not violate a policy e.g. an invariant . For instance a policy may be or at least be associated with a service level agreement SLA . A service level agreement may be a network wide service level agreement established and enforced to ensure that the network operates at or above a reliability and or performance standard. For example a service level agreement may be defined to ensure the network operates at or above a minimum network connectivity level e.g. at least ninety percent of switch devices in the network are required to be powered on at any given time . Accordingly the network management service examines defined policies and ensures that any changes to the state of the network e.g. changes to state variables do not cause a violation of a defined policy.

In various embodiments the network being managed may be a large production network such as a data center network DCN an Internet service provider ISP network an enterprise network e.g. a cloud service or any other administrative domain that may be under control of an entity e.g. an entity that operates and maintains devices executing the network management service . The devices may be physical network devices such as a switching device a switch a routing device a router a gateway device a gateway a bridging device a network bridge a hub device a network hub a firewall device a network address translator device a NAT a multiplexing device a multiplexer a wireless access point device a WAP a proxy server device a file server device a database server device a storage device etc. The devices may also be end user devices capable of connecting to the network . For instance an end user device may comprise a mobile or portable device such as a smart phone a cellular phone a personal digital assistant PDA an electronic book device a laptop computing device a tablet computing device a personal media player device etc. Or an end user device may comprise a stationary device such as a desktop computing device a gaming console device a digital video recording device a DVR a set top box device etc. Therefore the network may comprise hundreds or thousands of devices connected to one another to comprise a domain or an administrative network.

As part of the management and administration of the network the network management service is configured to monitor and store an observed network state e.g. read the observed network state . The observed network state comprises a collection or an aggregation of values to state variables of the devices and or communication paths that make up the network at a given time e.g. real time values most recently observed values etc. . For example an individual device at a given time may be observed to have a power state variable with a first value indicating that the power is turned on or a second value indicating that the power is turned off.

After reading the observed network state e.g. observed values for state variables the network management service is configured to store the observed network state and or to provide e.g. communicate the observed network state or at least part of the observed network state e.g. values for specified state variables to various applications . . . N . In one implementation the applications . . . N may request and or access the observed network state e.g. pull the observed network state from the network management service . In another implementation the network management service may automatically provide the observed network state to the applications . . . N e.g. push the observed network state to the applications . . . N . In instances where the network is a large production network the number of applications N may be large e.g. ten fifty one hundred one thousand etc. .

An application e.g. one of . . . N may be responsible for managing and controlling a particular aspect or function of the network so that the network operates efficiently and reliably. Thus the applications . . . N may be highly sophisticated applications that take years to design develop and deploy in a large production network. In various embodiments the particular aspect or function of the network managed and controlled by an individual application e.g. one of . . . N may be associated with a single device and or a single communication path of the network or a subset of the devices and or a subset of communication paths of the network e.g. a particular type of devices such as network switching devices . Accordingly the individual application may request or be provided with observed state values for specific state variables associated with the devices and or communication paths which the individual application is configure to manage and control i.e. the individual application may not need to understand observed state values for all the state variables of the network .

An application e.g. one of . . . N may be classified as a routing management application that manages switch forwarding rules for the devices and or the communication paths of the network . For example a traffic engineering application may be a routing management application that is configured to steer traffic along different communication paths e.g. a communication tunnel established through for two or more devices to improve network utilization and or ensure that performance requirements are satisfied. In another example a server load balancing application may be a routing management application that equally divides a communication load e.g. traffic across devices e.g. a group of servers processing requests for data .

An application e.g. one of . . . N may be classified as an infrastructure management application that manages the network infrastructure of devices and or communication paths of the network . For example a power management application may be an infrastructure management application that is configured to turn a switching device on or off at any given time in order to mitigate a failure or save energy. In another example a switch upgrade application may be an infrastructure management application that is responsible for installing a new operating system i.e. firmware on a switching device. In yet another example a configuration management application may be an infrastructure management application that is configured to manage switching device configurations and communication path configurations e.g. specify a management plane implement a link layer discovery protocol LLDP perform Internet Protocol IP assignment etc. .

The applications described above are provided herein as example applications and it is contemplated that other applications developed to control an aspect or a function of a network may also benefit from the techniques and or systems described in this document.

Subsequent to providing the observed network state or values for specific state variables to the applications . . . N the network management service receives proposed network state s from the applications . . . N . An application e.g. one of . . . N may desire a particular change to values of one or more state variables in the observed network state e.g. to update a device and therefore the application may generate and communicate a proposed network state that suggests the particular change e.g. change an observed or current value of a state variable to a desired value of the state variable .

The network management service is then configured to merge the proposed network state s and generate a target network state . The target network state for the managed network is based on the proposed network state s collectively received from the various applications . . . N . The target network state comprises a group of accepted changes to values of state variables that can be implemented simultaneously and that do not result in a state conflict or a violation of a defined network policy e.g. a service level agreement . The network management service may access and use the state dependency graph discussed above to determine whether a conflict exists between two or more changes suggested via the proposed network states . The network management service may also access defined policies and determine whether changes suggested via the proposed network states result in a policy violation. Consequently the network management service may have to reject some changes suggested via the proposed network states if it is determined that a conflict exists or a defined policy is violated. Put another way the target network state may not implement all the suggested state variable changes received via the proposed network states . Once the target network state is generated the network management service initiates the changing of state variables e.g. from a previously observed state value or a current value to a desired value .

Thus the network management service described above and further discussed herein is configured to shield the applications . . . N from interactions associated with controlling and managing the network e.g. one or more devices and or from having to understand dependencies between state variables. Instead the network management service handles the interactions and understands the dependencies between state variables. Therefore the applications . . . N are not required on their own to implement a device specific and or a protocol specific approach to reading and or writing a state variable. Moreover since the network management service does not enable the applications . . . N to directly and unilaterally control the devices and or communication paths in the managed network state conflicts can be detected thereby mitigating a network failure or diminished network performance.

In various embodiments the network management service may interface with the applications . . . N using application programming interfaces APIs .

The network management service is configured to observe and store values for the state variables defined for the devices and communication paths in the network e.g. a table of key value pairs . Moreover the network management service when storing the values may associate the observed state e.g. a key value pair with a timestamp indicating when the value for a state variable was observed.

The first device may be associated with state variables . . . M . The second device may be associated with state variables . . . L . The communication path may be associated with state variables . . . K . In various embodiments the state variables associated with devices and may be referred to as physical state variables and the state variables associated with a communication path may be referred to as virtual state variables because they may not be a physical component of a device . Rather a virtual state variable may be a component that is related to physical state variables associated with a device. The network management service may be configured to translate a virtual state variable to one or more physical state variables based on the relation.

Example state variables for individual devices and include but are not limited to one or more of device power state variables e.g. a power unit reachability state variable an administrative power status state variable etc. firmware setup state variables e.g. a firmware version state variable a boot image state variable etc. a device configuration state variable e.g. a management interface setup state variable a wiring status state variable etc. routing control state variables e.g. a flow routing rules state variable a link weight allocation state variable etc. and device counter state variables e.g. a CPU utilization state variable a memory utilization state variable etc. . Further example state variables for individual devices and may be associated with a communication interface and may include but are not limited to one or more of interface power state variables e.g. an interface administrative status state variable an interface operation status state variable etc. interface configuration state variables e.g. an IP assignment state variable a boot status state variable etc. and interface counter state variables e.g. a traffic load state variable a packet drop rate state variable etc. .

Example state variables for an individual communication path may include but are not limited to setup and traffic state variables e.g. a state variable that identifies switching devices on the communication path a Multiprotocol Label Switching MPLS tunnel state variable etc. .

The state dependency graph generated by the network management service is based on defined dependencies between state variables of the network . Thus the state dependency graph used by the network management service to detect a state conflict may define a dependency so that an individual state variable cannot simultaneously have multiple values e.g. a switching device cannot be powered up and powered off at the same time . For instance the state dependency graph may be used to detect that a state conflict arises when a proposed network state received from a first application requests or suggests a first value for a state variable while a proposed network state received from a second application requests or suggest a second value different than the first value for the same state variable. Thus a dependency can be defined with respect to an individual state variable.

The state dependency graph used by the network management service to detect a state conflict may also define a relationship dependency between multiple state variables e.g. at least two state variables . Put another way whether a value of a state variable is changeable may depend on a value of one or more other state variables. The multiple state variables may be associated with the same device or same communication path. For instance a particular value of state variable may conflict with a particular value of state variable or a particular value of state variable may conflict with a particular value of state variable . In one example a particular value for a device configuration state variable may depend on a particular value of a firmware version state variable e.g. the firmware version may have to be the most recent upgraded operating system for the particular value of the device configuration state .

The multiple state variables may alternatively be associated with different devices or communication paths. For instance illustrates a defined dependency between state variable associated with device and state variable associated with device . As an example a particular value for a device configuration state variable e.g. state variable of device may depend on whether a power state variable e.g. state variable value of device indicates that device is powered on.

In various embodiments the network management service structures the state variables based on layers. For instance state variable may be part of a first layer . State variable may be part of a second layer . And state variable M may be part of an Mth layer e.g. where M is an integer value . The layers defined within the structure may be based on a type or a category of state variable. In one implementation layer may include state variables of the power type or power category layer may include state variables of the device configuration type or the device configuration category and layer may include state variables of the routing control type or the routing control category.

Since an application e.g. one of applications . . . N may be tasked with controlling and managing a particular aspect or function of the network the application may only be interested in understanding and controlling a small number of state variables associated with the particular aspect or function of the network. Therefore the network management service may structure or organize the state variables according to layers so that an application can efficiently obtain observed values for state variables within a particular layer relevant to the particular aspect of function of the network for which the application is managing and controlling. Continuing the example in the preceding paragraph a power management application may only want to receive and understand observed values of state variables in layer e.g. those of the power type or power category . Or a traffic engineering application may only want to receive and understand observed values of state variables in layer e.g. those of the routing control type or routing control category .

The device s include the network management service configured to implement the techniques described herein. A device may individually and separately include one or more processor s and memory . The processor s may be a single processing unit or a number of units each of which could include multiple different processing units. The processor s may include a microprocessor a microcomputer a microcontroller a digital signal processor a central processing unit CPU a graphics processing unit GPU a security processor etc. Alternatively or in addition some or all of the techniques described herein can be performed at least in part by one or more hardware logic components. For example and without limitation illustrative types of hardware logic components that can be used include a Field programmable Gate Array FPGA an Application specific Integrated Circuit ASIC an Application specific Standard Products ASSP a state machine a Complex Programmable Logic Device CPLD other logic circuitry a system on chip SoC and or any other devices that perform operations based on instructions. Among other capabilities the processor s may be configured to fetch and execute computer readable instructions stored in the memory .

The memory may include one or a combination of computer readable media. As used herein computer readable media includes computer storage media and communication media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to phase change memory PRAM static random access memory SRAM dynamic random access memory DRAM other types of random access memory RAM read only memory ROM electrically erasable programmable ROM EEPROM flash memory or other memory technology compact disk ROM CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store information for access by a device.

In contrast communication media includes computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. As defined herein computer storage media does not include communication media.

The memory may include an operating system that is configured to manage hardware and services within and coupled to a device for the benefit of other modules components and devices. In some instances at least part of the network management service may be implemented within or by the operating system.

The network management service includes one or more of a monitoring module a checking module and an updating module . As used herein the term module is intended to represent example divisions of the software for purposes of discussion and is not intended to represent any type of requirement or required method manner or organization. Accordingly while various modules are discussed their functionality and or similar functionality could be arranged differently e.g. combined into a fewer number of modules broken into a larger number of modules etc. . Further while certain functions and modules are described herein as being implemented by software and or firmware executable on one or more processors across one or more devices in other embodiments any or all of the modules may be implemented in whole or in part by hardware e.g. as an ASIC a specialized processing unit etc. to execute the described functions. In other instances the functions and or modules are implemented as part of a device driver firmware and so on.

The monitoring module is configured to read or observe a current or actual network state i.e. the observed network state of the managed network . As discussed above the observed network state comprises values for various state variables of the devices and communication paths of the managed network at a given time. After reading the values of the state variables the monitoring module is configured to store the observed values in a state variables store . For instance the monitoring module may organize or structure the observed values in the state variables store according to key value pairs e.g. a table of key value pairs . By storing the observed network state the most recent observed values for state variables can be accessed at a later time after the observed values are read by the monitoring module . In some implementations the key value pairs may be sorted according to devices and or communication paths as well as a type or a category of state variables e.g. the layers discussed above .

In various implementations the monitoring module may be configured to read up to date state variable values of the devices and or of the communication paths in accordance with a periodic schedule e.g. every thirty seconds every minute every three minutes every ten minutes every thirty minutes every hour a particular time every day etc. . In other implementations the monitoring module may be configured to read up to date state variable values of the devices and or of the communication paths in response to a particular event. For example the particular event may include a specific instruction initiated by a representative e.g. network administrator from an entity operating the network management service or an entity served by the managed network e.g. an enterprise entity . In another example the particular event may be a network failure or network disruption.

In various embodiments the monitoring module reads and collects the values for state variables using various protocols. For example a protocol used by the monitoring module to read a value may depend on a vendor or manufacturer of a device e.g. a switching device and or the physical technologies supported by the device e.g. Simple Network Management Protocol SNMP OpenFlow communications protocol etc. . The monitoring module then translates protocol specific data into state variable values to be stored in the state variables store and or to be provided to the applications . . . N . Since the monitoring module may be configured to implement different protocols to read values of state variables from different devices e.g. devices manufactured by different entities the monitoring module is able to shield the applications . . . N from the heterogeneous nature of the different devices . Put another way the monitoring module may translate and persistently store state variable values in a unified format so that the applications . . . N do not have to know or understand specific infrastructure technologies and or protocols used to read and write state variable values.

The monitoring module is further configured to provide observed state variable values to the applications . . . N . As discussed above the provision of observed state variable values may be implemented via push techniques or pull techniques. Moreover an application may only want to understand and therefore be provided with specific state variable values relevant to the network function or network aspect for which it is responsible for controlling and managing. Accordingly the monitoring module may be configured to provide specific state variable values to a particular application. For example a pull request from a particular application may indicate one or more keys which individually identify a state variable of a device or of a communication path and the monitoring module provides the observed values for the one or more keys indicated in response to the pull request. In another example the monitoring module may be configured with logic that is aware of which state variable values are relevant to a particular application and thus the monitoring module may automatically push specific state variable values to the particular application in accordance with a schedule e.g. a periodic schedule or in response to a particular event. Consequently the monitoring module may be configured as an intermediate interface available to applications . . . N so that the applications can read observed values of state variables.

After receiving the observed network state e.g. one or more observed values the applications . . . N determine whether or not to suggest a change to an observed value. For instance an application may determine that an observed value needs to be changed so that the application can update firmware on a device . Thus the applications . . . N are individually configured to generate and return one or more proposed network states to the network management service . In various embodiments each proposed network state generated and provided by an application e.g. one of applications . . . N may suggest a single change of a state variable from an observed value to a desired value. Thus a single application may determine multiple value changes are needed and therefore the single application may provide multiple proposed network states . In other embodiments an individual proposed network state generated and provided by an application e.g. one of applications . . . N may suggest multiple changes to multiple respective observed values.

In various embodiments the checking module is configured to receive the proposed network states from the applications . . . N and or store the suggested changes e.g. the desired values of the state variables in the state variable store so that the checking module can begin determining whether state conflicts exist or whether a defined policy is violated.

After the proposed network states are received the checking module is configured to generate the target network state . The checking module generates the target network state by detecting and removing conflicts between the proposed network states . For instance if a conflict is detected between two or more proposed network states the checking module is configured to accept one proposed network state and reject at least one other proposed network state that conflicts with the accepted proposed network state. As an example the checking module may detect that a conflict exists when a first proposed network state and a second proposed network state e.g. at least two proposed network state suggests changing a state variable to a different value at a same time e.g. simultaneously . In another example the checking module may detect that a conflict exists when a first proposed network state suggests a first desired value to a first state variable and a second proposed network state suggests a second desired value to a second state variable different than the first state variable where the first desired value and the second desired value are incompatible e.g. based on a defined dependency .

The checking module determines whether a conflict exists by using the state dependency graph e.g. stored in a state dependency graph store . As discussed above the state dependency graph defines dependencies between state variables e.g. a particular value of a first state variable may depend on a particular value of a second state variable . Thus the checking module accesses the state dependency graph to determine whether or not a conflict exists.

In various embodiments the network management service may define dependencies e.g. within the state dependency graph based on layers e.g. between layers . For example referring back to state variable may be part of a top layer in a multi layered dependency hierarchy. State variable may be part of an intermediate layer in the multi layered dependency hierarchy where state variables in the intermediate layer depend upon at least one value of one or more state variables in the top layer . And state variable M may be part of a bottom layer in the multi layered dependency hierarchy where state variables in the bottom layer depend upon at least one value of one or more state variables in the intermediate layer . It is understood in the context of this document that the network management service can generate the state dependency graph so that it includes any number of layers e.g. two four six eight etc. .

The network management service may use the multi layered dependency hierarchy to efficiently determine whether or a not a state conflict exists. For instance if a power state variable in a top layer indicates the device is powered off then most if not all of the state variables in a lower layer such as the intermediate layer e.g. device configuration type state variables and bottom layer e.g. routing control type state variables may be invalid or null at least because the device is shut down and not operating thereby eliminating a possibility for applications to control and or manage lower layer state variables that may require power. Put another way the checking module may efficiently reject proposed network state associated with lower layer state variables of a device if a power state variable indicates that power to the device is shut off. Or in some instances applications may be informed that the power state variable indicates that power to the device is shut off and therefore the applications may not even propose and or suggest a change to a lower layer state variable of the because the device is shut off.

In various embodiments the checking module resolves a detected conflict e.g. selects a proposed network state to accept using an example last write win mechanism also referred to as a last to commit or an example locking mechanism. Using the last write win mechanism the checking module is configured to accept a suggested change to a state variable based on when e.g. a time a proposed network state is received. For example if the checking module detects a conflict between two proposed network states the checking module accepts or selects a more recently i.e. newer received proposed network state instead of an older proposed network state that was received before the newer proposed network state.

Using the locking mechanism the checking module enables an application to exclusively lock a state variable before providing a proposed network state. The checking module may also enable an application to exclusively lock a device or a communication path before providing a proposed network state which may affect multiple state variables associated with the locked device or the locked communication path . Once a device a communication path and or a state variable is are locked e.g. via an instruction to lock a specific state variable a device or a communication path the checking module will not accept state variable changes from applications other than the one or more applications that initiated the lock e.g. a lock holding application . Put another way the checking module rejects proposed network states that are associated with a lock if the proposing application is not a lock holding application.

In additional embodiments the checking module resolves a detected conflict e.g. selects a proposed network state to accept using a priority based mechanism. For instance the checking module may determine that a first application is responsible for controlling and managing a network function that may be more important and or more valuable e.g. the operation of network depends heavily on the network function than a different network function controlled and managed by another application. Therefore the checking module may access a ranked or weighted application list that indicates one application has a priority over another application. In some implementations the priority may indicate that a particular network function being controlled or managed has a priority over another network function.

The state variables and or dependencies between state variables may be defined by one or more of an entity operating the network management service a manufacturer or producer of network equipment e.g. devices a developer of an application e.g. one of applications . . . N managing and controlling a network function or a network aspect or an entity served by a network. Thus the state dependency graph stored in the state dependency graph store and accessible by the checking module to determine whether or not a conflict between two proposed networks states exists may continue to evolve and or be updated. For example a particular state variable may be newly introduced to the state dependency graph or removed from the state dependency graph. Or a dependency between two state variables may be newly introduced to the state dependency graph or removed from the state dependency graph.

The checking module also generates the target network state by determining whether or not a defined policy is violated by the target network state or by merging two or more proposed network states . Thus the checking module is configured to access and evaluate a policies store to ensure that the target network state does not violate any defined policies e.g. is free of policy violations . By enforcing policies the network management service can ensure that network failures caused by applications e.g. misbehaving applications are mitigated or limited. For instance after merging non conflicting proposed network states to generate a target network state the checking module may determine whether or not the target network state violates one or more service level agreements SLAs . In one implementation an SLA may define a policy that ensures the network operates at or above i a minimum network capacity level and or ii a minimum reachability level to ensure that network topology remains connected so that devices that host services provided by the network can continue to operate efficiently e.g. survive any single failure of a switching device .

A first example SLA may be defined to ensure that the network is not partitioned. This example SLA relates to the topology characteristics of a network e.g. a DCN and may be associated with connectivity of Top of Rack ToR switches. Specifically this example SLA may require that any ToR switch can reach any other ToR in the same network based on the physical network topology. This example SLA may also require that any ToR switch can connect to the border routers within its network thereby indicating the ToR switch has wide area network WAN reachability.

A second example SLA may be defined to ensure capacity between two devices e.g. ToR switches . Therefore this example SLA may ensure that capacity from a first ToR switch to a second ToR switch within the network satisfies a max flow volume. The checking module may calculate a current capacity of the ToR switch pair and compare the calculated current capacity with an original capacity calculated for a designed network topology. This example SLA may be defined to ensure that a minimum percentage p of ToR switch pairs e.g. ninety percent ninety five percent etc. within the network have at least pre determined threshold t of an original capacity e.g. fifty percent sixty percent etc. . The parameters p and t are configurable and may be set by the network management service an application e.g. one of . . . N or another entity. For example the parameters may be set in accordance with balance factors including an amount of redundancy a network may have for tolerating capacity loss and or traffic behaviors of services hosted by the network.

In various embodiments policies may be implemented as functions over a network graph data structure of the network. The network graph data structure may contain the network topology and the functions may return Boolean results indicating whether or not the target network state and or non conflicting merged proposed network states violate defined policies.

Similar to the state variables and or dependencies the policies may also be defined by one or more of an entity operating the network management service a manufacturer or producer of network equipment e.g. devices a developer of an application e.g. one of applications . . . N managing and controlling a network function or a network aspect or an entity served by a network. Thus the policies stored in the policies store and accessible by the checking module to determine whether a policy is violated may continue to evolve and or to be updated.

The updating module is configured to update the managed network in accordance with the target network state . Therefore the updating module may determine or calculate difference s between the observed network state and the target network state and generate specific commands e.g. device specific commands to apply to the network based on the determined and or calculated differences. For instance the updating module may maintain a command pool that contains command templates for individual update actions for a particular type of switching device e.g. based on manufacturer and or vendor where an update action may be supported by various control protocols e.g. a specific vendor API OpenFlow etc. . The updating module may be configured to locate a command template in the command pool so that commands can be generated to correctly implement an update to a state variable. Consequently the updating module is configured to issue update commands on behalf of the applications . . . N so that the applications do not have to understand the heterogeneous nature of updating various devices. Put another way the network changes proposed by the applications i.e. the proposed network states may be generic and do not need to specify specific hardware commands to change a current state variable value to a desired state variable value.

In various embodiments the updating module may implement changes based on the target network state in accordance with a schedule. For example the updating module may generate a final target network state and begin implementing changes in accordance with a periodic schedule e.g. every minute every three minutes every ten minutes every hour every three hours every day etc. . In various embodiments the updating module may be constantly moving the network from a current network state e.g. the observed network state to a target network state e.g. until convergence of the target network state is realized . Thus the updating module may continue to update a network based on a target network state that is continually evolving and being updated.

In various embodiments a device includes one or more communication unit s . The communication unit s may be configured to facilitate a wired and or wireless connection to one or more networks e.g. network applications . . . N operated by various service or content providers and or other devices. Therefore the communication unit s may implement one or more of various communications or network connection protocols.

As discussed above the checking module is configured to receive the proposed network states and determine that a conflict exists between proposed network states and because each of applications and may be suggesting that state variable be changed to a different value. Thus the checking module may select and accept one of proposed network states and due to the detected conflict and conversely reject the other proposed network state. As discussed above the selection may be made based on a last write win mechanism a locking mechanism or a priority based mechanism. Thus shows that the checking module selects and accepts proposed network state and merges the accepted proposed network state with other non conflicting proposed network states that comprise the target network state . Conversely the checking module rejects proposed network state .

Similarly the checking module is configured to determine that a conflict exists between proposed network states and N because e.g. as defined by the dependency in a desired value of state variable suggested by application may be incompatible with a desired value of state variable suggested by application N . Thus the checking module may select and accept one of proposed network states and N due to the detected conflict and conversely reject the other proposed network state. shows that the checking module selects and accepts proposed network state N and merges the accepted proposed network state N with other non conflicting proposed network states that comprise the target network state . Conversely the checking module rejects proposed network state .

In some implementations the checking module is configured to communicate an acceptance or rejection of a proposed network state to the applications so that the applications are aware of whether or not their suggested change can be implemented on the network. The checking module may also or alternatively store an indication of whether a proposed network state was accepted or rejected so that the applications . . . N can be informed of and or react to an acceptance or rejection of a proposed network state. For example the checking module may store e.g. in the state variables store a status entry indicating a proposed network state the application that submitted the proposed network state and or reasons the proposed network state was accepted or rejected.

The updating module is then configured to determine differences between the observed network state and the target network state and update the managed network so that the state changes from the observed network state to the target network state . In various embodiments the observed network state used by the updating module to determine the differences is the same observed network state provided to the applications . . . N . In scenarios where the state of the network has changed after the observed network state is initially provided to the applications . . . N the observed network state used by the updating module to determine the differences may be a more recent observed network state that includes one or more state variables that may be different than those included in the observed network state provided to the applications . . . N . Put another way the monitoring module may have read updated values for one or more state variables after providing the observed network state to the applications . . . N and while the checking module is generating the target network state .

The order in which the operations are described is not intended to be construed as a limitation and any number of the described operations can be combined in any order and or in parallel to implement the processes.

At the network management service is configured to define state variables for a network or receive state variable definitions. The state variables may be defined by applications that manage the network e.g. applications . . . N by vendors or manufacturers of network equipment e.g. devices and or by the network management service .

At the network management service is configured to define dependencies between state variables. The dependencies may also be defined by applications that manage the network e.g. applications . . . N by vendors or manufacturers of network equipment e.g. devices and or by the network management service . For example a device configuration control application that may want to propose that a device configuration state variable be changed from a first configuration e.g. a first value to a second configuration e.g. a second value may understand that the second configuration of the device depends on a particular value of a firmware version state variable e.g. the device is required to be running a new operating system instead of an older operating system . Dependencies may also be defined for an individual state variable e.g. a state variable may not simultaneously have two different values .

At the network management service is configured to generate a state dependency graph for the network. The state dependency graph is generated based on the dependencies defined in operation to ensure that state conflicts can be detected and resolved before the network is updated. Thus the efficiency and reliability of the network is improved e.g. at least because two or more independently operated applications are unable to attempt to i simultaneously control e.g. directly write to the same state variable e.g. set the state variable to two or more different values and ii change two or more state variables to values that may be incompatible and or damaging to the network.

At the network management service is configured to define policies for operating the network. Again the policies may be defined by applications that manage the network e.g. applications . . . N by vendors or manufacturers of network equipment e.g. devices by the network management service e.g. an entity that administers the network and or by an entity being served by the network e.g. a company an education establishment a non profit organization etc. . In various embodiments the policies are service level agreements established to ensure that a network operates at or above a minimum level of service e.g. for customers .

At the network management service is configured to use the generated state dependency graph and the defined policies to manage the network. For example the generated state dependency graph is used to ensure that state conflicts between proposed network states are avoided and the defined polices are used to ensure that the network performance does not fall below a minimum level of service.

The example process may be implemented as part of an on going network management and maintenance task. Thus state variables dependencies and or policies may continue to be defined and updated over a period of time and in return the state dependency graph may be updated as well. The example process may also be implemented part of an initial establishment of a network e.g. the building of an administrative network to perform a service .

At the monitoring module reads the observed network state . As discussed above the monitoring module may read current values for various state variables that comprise the network state and then store the read values in the state variables store e.g. as key value pairs .

At the monitoring module provides at least part of the observed network state to individual applications e.g. applications . . . N . For example the monitoring module may provide via a push technique one or more state variable values to a particular application the state variable values provided to the particular application being relevant to a network function and or network aspect being managed and controlled by the particular application. In another example the monitoring module may provide one or more state variable values to a particular application in response to receiving a request for the one or more state variable values e.g. a pull request .

At the checking module receives proposed network states from the applications. An individual proposed network state suggests a change to the observed network state the change indicating that a state variable be changed from the observed value to a desired value. As discussed above the observed value to be changed may be the observed value communicated to the particular application or may be an updated observed value read and stored by the monitoring module in an event the value was updated or changed in between the provision of the observed value to the particular application and the reception of the proposed network state from the particular application.

At the checking module merges a subset of the proposed network states received into a target network state using a state dependency graph. Thus the proposed network states merged into the target network state are free of state conflicts and therefore are non conflicting proposed network states. If the checking module detects a conflict between two or more proposed network state the checking module may select and accept one proposed network state and reject the others. In various embodiments the selection may be made based on a last write win mechanism a locking mechanism or a priority based mechanism.

In various implementations the checking module may determine whether a state variable can be written to and or whether conflicts exist based on a state dependency graph structured according to a multi layer hierarchy. Using the multi layer hierarchy the checking module can be more efficient in merging proposed network states. For example a top layer of the multi layered state dependency graph may include power state variables of a device . If a power state variable has a value indicating power is shut off then other state variables in layers lower than the power state variable layer may be invalid or null because there is no power. Thus any proposed network states associated with these lower layers may be rejected if the power is shut off. If power is properly provided to the device e.g. the power state variable has a value indicating power is turned on the network management service can then move to the next layer in the multi layer hierarchy and control device firmware state variables so that the device executes particular firmware. Continuing this example a device firmware state variable may be a prerequisite for managing device configuration state variables that are part of a next layer in the multi layer hierarchy. Once a device configuration state is set to a particular value the network management service can manage routing control state variable. Therefore the checking module may accept and or reject proposed network states based on an understanding of dependencies established for a multi layered state dependency graph.

At the checking module determines if the target network state violates defined policies. In various embodiments the checking module may perform this determination each time a proposed network state is added to or merged with the target network state comprising non conflicting proposed network states that have already been merged e.g. a target network state not yet completed and ready to be written to the network by the updating module . In various embodiments the checking module may perform this determination after the target network state is completed and ready to be written to the network by the updating module .

At in various embodiments the checking module may update the target network state so that it complies with the defined policies. For example if a violation is determined at operation the checking module may remove one or more non conflicting proposed network states from the target network state to address the violation and to ensure that the target network state complies with the defined policies.

At the updating module changes a state of the network to the target network state e.g. convert the observed network state communicated to the applications to the target network state convert an updated or more recent observed network state to the target network state . For example the updating module may determine differences between the current network state and the target network state generate commands based on the differences and then issue the commands e.g. write the changes to the devices of the network so that state variables can be changed from current values observed by the network management service to values desired by the applications.

At the checking module is provided a proposed network state. The provided proposed network state may be one of the proposed network states received from various applications in response to the reading storage and provision of a recent observed network state.

One or more of the individual operations within are then performed to determine whether the provided proposed network state is to be merged into a target network state. The individual operations in may be performed by accessing the state dependency graph and or the defined policies. At A the checking module determines whether a state conflict exists between the provided proposed network state and a most recent observed network state. In some instances the most recent observed network state may be the observed network state provided to the applications. In some instances the most recent observed network state may be different than the observed network state provided to the applications. Therefore some state variable and or state variable values may no longer be meaningful.

For example the monitoring module may have initially read that a device was powered on and communicated such to an application. In response the application may submit a proposed network state that suggests a change to a value for a firmware version state variable. However power to the device that used to be powered on may have been shut off so the device can be repaired for example. Consequently the observed network state has changed by the time the proposed network state that suggests the change to the value for the firmware version state variable is received and processed by the checking module . Due to the power being shut off and the firmware version state variable depending on a power state variable the firmware version state variable is a temporarily uncontrollable state variable. e.g. until power to the device is turned back on . In this example the propose network state is rejected by the checking module .

At B the checking module determines whether a state conflict exists between the provided proposed network state and a target network state. The target network state may include non conflicting proposed network states that have been previously accepted by the checking module and merged into the target network state before a final target network state is ready to be written to the network by the updating module . Thus the checking module may run a check between the provided proposed network state and each non conflicting proposed network state already merged into the target network state to detect a state conflict.

At C the checking module determines whether merging the provided the proposed network state into the target network state results in a policy violation.

At decision block the checking module determines whether a conflict from operation A or operation B is detected or if a policy violation from operation C is detected. If the answer to decision block is No then at the checking module accepts the provided proposed network state and merges the provided proposed network state into the target network state. The iterative process then returns to operation where the checking module is provided a next proposed network state.

If the answer to decision block is Yes then at the checking module rejects the provided proposed network state and does not merge the provided proposed network state into the target network state so that state conflicts are avoided and or so that the target network state complies with defined policies. The iterative process then returns to operation where the checking module is provided a next proposed network state.

In various embodiments instead of rejecting the provided proposed network state at operation the checking module may remove from the target network state a conflicting proposed network state that has already been merged into the target network state. Then the checking module may be able to accept the provided proposed network state and merge the provided proposed network state into the target network state even after a conflict is detected. This may occur when the provided proposed network state has priority over a conflicting proposed network state that has already been merged into the target network state.

Although the present disclosure may use language that is specific to structural features and or methodological acts the invention is not limited to the specific features or acts described herein. Rather the specific features and acts are disclosed as illustrative forms of implementing the invention.

