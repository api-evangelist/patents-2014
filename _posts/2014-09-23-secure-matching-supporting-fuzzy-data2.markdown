---

title: Secure matching supporting fuzzy data
abstract: Provided are techniques for secure matching supporting fuzzy data. A first bloom filter for a first data element is retrieved, wherein each of the characters in the data element has been encrypted with a beginning offset position of the character and encrypted with an end offset position of the character to produce two encrypted values that are added to the first bloom filter. A second bloom filter for a second data element is retrieved. The first bloom filter and the second bloom filter are compared to determine whether there is a match between the first data element and the second data element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652512&OS=09652512&RS=09652512
owner: International Business Machines Corporation
number: 09652512
owner_city: Armonk
owner_country: US
publication_date: 20140923
---
In the domain of information integration data quality is important for master data management data warehousing system consolidation projects etc. Information integration identifies duplicate data records either within a source or across multiple data sources. Also some data may need to be stored and or processed securely.

Various data masking and encryption techniques may be applied to secure the data. For example alteration techniques shuffle the order of values within a column but leave the original values untouched. This retains data quality issues such as typos on the individual values. As another example A Secure Hashing Algorithm SHA 2 is a hashing function that is used to provide encryption of data. SHA 2 is currently considered collision free which means that two different input values are mapped to two different output values. As a consequence a data quality metric like uniqueness can still be checked for on SHA 2 encrypted values because if the source value set was unique due to the collision free characteristic the encrypted value set will be unique as well. However on the encrypted data information related to typos and other data quality issues in the data may be lost.

Some systems use probabilistic matching procedures. For probabilistic matching scores for two or more records are computed measuring how similar they are. The matching process usually considers multiple attributes and each of the attributes has a different weight regarding the outcome of the overall score e.g. a date of birth field may have more weight then a middle name field due to its higher significance if the same similar value is found across two records . The weight assignment for each attribute is part of the configuration of the matching procedure. For each comparison of an attribute across two or more records rules can be specified such as 

Some systems address the fuzzy matching logic problem on encrypted keyword data by implementing a limited wildcard character syntax for a given keyword value where each conceivable wildcard permutation of a given keyword is encrypted and placed in an index e.g. cat c t ca at . This approach dictates that each keyword and all wildcard permutations are to be generated encrypted and indexed prior to a search since each permutation of a given word is indexed.

Provided is a method for secure matching supporting fuzzy data. A first bloom filter for a first data element is retrieved wherein each of the characters in the data element has been encrypted with a beginning offset position of the character and encrypted with an end offset position of the character to produce two encrypted values that are added to the first bloom filter. A second bloom filter for a second data element is retrieved. The first bloom filter and the second bloom filter are compared to determine whether there is a match between the first data element and the second data element.

Provided is a computer program product for secure matching supporting fuzzy data. The computer program product comprises a computer readable storage medium having program code embodied therewith the program code executable by at least one processor to retrieve by the at least one processor a first bloom filter for a first data element wherein each of the characters in the data element has been encrypted with a beginning offset position of the character and encrypted with an end offset position of the character to produce two encrypted values that are added to the first bloom filter retrieve by the at least one processor a second bloom filter for a second data element and compare by the at least one processor the first bloom filter and the second bloom filter to determine whether there is a match between the first data element and the second data element.

Provided is a computer system for secure matching supporting fuzzy data. The computer system includes one or more processors one or more computer readable memories and one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to 

retrieve a first bloom filter for a first data element wherein each of the characters in the data element has been encrypted with a beginning offset position of the character and encrypted with an end offset position of the character to produce two encrypted values that are added to the first bloom filter retrieve a second bloom filter for a second data element and compare the first bloom filter and the second bloom filter to determine whether there is a match between the first data element and the second data element.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

In certain embodiments the SMSFD system includes an Application Programming Interface API that receives the query from the client application .

In certain embodiments the client application creates the bloom filter. For example a search expression is submitted by a user of the client application with a string comparison syntax specific query e.g. regular expression regex standard string match wildcard etc. and the client application converts the search expression into one or more bloom filters. The client application submits the one or more bloom filters coupled by logical operations AND operators OR operators or a combination of these to the SMSFD system at the server computing device . This prevents the actual search terms from being available to the SMSFD system while the query is being evaluated by the SMSFD system . Thus the SMSFD system does not receive an unencrypted query.

For a given character in a search term 1 the given character is coupled with the relative offset of that given character from a beginning of the search term and encrypted together to produce a single encrypted value and 2 the given character is coupled with the relative offset of that given character from an end of the search term and encrypted together to produce a single encrypted value. Thus there are N 2 encrypted values where N represents the number of characters . So for each given character there are two encrypted values that are placed into a bloom filter.

In certain embodiments the secret base character offset is mutually agreed upon by authorized parties. In certain alternative embodiments a secret base character offset is randomly generated.

The server computing device is coupled to a data store . The data store includes data elements e.g. one or more search terms and at least some of the data elements are encrypted data elements with associated bloom filters . The SMSFD system compares bloom filters to determine whether search terms represented by those bloom filters match based on fuzzy matching.

In certain embodiments for each encrypted data element persisted in there is a bloom filter used for comparison against bloom filters submitted as queries by the client application . The encrypted data elements may be encrypted by standard encryption techniques e.g. symmetric or asymmetric techniques . So for each data element stored in there are two encryptions 1 one as a bloom filter for comparisons with other bloom filters and 2 one as encrypted data elements using standard encryption for returning back to the client application . The client application may perform further processing to eliminate false positives or elements that were considered a match by the SMSFD system but that further filtering using e.g. regular expression regex standard string match wildcard etc. deemed not a match. The client application may also perform decryption of any returned encrypted data elements .

The bloom filters generated for other search terms may have been generated and stored before receiving the query or may be generated after receiving the query.

Fuzzy data may be described as any data that is not cleansed and standardized and thus may be incomplete incorrect inconsistent in a wrong format or may contain any other error in the data. Matching may be described as the ability to detect duplicated information in two or more records in a record set. Fuzzy matching may be described as probabilistic matching techniques that have the ability to identify reliably duplicate records even when the data records contain attributes with fuzzy data.

The SMSFD system supports fuzzy matching on a securely encrypted data element where comparisons with the data element using a devised string comparison technique utilize a bloom filter as the basis for comparison. A bloom filter may be described as a data structure with entries for storing indicators. In certain embodiments the data structure is an array and the indicators are bits.

In certain embodiments each entry in the bloom filter is composed of an encrypted pair value and the encrypted pair value is composed of a character value of the data element at a given relative offset and an offset position value with respect to the beginning or ending offset of the data element. In certain embodiments the beginning base offset position value is mutually agreed upon between authorized parties e.g. between users using the client computing device and the server computing device and is a shared secret between the authorized parties. In certain embodiments the number of entries produced is N 2 where N is the number of characters in the data element.

Due to data privacy legislation sensitive data has to be masked encrypted otherwise protected e.g. alteration techniques so that during development test and production users with the appropriate privileges are able to access the information and users without such privileges are not able to access the information . For example a developer may not have privileges to access credit card Social Security Number SSN date of birth health related information etc. while developing information integration code. The SMSFD system uses test data with the same data quality characteristics as the production data.

With the rise of cloud computing companies are also looking at performing information integration development test and production processing using cloud environments. In the case of public cloud services for information integration the SMSFD system allows the sensitive portions of data to be secure.

Fuzzy matching includes investigating standardizing matching and deduplicating e.g. survivorship merge .

In the investigate process the data is lexically analyzed. For example the following values in a street address may be parsed into 4 tokens 

Applying the semantic context of the tokens the investigate process may suggest the following three attributes by correctly interpreting the first two tokens representing the street name as well as by being able to detect that St. and Str. are likely in both cases to indicate the street type street rather than avenue road etc. 

For the tokenization of the input value into tokens and the ability to correctly identify St. and Str . as abbreviations for the street type street information inherent in the data itself is exploited e.g. whitespace as token separator .

For the standardization based on the patterns detected the standardized output of the standardization process will look like the following for the two examples above 

In particular the embodiments use bloom filters and the notion of data element offset position pairs on which encryption using bloom filters are applied where the offset position is measured to beginning and end creating two encrypted values. With embodiments the client application sets indicators for the offset positions in entries of the bloom filter. Then for the fuzzy matching the SMSFD system performs logical operations between bloom filters.

Although the example of shows the indicators in the bloom filter being set based on encryption of the characters and the beginning offset as well as encryption of the characters and the end offset in certain embodiments either the beginning offset or the end offset is used.

In certain embodiments the SMSFD system performs a fuzzy match comparison against a bloom filter which may be described as an encrypted data element without having access to the encryption key used to create the data element and without having knowledge of the beginning or end base character offset position that serves as a secret key between authorized parties.

In block the SMSFD system performs a logical operation of the first bloom filter and the second bloom filter. In certain embodiments the SMSFD system performs the logical operation based on indicators in the first bloom filter and indicators in the second bloom filter. In certain embodiments the processing of block generates a third bloom filter.

In block the SMSFD system determines whether the first bloom filter and the second bloom filter match. If so processing continues to block otherwise processing continues to block . In block the SMSFD system indicates that there is a match. In certain embodiments if there is a match SMSFD system returns the second data element associated with the second bloom filter to the client application and the client application may decrypt the second data element e.g. one or more search terms and eliminate a false positive e.g. via re evaluation of unencrypted search terms from the query and from the decryption . In block the SMSFD system indicates that there is no match.

In certain embodiments the indicators are bits and the comparison is a bitwise AND operation or a bitwise OR operation and if the bit array resulting from the bitwise operation equals the bits in the first bloom filter e.g. the query then the SMSFD system determines that there is a match.

The processing of may be performed any number of times to compare the first bloom filter to other bloom filters.

In certain embodiments the SMSFD system may provide a user interface supporting graphical configuration of the matching. Configuring the matching procedures includes identifying under which circumstances values are still considered equal. Example rules include but are not limited to a number of permissible typos equality if format is converted e.g. US versus European dates etc. In addition weights that contribute to the overall match score may be set. Embodiments provide a user interface to enable a user to provide such rules and weights.

In the client application generates a first bloom filter by encrypting pre and n and their offset positions and sends the first bloom filter to the SMSFD system . The SMSFD system compares the first bloom filter to a second bloom filter sent from the client application or some other entity and the result is a third bloom filter . Because the third bloom filter matches the first bloom filter the SMSFD system indicates to the client application that the first bloom filter and the second bloom filter match.

In certain embodiments the SMSFD system uses two or more bloom filters for a query. In such embodiments an OR operation may be used for the comparison.

The following is an example of using two bloom filters that are submitted with a query to determine matches within a data store. In this example a user wants to search for all records in the data store that contain a word that starts with co and ends with tion . Using this as the basis for a query two bloom filters are constructed. The secret base offset in this example is 99. The following is the processing to create the query 

Then the SMSFD system submits a Boolean AND query using bloom filter 1 and bloom filter 2 as operands e.g. AND .

In this example the query is the logical representation of the query and may be further optimized by performing a bitwise OR of the two operands and submitting a single bloom filter as the constraint as the AND operation is effectively stating that all bits turned on 1 in both bloom filters need to be on in other bloom filters that are used in comparisons.

In certain embodiments the SMSFD system uses phonetics. Furthermore to support even more fuzziness phonetic algorithms may be applied to create for names addresses etc. a phonetic representation. For example in German language the last names Sehger and Seeger cannot be differentiated if spoken because in both cases the spoken version has a long ee audible after the S but both spellings are valid representations of a last name. So in the matching procedure additional comparisons may be performed using the phonetic representations of values. The phonetic representation of Sehger and Seeger would be the same so comparing the values for these two on the phonetic value would be an exact match whereas the comparison on the original values Sehger and Seeger would lead to a non exact match with one letter difference .

In certain embodiments the SMSFD system supports secure fuzzy matching in cloud computing environments. In certain embodiments the SMSFD system supports secure fuzzy matching if developers are not supposed to see the original data due to legislation and or data privacy concerns.

Embodiments do not impose a specific fuzzy matching syntax and so the equivalent logic of most common string matching algorithms may be implemented where the underlying comparison logic ultimately relies on comparison on a character offset position by character offset position basis.

Embodiments uses the offset positional information that is encrypted along with each character and the random beginning base offset value only shared by authorized parties. Since only authorized parties are privy to the beginning base offset used during encryption of a data element a brute force attack on the character set would have to consider the offset position as well. Depending on the possible numeric range used to represent the beginning base offset it would become increasingly difficult to determine the corresponding encrypted output of a given character at the correct offset position with any degree of certainty. The process of placing the encrypted character offset position within a bloom filter further obfuscates the true identity as bits in a bloom filter bit array can be shared and thus various combinations of bits within the bit array become ambiguous as each bit may help represent multiple entries within the bloom filter. This is a product of the probabilistic nature of the bloom filter where false positives are expected to a certain degree.

Thus embodiments stipulate a way of augmenting data elements to be encrypted so that the data elements can still be compared probabilistically.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to a processor or processing unit .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and secure matching supporting fuzzy data.

Thus in certain embodiments software or a program implementing secure matching supporting fuzzy data in accordance with embodiments described herein is provided as a service in a cloud environment.

In certain embodiments the client computing device and or the server computing device has the architecture of computing node . In certain embodiments the client computing device and or the server computing device is part of a cloud environment. In certain alternative embodiments the client computing device and or the server computing device is not part of a cloud environment.

In certain embodiments the client computing device is a cloud gateway appliance . In such embodiments users interface directly with the cloud gateway appliance in a private network that serves as a direct connect to the cloud.

In certain embodiments the client computing device is any computing device with the client application loaded with an API to perform bloom filter search.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flow diagram e.g. flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowcharts illustration and combinations of blocks in the block diagrams and or flowcharts illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In addition the illustrated operations of the flow diagrams and block diagrams show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The code implementing the described operations may further be implemented in hardware logic or circuitry e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. The hardware logic may be coupled to a processor to perform operations.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of embodiments of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the invention the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

